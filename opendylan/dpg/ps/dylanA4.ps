%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            true def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 595.3 841.9 0 1 30 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Palatino-Bold FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /Courier-BoldOblique FMFONTDEFINE
7 0 /Helvetica-Bold FMFONTDEFINE
8 0 /Helvetica FMFONTDEFINE
9 0 /Helvetica-Oblique FMFONTDEFINE
10 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 30 Q
0 X
0 0 0 1 0 0 0 K
-1.1 (Dylan Pr) 99.65 616.95 S
-1.1 (ogramming) 204.46 616.95 S
1 13 Q
(Neal Feinber) 99.65 452.29 T
(g) 173.33 452.29 T
(Sonya E. Keene) 99.65 433.29 T
(Robert O. Mathews) 99.65 414.29 T
(P) 99.65 395.29 T
(. T) 105.82 395.29 T
(ucker W) 119.12 395.29 T
(ithington) 166.86 395.29 T
2 12 Q
(Harlequin) 99.65 362.95 T
(The Late-Binding Company\252) 99.65 348.95 T
1 13 Q
(Draft June 25, 1996) 99.65 264.29 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Copyright 1994, 1995, 1996 by The Harlequin Gr) 108.65 553.29 T
(oup Limited.) 321.33 553.29 T
(All rights r) 108.65 531.29 T
(eserved.) 156.76 531.29 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "v" 3
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
98.82 571.79 494.82 667.29 R
7 X
0 0 0 1 0 0 0 K
V
1 30 Q
0 X
(Contents) 98.82 591.12 T
98.82 571.79 494.82 667.29 C
0 0 0 1 0 0 0 K
98.82 626.12 395.82 656.29 C
0 0 0 1 0 0 0 K
95.48 641.12 257.48 641.12 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
95.48 632.12 257.48 632.12 2 L
1 H
N
0 0 0 1 0 0 0 K
98.82 571.79 494.82 667.29 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
99.65 150.95 477.65 456.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 114.95 495.65 132.95 R
V
2 9.5 Q
0 X
(v) 295.01 126.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 159.95 495.65 456.95 R
7 X
V
1 11 Q
0 X
(Preface) 126.65 449.62 T
(xi) 173.22 449.62 T
3 13 Q
(Part I.) 230.13 419.29 T
(Basic Concepts) 266.26 419.29 T
(1) 359.23 419.29 T
(1) 99.65 394.29 T
(Introduction) 126.65 394.29 T
(3) 201.83 394.29 T
1 11 Q
(1.1) 126.65 374.62 T
(Modular) 162.65 374.62 T
(, r) 204.65 374.62 T
(eusable, component-oriented pr) 214.29 374.62 T
(ograms  6) 369.26 374.62 T
(1.2) 126.65 360.62 T
(Powerful and familiar pr) 162.65 360.62 T
(ocedural pr) 283.54 360.62 T
(ogramming  7) 339.61 360.62 T
(1.3) 126.65 346.62 T
(Rapid and pr) 162.65 346.62 T
(oductive development of pr) 226.91 346.62 T
(ograms  8) 362.36 346.62 T
(1.4) 126.65 332.62 T
(Delivery of safe, ef) 162.65 332.62 T
(\336cient, compact applications  9) 253.28 332.62 T
3 13 Q
(2) 99.65 310.29 T
(Quick Start) 126.65 310.29 T
(11) 196.52 310.29 T
1 11 Q
(2.1) 126.65 290.62 T
(Dialog with a Dylan listener  1) 162.65 290.62 T
(1) 310.11 290.62 T
(2.2) 126.65 276.62 T
(Simple arithmetic operations  12) 162.65 276.62 T
(2.3) 126.65 262.62 T
(V) 162.65 262.62 T
(ariables and constants  14) 169.58 262.62 T
(2.4) 126.65 248.62 T
(Formatted output  19) 162.65 248.62 T
(2.5) 126.65 234.62 T
(A complete Dylan pr) 162.65 234.62 T
(ogram  20) 264.49 234.62 T
(2.6) 126.65 220.62 T
(Summary  24) 162.65 220.62 T
3 13 Q
(3) 99.65 198.29 T
(Methods, Classes, and Objects) 126.65 198.29 T
(27) 296.65 198.29 T
1 11 Q
(3.1) 126.65 178.62 T
(Method de\336nitions  27) 162.65 178.62 T
(3.2) 126.65 164.62 T
(Classes  30) 162.65 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 3
%%Page: "vi" 4
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(vi) 63.65 702.62 T
0 F
(Contents) 81.59 702.62 T
63.65 105.95 495.65 132.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 143.1 495.65 672.95 R
V
1 11 Q
0 X
(3.3) 126.65 665.62 T
(Objects  34) 162.65 665.62 T
(3.4) 126.65 651.62 T
(Summary  38) 162.65 651.62 T
3 13 Q
(4) 99.65 629.29 T
(User-Defined Classes and Methods) 126.65 629.29 T
(39) 317.96 629.29 T
1 11 Q
(4.1) 126.65 609.62 T
(Requir) 162.65 609.62 T
(ements of the time and position classes and methods  39) 195.41 609.62 T
(4.2) 126.65 595.62 T
(User) 162.65 595.62 T
(-de\336ned classes  40) 185.29 595.62 T
(4.3) 126.65 581.62 T
(Use of) 162.65 581.62 T
4 10 Q
(make) 196.31 581.62 T
1 11 Q
( to cr) 220.31 581.62 T
(eate an instance  41) 244.43 581.62 T
(4.4) 126.65 567.62 T
(Getters and setters of slot values  42) 162.65 567.62 T
(4.5) 126.65 553.62 T
(Initialization of slots when instances ar) 162.65 553.62 T
(e made  42) 351.85 553.62 T
(4.6) 126.65 539.62 T
(Methods for handling time  45) 162.65 539.62 T
(4.7) 126.65 525.62 T
(Summary  51) 162.65 525.62 T
3 13 Q
(5) 99.65 503.29 T
(Class Inheritance) 126.65 503.29 T
(53) 227.93 503.29 T
1 11 Q
(5.1) 126.65 483.62 T
(The) 162.65 483.62 T
4 10 Q
(<time-offset>) 183.81 483.62 T
1 11 Q
( class and methods  53) 261.81 483.62 T
(5.2) 126.65 469.62 T
(Class inheritance  57) 162.65 469.62 T
(5.3) 126.65 455.62 T
(Methods for classes that use inheritance  60) 162.65 455.62 T
(5.4) 126.65 441.62 T
(Rede\336nition of a method  61) 162.65 441.62 T
(5.5) 126.65 427.62 T
(Method dispatch  63) 162.65 427.62 T
(5.6) 126.65 413.62 T
(De\336nition of a generic function  66) 162.65 413.62 T
(5.7) 126.65 399.62 T
(Use of) 162.65 399.62 T
4 10 Q
(next-method) 196.31 399.62 T
1 11 Q
( to call another method  69) 262.31 399.62 T
(5.8) 126.65 385.62 T
(The time library \050so far\051  71) 162.65 385.62 T
(5.9) 126.65 371.62 T
(Summary  74) 162.65 371.62 T
3 13 Q
(6) 99.65 349.29 T
(Multimethods) 126.65 349.29 T
(75) 208.94 349.29 T
1 11 Q
(6.1) 126.65 329.62 T
(Methods for the) 162.65 329.62 T
4 10 Q
(+) 243.22 329.62 T
1 11 Q
( generic function  75) 249.22 329.62 T
(6.2) 126.65 315.62 T
(Method dispatch for multimethods  79) 162.65 315.62 T
(6.3) 126.65 301.62 T
(Methods for comparison of times  81) 162.65 301.62 T
(6.4) 126.65 287.62 T
(Summary  81) 162.65 287.62 T
3 13 Q
(7) 99.65 265.29 T
(Modularity) 126.65 265.29 T
(83) 193.55 265.29 T
1 11 Q
(7.1) 126.65 245.62 T
(Requir) 162.65 245.62 T
(ements of the position classes  83) 195.41 245.62 T
(7.2) 126.65 231.62 T
(Initial class de\336nitions  84) 162.65 231.62 T
(7.3) 126.65 217.62 T
(Abstract classes  85) 162.65 217.62 T
(7.4) 126.65 203.62 T
(Absolute position  86) 162.65 203.62 T
(7.5) 126.65 189.62 T
(Relative position  90) 162.65 189.62 T
(7.6) 126.65 175.62 T
(Meeting of angles and times  92) 162.65 175.62 T
(7.7) 126.65 161.62 T
(Abstract, concrete, and instantiable classes  95) 162.65 161.62 T
(7.8) 126.65 147.62 T
(Summary  96) 162.65 147.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vi" 4
%%Page: "vii" 5
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 475.7 702.62 T
2 F
(vii) 520.04 702.62 T
99.65 107.12 531.65 132.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 146.67 495.65 672.95 R
V
3 13 Q
0 X
(8) 99.65 664.29 T
(A Simple Library) 126.65 664.29 T
(99) 224.37 664.29 T
1 11 Q
(8.1) 126.65 644.62 T
(The LID \336le  100) 162.65 644.62 T
(8.2) 126.65 630.62 T
(The library \336le  100) 162.65 630.62 T
(8.3) 126.65 616.62 T
(The implementation \336le  100) 162.65 616.62 T
(8.4) 126.65 602.62 T
(The test \336le  105) 162.65 602.62 T
(8.5) 126.65 588.62 T
(Summary  106) 162.65 588.62 T
3 13 Q
(Part II.) 212.35 560.29 T
(Intermediate Topics) 251.45 560.29 T
(107) 365.16 560.29 T
(9) 99.65 535.29 T
(Nonclass Types) 126.65 535.29 T
(109) 220.82 535.29 T
1 11 Q
(9.1) 126.65 515.62 T
(Functions that cr) 162.65 515.62 T
(eate nonclass types  109) 244.15 515.62 T
(9.2) 126.65 501.62 T
(Examples of types that ar) 162.65 501.62 T
(e not classes  1) 285.64 501.62 T
(10) 355.64 501.62 T
(9.3) 126.65 487.62 T
(Method dispatch and nonclass types  1) 162.65 487.62 T
(1) 350.59 487.62 T
(1) 355.49 487.62 T
(9.4) 126.65 473.62 T
(Summary  1) 162.65 473.62 T
(16) 220.84 473.62 T
3 13 Q
(10) 99.65 451.29 T
(Slots) 126.65 451.29 T
(117) 165.71 451.29 T
1 11 Q
(10.1) 126.65 431.62 T
(Dot-syntax abbr) 162.65 431.62 T
(eviation for simple function calls  1) 240.92 431.62 T
(17) 410.6 431.62 T
(10.2) 126.65 417.62 T
(Getters and setters for slots  1) 162.65 417.62 T
(18) 305.3 417.62 T
(10.3) 126.65 403.62 T
(Initialize methods  123) 162.65 403.62 T
(10.4) 126.65 389.62 T
(Slot options for initialization of slots  124) 162.65 389.62 T
(10.5) 126.65 375.62 T
(Allocation of slots  127) 162.65 375.62 T
(10.6) 126.65 361.62 T
(V) 162.65 361.62 T
(irtual slots  128) 169.99 361.62 T
(10.7) 126.65 347.62 T
(Summary  133) 162.65 347.62 T
3 13 Q
(11) 99.65 325.29 T
(Collections and Control Flow) 126.65 325.29 T
(137) 287.13 325.29 T
1 11 Q
(1) 126.65 305.62 T
(1.1) 131.54 305.62 T
(Built-in collection classes  137) 162.65 305.62 T
(1) 126.65 291.62 T
(1.2) 131.54 291.62 T
(Basic use of collections  138) 162.65 291.62 T
(1) 126.65 277.62 T
(1.3) 131.54 277.62 T
(Iteration over a sequence  142) 162.65 277.62 T
(1) 126.65 263.62 T
(1.4) 131.54 263.62 T
(Manipulation of collections  150) 162.65 263.62 T
(1) 126.65 249.62 T
(1.5) 131.54 249.62 T
(Conditional execution  154) 162.65 249.62 T
(1) 126.65 235.62 T
(1.6) 131.54 235.62 T
(Summary  159) 162.65 235.62 T
3 13 Q
(12) 99.65 213.29 T
(Functions) 126.65 213.29 T
(161) 190.58 213.29 T
1 11 Q
(12.1) 126.65 193.62 T
(Function-calling syntax  162) 162.65 193.62 T
(12.2) 126.65 179.62 T
(The function-calling pr) 162.65 179.62 T
(otocol  167) 274.27 179.62 T
(12.3) 126.65 165.62 T
(Functions as objects  180) 162.65 165.62 T
(12.4) 126.65 151.62 T
(Summary  185) 162.65 151.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vii" 5
%%Page: "viii" 6
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(viii) 63.65 702.62 T
0 F
(Contents) 87.92 702.62 T
63.65 105.95 495.65 132.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 495.65 672.95 R
V
3 13 Q
0 X
(13) 99.65 664.29 T
(Libraries and Modules) 126.65 664.29 T
(187) 252.8 664.29 T
1 11 Q
(13.1) 126.65 644.62 T
(Libraries  188) 162.65 644.62 T
(13.2) 126.65 630.62 T
(Modules  189) 162.65 630.62 T
(13.3) 126.65 616.62 T
(Sour) 162.65 616.62 T
(ce code, modules, and libraries  194) 185.21 616.62 T
(13.4) 126.65 602.62 T
(Module de\336nition  196) 162.65 602.62 T
(13.5) 126.65 588.62 T
(Library de\336nition  202) 162.65 588.62 T
(13.6) 126.65 574.62 T
(Inter) 162.65 574.62 T
(change \336les  203) 185.76 574.62 T
(13.7) 126.65 560.62 T
(The) 162.65 560.62 T
4 10 Q
(time-library) 183.81 560.62 T
1 11 Q
( \336le  204) 255.81 560.62 T
(13.8) 126.65 546.62 T
(Component library  209) 162.65 546.62 T
(13.9) 126.65 532.62 T
(Pr) 162.65 532.62 T
(otocol design  214) 173.44 532.62 T
(13.10) 126.65 518.62 T
(Summary  218) 162.65 518.62 T
3 13 Q
(14) 99.65 496.29 T
(Four Complete Libraries) 126.65 496.29 T
(221) 262.86 496.29 T
1 11 Q
(14.1) 126.65 476.62 T
(The) 162.65 476.62 T
4 10 Q
(sixty-unit) 183.81 476.62 T
1 11 Q
( library  221) 243.81 476.62 T
(14.2) 126.65 462.62 T
(The) 162.65 462.62 T
4 10 Q
(say) 183.81 462.62 T
1 11 Q
( library  223) 201.81 462.62 T
(14.3) 126.65 448.62 T
(The) 162.65 448.62 T
4 10 Q
(time) 183.81 448.62 T
1 11 Q
( library  225) 207.81 448.62 T
(14.4) 126.65 434.62 T
(The) 162.65 434.62 T
4 10 Q
(angle) 183.81 434.62 T
1 11 Q
( library  229) 213.81 434.62 T
(14.5) 126.65 420.62 T
(Summary  234) 162.65 420.62 T
3 13 Q
(Part III.) 211.76 392.29 T
(Sample Application) 253.82 392.29 T
(235) 365.75 392.29 T
(15) 99.65 367.29 T
(Design of the Airport Application) 126.65 367.29 T
(237) 306.67 367.29 T
1 11 Q
(15.1) 126.65 347.62 T
(Goals of the airport application  237) 162.65 347.62 T
(15.2) 126.65 333.62 T
(Objects that model an airport  238) 162.65 333.62 T
(15.3) 126.65 319.62 T
(Behaviors of the objects  240) 162.65 319.62 T
(15.4) 126.65 305.62 T
(The vehicle-container pr) 162.65 305.62 T
(otocol  241) 281.02 305.62 T
(15.5) 126.65 291.62 T
(Sorted sequences  242) 162.65 291.62 T
(15.6) 126.65 277.62 T
(T) 162.65 277.62 T
(esting  243) 168.38 277.62 T
(15.7) 126.65 263.62 T
(Summary  243) 162.65 263.62 T
3 13 Q
(16) 99.65 241.29 T
(Definition of a New Collection) 126.65 241.29 T
(245) 290.1 241.29 T
1 11 Q
(16.1) 126.65 221.62 T
(The) 162.65 221.62 T
4 10 Q
(sorted-sequence.dylan) 183.81 221.62 T
1 11 Q
( \336le  246) 309.81 221.62 T
(16.2) 126.65 207.62 T
(The) 162.65 207.62 T
4 10 Q
(sorted-sequence-library.dylan) 183.81 207.62 T
1 11 Q
( \336le  252) 357.81 207.62 T
(16.3) 126.65 193.62 T
(The) 162.65 193.62 T
4 10 Q
(sorted-sequence.lid) 183.81 193.62 T
1 11 Q
( \336le  253) 297.81 193.62 T
(16.4) 126.65 179.62 T
(Summary  253) 162.65 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "viii" 6
%%Page: "ix" 7
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 479.4 702.62 T
2 F
(ix) 523.73 702.62 T
99.65 107.12 531.65 132.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 495.65 672.95 R
V
3 13 Q
0 X
(17) 99.65 664.29 T
(The Airport Application) 126.65 664.29 T
(255) 258.1 664.29 T
1 11 Q
(17.1) 126.65 644.62 T
(The) 162.65 644.62 T
4 10 Q
(definitions.dylan) 183.81 644.62 T
1 11 Q
( \336le  255) 285.81 644.62 T
(17.2) 126.65 630.62 T
(The) 162.65 630.62 T
4 10 Q
(airport-classes.dylan) 183.81 630.62 T
1 11 Q
( \336le  256) 309.81 630.62 T
(17.3) 126.65 616.62 T
(The) 162.65 616.62 T
4 10 Q
(vehicle-dynamics.dylan) 183.81 616.62 T
1 11 Q
( \336le  265) 315.81 616.62 T
(17.4) 126.65 602.62 T
(The) 162.65 602.62 T
4 10 Q
(schedule.dylan) 183.81 602.62 T
1 11 Q
( \336le  267) 267.81 602.62 T
(17.5) 126.65 588.62 T
(The) 162.65 588.62 T
4 10 Q
(airport-test.dylan) 183.81 588.62 T
1 11 Q
( \336le  276) 291.81 588.62 T
(17.6) 126.65 574.62 T
(The) 162.65 574.62 T
4 10 Q
(definitions-library.dylan) 183.81 574.62 T
1 11 Q
( \336le  280) 333.81 574.62 T
(17.7) 126.65 560.62 T
(The) 162.65 560.62 T
4 10 Q
(definitions.lid) 183.81 560.62 T
1 11 Q
( \336le  281) 273.81 560.62 T
(17.8) 126.65 546.62 T
(The) 162.65 546.62 T
4 10 Q
(airport-library.dylan) 183.81 546.62 T
1 11 Q
( \336le  281) 309.81 546.62 T
(17.9) 126.65 532.62 T
(The) 162.65 532.62 T
4 10 Q
(airport.lid) 183.81 532.62 T
1 11 Q
( \336le  282) 249.81 532.62 T
(17.10) 126.65 518.62 T
(The) 162.65 518.62 T
4 10 Q
(airport-test-library.dylan) 183.81 518.62 T
1 11 Q
( \336le  282) 339.81 518.62 T
(17.1) 126.65 504.62 T
(1) 145.29 504.62 T
(The) 162.65 504.62 T
4 10 Q
(airport-test.lid) 183.81 504.62 T
1 11 Q
( \336le  283) 279.81 504.62 T
(17.12) 126.65 490.62 T
(Summary  283) 162.65 490.62 T
3 13 Q
(Part IV.) 216.5 462.29 T
(Advanced Topics) 259.74 462.29 T
(285) 361.01 462.29 T
(18) 99.65 437.29 T
(Multiple Inheritance) 126.65 437.29 T
(287) 239.76 437.29 T
1 11 Q
(18.1) 126.65 417.62 T
(Example of multiple inheritance  288) 162.65 417.62 T
(18.2) 126.65 403.62 T
(Multiple inheritance and slots  292) 162.65 403.62 T
(18.3) 126.65 389.62 T
(The class pr) 162.65 389.62 T
(ecedence list  294) 220.23 389.62 T
(18.4) 126.65 375.62 T
(Multiple inheritance and method dispatch  300) 162.65 375.62 T
(18.5) 126.65 361.62 T
(Use of multiple inheritance  304) 162.65 361.62 T
(18.6) 126.65 347.62 T
(Summary  308) 162.65 347.62 T
3 13 Q
(19) 99.65 325.29 T
(Performance and Flexibility) 126.65 325.29 T
(309) 278.88 325.29 T
1 11 Q
(19.1) 126.65 305.62 T
(Execution model  309) 162.65 305.62 T
(19.2) 126.65 291.62 T
(Ef) 162.65 291.62 T
(\336ciency model  310) 172.83 291.62 T
(19.3) 126.65 277.62 T
(T) 162.65 277.62 T
(ype constraints  31) 168.4 277.62 T
(1) 258.28 277.62 T
(19.4) 126.65 263.62 T
(Limited types  315) 162.65 263.62 T
(19.5) 126.65 249.62 T
(Enumerations  318) 162.65 249.62 T
(19.6) 126.65 235.62 T
(Dir) 162.65 235.62 T
(ect methods  319) 178.51 235.62 T
(19.7) 126.65 221.62 T
(T) 162.65 221.62 T
(ail calls  320) 168.38 221.62 T
(19.8) 126.65 207.62 T
(T) 162.65 207.62 T
(yped generic functions  320) 168.4 207.62 T
(19.9) 126.65 193.62 T
(Open generic functions  322) 162.65 193.62 T
(19.10) 126.65 179.62 T
(Open classes  323) 162.65 179.62 T
(19.1) 126.65 165.62 T
(1) 145.29 165.62 T
(Sealed domains  324) 162.65 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ix" 7
%%Page: "x" 8
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(x) 63.65 702.62 T
0 F
(Contents) 77.9 702.62 T
63.65 105.95 495.65 132.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 495.65 672.95 R
V
1 11 Q
0 X
(19.12) 126.65 665.62 T
(Slot accessors  328) 162.65 665.62 T
(19.13) 126.65 651.62 T
(Primary classes  330) 162.65 651.62 T
(19.14) 126.65 637.62 T
(Additional ef) 162.65 637.62 T
(\336ciency information  331) 227.23 637.62 T
(19.15) 126.65 623.62 T
(Summary  335) 162.65 623.62 T
3 13 Q
(20) 99.65 601.29 T
(Exceptions) 126.65 601.29 T
(339) 196.52 601.29 T
1 11 Q
(20.1) 126.65 581.62 T
(An informal exception pr) 162.65 581.62 T
(otocol  339) 285.55 581.62 T
(20.2) 126.65 567.62 T
(A simple Dylan exception pr) 162.65 567.62 T
(otocol  342) 302.26 567.62 T
(20.3) 126.65 553.62 T
(Additional exception mechanisms  356) 162.65 553.62 T
(20.4) 126.65 539.62 T
(Pr) 162.65 539.62 T
(otected operations and the) 173.44 539.62 T
4 10 Q
(block) 305.23 539.62 T
1 11 Q
( constr) 335.23 539.62 T
(uct  356) 367.78 539.62 T
(20.5) 126.65 525.62 T
(Summary  358) 162.65 525.62 T
3 13 Q
(21) 99.65 503.29 T
(Macros) 126.65 503.29 T
(359) 176.97 503.29 T
1 11 Q
(21.1) 126.65 483.62 T
(Patterns and templates  360) 162.65 483.62 T
(21.2) 126.65 469.62 T
(Macr) 162.65 469.62 T
(o hygiene  363) 187.59 469.62 T
(21.3) 126.65 455.62 T
(Evaluation in macr) 162.65 455.62 T
(os  364) 254.96 455.62 T
(21.4) 126.65 441.62 T
(Constraints  365) 162.65 441.62 T
(21.5) 126.65 427.62 T
(Mor) 162.65 427.62 T
(e complex r) 183.21 427.62 T
(ules  368) 239.59 427.62 T
(21.6) 126.65 413.62 T
(Mor) 162.65 413.62 T
(e hygiene  369) 183.21 413.62 T
(21.7) 126.65 399.62 T
(Auxiliary macr) 162.65 399.62 T
(os  371) 236.07 399.62 T
(21.8) 126.65 385.62 T
(Summary  372) 162.65 385.62 T
3 13 Q
(Appendix A) 99.65 363.29 T
(Resources on Dylan) 171.88 363.29 T
(375) 287.37 363.29 T
(Appendix B) 99.65 338.29 T
(Dylan Object Model for C and C++ Programmers) 171.88 338.29 T
(381) 428.95 338.29 T
(Glossary) 99.65 313.29 T
(391) 158.28 313.29 T
(Index) 99.65 288.29 T
(405) 140.49 288.29 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "x" 8
%%Page: "xi" 9
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xi) 320.07 135.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 590.45 493.98 644.45 R
7 X
V
97.98 616.9 493.98 644.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 616.9 493.98 644.45 R
7 X
0 0 0 1 0 0 0 K
V
97.98 637.6 259.98 637.6 2 L
3 H
2 Z
0 X
N
97.98 628.6 259.98 628.6 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 97.98 596.9 T
(eface) 127.41 596.9 T
99.65 150.95 513.65 456.95 R
7 X
V
3 13 Q
0 X
(Dylan) 99.65 448.29 T
1 11 Q
-0.29 (Dylan \050DYnamic LANguage\051 is a new pr) 99.65 428.62 P
-0.29 (ogramming language invented by Apple) 296.01 428.62 P
-0.42 (Computer and several partners. Dylan is dynamic, is object-oriented, and delivers) 99.65 414.62 P
(ef) 99.65 400.62 T
(\336cient applications.) 108.38 400.62 T
(The Dylan language is de\336ned by) 126.65 386.62 T
0 F
(The Dylan Refer) 293.13 386.62 T
(ence Manual) 366.28 386.62 T
1 F
(, written by) 423.63 386.62 T
(Andr) 99.65 372.62 T
(ew Shalit, and published by Addison-W) 125.48 372.62 T
(esley \0501996\051. That manual is the) 319.61 372.62 T
(de\336nitive r) 99.65 358.62 T
(efer) 153.06 358.62 T
(ence on Dylan.) 171.41 358.62 T
0 F
(The Dylan Refer) 246.38 358.62 T
(ence Manual) 319.53 358.62 T
1 F
( is available on the) 376.87 358.62 T
(W) 99.65 344.62 T
(orld W) 109.64 344.62 T
(ide W) 143.05 344.62 T
(eb; see Appendix A,) 170.98 344.62 T
0 F
(Resour) 274.39 344.62 T
(ces on Dylan) 305.37 344.62 T
1 F
(, for details.) 363.02 344.62 T
(Dylan is up and r) 126.65 330.62 T
(unning. Y) 211.37 330.62 T
(ou can get it fr) 258.35 330.62 T
(om Harlequin, Carnegie Mellon) 328.34 330.62 T
(University) 99.65 316.62 T
(, Apple Computer) 149.98 316.62 T
(, Digitool, and other or) 237.63 316.62 T
(ganizations. Dylan implemen-) 348.35 316.62 T
-0.08 (tations r) 99.65 302.62 P
-0.08 (un on most of the popular computer platforms. Full-\337edged implementa-) 139.52 302.62 P
(tions pr) 99.65 288.62 T
(ovide both a compiler and a development envir) 137.01 288.62 T
(onment. Y) 368.1 288.62 T
(ou can obtain) 417.31 288.62 T
(public-domain implementations. See Appendix A,) 99.65 274.62 T
0 F
(Resour) 349.71 274.62 T
(ces on Dylan) 380.69 274.62 T
1 F
(.) 438.34 274.62 T
3 13 Q
(A) 99.65 243.29 T
(udience) 107.03 243.29 T
1 11 Q
(This book is written for application pr) 99.65 223.62 T
(ogrammers who have experience working) 284.27 223.62 T
(in a conventional language, such as C, Pascal, COBOL, FOR) 99.65 209.62 T
(TRAN, or BASIC, or) 389.49 209.62 T
(in an object-oriented language, such as C++, Java, Smalltalk, or Common LISP) 99.65 195.62 T
(with CLOS. Familiarity with object-oriented pr) 99.65 181.62 T
(ogramming and dynamic lan-) 327.12 181.62 T
(guages is not r) 99.65 167.62 T
(equir) 170.2 167.62 T
(ed. W) 195.61 167.62 T
(e do compar) 223.09 167.62 T
(e Dylan to C, C++, and Java in this book,) 283.45 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xi" 9
%%Page: "xii" 10
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xii) 63.65 702.62 T
0 9.5 Q
(Preface) 85.97 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(but you can r) 99.65 665.62 T
(ead and understand the book without any knowledge of C, C++, or) 163.89 665.62 T
(Java.) 99.65 651.62 T
3 13 Q
(Goals of this book) 99.65 620.29 T
1 11 Q
(The primary goals of this book ar) 99.65 600.62 T
(e to teach you how to pr) 261.26 600.62 T
(ogram in Dylan, and) 378.95 600.62 T
(how to write pr) 99.65 586.62 T
(ograms in an object-oriented style. Along the way) 175.4 586.62 T
(, we hope to) 416.06 586.62 T
(convince you to use Dylan. It is intended to be a practical, elegant, and fun lan-) 99.65 572.62 T
(guage to use. This book is a tutorial on pr) 99.65 558.62 T
(ogramming in Dylan, and it does the) 300.75 558.62 T
(following:) 99.65 544.62 T
(\245) 108.65 524.62 T
(Begins with the most basic use of Dylan, and gradually expands to show) 126.65 524.62 T
(the mor) 126.65 510.62 T
(e powerful and advanced techniques.) 164.52 510.62 T
(\245) 108.65 490.62 T
(Gives the \337avor of working with the Dylan language in a typical Dylan) 126.65 490.62 T
(envir) 126.65 476.62 T
(onment.) 151.88 476.62 T
(\245) 108.65 456.62 T
(Shows how to de\336ne classes and methods that work together to solve a) 126.65 456.62 T
(pr) 126.65 442.62 T
(oblem.) 137.41 442.62 T
(\245) 108.65 422.62 T
(Shows how to use many of Dylan\325s classes, functions, and featur) 126.65 422.62 T
(es to good) 439.97 422.62 T
(ef) 126.65 408.62 T
(fect within the context of an example application.) 135.38 408.62 T
(\245) 108.65 388.62 T
(Intr) 126.65 388.62 T
(oduces the mor) 144.49 388.62 T
(e advanced featur) 219.29 388.62 T
(es of Dylan, including multiple inher-) 306.07 388.62 T
(itance, performance, exceptions, and macr) 126.65 374.62 T
(os.) 331.18 374.62 T
(This book does not attempt to be as complete as) 99.65 354.62 T
0 F
(The Dylan Refer) 334.68 354.62 T
(ence Manual) 407.83 354.62 T
1 F
(, and) 465.18 354.62 T
(does not pr) 99.65 340.62 T
(ovide the following kinds of material:) 154.56 340.62 T
(\245) 108.65 320.62 T
(Complete descriptions of all classes and functions pr) 126.65 320.62 T
(ovided by Dylan) 382.14 320.62 T
(\245) 108.65 300.62 T
(Complete descriptions of the detailed mechanisms in Dylan) 126.65 300.62 T
-0.17 (T) 99.65 280.62 P
-0.17 (o make full use of Dylan, pr) 105.38 280.62 P
-0.17 (ogrammers need) 239.65 280.62 P
0 F
-0.17 (The Dylan Refer) 324.15 280.62 P
-0.17 (ence Manual) 396.96 280.62 P
1 F
-0.17 (, as well) 454.14 280.62 P
(as this book.) 99.65 266.62 T
3 13 Q
(Or) 99.65 235.29 T
(ganization of this book) 111.95 235.29 T
1 11 Q
(W) 99.65 215.62 T
(e have divided the chapters of this book into four parts:) 109.64 215.62 T
(Part I,) 126.65 201.62 T
0 F
(Basic Concepts) 161.43 201.62 T
(,) 228.13 201.62 T
1 F
(intr) 233.63 201.62 T
(oduces the object-oriented and dynamic natur) 250.97 201.62 T
(e of) 474.45 201.62 T
(Dylan.) 99.65 187.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xii" 10
%%Page: "xiii" 11
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Preface) 478.04 702.62 T
2 11 Q
(xiii) 515.16 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 F
0 X
(Part II,) 126.65 665.62 T
0 F
(Intermediate T) 165.14 665.62 T
(opics) 229.61 665.62 T
(,) 251.81 665.62 T
1 F
( pr) 254.56 665.62 T
(ovides mor) 268.06 665.62 T
(e details about Dylan\325s object-) 322.76 665.62 T
(oriented techniques, and covers collections \050that is, how to use strings, vectors,) 99.65 651.62 T
(lists, and other kinds of collections\051, contr) 99.65 637.62 T
(ol \337ow) 301.96 637.62 T
(, libraries, and modules.) 334.77 637.62 T
(Part III,) 126.65 623.62 T
0 F
(Sample Application) 168.84 623.62 T
(,) 256.13 623.62 T
1 F
( contains a complete working application that) 258.88 623.62 T
(illustrates the topics cover) 99.65 609.62 T
(ed in Parts I and II.) 226.48 609.62 T
-0.07 (Part IV) 126.65 595.62 P
-0.07 (,) 159.64 595.62 P
0 F
-0.07 (Advanced T) 167.76 595.62 P
-0.07 (opics) 220.14 595.62 P
-0.07 (,) 242.34 595.62 P
1 F
-0.07 ( covers four ar) 245.09 595.62 P
-0.07 (eas that ar) 314.82 595.62 P
-0.07 (e sophisticated and power-) 364.34 595.62 P
(ful: multiple inheritance, performance versus \337exibility) 99.65 581.62 T
(, exceptions, and macr) 367.07 581.62 T
(os.) 475.25 581.62 T
(The chapters in Part IV show how we can impr) 99.65 567.62 T
(ove the example shown in Part III) 328.13 567.62 T
(by applying advanced techniques.) 99.65 553.62 T
3 13 Q
(Pr) 99.65 522.29 T
(ogram e) 110.71 522.29 T
(xamples) 152.04 522.29 T
1 11 Q
(This book includes many pr) 99.65 502.62 T
(ogram examples. Our appr) 235.33 502.62 T
(oach is to show how evo-) 366.41 502.62 T
-0.4 (lutionary pr) 99.65 488.62 P
-0.4 (ogramming might work by pr) 157.75 488.62 P
-0.4 (esenting an example simply at \336rst, and) 301.9 488.62 P
(then expanding it gradually) 99.65 474.62 T
(.) 234.35 474.62 T
-0.12 (In Part I,) 126.65 460.62 P
0 F
-0.12 (Basic Concepts) 173.79 460.62 P
1 F
-0.12 (, we develop an example of a simple library that r) 240.38 460.62 P
-0.12 (ep-) 480.11 460.62 P
(r) 99.65 446.62 T
(esents time and position. That library is needed for the sample airport applica-) 103.79 446.62 T
(tion that we develop in Part III,) 99.65 432.62 T
0 F
(Sample Application) 257.2 432.62 T
1 F
(. The airport application) 344.49 432.62 T
(simulates airplanes, r) 99.65 418.62 T
(unways, gates, \337ights, and airports. Its goal is to schedule) 203.28 418.62 T
(gates for arriving and departing air) 99.65 404.62 T
(craft. T) 271.09 404.62 T
(o do scheduling, we need the library) 304.3 404.62 T
(that r) 99.65 390.62 T
(epr) 125.62 390.62 T
(esents and manipulates time and position.) 141.65 390.62 T
(Harlequin and Addison-W) 126.65 376.62 T
(esley pr) 256.56 376.62 T
(ovide W) 294.58 376.62 T
(orld W) 334.73 376.62 T
(ide W) 368.15 376.62 T
(eb pages containing) 396.08 376.62 T
(the sour) 99.65 362.62 T
(ce code of the pr) 139.1 362.62 T
(ogram examples. See Section A.1 in Appendix A,) 218.82 362.62 T
0 F
(Resour) 99.65 348.62 T
(ces on Dylan) 130.62 348.62 T
1 F
(.) 188.27 348.62 T
(Dylan\325s cor) 126.65 334.62 T
(e language is lean. It does not include input\320output facilities,) 181.89 334.62 T
(support for a user interface, or interfaces for communicating with pr) 99.65 320.62 T
(ograms writ-) 431.41 320.62 T
(ten in other languages. These featur) 99.65 306.62 T
(es ar) 273.16 306.62 T
(e available in libraries supplied by ven-) 295.49 306.62 T
(dors or in the public domain. W) 99.65 292.62 T
(e want this book to be applicable to the widest) 253.99 292.62 T
(possible range of Dylan implementations, so we focus on the cor) 99.65 278.62 T
(e Dylan lan-) 412.62 278.62 T
(guage, and use only those library interfaces that ar) 99.65 264.62 T
(e widely available.) 345.17 264.62 T
3 13 Q
(Con) 99.65 233.29 T
(ventions used in this book) 119.95 233.29 T
1 11 Q
(W) 99.65 213.62 T
(e use boldface when we intr) 109.64 213.62 T
(oduce new terms, such as) 245.57 213.62 T
2 F
(library) 372.76 213.62 T
1 F
(.) 405.76 213.62 T
(W) 126.65 199.62 T
(e use bold typewriter font for code examples and names of Dylan func-) 136.64 199.62 T
(tions and objects, such as) 99.65 185.62 T
4 10 Q
(define method) 224.44 185.62 T
1 11 Q
(. Code comments appear in oblique) 302.44 185.62 T
(typewriter font \321 for example,) 99.65 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xiii" 11
%%Page: "xiv" 12
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xiv) 63.65 702.62 T
0 9.5 Q
(Preface) 88.43 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// Method that says a greeting) 99.65 666.95 T
4 F
(define method say-greeting \050greeting :: <object>\051;) 99.65 655.95 T
(format-out\050"%s\134n", greeting\051;) 110.45 644.95 T
(end;) 99.65 633.95 T
1 11 Q
(Many Dylan envir) 99.65 613.62 T
(onments pr) 188.54 613.62 T
(ovide a) 244.09 613.62 T
2 F
(listener) 282.5 613.62 T
1 F
(, which enables you to type in) 319.56 613.62 T
(expr) 99.65 599.62 T
(essions and to see their r) 121.35 599.62 T
(eturn values and output. W) 240.34 599.62 T
(e use a hypothetical) 373.47 599.62 T
(Dylan listener to show the r) 99.65 585.62 T
(esult of evaluating Dylan expr) 234.31 585.62 T
(essions:) 381.39 585.62 T
6 9 Q
(?) 99.65 564.95 T
4 F
(say-greeting\050"hi, there"\051;) 110.45 564.95 T
6 F
(hi, there) 99.65 553.95 T
1 11 Q
(In our hypothetical listener) 99.65 533.62 T
(, the Dylan pr) 230.88 533.62 T
(ompt is the question mark,) 297.63 533.62 T
6 9 Q
(?) 430.76 533.62 T
1 11 Q
(. The) 436.16 533.62 T
4 10 Q
(bold) 462.82 533.62 T
(typewriter font) 99.65 519.62 T
1 11 Q
( shows what the user types. The) 189.65 519.62 T
6 10 Q
(bold-oblique typewriter) 348.05 519.62 T
(font) 99.65 505.62 T
1 11 Q
( shows what the listener displays.) 123.65 505.62 T
(W) 126.65 491.62 T
(e use boxes to give information about Dylan\325s naming conventions, cau-) 136.64 491.62 T
(tions, performance implications, comparisons to other languages such as C or) 99.65 477.62 T
(C++, envir) 99.65 463.62 T
(onment notes, and automatic-storage-management notes. Her) 151.51 463.62 T
(e is an) 452.08 463.62 T
(example:) 99.65 449.62 T
3 13 Q
(An ima) 99.65 311.29 T
(g) 135.1 311.29 T
(e of Dylan) 141.72 311.29 T
1 11 Q
(Jonathan Bachrach designed the image on the cover of this book. He played with) 99.65 291.62 T
(the meaning that Dylan has for him by cr) 99.65 277.62 T
(eating colorful tiles that appear to take) 299.44 277.62 T
(of) 99.65 263.62 T
(f and \337y) 109.12 263.62 T
(. Each tile has its own vibrant color) 148.49 263.62 T
(, unique personality) 317.81 263.62 T
(, and individual) 414.04 263.62 T
(str) 99.65 249.62 T
(ength. The tiles \337y independently) 112.04 249.62 T
(, but tend to \337ock with other tiles to achieve) 274.66 249.62 T
(harmony within a community) 99.65 235.62 T
(. Each tile could r) 244.88 235.62 T
(epr) 328.99 235.62 T
(esent a Dylan component, or a) 345.01 235.62 T
(Dylan pr) 99.65 221.62 T
(ogrammer) 142.89 221.62 T
(. Once Bachrach was satis\336ed with the still image, he took the) 193.08 221.62 T
(next step, and built an animation of the tiles \337ying gracefully thr) 99.65 207.62 T
(ough space,) 412.88 207.62 T
(\337ocking together) 99.65 193.62 T
(, and cr) 181.58 193.62 T
(eating a dynamic new world.) 217.48 193.62 T
(Bachrach wr) 126.65 179.62 T
(ote the animation and physical-modeling portions of the pr) 187.36 179.62 T
(o-) 474.98 179.62 T
(gram in Dylan, using Open GL as the thr) 99.65 165.62 T
(ee-dimensional r) 298.02 165.62 T
(endering substrate.) 379.4 165.62 T
2 F
(Environment note:) 132.65 415.62 T
1 F
(Our hypothetical development envir) 228.9 415.62 T
(onment) 407.03 415.62 T
(does not r) 132.65 401.62 T
(epr) 180.95 401.62 T
(esent any particular Dylan development envir) 196.98 401.62 T
(on-) 420.97 401.62 T
(ment. Also note that the Dylan language does not r) 132.65 387.62 T
(equir) 380.41 387.62 T
(e a devel-) 405.82 387.62 T
(opment envir) 132.65 373.62 T
(onment, so any given implementation may not) 198.22 373.62 T
(pr) 132.65 359.62 T
(ovide one.) 143.41 359.62 T
126.65 428.83 126.65 352.08 2 L
V
0.25 H
0 Z
N
477.65 428.83 477.65 352.08 2 L
V
N
126.52 428.95 477.77 428.95 2 L
V
N
126.52 351.95 477.77 351.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xiv" 12
%%Page: "xv" 13
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Preface) 482.92 702.62 T
2 11 Q
(xv) 520.03 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 F
0 X
(Steve Rowley pr) 99.65 665.62 T
(ovided the physics equations. Bachrach demonstrated his anima-) 179.13 665.62 T
(tion at the Apple W) 99.65 651.62 T
(orldwide Developers Confer) 194.42 651.62 T
(ence in 1995.) 333.21 651.62 T
3 13 Q
(Ac) 99.65 620.29 T
(kno) 113.08 620.29 T
(wledgments) 131.89 620.29 T
1 11 Q
(W) 99.65 600.62 T
(e ar) 109.64 600.62 T
(e fortunate to have at Harlequin a gr) 127.3 600.62 T
(eat pool of Dylan talent and expertise,) 304.5 600.62 T
(including original inventors of the language, compiler gur) 99.65 586.62 T
(us, and envir) 382.37 586.62 T
(onment) 445.77 586.62 T
-0.13 (designers. A cor) 99.65 572.62 P
-0.13 (e gr) 177.88 572.62 P
-0.13 (oup of Dylan experts and two expert C pr) 196.02 572.62 P
-0.13 (ogrammers gave us) 397.73 572.62 P
(valuable technical advice and encouragement fr) 99.65 558.62 T
(om the \336rst to the \336nal days of) 331.95 558.62 T
(our pr) 99.65 544.62 T
(oject: Fr) 130.14 544.62 T
(eeland Abbott, Jonathan Bachrach, Kim Barr) 168.22 544.62 T
(ett, Paul Butcher) 383.45 544.62 T
(, Paul) 463.14 544.62 T
(Haahr) 99.65 530.62 T
(, T) 129.73 530.62 T
(ony Mann, and Keith Playfor) 140.96 530.62 T
(d. Other people r) 282.29 530.62 T
(eviewed our drafts along) 365.38 530.62 T
(the way: Roman Budzianowski, Bob Cassels, Bill Chiles, Christopher Fry) 99.65 516.62 T
(, David) 451.67 516.62 T
-0.28 (Gray) 99.65 502.62 P
-0.28 (, Eliot Miranda, Scott McKay) 122.78 502.62 P
-0.28 (, Nosa Omor) 260.46 502.62 P
-0.28 (ogbe, Mike Plusch, and Andy Sizer) 321.98 502.62 P
-0.28 (.) 490.43 502.62 P
(W) 99.65 488.62 T
(e ar) 109.64 488.62 T
(e grateful to Harlequin people whose expertise lies in pr) 127.3 488.62 T
(ogramming lan-) 400.16 488.62 T
(guages other than Dylan, for giving us their perspectives on our book: Judy) 99.65 474.62 T
(Anderson, W) 99.65 460.62 T
(esley Dunnington, David Jones, Andy Latto, Peter Norvig, Kent Pit-) 163.5 460.62 T
-0.18 (man, Steve Rowley) 99.65 446.62 P
-0.18 (, Craig Swanson, Jason T) 191.16 446.62 P
-0.18 (r) 309.82 446.62 P
-0.18 (enouth, Helen V) 313.96 446.62 P
-0.18 (ickers, and Evan W) 392.79 446.62 P
-0.18 (il-) 485.58 446.62 P
(liams.) 99.65 432.62 T
(Andr) 126.65 418.62 T
(ew Shir) 152.48 418.62 T
(es car) 189.19 418.62 T
(efully tested all our pr) 216.41 418.62 T
(ogram examples. Br) 324.23 418.62 T
(ent T) 420.93 418.62 T
(ennefoss) 444.67 418.62 T
(gave us a gr) 99.65 404.62 T
(eat deal of help with graphics. Gary Palter shar) 158.06 404.62 T
(ed his Macintosh) 386.7 404.62 T
(expertise when we needed it. Richar) 99.65 390.62 T
(d Br) 275.65 390.62 T
(ooksby let us steal time fr) 295.99 390.62 T
(om other) 419.88 390.62 T
(pr) 99.65 376.62 T
(ojects to write this book. Anne Altherr) 110.41 376.62 T
(, Shar) 295.39 376.62 T
(on V) 322.72 376.62 T
(an Gundy) 344.8 376.62 T
(, Clive Harris, and) 392.5 376.62 T
-0.05 (Sang Lee helped us to navigate the legal and business issues. Ken Jackson helped) 99.65 362.62 P
(us to get the ball r) 99.65 348.62 T
(olling, and gave it an extra push when needed. Jo Marks is one) 186.65 348.62 T
(of Dylan\325s biggest fans \321 he ur) 99.65 334.62 T
(ged us to write this book as a way to explain the) 251.99 334.62 T
(power of Dylan to a wider audience.) 99.65 320.62 T
-0.1 (W) 126.65 306.62 P
-0.1 (e ar) 136.64 306.62 P
-0.1 (e grateful to Dylan experts outside of Harlequin who gave us thought-) 154.2 306.62 P
(ful and thor) 99.65 292.62 T
(ough r) 157.41 292.62 T
(eviews of the book: Scott Fahlman, Robert Futr) 189.46 292.62 T
(elle, David) 416.93 292.62 T
(Moon, and Andr) 99.65 278.62 T
(ew Shalit.) 181.17 278.62 T
(Our editors at Addison-W) 126.65 264.62 T
(esley cheerfully and capably steer) 253.32 264.62 T
(ed us thr) 417.28 264.62 T
(ough) 460.2 264.62 T
(the pr) 99.65 250.62 T
(ocess and helped to shape our book. W) 128.41 250.62 T
(e ar) 317.22 250.62 T
(e grateful to L) 334.88 250.62 T
(yn Dupr\216, Nancy) 402.42 250.62 T
(Fenton, and Helen Goldstein. Eileen Hof) 99.65 236.62 T
(f designed the cover using Bachrach\325s) 296.72 236.62 T
(image. It was, once again, a gr) 99.65 222.62 T
(eat pleasur) 245.87 222.62 T
(e to work with Peter Gor) 299 222.62 T
(don.) 419.27 222.62 T
(W) 126.65 208.62 T
(e thank the people at Apple Computer who combined their vision of the) 136.64 208.62 T
(futur) 99.65 194.62 T
(e with har) 124.31 194.62 T
(d work to make Dylan a r) 173.49 194.62 T
(eality) 297.92 194.62 T
(. W) 323.58 194.62 T
(e thank the people at Carnegie) 339.06 194.62 T
(Mellon University and Harlequin who continue to move Dylan forwar) 99.65 180.62 T
(d with) 442.25 180.62 T
(insight and cr) 99.65 166.62 T
(eativity) 166.37 166.62 T
(.) 201.83 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xv" 13
%%Page: "xvi" 14
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 159.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xvi" 14
%%Page: "1" 15
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 295.27 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 555.93 504.08 615.1 R
7 X
V
1 30 Q
0 X
(Part I.) 99.65 595.1 T
(Basic Concepts) 194.51 595.1 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(Chapter 1,) 99.65 449.62 T
0 F
(Intr) 155.66 449.62 T
(oduction) 173.18 449.62 T
1 F
(, describes the goals of Dylan, and tells you wher) 211.88 449.62 T
(e Dylan) 449.67 449.62 T
(\336ts in the world of pr) 99.65 435.62 T
(ogramming languages.) 203.04 435.62 T
-0.28 (Chapter 2,) 126.65 421.62 P
0 F
-0.28 (Quick Start) 181.81 421.62 P
1 F
-0.28 (, is a practical guide for getting started using Dylan. It) 233.98 421.62 P
-0.33 (shows the look and feel of a hypothetical Dylan listener) 99.65 407.62 P
-0.33 (, intr) 365.73 407.62 P
-0.33 (oduces the most basic) 388.24 407.62 P
-0.23 (concepts of Dylan, and pr) 99.65 393.62 P
-0.23 (esents a complete Dylan pr) 223.55 393.62 P
-0.23 (ogram. Y) 354 393.62 P
-0.23 (ou can type in these) 397.27 393.62 P
(examples and experiment with Dylan.) 99.65 379.62 T
-0.39 (Chapter 3,) 126.65 365.62 P
0 F
-0.39 (Methods, Classes, and Objects) 181.49 365.62 P
1 F
-0.39 (, intr) 314.87 365.62 P
-0.39 (oduces the concepts of methods,) 337.32 365.62 P
(built-in classes, class inheritance, and explains what it means to be an object.) 99.65 351.62 T
(In Chapters 4 thr) 126.65 337.62 T
(ough 7, we start to develop an example of a library that) 208.82 337.62 T
(r) 99.65 323.62 T
(epr) 103.79 323.62 T
(esents dif) 119.82 323.62 T
(fer) 165.81 323.62 T
(ent kinds of time and position. A) 178.89 323.62 T
2 F
(library) 341.55 323.62 T
1 F
( is a complete unit of) 375.77 323.62 T
(code that can be used by many dif) 99.65 309.62 T
(fer) 265.59 309.62 T
(ent clients. Our eventual goal in this book is) 278.67 309.62 T
(to develop a sample application that handles the scheduling of air) 99.65 295.62 T
(craft that ar) 419.69 295.62 T
(e) 475.89 295.62 T
-0.39 (arriving at, and departing fr) 99.65 281.62 P
-0.39 (om, an airport. For mor) 234.45 281.62 P
-0.39 (e information, see Chapter 15,) 346.95 281.62 P
0 F
-0.25 (Design of the Airport Application) 99.65 267.62 P
1 F
-0.25 (. The airport application will use the time and posi-) 248.56 267.62 P
(tion library) 99.65 253.62 T
(.) 153.16 253.62 T
(Also in Chapters 4 thr) 126.65 239.62 T
(ough 7, we show how to write object-oriented pr) 233.49 239.62 T
(o-) 469.96 239.62 T
(grams in Dylan. W) 99.65 225.62 T
(e explain class and method de\336nition, class inheritance,) 190.31 225.62 T
(method dispatch, and modularity) 99.65 211.62 T
(.) 262.34 211.62 T
(Chapter 8,) 126.65 197.62 T
0 F
(A Simple Library) 182.66 197.62 T
1 F
( contains the code developed in Part I as a com-) 259.88 197.62 T
(plete working library) 99.65 183.62 T
(.) 202.01 183.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 15
%%Page: "2" 16
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 16
%%Page: "3" 17
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(3) 295.27 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(1) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(1) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Intr) 100.65 591.4 T
(oduction) 149.31 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(How many days did you spend in the past year tracking down elusive memory) 99.65 449.62 T
(leaks and r) 99.65 435.62 T
(efer) 152.67 435.62 T
(ences to unallocated or fr) 171.02 435.62 T
(eed memory?) 293.16 435.62 T
(How much time did you spend documenting which of the ar) 126.65 421.62 T
(guments to) 422.52 421.62 T
-0.14 (your functions ar) 99.65 407.62 P
-0.14 (e) 183.05 407.62 P
2 F
-0.14 (input) 190.93 407.62 P
1 F
-0.14 ( and which ar) 218.42 407.62 P
-0.14 (e) 284.58 407.62 P
2 F
-0.14 (output) 292.46 407.62 P
1 F
-0.14 ( ar) 326.07 407.62 P
-0.14 (guments \321 and making sur) 338.32 407.62 P
-0.14 (e all) 473.26 407.62 P
(the callers of those functions agr) 99.65 393.62 T
(ee?) 256.52 393.62 T
-0.21 (Do you have tr) 126.65 379.62 P
-0.21 (ouble following your own pr) 198.67 379.62 P
-0.21 (ograms\325 contr) 338.45 379.62 P
-0.21 (ol \337ow because so) 405.42 379.62 P
(much of it is devoted to checking and r) 99.65 365.62 T
(eturning err) 289.02 365.62 T
(or codes?) 347.49 365.62 T
(How many conditional statements in your pr) 126.65 351.62 T
(ograms ar) 346.02 351.62 T
(e ther) 394.76 351.62 T
(e because you) 422.18 351.62 T
(need to perform the same general operation in a dif) 99.65 337.62 T
(fer) 349.52 337.62 T
(ent way for dif) 362.6 337.62 T
(fer) 434.3 337.62 T
(ent kinds) 447.38 337.62 T
(of data? How much time do you spend updating them to handle new types of) 99.65 323.62 T
(data?) 99.65 309.62 T
(How often have you wished that you could leave the types of certain data) 126.65 295.62 T
(unspeci\336ed while you develop an application \321 but later add the type informa-) 99.65 281.62 T
(tion to impr) 99.65 267.62 T
(ove err) 157.61 267.62 T
(or checking and performance?) 191.61 267.62 T
(How much time do you spend r) 126.65 253.62 T
(ecompiling and r) 282.18 253.62 T
(elinking your application) 365.05 253.62 T
(just to test a minor modi\336cation to the code?) 99.65 239.62 T
(Softwar) 99.65 211.62 T
(e development has pr) 137.5 211.62 T
(ogr) 242.6 211.62 T
(essed, but softwar) 258.87 211.62 T
(e pr) 346.75 211.62 T
(oductivity has failed to) 365.53 211.62 T
-0.12 (keep up with advances in har) 99.65 197.62 P
-0.12 (dwar) 242.5 197.62 P
-0.12 (e. Despite a pr) 268.04 197.62 P
-0.12 (oliferation of development tools) 337.34 197.62 P
(and envir) 99.65 183.62 T
(onments, pr) 146.26 183.62 T
(ogrammers expend too much ef) 204.55 183.62 T
(fort on tasks that the pr) 359.14 183.62 T
(o-) 472.52 183.62 T
(gramming language and envir) 99.65 169.62 T
(onment should make unnecessary) 247.6 169.62 T
(.) 412.38 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 17
%%Page: "4" 18
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(4) 63.65 702.62 T
0 F
(Chapter 1) 77.9 702.62 T
(Introduction) 125.13 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Each language in wide use for applications has advantages and disadvan-) 126.65 665.62 T
-0.15 (tages. One way to compar) 99.65 651.62 P
-0.15 (e languages is to imagine them arrayed along two axes.) 225.5 651.62 P
(One axis ranges fr) 99.65 637.62 T
(om) 187.36 637.62 T
2 F
(procedural) 205.83 637.62 T
1 F
( to) 260.21 637.62 T
2 F
(object-oriented) 275.31 637.62 T
1 F
( languages. The other axis) 351.68 637.62 T
(ranges fr) 99.65 623.62 T
(om) 142.5 623.62 T
2 F
(static) 160.97 623.62 T
1 F
( to) 187.23 623.62 T
2 F
(dynamic) 202.32 623.62 T
1 F
( languages.) 245.71 623.62 T
(\245) 108.65 603.62 T
(A pr) 126.65 603.62 T
(ogram in a) 148.71 603.62 T
2 F
(procedural) 203.75 603.62 T
1 F
( language consists of) 258.13 603.62 T
2 F
(functions) 361.61 603.62 T
1 F
( operating on) 409.26 603.62 T
2 F
(data) 126.65 589.62 T
1 F
(. The pr) 148.03 589.62 T
(ogramming task is to choose the best available r) 185.45 589.62 T
(epr) 417.8 589.62 T
(esentation) 433.82 589.62 T
-0.18 (for data, and the best algorithms for manipulating the data. Languages near) 126.65 575.62 P
(the pr) 126.65 561.62 T
(ocedural end of the axis include C, FOR) 155.41 561.62 T
(TRAN, and COBOL.) 348.14 561.62 T
(\245) 108.65 541.62 T
(A pr) 126.65 541.62 T
(ogram in an) 148.71 541.62 T
2 F
(object-oriented) 210.15 541.62 T
1 F
( language consists of) 286.52 541.62 T
2 F
(objects) 390 541.62 T
1 F
(, categorized) 425.43 541.62 T
(by) 126.65 527.62 T
2 F
(class) 141.6 527.62 T
1 F
(, that combine data and behavior) 165.41 527.62 T
(. The pr) 324.68 527.62 T
(ogramming task is to) 362.1 527.62 T
(de\336ne the best class r) 126.65 513.62 T
(elations to r) 229.88 513.62 T
(epr) 286.95 513.62 T
(esent objects, and the best set of opera-) 302.98 513.62 T
(tions that objects of r) 126.65 499.62 T
(elated classes support. Languages near the object-) 227.46 499.62 T
(oriented end of the axis include C++, Java, Smalltalk, and the Common) 126.65 485.62 T
(LISP Object System \050CLOS\051.) 126.65 471.62 T
(\245) 108.65 451.62 T
(A) 126.65 451.62 T
2 F
(static) 137.96 451.62 T
1 F
( language r) 164.21 451.62 T
(equir) 218.6 451.62 T
(es most pr) 244.01 451.62 T
(ogram str) 294.17 451.62 T
(uctur) 341.1 451.62 T
(e \321 such as the types of) 366.99 451.62 T
(variables and function ar) 126.65 437.62 T
(guments \321 to be determined at compile time. The) 247.92 437.62 T
-0.14 (compiler can detect err) 126.65 423.62 P
-0.14 (ors and optimize performance at the cost of r) 237.57 423.62 P
-0.14 (un-time) 454.57 423.62 P
(\337exibility) 126.65 409.62 T
(. Languages near the static end of the axis include C, C++, and) 171.65 409.62 T
(FOR) 126.65 395.62 T
(TRAN.) 148.35 395.62 T
(\245) 108.65 375.62 T
(A) 126.65 375.62 T
2 F
(dynamic) 137.96 375.62 T
1 F
( language allows you to make mor) 181.34 375.62 T
(e r) 349.13 375.62 T
(un-time changes to pr) 361.41 375.62 T
(o-) 467.71 375.62 T
(gram str) 126.65 361.62 T
(uctur) 167.58 361.62 T
(e, such as passing ar) 193.46 361.62 T
(guments of dif) 292.03 361.62 T
(fer) 362.97 361.62 T
(ent types to the same) 376.05 361.62 T
(function and, in some languages, de\336ning new types or classes. A dynamic) 126.65 347.62 T
(envir) 126.65 333.62 T
(onment might allow r) 151.88 333.62 T
(un-time de\336nition and linking. Languages near) 257.87 333.62 T
(the dynamic end of the axis include Common LISP and Smalltalk.) 126.65 319.62 T
(Figur) 99.65 299.62 T
(e 1.1 shows the comparison of several popular computer) 125.86 299.62 T
(-pr) 400.27 299.62 T
(ogramming lan-) 414.69 299.62 T
(guages on a graph.) 99.65 285.62 T
(In r) 126.65 271.62 T
(eality) 143.65 271.62 T
(, few languages in commer) 169.31 271.62 T
(cial use ar) 299.9 271.62 T
(e pur) 348.4 271.62 T
(ely pr) 373.81 271.62 T
(ocedural or object) 401.9 271.62 T
(oriented, pur) 99.65 257.62 T
(ely static or dynamic. In fact, the tr) 163.34 257.62 T
(end has been to add missing ele-) 331.71 257.62 T
(ments fr) 99.65 243.62 T
(om one pole to languages that ar) 139.84 243.62 T
(e close to the opposite pole. C++ adds) 298.54 243.62 T
(object-oriented featur) 99.65 229.62 T
(es to C; dynamic linking is becoming mor) 204.06 229.62 T
(e common; LISP) 405.96 229.62 T
(and Smalltalk vendors have made applications smaller and mor) 99.65 215.62 T
(e ef) 410.02 215.62 T
(\336cient. This) 426.78 215.62 T
(work, however) 99.65 201.62 T
(, is hamper) 172.65 201.62 T
(ed by the need to maintain compatibility with featur) 226.41 201.62 T
(es) 480.67 201.62 T
(of the language that wer) 99.65 187.62 T
(e not designed with objects, dynamism, or performance) 217.98 187.62 T
(in mind.) 99.65 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 18
%%Page: "5" 19
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Chapter 1) 421.44 702.62 T
(Introduction) 468.67 702.62 T
2 F
(5) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Dylan, in contrast, is a new language that integrates the best ideas fr) 99.65 293.63 T
(om object-) 430.44 293.63 T
(oriented, pr) 99.65 279.63 T
(ocedural, dynamic, and static languages, while avoiding many of the) 156.71 279.63 T
(drawbacks. Figur) 99.65 265.63 T
(e 1.2 shows wher) 184.35 265.63 T
(e Dylan \336ts on the graph.) 267.52 265.63 T
(Dylan\325s goals ar) 126.65 251.63 T
(e simple:) 204.74 251.63 T
(\245) 108.65 231.63 T
(Pr) 126.65 231.63 T
(omote modular) 137.44 231.63 T
(, r) 212.07 231.63 T
(eusable, component-oriented pr) 221.72 231.63 T
(ograms.) 376.69 231.63 T
(\245) 108.65 211.63 T
(Support powerful and familiar pr) 126.65 211.63 T
(ocedural pr) 289.82 211.63 T
(ogramming.) 345.89 211.63 T
(\245) 108.65 191.63 T
(Encourage rapid and pr) 126.65 191.63 T
(oductive development of pr) 242.53 191.63 T
(ograms.) 377.99 191.63 T
(\245) 108.65 171.63 T
(Permit delivery of safe, ef) 126.65 171.63 T
(\336cient, compact applications.) 250.99 171.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 312.96 495.65 320.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 1.1) 118.82 324.29 T
8 F
(Object-or) 171.62 324.29 T
(iented and dynamic e) 212.89 324.29 T
(xtents of prog) 307.64 324.29 T
(r) 368.13 324.29 T
(amming languages) 371.36 324.29 T
(.) 455.69 324.29 T
99.65 336.95 495.65 672.95 C
0 0 0 1 0 0 0 K
121.65 340.95 473.65 670.95 C
0 -13 -15 327 303 340 318 127.65 346.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f1-1a.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%For: (brent) (harlequin)%%Title: (f1-1a.eps)%%CreationDate: (6/11/96) (9:49 AM)%%BoundingBox: -13 -15 327 303%%HiResBoundingBox: -11.8629 -14.6464 325.8035 302.3868%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%AI3_TemplateBox: 160.6667 16 160.6667 16%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -247.3333 328 1 826 581 18 1 0 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 Au0 To0 1 -1 0 -3.4034 237.9246 0 TpTP0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(Object-oriented) Tx (\r) TX TO0 To1 0 0 1 145.6667 217 0 TpTP-11.9982 0 Td0 Tr1 Ta(virtual\r) Tx -6.0073 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 124.6667 179.5 0 TpTP-16.4971 0 Td0 Tr(member\r) Tx -1.5084 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 197.9167 191.5 0 TpTP-9.5032 0 Td0 Tr(Java) Tx (\r) TX TO0 To1 0 0 1 51.6667 174 0 TpTP-8.0046 0 Td0 Tr(Ada\003) Tx 8.0046 -10 Td(\r) Tx TO0 To1 0 0 1 107.1667 136.5 0 TpTP-8.5045 0 Td0 Tr(C++) Tx (\r) TX TO0 To1 0 0 1 83.4167 98.5 0 TpTP-3.2487 0 Td0 Tr(C) Tx (\r) TX TO0 To1 0 0 1 268.6667 178 0 TpTP-18.2483 0 Td0 Tr(Common\r) Tx 8.4935 -10 Td(LISP\003) Tx 9.7548 -10 Td(\r) Tx TO0 To1 0 0 1 280.1667 215.5 0 TpTP-12.2519 0 Td0 Tr(CLOS) Tx (\r) TX TO0 To1 0 0 1 281.1667 269.5 0 TpTP-18.2483 0 Td0 Tr(Smalltalk) Tx (\r) TX TO0 To1 0 0 1 251.1667 128.5 0 TpTP-17.2584 0 Td0 Tr(LISP 1.5) Tx (\r) TX TO0 To1 0 0 1 142.6667 55.75 0 TpTP-13.5033 0 Td0 Tr(BASIC) Tx (\r) TX TO0 To1 0 0 1 28.6667 73.5 0 TpTP-13.5033 0 Td0 Tr(Pascal) Tx (\r) TX TO0 To1 0 0 1 43.1667 47.5 0 TpTP-15.7522 0 Td0 Tr(COBOL) Tx (\r) TX TO0 To1 0 0 1 39.9167 25.5 0 TpTP-21.7452 0 Td0 Tr(FORTRAN) Tx (\r) TX TO0 To1 0 0 1 306.9167 -2.6667 0 TpTP-17.4979 0 Td0 Tr(Dynamic\003) Tx 17.4979 -10 Td(\r) Tx TO1 Ap0 R0 G0.5 w241.9703 102.7256 m264.7398 96.4135 295.3871 125.2729 310.4218 167.1836 c325.4565 209.0943 319.186 248.1879 296.4166 254.4999 c273.6471 260.812 242.9998 231.9526 227.9651 190.0419 c212.9304 148.1312 219.2009 109.0377 241.9703 102.7256 csu60.375 76.7146 m73.6046 56.9636 109.4209 76.8972 140.3715 121.2369 c171.3221 165.5766 185.6882 217.5341 172.4586 237.2851 c159.2289 257.0361 123.4125 237.1025 92.462 192.7629 c61.5113 148.4231 47.1453 96.4656 60.375 76.7146 csU0.65 w50.9167 137.7465 m61.2654 137.7465 69.655 155.6002 69.655 177.6231 c69.655 199.6461 61.2654 217.4998 50.9167 217.4998 c40.5679 217.4998 32.1783 199.6461 32.1783 177.6231 c32.1783 155.6002 40.5679 137.7465 50.9167 137.7465 cs280.4167 262.5005 m300.0137 262.5005 315.9007 267.4252 315.9007 273.5 c315.9007 279.5747 300.0137 284.4995 280.4167 284.4995 c260.8197 284.4995 244.9327 279.5747 244.9327 273.5 c244.9327 267.4252 260.8197 262.5005 280.4167 262.5005 cs29.1747 65.1728 m39.0191 65.1728 46.9999 70.3189 46.9999 76.6667 c46.9999 83.0145 39.0191 88.1606 29.1747 88.1606 c19.3303 88.1606 11.3496 83.0145 11.3496 76.6667 c11.3496 70.3189 19.3303 65.1728 29.1747 65.1728 cs43.8536 44.1855 m58.0398 44.1855 69.5404 47.2458 69.5404 51.0209 c69.5404 54.7959 58.0398 57.8562 43.8536 57.8562 c29.6674 57.8562 18.1668 54.7959 18.1668 51.0209 c18.1668 47.2458 29.6674 44.1855 43.8536 44.1855 cs143.75 51.2496 m157.5921 51.2496 168.8137 54.477 168.8137 58.4581 c168.8137 62.4392 157.5921 65.6667 143.75 65.6667 c129.9079 65.6667 118.6863 62.4392 118.6863 58.4581 c118.6863 54.477 129.9079 51.2496 143.75 51.2496 cs39.9167 21.6932 m55.4725 21.6932 68.0833 24.9647 68.0833 29 c68.0833 33.0354 55.4725 36.3068 39.9167 36.3068 c24.3609 36.3068 11.75 33.0354 11.75 29 c11.75 24.9647 24.3609 21.6932 39.9167 21.6932 cs83.8333 80.2321 m71.8574 80.2321 62.1487 89.9408 62.1487 101.9167 c62.1487 113.8926 71.8574 123.6013 83.8333 123.6013 c95.8092 123.6013 105.518 113.8926 105.518 101.9167 c105.518 89.9408 95.8092 80.2321 83.8333 80.2321 cs250.3333 110.3987 m238.3574 110.3987 228.6487 120.1074 228.6487 132.0833 c228.6487 144.0592 238.3574 153.7679 250.3333 153.7679 c262.3092 153.7679 272.018 144.0592 272.018 132.0833 c272.018 120.1074 262.3092 110.3987 250.3333 110.3987 cs[5 4 ]0 d280.0625 197.5029 m268.0866 197.5029 258.3779 207.2116 258.3779 219.1875 c258.3779 231.1634 268.0866 240.8721 280.0625 240.8721 c292.0384 240.8721 301.7471 231.1634 301.7471 219.1875 c301.7471 207.2116 292.0384 197.5029 280.0625 197.5029 cs123.6667 160.1664 m137.4735 160.1664 148.6666 168.2255 148.6666 178.1665 c148.6666 188.1076 137.4735 196.1667 123.6667 196.1667 c109.8598 196.1667 98.6668 188.1076 98.6668 178.1665 c98.6668 168.2255 109.8598 160.1664 123.6667 160.1664 cs146 196.3333 m160.1752 196.3333 171.6667 204.5416 171.6667 214.6667 c171.6667 224.7918 160.1752 233.0001 146 233.0001 c131.8248 233.0001 120.3332 224.7918 120.3332 214.6667 c120.3332 204.5416 131.8248 196.3333 146 196.3333 cs[]0 d177.3754 155.6662 m187.8282 149.9345 206.4038 162.3014 218.8644 183.2881 c231.325 204.2748 232.9527 225.9351 222.4999 231.6669 c212.0471 237.3988 193.4714 225.0318 181.0108 204.0451 c168.5502 183.0584 166.9226 161.3981 177.3754 155.6662 csu0 Ap0.7 G3 w5.3333 285.3333 m5.3333 10.6667 l308 10.6667 lS0 O0.7 g1 w308.2605 6.5905 m323.8717 10.7731 l308.2605 14.9564 l308.2605 6.5905 lb9.4095 284.8438 m5.227 300.455 l1.0436 284.8438 l9.4095 284.8438 lbUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 336.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 19
%%Page: "6" 20
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(6) 63.65 702.62 T
0 F
(Chapter 1) 77.9 702.62 T
(Introduction) 125.13 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Let\325s take a brief look at featur) 99.65 293.63 T
(es of Dylan that support these goals.) 247.19 293.63 T
3 15 Q
(1.1  Modular) 99.65 253.96 T
(, reusab) 170.7 253.96 T
(le) 217.77 253.96 T
(, component-oriented pr) 228.15 253.96 T
(ograms) 369.39 253.96 T
1 11 Q
(Dylan is an object-oriented language. Pr) 99.65 233.63 T
(ograms cr) 294.04 233.63 T
(eate and use objects, and they) 342.17 233.63 T
(use classes to categorize and abstract attributes of objects. Classes play a number) 99.65 219.63 T
(of key r) 99.65 205.63 T
(oles:) 136.46 205.63 T
(\245) 108.65 185.63 T
(They ar) 126.65 185.63 T
(e data types, embodying subtype\320supertype r) 163.57 185.63 T
(elationships between) 386.24 185.63 T
(objects.) 126.65 171.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 312.96 495.65 320.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 1.2) 112.88 324.29 T
8 F
(Object-or) 165.68 324.29 T
(iented and dynamic e) 206.95 324.29 T
(xtents of Dylan and other languages) 301.7 324.29 T
(.) 461.64 324.29 T
99.65 336.95 495.65 672.95 C
0 0 0 1 0 0 0 K
121.65 340.95 473.65 670.95 C
0 -13 -15 327 303 340 318 127.65 346.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f1-2a.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%For: (brent) (harlequin)%%Title: (f1-2a.eps)%%CreationDate: (6/11/96) (9:49 AM)%%BoundingBox: -13 -15 327 303%%HiResBoundingBox: -11.8629 -14.6464 325.8035 302.3868%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%+ Helvetica-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%AI3_TemplateBox: 160.6667 16 160.6667 16%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -111.3333 288 1.5 826 581 18 1 0 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helvetica%%IncludeFont: Helvetica-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold[/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4159.3333 4336 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D164.3334 224.7501 m232.0792 224.7501 286.9999 234.6 286.9999 246.75 c286.9999 258.9 232.0792 268.7499 164.3334 268.7499 c96.5875 268.7499 41.6668 258.9 41.6668 246.75 c41.6668 234.6 96.5875 224.7501 164.3334 224.7501 cb0 To0 1 -1 0 -3.4034 237.9246 0 TpTP0 Tr0 g1 w/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(Object-oriented) Tx (\r) TX TO0 To1 0 0 1 146.1667 216.25 0 TpTP-11.9982 0 Td0 Tr1 Ta(virtual\r) Tx -6.0073 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 124.6667 179.5 0 TpTP-16.4971 0 Td0 Tr(member\r) Tx -1.5084 -10 Td(functions) Tx (\r) TX TO0 To1 0 0 1 197.9167 191.5 0 TpTP-9.5032 0 Td0 Tr(Java) Tx (\r) TX TO0 To1 0 0 1 51.6667 174 0 TpTP-8.0046 0 Td0 Tr(Ada\003) Tx 8.0046 -10 Td(\r) Tx TO0 To1 0 0 1 107.1667 136.5 0 TpTP-8.5045 0 Td0 Tr(C++) Tx (\r) TX TO0 To1 0 0 1 83.4167 98.5 0 TpTP-3.2487 0 Td0 Tr(C) Tx (\r) TX TO0 To1 0 0 1 268.6667 178 0 TpTP-18.2483 0 Td0 Tr(Common\r) Tx 8.4935 -10 Td(LISP\003) Tx 9.7548 -10 Td(\r) Tx TO0 To1 0 0 1 280.1667 215.5 0 TpTP-12.2519 0 Td0 Tr(CLOS) Tx (\r) TX TO0 To1 0 0 1 281.1667 269.5 0 TpTP-18.2483 0 Td0 Tr(Smalltalk) Tx (\r) TX TO0 To1 0 0 1 251.1667 128.5 0 TpTP-17.2584 0 Td0 Tr(LISP 1.5) Tx (\r) TX TO0 To1 0 0 1 142.6667 55.75 0 TpTP-13.5033 0 Td0 Tr(BASIC) Tx (\r) TX TO0 To1 0 0 1 28.6667 73.5 0 TpTP-13.5033 0 Td0 Tr(Pascal) Tx (\r) TX TO0 To1 0 0 1 43.1667 47.5 0 TpTP-15.7522 0 Td0 Tr(COBOL) Tx (\r) TX TO0 To1 0 0 1 39.9167 25.5 0 TpTP-21.7452 0 Td0 Tr(FORTRAN) Tx (\r) TX TO0 To1 0 0 1 306.9167 -2.6667 0 TpTP-17.4979 0 Td0 Tr(Dynamic\003) Tx 17.4979 -10 Td(\r) Tx TO0 R0 G0.5 w241.9703 102.7256 m264.7398 96.4135 295.3871 125.2729 310.4218 167.1836 c325.4565 209.0943 319.186 248.1879 296.4166 254.4999 c273.6471 260.812 242.9998 231.9526 227.9651 190.0419 c212.9304 148.1312 219.2009 109.0377 241.9703 102.7256 csu60.375 76.7146 m73.6046 56.9636 109.4209 76.8972 140.3715 121.2369 c171.3221 165.5766 185.6882 217.5341 172.4586 237.2851 c159.2289 257.0361 123.4125 237.1025 92.462 192.7629 c61.5113 148.4231 47.1453 96.4656 60.375 76.7146 csU0.65 w50.9167 137.7465 m61.2654 137.7465 69.655 155.6002 69.655 177.6231 c69.655 199.6461 61.2654 217.4998 50.9167 217.4998 c40.5679 217.4998 32.1783 199.6461 32.1783 177.6231 c32.1783 155.6002 40.5679 137.7465 50.9167 137.7465 cs280.4167 262.5005 m300.0137 262.5005 315.9007 267.4252 315.9007 273.5 c315.9007 279.5747 300.0137 284.4995 280.4167 284.4995 c260.8197 284.4995 244.9327 279.5747 244.9327 273.5 c244.9327 267.4252 260.8197 262.5005 280.4167 262.5005 cs29.1747 65.1728 m39.0191 65.1728 46.9999 70.3189 46.9999 76.6667 c46.9999 83.0145 39.0191 88.1606 29.1747 88.1606 c19.3303 88.1606 11.3496 83.0145 11.3496 76.6667 c11.3496 70.3189 19.3303 65.1728 29.1747 65.1728 cs43.8536 44.1855 m58.0398 44.1855 69.5404 47.2458 69.5404 51.0209 c69.5404 54.7959 58.0398 57.8562 43.8536 57.8562 c29.6674 57.8562 18.1668 54.7959 18.1668 51.0209 c18.1668 47.2458 29.6674 44.1855 43.8536 44.1855 cs143.75 51.2496 m157.5921 51.2496 168.8137 54.477 168.8137 58.4581 c168.8137 62.4392 157.5921 65.6667 143.75 65.6667 c129.9079 65.6667 118.6863 62.4392 118.6863 58.4581 c118.6863 54.477 129.9079 51.2496 143.75 51.2496 cs39.9167 21.6932 m55.4725 21.6932 68.0833 24.9647 68.0833 29 c68.0833 33.0354 55.4725 36.3068 39.9167 36.3068 c24.3609 36.3068 11.75 33.0354 11.75 29 c11.75 24.9647 24.3609 21.6932 39.9167 21.6932 cs83.8333 80.2321 m71.8574 80.2321 62.1487 89.9408 62.1487 101.9167 c62.1487 113.8926 71.8574 123.6013 83.8333 123.6013 c95.8092 123.6013 105.518 113.8926 105.518 101.9167 c105.518 89.9408 95.8092 80.2321 83.8333 80.2321 cs250.3333 110.3987 m238.3574 110.3987 228.6487 120.1074 228.6487 132.0833 c228.6487 144.0592 238.3574 153.7679 250.3333 153.7679 c262.3092 153.7679 272.018 144.0592 272.018 132.0833 c272.018 120.1074 262.3092 110.3987 250.3333 110.3987 cs[5 4 ]0 d280.0625 197.5029 m268.0866 197.5029 258.3779 207.2116 258.3779 219.1875 c258.3779 231.1634 268.0866 240.8721 280.0625 240.8721 c292.0384 240.8721 301.7471 231.1634 301.7471 219.1875 c301.7471 207.2116 292.0384 197.5029 280.0625 197.5029 cs123.6667 160.1664 m137.4735 160.1664 148.6666 168.2255 148.6666 178.1665 c148.6666 188.1076 137.4735 196.1667 123.6667 196.1667 c109.8598 196.1667 98.6668 188.1076 98.6668 178.1665 c98.6668 168.2255 109.8598 160.1664 123.6667 160.1664 cs146 196.3333 m160.1752 196.3333 171.6667 204.5416 171.6667 214.6667 c171.6667 224.7918 160.1752 233.0001 146 233.0001 c131.8248 233.0001 120.3332 224.7918 120.3332 214.6667 c120.3332 204.5416 131.8248 196.3333 146 196.3333 cs[]0 d177.3754 155.6662 m187.8282 149.9345 206.4038 162.3014 218.8644 183.2881 c231.325 204.2748 232.9527 225.9351 222.4999 231.6669 c212.0471 237.3988 193.4714 225.0318 181.0108 204.0451 c168.5502 183.0584 166.9226 161.3981 177.3754 155.6662 csu0 Ap0.7 G3 w5.3333 285.3333 m5.3333 10.6667 l308 10.6667 lS0 O0.7 g1 w308.2605 6.5905 m323.8717 10.7731 l308.2605 14.9564 l308.2605 6.5905 lb9.4095 284.8438 m5.227 300.455 l1.0436 284.8438 l9.4095 284.8438 lbU0 To1 0 0 1 171.4167 250.9167 0 TpTP-16.3345 0 Td0 Tr0 g/_Helvetica-Bold 12 Tf(Dylan) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 336.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 20
%%Page: "7" 21
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Chapter 1) 421.44 702.62 T
(Introduction) 468.67 702.62 T
2 F
(7) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(They ar) 126.65 665.62 T
(e the vehicle for abstraction of common attributes of objects.) 163.57 665.62 T
(\245) 108.65 645.62 T
(They or) 126.65 645.62 T
(ganize sharing of attributes: Subclasses) 164.08 645.62 T
2 F
(inherit) 356.66 645.62 T
1 F
( the attributes of) 390.87 645.62 T
(super) 126.65 631.62 T
(classes.) 153.97 631.62 T
(\245) 108.65 611.62 T
(They ar) 126.65 611.62 T
(e the principal basis for specializing behavior of objects.) 163.57 611.62 T
(Objects contain) 99.65 591.62 T
0 F
(data) 176.84 591.62 T
1 F
( in) 195.77 591.62 T
2 F
(slots) 210.87 591.62 T
1 F
(, which ar) 234.08 591.62 T
(e like str) 282.04 591.62 T
(uctur) 323.1 591.62 T
(e members or \336elds in other) 348.98 591.62 T
-0.08 (languages. But the) 99.65 577.62 P
0 F
-0.08 (behavior) 192 577.62 P
1 F
-0.08 ( of objects r) 229.48 577.62 P
-0.08 (esides in generic functions and methods. A) 284.36 577.62 P
2 F
(generic function) 99.65 563.62 T
1 F
( is a function that embodies an operation common to dif) 181.83 563.62 T
(fer) 454 563.62 T
(ent) 467.08 563.62 T
(classes of the objects that ar) 99.65 549.62 T
(e its ar) 232.96 549.62 T
(guments. A) 264.82 549.62 T
2 F
(method) 324.02 549.62 T
1 F
( is a function that acts as a) 362.52 549.62 T
(speci\336c implementation of a generic operation for objects of a particular class. A) 99.65 535.62 T
(pr) 99.65 521.62 T
(ogram calls a generic function, and Dylan determines the most appr) 110.41 521.62 T
(opriate) 440.44 521.62 T
(method to invoke based on the ar) 99.65 507.62 T
(guments to the generic function. A pr) 262.2 507.62 T
(ogram) 444.26 507.62 T
(contr) 99.65 493.62 T
(ols method selection, or) 124.67 493.62 T
2 F
(dispatch) 242.82 493.62 T
1 F
(, by means of class r) 285.58 493.62 T
(elationships, rather) 382.56 493.62 T
(than via explicit conditional statements.) 99.65 479.62 T
(Abstraction of common attributes and methods in super) 126.65 465.62 T
(classes lets you) 399.47 465.62 T
-0.17 (r) 99.65 451.62 P
-0.17 (euse code, rather then r) 103.79 451.62 P
-0.17 (eimplement it, for subclasses. By de\336ning a subclass, you) 216.81 451.62 P
(can add specialized data or behavior while having the subclass inherit attributes) 99.65 437.62 T
(of super) 99.65 423.62 T
(classes, which may be de\336ned in another component or library) 139.39 423.62 T
(, or in) 443.43 423.62 T
(Dylan itself.) 99.65 409.62 T
(Generic functions constitute abstract interfaces for speci\336c operations. Y) 126.65 395.62 T
(ou) 475.45 395.62 T
(can usually change the implementation of an operation or a data r) 99.65 381.62 T
(epr) 419.92 381.62 T
(esentation) 435.95 381.62 T
(without changing the interface to the operation. In this way) 99.65 367.62 T
(, you can change an) 387.44 367.62 T
-0.08 (implementation without changing the functions or objects that use the implemen-) 99.65 353.62 P
-0.14 (tation. These functions or objects may be de\336ned in another component or library) 99.65 339.62 P
-0.14 (.) 492.9 339.62 P
-0.14 (Dylan pr) 126.65 325.62 P
-0.14 (ovides lar) 169.75 325.62 P
-0.14 (ge-scale variable namespaces, called) 217.28 325.62 P
2 F
-0.14 (modules) 395.59 325.62 P
1 F
-0.14 (. A module) 438.97 325.62 P
(can include or use other modules, but only the variables explicitly exported fr) 99.65 311.62 T
(om) 476.73 311.62 T
(those modules ar) 99.65 297.62 T
(e visible to it. Modules pr) 182.93 297.62 T
(ovide public and private global vari-) 306.57 297.62 T
-0.13 (ables. Because functions and classes, as well as data, ar) 99.65 283.62 P
-0.13 (e variable values, modules) 364.15 283.62 P
(de\336ne external interfaces for collections of classes and generic functions.) 99.65 269.62 T
3 15 Q
(1.2  P) 99.65 229.95 T
(o) 131.31 229.95 T
(werful and familiar pr) 138.66 229.95 T
(ocedural pr) 262.85 229.95 T
(ogramming) 329.61 229.95 T
1 11 Q
(Dylan is not just an object-oriented language. It includes and extends the lan-) 99.65 209.62 T
(guage featur) 99.65 195.62 T
(es that you expect to \336nd in a mor) 160.83 195.62 T
(e pur) 326.23 195.62 T
(ely pr) 351.64 195.62 T
(ocedural language.) 379.73 195.62 T
(Dylan\325s syntax encourages clear and str) 99.65 181.62 T
(uctur) 292.21 181.62 T
(ed pr) 318.1 181.62 T
(ogramming. It includes famil-) 343.6 181.62 T
(iar) 99.65 167.62 T
(, economical notation for in\336x operators and slot and array r) 111.88 167.62 T
(efer) 404.82 167.62 T
(ences. Dylan) 423.17 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 21
%%Page: "8" 22
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(8) 63.65 702.62 T
0 F
(Chapter 1) 77.9 702.62 T
(Introduction) 125.13 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(of) 99.65 665.62 T
(fers a choice of concise or expanded equivalents for many syntactic constr) 109.12 665.62 T
(ucts) 467.42 665.62 T
(to accommodate a range of pr) 99.65 651.62 T
(ogramming styles, fr) 244.33 651.62 T
(om terse to descriptive.) 345 651.62 T
(\245) 108.65 631.62 T
(Y) 126.65 631.62 T
(ou do not have to write a lot of intr) 132.97 631.62 T
(usive code to support Dylan\325s object) 303.04 631.62 T
(orientation. For example, the most common language expr) 126.65 617.62 T
(essions for de\336n-) 411 617.62 T
(ing a method automatically de\336ne a generic function if necessary) 126.65 603.62 T
(. A) 441.78 603.62 T
-0.13 (method-de\336ning expr) 126.65 589.62 P
-0.13 (ession looks much like a function-de\336ning expr) 233.09 589.62 P
-0.13 (ession) 462.82 589.62 P
(in other languages.) 126.65 575.62 T
(\245) 108.65 555.62 T
(Y) 126.65 555.62 T
(ou can de\336ne a function to take a variable number of ar) 132.97 555.62 T
(guments. Y) 401.88 555.62 T
(ou can) 456.09 555.62 T
(also de\336ne a function to take ar) 126.65 541.62 T
(guments in the form of name\320value pairs,) 278.82 541.62 T
(thus supporting self-documenting function invocation.) 126.65 527.62 T
(\245) 108.65 507.62 T
(Functions can r) 126.65 507.62 T
(eturn mor) 200.98 507.62 T
(e than one value. In fact, you can use a single) 249.83 507.62 T
(expr) 126.65 493.62 T
(ession to initialize multiple variables to the values r) 148.35 493.62 T
(eturned by a single) 398.28 493.62 T
(function call. Y) 126.65 479.62 T
(ou do not have to use a potentially confusing mechanism,) 198.79 479.62 T
(such as output parameters, to obtain multiple values.) 126.65 465.62 T
(\245) 108.65 445.62 T
(Dylan has a rich set of variable-sized aggr) 126.65 445.62 T
(egate data types, called) 329.93 445.62 T
2 F
(collections) 126.65 431.62 T
1 F
(. Collection classes include strings, arrays, sets, queues, lists,) 180.4 431.62 T
(stacks, and tables. Dylan has \337exible iteration constr) 126.65 417.62 T
(ucts and permits appli-) 380.32 417.62 T
(cations to extend them so that they operate on application-de\336ned collec-) 126.65 403.62 T
(tion subclasses. In this way) 126.65 389.62 T
(, a module that uses specialized collection) 257.35 389.62 T
(classes can cooperate with another module that de\336nes general collection) 126.65 375.62 T
(operations.) 126.65 361.62 T
(\245) 108.65 341.62 T
(Dylan has a built-in exception-signaling and exception-handling system) 126.65 341.62 T
(that permits both err) 126.65 327.62 T
(or handling and r) 227.2 327.62 T
(ecovery) 312.52 327.62 T
(. Exceptions ar) 349.4 327.62 T
(e based on a) 420.32 327.62 T
(class and object model that \336ts smoothly with the r) 126.65 313.62 T
(est of the language and) 373.69 313.62 T
(can be extended by the pr) 126.65 299.62 T
(ogram. Y) 251.66 299.62 T
(ou do not have to r) 295.17 299.62 T
(eturn and check err) 387.4 299.62 T
(or) 481.83 299.62 T
(codes fr) 126.65 285.62 T
(om functions \321 an err) 164.75 285.62 T
(or) 273.58 285.62 T
(-pr) 283.73 285.62 T
(one pr) 298.15 285.62 T
(ocess in itself \321 to ensur) 329.33 285.62 T
(e that no) 449.46 285.62 T
(exception has occurr) 126.65 271.62 T
(ed.) 226.52 271.62 T
3 15 Q
(1.3  Rapid and pr) 99.65 231.95 T
(oductive de) 198.54 231.95 T
(velopment of pr) 266.73 231.95 T
(ograms) 358.77 231.95 T
1 11 Q
-0.23 (Dylan pr) 99.65 211.62 P
-0.23 (omotes rapid development and incr) 142.66 211.62 P
-0.23 (emental r) 315.88 211.62 P
-0.23 (e\336nement of pr) 361.49 211.62 P
-0.23 (ototype pr) 435.52 211.62 P
-0.23 (o-) 485.98 211.62 P
(grams. The language encourages you to spend time early in the pr) 99.65 197.62 T
(ogramming) 421.06 197.62 T
(cycle writing and experimenting with substantive, working code, and not worry-) 99.65 183.62 T
(ing about distracting issues such as memory management and exact type) 99.65 169.62 T
(speci\336cations.) 99.65 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 22
%%Page: "9" 23
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Chapter 1) 421.44 702.62 T
(Introduction) 468.67 702.62 T
2 F
(9) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(Dylan allows \337exible typing of variables, parameters, and r) 126.65 665.62 T
(eturn values.) 414.27 665.62 T
(Y) 126.65 651.62 T
(ou can permit variables, parameters, and r) 132.97 651.62 T
(eturn values to be of a general) 338.67 651.62 T
(type, so that their values can be objects of any subtype of the general type.) 126.65 637.62 T
(Later in the development cycle, when the pr) 126.65 623.62 T
(ogram speci\336cation is r) 340.81 623.62 T
(e\336ned,) 453.61 623.62 T
(you can add mor) 126.65 609.62 T
(e speci\336c type constraints.) 209.25 609.62 T
(\245) 108.65 589.62 T
(Y) 126.65 589.62 T
(ou can choose to allow r) 132.97 589.62 T
(un-time de\336nition of new classes and methods.) 250.31 589.62 T
-0.16 (Even if you do not so choose, most Dylan development envir) 126.65 575.62 P
-0.16 (onments allow) 421.34 575.62 P
(you to add or change de\336nitions at r) 126.65 561.62 T
(un time without r) 303.56 561.62 T
(ecompiling or r) 389.35 561.62 T
(elink-) 463.95 561.62 T
(ing the pr) 126.65 547.62 T
(ogram, while the pr) 173.88 547.62 T
(ogram is under development.) 269.82 547.62 T
(\245) 108.65 527.62 T
(Like those of Java, Dylan implementations pr) 126.65 527.62 T
(ovide automatic storage man-) 346.49 527.62 T
-0 (agement. Y) 126.65 513.62 P
-0 (ou can cr) 180.32 513.62 P
-0 (eate and use objects fr) 224.27 513.62 P
-0 (eely) 330.94 513.62 P
-0 (, even in complex algorithms,) 349.57 513.62 P
(wher) 126.65 499.62 T
(e contr) 151.64 499.62 T
(ol \337ow may make it dif) 184.68 499.62 T
(\336cult to tell when an object is no longer) 297.61 499.62 T
(needed. Y) 126.65 485.62 T
(ou do not explicitly allocate or deallocate memory) 174.12 485.62 T
(, and you do) 416.26 485.62 T
(not have to worry about failing to fr) 126.65 471.62 T
(ee unused memory or r) 301.35 471.62 T
(eferring to) 414.87 471.62 T
(memory that has alr) 126.65 457.62 T
(eady been fr) 224.55 457.62 T
(eed.) 284.49 457.62 T
(\245) 108.65 437.62 T
-0.07 (Dylan includes a powerful) 126.65 437.62 P
2 F
-0.07 (macro) 258.48 437.62 P
1 F
-0.07 ( language, based on pattern matching and) 289.03 437.62 P
(r) 126.65 423.62 T
(eplacement. Macr) 130.79 423.62 T
(os let you extend the base language by cr) 216.94 423.62 T
(eating syntactic) 416.08 423.62 T
(str) 126.65 409.62 T
(uctur) 139.15 409.62 T
(es that mor) 165.04 409.62 T
(e concisely match a particular pr) 219.41 409.62 T
(oblem domain. Macr) 377.21 409.62 T
(os) 478.21 409.62 T
-0.01 (can serve as shorthand for common idioms, and can cr) 126.65 395.62 P
-0.01 (eate mor) 391.45 395.62 P
-0.01 (e abstract or) 433.67 395.62 P
(pr) 126.65 381.62 T
(oblem-speci\336c constr) 137.41 381.62 T
(ucts that the compiler translates into Dylan.) 240.06 381.62 T
3 15 Q
(1.4  Delivery of saf) 99.65 341.95 T
(e) 207.57 341.95 T
(, ef\336cient, compact applications) 214.53 341.95 T
1 11 Q
-0.44 (Languages that pr) 99.65 321.62 P
-0.44 (ovide r) 187.01 321.62 P
-0.44 (un-time \337exibility have usually paid a price in decr) 220.99 321.62 P
-0.44 (eased) 465.92 321.62 P
(performance and lar) 99.65 307.62 T
(ge application size. Dylan\325s solution is to separate the devel-) 198.63 307.62 T
(opment envir) 99.65 293.62 T
(onment fr) 165.22 293.62 T
(om the deliver) 213.16 293.62 T
(ed r) 283.66 293.62 T
(un-time application. Dylan pr) 302.65 293.62 T
(ovides) 447.31 293.62 T
(maximum \337exibility during pr) 99.65 279.62 T
(ogram development, but also lets you trade \337exi-) 248.45 279.62 T
-0.27 (bility for performance in a deliver) 99.65 265.62 P
-0.27 (ed application. A Dylan compiler can often opti-) 262.57 265.62 P
(mize such potentially expensive operations as slot access and method dispatch.) 99.65 251.62 T
(\245) 108.65 231.62 T
(Y) 126.65 231.62 T
(ou can declar) 132.97 231.62 T
(e type constraints for variables, parameters, r) 197.62 231.62 T
(eturn values,) 416.65 231.62 T
(and slots. The mor) 126.65 217.62 T
(e speci\336c your type declarations, the better the compiler) 216.67 217.62 T
(can detect type mismatches and optimize performance.) 126.65 203.62 T
(\245) 108.65 183.62 T
(By default, classes and generic functions ar) 126.65 183.62 T
(e closed of) 335.35 183.62 T
(f, or) 386.34 183.62 T
2 F
(sealed) 408.6 183.62 T
1 F
(. No other) 440.37 183.62 T
(library or application can de\336ne subclasses for a sealed class or de\336ne) 126.65 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 23
%%Page: "10" 24
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(10) 63.65 702.62 T
0 F
(Chapter 1) 82.65 702.62 T
(Introduction) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(methods for a sealed generic function. Sealing can help a compiler to opti-) 126.65 665.62 T
(mize slot access and method dispatch.) 126.65 651.62 T
(\245) 108.65 631.62 T
-0.14 (Dylan\325s cor) 126.65 631.62 P
-0.14 (e language is small. Extended components of the language, such) 181.75 631.62 P
(as input\320output and advanced mathematical operations, ar) 126.65 617.62 T
(e pr) 414.18 617.62 T
(ovided by) 432.95 617.62 T
(libraries. Y) 126.65 603.62 T
(ou can keep an application small by using only the libraries that) 178.28 603.62 T
-0.1 (the application needs. Y) 126.65 589.62 P
-0.1 (ou can also cr) 241.95 589.62 P
-0.1 (eate libraries of your own, and deliver) 307.73 589.62 P
(them in compiled form.) 126.65 575.62 T
(\245) 108.65 555.62 T
(Y) 126.65 555.62 T
(ou can selectively open or) 132.97 555.62 T
2 F
(unseal) 261.66 555.62 T
1 F
( classes and generic functions to allow) 294.65 555.62 T
(users of your application or library to specialize the interfaces that you pr) 126.65 541.62 T
(o-) 483.36 541.62 T
(vide. An open interface in Dylan includes link- and r) 126.65 527.62 T
(un-time information,) 382.7 527.62 T
(so that an application that specializes the interface does not have to be) 126.65 513.62 T
(r) 126.65 499.62 T
(ecompiled to use a new version of the library) 130.79 499.62 T
(.) 348.77 499.62 T
(\245) 108.65 479.62 T
(Most Dylan implementations pr) 126.65 479.62 T
(ovide support for operating in a multilan-) 282.38 479.62 T
(guage envir) 126.65 465.62 T
(onment. A Dylan pr) 184.27 465.62 T
(ogram can operate with code written in) 281.69 465.62 T
(another language, and a pr) 126.65 451.62 T
(ogram written in another language can operate) 257.53 451.62 T
(with Dylan code. Y) 126.65 437.62 T
(ou can use a Dylan pr) 218.95 437.62 T
(ogram as a component of a soft-) 324.68 437.62 T
(war) 126.65 423.62 T
(e system that includes code written in other languages.) 145.47 423.62 T
(Dylan\325s overall aim is to meet two needs that have often been in con\337ict:) 99.65 403.62 T
2 F
(1.) 108.65 383.62 T
1 F
(T) 126.65 383.62 T
(o give pr) 132.38 383.62 T
(ogrammers the fr) 175.44 383.62 T
(eedom and power to develop applications) 259.68 383.62 T
(rapidly) 126.65 369.62 T
2 F
(2.) 108.65 349.62 T
1 F
(T) 126.65 349.62 T
(o deliver components and applications that can r) 132.38 349.62 T
(un ef) 369.51 349.62 T
(\336ciently on a wide) 394.02 349.62 T
(range of machines and operating systems) 126.65 335.62 T
(This book intr) 99.65 315.62 T
(oduces you to the featur) 167.71 315.62 T
(es of Dylan that make those goals attain-) 285.28 315.62 T
(able. W) 99.65 301.62 T
(e think you will \336nd Dylan to be a language that makes your pr) 135.19 301.62 T
(ogram-) 444.33 301.62 T
(ming time both pr) 99.65 287.62 T
(oductive and enjoyable.) 187.93 287.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 24
%%Page: "11" 25
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 293.07 135.62 T
(1) 297.47 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(2) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(2) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Quick Start) 100.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(W) 99.65 449.62 T
(e start by jumping right into Dylan. W) 109.64 449.62 T
(e show how to interact with a develop-) 294.6 449.62 T
(ment envir) 99.65 435.62 T
(onment, to use basic arithmetic functions, to de\336ne variables and con-) 152.6 435.62 T
(stants, and to cr) 99.65 421.62 T
(eate a simple but complete Dylan pr) 176.3 421.62 T
(ogram.) 351.91 421.62 T
(The Dylan language does not specify a development envir) 126.65 407.62 T
(onment, but) 409.59 407.62 T
(many Dylan implementations pr) 99.65 393.62 T
(ovide one. A) 258.44 393.62 T
2 F
(development environment) 323.09 393.62 T
1 F
( can) 456.62 393.62 T
(contain many tools, such as an editor custom-tailor) 99.65 379.62 T
(ed for Dylan code, a br) 347.39 379.62 T
(owser) 458.24 379.62 T
(that helps you to examine objects, a debugger) 99.65 365.62 T
(, and a) 320.55 365.62 T
2 F
(listener) 355.67 365.62 T
1 F
( that enables you to) 393.55 365.62 T
(type in expr) 99.65 351.62 T
(essions and to see their r) 158.04 351.62 T
(eturn values and output. Y) 277.02 351.62 T
(ou can use a lis-) 406.49 351.62 T
-0.3 (tener to test pieces of your pr) 99.65 337.62 P
-0.3 (ogram without compiling the whole pr) 239.33 337.62 P
-0.3 (ogram. When) 427.25 337.62 P
-0.16 (you start using Dylan, a good way to learn and explor) 99.65 323.62 P
-0.16 (e is to use a listener) 360.45 323.62 P
-0.16 (. W) 453.31 323.62 P
-0.16 (e use) 468.64 323.62 P
(a hypothetical listener in this chapter to show the r) 99.65 309.62 T
(esults of evaluating Dylan) 345.89 309.62 T
(expr) 99.65 295.62 T
(essions. Of course, Dylan also supports the traditional appr) 121.35 295.62 T
(oach of editing) 409.43 295.62 T
(sour) 99.65 281.62 T
(ce \336les, compiling the pr) 121.1 281.62 T
(ogram, and r) 240.14 281.62 T
(unning the pr) 302.95 281.62 T
(ogram.) 369.62 281.62 T
3 15 Q
(2.1  Dialog with a Dylan listener) 99.65 241.95 T
1 11 Q
(Her) 99.65 221.62 T
(e is a sample dialog between a user and a listener) 118.22 221.62 T
(. The) 356.76 221.62 T
4 10 Q
(bold typewriter) 383.43 221.62 T
(font) 99.65 207.62 T
1 11 Q
( shows what the user types. The) 123.65 207.62 T
6 10 Q
(bold-oblique typewriter font) 282.05 207.62 T
1 11 Q
( shows) 450.05 207.62 T
(what the listener displays.) 99.65 193.62 T
6 9 Q
(?) 99.65 172.95 T
4 F
( 7 + 12;) 105.05 172.95 T
6 F
(19) 99.65 161.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 25
%%Page: "12" 26
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(12) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(In our hypothetical listener) 99.65 665.62 T
(, the Dylan pr) 230.88 665.62 T
(ompt is the question mark,) 297.63 665.62 T
6 9 Q
(?) 430.76 665.62 T
1 11 Q
(. The user) 436.16 665.62 T
(types in) 99.65 651.62 T
4 10 Q
(7 + 12;) 141 651.62 T
1 11 Q
(and pr) 189 651.62 T
(esses Enter) 221.13 651.62 T
(. The listener executes the expr) 273.92 651.62 T
(ession and dis-) 422.98 651.62 T
-0.34 (plays the value r) 99.65 637.62 P
-0.34 (eturned by that expr) 179.21 637.62 P
-0.34 (ession, which is) 277.65 637.62 P
4 10 Q
-0.73 (19) 355.78 637.62 P
1 11 Q
-0.34 (. The listener displays any) 367.78 637.62 P
(r) 99.65 623.62 T
(eturn values and output pr) 103.79 623.62 T
(oduced by the expr) 234.95 623.62 T
(ession.) 328.59 623.62 T
3 15 Q
(2.2  Simple arithmetic operations) 99.65 505.95 T
1 11 Q
(W) 99.65 485.62 T
(e can do other simple arithmetic:) 109.64 485.62 T
6 9 Q
(?) 99.65 464.95 T
4 F
( 7 * 52;) 105.05 464.95 T
6 F
(364) 99.65 453.95 T
(?) 99.65 434.95 T
4 F
( 7 - 12;) 105.05 434.95 T
6 F
(-5) 99.65 423.95 T
1 11 Q
(W) 99.65 276.62 T
(e can multiply several numbers together:) 109.64 276.62 T
6 9 Q
(?) 99.65 255.95 T
4 F
( 24 * 7 * 52;) 105.05 255.95 T
6 F
(8736) 99.65 244.95 T
3 13 Q
(2.2.1  T) 99.65 215.29 T
(rue and false) 134.96 215.29 T
1 11 Q
(W) 99.65 195.62 T
(e can compar) 109.64 195.62 T
(e the magnitude of two numbers:) 174.05 195.62 T
6 9 Q
(?) 99.65 174.95 T
4 F
( 1 = 1;) 105.05 174.95 T
6 F
(#t) 99.65 163.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Environment note:) 132.65 589.62 T
1 F
(Our hypothetical development envir) 228.9 589.62 T
(onment) 407.03 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(does not r) 132.65 575.62 T
(epr) 180.95 575.62 T
(esent any particular Dylan development envir) 196.98 575.62 T
(on-) 420.97 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment. The Dylan language does not r) 132.65 561.62 T
(equir) 312.55 561.62 T
(e a development envi-) 337.96 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 547.62 T
(onment, so any given implementation may not pr) 136.79 547.62 T
(ovide one.) 377.8 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Caution: Spaces are needed!) 132.65 395.62 T
1 F
(In Dylan, it is legal to use characters) 275.93 395.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (such as) 132.65 381.62 P
4 10 Q
-0.71 (+, -, *, <) 170.24 381.62 P
1 11 Q
-0.33 (,) 228.09 381.62 P
4 10 Q
-0.71 (>) 233.27 381.62 P
1 11 Q
-0.33 (, and) 239.27 381.62 P
4 10 Q
-0.71 (/) 265.48 381.62 P
1 11 Q
-0.33 ( in names of variables. Ther) 271.48 381.62 P
-0.33 (efor) 403.7 381.62 P
-0.33 (e, in most) 422.79 381.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (cases, you must leave spaces ar) 132.65 367.62 P
-0.35 (ound those characters in code, to make) 282.39 367.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.36 (it clear that you ar) 132.65 353.62 P
-0.36 (e using them as functions, and that they ar) 219.68 353.62 P
-0.36 (e not part) 423.16 353.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the name of a variable. For example:) 132.65 339.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(a + b) 159.65 325.62 T
1 11 Q
(means add) 195.65 325.62 T
4 10 Q
(a) 251.64 325.62 T
1 11 Q
( and) 257.64 325.62 T
4 10 Q
(b) 281.76 325.62 T
1 11 Q
(.) 287.76 325.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(a+b) 159.65 311.62 T
1 11 Q
(means the name) 196.9 311.62 T
4 10 Q
(a+b) 278.84 311.62 T
1 11 Q
(.) 296.84 311.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 602.83 126.65 540.08 2 L
V
0.25 H
0 Z
N
477.65 602.83 477.65 540.08 2 L
V
N
126.52 602.95 477.77 602.95 2 L
V
N
126.52 539.95 477.77 539.95 2 L
V
N
126.65 408.83 126.65 304.08 2 L
V
N
477.65 408.83 477.65 304.08 2 L
V
N
126.52 408.95 477.77 408.95 2 L
V
N
126.52 303.95 477.77 303.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 26
%%Page: "13" 27
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.2 Simple arithmetic operations) 388.45 702.62 T
2 F
(13) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
( 3 < 30;) 105.05 666.95 T
6 F
(#t) 99.65 655.95 T
(?) 99.65 636.95 T
4 F
( 15 > 16;) 105.05 636.95 T
6 F
(#f) 99.65 625.95 T
1 11 Q
-0.04 (The functions) 99.65 605.62 P
4 10 Q
-0.08 (=) 168.93 605.62 P
1 11 Q
-0.04 (,) 174.93 605.62 P
4 10 Q
-0.08 (<,) 180.4 605.62 P
1 11 Q
-0.04 ( and) 192.4 605.62 P
4 10 Q
-0.08 (>) 216.45 605.62 P
1 11 Q
-0.04 ( ar) 222.45 605.62 P
-0.04 (e) 234.81 605.62 P
2 F
-0.04 (predicates) 242.8 605.62 P
1 F
-0.04 (. A pr) 294.11 605.62 P
-0.04 (edicate r) 321.61 605.62 P
-0.04 (eturns tr) 362.9 605.62 P
-0.04 (ue if the condition) 404.36 605.62 P
(it is testing is tr) 99.65 591.62 T
(ue; otherwise, it r) 173.83 591.62 T
(eturns false. As you might guess,) 258.33 591.62 T
4 10 Q
(#t) 421.87 591.62 T
1 11 Q
( means tr) 433.87 591.62 T
(ue) 478.76 591.62 T
(and) 99.65 577.62 T
4 10 Q
(#f) 121.02 577.62 T
1 11 Q
( means false. False is r) 133.02 577.62 T
(epr) 240.13 577.62 T
(esented by the unique value) 256.15 577.62 T
4 10 Q
(#f) 395.66 577.62 T
1 11 Q
( only) 407.66 577.62 T
(, but any) 430.91 577.62 T
(object that is not) 99.65 563.62 T
4 10 Q
(#f) 181.98 563.62 T
1 11 Q
( is tr) 193.98 563.62 T
(ue \050thus, 0 is a tr) 215.19 563.62 T
(ue value\051.) 295.25 563.62 T
3 13 Q
(2.2.2  In\336x syntax and function-call syntax) 99.65 308.29 T
1 11 Q
(The functions) 99.65 288.62 T
4 10 Q
(+) 169 288.62 T
1 11 Q
(,) 175 288.62 T
4 10 Q
(-) 180.5 288.62 T
1 11 Q
(,) 186.5 288.62 T
4 10 Q
(*) 192 288.62 T
1 11 Q
(,) 198 288.62 T
4 10 Q
(<) 203.5 288.62 T
1 11 Q
(,) 209.5 288.62 T
4 10 Q
(>) 215 288.62 T
1 11 Q
(, and) 221 288.62 T
4 10 Q
(=) 247.88 288.62 T
1 11 Q
( use) 253.88 288.62 T
2 F
(in\336x syntax) 275.94 288.62 T
1 F
(; that is, the function name) 333.68 288.62 T
(appears between the ar) 99.65 274.62 T
(guments to the function. Most other Dylan functions use) 212.35 274.62 T
(the function-call syntax shown in the following call to the) 99.65 260.62 T
4 10 Q
(min) 381.69 260.62 T
1 11 Q
( function, which) 399.69 260.62 T
(r) 99.65 246.62 T
(eturns the smallest of its ar) 103.79 246.62 T
(guments:) 234.27 246.62 T
6 9 Q
(?) 99.65 225.95 T
4 F
( min\0502, 4, 6\051;) 105.05 225.95 T
6 F
(2) 99.65 214.95 T
1 11 Q
(The function name appears \336rst, followed by its ar) 99.65 194.62 T
(guments, which ar) 344.76 194.62 T
(e sur-) 435.1 194.62 T
(r) 99.65 180.62 T
(ounded by par) 103.79 180.62 T
(entheses and separated by commas. Other examples of the func-) 175.5 180.62 T
(tion-call syntax follow:) 99.65 166.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C and C++: Caution!) 132.65 529.62 T
1 F
( C and C++ use integers to) 325.62 529.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.18 (r) 132.65 515.62 P
-0.18 (epr) 136.79 515.62 P
-0.18 (esent Boolean values \321 0 r) 152.82 515.62 P
-0.18 (epr) 282.1 515.62 P
-0.18 (esents false, and any nonzer) 298.13 515.62 P
-0.18 (o value) 433.68 515.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is consider) 132.65 501.62 T
(ed tr) 184.56 501.62 T
(ue. Dylan has an explicit) 207.14 501.62 T
4 10 Q
(<boolean>) 329.37 501.62 T
1 11 Q
( type with two) 383.37 501.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instances:) 132.65 487.62 T
4 10 Q
(#f) 182.72 487.62 T
1 11 Q
( r) 194.72 487.62 T
(epr) 201.62 487.62 T
(esents false, and) 217.64 487.62 T
4 10 Q
(#t) 299.42 487.62 T
1 11 Q
( r) 311.42 487.62 T
(epr) 318.32 487.62 T
(esents the) 334.34 487.62 T
0 F
(canonical) 384.95 487.62 T
1 F
( tr) 426.91 487.62 T
(ue) 437.5 487.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value. However) 132.65 473.62 T
(, any value other than) 209.58 473.62 T
4 10 Q
(#f) 318.42 473.62 T
1 11 Q
( is also consider) 330.42 473.62 T
(ed tr) 407.2 473.62 T
(ue in a) 429.78 473.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Boolean test. Thus, in Dylan, 0 is consider) 132.65 459.62 T
(ed tr) 334.8 459.62 T
(ue.) 357.38 459.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with Java) 132.65 426.62 T
1 F
(: Java has a separate type for Boolean values.) 244.47 426.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Unlike Dylan, C, or C++, the Java) 132.65 412.62 T
4 10 Q
(Boolean) 298.04 412.62 T
1 11 Q
( class has only two values,) 340.04 412.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(true) 132.65 398.62 T
1 11 Q
( and) 156.65 398.62 T
4 10 Q
(false) 180.77 398.62 T
1 11 Q
(. This design allows the compiler to issue warnings) 210.77 398.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for the common C err) 132.65 384.62 T
(or) 237.2 384.62 T
4 10 Q
(if \050a=b\051 ...) 250.3 384.62 T
1 11 Q
(, because an assignment does) 322.3 384.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.22 (not typically yield a Boolean r) 132.65 370.62 P
-0.22 (esult. An explicit conversion is r) 276.97 370.62 P
-0.22 (equir) 431.72 370.62 P
-0.22 (ed) 457.13 370.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to test nonzer) 132.65 356.62 T
(o in Java:) 198.57 356.62 T
4 10 Q
(if \050a!=0\051 ...) 246.06 356.62 T
1 11 Q
(.) 324.06 356.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 542.83 126.65 452.08 2 L
V
0.25 H
0 Z
N
477.65 542.83 477.65 452.08 2 L
V
N
126.52 542.95 477.77 542.95 2 L
V
N
126.52 451.95 477.77 451.95 2 L
V
N
126.65 439.83 126.65 349.08 2 L
V
N
477.65 439.83 477.65 349.08 2 L
V
N
126.52 439.95 477.77 439.95 2 L
V
N
126.52 348.95 477.77 348.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 27
%%Page: "14" 28
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(14) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
(even?\0503\051;) 110.45 666.95 T
6 F
(#f) 99.65 655.95 T
(?) 99.65 636.95 T
4 F
(zero?\0500\051;) 110.45 636.95 T
6 F
(#t) 99.65 625.95 T
3 13 Q
(2.2.3  Case insensitivity) 99.65 507.29 T
1 11 Q
(Dylan is case insensitive. Ther) 99.65 487.62 T
(efor) 245.95 487.62 T
(e, we can call the) 265.03 487.62 T
4 10 Q
(max) 350.07 487.62 T
1 11 Q
( function as follows:) 368.07 487.62 T
6 9 Q
(?) 99.65 466.95 T
4 F
( MAX\050-1, 1\051;) 105.05 466.95 T
6 F
(1) 99.65 455.95 T
(?) 99.65 436.95 T
4 F
( mAx\0500, 55.3, 92\051;) 105.05 436.95 T
6 F
(92) 99.65 425.95 T
3 15 Q
(2.3  V) 99.65 387.95 T
(ariab) 131.07 387.95 T
(les and constants) 160.37 387.95 T
1 11 Q
(W) 99.65 367.62 T
(e can de\336ne variables for storing values:) 109.64 367.62 T
6 9 Q
(?) 99.65 346.95 T
4 F
(define variable *my-number* = 7;) 110.45 346.95 T
6 F
(?) 99.65 327.95 T
4 F
(define variable *your-number* = 12;) 110.45 327.95 T
1 11 Q
(In Dylan, these variables ar) 99.65 307.62 T
(e called) 232.05 307.62 T
2 F
(module variables) 271.6 307.62 T
1 F
(. A module variable has a) 358.68 307.62 T
(name and a value. For now) 99.65 293.62 T
(, you can consider module variables to be like global) 231.01 293.62 T
(variables in other languages. \050See Section 13.2, page 189, for information about) 99.65 279.62 T
(modules.\051 Module variables can have dif) 99.65 265.62 T
(fer) 297.79 265.62 T
(ent values assigned to them during) 310.87 265.62 T
-0.24 (the execution of a pr) 99.65 251.62 P
-0.24 (ogram. When you de\336ne a module variable, you must) 197.81 251.62 P
2 F
-0.24 (initial-) 461.45 251.62 P
(ize) 99.65 237.62 T
1 F
( it; that is, you must pr) 114.31 237.62 T
(ovide an initial value for it. For example, the initial) 224.15 237.62 T
(value of) 99.65 223.62 T
4 10 Q
(*my-number*) 141.63 223.62 T
1 11 Q
( is) 207.63 223.62 T
4 10 Q
(7) 221 223.62 T
1 11 Q
(.) 227 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.05 (Convention:) 132.65 597.62 P
1 F
-0.05 ( The names of most pr) 194.68 597.62 P
-0.05 (edicates end with a question mark) 302.52 597.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\321 for example,) 132.65 583.62 T
4 10 Q
(even?) 209.9 583.62 T
1 11 Q
(,) 239.9 583.62 T
4 10 Q
(odd?) 245.4 583.62 T
1 11 Q
(,) 269.4 583.62 T
4 10 Q
(zero?) 274.9 583.62 T
1 11 Q
(,) 304.9 583.62 T
4 10 Q
(positive?) 310.4 583.62 T
1 11 Q
( and) 364.4 583.62 T
4 10 Q
(negative?) 388.52 583.62 T
1 11 Q
(. The) 442.52 583.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(question mark is part of the name, and does not have any special) 132.65 569.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(behavior) 132.65 555.62 T
(. Ther) 174.85 555.62 T
(e ar) 202.92 555.62 T
(e exceptions to this convention, such as the pr) 220.58 555.62 T
(edi-) 442.75 555.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cates named) 132.65 541.62 T
4 10 Q
(=) 195.66 541.62 T
1 11 Q
(,) 201.66 541.62 T
4 10 Q
(<) 207.16 541.62 T
1 11 Q
(, and) 213.16 541.62 T
4 10 Q
(>) 240.03 541.62 T
1 11 Q
(.) 246.03 541.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 189.62 T
1 F
( Module variables have names that start and end) 194.68 189.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with an asterisk \321 for example,) 132.65 175.62 T
4 10 Q
(*my-number*) 289.76 175.62 T
1 11 Q
(. The asterisks ar) 355.76 175.62 T
(e) 436.83 175.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(part of the name, and do not have any special behavior) 132.65 161.62 T
(.) 399.04 161.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 610.83 126.65 534.08 2 L
V
0.25 H
0 Z
N
477.65 610.83 477.65 534.08 2 L
V
N
126.52 610.95 477.77 610.95 2 L
V
N
126.52 533.95 477.77 533.95 2 L
V
N
126.65 202.83 126.65 154.08 2 L
V
N
477.65 202.83 477.65 154.08 2 L
V
N
126.52 202.95 477.77 202.95 2 L
V
N
126.52 153.95 477.77 153.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 28
%%Page: "15" 29
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.3 Variables and constants) 406.75 702.62 T
2 F
(15) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 659.62 T
(e can ask the listener for the values of module variables:) 109.64 659.62 T
6 9 Q
(?) 99.65 638.95 T
4 F
(*my-number*;) 110.45 638.95 T
6 F
(7) 99.65 627.95 T
(?) 99.65 608.95 T
4 F
(*your-number*;) 110.45 608.95 T
6 F
(12) 99.65 597.95 T
1 11 Q
(W) 99.65 577.62 T
(e can add the values stor) 109.64 577.62 T
(ed in these variables:) 229.52 577.62 T
6 9 Q
(?) 99.65 556.95 T
4 F
(*my-number* + *your-number*;) 110.45 556.95 T
6 F
(19) 99.65 545.95 T
1 11 Q
(W) 99.65 525.62 T
(e can multiply the values stor) 109.64 525.62 T
(ed in these variables:) 252.85 525.62 T
6 9 Q
(?) 99.65 504.95 T
4 F
(*my-number* * *your-number*;) 110.45 504.95 T
6 F
(84) 99.65 493.95 T
1 11 Q
-0.08 (W) 99.65 473.62 P
-0.08 (e can use the) 109.64 473.62 P
2 F
-0.08 (assignment operator) 174.19 473.62 P
1 F
-0.08 (,) 275.65 473.62 P
4 10 Q
-0.17 (:=) 281.07 473.62 P
1 11 Q
-0.08 (, to change the values stor) 293.07 473.62 P
-0.08 (ed in a variable:) 418.48 473.62 P
6 9 Q
(?) 99.65 452.95 T
4 F
(*my-number* := 100;) 110.45 452.95 T
6 F
(100) 99.65 441.95 T
3 13 Q
(2.3.1  Assignment, initialization, and equality) 99.65 412.29 T
1 11 Q
-0.37 (People new to Dylan may \336nd) 99.65 392.62 P
4 10 Q
-0.8 (=) 248.24 392.62 P
1 11 Q
-0.37 ( and) 254.24 392.62 P
4 10 Q
-0.8 (:=) 277.63 392.62 P
1 11 Q
-0.37 (confusing, because the names ar) 294.83 392.62 P
-0.37 (e similar) 449.85 392.62 P
-0.37 (,) 490.51 392.62 P
(and the meanings ar) 99.65 378.62 T
(e r) 198.69 378.62 T
(elated but distinct.) 210.86 378.62 T
-0.02 (The meaning of) 126.65 364.62 P
4 10 Q
-0.05 (=) 205.52 364.62 P
1 11 Q
-0.02 ( depends on whether it appears an expr) 211.52 364.62 P
-0.02 (ession, or in a de\336-) 404.02 364.62 P
(nition of a variable or constant. In an expr) 99.65 350.62 T
(ession,) 302.77 350.62 T
4 10 Q
(=) 338.48 350.62 T
1 11 Q
( is a function that tests for) 344.48 350.62 T
(equality; for example,) 99.65 336.62 T
6 9 Q
(?) 99.65 315.95 T
4 F
(3 = 3;) 110.45 315.95 T
6 F
(#t) 99.65 304.95 T
1 11 Q
-0.19 (In a de\336nition of a variable or constant,) 99.65 284.62 P
4 10 Q
-0.42 (=) 291.76 284.62 P
1 11 Q
-0.19 ( pr) 297.76 284.62 P
-0.19 (ecedes the initial value of the variable) 311.07 284.62 P
(or constant; for example,) 99.65 270.62 T
6 9 Q
(?) 99.65 249.95 T
4 F
(define variable *her-number* = 3;) 110.45 249.95 T
1 11 Q
(After you initialize a variable with) 99.65 229.62 T
4 10 Q
(=) 269.76 229.62 T
1 11 Q
(, the) 275.76 229.62 T
4 10 Q
(=) 299.27 229.62 T
1 11 Q
( function r) 305.27 229.62 T
(eturns tr) 355.69 229.62 T
(ue:) 397.19 229.62 T
6 9 Q
(?) 99.65 208.95 T
4 F
(*her-number* = 3;) 110.45 208.95 T
6 F
(#t) 99.65 197.95 T
1 11 Q
(The assignment operator) 99.65 177.62 T
(,) 219.93 177.62 T
4 10 Q
(:=) 225.43 177.62 T
1 11 Q
(, performs assignment, which is setting the value of) 237.43 177.62 T
(an existing variable; for example,) 99.65 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 29
%%Page: "16" 30
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(16) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
(*her-number* := 4;) 110.45 666.95 T
6 F
(4) 99.65 655.95 T
1 11 Q
(After you have assigned a value to a variable, the = function r) 99.65 635.62 T
(eturns tr) 399.07 635.62 T
(ue:) 440.56 635.62 T
6 9 Q
(?) 99.65 614.95 T
4 F
(*her-number* = 4;) 110.45 614.95 T
6 F
(#t) 99.65 603.95 T
1 11 Q
(Dylan of) 99.65 583.62 T
(fers an identity pr) 141.6 583.62 T
(edicate, which we discuss in Section 3.3.1, page 35.) 228.54 583.62 T
3 13 Q
(2.3.2  V) 99.65 552.29 T
(ariab) 135.77 552.29 T
(les that ha) 161.16 552.29 T
(ve type constraints) 213.75 552.29 T
1 11 Q
(W) 99.65 532.62 T
(e de\336ned the variables) 109.64 532.62 T
4 10 Q
(*my-number*) 222.18 532.62 T
1 11 Q
( and) 288.18 532.62 T
4 10 Q
(*your-number*) 312.3 532.62 T
1 11 Q
( without giving a) 390.3 532.62 T
2 F
(type constraint) 99.65 518.62 T
1 F
( on the variables. Thus, we can stor) 174.49 518.62 T
(e any type of value in these) 344.96 518.62 T
(variables. For example, her) 99.65 504.62 T
(e we use the assignment operator) 230.9 504.62 T
(,) 392.56 504.62 T
4 10 Q
(:=) 398.06 504.62 T
1 11 Q
( , to stor) 410.06 504.62 T
(e strings) 449.05 504.62 T
(in these variables:) 99.65 490.62 T
6 9 Q
(?) 99.65 469.95 T
4 F
(*my-number* := "seven";) 110.45 469.95 T
6 F
("seven") 99.65 458.95 T
(?) 99.65 439.95 T
4 F
(*your-number* := "twelve";) 110.45 439.95 T
6 F
("twelve") 99.65 428.95 T
1 11 Q
(What happens if we try to add the string values stor) 99.65 408.62 T
(ed in these variables?) 352.44 408.62 T
6 9 Q
(?) 99.65 387.95 T
4 F
(*my-number* + *your-number*;) 110.45 387.95 T
6 F
(ERROR: No applicable method for + with arguments \050"seven", "twelve"\051) 99.65 376.95 T
1 11 Q
(Dylan signals an err) 99.65 356.62 T
(or because the) 197.04 356.62 T
4 10 Q
(+) 269.2 356.62 T
1 11 Q
( function does not know how to operate on) 275.2 356.62 T
(string ar) 99.65 342.62 T
(guments.) 140.36 342.62 T
(W) 99.65 218.62 T
(e can r) 109.64 218.62 T
(ede\336ne the variables to include a type constraint, which ensur) 141.34 218.62 T
(es that the) 442.4 218.62 T
-0.14 (variables can hold only numbers. W) 99.65 204.62 P
-0.14 (e specify that) 273.37 204.62 P
4 10 Q
-0.3 (*my-number*) 339.95 204.62 P
1 11 Q
-0.14 ( can hold any inte-) 405.95 204.62 P
(ger) 99.65 190.62 T
(, and that) 114.56 190.62 T
4 10 Q
(*your-number*) 163.26 190.62 T
1 11 Q
( can hold a single-pr) 241.26 190.62 T
(ecision \337oating-point number:) 340.15 190.62 T
6 9 Q
(?) 99.65 169.95 T
4 F
( define variable *my-number* :: <integer> = 7;) 105.05 169.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Environment note:) 132.65 308.62 T
1 F
(The Dylan implementation de\336nes the exact) 228.9 308.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(wor) 132.65 294.62 T
(ding of err) 151.98 294.62 T
(or messages, and what happens when an err) 203.35 294.62 T
(or is sig-) 419.21 294.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.29 (naled. If your implementation opens a Dylan debugger when an err) 132.65 280.62 P
-0.29 (or) 458.84 280.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is signaled, you now have an opportunity to experiment with the) 132.65 266.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(debugger!) 132.65 252.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 321.83 126.65 245.08 2 L
V
0.25 H
0 Z
N
477.65 321.83 477.65 245.08 2 L
V
N
126.52 321.95 477.77 321.95 2 L
V
N
126.52 244.95 477.77 244.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 30
%%Page: "17" 31
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.3 Variables and constants) 406.75 702.62 T
2 F
(17) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
( define variable *your-number* :: <single-float> = 12.01;) 105.05 666.95 T
1 11 Q
(What happens if we try to stor) 99.65 646.62 T
(e a string in one of the variables?) 247.44 646.62 T
6 9 Q
(?) 99.65 625.95 T
4 F
(*my-number* := "seven";) 110.45 625.95 T
6 F
(ERROR: The value assigned to *my-number* must be of type <integer>) 99.65 614.95 T
1 11 Q
(Both) 99.65 594.62 T
4 10 Q
(<integer>) 125.11 594.62 T
1 11 Q
( and) 179.11 594.62 T
4 10 Q
(<single-float>) 203.24 594.62 T
1 11 Q
( ar) 287.24 594.62 T
(e) 299.63 594.62 T
2 F
(classes.) 307.65 594.62 T
1 F
(For now) 347.35 594.62 T
(, you can think of a) 387.14 594.62 T
-0.23 (class as being like a datatype in another language. Dylan pr) 99.65 580.62 P
-0.23 (ovides a set of built-in) 386.3 580.62 P
(classes, and you can also de\336ne new classes.) 99.65 566.62 T
(The) 99.65 470.62 T
4 10 Q
(+) 120.81 470.62 T
1 11 Q
( function can operate on numbers of dif) 126.81 470.62 T
(fer) 318.78 470.62 T
(ent types:) 331.86 470.62 T
6 9 Q
(?) 99.65 449.95 T
4 F
(*my-number* + *your-number*;) 110.45 449.95 T
6 F
(19.01) 99.65 438.95 T
3 13 Q
(2.3.3  Module constants) 99.65 409.29 T
1 11 Q
(A) 99.65 389.62 T
2 F
(module constant) 110.96 389.62 T
1 F
( is much like a module variable, except that it is an err) 194.36 389.62 T
(or to) 456.43 389.62 T
(assign a dif) 99.65 375.62 T
(fer) 154.58 375.62 T
(ent value to a constant. Although you cannot assign a dif) 167.66 375.62 T
(fer) 443.98 375.62 T
(ent) 457.06 375.62 T
(value to a constant, you may be able to change the elements of the value, such as) 99.65 361.62 T
(assigning a dif) 99.65 347.62 T
(fer) 170.3 347.62 T
(ent value to an element of an array) 183.38 347.62 T
(.) 351.06 347.62 T
(Y) 126.65 333.62 T
(ou use) 132.97 333.62 T
4 10 Q
(define constant) 167.68 333.62 T
1 11 Q
( to de\336ne a module constant, in the same way) 257.68 333.62 T
(that you use) 99.65 319.62 T
4 10 Q
(define variable) 162.29 319.62 T
1 11 Q
( to de\336ne a variable. Y) 252.29 319.62 T
(ou must initialize the value) 359.84 319.62 T
(of the constant, and you cannot change that value thr) 99.65 305.62 T
(oughout the execution of a) 357.86 305.62 T
(Dylan pr) 99.65 291.62 T
(ogram. Her) 142.89 291.62 T
(e is an example:) 198.64 291.62 T
6 9 Q
(?) 99.65 270.95 T
4 F
( define constant $pi = 3.14159;) 105.05 270.95 T
1 11 Q
(Both module variables and module constants ar) 99.65 179.62 T
(e accessible within a) 331.89 179.62 T
2 F
(module) 433.24 179.62 T
1 F
(.) 471.74 179.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 532.62 T
1 F
(Class names start with an open angle bracket and end) 197.43 532.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with a close angle bracket \321 for example,) 132.65 518.62 T
4 10 Q
(<integer>) 337.81 518.62 T
1 11 Q
(. The angle) 391.81 518.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(brackets ar) 132.65 504.62 T
(e part of the name, and do not have any special behavior) 185.49 504.62 T
(.) 459.9 504.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 242.62 T
1 F
(Module constant names start with the dollar sign,) 197.43 242.62 T
4 10 Q
($) 441.65 242.62 T
1 11 Q
(\321) 453.65 242.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for example,) 132.65 228.62 T
4 10 Q
($pi) 196.15 228.62 T
1 11 Q
(. The dollar sign is part of the name, and does not) 214.15 228.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(have any special behavior) 132.65 214.62 T
(.) 257.84 214.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 545.83 126.65 497.08 2 L
V
0.25 H
0 Z
N
477.65 545.83 477.65 497.08 2 L
V
N
126.52 545.95 477.77 545.95 2 L
V
N
126.52 496.95 477.77 496.95 2 L
V
N
126.65 255.83 126.65 207.08 2 L
V
N
477.65 255.83 477.65 207.08 2 L
V
N
126.52 255.95 477.77 255.95 2 L
V
N
126.52 206.95 477.77 206.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 31
%%Page: "18" 32
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(18) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\050See Section 13.2, page 189, for information about modules.\051 Dylan also of) 99.65 665.62 T
(fers) 456.79 665.62 T
(variables that ar) 99.65 651.62 T
(e accessible within a smaller ar) 177.85 651.62 T
(ea, called) 327.49 651.62 T
2 F
(local variables) 375.29 651.62 T
1 F
(. Ther) 447.69 651.62 T
(e is) 475.75 651.62 T
(no concept of a local constant; all constants ar) 99.65 637.62 T
(e module constants. Ther) 320.68 637.62 T
(efor) 442.75 637.62 T
(e,) 461.83 637.62 T
(thr) 99.65 623.62 T
(oughout the r) 113.78 623.62 T
(est of this book, we use the wor) 180.07 623.62 T
(d) 332.91 623.62 T
0 F
(constant) 342.39 623.62 T
1 F
( as shorthand for mod-) 380.47 623.62 T
(ule constant.) 99.65 609.62 T
3 13 Q
(2.3.4  Local v) 99.65 578.29 T
(ariab) 165.83 578.29 T
(les) 191.22 578.29 T
1 11 Q
(Y) 99.65 558.62 T
(ou can de\336ne a local variable by using a) 105.97 558.62 T
4 10 Q
(let) 302.79 558.62 T
1 11 Q
( declaration. Unlike module vari-) 320.79 558.62 T
(ables, local variables ar) 99.65 544.62 T
(e established dynamically) 211.78 544.62 T
(, and they have) 336.45 544.62 T
2 F
(lexical scope) 413.58 544.62 T
1 F
(.) 476.8 544.62 T
(During its lifetime, a local variable shadows any module variable, module con-) 99.65 530.62 T
(stant, or existing local variable with the same name.) 99.65 516.62 T
(Local variables ar) 126.65 502.62 T
(e scoped within the smallest body that surr) 212.09 502.62 T
(ounds them.) 421.57 502.62 T
(Y) 99.65 488.62 T
(ou can use) 105.97 488.62 T
4 10 Q
(let) 160.21 488.62 T
1 11 Q
( anywher) 178.21 488.62 T
(e within a body) 223.97 488.62 T
(, rather than just at the beginning; the) 298.66 488.62 T
-0.31 (local variable is declar) 99.65 474.62 P
-0.31 (ed starting at its de\336nition, and continuing to the end of the) 206.65 474.62 P
(smallest body that surr) 99.65 460.62 T
(ounds the de\336nition.) 211.49 460.62 T
(A) 126.65 446.62 T
2 F
(body) 137.96 446.62 T
1 F
( is a r) 163.63 446.62 T
(egion of pr) 189.39 446.62 T
(ogram code that delimits the scope of all local vari-) 242.31 446.62 T
(ables declar) 99.65 432.62 T
(ed inside the body) 156.84 432.62 T
(. When you ar) 245.5 432.62 T
(e de\336ning functions, usually ther) 313.97 432.62 T
(e is) 474.55 432.62 T
-0.21 (an implicit body available. For example,) 99.65 418.62 P
4 10 Q
-0.47 (define method) 296.16 418.62 P
1 11 Q
-0.21 ( cr) 373.7 418.62 P
-0.21 (eates an implicit body) 385.26 418.62 P
-0.21 (.) 490.36 418.62 P
-0.48 (\050For information about method de\336nitions, see Section 3.1, page 27.\051 Other contr) 99.65 404.62 P
-0.48 (ol) 484.17 404.62 P
(str) 99.65 390.62 T
(uctur) 112.15 390.62 T
(es, such as) 138.04 390.62 T
4 10 Q
(if) 191.72 390.62 T
1 11 Q
(, cr) 203.72 390.62 T
(eate implicit bodies. Bodies can be nested. If ther) 218.25 390.62 T
(e is no) 454.32 390.62 T
-0.25 (body handy) 99.65 376.62 P
-0.25 (, or if you want to cr) 156.99 376.62 P
-0.25 (eate a body smaller than the implicit one, you can) 254 376.62 P
(cr) 99.65 362.62 T
(eate a body by using) 108.68 362.62 T
4 10 Q
(begin) 211.69 362.62 T
1 11 Q
( to start it and) 241.69 362.62 T
4 10 Q
(end) 312.13 362.62 T
1 11 Q
( to \336nish it:) 330.13 362.62 T
6 9 Q
(?) 99.65 341.95 T
4 F
(begin) 110.45 341.95 T
(let radius = 5;) 121.25 330.95 T
(let circumference = 2 * $pi * radius;) 121.25 319.95 T
(circumference;) 121.25 308.95 T
(end;) 110.45 297.95 T
6 F
(31.4159) 99.65 286.95 T
1 11 Q
-0.46 (The local variables) 99.65 266.62 P
4 10 Q
-1.01 (radius) 191.7 266.62 P
1 11 Q
-0.46 ( and) 227.7 266.62 P
4 10 Q
-1.01 (circumference) 250.9 266.62 P
1 11 Q
-0.46 ( ar) 328.9 266.62 P
-0.46 (e declar) 340.83 266.62 P
-0.46 (ed, initialized, and used) 378.11 266.62 P
(within the body) 99.65 252.62 T
(. The value r) 176.08 252.62 T
(eturned by the body is the value of the expr) 236.46 252.62 T
(ession) 448.38 252.62 T
(executed last in the body) 99.65 238.62 T
(, which is) 219.47 238.62 T
4 10 Q
(circumference) 268.4 238.62 T
1 11 Q
(. Outside the lexical scope of) 346.4 238.62 T
(the body) 99.65 224.62 T
(, the local variables ar) 141.36 224.62 T
(e no longer declar) 246.78 224.62 T
(ed, and trying to access them is) 333.77 224.62 T
(an err) 99.65 210.62 T
(or:) 128.06 210.62 T
6 9 Q
(?) 99.65 189.95 T
4 F
(radius) 110.45 189.95 T
6 F
(ERROR: The variable radius is undefined.) 99.65 178.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 32
%%Page: "19" 33
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.4 Formatted output) 430.59 702.62 T
2 F
(19) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(2.4  Formatted output) 99.65 662.95 T
1 11 Q
(Thr) 99.65 642.62 T
(oughout this book, we use the) 116.94 642.62 T
4 10 Q
(format-out) 265.9 642.62 T
1 11 Q
( function to print output. The syn-) 325.9 642.62 T
(tax of) 99.65 628.62 T
4 10 Q
(format-out) 129.58 628.62 T
1 11 Q
( is) 189.58 628.62 T
4 10 Q
(format-out) 99.65 607.95 T
0 11 Q
(string ar) 165.05 607.95 T
(g1 ... ar) 203.66 607.95 T
(gn) 237.37 607.95 T
1 F
-0.25 (The) 99.65 587.62 P
4 10 Q
-0.54 (format-out) 120.57 587.62 P
1 11 Q
-0.25 ( function sends output to the standar) 180.57 587.62 P
-0.25 (d output destination, which) 358.51 587.62 P
(could be the window wher) 99.65 573.62 T
(e the pr) 230.37 573.62 T
(ogram was invoked, or a new window associ-) 267.16 573.62 T
-0.19 (ated with the pr) 99.65 559.62 P
-0.19 (ogram. The standar) 176.79 559.62 P
-0.19 (d output destination depends on the platform.) 271.27 559.62 P
(The) 126.65 545.62 T
0 F
(string) 147.81 545.62 T
1 F
( ar) 174.71 545.62 T
(gument can contain or) 187.1 545.62 T
(dinary text, formatting instr) 295.99 545.62 T
(uctions) 431.62 545.62 T
(beginning with) 99.65 531.62 T
4 10 Q
(%) 176.7 531.62 T
1 11 Q
(, and characters beginning with a backslash,) 182.7 531.62 T
4 10 Q
(\134) 399.52 531.62 T
1 11 Q
(. Or) 405.52 531.62 T
(dinary text in) 423.82 531.62 T
(the format string is sent to the destination verbatim. Y) 99.65 517.62 T
(ou can use the backslash) 360.94 517.62 T
(character in the) 99.65 503.62 T
0 F
(string) 177.47 503.62 T
1 F
( ar) 204.37 503.62 T
(gument to insert unusual characters, such as) 216.76 503.62 T
4 10 Q
(\134n) 435.33 503.62 T
1 11 Q
(, which) 447.33 503.62 T
(prints the newline character) 99.65 489.62 T
(.) 234.78 489.62 T
6 9 Q
(?) 99.65 468.95 T
4 F
(format-out\050"Your future is filled with wondrous surprises.\134n"\051) 110.45 468.95 T
6 F
(Your future is filled with wondrous surprises.) 99.65 457.95 T
1 11 Q
-0.13 (Formatting instr) 99.65 437.62 P
-0.13 (uctions begin with a per) 178.95 437.62 P
-0.13 (cent sign,) 295.76 437.62 P
4 10 Q
-0.29 (%) 344.27 437.62 P
1 11 Q
-0.13 (. For each) 350.27 437.62 P
4 10 Q
-0.29 (%) 399.4 437.62 P
1 11 Q
-0.13 (, ther) 405.4 437.62 P
-0.13 (e is normally) 430.17 437.62 P
(a corr) 99.65 423.62 T
(esponding ar) 127.28 423.62 T
(gument giving an object to output. The character after the) 191.07 423.62 T
4 10 Q
(%) 473.99 423.62 T
1 11 Q
(contr) 99.65 409.62 T
(ols how the object is formatted. A wide range of formatting characters is) 124.67 409.62 T
(available, but we use only the following formatting characters in this book:) 99.65 395.62 T
4 10 Q
(%d) 126.65 369.62 T
1 11 Q
(Prints an integer r) 207.65 369.62 T
(epr) 294.98 369.62 T
(esented as a decimal number) 311 369.62 T
4 10 Q
(%s) 126.65 343.62 T
1 11 Q
(Prints the contents of its string ar) 207.65 343.62 T
(gument unquoted) 368.13 343.62 T
4 10 Q
(%=) 126.65 317.62 T
1 11 Q
(Prints an implementation-speci\336c r) 207.65 317.62 T
(epr) 378.28 317.62 T
(esentation of the) 394.31 317.62 T
(object; you can use) 207.65 303.62 T
4 10 Q
(%=) 301.91 303.62 T
1 11 Q
( for any class of object) 313.91 303.62 T
(Her) 99.65 283.62 T
(e ar) 118.22 283.62 T
(e examples:) 135.88 283.62 T
6 9 Q
(?) 99.65 262.95 T
4 F
(format-out) 110.45 262.95 T
(\050"Your number is %= and mine is %d\134n", *your-number*, *my-number*\051;) 121.25 251.95 T
6 F
(Your number is 12.01 and mine is 7.) 99.65 240.95 T
(?) 99.65 221.95 T
4 F
(format-out\050"The %s meeting will be held at %d:%d%d.\134n", "Staff", 2, 3, 0\051;) 110.45 221.95 T
6 F
(The Staff meeting will be held at 2:30.) 99.65 210.95 T
1 11 Q
(In Dylan, functions do not need to r) 99.65 190.62 T
(eturn any values. The) 273.05 190.62 T
4 10 Q
(format-out) 380.95 190.62 T
1 11 Q
( function) 440.95 190.62 T
(r) 99.65 176.62 T
(eturns no values. Thus, it is called only for its side ef) 103.79 176.62 T
(fect \050printing output\051.) 357.98 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 33
%%Page: "20" 34
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(20) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 99.65 611.62 T
4 10 Q
(format-out) 120.81 611.62 T
1 11 Q
( function is available fr) 180.81 611.62 T
(om the) 291.93 611.62 T
4 10 Q
(format-out) 328.41 611.62 T
1 11 Q
( library) 388.41 611.62 T
(, and is not) 422.73 611.62 T
(part of the cor) 99.65 597.62 T
(e Dylan language. W) 167.9 597.62 T
(e now describe how to make the) 268.63 597.62 T
4 10 Q
(format-out) 428.2 597.62 T
1 11 Q
(function accessible to our pr) 99.65 583.62 T
(ogram, and how to set up the \336les that constitute the) 236.38 583.62 T
-0.42 (pr) 99.65 569.62 P
-0.42 (ogram. Many of the details depend on the implementation of Dylan, so you will) 110.41 569.62 P
(need to consult the documentation of your Dylan implementation.) 99.65 555.62 T
3 15 Q
(2.5  A complete Dylan pr) 99.65 408.95 T
(ogram) 242.3 408.95 T
1 11 Q
-0.09 (In this section, we show how to cr) 99.65 388.62 P
-0.09 (eate a complete Dylan pr) 263.88 388.62 P
-0.09 (ogram. The Dylan pr) 384.67 388.62 P
-0.09 (o-) 485.98 388.62 P
(gram will print the following:) 99.65 374.62 T
4 9 Q
(Hello, world) 99.65 353.95 T
1 11 Q
(The Dylan expr) 99.65 333.62 T
(ession that prints that output is) 175 333.62 T
4 9 Q
(format-out\050"Hello, world\134n"\051;) 99.65 312.95 T
1 11 Q
(A Dylan) 99.65 292.62 T
2 F
(library) 143.44 292.62 T
1 F
( de\336nes a softwar) 177.66 292.62 T
(e component \321 a separately compilable unit) 263.13 292.62 T
(that can be either a stand-alone pr) 99.65 278.62 T
(ogram or a component of a lar) 264.6 278.62 T
(ger pr) 411.53 278.62 T
(ogram.) 440.77 278.62 T
(Thus, when we talk about cr) 99.65 264.62 T
(eating a Dylan pr) 237.52 264.62 T
(ogram, we ar) 321.84 264.62 T
(e r) 385.86 264.62 T
(eally talking about) 398.02 264.62 T
(cr) 99.65 250.62 T
(eating a library) 108.68 250.62 T
(.) 181.32 250.62 T
(A library contains) 126.65 236.62 T
2 F
(modules) 216.89 236.62 T
1 F
(. Each module contains de\336nitions and expr) 260.28 236.62 T
(es-) 473.65 236.62 T
(sions. The module is a) 99.65 222.62 T
2 F
(namespace) 210.41 222.62 T
1 F
( for the de\336nitions and expr) 265.4 222.62 T
(essions. For exam-) 400.85 222.62 T
(ple, if you de\336ne a module variable in one particular module, it is available to all) 99.65 208.62 T
(the code in that module. If you choose to export that module variable, you can) 99.65 194.62 T
-0.41 (make it accessible to other modules that import it. In this chapter) 99.65 180.62 P
-0.41 (, we give the bar) 409.67 180.62 P
-0.41 (e) 488.03 180.62 P
(minimum of information about libraries and modules \321 just enough for you to) 99.65 166.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C:) 132.65 645.62 T
4 10 Q
( format-out) 233.77 645.62 T
1 11 Q
( is similar to) 299.77 645.62 T
4 10 Q
(printf) 362.05 645.62 T
1 11 Q
(.) 398.05 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Usage note:) 132.65 521.62 T
1 F
(The Apple T) 193.46 521.62 T
(echnology Release does not curr) 253.35 521.62 T
(ently) 409.94 521.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pr) 132.65 507.62 T
(ovide the) 143.41 507.62 T
4 10 Q
(format-out) 191.57 507.62 T
1 11 Q
( function. For information about how to) 251.57 507.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 493.62 T
(un these examples in the Apple T) 136.9 493.62 T
(echnology Release, see Harle-) 298.37 493.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(quin\325s or Addison-W) 132.65 479.62 T
(esley\325s W) 234.54 479.62 T
(eb page for our book. See Section) 279.52 479.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A.1. in Appendix A,) 132.65 465.62 T
0 F
(Resour) 235.92 465.62 T
(ces on Dylan) 266.89 465.62 T
1 F
(.) 324.54 465.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 638.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 638.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 637.95 477.77 637.95 2 L
V
N
126.65 534.83 126.65 458.08 2 L
V
N
477.65 534.83 477.65 458.08 2 L
V
N
126.52 534.95 477.77 534.95 2 L
V
N
126.52 457.95 477.77 457.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 34
%%Page: "21" 35
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.5 A complete Dylan program) 393.99 702.62 T
2 F
(21) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.26 (get started quickly) 99.65 665.62 P
-0.26 (. For a complete description of libraries and modules, see Chap-) 188.36 665.62 P
(ter 13,) 99.65 651.62 T
0 F
(Libraries and Modules) 134.85 651.62 T
1 F
(.) 234.67 651.62 T
(T) 126.65 637.62 T
(o cr) 132.38 637.62 T
(eate a complete Dylan pr) 150.17 637.62 T
(ogram, we need) 271.32 637.62 T
(\245) 108.65 617.62 T
(T) 126.65 617.62 T
(o de\336ne the library that is our pr) 132.38 617.62 T
(ogram; we shall cr) 290.68 617.62 T
(eate a library named) 379.8 617.62 T
4 10 Q
(hello) 126.65 603.62 T
1 11 Q
(\245) 108.65 583.62 T
(T) 126.65 583.62 T
(o de\336ne a module \050or mor) 132.38 583.62 T
(e than one\051 in the library) 259.37 583.62 T
(, to hold the de\336nitions) 378.05 583.62 T
(and expr) 126.65 569.62 T
(essions in our pr) 169.72 569.62 T
(ogram; we shall cr) 250.19 569.62 T
(eate a module named) 339.31 569.62 T
4 10 Q
(hello) 446.58 569.62 T
1 11 Q
( in) 476.58 569.62 T
(the) 126.65 555.62 T
4 10 Q
(hello) 144.65 555.62 T
1 11 Q
( library) 174.65 555.62 T
(\245) 108.65 535.62 T
(T) 126.65 535.62 T
(o write the pr) 132.38 535.62 T
(ogram code, in the module; we shall put the) 198.23 535.62 T
4 10 Q
(format-out) 414.94 535.62 T
1 11 Q
(expr) 126.65 521.62 T
(ession in the) 148.35 521.62 T
4 10 Q
(hello) 211.67 521.62 T
1 11 Q
( module of the) 241.67 521.62 T
4 10 Q
(hello) 315.14 521.62 T
1 11 Q
( library) 345.14 521.62 T
3 13 Q
(2.5.1  Files of a Dylan pr) 99.65 490.29 T
(ogram) 220.93 490.29 T
1 11 Q
-0.08 (Dif) 99.65 470.62 P
-0.08 (fer) 114.83 470.62 P
-0.08 (ent Dylan envir) 127.91 470.62 P
-0.08 (onments stor) 203.47 470.62 P
-0.08 (e pr) 266.59 470.62 P
-0.08 (ograms in dif) 285.28 470.62 P
-0.08 (fer) 349.96 470.62 P
-0.08 (ent ways, but ther) 363.04 470.62 P
-0.08 (e is a \336le-) 450.21 470.62 P
-0.18 (based) 99.65 456.62 P
2 F
-0.18 (interchange format) 130.46 456.62 P
1 F
-0.18 ( that all Dylan envir) 225.91 456.62 P
-0.18 (onments accept. In this inter) 322.13 456.62 P
-0.18 (change) 458.51 456.62 P
(format, any pr) 99.65 442.62 T
(ogram consists of a minimum of two \336les: a \336le containing the pr) 169.49 442.62 T
(o-) 485.3 442.62 T
(gram itself, and a \336le describing the libraries and modules. The most trivial pr) 99.65 428.62 T
(o-) 478.58 428.62 T
(gram consists of a single module in a single library) 99.65 414.62 T
(, but it is still expr) 345.23 414.62 T
(essed in two) 432.24 414.62 T
(\336les. Most Dylan implementations also accept a thir) 99.65 400.62 T
(d \336le, which enumerates all) 351.1 400.62 T
(the \336les that make up a pr) 99.65 386.62 T
(ogram; this \336le is called a) 226.37 386.62 T
2 F
(library-interchange) 352.42 386.62 T
(de\336nition \050LID\051) 99.65 372.62 T
1 F
( \336le.) 179.38 372.62 T
(The details of how the \336les ar) 126.65 358.62 T
(e named and stor) 269.65 358.62 T
(ed depends on your Dylan) 353.8 358.62 T
(implementation. T) 99.65 344.62 T
(ypically) 188.56 344.62 T
(, however) 226.17 344.62 T
(, you have a dir) 273.54 344.62 T
(ectory containing all the \336les) 349 344.62 T
(of the pr) 99.65 330.62 T
(ogram. As shown in Figur) 140.83 330.62 T
(e 2.1, we name our pr) 267.95 330.62 T
(ogram dir) 372.54 330.62 T
(ectory) 421.04 330.62 T
4 10 Q
(hello) 453.99 330.62 T
1 11 Q
(,) 483.99 330.62 T
(and name the \336les) 99.65 316.62 T
4 10 Q
(hello.lid) 191.2 316.62 T
1 11 Q
(,) 245.2 316.62 T
4 10 Q
(library.dylan) 250.7 316.62 T
1 11 Q
(, and) 328.7 316.62 T
4 10 Q
(hello.dylan) 355.57 316.62 T
1 11 Q
( \050the latter is) 421.57 316.62 T
(the pr) 99.65 302.62 T
(ogram \336le\051.) 128.41 302.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 186.82 495.65 194.81 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 2.1) 140.45 198.14 T
8 F
(The) 193.25 198.14 T
4 F
(hello) 213.26 198.14 T
8 F
( director) 243.26 198.14 T
(y and the three \336les that it contains) 279.68 198.14 T
(.) 434.06 198.14 T
0 0 0 1 0 0 0 K
99.65 210.81 495.65 286.95 C
213.73 214.81 381.56 284.95 C
0 0 0 1 0 0 0 K
4 9 Q
0 X
0 0 0 1 0 0 0 K
(hello) 252.66 268.71 T
(hello.lid) 268.86 257.65 T
(library.dylan) 268.86 246.58 T
(hello.dylan) 268.86 235.52 T
240.73 224.38 357.73 282.67 R
0.5 H
2 Z
N
0 0 0 1 0 0 0 K
99.65 210.81 495.65 286.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 35
%%Page: "22" 36
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(22) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(2.5.2  Components of a Dylan pr) 99.65 513.29 T
(ogram) 261.77 513.29 T
1 11 Q
(W) 99.65 493.62 T
(e start with this simple Dylan expr) 109.64 493.62 T
(ession:) 277.4 493.62 T
4 9 Q
(format-out\050"Hello, world\134n"\051;) 99.65 472.95 T
1 11 Q
(All Dylan expr) 99.65 452.62 T
(essions must be in a module. Ther) 171.54 452.62 T
(efor) 336.82 452.62 T
(e, we use a text editor to cr) 355.9 452.62 T
(e-) 485.55 452.62 T
(ate a \336le that contains the expr) 99.65 438.62 T
(ession within a module:) 247.81 438.62 T
-0.22 (The) 99.65 333.62 P
4 10 Q
-0.47 (hello.dylan) 120.6 333.62 P
1 11 Q
-0.22 ( \336le is the top-level \336le; you can think of it as the pr) 186.6 333.62 P
-0.22 (ogram itself.) 432.57 333.62 P
(When you r) 99.65 319.62 T
(un this pr) 157.23 319.62 T
(ogram, Dylan executes all the expr) 204.38 319.62 T
(essions in the \336le in the) 372.4 319.62 T
(or) 99.65 305.62 T
(der that they appear in the \336le. Ther) 109.8 305.62 T
(e is only one expr) 284.96 305.62 T
(ession in this pr) 370.2 305.62 T
(ogram \321) 446.87 305.62 T
(the call to) 99.65 291.62 T
4 10 Q
(format-out) 149.53 291.62 T
1 11 Q
(.) 209.53 291.62 T
(The \336rst line of this \336le declar) 126.65 277.62 T
(es that the expr) 271.25 277.62 T
(essions and de\336nitions in this) 345.47 277.62 T
(\336le ar) 99.65 263.62 T
(e in the) 127.17 263.62 T
4 10 Q
(hello) 165.55 263.62 T
1 11 Q
( module. Befor) 195.55 263.62 T
(e we can r) 267.15 263.62 T
(un \050or even compile\051 this pr) 316.15 263.62 T
(ogram,) 451.27 263.62 T
-0.39 (we need to de\336ne the) 99.65 249.62 P
4 10 Q
-0.84 (hello) 204.74 249.62 P
1 11 Q
-0.39 ( module. All modules must be in a library) 234.74 249.62 P
-0.39 (, so we must) 433.73 249.62 P
(also de\336ne a library for our) 99.65 235.62 T
4 10 Q
(hello) 235.12 235.62 T
1 11 Q
( module. W) 265.12 235.62 T
(e cr) 320.9 235.62 T
(eate a second \336le, called the) 337.95 235.62 T
(library \336le, and de\336ne the) 99.65 221.62 T
4 10 Q
(hello) 228.26 221.62 T
1 11 Q
( module and) 258.26 221.62 T
4 10 Q
(hello) 322.68 221.62 T
1 11 Q
( library in the library \336le:) 352.68 221.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C:) 132.65 645.62 T
1 F
( The following analogies may help you to) 233.77 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(understand how the elements of Dylan pr) 132.65 631.62 T
(ograms corr) 335.76 631.62 T
(espond to) 394.24 631.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(elements of C pr) 132.65 617.62 T
(ograms:) 212.5 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 603.62 T
(pr) 180.81 603.62 T
(ogram \336les ar) 191.57 603.62 T
(e similar to) 258.19 603.62 T
4 10 Q
(.c) 315.12 603.62 T
1 11 Q
( \336les in C.) 327.12 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 589.62 T
(library \336le is similar to a C header \336le.) 180.81 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 575.62 T
(LID \336le is similar to a) 180.81 575.62 T
4 10 Q
(makefile) 288.16 575.62 T
1 11 Q
(, which is used in cer-) 336.16 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tain C development envir) 159.65 561.62 T
(onments.) 283.88 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The prog) 229.48 405.29 T
(r) 269.4 405.29 T
(am \336le:) 272.63 405.29 T
4 9 Q
(hello.dylan) 307.64 405.29 T
8 10 Q
(.) 367.04 405.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: hello) 105.65 385.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Hello, world\134n"\051;) 105.65 366.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 554.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 554.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 553.95 477.77 553.95 2 L
V
N
99.65 417.83 99.65 360.08 2 L
V
N
513.65 417.83 513.65 360.08 2 L
V
N
99.52 417.95 513.77 417.95 2 L
V
N
99.52 397.95 513.77 397.95 2 L
V
N
99.52 359.95 513.77 359.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 36
%%Page: "23" 37
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.5 A complete Dylan program) 393.99 702.62 T
2 F
(23) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The \336rst line of) 99.65 489.62 T
4 10 Q
(library.dylan) 176.05 489.62 T
1 11 Q
( states that the expr) 254.05 489.62 T
(essions in this \336le ar) 348.36 489.62 T
(e in the) 446.45 489.62 T
4 10 Q
-0.91 (dylan-user) 99.65 475.62 P
1 11 Q
-0.42 ( module. Every Dylan expr) 159.65 475.62 P
-0.42 (ession and de\336nition must be in a module,) 289.37 475.62 P
-0.27 (including the de\336nitions of libraries and modules. The) 99.65 461.62 P
4 10 Q
-0.59 (dylan-user) 365.07 461.62 P
1 11 Q
-0.27 ( module is the) 425.07 461.62 P
(starting point \321 the pr) 99.65 447.62 T
(ede\336ned module that enables you to de\336ne the libraries) 210.87 447.62 T
(and modules that your pr) 99.65 433.62 T
(ogram uses.) 224.41 433.62 T
(In the \336le) 126.65 419.62 T
4 10 Q
(library.dylan) 175.39 419.62 T
1 11 Q
(, we de\336ne a library named) 253.39 419.62 T
4 10 Q
(hello) 389.29 419.62 T
1 11 Q
(, and a module) 419.29 419.62 T
(named) 99.65 405.62 T
4 10 Q
(hello) 136 405.62 T
1 11 Q
(. W) 166 405.62 T
(e de\336ne the) 181.49 405.62 T
4 10 Q
(hello) 240.58 405.62 T
1 11 Q
( library to use the) 270.58 405.62 T
4 10 Q
(dylan) 358.54 405.62 T
1 11 Q
( library and the) 388.54 405.62 T
4 10 Q
(format-out) 99.65 391.62 T
1 11 Q
( library) 159.65 391.62 T
(, and we de\336ne the) 193.97 391.62 T
4 10 Q
(hello) 289.11 391.62 T
1 11 Q
( module to use the) 319.11 391.62 T
4 10 Q
(dylan) 411.82 391.62 T
1 11 Q
( module) 441.82 391.62 T
(and the) 99.65 377.62 T
4 10 Q
(format-out) 139.03 377.62 T
1 11 Q
( module.) 199.03 377.62 T
(One library) 126.65 363.62 T
2 F
(uses) 185.26 363.62 T
1 F
( another library to allow its modules to use the other) 207.24 363.62 T
(library\325s exported modules. Most libraries need to use the) 99.65 349.62 T
4 10 Q
(dylan) 382.9 349.62 T
1 11 Q
( library) 412.9 349.62 T
(, because) 447.22 349.62 T
(it contains the) 99.65 335.62 T
4 10 Q
(dylan) 170.59 335.62 T
1 11 Q
( module. One module) 200.59 335.62 T
2 F
(uses) 309.74 335.62 T
1 F
( another module to allow its de\336-) 331.73 335.62 T
-0.04 (nitions to use the other module\325s exported de\336nitions. Most modules need to use) 99.65 321.62 P
(the) 99.65 307.62 T
4 10 Q
(dylan) 117.65 307.62 T
1 11 Q
( module in the) 147.65 307.62 T
4 10 Q
(dylan) 221.06 307.62 T
1 11 Q
( library) 251.06 307.62 T
(, because that module contains the de\336ni-) 285.38 307.62 T
(tions of the cor) 99.65 293.62 T
(e Dylan language. W) 171.72 293.62 T
(e also need to use the) 272.45 293.62 T
4 10 Q
(format-out) 378.66 293.62 T
1 11 Q
( module in) 438.66 293.62 T
(the) 99.65 279.62 T
4 10 Q
(format-out) 117.65 279.62 T
1 11 Q
( library) 177.65 279.62 T
(, because that module de\336nes the) 211.98 279.62 T
4 10 Q
(format-out) 376.38 279.62 T
1 11 Q
( function,) 436.38 279.62 T
(which we use in our pr) 99.65 265.62 T
(ogram.) 211.82 265.62 T
(Finally) 126.65 251.62 T
(, we cr) 159.16 251.62 T
(eate a LID \336le that enumerates the \336les that make up the) 190.89 251.62 T
-0.19 (library) 99.65 237.62 P
-0.19 (. This \336le does not contain Dylan expr) 131.22 237.62 P
-0.19 (essions, but rather is simply a textual) 314.07 237.62 P
(description of the library\325s \336les:) 99.65 223.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The libr) 228.88 646.29 T
(ar) 262.12 646.29 T
(y \336le:) 271.31 646.29 T
4 9 Q
(library.dylan) 297.43 646.29 T
8 10 Q
(.) 367.63 646.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 626.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library hello) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library hello;) 105.65 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module hello) 105.65 555.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 544.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module hello;) 105.65 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 658.83 99.65 516.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 516.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 515.95 513.77 515.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 37
%%Page: "24" 38
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(24) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The LID \336le simply states that the library) 99.65 571.62 T
4 10 Q
(hello) 302.03 571.62 T
1 11 Q
( comprises two \336les, named) 332.03 571.62 T
4 10 Q
-0.49 (library) 99.65 557.62 P
1 11 Q
-0.22 ( and) 141.65 557.62 P
4 10 Q
-0.49 (hello) 165.32 557.62 P
1 11 Q
-0.22 (. In other wor) 195.32 557.62 P
-0.22 (ds, to build the) 260.69 557.62 P
4 10 Q
-0.49 (hello) 335.62 557.62 P
1 11 Q
-0.22 ( library) 365.62 557.62 P
-0.22 (, the compiler must) 399.71 557.62 P
(pr) 99.65 543.62 T
(ocess the two \336les listed, in the or) 110.41 543.62 T
(der that they appear in the \336le. The or) 273.36 543.62 T
(der is) 457.28 543.62 T
(signi\336cant, because a module must be de\336ned befor) 99.65 529.62 T
(e the code that is in the mod-) 351.76 529.62 T
(ule can be analyzed and compiled.) 99.65 515.62 T
(Y) 126.65 501.62 T
(ou can consult the documentation of your Dylan implementation to \336nd) 132.97 501.62 T
-0.14 (out how to build an executable pr) 99.65 487.62 P
-0.14 (ogram fr) 262.6 487.62 P
-0.14 (om these \336les, and how to r) 304.7 487.62 P
-0.14 (un that pr) 437.88 487.62 P
-0.14 (o-) 485.98 487.62 P
-0.4 (gram once it is built. Most Dylan envir) 99.65 473.62 P
-0.4 (onments pr) 284.05 473.62 P
-0.4 (oduce executable pr) 339.2 473.62 P
-0.4 (ograms that) 435.53 473.62 P
(can be invoked in the same manner as any other pr) 99.65 459.62 T
(ogram on the particular plat-) 347.4 459.62 T
(form that you ar) 99.65 445.62 T
(e using.) 179.1 445.62 T
(W) 126.65 431.62 T
(e incur a fair amount of over) 136.64 431.62 T
(head in setting up the \336les that make up a) 275.23 431.62 T
(simple pr) 99.65 417.62 T
(ogram. Most envir) 145.82 417.62 T
(onments automate this pr) 235.64 417.62 T
(ocess \321 some of the com-) 360.34 417.62 T
(plexity shown her) 99.65 403.62 T
(e occurs because we ar) 187.27 403.62 T
(e working with the lowest common) 297.35 403.62 T
(denominator: inter) 99.65 389.62 T
(change \336les. The advantages of libraries and modules ar) 190.9 389.62 T
(e sig-) 463.86 389.62 T
(ni\336cant for lar) 99.65 375.62 T
(ger pr) 168.64 375.62 T
(ograms. See Chapter 13,) 197.88 375.62 T
0 F
(Libraries and Modules) 320.3 375.62 T
1 F
(.) 420.12 375.62 T
3 15 Q
(2.6  Summar) 99.65 335.95 T
(y) 172.92 335.95 T
1 11 Q
(In this chapter) 99.65 315.62 T
(, we cover) 168.89 315.62 T
(ed the following:) 218.11 315.62 T
(\245) 108.65 295.62 T
(W) 126.65 295.62 T
(e enter) 136.64 295.62 T
(ed Dylan expr) 169.33 295.62 T
(essions to a listener and saw their values or output.) 238.25 295.62 T
(\245) 108.65 275.62 T
(W) 126.65 275.62 T
(e used simple arithmetic functions:) 136.64 275.62 T
4 10 Q
(+) 309.48 275.62 T
1 11 Q
(,) 315.48 275.62 T
4 10 Q
(*) 320.98 275.62 T
1 11 Q
(,) 326.98 275.62 T
4 10 Q
(-) 332.48 275.62 T
1 11 Q
(. W) 338.48 275.62 T
(e used pr) 353.97 275.62 T
(edicates:) 398.78 275.62 T
4 10 Q
(=) 443.38 275.62 T
1 11 Q
(,) 449.38 275.62 T
4 10 Q
(<) 454.88 275.62 T
1 11 Q
(,) 460.88 275.62 T
4 10 Q
(>) 466.38 275.62 T
1 11 Q
(,) 472.38 275.62 T
4 10 Q
(even?) 126.65 261.62 T
1 11 Q
(, and) 156.65 261.62 T
4 10 Q
(zero?) 183.52 261.62 T
1 11 Q
(.) 213.52 261.62 T
(\245) 108.65 241.62 T
(W) 126.65 241.62 T
(e de\336ned module variables \050with) 136.64 241.62 T
4 10 Q
(define variable) 300.24 241.62 T
1 11 Q
(\051, constants \050with) 390.24 241.62 T
4 10 Q
(define constant) 126.65 227.62 T
1 11 Q
(\051, and local variables \050with) 216.65 227.62 T
4 10 Q
(let) 348.23 227.62 T
1 11 Q
(\051.) 366.23 227.62 T
(\245) 108.65 207.62 T
(W) 126.65 207.62 T
(e set the value of variables by using) 136.64 207.62 T
4 10 Q
(:=) 312.36 207.62 T
1 11 Q
(, the assignment operator) 324.36 207.62 T
(.) 446.99 207.62 T
(\245) 108.65 187.62 T
-0.17 (W) 126.65 187.62 P
-0.17 (e de\336ned a simple but complete Dylan pr) 136.64 187.62 P
-0.17 (ogram, consisting of a LID \336le, a) 336.52 187.62 P
(library \336le, and a pr) 126.65 173.62 T
(ogram \336le.) 223.2 173.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The LID \336le:) 245.61 646.29 T
4 9 Q
(hello.lid) 302.3 646.29 T
8 10 Q
(.) 350.9 646.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library: hello) 105.65 626.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 615.95 T
( library) 148.85 615.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hello) 154.25 604.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 658.83 99.65 598.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 598.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 597.95 513.77 597.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 38
%%Page: "25" 39
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2.6 Summary) 460.39 702.62 T
2 F
(25) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(W) 126.65 665.62 T
(e described the syntax of some commonly used elements of Dylan; see) 136.64 665.62 T
(T) 126.65 651.62 T
(able 2.1.) 132.38 651.62 T
(\245) 108.65 420.63 T
(W) 126.65 420.63 T
(e described certain naming conventions in Dylan; see T) 136.64 420.63 T
(able 2.2.) 403.64 420.63 T
(Her) 99.65 235.64 T
(e, we summarize the most basic information about libraries and modules:) 118.22 235.64 T
(\245) 108.65 215.64 T
(A Dylan library de\336nes a softwar) 126.65 215.64 T
(e component \321 a separately compilable) 288.7 215.64 T
(unit that can be either a stand-alone pr) 126.65 201.64 T
(ogram or a component of a lar) 314.18 201.64 T
(ger) 461.1 201.64 T
(pr) 126.65 187.64 T
(ogram. Thus, when we talk about cr) 137.41 187.64 T
(eating a Dylan pr) 312.46 187.64 T
(ogram, we ar) 396.77 187.64 T
(e) 460.8 187.64 T
(r) 126.65 173.64 T
(eally talking about cr) 130.79 173.64 T
(eating a library) 233.29 173.64 T
(.) 305.94 173.64 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Dylan element) 192.03 620.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Syntax e) 343.73 620.62 T
(xample) 386.2 620.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(str) 157.13 595.62 T
(ing) 169.52 595.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
("Runway") 309.23 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(tr) 157.13 572.62 T
(ue) 164.02 572.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(any value that is not) 309.23 572.62 T
4 10 Q
(#f) 410.75 572.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(canonical tr) 157.13 549.62 T
(ue v) 213.54 549.62 T
(alue) 234.06 549.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(#t) 309.23 550.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(f) 157.13 526.62 T
(alse) 159.86 526.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(#f) 309.23 527.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(in\336x syntax function call) 157.13 503.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(2 + 3;) 309.23 504.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(function call) 157.13 480.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(max\0502, 3\051;) 309.23 481.95 T
0 0 0 1 0 0 0 K
99.65 442.96 513.65 450.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 215.91 454.29 T
(ab) 221.22 454.29 T
(le 2.1) 232.79 454.29 T
8 F
(Syntax of Dylan elements) 263.37 454.29 T
(.) 376.6 454.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(Dylan element) 199.16 389.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example of name) 326.93 389.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(module v) 177.23 364.63 T
(ar) 221.59 364.63 T
(iab) 231.53 364.63 T
(le) 245.98 364.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(*my-number*) 303.4 364.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(constant) 177.23 341.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
($pi) 303.4 341.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(class) 177.23 318.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<integer>) 303.4 318.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(predicate) 177.23 295.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(positive?) 303.4 295.63 T
0 0 0 1 0 0 0 K
99.65 257.97 513.65 265.96 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 166.09 269.29 T
(ab) 171.4 269.29 T
(le 2.2) 182.97 269.29 T
8 F
(Dylan naming con) 213.55 269.29 T
(v) 293.38 269.29 T
(entions sho) 298.13 269.29 T
(wn in this chapter) 349.12 269.29 T
(.) 426.43 269.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
151.13 635.83 151.13 471.08 2 L
V
0.25 H
0 Z
N
462.16 635.83 462.16 471.08 2 L
V
N
151.01 635.95 462.29 635.95 2 L
V
N
151.01 608.95 462.29 608.95 2 L
V
N
151.01 470.95 462.29 470.95 2 L
V
N
171.23 404.84 171.23 286.09 2 L
V
N
442.06 404.84 442.06 286.09 2 L
V
N
171.11 404.96 442.19 404.96 2 L
V
N
171.11 377.96 442.19 377.96 2 L
V
N
171.11 285.96 442.19 285.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 39
%%Page: "26" 40
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(26) 63.65 702.62 T
0 F
(Chapter 2) 82.65 702.62 T
(Quick Start) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(Each Dylan expr) 126.65 665.62 T
(ession and de\336nition must be in a module. Each module is) 207.09 665.62 T
(in a library) 126.65 651.62 T
(.) 178.82 651.62 T
(\245) 108.65 631.62 T
(One module uses another module to allow its de\336nitions to use the other) 126.65 631.62 T
(module\325s exported de\336nitions. Most modules need to use the) 126.65 617.62 T
4 10 Q
(dylan) 426.95 617.62 T
1 11 Q
( mod-) 456.95 617.62 T
-0.13 (ule in the) 126.65 603.62 P
4 10 Q
-0.29 (dylan) 174.46 603.62 P
1 11 Q
-0.13 ( library) 204.46 603.62 P
-0.13 (, because it contains the de\336nitions of the cor) 238.65 603.62 P
-0.13 (e Dylan) 455.41 603.62 P
(language.) 126.65 589.62 T
(\245) 108.65 569.62 T
(One library uses another library to allow its modules to use the other) 126.65 569.62 T
(library\325s exported modules. Most libraries need to use the) 126.65 555.62 T
4 10 Q
(dylan) 409.9 555.62 T
1 11 Q
( library) 439.9 555.62 T
(,) 474.22 555.62 T
(because it contains the) 126.65 541.62 T
4 10 Q
(dylan) 238.64 541.62 T
1 11 Q
( module.) 268.64 541.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 40
%%Page: "27" 41
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(27) 292.9 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(3) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(3) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Methods, Classes, and) 100.65 591.4 T
(Objects) 99.65 561.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we intr) 168.89 449.62 T
(oduce the basic concepts of methods, classes, and objects.) 208.92 449.62 T
(W) 99.65 435.62 T
(e de\336ne simple methods, and show that each method is intended for a certain) 109.64 435.62 T
(class of ar) 99.65 421.62 T
(gument. W) 147.38 421.62 T
(e discuss built-in classes in Dylan, and show that they ar) 200.58 421.62 T
(e) 474.65 421.62 T
(r) 99.65 407.62 T
(elated by class inheritance. Finally) 103.79 407.62 T
(, we discuss what it means to be an object.) 269.18 407.62 T
(Dylan\325s model of objects and classes dif) 126.65 393.62 T
(fers signi\336cantly fr) 319.1 393.62 T
(om the C++) 410.28 393.62 T
(model. If you ar) 99.65 379.62 T
(e familiar with C++, we r) 177.33 379.62 T
(ecommend that you r) 299.51 379.62 T
(ead Appendix B,) 403.71 379.62 T
0 F
(Dylan Object Model for C and C++ Pr) 99.65 365.62 T
(ogrammers) 271.78 365.62 T
1 F
(.) 321.28 365.62 T
3 15 Q
(3.1  Method de\336nitions) 99.65 325.95 T
1 11 Q
(In Dylan, we de\336ne methods \321 a) 99.65 305.62 T
2 F
(method) 265.11 305.62 T
1 F
( is a kind of function. W) 303.61 305.62 T
(e de\336ne a) 419.1 305.62 T
(simple method,) 99.65 291.62 T
4 10 Q
(say-hello) 178.25 291.62 T
1 11 Q
(, as follows:) 232.25 291.62 T
4 9 Q
(define method say-hello \050\051) 99.65 270.95 T
(format-out\050"hello, world\134n"\051;) 110.45 259.95 T
(end;) 99.65 248.95 T
1 11 Q
(W) 99.65 228.62 T
(e call) 109.64 228.62 T
4 10 Q
(say-hello) 137.19 228.62 T
1 11 Q
( as follows:) 191.19 228.62 T
6 9 Q
(?) 99.65 207.95 T
4 F
(say-hello\050\051;) 110.45 207.95 T
6 F
(hello, world) 99.65 196.95 T
1 11 Q
(W) 99.65 176.62 T
(e use) 109.64 176.62 T
4 10 Q
(define method) 136.97 176.62 T
1 11 Q
( to de\336ne a method named) 214.97 176.62 T
4 10 Q
(say-hello) 348.18 176.62 T
1 11 Q
(. Just after the) 402.18 176.62 T
(name) 99.65 162.62 T
4 10 Q
(say-hello) 129.28 162.62 T
1 11 Q
(, we specify the method\325s) 183.28 162.62 T
2 F
(parameter list) 309.31 162.62 T
1 F
(,) 378.65 162.62 T
4 10 Q
(\050\051) 384.15 162.62 T
1 11 Q
(. The parameter list) 396.15 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 41
%%Page: "28" 42
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(28) 63.65 702.62 T
0 F
(Chapter 3) 82.65 702.62 T
(Methods, Classes, and Objects) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(of this method is empty) 99.65 665.62 T
(, meaning that this method takes no ar) 213.81 665.62 T
(guments. The call) 400.22 665.62 T
(to) 99.65 651.62 T
4 10 Q
(say-hello) 111.99 651.62 T
1 11 Q
( pr) 165.99 651.62 T
(ovides an empty ar) 179.5 651.62 T
(gument list, meaning that ther) 272.67 651.62 T
(e ar) 419.87 651.62 T
(e no ar) 437.54 651.62 T
(gu-) 470.36 651.62 T
(ments in the call.) 99.65 637.62 T
(The body of the) 126.65 623.62 T
4 10 Q
(say-hello) 205.91 623.62 T
1 11 Q
( method has one expr) 259.91 623.62 T
(ession \321 a call to) 364.56 623.62 T
4 10 Q
(format-out) 99.65 609.62 T
1 11 Q
(. A method r) 159.65 609.62 T
(eturns whatever is r) 221.05 609.62 T
(eturned by the expr) 317.97 609.62 T
(ession executed) 413.61 609.62 T
(last in its body) 99.65 595.62 T
(. In general, a method can r) 169.61 595.62 T
(eturn a single value, multiple values,) 301.95 595.62 T
-0.29 (or no value at all. The) 99.65 581.62 P
4 10 Q
-0.64 (say-hello) 206.12 581.62 P
1 11 Q
-0.29 ( method r) 260.12 581.62 P
-0.29 (eturns what) 306.89 581.62 P
4 10 Q
-0.64 (format-out) 367.36 581.62 P
1 11 Q
-0.29 ( r) 427.36 581.62 P
-0.29 (eturns \321 no) 433.97 581.62 P
(value at all. In the call to) 99.65 567.62 T
4 10 Q
(say-hello) 221.2 567.62 T
1 11 Q
(, we see the output of) 275.2 567.62 T
4 10 Q
(format-out) 382.07 567.62 T
1 11 Q
( in the) 442.07 567.62 T
(listener; we see output and not a r) 99.65 553.62 T
(eturned value \050because no value is r) 264.55 553.62 T
(eturned\051.) 439.3 553.62 T
3 13 Q
(3.1.1  A method that takes an ar) 99.65 373.29 T
(gument) 259.47 373.29 T
1 11 Q
-0.39 (W) 99.65 353.62 P
-0.39 (e can de\336ne a method similar to) 109.64 353.62 P
4 10 Q
-0.86 (say-hello) 265.12 353.62 P
1 11 Q
-0.39 (, called) 319.12 353.62 P
4 10 Q
-0.86 (say-greeting) 355.36 353.62 P
1 11 Q
-0.39 (, that takes an) 427.36 353.62 P
(ar) 99.65 339.62 T
(gument:) 109.29 339.62 T
4 9 Q
(define method say-greeting \050greeting :: <object>\051;) 99.65 318.95 T
(format-out\050"%s\134n", greeting\051;) 110.45 307.95 T
(end;) 99.65 296.95 T
1 11 Q
(The) 99.65 276.62 T
4 10 Q
(say-greeting) 120.81 276.62 T
1 11 Q
( method has one r) 192.81 276.62 T
(equir) 279.9 276.62 T
(ed parameter) 305.31 276.62 T
(, named) 369.37 276.62 T
4 10 Q
(greeting) 411.23 276.62 T
1 11 Q
(. The) 459.23 276.62 T
(type constraint of the r) 99.65 262.62 T
(equir) 209.88 262.62 T
(ed parameter indicates the type that the ar) 235.29 262.62 T
(gument) 440.91 262.62 T
-0.07 (must be. The) 99.65 248.62 P
4 10 Q
-0.15 (greeting) 164.8 248.62 P
1 11 Q
-0.07 ( parameter has the type constraint) 212.8 248.62 P
4 10 Q
-0.15 (<object>) 380.99 248.62 P
1 11 Q
-0.07 (, which is the) 428.99 248.62 P
(most general class. All objects ar) 99.65 234.62 T
(e of the type) 256.8 234.62 T
4 10 Q
(<object>) 319.58 234.62 T
1 11 Q
(, so using this class as the) 367.58 234.62 T
(type constraint allows the ar) 99.65 220.62 T
(gument to be any object. Y) 237.46 220.62 T
(ou can omit the type con-) 365.36 220.62 T
(straint of a r) 99.65 206.62 T
(equir) 158.5 206.62 T
(ed parameter; that omission has the same ef) 183.91 206.62 T
(fect as specifying) 396.67 206.62 T
4 10 Q
(<object>) 99.65 192.62 T
1 11 Q
( as the type constraint.) 147.65 192.62 T
(W) 126.65 178.62 T
(e can call) 136.64 178.62 T
4 10 Q
(say-greeting) 183.73 178.62 T
1 11 Q
( on a string:) 255.73 178.62 T
2 F
(Usage note:) 132.65 519.62 T
1 F
(In this chapter) 193.46 519.62 T
(, we de\336ne methods that call the) 262.7 519.62 T
4 10 Q
(format-out) 132.65 505.62 T
1 11 Q
( function. Because) 192.65 505.62 T
4 10 Q
(format-out) 283.36 505.62 T
1 11 Q
( is in the) 343.36 505.62 T
4 10 Q
(format-out) 387.09 505.62 T
1 11 Q
(module, we need to make that module available. Ther) 132.65 491.62 T
(e ar) 394.83 491.62 T
(e two) 412.5 491.62 T
-0.11 (ways to do so. The \336rst way is to work in \336les, as described in Sec-) 132.65 477.62 P
(tion 2.5. The second way is to use a gestur) 132.65 463.62 T
(e or command in your) 336.18 463.62 T
(Dylan envir) 132.65 449.62 T
(onment to make the) 190.37 449.62 T
4 10 Q
(format-out) 290.19 449.62 T
1 11 Q
( module accessible.) 350.19 449.62 T
(Then, you can simply enter the method de\336nitions into the) 132.65 435.62 T
(listener) 132.65 421.62 T
(.) 167.77 421.62 T
126.65 532.83 126.65 414.08 2 L
V
0.25 H
0 Z
N
477.65 532.83 477.65 414.08 2 L
V
N
126.52 532.95 477.77 532.95 2 L
V
N
126.52 413.95 477.77 413.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 42
%%Page: "29" 43
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.1 Method definitions) 425.83 702.62 T
2 F
(29) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 143.81 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
(say-greeting\050"hi, there"\051;) 110.45 666.95 T
6 F
(hi, there) 99.65 655.95 T
1 11 Q
-0.15 (W) 99.65 635.62 P
-0.15 (e can call) 109.64 635.62 P
4 10 Q
-0.33 (say-greeting) 156.27 635.62 P
1 11 Q
-0.15 ( on an integer) 228.27 635.62 P
-0.15 (, although the integer does not give a par-) 293.75 635.62 P
(ticularly friendly gr) 99.65 621.62 T
(eeting:) 195 621.62 T
6 9 Q
(?) 99.65 600.95 T
4 F
( define variable *my-number* :: <integer> = 7;) 105.05 600.95 T
6 F
(?) 99.65 581.95 T
4 F
(say-greeting\050*my-number*\051;) 110.45 581.95 T
6 F
(7) 99.65 570.95 T
3 13 Q
(3.1.2  T) 99.65 541.29 T
(w) 135.18 541.29 T
(o methods with the same name) 143.28 541.29 T
1 11 Q
-0.09 (For fun, we can change) 99.65 521.62 P
4 10 Q
-0.2 (say-greeting) 214.66 521.62 P
1 11 Q
-0.09 ( to take a dif) 286.66 521.62 P
-0.09 (fer) 346.24 521.62 P
-0.09 (ent action for integers, such) 359.32 521.62 P
(as to print a message:) 99.65 507.62 T
6 9 Q
(Your lucky number is 7.) 99.65 486.95 T
1 11 Q
(T) 99.65 466.62 T
(o make this change, we de\336ne another method, also called) 105.38 466.62 T
4 10 Q
(say-greeting) 391.52 466.62 T
1 11 Q
(. This) 463.52 466.62 T
(method has one r) 99.65 452.62 T
(equir) 183.99 452.62 T
(ed parameter named) 209.4 452.62 T
4 10 Q
(greeting) 313.38 452.62 T
1 11 Q
(, which has the type con-) 361.38 452.62 T
(straint) 99.65 438.62 T
4 10 Q
(<integer>) 133.68 438.62 T
1 11 Q
(.) 187.68 438.62 T
4 9 Q
(define method say-greeting \050greeting :: <integer>\051) 99.65 417.95 T
(format-out\050"Your lucky number is %s.\134n", greeting\051;) 110.45 406.95 T
(end;) 99.65 395.95 T
6 F
(?) 99.65 376.95 T
4 F
(say-greeting\050*my-number*\051;) 110.45 376.95 T
6 F
(Your lucky number is 7.) 99.65 365.95 T
1 11 Q
(A Dylan method is similar to a pr) 99.65 345.62 T
(ocedur) 262.43 345.62 T
(e or subr) 296.09 345.62 T
(outine in other languages, but) 338.73 345.62 T
(ther) 99.65 331.62 T
(e is an important dif) 119.05 331.62 T
(fer) 217.43 331.62 T
(ence. Y) 230.5 331.62 T
(ou can de\336ne mor) 264.15 331.62 T
(e than one method with the) 352.01 331.62 T
-0.33 (same name. Each one is a method for the same) 99.65 317.62 P
2 F
-0.33 (generic function) 325.25 317.62 P
1 F
-0.33 (. Figur) 407.09 317.62 P
-0.33 (e 3.1 shows) 438.47 317.62 P
(how you can pictur) 99.65 303.62 T
(e a generic function.) 194.08 303.62 T
-0.43 (When a generic function is called, it chooses the most appr) 126.65 289.62 P
-0.43 (opriate method to) 406.87 289.62 P
(call for the ar) 99.65 275.62 T
(guments. For example, when we call the) 163.6 275.62 T
4 10 Q
(say-greeting) 362.17 275.62 T
1 11 Q
( generic) 434.17 275.62 T
-0.32 (function with an integer) 99.65 261.62 P
-0.32 (, the method whose parameter is of the type) 215.35 261.62 P
4 10 Q
-0.7 (<integer>) 428.93 261.62 P
1 11 Q
-0.32 ( is) 482.93 261.62 P
(called:) 99.65 247.62 T
6 9 Q
(?) 99.65 226.95 T
4 F
(say-greeting\0501000\051;) 110.45 226.95 T
6 F
(Your lucky number is 1000.) 99.65 215.95 T
1 11 Q
-0.2 (When we call the) 99.65 195.62 P
4 10 Q
-0.44 (say-greeting) 185.41 195.62 P
1 11 Q
-0.2 ( generic function with an ar) 257.41 195.62 P
-0.2 (gument that is not an) 390.34 195.62 P
(integer) 99.65 181.62 T
(, the method whose parameter is of the type) 133.02 181.62 T
4 10 Q
(<object>) 349.5 181.62 T
1 11 Q
( is called:) 397.5 181.62 T
6 9 Q
(?) 99.65 160.95 T
4 F
(say-greeting\050"Buenos Dias"\051;) 110.45 160.95 T
6 F
(Buenos Dias) 99.65 149.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 43
%%Page: "30" 44
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(30) 63.65 702.62 T
0 F
(Chapter 3) 82.65 702.62 T
(Methods, Classes, and Objects) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(3.2  Classes) 99.65 465.52 T
1 11 Q
-0.45 (W) 99.65 445.19 P
-0.45 (e have alr) 109.64 445.19 P
-0.45 (eady seen examples of classes in Dylan:) 155.74 445.19 P
4 10 Q
-0.98 (<integer>) 347.55 445.19 P
1 11 Q
-0.45 (,) 401.55 445.19 P
4 10 Q
-0.98 (<single-float>) 406.6 445.19 P
1 11 Q
-0.45 (,) 490.6 445.19 P
4 10 Q
(<string>) 99.65 431.19 T
1 11 Q
(, and) 147.65 431.19 T
4 10 Q
(<object>) 174.52 431.19 T
1 11 Q
(.) 222.52 431.19 T
(Individual values ar) 126.65 417.19 T
(e called) 224.78 417.19 T
2 F
(objects) 264.32 417.19 T
1 F
(. Each object is a) 299.76 417.19 T
2 F
(direct instance) 381.53 417.19 T
1 F
( of one) 454.52 417.19 T
(particular class. Y) 99.65 403.19 T
(ou can use the) 184.94 403.19 T
4 10 Q
(object-class) 257.19 403.19 T
1 11 Q
( function to determine the dir) 329.19 403.19 T
(ect) 472.41 403.19 T
(class of an object. For example, in certain implementations,) 99.65 389.19 T
4 10 Q
(7) 388.35 389.19 T
1 11 Q
(,) 394.35 389.19 T
4 10 Q
(12) 399.85 389.19 T
1 11 Q
(, and) 411.85 389.19 T
4 10 Q
(1000) 438.73 389.19 T
1 11 Q
( ar) 462.73 389.19 T
(e) 475.12 389.19 T
(dir) 99.65 375.19 T
(ect instances of the class) 113.72 375.19 T
4 10 Q
(<integer>) 233.62 375.19 T
1 11 Q
(:) 287.62 375.19 T
6 9 Q
(?) 99.65 354.52 T
4 F
( object-class\0501000\051;) 105.05 354.52 T
6 F
({class <integer>}) 99.65 343.52 T
1 11 Q
(The value r) 99.65 323.19 T
(eturned by) 154.53 323.19 T
4 10 Q
(object-class) 210.45 323.19 T
1 11 Q
( is the) 282.45 323.19 T
4 10 Q
(<integer>) 313.82 323.19 T
1 11 Q
( class itself. The appear-) 367.82 323.19 T
(ance of a class, method, or generic function in a listener depends on the Dylan) 99.65 309.19 T
(envir) 99.65 295.19 T
(onment. W) 124.88 295.19 T
(e have chosen a simple appearance of classes for this book.) 177.75 295.19 T
(All the classes that we have seen so far ar) 126.65 281.19 T
(e built-in classes, pr) 326.79 281.19 T
(ovided by) 422.64 281.19 T
(Dylan. In Chapter 4,) 99.65 267.19 T
0 F
(User-De\336ned Classes and Methods) 203.75 267.19 T
1 F
(, we show how to de\336ne) 358.98 267.19 T
(new classes.) 99.65 253.19 T
3 13 Q
(3.2.1  Class inheritance) 99.65 221.86 T
1 11 Q
(One important aspect of classes is that they ar) 99.65 202.19 T
(e r) 321.9 202.19 T
(elated to one another by) 334.07 202.19 T
2 F
-0.35 (inheritance) 99.65 188.19 P
1 F
-0.35 (. Inheritance enables classes that ar) 156.46 188.19 P
-0.35 (e logically r) 324.12 188.19 P
-0.35 (elated to one another to) 379.75 188.19 P
(shar) 99.65 174.19 T
(e the behaviors and attributes that they have in common. Each class inherits) 120.36 174.19 T
(fr) 99.65 160.19 T
(om one or mor) 107.46 160.19 T
(e classes, called its) 179.32 160.19 T
2 F
(superclasses) 271.41 160.19 T
1 F
(. If no other class is appr) 333.72 160.19 T
(opriate,) 452 160.19 T
99.65 498.52 495.65 506.52 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 3.1) 141.48 509.85 T
8 F
(The) 194.28 509.85 T
4 F
(say-greeting) 214.29 509.85 T
8 F
( gener) 286.29 509.85 T
(ic function and its methods) 314.79 509.85 T
(.) 433.03 509.85 T
99.65 522.52 495.65 672.95 C
99.65 526.52 495.65 670.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 28 386 163 386 135 104.65 531.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f3-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f3-1.eps)%%CreationDate: (6/5/96) (10:38 AM)%%BoundingBox: 0 28 386 163%%HiResBoundingBox: 1.0083 28.3417 384.4917 163.6583%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -34.6667 294.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D384.1667 28.6667 m384.1667 163.3333 L1.3333 163.3333 L1.3333 28.6667 L384.1667 28.6667 Lb1 g1 w277.3333 135.6667 m277.3333 152.6667 L117.8333 152.6667 L117.8333 135.6667 L277.3333 135.6667 Lf0 R0 G0.65 w375.3333 85.1667 m375.3333 123.6667 L10.3333 123.6667 L10.3333 85.1667 L375.3333 85.1667 Lb375.3333 37.6667 m375.3333 76.1667 L10.3333 76.1667 L10.3333 37.6667 L375.3333 37.6667 Lb0 To1 0 0 1 198.3333 141.1667 0 TpTP-74.3263 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(say-greet) Tx 0 40 Tk (ing) Tx (\r) TX TO0 To1 0 0 1 16.8333 111.6667 0 TpTP0 Tr0 Ta10 0 Tl(define method say-greeting \(greeting :: <object>\);\r) Tx T*(  format-out\("%s\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TO0 To1 0 0 1 16.8333 65.4167 0 TpTP0 Tr(define method say-greeting \(greeting :: <integer>\)\r) Tx T*(  format-out\("Your lucky number is %s.\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 522.52 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 44
%%Page: "31" 45
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.2 Classes) 470.42 702.62 T
2 F
(31) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.11 (then the class inherits fr) 99.65 665.62 P
-0.11 (om the class) 214.92 665.62 P
4 10 Q
-0.24 (<object>) 276.74 665.62 P
1 11 Q
-0.11 (. This class is the) 324.74 665.62 P
2 F
-0.11 (root) 407.74 665.62 P
1 F
-0.11 ( of all classes:) 427.91 665.62 P
(All classes inherit fr) 99.65 651.62 T
(om it, either dir) 195.92 651.62 T
(ectly or indir) 271.57 651.62 T
(ectly) 334.15 651.62 T
(, and it does not have any) 355.98 651.62 T
(dir) 99.65 637.62 T
(ect super) 113.72 637.62 T
(classes.) 157.53 637.62 T
(In Dylan, we distinguish between two terms:) 99.65 446.62 T
0 F
(dir) 320.87 446.62 T
(ect instance) 333.51 446.62 T
1 F
( and) 385.55 446.62 T
0 F
(general instance) 409.67 446.62 T
1 F
(.) 481.69 446.62 T
(An object is a) 99.65 432.62 T
2 F
(direct instance) 167.38 432.62 T
1 F
( of exactly one class: the class that) 240.37 432.62 T
4 10 Q
(object-class) 406.86 432.62 T
1 11 Q
-0.02 (r) 99.65 418.62 P
-0.02 (eturns for that object. An object is a) 103.79 418.62 P
2 F
-0.02 (general instance) 277.49 418.62 P
1 F
-0.02 ( of its dir) 359.03 418.62 P
-0.02 (ect class, and of all) 402.41 418.62 P
(classes fr) 99.65 404.62 T
(om which its dir) 143.05 404.62 T
(ect class inherits. The term) 222.61 404.62 T
0 F
(instance) 354.15 404.62 T
1 F
( is equivalent to) 391.03 404.62 T
0 F
(general instance) 99.65 390.62 T
1 F
(. Y) 171.66 390.62 T
(ou can use the) 183.49 390.62 T
4 10 Q
(instance?) 255.74 390.62 T
1 11 Q
( pr) 309.74 390.62 T
(edicate to ask whether an object is) 323.25 390.62 T
(an instance of a given class:) 99.65 376.62 T
6 9 Q
(?) 99.65 355.95 T
4 F
( instance?\0501000, <integer>\051;) 105.05 355.95 T
6 F
(#t) 99.65 344.95 T
(?) 99.65 325.95 T
4 F
( instance?\050"hello, world", <integer>\051;) 105.05 325.95 T
6 F
(#f) 99.65 314.95 T
1 11 Q
(All objects ar) 99.65 294.62 T
(e instances of the class) 162.82 294.62 T
4 10 Q
(<object>) 274.25 294.62 T
1 11 Q
(:) 322.25 294.62 T
6 9 Q
(?) 99.65 273.95 T
4 F
( instance?\0501000, <object>\051;) 105.05 273.95 T
6 F
(#t) 99.65 262.95 T
(?) 99.65 243.95 T
4 F
( instance?\050"hello, world", <object>\051;) 105.05 243.95 T
6 F
(#t) 99.65 232.95 T
1 11 Q
(Figur) 99.65 212.62 T
(e 3.2 shows the inheritance r) 125.86 212.62 T
(elationships among several of the built-in) 263.4 212.62 T
-0.31 (classes. If class A is a super) 99.65 198.62 P
-0.31 (class of class B, then class B is a) 229.4 198.62 P
2 F
-0.31 (subclass) 380.96 198.62 P
1 F
-0.31 ( of class A. For) 423.1 198.62 P
(example,) 99.65 184.62 T
4 10 Q
(<object>) 146.39 184.62 T
1 11 Q
( is a super) 194.39 184.62 T
(class of) 243.33 184.62 T
4 10 Q
(<string>) 281.41 184.62 T
1 11 Q
(, and) 329.41 184.62 T
4 10 Q
(<string>) 356.28 184.62 T
1 11 Q
( is a subclass of) 404.28 184.62 T
4 10 Q
(<object>) 99.65 170.62 T
1 11 Q
(. For simplicity) 147.65 170.62 T
(, Figur) 219.52 170.62 T
(e 3.2 omits certain classes that intervene between) 251.24 170.62 T
(the classes shown.) 99.65 156.62 T
2 F
-0.04 (Comparison with C++:) 132.65 608.62 P
1 F
-0.04 (If you ar) 249.74 608.62 P
-0.04 (e familiar with the class concepts) 290.94 608.62 P
-0.24 (of C++, you might initially be confused by Dylan\325s class model. In) 132.65 594.62 P
-0.26 (Dylan, all base classes ar) 132.65 580.62 P
-0.26 (e ef) 250.99 580.62 P
-0.26 (fectively virtual base classes with \322vir-) 267.48 580.62 P
-0.44 (tual\323 data members. When a class inherits another class mor) 132.65 566.62 P
-0.44 (e than) 421.86 566.62 P
(once \050because of multiple inheritance\051, only a single copy of that) 132.65 552.62 T
(base class is included. Each of the multiple-inheritance paths can) 132.65 538.62 T
(contribute to the implementation of the derived class. The Dylan) 132.65 524.62 T
(class model favors this mix-in style of pr) 132.65 510.62 T
(ogramming. For mor) 329.09 510.62 T
(e) 430.78 510.62 T
-0.31 (information, see Section B.2 in Appendix B,) 132.65 496.62 P
0 F
-0.31 (Dylan Object Model for) 346.33 496.62 P
(C and C++ Pr) 132.65 482.62 T
(ogrammers) 196.21 482.62 T
1 F
(.) 245.71 482.62 T
126.65 621.83 126.65 475.08 2 L
V
0.25 H
0 Z
N
477.65 621.83 477.65 475.08 2 L
V
N
126.52 621.95 477.77 621.95 2 L
V
N
126.52 474.95 477.77 474.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 45
%%Page: "32" 46
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(32) 63.65 702.62 T
0 F
(Chapter 3) 82.65 702.62 T
(Methods, Classes, and Objects) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(A typical Dylan envir) 99.65 498.63 T
(onment pr) 204.52 498.63 T
(ovides a br) 255.41 498.63 T
(owser to explor) 308.71 498.63 T
(e inheritance r) 384.17 498.63 T
(elation-) 453.55 498.63 T
(ships among classes; certain envir) 99.65 484.63 T
(onments show the r) 263.94 484.63 T
(elationships graphically) 359.89 484.63 T
(.) 475.2 484.63 T
(The Dylan language includes functions that pr) 126.65 470.63 T
(ovide information about the) 352.28 470.63 T
-0.35 (inheritance r) 99.65 456.63 P
-0.35 (elationships among classes. W) 160.65 456.63 P
-0.35 (e can use) 305.87 456.63 P
4 10 Q
-0.77 (subtype?) 351.67 456.63 P
1 11 Q
-0.35 ( to ask whether one) 399.67 456.63 P
(class inherits fr) 99.65 442.63 T
(om another class:) 172.94 442.63 T
6 9 Q
(?) 99.65 421.96 T
4 F
( subtype?\050<integer>, <number>\051;) 105.05 421.96 T
6 F
(#t) 99.65 410.96 T
(?) 99.65 391.96 T
4 F
( subtype?\050<integer>, <object>\051;) 105.05 391.96 T
6 F
(#t) 99.65 380.96 T
(?) 99.65 361.96 T
4 F
( subtype?\050<single-float>, <object>\051;) 105.05 361.96 T
6 F
(#t) 99.65 350.96 T
(?) 99.65 331.96 T
4 F
( subtype?\050<string>, <integer>\051;) 105.05 331.96 T
6 F
(#f) 99.65 320.96 T
1 11 Q
(It may be confusing that we use a function called) 99.65 300.63 T
4 10 Q
(subtype?) 340.23 300.63 T
1 11 Q
( her) 388.23 300.63 T
(e, but Dylan does) 406.8 300.63 T
(not pr) 99.65 286.63 T
(ovide a function called) 129.15 286.63 T
4 10 Q
(subclass?) 242.62 286.63 T
1 11 Q
(. Every class is a) 296.61 286.63 T
2 F
(type) 378.06 286.63 T
1 F
(, but certain types) 400.06 286.63 T
(ar) 99.65 272.63 T
(e not classes \050see Section 9.1, page 109\051. The) 109.29 272.63 T
4 10 Q
(subtype?) 323.46 272.63 T
1 11 Q
( function works for both) 371.46 272.63 T
(classes and other types.) 99.65 258.63 T
(W) 126.65 244.63 T
(e can ask for all the super) 136.64 244.63 T
(classes of a given class:) 259.97 244.63 T
6 9 Q
(?) 99.65 223.96 T
4 F
( all-superclasses\050<string>\051;) 105.05 223.96 T
6 F
(#[{class <string>}, {class <mutable-sequence>}, {class <sequence>},) 99.65 212.96 T
({class <mutable-collection>}, {class <collection>}, {class <object>}]) 99.65 201.96 T
(?) 99.65 182.96 T
4 F
( all-superclasses\050<integer>\051;) 105.05 182.96 T
6 F
(#[{class <integer>}, {class <rational>}, {class <real>}, {class <number>},) 99.65 171.96 T
({class <object>}]) 99.65 160.96 T
99.65 517.96 495.65 525.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 3.2) 105.75 529.29 T
8 F
(Classes and subclasses) 158.55 529.29 T
(. Each arro) 265.66 529.29 T
(w points from a class to a subclass) 314.42 529.29 T
(.) 468.77 529.29 T
99.65 541.95 495.65 672.95 C
154.15 551.95 441.15 670.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 90 65 327 233 237 168 178.15 558.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f3-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f3-2 .eps)%%CreationDate: (6/5/96) (10:38 AM)%%BoundingBox: 90 65 327 233%%HiResBoundingBox: 91.2386 64.9167 325.6241 232.6745%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 41.3333 242.6667 3 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A0 To1 0 0 1 170.6666 168.6667 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 112.8333 116.6667 0 TpTP-21.5947 0 Td0 Tr(<string>) Tx (\r) TX TO0 To1 0 0 1 229.3333 116.6667 0 TpTP-21.5947 0 Td0 Tr(<number>) Tx (\r) TX TO0 To1 0 0 1 169.3333 67.1667 0 TpTP-24.2941 0 Td0 Tr(<integer>) Tx (\r) TX TO0 To1 0 0 1 287.8333 67.1667 0 TpTP-37.7908 0 Td0 Tr(<single-float>) Tx (\r) TX TO0 To1 0 0 1 240.8333 224.6667 0 TpTP0 Tr/_Courier-Bold 10 Tf(\r) Tx TO0 R0 G226.3333 156 mSuuuuuu0.65 w230.6666 111.3334 m277.6666 81.6667 lS0 O0 g1 w275.1678 80.5979 m283.5275 78.0001 l277.5865 84.4298 l275.1678 80.5979 lfUUUUUU0 R0 G173.3333 160.5834 mS219 131.3334 mSuuuuuu0.65 w173.3333 160.5834 m220.3333 131 lS0 O0 g1 w217.8329 129.9294 m226.1959 127.3423 l220.2468 133.7644 l217.8329 129.9294 lfUUUUUUuuuuuu0 R0 G0.65 w167.3333 161 m121 130.6667 lS0 O0 g1 w121.0671 133.3888 m115.2335 126.862 l123.5491 129.5977 l121.0671 133.3888 lfUUUUUUuuuuuu0 R0 G0.65 w225.6666 111 m178.3333 81.3334 lS0 O0 g1 w178.4586 84.0499 m172.4969 77.6396 l180.8651 80.2103 l178.4586 84.0499 lfUUUUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 541.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 46
%%Page: "33" 47
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.2 Classes) 470.42 702.62 T
2 F
(33) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
( all-superclasses\050<single-float>\051;) 105.05 666.95 T
6 F
-0.22 (#[{class <single-float>}, {class <float>}, {class <real>}, {class <number>},) 99.65 655.95 P
({class <object>}]) 99.65 644.95 T
1 11 Q
(The) 99.65 624.62 T
4 10 Q
(all-superclasses) 120.81 624.62 T
1 11 Q
( function r) 216.81 624.62 T
(eturns a vector containing the class itself and) 267.24 624.62 T
-0.12 (all that class\325s super) 99.65 610.62 P
-0.12 (classes. The) 196.46 610.62 P
4 10 Q
-0.27 (#[) 255.72 610.62 P
6 9 Q
-0.25 (...) 267.72 610.62 P
4 10 Q
-0.27 (]) 283.92 610.62 P
1 11 Q
-0.12 ( syntax r) 289.92 610.62 P
-0.12 (epr) 331.26 610.62 P
-0.12 (esents a) 347.28 610.62 P
2 F
-0.12 (vector) 387.89 610.62 P
1 F
-0.12 (, which is a one-) 417.63 610.62 P
-0.15 (dimensional array) 99.65 596.62 P
-0.15 (. \050For information about vectors, see Chapter 1) 187.12 596.62 P
-0.15 (1,) 411.39 596.62 P
0 F
-0.15 (Collections and) 424.85 596.62 P
(Contr) 99.65 582.62 T
(ol Flow) 125.73 582.62 T
1 F
(.\051) 158.42 582.62 T
3 13 Q
(3.2.2  Relationship between c) 99.65 551.29 T
(lasses and methods) 247.57 551.29 T
1 11 Q
(The r) 99.65 531.62 T
(elationship between classes and methods in Dylan is dif) 124.96 531.62 T
(fer) 396.47 531.62 T
(ent fr) 409.55 531.62 T
(om that in) 435.37 531.62 T
(C++ and Smalltalk, among other languages.) 99.65 517.62 T
-0.2 (In Dylan, a method belongs to a generic function, as shown in Figur) 99.65 239.62 P
-0.2 (e 3.1, page 30.) 426.45 239.62 P
(Although methods ar) 99.65 225.62 T
(e independent of classes, methods operate on instances of) 204.06 225.62 T
(classes. A method states the types of objects for which it is applicable by the type) 99.65 211.62 T
-0.38 (constraint of each of its r) 99.65 197.62 P
-0.38 (equir) 217.09 197.62 P
-0.38 (ed parameters. Consider the) 242.5 197.62 P
4 10 Q
-0.82 (say-greeting) 381.2 197.62 P
1 11 Q
-0.38 ( method) 453.2 197.62 P
(de\336ned earlier:) 99.65 183.62 T
2 F
(Comparison to C++ and Smalltalk:) 132.65 483.62 T
1 F
( In C++ and Smalltalk, a class) 306.99 483.62 T
-0.18 (contains the equivalent of methods. In Dylan, a class does not con-) 132.65 469.62 P
(tain methods; instead, a method belongs to a generic function.) 132.65 455.62 T
(This design decision enables these powerful featur) 132.65 441.62 T
(es of Dylan:) 378.16 441.62 T
(\245) 141.65 427.62 T
(Y) 159.65 427.62 T
(o) 165.97 427.62 T
(u can de\336ne methods on built-in classes \050because you do) 171.98 427.62 T
(not have to modify the class de\336nition to de\336ne a method) 159.65 413.62 T
(intended for use on the class\051. For an example, see Section) 159.65 399.62 T
(6.1, page 75. Mor) 159.65 385.62 T
(e generally) 242.2 385.62 T
(, you can de\336ne a method for a) 294.42 385.62 T
(class that you did not de\336ne.) 159.65 371.62 T
(\245) 141.65 357.62 T
-0.09 (Y) 159.65 357.62 P
-0.09 (ou can write multimethods. In a) 165.97 357.62 P
2 F
-0.09 (multimethod) 323.98 357.62 P
1 F
-0.09 (, the method) 389.97 357.62 P
(dispatch is based on the classes of mor) 159.65 343.62 T
(e than one ar) 346.61 343.62 T
(gument) 409.35 343.62 T
(to a generic function. For an intr) 159.65 329.62 T
(oduction to method dis-) 315.96 329.62 T
(patch, see Section 5.5, page 63. For information about multi-) 159.65 315.62 T
(methods, see Chapter 6,) 159.65 301.62 T
0 F
(Multimethods) 281.47 301.62 T
1 F
(.) 344.42 301.62 T
(\245) 141.65 287.62 T
(Y) 159.65 287.62 T
(ou can r) 165.97 287.62 T
(estrict generic functions to operate on speci\336c) 205.04 287.62 T
(classes of objects.) 159.65 273.62 T
126.65 496.83 126.65 266.08 2 L
V
0.25 H
0 Z
N
477.65 496.83 477.65 266.08 2 L
V
N
126.52 496.95 477.77 496.95 2 L
V
N
126.52 265.95 477.77 265.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 47
%%Page: "34" 48
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(34) 63.65 702.62 T
0 F
(Chapter 3) 82.65 702.62 T
(Methods, Classes, and Objects) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method say-greeting \050greeting :: <integer>\051;) 99.65 666.95 T
(format-out\050"Your lucky number is %s.\134n", greeting\051;) 110.45 655.95 T
(end;) 99.65 644.95 T
1 11 Q
(This method operates on instances of the) 99.65 624.62 T
4 10 Q
(<integer>) 300.76 624.62 T
1 11 Q
( class. Notice how easy) 354.76 624.62 T
(and convenient it is to de\336ne a method intended for use on the built-in class) 99.65 610.62 T
4 10 Q
(<integer>) 99.65 596.62 T
1 11 Q
(.) 153.65 596.62 T
3 15 Q
(3.3  Objects) 99.65 556.95 T
1 11 Q
(In Dylan, everything is an) 99.65 536.62 T
2 F
(object) 228.68 536.62 T
1 F
(. Characters, strings, numbers, arrays, and vec-) 259.23 536.62 T
(tors ar) 99.65 522.62 T
(e all objects. The canonical tr) 130.65 522.62 T
(ue and false values,) 269.62 522.62 T
4 10 Q
(#t) 367.67 522.62 T
1 11 Q
(, and) 379.67 522.62 T
4 10 Q
(#f) 406.55 522.62 T
1 11 Q
(, ar) 418.55 522.62 T
(e objects.) 433.69 522.62 T
(Methods, generic functions, and classes ar) 99.65 508.62 T
(e objects. What does it mean to be an) 303.99 508.62 T
(object?) 99.65 494.62 T
(\245) 108.65 474.62 T
(Most important, an object has a unique identity) 126.65 474.62 T
(. Y) 355.79 474.62 T
(ou can use the) 367.61 474.62 T
4 10 Q
(==) 439.86 474.62 T
1 11 Q
( pr) 451.86 474.62 T
(edi-) 465.37 474.62 T
(cate to test whether two operands ar) 126.65 460.62 T
(e the same object. See Section 3.3.1.) 303.46 460.62 T
(\245) 108.65 440.62 T
(An object is a dir) 126.65 440.62 T
(ect instance of a particular class. Y) 208.44 440.62 T
(ou can use the) 373.55 440.62 T
4 10 Q
(object-) 445.8 440.62 T
(class) 126.65 426.62 T
1 11 Q
( pr) 156.65 426.62 T
(edicate to determine the dir) 170.16 426.62 T
(ect class of an object.) 304.28 426.62 T
(\245) 108.65 406.62 T
(Y) 126.65 406.62 T
(ou can give an object a name. For example, if you de\336ne a variable or con-) 132.97 406.62 T
(stant to contain an object, you have given that object a name. See Section) 126.65 392.62 T
(3.3.2.) 126.65 378.62 T
(\245) 108.65 358.62 T
(Y) 126.65 358.62 T
(ou can pass an object as an ar) 132.97 358.62 T
(gument or r) 275.1 358.62 T
(eturn value \321 because generic) 332.82 358.62 T
(functions and methods ar) 126.65 344.62 T
(e objects, you can manipulate them just as you) 250.97 344.62 T
(can any other object. See Section 12.3, page 180.) 126.65 330.62 T
2 F
(Comparison to C++ and Smalltalk:) 132.65 290.62 T
1 F
( In Dylan and Smalltalk,) 306.99 290.62 T
(everything is an object \050an instance of a class\051; we say that Dylan) 132.65 276.62 T
(and Smalltalk have \322objects all the way down.\323 In contrast, in) 132.65 262.62 T
(C++, some values ar) 132.65 248.62 T
(e not objects; they have primitive types that) 231.56 248.62 T
(ar) 132.65 234.62 T
(e not classes. For example, in Dylan, 7 is an instance of) 142.29 234.62 T
4 10 Q
(<integer>) 132.65 220.62 T
1 11 Q
(. In C++, 7 is not an instance; it has the type) 186.65 220.62 T
4 10 Q
(int) 400.5 220.62 T
1 11 Q
(. This) 418.5 220.62 T
-0.16 (design decision enables Dylan users to de\336ne methods on built-in) 132.65 206.62 P
(classes in the same way that they de\336ne methods on user) 132.65 192.62 T
(-de\336ned) 410.04 192.62 T
(classes \321 a technique that cannot be done in C++.) 132.65 178.62 T
126.65 303.83 126.65 171.08 2 L
V
0.25 H
0 Z
N
477.65 303.83 477.65 171.08 2 L
V
N
126.52 303.95 477.77 303.95 2 L
V
N
126.52 170.95 477.77 170.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 48
%%Page: "35" 49
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.3 Objects) 469.55 702.62 T
2 F
(35) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(3.3.1  Predicates f) 99.65 459.29 T
(or testing equality) 189.53 459.29 T
1 11 Q
(Dylan pr) 99.65 439.62 T
(ovides two pr) 142.89 439.62 T
(edicates for testing equality:) 209.99 439.62 T
4 10 Q
(=) 349.34 439.62 T
1 11 Q
( and) 355.34 439.62 T
4 10 Q
(==) 379.46 439.62 T
1 11 Q
(. The) 391.46 439.62 T
4 10 Q
(=) 418.12 439.62 T
1 11 Q
( pr) 424.12 439.62 T
(edicate) 437.63 439.62 T
(determines whether two objects ar) 99.65 425.62 T
(e) 267.01 425.62 T
2 F
(similar) 275.03 425.62 T
1 F
(. Similarity is de\336ned dif) 309.65 425.62 T
(fer) 429.53 425.62 T
(ently for) 442.61 425.62 T
-0.04 (dif) 99.65 411.62 P
-0.04 (fer) 113.04 411.62 P
-0.04 (ent kinds of objects. When you de\336ne new classes, you can de\336ne how simi-) 126.11 411.62 P
(larity is tested for those classes by de\336ning a method for) 99.65 397.62 T
4 10 Q
(=) 375.77 397.62 T
1 11 Q
(.) 381.77 397.62 T
(The) 126.65 383.62 T
4 10 Q
(==) 147.81 383.62 T
1 11 Q
( pr) 159.81 383.62 T
(edicate determines whether the operands ar) 173.32 383.62 T
(e) 386.81 383.62 T
2 F
(identical) 394.83 383.62 T
1 F
( \321 that is,) 438.8 383.62 T
-0.36 (whether the operands ar) 99.65 369.62 P
-0.36 (e the same object. The) 217.67 369.62 P
4 10 Q
-0.8 (==) 324.84 369.62 P
1 11 Q
-0.36 ( pr) 336.84 369.62 P
-0.36 (edicate \050identity\051 is a str) 349.98 369.62 P
-0.36 (onger) 465.12 369.62 P
(test: two values may be similar but not identical, and two identical values ar) 99.65 355.62 T
(e) 469.5 355.62 T
(always similar) 99.65 341.62 T
(.) 169.56 341.62 T
(If two numbers ar) 126.65 327.62 T
(e mathematically equal, then they ar) 213.79 327.62 T
(e similar:) 390.37 327.62 T
6 9 Q
(?) 99.65 306.95 T
4 F
( 100 = 100;) 105.05 306.95 T
6 F
(#t) 99.65 295.95 T
(?) 99.65 276.95 T
4 F
( 100 = 100.0;) 105.05 276.95 T
6 F
(#t) 99.65 265.95 T
1 11 Q
(T) 99.65 245.62 T
(wo numbers that ar) 105.4 245.62 T
(e similar) 200.66 245.62 T
(, and have the same type, ar) 241.69 245.62 T
(e the same object:) 377.33 245.62 T
6 9 Q
(?) 99.65 224.95 T
4 F
( 100 == 100;) 105.05 224.95 T
6 F
(#t) 99.65 213.95 T
1 11 Q
(T) 99.65 193.62 T
(wo numbers that ar) 105.4 193.62 T
(e similar) 200.66 193.62 T
(, but have dif) 241.69 193.62 T
(fer) 305.77 193.62 T
(ent types, ar) 318.85 193.62 T
(e not the same object:) 378.24 193.62 T
6 9 Q
(?) 99.65 172.95 T
4 F
( 100 == 100.0;) 105.05 172.95 T
6 F
(#f) 99.65 161.95 T
2 11 Q
(Comparison to Java:) 132.65 659.62 T
1 F
( Java r) 233.79 659.62 T
(ecognizes the need for object r) 264.32 659.62 T
(epr) 410.86 659.62 T
(esen-) 426.89 659.62 T
(tation of all classes with the) 132.65 645.62 T
4 10 Q
(Number) 269.47 645.62 T
1 11 Q
( class and its subclasses. How-) 305.47 645.62 T
(ever) 132.65 631.62 T
(, Java still r) 152.93 631.62 T
(equir) 206.81 631.62 T
(es the pr) 232.22 631.62 T
(ogrammer to work with nonobjects) 273.67 631.62 T
-0.38 (when writing mathematical statements. The) 132.65 617.62 P
4 10 Q
-0.84 (Number) 347.2 617.62 P
1 11 Q
-0.38 ( classes can be) 383.2 617.62 P
(used to \322wrap\323 an object cloak ar) 132.65 603.62 T
(ound the primitive) 294.32 603.62 T
4 10 Q
(integer) 388.93 603.62 T
1 11 Q
(,) 430.11 603.62 T
4 10 Q
(float) 132.65 589.62 T
1 11 Q
(, and other numeric types, to allow object-based pr) 162.65 589.62 T
(ogram-) 408.81 589.62 T
(ming. Dylan does not separate the mathematical manipulation of) 132.65 575.62 T
(numbers fr) 132.65 561.62 T
(om their other object pr) 186.32 561.62 T
(operties. Pr) 300.61 561.62 T
(ogrammers need) 355.85 561.62 T
(only to think in terms of numerical objects, and can r) 132.65 547.62 T
(ely on the) 388.54 547.62 T
(compiler to implement mathematical operations ef) 132.65 533.62 T
(\336ciently) 378.56 533.62 T
(. Simi-) 416.66 533.62 T
(larly) 132.65 519.62 T
(, the) 153.79 519.62 T
4 10 Q
(Boolean) 177.3 519.62 T
1 11 Q
( class is used to encapsulate primitive) 219.3 519.62 T
4 10 Q
(boolean) 405.07 519.62 T
1 11 Q
(values as objects, and pr) 132.65 505.62 T
(ogrammers must convert back and forth,) 250.49 505.62 T
(depending on the context.) 132.65 491.62 T
126.65 672.83 126.65 484.08 2 L
V
0.25 H
0 Z
N
477.65 672.83 477.65 484.08 2 L
V
N
126.52 672.95 477.77 672.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 49
%%Page: "36" 50
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(36) 63.65 702.62 T
0 F
(Chapter 3) 82.65 702.62 T
(Methods, Classes, and Objects) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Characters ar) 99.65 665.62 T
(e enclosed in single quotation marks. If two characters look the) 164.34 665.62 T
(same, they ar) 99.65 651.62 T
(e similar and identical:) 164.06 651.62 T
6 9 Q
(?) 99.65 630.95 T
4 F
( \325z\325 = \325z\325;) 105.05 630.95 T
6 F
(#t) 99.65 619.95 T
(?) 99.65 600.95 T
4 F
( \325z\325 == \325z\325;) 105.05 600.95 T
6 F
(#t) 99.65 589.95 T
1 11 Q
(Strings ar) 99.65 569.62 T
(e enclosed in double quotation marks. Strings that have identical ele-) 146.13 569.62 T
(ments ar) 99.65 555.62 T
(e similar) 141.68 555.62 T
(, but may or may not be identical. That is, strings can have iden-) 182.71 555.62 T
(tical elements, but not be the same string. For example, these strings ar) 99.65 541.62 T
(e similar:) 442.53 541.62 T
6 9 Q
(?) 99.65 520.95 T
4 F
("apple" = "apple";) 110.45 520.95 T
6 F
(#t) 99.65 509.95 T
1 11 Q
(Just by looking at two strings, you cannot know whether or not they ar) 99.65 489.62 T
(e the iden-) 443.82 489.62 T
(tical string. The only way to determine identity is to use the) 99.65 475.62 T
4 10 Q
(==) 391.74 475.62 T
1 11 Q
( pr) 403.74 475.62 T
(edicate. The fol-) 417.25 475.62 T
(lowing expr) 99.65 461.62 T
(ession could r) 158.2 461.62 T
(eturn) 225.5 461.62 T
4 10 Q
(#t) 254.48 461.62 T
1 11 Q
( or) 266.48 461.62 T
4 10 Q
(#f) 282.33 461.62 T
1 11 Q
(:) 294.33 461.62 T
6 9 Q
(?) 99.65 440.95 T
4 F
("apple" == "apple";) 110.45 440.95 T
1 11 Q
(A string is always identical to itself:) 99.65 420.62 T
6 9 Q
(?) 99.65 399.95 T
4 F
(begin) 110.45 399.95 T
(let yours = "apple";) 121.25 388.95 T
(let mine = yours;) 121.25 377.95 T
(mine == yours;) 121.25 366.95 T
(end;) 110.45 355.95 T
6 F
(#t) 99.65 344.95 T
3 13 Q
(3.3.2  Bindings: Mappings between objects and names) 99.65 315.29 T
1 11 Q
(A) 99.65 295.62 T
2 F
(binding) 110.96 295.62 T
1 F
( is a mapping between an object and a name. The name can be a mod-) 151.28 295.62 T
(ule variable, module constant, or local variable.) 99.65 281.62 T
(Her) 126.65 267.62 T
(e, we give the object) 145.22 267.62 T
4 10 Q
(3.14159) 245.89 267.62 T
1 11 Q
( the name) 287.89 267.62 T
4 10 Q
($pi) 338.28 267.62 T
1 11 Q
(, wher) 356.28 267.62 T
(e) 386.77 267.62 T
4 10 Q
($pi) 394.79 267.62 T
1 11 Q
( is a module) 412.79 267.62 T
(constant:) 99.65 253.62 T
6 9 Q
(?) 99.65 232.95 T
4 F
( define constant $pi = 3.14159;) 105.05 232.95 T
1 11 Q
(Her) 99.65 212.62 T
(e, we give the object) 118.22 212.62 T
4 10 Q
("apple") 218.89 212.62 T
1 11 Q
( the name) 260.89 212.62 T
4 10 Q
(*my-favorite-pie*) 311.28 212.62 T
1 11 Q
(, wher) 413.28 212.62 T
(e) 443.77 212.62 T
4 10 Q
(*my-) 451.79 212.62 T
(favorite-pie*) 99.65 198.62 T
1 11 Q
( is a module variable:) 177.65 198.62 T
6 9 Q
(?) 99.65 177.95 T
4 F
( define variable *my-favorite-pie* = "apple";) 105.05 177.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 50
%%Page: "37" 51
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3.3 Objects) 469.55 702.62 T
2 F
(37) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Mor) 99.65 665.62 T
(e than one variable can contain a particular object, so, in ef) 120.21 665.62 T
(fect, an object can) 403.59 665.62 T
(have many names. Her) 99.65 651.62 T
(e, we de\336ne a new variable that contains the very same) 211.88 651.62 T
(pie:) 99.65 637.62 T
6 9 Q
(?) 99.65 616.95 T
4 F
( define variable *your-favorite-pie* = *my-favorite-pie*;) 105.05 616.95 T
6 F
(?) 99.65 597.95 T
4 F
(*your-favorite-pie* == *my-favorite-pie*;) 110.45 597.95 T
6 F
(#t) 99.65 586.95 T
1 11 Q
(When you de\336ne a method,) 99.65 566.62 T
4 10 Q
(define method) 237.49 566.62 T
1 11 Q
( cr) 315.49 566.62 T
(eates a binding between a name) 327.27 566.62 T
(and a method object:) 99.65 552.62 T
6 9 Q
(?) 99.65 531.95 T
4 F
(define method say-greeting \050greeting :: <object>\051;) 110.45 531.95 T
(format-out\050"%s\134n", greeting\051;) 115.85 520.95 T
(end;) 110.45 509.95 T
1 11 Q
(All the bindings that we have cr) 99.65 489.62 T
(eated in this section so far ar) 255.09 489.62 T
(e accessible within a) 393.23 489.62 T
(module. \050For information about modules, see Chapter 13,) 99.65 475.62 T
0 F
(Libraries and Modules) 384.08 475.62 T
1 F
(.\051) 483.9 475.62 T
(Figur) 99.65 461.62 T
(e 3.3 shows how you can pictur) 125.86 461.62 T
(e each binding as a link between a name) 278.48 461.62 T
(\050enclosed in an oval in the \336gur) 99.65 447.62 T
(e\051 and another object \050enclosed in a r) 253.07 447.62 T
(ectangle\051.) 431.11 447.62 T
(Local variables ar) 126.65 433.62 T
(e also bindings, but they ar) 212.09 433.62 T
(e accessible only within a cer-) 343.34 433.62 T
(tain body of code; for example,) 99.65 419.62 T
6 9 Q
(?) 99.65 398.95 T
4 F
(begin) 110.45 398.95 T
(let radius = 5.0;) 121.25 387.95 T
(let circumference = 2.0 * $pi * radius;) 121.25 376.95 T
(circumference;) 121.25 365.95 T
(end;) 110.45 354.95 T
1 11 Q
(Bindings can be constant or variable. Y) 99.65 334.62 T
(ou can use the assignment operator to) 287.48 334.62 T
(change a variable binding, but you cannot change a constant binding. Module) 99.65 320.62 T
-0.23 (constants ar) 99.65 306.62 P
-0.23 (e constant bindings; module variables and local variables ar) 157.51 306.62 P
-0.23 (e variable) 446.03 306.62 P
(bindings.) 99.65 292.62 T
99.65 170.39 513.65 178.38 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 3.3) 132.98 181.72 T
8 F
(Bindings as links betw) 185.78 181.72 T
(een names and objects within a module) 284.05 181.72 T
(.) 459.54 181.72 T
99.65 194.38 513.65 276.95 C
101.06 198.38 512.24 274.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 -1 78 395 139 396 61 108.65 208.31 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f3-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f3-3 .eps)%%CreationDate: (6/5/96) (10:39 AM)%%BoundingBox: -1 78 395 139%%HiResBoundingBox: -0.3333 77.9167 393.9167 138.875%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 194.6667 -13.3333 194.6667 -13.3333%AI3_TileBox: -80.3333 -378.3334 471.6667 351.6666%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -1317.3333 850.6667 -3 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4125.3333 4306.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4125.3333 4306.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4125.3333 4306.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Inked artwork) Ln0 A0 To1 0 0 1 26.1666 128.1667 0 TpTP-8.098 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw($pi) Tx (\r) TX TO0 To1 0 0 1 25.6667 85.4167 0 TpTP-18.8954 0 Td0 Tr(3.14159) Tx (\r) TX TO0 To1 0 0 1 168.1667 85.9167 0 TpTP-18.8954 0 Td0 Tr("apple") Tx (\r) TX TO0 To1 0 0 1 111.9167 127.6667 0 TpTP-45.8888 0 Td0 Tr(*my-favorite-pie*\003) Tx 45.8888 -10 Td(\r) Tx TO0 To1 0 0 1 234.6667 127.6667 0 TpTP-51.2875 0 Td0 Tr(*your-favorite-pie*\003) Tx 51.2875 -10 Td(\r) Tx TO0 To1 0 0 1 350.1667 128.6667 0 TpTP-35.0914 0 Td0 Tr( say-greeting\003) Tx 35.0914 -10 Td(\r) Tx TO0 To1 0 0 1 351.9167 84.4167 0 TpTP-35.5664 0 Td0 Tr/_Helvetica 10 Tf(a method object) Tx (\r) TX TO1 Ap0 R0 G0.5 w32.9167 121.6667 m38.0529 121.6667 42.2168 125.3604 42.2168 129.9167 C42.2168 129.9167 L42.2168 134.4729 38.0529 138.1667 32.9167 138.1667 C19.4166 138.1667 L14.2803 138.1667 10.1165 134.4729 10.1165 129.9167 C9.8665 129.9167 L9.8665 125.3604 14.2803 121.6667 19.4166 121.6667 C32.9167 121.6667 Ls382.7292 122.125 m387.8654 122.125 392.0293 125.8187 392.0293 130.375 C392.0293 130.375 L392.0293 134.9313 387.8654 138.625 382.7292 138.625 C319.5624 138.625 L314.4262 138.625 310.2623 134.9313 310.2623 130.375 C310.0123 130.375 L310.0123 125.8187 314.4262 122.125 319.5624 122.125 C382.7292 122.125 Ls158.3665 121.6667 m163.5028 121.6667 167.6667 125.3604 167.6667 129.9167 C167.6667 129.9167 L167.6667 134.4729 163.5028 138.1667 158.3665 138.1667 C67.5208 138.1667 L62.3845 138.1667 58.2207 134.4729 58.2207 129.9167 C57.9707 129.9167 L57.9707 125.3604 62.3845 121.6667 67.5208 121.6667 C158.3665 121.6667 Ls284.5833 121.6667 m289.7196 121.6667 293.8835 125.3604 293.8835 129.9167 C293.8835 129.9167 L293.8835 134.4729 289.7196 138.1667 284.5833 138.1667 C185.7916 138.1667 L180.6554 138.1667 176.4915 134.4729 176.4915 129.9167 C176.2415 129.9167 L176.2415 125.3604 180.6554 121.6667 185.7916 121.6667 C284.5833 121.6667 Ls393.6667 78.1667 m393.6667 96.4167 L309.9167 96.4167 L309.9167 78.1667 L393.6667 78.1667 Ls193.4167 78.1667 m193.4167 96.4167 L141.9167 96.4167 L141.9167 78.1667 L193.4167 78.1667 Ls51.4167 78.1667 m51.4167 96.4167 L-0.0833 96.4167 L-0.0833 78.1667 L51.4167 78.1667 Lsuu0 Ap351.1667 122.1667 m351.1667 104.1667 lS0 O0 g1 w348.9288 105.2125 m351.1942 96.7567 l353.4602 105.2125 l348.9288 105.2125 lfUUuu0 R0 G0.5 w25.6667 121.1667 m25.6667 103.9167 lS0 O0 g1 w23.4288 105.4625 m25.6942 97.0067 l27.9602 105.4625 l23.4288 105.4625 lfUU107.6667 121.4167 mF0 R0 G124.1667 105.9167 mSuu0.5 w109.1667 121.6667 m135.6667 101.1667 lS0 O0 g1 w133.0716 100.3428 m141.1459 96.9608 l135.8442 103.9269 l133.0716 100.3428 lfUUu0 R0 G0.5 w226.5261 121.8386 m200.0261 101.3386 lS0 O0 g1 w199.3785 103.5576 m194.0765 96.5918 l202.1511 99.9735 l199.3785 103.5576 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 194.38 513.65 276.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 51
%%Page: "38" 52
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(38) 63.65 702.62 T
0 F
(Chapter 3) 82.65 702.62 T
(Methods, Classes, and Objects) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(3.4  Summar) 99.65 662.95 T
(y) 172.92 662.95 T
1 11 Q
(In this chapter) 99.65 642.62 T
(, we cover) 168.89 642.62 T
(ed the following:) 218.11 642.62 T
(\245) 108.65 622.62 T
(A generic function can contain mor) 126.65 622.62 T
(e than one method, wher) 297.85 622.62 T
(e each method) 419.13 622.62 T
(has parameters of dif) 126.65 608.62 T
(fer) 229.32 608.62 T
(ent types, and thus is intended for dif) 242.4 608.62 T
(fer) 424.65 608.62 T
(ent ar) 437.73 608.62 T
(gu-) 465.38 608.62 T
(ments. The) 126.65 594.62 T
4 10 Q
(say-greeting) 182.95 594.62 T
1 11 Q
( generic function has two methods.) 254.95 594.62 T
(\245) 108.65 574.62 T
(Dylan pr) 126.65 574.62 T
(ovides built-in classes, including) 169.89 574.62 T
4 10 Q
(<integer>) 331.29 574.62 T
1 11 Q
(,) 385.29 574.62 T
4 10 Q
(<single-float>) 390.79 574.62 T
1 11 Q
(,) 474.79 574.62 T
4 10 Q
(<string>) 126.65 560.62 T
1 11 Q
(, and) 174.65 560.62 T
4 10 Q
(<object>) 201.52 560.62 T
1 11 Q
(. These classes ar) 249.52 560.62 T
(e r) 331.36 560.62 T
(elated by inheritance.) 343.53 560.62 T
(\245) 108.65 540.62 T
(In Dylan, almost everything is an object. Each object has a unique identity) 126.65 540.62 T
(.) 483.88 540.62 T
(\245) 108.65 520.62 T
(The) 126.65 520.62 T
4 10 Q
(=) 147.81 520.62 T
1 11 Q
( pr) 153.81 520.62 T
(edicate tests for similarity; the) 167.32 520.62 T
4 10 Q
(==) 316.02 520.62 T
1 11 Q
( pr) 328.02 520.62 T
(edicate tests for identity) 341.53 520.62 T
(.) 456.85 520.62 T
(\245) 108.65 500.62 T
(A binding is an association between an object and a name.) 126.65 500.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 52
%%Page: "39" 53
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(39) 292.9 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(4) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(4) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(User) 100.65 591.4 T
(-De\336ned Classes and) 162.39 591.4 T
(Methods) 99.65 561.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we show the most basic techniques for writing object-oriented) 168.89 449.62 T
-0.05 (code in Dylan. W) 99.65 435.62 P
-0.05 (e de\336ne a class, make instances of the class, initialize slots of the) 182.71 435.62 P
-0.36 (instances, and get and set the values of slots. W) 99.65 421.62 P
-0.36 (e de\336ne methods, and call them on) 325.46 421.62 P
(the instances. One method r) 99.65 407.62 T
(eturns multiple values \321 and that is an extr) 235.39 407.62 T
(emely) 448.33 407.62 T
(useful technique. Another method uses local variables.) 99.65 393.62 T
(In this chapter) 126.65 379.62 T
(, we start to develop an example of a library that r) 195.89 379.62 T
(epr) 438.22 379.62 T
(esents) 454.25 379.62 T
(dif) 99.65 365.62 T
(fer) 113.04 365.62 T
(ent kinds of time. A library is a complete unit of code that can be used by) 126.11 365.62 T
-0.1 (many dif) 99.65 351.62 P
-0.1 (fer) 143.42 351.62 P
-0.1 (ent clients, wher) 156.5 351.62 P
-0.1 (e a client can be another library or an application pr) 236 351.62 P
-0.1 (o-) 485.98 351.62 P
(gram. In Chapters 5 and 6, we expand and r) 99.65 337.62 T
(e\336ne the example that we begin in) 312.87 337.62 T
(this chapter) 99.65 323.62 T
(. Chapter 8,) 156.03 323.62 T
0 F
(A Simple Library) 217.55 323.62 T
1 F
(, shows the r) 294.77 323.62 T
(esult: a complete and work-) 356.08 323.62 T
(ing library) 99.65 309.62 T
(.) 149.69 309.62 T
3 15 Q
(4.1  Requirements of the time and position c) 99.65 269.95 T
(lasses and methods) 357.8 269.95 T
1 11 Q
-0.04 (Our eventual goal in this book is to develop a sample application based on an air-) 99.65 249.62 P
(port theme. The sample application handles the scheduling of air) 99.65 235.62 T
(craft that ar) 415.44 235.62 T
(e) 471.64 235.62 T
(arriving into and departing fr) 99.65 221.62 T
(om an airport. For mor) 243.35 221.62 T
(e information, see Chapter) 354.65 221.62 T
(15,) 99.65 207.62 T
0 F
(Design of the Airport Application) 118.9 207.62 T
1 F
(.) 268.82 207.62 T
(W) 126.65 193.62 T
(e know that, for our airport application, we need to r) 136.64 193.62 T
(epr) 392.82 193.62 T
(esent time. Ther) 408.84 193.62 T
(e) 486.61 193.62 T
(ar) 99.65 179.62 T
(e several ways to r) 109.29 179.62 T
(epr) 199.22 179.62 T
(esent time. W) 215.25 179.62 T
(e could say that an event happened 2 hours) 280.44 179.62 T
(ago \050a time of) 99.65 165.62 T
(fset\051. W) 165.92 165.62 T
(e could say that an event happened at 21:30 \050a time of day\051.) 202.26 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 53
%%Page: "40" 54
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(40) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(e must r) 109.64 665.62 T
(epr) 149.15 665.62 T
(esent both kinds of time in our time library) 165.18 665.62 T
(, and we must pr) 372.91 665.62 T
(ovide a) 455.08 665.62 T
(way to print r) 99.65 651.62 T
(epr) 166.57 651.62 T
(esentations of both. In this chapter) 182.6 651.62 T
(, we de\336ne a class named) 349.14 651.62 T
4 10 Q
(<time-of-day>) 99.65 637.62 T
1 11 Q
(, and we de\336ne a method that prints a r) 177.65 637.62 T
(epr) 369.26 637.62 T
(esentation of) 385.28 637.62 T
4 10 Q
(<time-) 450.34 637.62 T
-0.26 (of-day>) 99.65 623.62 P
1 11 Q
-0.12 (. In Chapter 5,) 141.65 623.62 P
0 F
-0.12 (Class Inheritance) 215.41 623.62 P
1 F
-0.12 (, we de\336ne the) 292.19 623.62 P
4 10 Q
-0.26 (<time-offset>) 365.48 623.62 P
1 11 Q
-0.12 ( class, and) 443.48 623.62 P
(a method that prints a r) 99.65 609.62 T
(epr) 214.12 609.62 T
(esentation of) 230.15 609.62 T
4 10 Q
(<time-offset>) 295.21 609.62 T
1 11 Q
(.) 373.21 609.62 T
(The airport application also r) 126.65 595.62 T
(equir) 267.88 595.62 T
(es us to r) 293.29 595.62 T
(epr) 336.51 595.62 T
(esent physical objects \050such) 352.53 595.62 T
(as air) 99.65 581.62 T
(craft\051, and the positions \050locations\051 of physical objects. In Chapter 7,) 125.41 581.62 T
0 F
(Modularity) 99.65 567.62 T
1 F
(, we de\336ne classes that r) 150.97 567.62 T
(epr) 268.3 567.62 T
(esent physical objects and positions.) 284.33 567.62 T
-0.08 (Eventually) 126.65 553.62 P
-0.08 (, we need to be able to add times, to compar) 178.27 553.62 P
-0.08 (e times for similarity) 390.99 553.62 P
-0.08 (,) 490.23 553.62 P
(and to determine which of two times is gr) 99.65 539.62 T
(eater than the other) 302.7 539.62 T
(. W) 396.86 539.62 T
(e implement) 412.35 539.62 T
(those operations in Chapter 6,) 99.65 525.62 T
0 F
(Multimethods) 251.03 525.62 T
1 F
(.) 313.97 525.62 T
(W) 126.65 511.62 T
(e package the r) 136.64 511.62 T
(esult of all our work into a complete and working library) 209.55 511.62 T
(,) 485.39 511.62 T
-0.26 (in Chapter 8,) 99.65 497.62 P
0 F
-0.26 (A Simple Library) 166.96 497.62 P
1 F
-0.26 (. Later) 243.66 497.62 P
-0.26 (, we r) 273.5 497.62 P
-0.26 (e\336ne this library to achieve gr) 299.82 497.62 P
-0.26 (eater mod-) 443.09 497.62 P
(ularity and extensibility) 99.65 483.62 T
(. The \336nal r) 214.59 483.62 T
(esult is given in Chapter 14,) 269.91 483.62 T
0 F
(Four Complete) 410.44 483.62 T
(Libraries) 99.65 469.62 T
1 F
(.) 138.97 469.62 T
3 15 Q
(4.2  User) 99.65 429.95 T
(-de\336ned c) 150.71 429.95 T
(lasses) 208.58 429.95 T
1 11 Q
-0.01 (A) 99.65 409.62 P
2 F
-0.01 (user) 110.94 409.62 P
-0.01 (-de\336ned class) 132.13 409.62 P
1 F
-0.01 ( is like a str) 200.23 409.62 P
-0.01 (uctur) 254.83 409.62 P
-0.01 (e or a r) 280.71 409.62 P
-0.01 (ecor) 314.19 409.62 P
-0.01 (d type in other languages. When) 334.49 409.62 P
-0.42 (you de\336ne a class, you specify its name, its dir) 99.65 395.62 P
-0.42 (ect super) 320.62 395.62 P
-0.42 (classes, and its) 364.02 395.62 P
2 F
-0.42 (slots) 436.68 395.62 P
1 F
-0.42 (. A slot) 459.89 395.62 P
-0.3 (has a name and a type. Normally) 99.65 381.62 P
-0.3 (, each instance stor) 257.76 381.62 P
-0.3 (es its own value for the slot. A) 348.22 381.62 P
-0.15 (class inherits the slots de\336ned by its super) 99.65 367.62 P
-0.15 (classes, and it can de\336ne mor) 303.23 367.62 P
-0.15 (e slots if it) 444.2 367.62 P
(needs them.) 99.65 353.62 T
3 13 Q
(4.2.1  The) 99.65 322.29 T
4 12 Q
(<time-of-day>) 151.21 322.29 T
3 13 Q
( c) 244.81 322.29 T
(lass) 253.5 322.29 T
1 11 Q
-0.35 (W) 99.65 302.62 P
-0.35 (e start by de\336ning a class to r) 109.64 302.62 P
-0.35 (epr) 248.47 302.62 P
-0.35 (esent the concept of a time of day) 264.49 302.62 P
-0.35 (, such as 21:30.) 423.07 302.62 P
(The de\336nition of the) 99.65 288.62 T
4 10 Q
(<time-of-day>) 201.43 288.62 T
1 11 Q
( class is as follows:) 279.43 288.62 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to below 24:00 \050tomorrow\051) 99.65 267.95 T
4 F
(define class <time-of-day> \050<object>\051) 99.65 256.95 T
5 F
(// 1) 473.48 256.95 T
4 F
(slot total-seconds :: <integer>;) 110.45 245.95 T
5 F
(// 2) 473.48 245.95 T
4 F
(end class <time-of-day>;) 99.65 234.95 T
5 F
-2.7 (// 3) 473.48 234.95 P
1 11 Q
(The top line is a) 99.65 214.62 T
2 F
(comment) 179.45 214.62 T
1 F
(. The) 225.9 214.62 T
5 9 Q
(//) 252.56 214.62 T
1 11 Q
( characters begin a comment, which continues) 263.36 214.62 T
(to the end of the line. W) 99.65 200.62 T
(e also pr) 215.13 200.62 T
(ovide comments that number the lines of code) 256.02 200.62 T
(after the \336rst comment. The line numbers ar) 99.65 186.62 T
(e useful only for discussing the code) 313.33 186.62 T
(examples in the book, and would not be used in sour) 99.65 172.62 T
(ce \336les. Y) 356.92 172.62 T
(ou can also have) 401.43 172.62 T
(multiline comments that start with) 99.65 158.62 T
4 10 Q
(/*) 271.16 158.62 T
1 11 Q
( and end with) 283.16 158.62 T
4 10 Q
(*/) 353.54 158.62 T
1 11 Q
(.) 365.54 158.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 54
%%Page: "41" 55
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.3 Use of) 368.65 702.62 T
5 F
(make) 409.29 702.62 T
0 F
( to create an instance) 432.09 702.62 T
2 F
(41) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(On line 1, the wor) 126.65 665.62 T
(ds) 213.6 665.62 T
4 10 Q
(define class) 227.74 665.62 T
1 11 Q
( start the class de\336nition. The name of) 299.74 665.62 T
-0.03 (the class is) 99.65 651.62 P
4 10 Q
-0.06 (<time-of-day>) 153.85 651.62 P
1 11 Q
-0.03 (. The list following the name of the class is a list of the) 231.85 651.62 P
(dir) 99.65 637.62 T
(ect super) 113.72 637.62 T
(classes of this class. The) 157.53 637.62 T
4 10 Q
(<time-of-day>) 275.73 637.62 T
1 11 Q
( class has one dir) 353.73 637.62 T
(ect) 435.95 637.62 T
(super) 99.65 623.62 T
(class, which is the class) 126.97 623.62 T
4 10 Q
(<object>) 242.48 623.62 T
1 11 Q
(. Each user) 290.48 623.62 T
(-de\336ned class must have at) 342.95 623.62 T
(least one dir) 99.65 609.62 T
(ect super) 159.11 609.62 T
(class. If no other class is appr) 202.93 609.62 T
(opriate, the class must have) 344.12 609.62 T
4 10 Q
(<object>) 99.65 595.62 T
1 11 Q
( as its super) 147.65 595.62 T
(class.) 204.84 595.62 T
(Line 2 contains the only slot de\336nition of this class. This class has one slot,) 126.65 581.62 T
(named) 99.65 567.62 T
4 10 Q
(total-seconds) 136 567.62 T
1 11 Q
(. The slot\325s type constraint is) 214 567.62 T
4 10 Q
(<integer>) 354.87 567.62 T
1 11 Q
(. The double) 408.87 567.62 T
(colon,) 99.65 553.62 T
4 10 Q
(::) 131.65 553.62 T
1 11 Q
(, speci\336es the type constraint of a slot, just as it speci\336es the type con-) 143.65 553.62 T
(straint of a module variable or of a method\325s parameter) 99.65 539.62 T
(.) 367.97 539.62 T
(Line 3 is the end of the class de\336nition. The text after the wor) 126.65 525.62 T
(d) 422.52 525.62 T
4 10 Q
(end) 431.99 525.62 T
1 11 Q
( and) 449.99 525.62 T
-0.02 (befor) 99.65 511.62 P
-0.02 (e the semicolon is an optional part of the de\336nition; it documents which def-) 124.82 511.62 P
-0.02 (inition is ending. Any text appearing after the) 99.65 497.62 P
4 10 Q
-0.05 (end) 324.57 497.62 P
1 11 Q
-0.02 ( must match the de\336nition end-) 342.57 497.62 P
(ing, such as) 99.65 483.62 T
4 10 Q
(end class <time-of-day>) 159.11 483.62 T
1 11 Q
(, or) 297.11 483.62 T
4 10 Q
(end class) 315.71 483.62 T
1 11 Q
(. Y) 369.71 483.62 T
(ou do not need to put) 381.54 483.62 T
(any text after the) 99.65 469.62 T
4 10 Q
(end) 184.4 469.62 T
1 11 Q
( \321 however) 202.4 469.62 T
(, such text is useful for long or complex de\336ni-) 260.77 469.62 T
(tions, wher) 99.65 455.62 T
(e it can be dif) 154 455.62 T
(\336cult to see which language constr) 218.58 455.62 T
(uct is ending.) 386.68 455.62 T
3 13 Q
(4.2.2  The type constraint of a slot) 99.65 424.29 T
1 11 Q
(The type constraint of the) 99.65 404.62 T
4 10 Q
(total-seconds) 226.9 404.62 T
1 11 Q
( slot is) 304.9 404.62 T
4 10 Q
(<integer>) 338.47 404.62 T
1 11 Q
(. This slot can hold) 392.47 404.62 T
(instances of) 99.65 390.62 T
4 10 Q
(<integer>) 159.39 390.62 T
1 11 Q
(, and cannot hold any other kind of object.) 213.39 390.62 T
(The type constraint of a slot is optional. Specifying a slot with no explicit) 126.65 376.62 T
-0.1 (type constraint is equivalent to specifying) 99.65 362.62 P
4 10 Q
-0.21 (<object>) 304.74 362.62 P
1 11 Q
-0.1 ( as the type constraint. A slot) 352.74 362.62 P
(whose type constraint is) 99.65 348.62 T
4 10 Q
(<object>) 220.19 348.62 T
1 11 Q
( can hold any object. The ability to have slots) 268.19 348.62 T
(with the type constraint) 99.65 334.62 T
4 10 Q
(<object>) 218.43 334.62 T
1 11 Q
( pr) 266.43 334.62 T
(ovides \337exibility that can be valuable; for) 279.93 334.62 T
(mor) 99.65 320.62 T
(e information, see Chapter 19,) 119.51 320.62 T
0 F
(Performance and Flexibility) 270.52 320.62 T
1 F
(.) 393.78 320.62 T
3 15 Q
(4.3  Use of) 99.65 280.95 T
4 14 Q
(make) 164.6 280.95 T
3 15 Q
( to create an instance) 198.2 280.95 T
1 11 Q
-0.26 (W) 99.65 260.62 P
-0.26 (e want to make an instance of) 109.64 260.62 P
4 10 Q
-0.58 (<time-of-day>) 254.64 260.62 P
1 11 Q
-0.26 (, but \336rst we need a place to stor) 332.64 260.62 P
-0.26 (e) 487.89 260.62 P
-0.02 (it. W) 99.65 246.62 P
-0.02 (e de\336ne a module variable called) 121.9 246.62 P
4 10 Q
-0.04 (*my-time-of-day*) 285.02 246.62 P
1 11 Q
-0.02 (, and initialize it to con-) 381.02 246.62 P
(tain a new instance of) 99.65 232.62 T
4 10 Q
(<time-of-day>) 208.01 232.62 T
1 11 Q
(:) 286.01 232.62 T
6 9 Q
(?) 99.65 211.95 T
4 F
( define variable *my-time-of-day* = make\050<time-of-day>\051;) 105.05 211.95 T
1 11 Q
-0.44 (The) 99.65 191.62 P
4 10 Q
-0.96 (make) 120.37 191.62 P
1 11 Q
-0.44 ( function cr) 144.37 191.62 P
-0.44 (eates an instance of) 198.8 191.62 P
4 10 Q
-0.96 (<time-of-day>) 293.8 191.62 P
1 11 Q
-0.44 (. The ar) 371.8 191.62 P
-0.44 (gument to) 407.23 191.62 P
4 10 Q
-0.96 (make) 459.16 191.62 P
1 11 Q
-0.44 ( is) 483.16 191.62 P
(the class to cr) 99.65 177.62 T
(eate. The) 164.69 177.62 T
4 10 Q
(make) 210.98 177.62 T
1 11 Q
( function r) 234.98 177.62 T
(eturns the new instance.) 285.4 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 55
%%Page: "42" 56
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(42) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The instance stor) 126.65 665.62 T
(ed in) 208.87 665.62 T
4 10 Q
(*my-time-of-day*) 235.97 665.62 T
1 11 Q
( has a) 331.97 665.62 T
4 10 Q
(total-seconds) 362.28 665.62 T
1 11 Q
( slot with) 440.28 665.62 T
(no value. The next logical step is to stor) 99.65 651.62 T
(e a value in that slot.) 291.07 651.62 T
3 15 Q
(4.4  Getter) 99.65 611.95 T
(s and setter) 159.65 611.95 T
(s of slot v) 228.53 611.95 T
(alues) 285.72 611.95 T
1 11 Q
-0.42 (W) 99.65 591.62 P
-0.42 (e can stor) 109.64 591.62 P
-0.42 (e a value in the) 154.75 591.62 P
4 10 Q
-0.92 (total-seconds) 228.85 591.62 P
1 11 Q
-0.42 ( slot of the) 306.85 591.62 P
4 10 Q
-0.92 (<time-of-day>) 358.55 591.62 P
1 11 Q
-0.42 ( instance by) 436.55 591.62 P
(using the assignment operator) 99.65 577.62 T
(,) 246.54 577.62 T
4 10 Q
(:=) 252.04 577.62 T
1 11 Q
(, as follows:) 264.04 577.62 T
6 9 Q
(?) 99.65 556.95 T
4 F
(*my-time-of-day*.total-seconds := 180;) 110.45 556.95 T
6 F
(180) 99.65 545.95 T
1 11 Q
(W) 99.65 525.62 T
(e can examine the value of the slot in the instance:) 109.64 525.62 T
6 9 Q
(?) 99.65 504.95 T
4 F
(*my-time-of-day*.total-seconds;) 110.45 504.95 T
6 F
(180) 99.65 493.95 T
1 11 Q
(Although these expr) 99.65 473.62 T
(essions may look like they ar) 198.95 473.62 T
(e accessing the slots dir) 339.03 473.62 T
(ectly) 452.33 473.62 T
(,) 474.17 473.62 T
(they ar) 99.65 459.62 T
(e not. They ar) 133.42 459.62 T
(e abbr) 199.86 459.62 T
(eviations for function calls to a getter and a setter) 229.69 459.62 T
(. A) 468.02 459.62 T
2 F
-0.05 (getter) 99.65 445.62 P
1 F
-0.05 ( is a method that r) 128.37 445.62 P
-0.05 (etrieves the curr) 216.16 445.62 P
-0.05 (ent value of a slot in an object. A) 294.65 445.62 P
2 F
-0.05 (setter) 454.89 445.62 P
1 F
-0.05 ( is) 482.38 445.62 P
(a method that stor) 99.65 431.62 T
(es a value in a slot. Each slot in a class automatically has a get-) 188.57 431.62 T
-0.23 (ter and a setter de\336ned for it. Y) 99.65 417.62 P
-0.23 (ou can see the function-call syntax, and other infor-) 248.21 417.62 P
(mation about getters and setters, in Chapter 10,) 99.65 403.62 T
0 F
(Slots) 335.07 403.62 T
1 F
(.) 357.07 403.62 T
3 15 Q
(4.5  Initialization of slots when instances are made) 99.65 363.95 T
1 11 Q
(So far) 99.65 343.62 T
(, we have made an instance and set the value of its slot. W) 126.87 343.62 T
(e might like to) 407.75 343.62 T
(combine those two steps and to set the slot\325s value while making the instance \321) 99.65 329.62 T
(in other wor) 99.65 315.62 T
(ds, to) 159.69 315.62 T
2 F
(initialize) 188.91 315.62 T
1 F
( the slot when we make the instance. One way to do) 234.11 315.62 T
(that is to pr) 99.65 301.62 T
(ovide a) 155.19 301.62 T
2 F
(keyword argument) 193.6 301.62 T
1 F
( to) 289.24 301.62 T
4 10 Q
(make) 304.34 301.62 T
1 11 Q
(. \050Dylan of) 328.34 301.62 T
(fers several techniques) 379.45 301.62 T
(for initializing slots; see Chapter 10,) 99.65 287.62 T
0 F
(Slots) 278.96 287.62 T
1 F
(.\051) 300.96 287.62 T
3 13 Q
(4.5.1  K) 99.65 256.29 T
(e) 136.84 256.29 T
(yw) 142.63 256.29 T
(or) 156.65 256.29 T
(d ar) 167.12 256.29 T
(guments in function calls) 186.53 256.29 T
1 11 Q
(W) 99.65 236.62 T
(e would like to be able to call) 109.64 236.62 T
4 10 Q
(make) 253.8 236.62 T
1 11 Q
( as follows:) 277.8 236.62 T
6 9 Q
(?) 99.65 215.95 T
4 F
(make\050<time-of-day>, total-seconds: 120\051;) 110.45 215.95 T
1 11 Q
(W) 99.65 195.62 T
(e will be able to make this call after we have done a bit of homework, as we) 109.64 195.62 T
(shall show in Section 4.5.2. In the pr) 99.65 181.62 T
(eceding call to) 273.71 181.62 T
4 10 Q
(make) 346.2 181.62 T
1 11 Q
(, we pr) 370.2 181.62 T
(ovided a keywor) 403.65 181.62 T
(d) 485.61 181.62 T
(ar) 99.65 167.62 T
(gument, consisting of a keywor) 109.29 167.62 T
(d,) 261.89 167.62 T
4 10 Q
(total-seconds:) 274.11 167.62 T
1 11 Q
(, followed by a value,) 358.11 167.62 T
4 10 Q
(120) 465.12 167.62 T
1 11 Q
(.) 483.12 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 56
%%Page: "43" 57
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.5 Initialization of slots when instances are made) 321.95 702.62 T
2 F
(43) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 99.65 665.62 T
4 10 Q
(<time-of-day>) 120.81 665.62 T
1 11 Q
( instance r) 198.81 665.62 T
(eturned by) 248.37 665.62 T
4 10 Q
(make) 304.29 665.62 T
1 11 Q
( has its) 328.29 665.62 T
4 10 Q
(total-seconds) 364.56 665.62 T
1 11 Q
( slot set to) 442.56 665.62 T
4 10 Q
(120) 99.65 651.62 T
1 11 Q
(.) 117.65 651.62 T
(A) 126.65 637.62 T
2 F
(keyword argument) 137.96 637.62 T
1 F
( consists of a keywor) 233.6 637.62 T
(d followed by the keywor) 334.67 637.62 T
(d\325s) 459.92 637.62 T
(value. A) 99.65 623.62 T
2 F
(keyword) 143.27 623.62 T
1 F
( is a name followed by a colon, such as) 187.89 623.62 T
4 10 Q
(total-seconds:) 378.58 623.62 T
1 11 Q
(. The) 462.58 623.62 T
(colon after a keywor) 99.65 609.62 T
(d is not a convention; it is a r) 199.09 609.62 T
(equir) 338.59 609.62 T
(ed part of the keywor) 364 609.62 T
(d.) 468.79 609.62 T
(Ther) 99.65 595.62 T
(e must be no space between the name and the colon.) 122.21 595.62 T
(Y) 126.65 581.62 T
(ou can de\336ne functions to accept keywor) 132.97 581.62 T
(d ar) 331.81 581.62 T
(guments. When a function) 350.93 581.62 T
(accepts keywor) 99.65 567.62 T
(d ar) 174.62 567.62 T
(guments, you can pr) 193.74 567.62 T
(ovide them in any or) 293.42 567.62 T
(der) 394.58 567.62 T
(. Keywor) 410.1 567.62 T
(d ar) 454.3 567.62 T
(gu-) 473.42 567.62 T
-0.06 (ments can be useful for functions that take many ar) 99.65 553.62 P
-0.06 (guments \321 when you call the) 348.08 553.62 P
(function, you do not need to r) 99.65 539.62 T
(emember the or) 244.55 539.62 T
(der of the ar) 321.12 539.62 T
(guments. Keywor) 380.28 539.62 T
(d) 466.86 539.62 T
(ar) 99.65 525.62 T
(guments ar) 109.29 525.62 T
(e optional ar) 164.07 525.62 T
(guments, so they ar) 225 525.62 T
(e useful for parameters that have a) 320.08 525.62 T
-0.31 (default value that you may want to override at times. For mor) 99.65 511.62 P
-0.31 (e information about) 397.23 511.62 P
(keywor) 99.65 497.62 T
(d ar) 136.48 497.62 T
(guments, see Section 12.2.3, page 172.) 155.59 497.62 T
(How does) 126.65 483.62 T
4 10 Q
(make) 179.14 483.62 T
1 11 Q
( know that the value of the) 203.14 483.62 T
4 10 Q
(total-seconds:) 336.16 483.62 T
1 11 Q
( keywor) 420.16 483.62 T
(d) 459.74 483.62 T
(should be used to initialize the) 99.65 469.62 T
4 10 Q
(total-seconds) 251.52 469.62 T
1 11 Q
( slot? The keywor) 329.52 469.62 T
(d and the slot) 415.36 469.62 T
(happen to have the same name, but that is not how it knows. Befor) 99.65 455.62 T
(e you can use) 423.73 455.62 T
(the) 99.65 441.62 T
4 10 Q
(total-seconds:) 117.65 441.62 T
1 11 Q
( keywor) 201.65 441.62 T
(d ar) 241.23 441.62 T
(gument to) 260.35 441.62 T
4 10 Q
(make) 313.16 441.62 T
1 11 Q
(, you must associate that) 337.16 441.62 T
(keywor) 99.65 427.62 T
(d with the) 136.48 427.62 T
4 10 Q
(total-seconds) 189.07 427.62 T
1 11 Q
( slot in the class de\336nition.) 267.07 427.62 T
3 13 Q
(4.5.2  Init ke) 99.65 396.29 T
(yw) 159.96 396.29 T
(or) 173.98 396.29 T
(ds: K) 184.45 396.29 T
(e) 210.95 396.29 T
(yw) 216.74 396.29 T
(or) 230.77 396.29 T
(ds that initializ) 241.23 396.29 T
(e slots) 315.38 396.29 T
1 11 Q
-0.12 (The) 99.65 376.62 P
4 10 Q
-0.27 (total-seconds:) 120.69 376.62 P
1 11 Q
-0.12 ( keywor) 204.69 376.62 P
-0.12 (d is an) 244.15 376.62 P
2 F
-0.12 (init keyword) 278.52 376.62 P
1 F
-0.12 ( \321 a keywor) 343.47 376.62 P
-0.12 (d that we can give) 404.68 376.62 P
(to) 99.65 362.62 T
4 10 Q
(make) 111.99 362.62 T
1 11 Q
( to pr) 135.99 362.62 T
(ovide an initial value for a slot. T) 161.84 362.62 T
(o make it possible to give an init) 320.97 362.62 T
-0.09 (keywor) 99.65 348.62 P
-0.09 (d to) 136.48 348.62 P
4 10 Q
-0.19 (make) 158.12 348.62 P
1 11 Q
-0.09 (, we need to use the) 182.12 348.62 P
4 10 Q
-0.19 (init-keyword:) 280.38 348.62 P
1 11 Q
-0.09 ( slot option when we de\336ne) 358.38 348.62 P
-0.33 (the class. A) 99.65 334.62 P
2 F
-0.33 (slot option) 156.39 334.62 P
1 F
-0.33 ( lets us specify a characteristic of a slot. Slot options appear) 210.14 334.62 P
(after the optional type speci\336er of a slot.) 99.65 320.62 T
(Her) 126.65 306.62 T
(e, we r) 145.22 306.62 T
(ede\336ne the) 177.32 306.62 T
4 10 Q
(<time-of-day>) 233.67 306.62 T
1 11 Q
( class to use the) 311.67 306.62 T
4 10 Q
(init-keyword:) 389.74 306.62 T
1 11 Q
( slot) 467.74 306.62 T
(option:) 99.65 292.62 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to below 24:00 \050tomorrow\051) 99.65 271.95 T
4 F
(define class <time-of-day> \050<object>\051) 99.65 260.95 T
5 F
(// 1) 473.48 260.95 T
4 F
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 249.95 T
5 F
(// 2) 473.48 249.95 T
4 F
(end class <time-of-day>;) 99.65 238.95 T
5 F
(// 3) 473.48 238.95 T
1 11 Q
(The pr) 99.65 218.62 T
(eceding de\336nition) 131.57 218.62 T
2 F
(rede\336nes) 222.38 218.62 T
1 F
( the class) 268.2 218.62 T
4 10 Q
(<time-of-day>) 314.62 218.62 T
1 11 Q
(. That is, this new) 392.62 218.62 T
(de\336nition of) 99.65 204.62 T
4 10 Q
(<time-of-day>) 162.26 204.62 T
1 11 Q
( r) 240.26 204.62 T
(eplaces the old de\336nition of) 247.16 204.62 T
4 10 Q
(<time-of-day>) 384.6 204.62 T
1 11 Q
(.) 462.6 204.62 T
(In line 2, the) 126.65 190.62 T
4 10 Q
(init-keyword:) 189.34 190.62 T
1 11 Q
( slot option de\336nes) 267.34 190.62 T
4 10 Q
(total-seconds:) 362.59 190.62 T
1 11 Q
( as a) 446.59 190.62 T
(keywor) 99.65 176.62 T
(d parameter that we can give to) 136.48 176.62 T
4 10 Q
(make) 293.28 176.62 T
1 11 Q
( when we make an instance of this) 317.28 176.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 57
%%Page: "44" 58
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(44) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(class. Now that we have de\336ned) 99.65 665.62 T
4 10 Q
(total-seconds:) 260.07 665.62 T
1 11 Q
( as an init keywor) 344.07 665.62 T
(d, we can) 430.36 665.62 T
(pr) 99.65 651.62 T
(ovide the keywor) 110.41 651.62 T
(d ar) 195.4 651.62 T
(gument as follows:) 214.52 651.62 T
6 9 Q
(?) 99.65 630.95 T
4 F
( *my-time-of-day* := make\050<time-of-day>, total-seconds: 120\051;) 105.05 630.95 T
6 F
({instance of <time-of-day>}) 99.65 619.95 T
1 11 Q
(The pr) 99.65 599.62 T
(eceding expr) 131.57 599.62 T
(ession cr) 193.88 599.62 T
(eates a new instance of) 235.87 599.62 T
4 10 Q
(<time-of-day>) 349.83 599.62 T
1 11 Q
(, and stor) 427.83 599.62 T
(es) 473.11 599.62 T
-0.39 (that instance in the variable) 99.65 585.62 P
4 10 Q
-0.86 (*my-time-of-day*) 234.59 585.62 P
1 11 Q
-0.39 (. The value of the) 330.59 585.62 P
4 10 Q
-0.86 (total-seconds) 415.29 585.62 P
1 11 Q
-0.09 (slot of this instance is initialized to) 99.65 571.62 P
4 10 Q
-0.21 (120) 269.56 571.62 P
1 11 Q
-0.09 (. The assignment operator r) 287.56 571.62 P
-0.09 (eturns the new) 420.68 571.62 P
(value stor) 99.65 557.62 T
(ed; in the pr) 147.62 557.62 T
(eceding call, the new value is the newly cr) 206.23 557.62 T
(eated instance of) 410.86 557.62 T
4 10 Q
(<time-of-day>) 99.65 543.62 T
1 11 Q
(, which the listener displays as) 177.65 543.62 T
6 10 Q
({instance of <time-of-day>}) 329 543.62 T
1 11 Q
(.) 491 543.62 T
(W) 126.65 529.62 T
(e can use the getter to verify that the slot has an initial value:) 136.64 529.62 T
6 9 Q
(?) 99.65 508.95 T
4 F
(*my-time-of-day*.total-seconds;) 110.45 508.95 T
6 F
(120) 99.65 497.95 T
1 11 Q
(If you call) 99.65 477.62 T
4 10 Q
(make) 150.81 477.62 T
1 11 Q
( and pr) 174.81 477.62 T
(ovide a keywor) 209.69 477.62 T
(d that has not been declar) 284.93 477.62 T
(ed as a valid) 409.78 477.62 T
(keywor) 99.65 463.62 T
(d for the class, you get an err) 136.48 463.62 T
(or; for example,) 276.77 463.62 T
6 9 Q
(?) 99.65 442.95 T
4 F
( make\050<time-of-day>, seconds: 120\051;) 105.05 442.95 T
6 F
(ERROR: seconds: is not a valid keyword argument to make for {class <time-of-) 99.65 431.95 T
(day>}) 99.65 420.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Automatic storage-management note:) 132.65 380.62 T
1 F
( Dylan pr) 319.95 380.62 T
(ovides automatic) 365.94 380.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(storage management \050also called garbage collection\051. Thus, you) 132.65 366.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(do not need to deallocate memory explicitly) 132.65 352.62 T
(. When an object) 345.15 352.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.56 (becomes inaccessible, Dylan\325s automatic storage management will) 132.65 338.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 324.62 T
(ecycle the storage used by that object. In this section, ther) 136.79 324.62 T
(e ar) 414.5 324.62 T
(e) 432.17 324.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two examples of objects that become inaccessible:) 132.65 310.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 296.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (W) 159.65 296.62 P
-0.09 (e r) 169.64 296.62 P
-0.09 (ede\336ned the) 181.72 296.62 P
4 10 Q
-0.19 (<time-of-day>) 244.61 296.62 P
1 11 Q
-0.09 ( class. The storage used by) 322.61 296.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the old class de\336nition can be r) 159.65 282.62 T
(ecycled.) 309.97 282.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 268.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 159.65 268.62 T
(e stor) 169.64 268.62 T
(ed a new instance in) 196.06 268.62 T
4 10 Q
(*my-time-of-day*) 297.65 268.62 T
1 11 Q
(. The stor-) 393.65 268.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(age used by the instance pr) 159.65 254.62 T
(eviously stor) 291.69 254.62 T
(ed in that variable) 354.15 254.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(can be r) 159.65 240.62 T
(ecycled.) 197.43 240.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Although r) 132.65 226.62 T
(ede\336nition is not part of the Dylan language, most) 186.45 226.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dylan development envir) 132.65 212.62 T
(onments support r) 257.38 212.62 T
(ede\336nition.) 347.52 212.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 393.83 126.65 205.08 2 L
V
0.25 H
0 Z
N
477.65 393.83 477.65 205.08 2 L
V
N
126.52 393.95 477.77 393.95 2 L
V
N
126.52 204.95 477.77 204.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 58
%%Page: "45" 59
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6 Methods for handling time) 396.27 702.62 T
2 F
(45) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(4.6  Methods f) 99.65 533.95 T
(or handling time) 181.44 533.95 T
1 11 Q
-0.36 (W) 99.65 513.62 P
-0.36 (e decided to r) 109.64 513.62 P
-0.36 (epr) 174.6 513.62 P
-0.36 (esent the time of day with a single slot named) 190.62 513.62 P
4 10 Q
-0.79 (total-seconds) 412.51 513.62 P
1 11 Q
-0.36 (.) 490.51 513.62 P
-0.22 (An alternate choice would be to give the class thr) 99.65 499.62 P
-0.22 (ee slots, named) 336.48 499.62 P
4 10 Q
-0.48 (hours) 413.08 499.62 P
1 11 Q
-0.22 (,) 443.08 499.62 P
4 10 Q
-0.48 (minutes) 448.37 499.62 P
1 11 Q
-0.22 (,) 490.37 499.62 P
(and) 99.65 485.62 T
4 10 Q
(seconds) 121.02 485.62 T
1 11 Q
(. People naturally think of time in terms of hours, minutes, and sec-) 163.02 485.62 T
-0.1 (onds. W) 99.65 471.62 P
-0.1 (e chose to stor) 138.82 471.62 P
-0.1 (e the total seconds instead, because we envisioned needing) 207.25 471.62 P
-0.37 (to operate on times, such as adding a time of day to a time of) 99.65 457.62 P
-0.37 (fset. For example, if it) 389.72 457.62 P
-0.11 (is 9:00 now) 99.65 443.62 P
-0.11 (, and a meeting is to be held 2.5 hours fr) 152.62 443.62 P
-0.11 (om now) 345.5 443.62 P
-0.11 (, then the meeting will) 384.43 443.62 P
(be held at 1) 99.65 429.62 T
(1:30. It is easier to operate on a single value, rather than on thr) 154.82 429.62 T
(ee val-) 456.37 429.62 T
(ues of hours, minutes, and seconds. On the other hand, it is convenient to see) 99.65 415.62 T
(times expr) 99.65 401.62 T
(essed as hours, minutes, and seconds. W) 150.53 401.62 T
(e can r) 346.77 401.62 T
(epr) 378.48 401.62 T
(esent the instances) 394.5 401.62 T
(with a single slot, and can pr) 99.65 387.62 T
(ovide methods that let users cr) 239.24 387.62 T
(eate and see) 388.5 387.62 T
4 10 Q
(<time-) 450.2 387.62 T
(of-day>) 99.65 373.62 T
1 11 Q
( instances as being hours, minutes, and seconds.) 141.65 373.62 T
3 13 Q
(4.6.1  Method f) 99.65 342.29 T
(or) 173.5 342.29 T
4 12 Q
(encode-total-seconds) 187.12 342.29 T
1 11 Q
-0.12 (W) 99.65 322.62 P
-0.12 (e can pr) 109.64 322.62 P
-0.12 (ovide a method that converts fr) 147.72 322.62 P
-0.12 (om hours, minutes, and seconds to total) 299.76 322.62 P
(seconds:) 99.65 308.62 T
4 9 Q
(define method encode-total-seconds) 99.65 287.95 T
5 F
(// 1) 473.48 287.95 T
4 F
(\050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 121.25 276.95 T
5 F
(// 2) 473.48 276.95 T
4 F
(=>) 105.05 265.95 T
(\050total-seconds :: <integer>\051) 121.25 265.95 T
5 F
(// 3) 473.48 265.95 T
4 F
(\050\050hours * 60\051 + minutes\051 * 60 + seconds;) 110.45 254.95 T
5 F
(// 4) 473.48 254.95 T
4 F
(end method encode-total-seconds;) 99.65 243.95 T
5 F
(// 5) 473.48 243.95 T
1 11 Q
(Line 2 contains the parameter list of the method) 99.65 223.62 T
4 10 Q
(encode-total-seconds) 334.81 223.62 T
1 11 Q
(. The) 454.81 223.62 T
(method has thr) 99.65 209.62 T
(ee r) 173.55 209.62 T
(equir) 190.98 209.62 T
(ed parameters, named) 216.39 209.62 T
4 10 Q
(hours) 327.79 209.62 T
1 11 Q
(,) 357.79 209.62 T
4 10 Q
(minutes) 363.29 209.62 T
1 11 Q
(, and) 405.29 209.62 T
4 10 Q
(seconds) 432.16 209.62 T
1 11 Q
(,) 474.16 209.62 T
(each of type) 99.65 195.62 T
4 10 Q
(<integer>) 161.2 195.62 T
1 11 Q
(. This method is invoked when) 215.2 195.62 T
4 10 Q
(encode-total-seconds) 368.2 195.62 T
1 11 Q
(is called with thr) 99.65 181.62 T
(ee integer ar) 181.04 181.62 T
(guments.) 240.91 181.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with Java:) 132.65 645.62 T
1 F
( Java r) 247.22 645.62 T
(ecognizes that manual memory) 277.75 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (management can be the sour) 132.65 631.62 P
-0.25 (ce of pr) 270.95 631.62 P
-0.25 (ogram err) 306.52 631.62 P
-0.25 (ors and often can be) 354.46 631.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(exploited to br) 132.65 617.62 T
(each security measur) 203.51 617.62 T
(es. Like Dylan, Java has an) 305.69 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(automatic garbage collector that corr) 132.65 603.62 T
(ectly and ef) 311.02 603.62 T
(\336ciently r) 366.94 603.62 T
(ecovers) 413.15 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unused objects in a pr) 132.65 589.62 T
(ogram \321 fr) 238.9 589.62 T
(eeing the pr) 294.89 589.62 T
(ogrammer of that) 352.66 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mundane but dif) 132.65 575.62 T
(\336cult chor) 214.48 575.62 T
(e.) 263.62 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 568.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 568.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 567.95 477.77 567.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 59
%%Page: "46" 60
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(46) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.13 (Line 3 contains the) 126.65 665.62 P
2 F
-0.13 (value declaration) 220.13 665.62 P
1 F
-0.13 (, which starts with the characters) 306.47 665.62 P
4 10 Q
-0.28 (=>) 468.36 665.62 P
1 11 Q
-0.13 (. It) 480.36 665.62 P
(is a list declaring the values r) 99.65 651.62 T
(eturned by the method. Each element of the list con-) 240.69 651.62 T
(tains a descriptive name of the r) 99.65 637.62 T
(eturn value and the type of the value \050if the type) 254.92 637.62 T
-0.22 (is omitted, it is) 99.65 623.62 P
4 10 Q
-0.47 (<object>) 173.12 623.62 P
1 11 Q
-0.22 (\051. In this case, ther) 221.12 623.62 P
-0.22 (e is one value r) 308.1 623.62 P
-0.22 (eturned, named) 380 623.62 P
4 10 Q
-0.47 (total-) 459.65 623.62 P
(seconds) 99.65 609.62 T
1 11 Q
(, which is of the type) 141.65 609.62 T
4 10 Q
(<integer>) 245.33 609.62 T
1 11 Q
(. The name of a r) 299.33 609.62 T
(eturn value is used) 380.45 609.62 T
(pur) 99.65 595.62 T
(ely for documentation purposes. Although methods ar) 117.04 595.62 T
(e not r) 382.51 595.62 T
(equir) 413.42 595.62 T
(ed to have) 438.83 595.62 T
(value declarations, ther) 99.65 581.62 T
(e ar) 213.4 581.62 T
(e advantages to supplying those declarations. When) 231.07 581.62 T
(you pr) 99.65 567.62 T
(ovide a value declaration for a method, the compiler signals an err) 131.91 567.62 T
(or if the) 454.36 567.62 T
-0.3 (method tries to r) 99.65 553.62 P
-0.3 (eturn a value of the wr) 179.49 553.62 P
-0.3 (ong type, can check r) 288.52 553.62 P
-0.3 (eceivers of the r) 389.65 553.62 P
-0.3 (esults) 465.18 553.62 P
-0.43 (of the method for corr) 99.65 539.62 P
-0.43 (ect type, and can usually pr) 204.93 539.62 P
-0.43 (oduce mor) 336.71 539.62 P
-0.43 (e ef) 388.4 539.62 P
-0.43 (\336cient code. These) 404.72 539.62 P
(advantages ar) 99.65 525.62 T
(e signi\336cant, so we use value declarations thr) 167.52 525.62 T
(oughout the r) 387.31 525.62 T
(est of) 453.6 525.62 T
-0.18 (this book. For mor) 99.65 511.62 P
-0.18 (e information about value declarations, see Section 12.2.4, page) 188.5 511.62 P
(175.) 99.65 497.62 T
(Line 4 is the only expr) 126.65 483.62 T
(ession in the body) 234.04 483.62 T
(. It uses arithmetic functions to con-) 321.06 483.62 T
(vert the hours, minutes, and seconds into total seconds. All methods r) 99.65 469.62 T
(eturn the) 438.72 469.62 T
(value of the expr) 99.65 455.62 T
(ession executed last in the body) 181.35 455.62 T
(. This method r) 334.12 455.62 T
(eturns the r) 407.98 455.62 T
(esult) 463.78 455.62 T
(of the arithmetic expr) 99.65 441.62 T
(ession in line 4.) 204.21 441.62 T
(In line 5, we could have simply used) 126.65 427.62 T
4 10 Q
(end;) 307.15 427.62 T
1 11 Q
(. W) 331.15 427.62 T
(e pr) 346.64 427.62 T
(ovided) 365.41 427.62 T
4 10 Q
(end method) 402.3 427.62 T
(decode-total-seconds;) 99.65 413.62 T
1 11 Q
( for documentation purposes. Thr) 225.65 413.62 T
(oughout the r) 389.42 413.62 T
(est of) 455.7 413.62 T
(this book, we pr) 99.65 399.62 T
(ovide the extra wor) 177.91 399.62 T
(ds after the) 272.54 399.62 T
4 10 Q
(end) 329.79 399.62 T
1 11 Q
( of a de\336nition.) 347.79 399.62 T
(W) 126.65 385.62 T
(e can call) 136.64 385.62 T
4 10 Q
(encode-total-seconds) 183.73 385.62 T
1 11 Q
( with ar) 303.73 385.62 T
(guments r) 341.24 385.62 T
(epr) 390.52 385.62 T
(esenting 8 hours,) 406.54 385.62 T
(30 minutes, and 59 seconds:) 99.65 371.62 T
6 9 Q
(?) 99.65 350.95 T
4 F
(encode-total-seconds\0508, 30, 59\051;) 110.45 350.95 T
6 F
(30659) 99.65 339.95 T
1 11 Q
(W) 99.65 319.62 T
(e \336nd it convenient to call) 109.64 319.62 T
4 10 Q
(encode-total-seconds) 237.98 319.62 T
1 11 Q
( to initialize the) 357.98 319.62 T
4 10 Q
(total-) 436.1 319.62 T
(seconds) 99.65 305.62 T
1 11 Q
( slot when we cr) 141.65 305.62 T
(eate an instance of) 220.83 305.62 T
4 10 Q
(<time-of-day>) 312.93 305.62 T
1 11 Q
(, or when we stor) 390.93 305.62 T
(e) 475.12 305.62 T
(a new value in that slot. Her) 99.65 291.62 T
(e, for example, we cr) 236.76 291.62 T
(eate a new instance:) 337.26 291.62 T
6 9 Q
(?) 99.65 270.95 T
4 F
( define variable *your-time-of-day*) 105.05 270.95 T
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 121.25 259.95 T
1 11 Q
(W) 99.65 239.62 T
(e examine the value of the) 109.64 239.62 T
4 10 Q
(total-seconds) 239.44 239.62 T
1 11 Q
( slot:) 317.44 239.62 T
6 9 Q
(?) 99.65 218.95 T
4 F
(*your-time-of-day*.total-seconds;) 110.45 218.95 T
6 F
(30659) 99.65 207.95 T
1 11 Q
(The r) 99.65 187.62 T
(esult r) 124.96 187.62 T
(eminds us that it would be useful to convert in the other dir) 155.21 187.62 T
(ection as) 445.32 187.62 T
(well \321 fr) 99.65 173.62 T
(om total seconds to hours, minutes, and seconds.) 144.8 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 60
%%Page: "47" 61
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6 Methods for handling time) 396.27 702.62 T
2 F
(47) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(4.6.2  Method f) 99.65 664.29 T
(or) 173.5 664.29 T
4 12 Q
(decode-total-seconds) 187.12 664.29 T
1 11 Q
(W) 99.65 644.62 T
(e de\336ne) 109.64 644.62 T
4 10 Q
(decode-total-seconds) 150.72 644.62 T
1 11 Q
( to convert in the other dir) 270.72 644.62 T
(ection \321 fr) 398.06 644.62 T
(om total) 451.71 644.62 T
(seconds to hours, minutes, and seconds:) 99.65 630.62 T
4 9 Q
(define method decode-total-seconds) 99.65 609.95 T
5 F
(// 1) 473.48 609.95 T
4 F
(\050total-seconds :: <integer>\051) 121.25 598.95 T
5 F
(// 2) 473.48 598.95 T
4 F
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 105.05 587.95 T
5 F
(// 3) 473.48 587.95 T
4 F
(let\050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 110.45 576.95 T
5 F
(// 4) 473.48 576.95 T
4 F
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 565.95 T
5 F
(// 5) 473.48 565.95 T
4 F
(values\050hours, minutes, seconds\051;) 110.45 554.95 T
5 F
(// 6) 473.48 554.95 T
4 F
(end method decode-total-seconds;) 99.65 543.95 T
5 F
(// 7) 473.48 543.95 T
1 11 Q
(W) 99.65 523.62 T
(e can use) 109.64 523.62 T
4 10 Q
(decode-total-seconds) 156.51 523.62 T
1 11 Q
( to see the value of the) 276.51 523.62 T
4 10 Q
(total-seconds) 387.55 523.62 T
1 11 Q
( slot:) 465.55 523.62 T
6 9 Q
(?) 99.65 502.95 T
4 F
(decode-total-seconds\050*your-time-of-day*.total-seconds\051;) 110.45 502.95 T
6 F
(8) 99.65 491.95 T
(30) 99.65 480.95 T
(59) 99.65 469.95 T
1 11 Q
(The value declaration on line 3 speci\336es that) 99.65 449.62 T
4 10 Q
(decode-total-seconds) 317.77 449.62 T
1 11 Q
( r) 437.77 449.62 T
(eturns) 444.66 449.62 T
(thr) 99.65 435.62 T
(ee separate values: the hours, minutes, and seconds. This method illustrates) 113.78 435.62 T
-0.22 (how to r) 99.65 421.62 P
-0.22 (eturn multiple values, and how to use) 140.03 421.62 P
4 10 Q
-0.47 (let) 326 421.62 P
1 11 Q
-0.22 ( to initialize multiple local vari-) 344 421.62 P
(ables. W) 99.65 407.62 T
(e describe these techniques in Sections 4.6.3 and 4.6.4.) 139.85 407.62 T
3 13 Q
(4.6.3  Multiple return v) 99.65 376.29 T
(alues) 212.02 376.29 T
1 11 Q
(The method for) 99.65 356.62 T
4 10 Q
(decode-total-seconds) 178.02 356.62 T
1 11 Q
( r) 298.02 356.62 T
(eturns thr) 304.92 356.62 T
(ee values: the hours, the min-) 352.7 356.62 T
(utes, and the seconds. T) 99.65 342.62 T
(o r) 214.52 342.62 T
(eturn the thr) 227.42 342.62 T
(ee values, the method uses the) 288.55 342.62 T
4 10 Q
(values) 439.26 342.62 T
1 11 Q
(function as the expr) 99.65 328.62 T
(ession executed last in the body) 195.8 328.62 T
(. The) 348.58 328.62 T
4 10 Q
(values) 375.24 328.62 T
1 11 Q
( function simply) 411.24 328.62 T
(r) 99.65 314.62 T
(eturns all its ar) 103.79 314.62 T
(guments as separate values. The ability to r) 175.94 314.62 T
(eturn multiple values) 385.76 314.62 T
(allows a natural symmetry between) 99.65 300.62 T
4 10 Q
(encode-total-seconds) 276.39 300.62 T
1 11 Q
( and) 396.39 300.62 T
4 10 Q
(decode-) 420.51 300.62 T
(total-seconds) 99.65 286.62 T
1 11 Q
(, as shown in T) 177.65 286.62 T
(able 4.1.) 249.54 286.62 T
1 2 Q
(:) 126.65 278.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(Method) 144 250.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(P) 265.95 250.62 T
(ar) 272.84 250.62 T
(ameter\050s\051) 282.51 250.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Retur) 404.47 250.62 T
(n v) 431.64 250.62 T
(alue\050s\051) 446.04 250.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(encode-total-seconds) 105.26 225.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 231.43 225.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 376.09 225.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds) 105.26 202.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 231.43 202.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 376.09 202.62 T
0 0 0 1 0 0 0 K
99.26 164.96 514.03 172.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 123.88 176.29 T
(ab) 129.19 176.29 T
(le 4.1) 140.76 176.29 T
8 F
(Symmetr) 171.34 176.29 T
(y of) 211.64 176.29 T
4 9 Q
(encode-total-seconds) 230.54 176.29 T
8 10 Q
( and) 338.54 176.29 T
4 9 Q
(decode-total-seconds) 360.78 176.29 T
8 10 Q
(.) 468.63 176.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.26 265.83 99.26 193.08 2 L
V
0.25 H
0 Z
N
514.03 265.83 514.03 193.08 2 L
V
N
99.14 265.95 514.16 265.95 2 L
V
N
99.14 238.95 514.16 238.95 2 L
V
N
99.14 192.95 514.16 192.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 61
%%Page: "48" 62
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(48) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Lines 4 and 5 of the) 99.65 665.62 T
4 10 Q
(decode-total-seconds) 196.95 665.62 T
1 11 Q
( method contain calls to) 316.95 665.62 T
4 10 Q
(truncate/) 435.42 665.62 T
1 11 Q
(.) 489.42 665.62 T
(The) 99.65 651.62 T
4 10 Q
(truncate/) 120.81 651.62 T
1 11 Q
( function is a built-in Dylan function. It takes two ar) 174.81 651.62 T
(guments,) 426.52 651.62 T
-0.32 (divides the \336rst by the second, and r) 99.65 637.62 P
-0.32 (eturns two values: the r) 274.07 637.62 P
-0.32 (esult of the tr) 387.09 637.62 P
-0.32 (uncating) 450.49 637.62 P
(division, and the r) 99.65 623.62 T
(emainder) 188.29 623.62 T
(.) 233.89 623.62 T
3 13 Q
(4.6.4  Use of) 99.65 429.29 T
4 12 Q
(let) 164.83 429.29 T
3 13 Q
( to dec) 186.43 429.29 T
(lare local v) 220.59 429.29 T
(ariab) 275.52 429.29 T
(les) 300.91 429.29 T
1 11 Q
(When a function r) 99.65 409.62 T
(eturns multiple values, you can use) 187.4 409.62 T
4 10 Q
(let) 362.55 409.62 T
1 11 Q
( to stor) 380.55 409.62 T
(e each r) 414.04 409.62 T
(eturned) 451.01 409.62 T
-0.12 (value in a local variable, as shown in lines 2 and 3 of the) 99.65 395.62 P
4 10 Q
-0.25 (decode-total-seconds) 373.01 395.62 P
1 11 Q
(method in Section 4.6.2. On line 2, we use) 99.65 381.62 T
4 10 Q
(let) 303.95 381.62 T
1 11 Q
( to declar) 321.95 381.62 T
(e two local variables,) 366.77 381.62 T
(named) 99.65 367.62 T
4 10 Q
(total-minutes) 136 367.62 T
1 11 Q
( and) 214 367.62 T
4 10 Q
(seconds) 238.13 367.62 T
1 11 Q
(, and to initialize their values to the two val-) 280.13 367.62 T
(ues r) 99.65 353.62 T
(eturned by the) 123.11 353.62 T
4 10 Q
(truncate/) 197.04 353.62 T
1 11 Q
( function. Similarly) 251.04 353.62 T
(, on line 3, we use) 343.1 353.62 T
4 10 Q
(let) 432.09 353.62 T
1 11 Q
( to) 450.09 353.62 T
(declar) 99.65 339.62 T
(e the local variables) 129.37 339.62 T
4 10 Q
(hours) 227.67 339.62 T
1 11 Q
( and) 257.67 339.62 T
4 10 Q
(minutes) 281.79 339.62 T
1 11 Q
(.) 323.79 339.62 T
-0.09 (The local variables declar) 126.65 325.62 P
-0.09 (ed by) 249.54 325.62 P
4 10 Q
-0.19 (let) 279.06 325.62 P
1 11 Q
-0.09 ( can be used within the method until the) 297.06 325.62 P
(method\325s) 99.65 311.62 T
4 10 Q
(end) 147.82 311.62 T
1 11 Q
(. Although ther) 165.82 311.62 T
(e is no) 240.38 311.62 T
4 10 Q
(begin) 274.17 311.62 T
1 11 Q
( to de\336ne explicitly the beginning of a) 304.17 311.62 T
(body for local variables,) 99.65 297.62 T
4 10 Q
(define method) 219.11 297.62 T
1 11 Q
( begins a body) 297.11 297.62 T
(, and its) 366.3 297.62 T
4 10 Q
(end) 407.37 297.62 T
1 11 Q
( \336nishes that) 425.37 297.62 T
-0.4 (body) 99.65 283.62 P
-0.4 (. Local variables ar) 123.35 283.62 P
-0.4 (e scoped within the smallest body that surr) 213.09 283.62 P
-0.4 (ounds them, so) 419.78 283.62 P
(you can use) 99.65 269.62 T
4 10 Q
(begin) 160.01 269.62 T
1 11 Q
( and) 190.01 269.62 T
4 10 Q
(end) 214.13 269.62 T
1 11 Q
( within a method to de\336ne a smaller body for local) 232.13 269.62 T
(variables, although doing so is usually not necessary) 99.65 255.62 T
(.) 354.29 255.62 T
3 13 Q
(4.6.5  Second method f) 99.65 224.29 T
(or) 215.57 224.29 T
4 12 Q
(decode-total-seconds) 229.19 224.29 T
1 11 Q
(The) 99.65 204.62 T
4 10 Q
(decode-total-seconds) 120.81 204.62 T
1 11 Q
( method is called as follows:) 240.81 204.62 T
6 9 Q
(?) 99.65 183.95 T
4 F
(decode-total-seconds\050*your-time-of-day*.total-seconds\051;) 110.45 183.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Comparison with C:) 132.65 589.62 T
1 F
( In C, / on integers pr) 233.77 589.62 T
(oduces a tr) 339.61 589.62 T
(uncated r) 392.63 589.62 T
(esult.) 438.52 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In Dylan, / on integers is implementation de\336ned, and is not r) 132.65 575.62 T
(ecom-) 435.36 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(mended for portable code. The Dylan functions named) 132.65 561.62 T
4 10 Q
(floor) 402.18 561.62 T
1 11 Q
(,) 431.37 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(ceiling) 132.65 547.62 T
1 11 Q
(,) 174.65 547.62 T
4 10 Q
(round) 180.15 547.62 T
1 11 Q
(, and) 210.15 547.62 T
4 10 Q
(truncate) 237.02 547.62 T
1 11 Q
( convert a rational or \337oating-point) 285.02 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 533.62 T
(esult to an integer with the appr) 136.79 533.62 T
(opriate r) 292.82 533.62 T
(ounding. The Dylan func-) 334.23 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tions named) 132.65 519.62 T
4 10 Q
(floor/) 195.61 519.62 T
1 11 Q
(,) 231.61 519.62 T
4 10 Q
(ceiling/) 237.11 519.62 T
1 11 Q
(,) 285.11 519.62 T
4 10 Q
(round/) 290.61 519.62 T
1 11 Q
(, and) 326.61 519.62 T
4 10 Q
(truncate/) 353.48 519.62 T
1 11 Q
( take two) 407.48 519.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 505.62 T
(guments. Those generic functions divide the \336rst ar) 142.29 505.62 T
(gument by the) 392.17 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second ar) 132.65 491.62 T
(gument, and r) 178.99 491.62 T
(eturn two values: the r) 247.73 491.62 T
(ounded or tr) 357.37 491.62 T
(uncated) 418.81 491.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 477.62 T
(esult, and the r) 136.79 477.62 T
(emainder) 209.18 477.62 T
(.) 254.78 477.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 602.83 126.65 470.08 2 L
V
0.25 H
0 Z
N
477.65 602.83 477.65 470.08 2 L
V
N
126.52 602.95 477.77 602.95 2 L
V
N
126.52 469.95 477.77 469.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 62
%%Page: "49" 63
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.6 Methods for handling time) 396.27 702.62 T
2 F
(49) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(If we envision calling) 99.65 665.62 T
4 10 Q
(decode-total-seconds) 206.33 665.62 T
1 11 Q
( fr) 326.33 665.62 T
(equently to see the hours, min-) 336.89 665.62 T
-0.19 (utes, and seconds stor) 99.65 651.62 P
-0.19 (ed in a) 205.86 651.62 P
4 10 Q
-0.42 (<time-of-day>) 240.62 651.62 P
1 11 Q
-0.19 ( instance, we can make it possible to) 318.62 651.62 P
(decode) 99.65 637.62 T
4 10 Q
(<time-of-day>) 137.27 637.62 T
1 11 Q
( instances, as well as integers. For example, we can make) 215.27 637.62 T
(it possible to make this call:) 99.65 623.62 T
6 9 Q
(?) 99.65 602.95 T
4 F
(decode-total-seconds\050*your-time-of-day*\051;) 110.45 602.95 T
1 11 Q
(W) 99.65 576.62 T
(e can implement this behavior easily) 109.64 576.62 T
(, by de\336ning another method for) 286.01 576.62 T
4 10 Q
(decode-) 447.45 576.62 T
(total-seconds) 99.65 562.62 T
1 11 Q
(, which takes a) 177.65 562.62 T
4 10 Q
(<time-of-day>) 252.1 562.62 T
1 11 Q
( instance as its ar) 330.1 562.62 T
(gument:) 412.27 562.62 T
4 9 Q
(define method decode-total-seconds) 99.65 541.95 T
(\050time :: <time-of-day>\051) 121.25 530.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 105.05 519.95 T
(decode-total-seconds\050time.total-seconds\051;) 110.45 508.95 T
(end method decode-total-seconds;\051) 99.65 497.95 T
1 11 Q
(Figur) 99.65 471.62 T
(e 4.1 shows the two methods for the) 125.86 471.62 T
4 10 Q
(decode-total-seconds) 303.45 471.62 T
1 11 Q
( generic) 423.45 471.62 T
(function.) 99.65 457.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 170.1 495.65 178.1 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 4.1) 117.48 181.43 T
8 F
(The) 170.28 181.43 T
4 F
(decode-total-seconds) 190.29 181.43 T
8 F
( gener) 310.29 181.43 T
(ic function and its methods) 338.79 181.43 T
(.) 457.03 181.43 T
0 0 0 1 0 0 0 K
99.65 194.1 495.65 436.95 C
99.65 198.1 495.65 434.95 C
0 15 14 412 236 397 222 99.15 206.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f4-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f4-1.eps)%%CreationDate: (6/5/96) (1:04 PM)%%BoundingBox: 15 14 412 236%%HiResBoundingBox: 16.1749 14.2584 410.9916 236.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -10.6667 342.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-Oblique%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D410.6666 14.5834 m410.6666 236 L16.4999 236 L16.4999 14.5834 L410.6666 14.5834 Lb1 g1 w314.8333 208.3334 m315.0833 225.3334 L112.4166 225.3334 L112.1666 208.3334 L314.8333 208.3334 Lf0 R0 G0.65 w400.6666 107.6667 m400.6666 196.3334 L26.2499 196.3334 L26.2499 107.6667 L400.6666 107.6667 Lb399.3333 31.3334 m399.3333 97.0834 L26.2499 97.0834 L26.2499 31.3334 L399.3333 31.3334 Lb0 To1 0 0 1 213.9999 213.8334 0 TpTP-96.101 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(decode-total-seconds) Tx (\r) TX TO0 To1 0 0 1 31.2499 184.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf0 Ta10 0 Tl(// Method on <integer>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(total-seconds :: <integer>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  let\(total-minutes, seconds\) = truncate/\(total-seconds, 60\);\r) Tx T*(  let\(hours, minutes\) = truncate/\(total-minutes, 60\);\r) Tx T*(  values\(hours, minutes, seconds\);\r) Tx T*(end method decode-total-seconds;\r) Tx T*(\r) Tx TO0 To1 0 0 1 30.4999 86.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf(// Method on <time-of-day>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(time :: <time-of-day>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  decode-total-seconds\(time.total-seconds\);\r) Tx T*(end method decode-total-seconds;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 194.1 495.65 436.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 63
%%Page: "50" 64
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(50) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Looking at Figur) 99.65 665.62 T
(e 4.1, we analyze what happens in this call:) 181.01 665.62 T
6 9 Q
(?) 99.65 644.95 T
4 F
(decode-total-seconds\050*your-time-of-day*\051;) 110.45 644.95 T
2 11 Q
(1.) 108.65 624.62 T
1 F
(The ar) 126.65 624.62 T
(gument is an instance of) 157.46 624.62 T
4 10 Q
(<time-of-day>) 278.27 624.62 T
1 11 Q
(, so the method on) 356.27 624.62 T
4 10 Q
(<time-) 448.8 624.62 T
(of-day>) 126.65 610.62 T
1 11 Q
( is called.) 168.65 610.62 T
2 F
(2.) 108.65 590.62 T
1 F
(The body of the method on) 126.65 590.62 T
4 10 Q
(<time-of-day>) 261.52 590.62 T
1 11 Q
( calls) 339.52 590.62 T
4 10 Q
(decode-total-seconds) 366.47 590.62 T
1 11 Q
(on an instance of) 126.65 576.62 T
4 10 Q
(<integer>) 211.54 576.62 T
1 11 Q
(, the value of the) 265.54 576.62 T
4 10 Q
(total-seconds) 349.04 576.62 T
1 11 Q
( slot of the) 427.04 576.62 T
4 10 Q
(<time-of-day>) 126.65 562.62 T
1 11 Q
( instance. In this call, the ar) 204.65 562.62 T
(gument is an integer) 336.21 562.62 T
(, so the) 435.32 562.62 T
(method on) 126.65 548.62 T
4 10 Q
(<integer>) 182.25 548.62 T
1 11 Q
( is called.) 236.25 548.62 T
2 F
(3.) 108.65 528.62 T
1 F
(The method on) 126.65 528.62 T
4 10 Q
(<integer>) 203.42 528.62 T
1 11 Q
( r) 257.42 528.62 T
(eturns thr) 264.31 528.62 T
(ee values to its caller \321 the method) 312.1 528.62 T
(on) 126.65 514.62 T
4 10 Q
(<time-of-day>) 141.81 514.62 T
1 11 Q
(. The method on) 219.81 514.62 T
4 10 Q
(<time-of-day>) 302.08 514.62 T
1 11 Q
( r) 380.08 514.62 T
(eturns those thr) 386.97 514.62 T
(ee val-) 463.43 514.62 T
(ues.) 126.65 500.62 T
-0.13 (The purpose of the method on) 99.65 480.62 P
4 10 Q
-0.28 (<time-of-day>) 248.96 480.62 P
1 11 Q
-0.13 ( is simply to allow a dif) 326.96 480.62 P
-0.13 (fer) 439.63 480.62 P
-0.13 (ent kind) 452.71 480.62 P
-0.28 (of ar) 99.65 466.62 P
-0.28 (gument to be used. The method extracts the integer fr) 121.44 466.62 P
-0.28 (om the) 379.26 466.62 P
4 10 Q
-0.61 (<time-of-day>) 415.18 466.62 P
1 11 Q
(instance, and calls) 99.65 452.62 T
4 10 Q
(decode-total-seconds) 190.63 452.62 T
1 11 Q
( with that integer) 310.63 452.62 T
(.) 393.69 452.62 T
3 13 Q
(4.6.6  Method f) 99.65 421.29 T
(or) 173.5 421.29 T
4 12 Q
(say-time-of-day) 187.12 421.29 T
1 11 Q
-0.41 (W) 99.65 401.62 P
-0.41 (e can pr) 109.64 401.62 P
-0.41 (ovide a way to ask an instance of) 147.13 401.62 P
4 10 Q
-0.89 (<time-of-day>) 306.93 401.62 P
1 11 Q
-0.41 ( to describe the time in) 384.93 401.62 P
(a conventional format, such as 8:30. For the application that we ar) 99.65 387.62 T
(e planning,) 418.37 387.62 T
-0.22 (ther) 99.65 373.62 P
-0.22 (e is no need to view the seconds. W) 119.05 373.62 P
-0.22 (e want the method to print the description) 288.6 373.62 P
(in a window on the scr) 99.65 359.62 T
(een. W) 210.54 359.62 T
(e de\336ne a method named) 242.97 359.62 T
4 10 Q
(say-time-of-day) 369.1 359.62 T
1 11 Q
(:) 459.1 359.62 T
4 9 Q
(define method say-time-of-day \050time :: <time-of-day>\051 => \050\051) 99.65 338.95 T
5 F
(// 1) 473.48 338.95 T
4 F
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 327.95 T
5 F
(// 2) 473.48 327.95 T
4 F
(format-out) 110.45 316.95 T
5 F
(// 3) 473.48 316.95 T
4 F
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 121.25 305.95 T
5 F
(// 4) 473.48 305.95 T
4 F
(end method say-time-of-day;) 99.65 294.95 T
5 F
(// 5) 473.48 294.95 T
1 11 Q
-0.01 (On line 1, we pr) 99.65 274.62 P
-0.01 (ovide an empty value declaration, which means that this method) 177.19 274.62 P
(r) 99.65 260.62 T
(eturns no values.) 103.79 260.62 T
(On line 2, we use) 126.65 246.62 T
4 10 Q
(let) 212.78 246.62 T
1 11 Q
( to initialize two local variables to the \336rst and second) 230.78 246.62 T
(values r) 99.65 232.62 T
(eturned by) 138.03 232.62 T
4 10 Q
(decode-total-seconds) 193.95 232.62 T
1 11 Q
(. Remember that) 313.95 232.62 T
4 10 Q
(decode-total-) 397.03 232.62 T
(seconds) 99.65 218.62 T
1 11 Q
( r) 141.65 218.62 T
(eturns thr) 148.54 218.62 T
(ee values \050the thir) 196.33 218.62 T
(d value is the seconds\051. For the application) 282.86 218.62 T
(that we ar) 99.65 204.62 T
(e planning, the) 148.31 204.62 T
4 10 Q
(say-time-of-day) 223.67 204.62 T
1 11 Q
( method does not need to show the) 313.67 204.62 T
(seconds, so we do not use the thir) 99.65 190.62 T
(d value. It is not necessary to r) 263.25 190.62 T
(eceive the thir) 410.79 190.62 T
(d) 478.99 190.62 T
(value of) 99.65 176.62 T
4 10 Q
(decode-total-seconds) 141.63 176.62 T
1 11 Q
(; her) 261.64 176.62 T
(e we do not pr) 282.95 176.62 T
(ovide a local variable to) 353.14 176.62 T
(r) 99.65 162.62 T
(eceive the thir) 103.79 162.62 T
(d value, so that value is simply ignor) 171.99 162.62 T
(ed.) 351.34 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 64
%%Page: "51" 65
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4.7 Summary) 460.39 702.62 T
2 F
(51) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(On line 4, we use) 126.65 665.62 T
4 10 Q
(if) 212.78 665.62 T
1 11 Q
( to print a leading 0 for the minutes when ther) 224.78 665.62 T
(e ar) 448.82 665.62 T
(e) 466.48 665.62 T
(fewer than 10 minutes, such as) 99.65 651.62 T
4 10 Q
(2:05) 251.72 651.62 T
1 11 Q
(.) 275.72 651.62 T
(W) 99.65 474.62 T
(e can call) 109.64 474.62 T
4 10 Q
(say-time-of-day) 156.73 474.62 T
1 11 Q
(:) 246.73 474.62 T
6 9 Q
(?) 99.65 453.95 T
4 F
(say-time-of-day\050*your-time-of-day*\051;) 110.45 453.95 T
6 F
(8:30) 99.65 442.95 T
(?) 99.65 423.95 T
4 F
(say-time-of-day\050*my-time-of-day*\051;) 110.45 423.95 T
6 F
(0:02) 99.65 412.95 T
1 11 Q
-0.2 (The listener displays the output \050printed by) 99.65 392.62 P
4 10 Q
-0.43 (format-out) 312.85 392.62 P
1 11 Q
-0.2 (\051, but displays no values,) 372.85 392.62 P
(because) 99.65 378.62 T
4 10 Q
(say-time-of-day) 140.7 378.62 T
1 11 Q
( does not r) 230.7 378.62 T
(eturn any values.) 281.75 378.62 T
3 15 Q
(4.7  Sum) 99.65 338.95 T
(mar) 150.24 338.95 T
(y) 172.92 338.95 T
1 11 Q
(In this chapter) 99.65 318.62 T
(, we cover) 168.89 318.62 T
(ed the following:) 218.11 318.62 T
(\245) 108.65 298.62 T
(W) 126.65 298.62 T
(e de\336ned a class \050with) 136.64 298.62 T
4 10 Q
(define class) 247.13 298.62 T
1 11 Q
(\051.) 319.13 298.62 T
(\245) 108.65 278.62 T
(W) 126.65 278.62 T
(e cr) 136.64 278.62 T
(eated an instance \050with) 153.69 278.62 T
4 10 Q
(make) 268.87 278.62 T
1 11 Q
(\051.) 292.87 278.62 T
(\245) 108.65 258.62 T
(W) 126.65 258.62 T
(e r) 136.64 258.62 T
(ead the value of a slot by calling a getter) 148.8 258.62 T
(.) 343.3 258.62 T
(\245) 108.65 238.62 T
(W) 126.65 238.62 T
(e set the value of a slot by using) 136.64 238.62 T
4 10 Q
(:=) 294.09 238.62 T
1 11 Q
(, the assignment operator) 306.09 238.62 T
(.) 428.72 238.62 T
(\245) 108.65 218.62 T
(W) 126.65 218.62 T
(e de\336ned a method that r) 136.64 218.62 T
(eturns multiple values \050with) 259.11 218.62 T
4 10 Q
(values) 399.93 218.62 T
1 11 Q
(\051, and) 435.93 218.62 T
(showed how to initialize multiple local variables \050with) 126.65 204.62 T
4 10 Q
(let) 394.53 204.62 T
1 11 Q
(\051.) 412.53 204.62 T
(\245) 108.65 184.62 T
(W) 126.65 184.62 T
(e showed the syntax of some commonly used elements of Dylan; see) 136.64 184.62 T
(T) 126.65 170.62 T
(able 4.2.) 132.38 170.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison to C:) 132.65 617.62 T
1 F
( In C,) 220.34 617.62 T
4 10 Q
(if) 249.25 617.62 T
1 11 Q
( does not r) 261.25 617.62 T
(eturn a value. In Dylan,) 312.3 617.62 T
4 10 Q
(if) 429.94 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(r) 132.65 603.62 T
(eturns the value of the body that is selected, if any is.) 136.79 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.15 (Note on) 132.65 570.62 P
4 10 Q
-0.32 (format-out) 175.13 570.62 P
2 11 Q
-0.15 (:) 235.13 570.62 P
1 F
-0.15 ( W) 237.88 570.62 P
-0.15 (e have purposely used a limited subset of) 250.47 570.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the) 132.65 556.62 T
4 10 Q
(format-out) 150.65 556.62 T
1 11 Q
( function\325s featur) 210.65 556.62 T
(es to allow our examples to r) 293.45 556.62 T
(un) 433.3 556.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(on as many Dylan implementations as possible. The printing of) 132.65 542.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(times could be done much mor) 132.65 528.62 T
(e elegantly if we used the full) 283.52 528.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(power of the) 132.65 514.62 T
4 10 Q
(format-out) 197.23 514.62 T
1 11 Q
( function.) 257.23 514.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 630.83 126.65 596.08 2 L
V
0.25 H
0 Z
N
477.65 630.83 477.65 596.08 2 L
V
N
126.52 630.95 477.77 630.95 2 L
V
N
126.52 595.95 477.77 595.95 2 L
V
N
126.65 583.83 126.65 507.08 2 L
V
N
477.65 583.83 477.65 507.08 2 L
V
N
126.52 583.95 477.77 583.95 2 L
V
N
126.52 506.95 477.77 506.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 65
%%Page: "52" 66
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(52) 63.65 702.62 T
0 F
(Chapter 4) 82.65 702.62 T
(User-Defined Classes and Methods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
0 X
(Dylan element) 163.1 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Syntax e) 342.3 643.62 T
(xample) 384.77 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(calling a getter) 129.63 618.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(*my-time-of-day*.total-seconds;) 278.87 619.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(calling a setter) 129.63 595.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
-0.21 (*my-time-of-day*.total-seconds := 180;) 278.87 596.95 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(keywor) 129.63 572.62 T
(d) 166.46 572.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(total-seconds:) 278.87 573.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(single-line comment) 129.63 549.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(// Text of comment) 278.87 550.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(multiline comment) 129.63 526.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(/* Text of comment that spans more) 278.87 527.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(than one line */) 278.87 516.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(value declaration) 129.63 494.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(=> \050total-seconds :: <integer>\051) 278.87 495.95 T
0 0 0 1 0 0 0 K
99.65 456.96 513.65 464.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 215.91 468.29 T
(ab) 221.22 468.29 T
(le 4.2) 232.79 468.29 T
8 F
(Syntax of Dylan elements) 263.37 468.29 T
(.) 376.6 468.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
123.64 658.83 123.64 485.08 2 L
V
0.25 H
0 Z
N
489.66 658.83 489.66 485.08 2 L
V
N
123.51 658.95 489.79 658.95 2 L
V
N
123.51 631.95 489.79 631.95 2 L
V
N
123.51 484.95 489.79 484.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 66
%%Page: "53" 67
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(53) 292.9 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(5) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(5) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Class Inheritance) 100.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we continue to develop the time library by de\336ning another kind) 168.89 449.62 T
(of time to r) 99.65 435.62 T
(epr) 153.07 435.62 T
(esent time of) 169.1 435.62 T
(fsets, such as 2 hours ago, and 30 minutes fr) 231.03 435.62 T
(om now) 443.95 435.62 T
(.) 482.99 435.62 T
(W) 99.65 421.62 T
(e \336nd an opportunity to use inheritance to good advantage, so we r) 109.64 421.62 T
(ede\336ne) 436.57 421.62 T
-0.36 (some classes and a method to take advantage of inheritance. W) 99.65 407.62 P
-0.36 (e also show how to) 401.63 407.62 P
(de\336ne a generic function explicitly) 99.65 393.62 T
(.) 266.45 393.62 T
3 15 Q
(5.1  The) 99.65 353.95 T
4 14 Q
(<time-offset>) 148.88 353.95 T
3 15 Q
( c) 258.08 353.95 T
(lass and methods) 268.11 353.95 T
1 11 Q
(In this section, we de\336ne a class to r) 99.65 333.62 T
(epr) 273.28 333.62 T
(esent time of) 289.31 333.62 T
(fsets, and a method that) 351.24 333.62 T
(describes a time of) 99.65 319.62 T
(fset. W) 189.74 319.62 T
(e start by de\336ning the) 222.41 319.62 T
4 10 Q
(<time-offset>) 331.33 319.62 T
1 11 Q
( class:) 409.33 319.62 T
5 9 Q
(// A relative time between -24:00 and +24:00) 99.65 298.95 T
4 F
(define class <time-offset> \050<object>\051) 99.65 287.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 276.95 T
(end class <time-offset>;) 99.65 265.95 T
3 13 Q
(5.1.1  Reasons f) 99.65 236.29 T
(or de\336ning tw) 180.04 236.29 T
(o similar c) 249.73 236.29 T
(lasses) 302.28 236.29 T
1 11 Q
-0.29 (The) 99.65 216.62 P
4 10 Q
-0.63 (<time-offset>) 120.52 216.62 P
1 11 Q
-0.29 ( class is similar to the) 198.52 216.62 P
4 10 Q
-0.63 (<time-of-day>) 302.75 216.62 P
1 11 Q
-0.29 ( class. They both de\336ne) 380.75 216.62 P
(a) 99.65 202.62 T
4 10 Q
(total-seconds) 107.9 202.62 T
1 11 Q
( slot. Why do we need to have two classes that ar) 185.9 202.62 T
(e so similar?) 424.02 202.62 T
(\245) 108.65 182.62 T
(A) 126.65 182.62 T
4 10 Q
(<time-of-day>) 137.96 182.62 T
1 11 Q
( is conceptually dif) 215.96 182.62 T
(fer) 307.75 182.62 T
(ent fr) 320.83 182.62 T
(om a) 346.65 182.62 T
4 10 Q
(<time-offset>) 373.37 182.62 T
1 11 Q
(. If the) 451.37 182.62 T
4 10 Q
(total-seconds) 126.65 168.62 T
1 11 Q
( slot of a) 204.65 168.62 T
4 10 Q
(<time-of-day>) 248.27 168.62 T
1 11 Q
( is) 326.27 168.62 T
4 10 Q
(180) 339.64 168.62 T
1 11 Q
(, that means the time of day) 357.64 168.62 T
(at 0:03 \050that is, 3 minutes past midnight\051. If the) 126.65 154.62 T
4 10 Q
(total-seconds) 355.55 154.62 T
1 11 Q
( slot of a) 433.55 154.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 67
%%Page: "54" 68
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(54) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
(<time-offset>) 126.65 665.62 T
1 11 Q
( is) 204.65 665.62 T
4 10 Q
(180) 218.01 665.62 T
1 11 Q
(, that means 3 minutes in the futur) 236.01 665.62 T
(e. If you ask what) 403.12 665.62 T
(time it is, the answer is a) 126.65 651.62 T
4 10 Q
(<time-of-day>) 249.04 651.62 T
1 11 Q
(. If you ask how long it takes to) 327.05 651.62 T
(wash the dog, the answer is a) 126.65 637.62 T
4 10 Q
(<time-offset>) 272.46 637.62 T
1 11 Q
(.) 350.46 637.62 T
(\245) 108.65 617.62 T
-0.18 (A) 126.65 617.62 P
4 10 Q
-0.4 (<time-offset>) 137.77 617.62 P
1 11 Q
-0.18 ( can r) 215.77 617.62 P
-0.18 (epr) 241.85 617.62 P
-0.18 (esent time in the past by having a negative value) 257.87 617.62 P
(of) 126.65 603.62 T
4 10 Q
(total-seconds) 139.07 603.62 T
1 11 Q
(. A) 217.07 603.62 T
4 10 Q
(<time-of-day>) 233.88 603.62 T
1 11 Q
(, in contrast, should not have a nega-) 311.88 603.62 T
(tive value of) 126.65 589.62 T
4 10 Q
(total-seconds) 189.66 589.62 T
1 11 Q
(. Later in this book, we pr) 267.66 589.62 T
(ovide methods that) 391.95 589.62 T
(guarantee that the) 126.65 575.62 T
4 10 Q
(total-seconds) 217.85 575.62 T
1 11 Q
( slot of) 295.85 575.62 T
4 10 Q
(<time-of-day>) 331.23 575.62 T
1 11 Q
( instances is not) 409.23 575.62 T
(negative; see Section 10.2.2, page 120, and Section 10.3, page 123.) 126.65 561.62 T
(\245) 108.65 541.62 T
(W) 126.65 541.62 T
(e need dif) 136.64 541.62 T
(fer) 184.45 541.62 T
(ent methods for describing instances of) 197.53 541.62 T
4 10 Q
(<time-offset>) 390.79 541.62 T
1 11 Q
( and) 468.79 541.62 T
(instances of) 126.65 527.62 T
4 10 Q
(<time-of-day>) 186.39 527.62 T
1 11 Q
(. The) 264.39 527.62 T
4 10 Q
(<time-of-day>) 291.05 527.62 T
1 11 Q
( method prints) 369.05 527.62 T
4 10 Q
(8:30) 443.81 527.62 T
1 11 Q
(, and) 467.81 527.62 T
(the) 126.65 513.62 T
4 10 Q
(<time-offset>) 144.65 513.62 T
1 11 Q
( method should print) 222.65 513.62 T
4 10 Q
(minus 8:30) 329.12 513.62 T
1 11 Q
( or) 389.12 513.62 T
4 10 Q
(plus 8:30) 404.98 513.62 T
1 11 Q
(.) 458.98 513.62 T
(\245) 108.65 493.62 T
(Eventually) 126.65 493.62 T
(, we will need to be able to add a) 178.27 493.62 T
4 10 Q
(<time-of-day>) 340.43 493.62 T
1 11 Q
( to a) 418.43 493.62 T
4 10 Q
(<time-) 441.77 493.62 T
(offset>) 126.65 479.62 T
1 11 Q
(. For example, we can add the) 168.65 479.62 T
4 10 Q
(<time-of-day>) 316.53 479.62 T
1 11 Q
( 9:03 to the) 394.53 479.62 T
4 10 Q
(<time-) 449.63 479.62 T
(offset>) 126.65 465.62 T
1 11 Q
( 2:50 and get the) 168.65 465.62 T
4 10 Q
(<time-of-day>) 250.5 465.62 T
1 11 Q
( 1) 328.5 465.62 T
(1:53. W) 336.14 465.62 T
(e will also need to add) 370.88 465.62 T
(two) 126.65 451.62 T
4 10 Q
(<time-offset>) 148.16 451.62 T
1 11 Q
( instances. For example, 2 minutes plus 8 minutes is) 226.16 451.62 T
(equal to 10 minutes. But we cannot add two) 126.65 437.62 T
4 10 Q
(<time-of-day>) 342.84 437.62 T
1 11 Q
( instances,) 420.84 437.62 T
(because it does not make sense to add thr) 126.65 423.62 T
(ee o\325clock to four o\325clock.) 327.93 423.62 T
3 13 Q
(5.1.2  Creation of instances of) 99.65 392.29 T
4 12 Q
(<time-offset>) 253.68 392.29 T
1 11 Q
(W) 99.65 372.62 T
(e can cr) 109.64 372.62 T
(eate an instance of) 146.22 372.62 T
4 10 Q
(<time-offset>) 238.32 372.62 T
1 11 Q
( r) 316.33 372.62 T
(epr) 323.22 372.62 T
(esenting 15:20:10 in the futur) 339.25 372.62 T
(e:) 479.18 372.62 T
6 9 Q
(?) 99.65 351.95 T
4 F
( define variable *my-time-offset* :: <time-offset>) 105.05 351.95 T
(= make\050<time-offset>, total-seconds: encode-total-seconds\05015, 20, 10\051\051;) 121.25 340.95 T
1 11 Q
(W) 99.65 320.62 T
(e can cr) 109.64 320.62 T
(eate an instance of) 146.22 320.62 T
4 10 Q
(<time-offset>) 238.32 320.62 T
1 11 Q
( r) 316.33 320.62 T
(epr) 323.22 320.62 T
(esenting 6:45:30 in the past, by) 339.25 320.62 T
(using the unary minus function,) 99.65 306.62 T
4 10 Q
(-) 258.81 306.62 T
1 11 Q
(, which r) 264.81 306.62 T
(eturns the negative of the value that) 307.27 306.62 T
(follows it:) 99.65 292.62 T
6 9 Q
(?) 99.65 271.95 T
4 F
( define variable *your-time-offset* :: <time-offset>) 105.05 271.95 T
(= make\050<time-offset>, total-seconds: - encode-total-seconds\0506, 45, 30\051\051;) 121.25 260.95 T
3 13 Q
(5.1.3  Methods on) 99.65 231.29 T
4 12 Q
(<time-offset>) 192.07 231.29 T
1 11 Q
-0.07 (Because a) 99.65 211.62 P
4 10 Q
-0.16 (<time-offset>) 149.45 211.62 P
1 11 Q
-0.07 ( can r) 227.45 211.62 P
-0.07 (epr) 253.74 211.62 P
-0.07 (esent futur) 269.76 211.62 P
-0.07 (e time or past time, it will be useful) 322.29 211.62 P
(to pr) 99.65 197.62 T
(ovide a convenient way to determine whether a) 122.75 197.62 T
4 10 Q
(<time-offset>) 357.4 197.62 T
1 11 Q
( is in the) 435.4 197.62 T
(past. W) 99.65 183.62 T
(e de\336ne a new pr) 135.5 183.62 T
(edicate named) 219.18 183.62 T
4 10 Q
(past?) 292.72 183.62 T
1 11 Q
( as follows:) 322.72 183.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 68
%%Page: "55" 69
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.1 The) 336.52 702.62 T
5 F
(<time-offset>) 367.39 702.62 T
0 F
( class and methods) 441.49 702.62 T
2 F
(55) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 99.65 666.95 T
(time.total-seconds < 0;) 110.45 655.95 T
(end method past?;) 99.65 644.95 T
1 11 Q
-0.34 (The) 99.65 624.62 P
4 10 Q
-0.74 (past?) 120.47 624.62 P
1 11 Q
-0.34 ( method r) 150.47 624.62 P
-0.34 (eturns an instance of) 197.13 624.62 P
4 10 Q
-0.74 (<boolean>) 299.15 624.62 P
1 11 Q
-0.34 (, which is) 353.15 624.62 P
4 10 Q
-0.74 (#t) 401.06 624.62 P
1 11 Q
-0.34 ( if the time of) 413.06 624.62 P
-0.34 (fset) 476.06 624.62 P
(is in the past, and otherwise is) 99.65 610.62 T
4 10 Q
(#f) 249.14 610.62 T
1 11 Q
(. Her) 261.14 610.62 T
(e is an example:) 285.21 610.62 T
6 9 Q
(?) 99.65 589.95 T
4 F
(past?\050*my-time-offset*\051) 110.45 589.95 T
6 F
(#f) 99.65 578.95 T
(?) 99.65 559.95 T
4 F
(past?\050*your-time-offset*\051) 110.45 559.95 T
6 F
(#t) 99.65 548.95 T
1 11 Q
(W) 99.65 528.62 T
(e need a method to describe instances of) 109.64 528.62 T
4 10 Q
(<time-offset>) 308.03 528.62 T
1 11 Q
(. The output should) 386.03 528.62 T
(look like this:) 99.65 514.62 T
6 9 Q
(?) 99.65 493.95 T
4 F
(say-time-offset\050*my-time-offset*\051;) 110.45 493.95 T
6 F
(plus 15:20) 99.65 482.95 T
(?) 99.65 463.95 T
4 F
(say-time-offset\050*your-time-offset*\051;) 110.45 463.95 T
6 F
(minus 6:45) 99.65 452.95 T
1 11 Q
(W) 99.65 432.62 T
(e might de\336ne the method in this way:) 109.64 432.62 T
4 9 Q
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 99.65 411.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 400.95 T
(format-out\050"%s %d:%s%d",) 110.45 389.95 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 169.85 378.95 T
(hours,) 169.85 367.95 T
(if \050minutes < 10\051 "0" else "" end,) 169.85 356.95 T
(minutes\051;) 169.85 345.95 T
(end method say-time-offset;) 99.65 334.95 T
1 11 Q
(If we test this method in a listener) 99.65 314.62 T
(, however) 263.59 314.62 T
(, the r) 310.96 314.62 T
(esult is dif) 338.61 314.62 T
(fer) 388.72 314.62 T
(ent:) 401.8 314.62 T
6 9 Q
(?) 99.65 293.95 T
4 F
(say-time-offset\050*my-time-offset*\051;) 110.45 293.95 T
6 F
-0.2 (ERROR: No applicable method for decode-total-seconds with argument {instance) 99.65 282.95 P
(<time-offset>}) 99.65 271.95 T
1 11 Q
(\322No applicable method\323 means that ther) 99.65 251.62 T
(e is no method for this generic function) 297.33 251.62 T
-0.16 (that is appr) 99.65 237.62 P
-0.16 (opriate for the ar) 154.63 237.62 P
-0.16 (guments. T) 235.84 237.62 P
-0.16 (o understand this err) 289.29 237.62 P
-0.16 (or) 390.92 237.62 P
-0.16 (, we can look at the) 400.46 237.62 P
-0.27 (methods for) 99.65 223.62 P
4 10 Q
-0.59 (decode-total-seconds) 160.98 223.62 P
1 11 Q
-0.27 ( in Figur) 280.98 223.62 P
-0.27 (e 4.1, page 49. One method takes an) 321.75 223.62 P
(ar) 99.65 209.62 T
(gument of the type) 109.29 209.62 T
4 10 Q
(<integer>) 204.52 209.62 T
1 11 Q
(. Another method takes an ar) 258.52 209.62 T
(gument of the type) 399.97 209.62 T
4 10 Q
(<time-of-day>) 99.65 195.62 T
1 11 Q
(. Ther) 177.65 195.62 T
(e is no method for instances of) 205.71 195.62 T
4 10 Q
(<time-offset>) 356.45 195.62 T
1 11 Q
(, so Dylan) 434.45 195.62 T
(signals an err) 99.65 181.62 T
(or) 164.56 181.62 T
(. Ther) 174.1 181.62 T
(e ar) 202.16 181.62 T
(e thr) 219.82 181.62 T
(ee possible appr) 241.98 181.62 T
(oaches to solving this pr) 320.58 181.62 T
(oblem.) 438.32 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 69
%%Page: "56" 70
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(56) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(As a \336rst appr) 126.65 665.62 T
(oach, we could de\336ne the) 195.74 665.62 T
4 10 Q
(say-time-offset) 322.49 665.62 T
1 11 Q
( method to call) 412.49 665.62 T
4 10 Q
(decode-total-seconds) 99.65 651.62 T
1 11 Q
( with an integer) 219.65 651.62 T
(.) 295.54 651.62 T
5 9 Q
(// First approach: Call decode-total-seconds with an integer) 99.65 630.95 T
4 F
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 99.65 619.95 T
5 F
(// 1) 483.05 619.95 T
4 F
(let\050hours, minutes\051 = decode-total-seconds\050abs\050time.total-seconds\051\051;) 110.45 608.95 T
5 F
(// 2) 483.05 608.95 T
4 F
(format-out\050"%s %d:%s%d",) 110.45 597.95 T
5 F
(// 3) 483.05 597.95 T
4 F
(if \050past?\050time\051\051 "minus" else "plus" end,) 169.85 586.95 T
5 F
(// 4) 483.05 586.95 T
4 F
(hours,) 169.85 575.95 T
5 F
(// 5) 483.05 575.95 T
4 F
(if \050minutes < 10\051 "0" else "" end,) 169.85 564.95 T
5 F
(// 6) 483.05 564.95 T
4 F
(minutes\051;) 169.85 553.95 T
5 F
(// 7) 483.05 553.95 T
4 F
(end method say-time-offset;) 99.65 542.95 T
5 F
(// 8) 483.05 542.95 T
1 11 Q
(W) 99.65 522.62 T
(e changed only the call to) 109.64 522.62 T
4 10 Q
(decode-total-seconds) 236.06 522.62 T
1 11 Q
( on line 2. Her) 356.06 522.62 T
(e, we call it) 424.36 522.62 T
-0.12 (with the absolute value \050r) 99.65 508.62 P
-0.12 (eturned by the) 223.36 508.62 P
4 10 Q
-0.26 (abs) 296.93 508.62 P
1 11 Q
-0.12 ( function\051 of the) 314.93 508.62 P
4 10 Q
-0.26 (total-seconds) 394.81 508.62 P
1 11 Q
-0.12 ( slot.) 472.81 508.62 P
-0.32 (This appr) 126.65 494.62 P
-0.32 (oach works, but it is awkwar) 172.95 494.62 P
-0.32 (d because we need to r) 311.49 494.62 P
-0.32 (emember what) 420.48 494.62 P
(kinds of ar) 99.65 480.62 T
(guments) 151.57 480.62 T
4 10 Q
(decode-total-seconds) 196.7 480.62 T
1 11 Q
( can take. The convenient calling) 316.7 480.62 T
-0.33 (syntax that we intr) 99.65 466.62 P
-0.33 (oduced for calling) 189.7 466.62 P
4 10 Q
-0.72 (decode-total-seconds) 279.71 466.62 P
1 11 Q
-0.33 ( with an instance of) 399.71 466.62 P
4 10 Q
(<time-of-day>) 99.65 452.62 T
1 11 Q
( is not available for other kinds of time.) 177.65 452.62 T
(As a second appr) 126.65 438.62 T
(oach, we could to de\336ne a thir) 210.43 438.62 T
(d method for) 357.11 438.62 T
4 10 Q
(decode-) 423.79 438.62 T
(total-seconds) 99.65 424.62 T
1 11 Q
( that takes as its ar) 177.65 424.62 T
(gument an instance of) 266.87 424.62 T
4 10 Q
(<time-offset>) 377.07 424.62 T
1 11 Q
(:) 455.07 424.62 T
5 9 Q
(// Second approach: Define a method on <time-offset>) 99.65 403.95 T
4 F
(define method decode-total-seconds \050time :: <time-offset>\051 => \050\051) 99.65 392.95 T
(decode-total-seconds\050abs\050time.total-seconds\051\051;) 110.45 381.95 T
(end method decode-total-seconds;) 99.65 370.95 T
1 11 Q
(The method for) 99.65 350.62 T
4 10 Q
(say-time-offset) 178.02 350.62 T
1 11 Q
( can then call) 268.02 350.62 T
4 10 Q
(decode-total-seconds) 334.25 350.62 T
1 11 Q
(, as we) 454.25 350.62 T
(did in the \336rst place:) 99.65 336.62 T
4 9 Q
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 99.65 315.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 304.95 T
(format-out\050"%s %d:%s%d",) 110.45 293.95 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 169.85 282.95 T
(hours,) 169.85 271.95 T
(if \050minutes < 10\051 "0" else "" end,) 169.85 260.95 T
(minutes\051;) 169.85 249.95 T
(end method say-time-offset;) 99.65 238.95 T
1 11 Q
(This appr) 99.65 218.62 T
(oach works, and it pr) 146.28 218.62 T
(eserves the \337exibility of calling) 249.29 218.62 T
4 10 Q
(decode-total-) 402.39 218.62 T
(seconds) 99.65 204.62 T
1 11 Q
( on instances of) 141.65 204.62 T
4 10 Q
(<integer>) 219.3 204.62 T
1 11 Q
(,) 273.3 204.62 T
4 10 Q
(<time-of-day>) 278.8 204.62 T
1 11 Q
(, and) 356.8 204.62 T
4 10 Q
(<time-offset>) 383.67 204.62 T
1 11 Q
(. How-) 461.67 204.62 T
-0.23 (ever) 99.65 190.62 P
-0.23 (, the body of the method on) 119.93 190.62 P
4 10 Q
-0.51 (<time-offset>) 255.51 190.62 P
1 11 Q
-0.23 ( \050de\336ned in this section\051 is nearly) 333.51 190.62 P
(identical to the body of the method on) 99.65 176.62 T
4 10 Q
(<time-of-day>) 288.42 176.62 T
1 11 Q
( \050de\336ned in Section 4.6.5,) 366.42 176.62 T
-0.23 (page 48\051. The only dif) 99.65 162.62 P
-0.23 (fer) 204.15 162.62 P
-0.23 (ence is that we use) 217.23 162.62 P
4 10 Q
-0.51 (abs) 309.58 162.62 P
1 11 Q
-0.23 ( in the method on) 327.58 162.62 P
4 10 Q
-0.51 (<time-offset>) 415.13 162.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 70
%%Page: "57" 71
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2 Class inheritance) 432.51 702.62 T
2 F
(57) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(but not in the method on) 99.65 665.62 T
4 10 Q
(<time-of-day>) 223.41 665.62 T
1 11 Q
(. If we used it in the method on) 301.41 665.62 T
4 10 Q
(<time-) 455.76 665.62 T
(of-day>) 99.65 651.62 T
1 11 Q
(, it would be harmless. Duplication of code is ugly) 141.65 651.62 T
(, adds maintenance) 384.53 651.62 T
(over) 99.65 637.62 T
(head, and is particularly undesirable when pr) 121.29 637.62 T
(ogramming in an object-) 343.33 637.62 T
(oriented language, wher) 99.65 623.62 T
(e it may indicate a \337aw in the overall design.) 218.43 623.62 T
(The best solution to the pr) 126.65 609.62 T
(oblem lies in a thir) 253.72 609.62 T
(d appr) 343.77 609.62 T
(oach \321 to r) 376.11 609.62 T
(ethink the) 431.89 609.62 T
(classes and methods in a mor) 99.65 595.62 T
(e object-oriented style, using inheritance. W) 242.2 595.62 T
(e show) 453.88 595.62 T
(this solution in the next section.) 99.65 581.62 T
3 15 Q
(5.2  Class inheritance) 99.65 541.95 T
1 11 Q
(W) 99.65 521.62 T
(e have de\336ned two simple classes,) 109.64 521.62 T
4 10 Q
(<time-of-day>) 278.85 521.62 T
1 11 Q
( and) 356.85 521.62 T
4 10 Q
(<time-offset>) 380.97 521.62 T
1 11 Q
(. W) 458.97 521.62 T
(e) 474.46 521.62 T
(r) 99.65 507.62 T
(epeat the de\336nitions her) 103.79 507.62 T
(e:) 221.46 507.62 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 99.65 486.95 T
4 F
(define class <time-of-day> \050<object>\051) 99.65 475.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 464.95 T
(end class <time-of-day>;) 99.65 453.95 T
5 F
(// A relative time between -24:00 and +24:00) 99.65 434.95 T
4 F
(define class <time-offset> \050<object>\051) 99.65 423.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 412.95 T
(end class <time-offset>;) 99.65 401.95 T
1 11 Q
(Ther) 99.65 381.62 T
(e is commonality between the two classes:) 122.21 381.62 T
(\245) 108.65 361.62 T
(Both classes r) 126.65 361.62 T
(epr) 191.86 361.62 T
(esent a kind of time \321 they have a conceptual basis in) 207.88 361.62 T
(common.) 126.65 347.62 T
(\245) 108.65 327.62 T
(Both classes have a) 126.65 327.62 T
4 10 Q
(total-seconds) 222.1 327.62 T
1 11 Q
( slot \321 they have str) 300.1 327.62 T
(uctur) 399.57 327.62 T
(e in common.) 425.45 327.62 T
(\245) 108.65 307.62 T
(Both classes need a) 126.65 307.62 T
4 10 Q
(decode-total-seconds) 222.37 307.62 T
1 11 Q
( method to convert the) 342.37 307.62 T
4 10 Q
(total-) 455.37 307.62 T
(seconds) 126.65 293.62 T
1 11 Q
( slot to hours, minutes, and seconds \321 they have behavior in) 168.65 293.62 T
(common.) 126.65 279.62 T
(W) 99.65 259.62 T
(e can use inheritance to model the shar) 109.64 259.62 T
(ed aspects of these two classes dir) 298.44 259.62 T
(ectly) 462.65 259.62 T
(.) 484.48 259.62 T
(W) 99.65 245.62 T
(e need to de\336ne a new class, such as) 109.64 245.62 T
4 10 Q
(<time>) 287.98 245.62 T
1 11 Q
(, and to r) 323.98 245.62 T
(ede\336ne the two classes to) 367.34 245.62 T
(inherit fr) 99.65 231.62 T
(om) 142.61 231.62 T
4 10 Q
(<time>) 161.08 231.62 T
1 11 Q
(. The) 197.08 231.62 T
4 10 Q
(<time>) 223.75 231.62 T
1 11 Q
( class will contain the slot) 259.75 231.62 T
4 10 Q
(total-seconds,) 386.63 231.62 T
1 11 Q
( and) 470.63 231.62 T
(the other two classes will inherit that slot. W) 99.65 217.62 T
(e shall r) 314.58 217.62 T
(ede\336ne the) 352.46 217.62 T
4 10 Q
(decode-total-) 408.8 217.62 T
(seconds) 99.65 203.62 T
1 11 Q
( method such that its parameter is of the) 141.65 203.62 T
4 10 Q
(<time>) 340.13 203.62 T
1 11 Q
( type, which means that) 376.13 203.62 T
(it can be called for instances of) 99.65 189.62 T
4 10 Q
(<time-of-day>) 250.85 189.62 T
1 11 Q
( and of) 328.85 189.62 T
4 10 Q
(<time-offset>) 365.4 189.62 T
1 11 Q
(.) 443.4 189.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 71
%%Page: "58" 72
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(58) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(5.2.1  Ne) 99.65 664.29 T
(w de\336nitions of the time c) 142.77 664.29 T
(lasses) 273.48 664.29 T
1 11 Q
(W) 99.65 644.62 T
(e de\336ne the new class) 109.64 644.62 T
4 10 Q
(<time>) 217.99 644.62 T
1 11 Q
(:) 253.99 644.62 T
4 9 Q
(define class <time> \050<object>\051) 99.65 623.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 612.95 T
(end class <time>;) 99.65 601.95 T
1 11 Q
(W) 99.65 581.62 T
(e r) 109.64 581.62 T
(ede\336ne) 121.8 581.62 T
4 10 Q
(<time-of-day>) 160.14 581.62 T
1 11 Q
( and) 238.14 581.62 T
4 10 Q
(<time-offset>) 262.26 581.62 T
1 11 Q
( to inherit fr) 340.26 581.62 T
(om) 398.32 581.62 T
4 10 Q
(<time>) 416.79 581.62 T
1 11 Q
(:) 452.79 581.62 T
5 9 Q
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 99.65 560.95 T
4 F
(define class <time-of-day> \050<time>\051) 99.65 549.95 T
(end class <time-of-day>;) 99.65 538.95 T
5 F
(// A relative time between -24:00 and +24:00) 99.65 519.95 T
4 F
(define class <time-offset> \050<time>\051) 99.65 508.95 T
(end class <time-offset>;) 99.65 497.95 T
3 13 Q
(5.2.2  Slot inheritance) 99.65 339.29 T
1 11 Q
(A class inherits the slots of its super) 99.65 319.62 T
(classes, and can de\336ne mor) 273.26 319.62 T
(e slots if they ar) 405.45 319.62 T
(e) 481.72 319.62 T
-0.08 (needed. For example, the) 99.65 305.62 P
4 10 Q
-0.16 (<time-of-day>) 224.46 305.62 P
1 11 Q
-0.08 ( and) 302.46 305.62 P
4 10 Q
-0.16 (<time-offset>) 326.44 305.62 P
1 11 Q
-0.08 ( classes inherit the) 404.44 305.62 P
4 10 Q
(total-seconds) 99.65 291.62 T
1 11 Q
( slot fr) 177.65 291.62 T
(om their super) 208.41 291.62 T
(class,) 279.76 291.62 T
4 10 Q
(<time>) 308.17 291.62 T
1 11 Q
(. A class inherits the slot) 344.17 291.62 T
(options fr) 99.65 277.62 T
(om its super) 146.68 277.62 T
(classes as well. A class cannot r) 206.68 277.62 T
(emove or r) 358.18 277.62 T
(eplace any slots) 410.65 277.62 T
(de\336ned by its super) 99.65 263.62 T
(classes. It is an err) 195.91 263.62 T
(or for a class to de\336ne a slot with the same) 283.33 263.62 T
(name as a slot inherited fr) 99.65 249.62 T
(om one of that class\325s super) 225.61 249.62 T
(classes.) 359.46 249.62 T
3 13 Q
(5.2.3  Existing instances of the c) 99.65 218.29 T
(lasses) 263.58 218.29 T
1 11 Q
(The variables) 99.65 198.62 T
4 10 Q
(*my-time-of-day*) 167.54 198.62 T
1 11 Q
(,) 263.54 198.62 T
4 10 Q
(*your-time-of-day*) 269.04 198.62 T
1 11 Q
(,) 377.04 198.62 T
4 10 Q
(*my-time-offset*) 382.54 198.62 T
1 11 Q
(,) 478.54 198.62 T
(and) 99.65 184.62 T
4 10 Q
(*your-time-offset*) 121.02 184.62 T
1 11 Q
( all contain instances of classes that have now been) 229.02 184.62 T
(r) 99.65 170.62 T
(ede\336ned. Some envir) 103.79 170.62 T
(onments might be able to update instances of the old class) 206.35 170.62 T
(de\336nitions to conform to the new class de\336nitions, but we will be conservative) 99.65 156.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.1 (Dynamic feature \321 no need to recompile:) 132.65 457.62 P
1 F
-0.1 ( In C++, a complete r) 340.71 457.62 P
-0.1 (ecom-) 442.11 457.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pile of the pr) 132.65 443.62 T
(ogram would be necessary to change the super) 194.86 443.62 T
(class of a) 422.74 443.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class. Most Dylan development envir) 132.65 429.62 T
(onments support a mode that) 313.2 429.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 415.62 T
(equir) 136.79 415.62 T
(es only that you compile the new class de\336nitions. The dif) 162.21 415.62 T
(fer-) 443.75 415.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ence between compiling only a few class de\336nitions and compiling) 132.65 401.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the whole pr) 132.65 387.62 T
(ogram can be a time saver for complex applications.) 194.21 387.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 470.83 126.65 380.08 2 L
V
0.25 H
0 Z
N
477.65 470.83 477.65 380.08 2 L
V
N
126.52 470.95 477.77 470.95 2 L
V
N
126.52 379.95 477.77 379.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 72
%%Page: "59" 73
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.2 Class inheritance) 432.51 702.62 T
2 F
(59) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.32 (and assume that our envir) 99.65 665.62 P
-0.32 (onment does not update instances. Ther) 225.74 665.62 P
-0.32 (efor) 418.14 665.62 P
-0.32 (e, we cr) 437.23 665.62 P
-0.32 (eate) 473.59 665.62 P
(the instances again:) 99.65 651.62 T
6 9 Q
(?) 99.65 630.95 T
4 F
( *my-time-offset*) 105.05 630.95 T
(:= make\050<time-offset>, total-seconds: encode-total-seconds\05015, 20, 10\051\051;) 121.25 619.95 T
6 F
(?) 99.65 600.95 T
4 F
( *your-time-offset*) 105.05 600.95 T
-0.3 (:= make\050<time-offset>, total-seconds: - encode-total-seconds\0506, 45, 30\051\051;) 121.25 589.95 P
6 F
(?) 99.65 570.95 T
4 F
( *my-time-of-day* := make\050<time-of-day>, total-seconds: 120\051;) 105.05 570.95 T
6 F
(?) 99.65 551.95 T
4 F
( *your-time-of-day*) 105.05 551.95 T
(:= make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 121.25 540.95 T
3 13 Q
(5.2.4  Relationships of the time c) 99.65 511.29 T
(lasses) 264.75 511.29 T
1 11 Q
(It is helpful to look at the r) 99.65 491.62 T
(elationships among the time classes. W) 228.45 491.62 T
(e show them in) 417.25 491.62 T
(Figur) 99.65 477.62 T
(e 5.1.) 125.86 477.62 T
(Referring to Figur) 126.65 463.62 T
(e 5.1, we intr) 213.91 463.62 T
(oduce terminology by example:) 275.71 463.62 T
(\245) 108.65 443.62 T
(The) 126.65 443.62 T
4 10 Q
(<time-of-day>) 147.81 443.62 T
1 11 Q
( class is a) 225.81 443.62 T
2 F
(direct subclass) 273.09 443.62 T
1 F
( of the) 346.69 443.62 T
4 10 Q
(<time>) 379.87 443.62 T
1 11 Q
( class.) 415.87 443.62 T
(\245) 108.65 423.62 T
(The) 126.65 423.62 T
4 10 Q
(<time-of-day>) 147.81 423.62 T
1 11 Q
( class is a) 225.81 423.62 T
2 F
(subclass) 273.09 423.62 T
1 F
( of the) 315.23 423.62 T
4 10 Q
(<object>) 348.41 423.62 T
1 11 Q
( class.) 396.41 423.62 T
(\245) 108.65 403.62 T
(The) 126.65 403.62 T
4 10 Q
(<time>) 147.81 403.62 T
1 11 Q
( class is a) 183.81 403.62 T
2 F
(direct superclass) 231.09 403.62 T
1 F
( of the) 314.47 403.62 T
4 10 Q
(<time-of-day>) 347.65 403.62 T
1 11 Q
( class.) 425.65 403.62 T
(\245) 108.65 383.62 T
(The) 126.65 383.62 T
4 10 Q
(<object>) 147.81 383.62 T
1 11 Q
( class is a) 195.81 383.62 T
2 F
(superclass) 243.09 383.62 T
1 F
( of the) 295.01 383.62 T
4 10 Q
(<time-of-day>) 328.19 383.62 T
1 11 Q
( class.) 406.19 383.62 T
(\245) 108.65 363.62 T
(When you make an instance of the) 126.65 363.62 T
4 10 Q
(<time-of-day>) 297.06 363.62 T
1 11 Q
( class, the r) 375.06 363.62 T
(esult is a) 428.38 363.62 T
2 F
(direct instance) 126.65 349.62 T
1 F
( of that class.) 199.64 349.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 167.96 495.65 175.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.1) 163.87 179.29 T
8 F
(Inher) 216.67 179.29 T
(itance relationships of the time classes) 239.61 179.29 T
(.) 410.64 179.29 T
0 0 0 1 0 0 0 K
99.65 191.95 495.65 322.95 C
197.15 195.95 398.15 320.95 C
0 77 114 266 223 189 109 203.15 205.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-1.eps)%%CreationDate: (6/5/96) (10:39 AM)%%BoundingBox: 77 114 266 223%%HiResBoundingBox: 77.7419 114.4167 264.4247 223.5404%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -562.6667 498.6667 -1.5 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A0 To1 0 0 1 170.6666 167 0 TpTP-16.196 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(<time>) Tx (\r) TX TO0 To1 0 0 1 171.1666 216.3334 0 TpTP-21.5947 0 Td0 Tr(<object>) Tx (\r) TX TO0 To1 0 0 1 112.8333 116.6667 0 TpTP-35.0914 0 Td0 Tr(<time-of-day>) Tx (\r) TX TO0 To1 0 0 1 229.3333 116.6667 0 TpTP-35.0914 0 Td0 Tr(<time-offset>) Tx (\r) TX TO0 R0 G173.3333 160.5834 mS219 131.3334 mSuuuuuu0.65 w173.3333 160.5834 m220.3333 131 lS0 O0 g1 w217.8329 129.9294 m226.1959 127.3423 l220.2468 133.7644 l217.8329 129.9294 lfUUUUUUuuuuuu0 R0 G0.65 w170.6716 212 m170.6819 183.1203 lS0 O0 g1 w168.4436 184.6657 m170.7107 176.2104 l172.9751 184.6666 l168.4436 184.6657 lfUUUUUUuuuuuu0 R0 G0.65 w167.3333 161 m121 130.6667 lS0 O0 g1 w121.0671 133.3888 m115.2335 126.862 l123.5491 129.5977 l121.0671 133.3888 lfUUUUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 191.95 495.65 322.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 73
%%Page: "60" 74
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(60) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(A dir) 126.65 665.62 T
(ect instance of) 152.02 665.62 T
4 10 Q
(<time-of-day>) 223.59 665.62 T
1 11 Q
( is an) 301.59 665.62 T
2 F
(indirect instance) 329.61 665.62 T
1 F
( of) 412.99 665.62 T
4 10 Q
(<time>) 428.16 665.62 T
1 11 Q
( and) 464.16 665.62 T
4 10 Q
(<object>) 126.65 651.62 T
1 11 Q
(.) 174.65 651.62 T
(\245) 108.65 631.62 T
(An object is a) 126.65 631.62 T
2 F
(general instance) 194.38 631.62 T
1 F
( of a class if it is either a dir) 275.94 631.62 T
(ect or an indir) 407.93 631.62 T
(ect) 475.84 631.62 T
-0.01 (instance of that class. The term) 126.65 617.62 P
2 F
-0.01 (instance) 278.73 617.62 P
1 F
-0.01 ( is equivalent to general instance. A) 320.26 617.62 P
-0.11 (dir) 126.65 603.62 P
-0.11 (ect instance of) 140.72 603.62 P
4 10 Q
-0.23 (<time-of-day>) 211.96 603.62 P
1 11 Q
-0.11 ( is both a general instance and an instance) 289.96 603.62 P
(of) 126.65 589.62 T
4 10 Q
(<time-of-day>) 139.07 589.62 T
1 11 Q
(,) 217.07 589.62 T
4 10 Q
(<time>) 222.57 589.62 T
1 11 Q
(, and) 258.57 589.62 T
4 10 Q
(<object>) 285.44 589.62 T
1 11 Q
(.) 333.44 589.62 T
(\245) 108.65 569.62 T
-0.01 (The) 126.65 569.62 P
4 10 Q
-0.03 (<time-of-day>) 147.8 569.62 P
1 11 Q
-0.01 ( class is a) 225.8 569.62 P
2 F
-0.01 (subtype) 273.02 569.62 P
1 F
-0.01 (of the) 316.08 569.62 P
4 10 Q
-0.03 (<time>) 346.48 569.62 P
1 11 Q
-0.01 ( and) 382.48 569.62 P
4 10 Q
-0.03 (<object>) 406.58 569.62 P
1 11 Q
-0.01 ( classes.) 454.58 569.62 P
(A class is also a subtype of itself. All classes ar) 126.65 555.62 T
(e types.) 350.77 555.62 T
(\245) 108.65 535.62 T
-0.06 (The) 126.65 535.62 P
4 10 Q
-0.12 (<object>) 147.76 535.62 P
1 11 Q
-0.06 ( class is a) 195.76 535.62 P
2 F
-0.06 (supertype) 242.81 535.62 P
1 F
-0.06 ( of all the other classes shown. All classes) 292.92 535.62 P
(ar) 126.65 521.62 T
(e subtypes of the) 136.29 521.62 T
4 10 Q
(<object>) 221.12 521.62 T
1 11 Q
( class. All objects ar) 269.12 521.62 T
(e instances of the) 363.45 521.62 T
4 10 Q
(<object>) 126.65 507.62 T
1 11 Q
( class.) 174.65 507.62 T
3 15 Q
(5.3  Methods f) 99.65 467.95 T
(or c) 181.44 467.95 T
(lasses that use inheritance) 203.78 467.95 T
1 11 Q
(Figur) 99.65 447.62 T
(e 5.2 shows the methods that we now have de\336ned for the) 125.86 447.62 T
4 10 Q
(decode-total-) 411.2 447.62 T
(seconds) 99.65 433.62 T
1 11 Q
( generic function; Figur) 141.65 433.62 T
(e 5.3 shows the methods that we want to have.) 255.12 433.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 153.96 495.65 161.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.2) 154.4 165.29 T
8 F
(Existing methods f) 207.2 165.29 T
(or) 288.6 165.29 T
4 F
(decode-total-seconds) 300.27 165.29 T
8 F
(.) 420.12 165.29 T
0 0 0 1 0 0 0 K
99.65 177.95 495.65 417.95 C
99.65 181.95 495.65 415.95 C
0 15 14 412 236 397 222 99.15 187.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-2 .eps)%%CreationDate: (6/5/96) (1:07 PM)%%BoundingBox: 15 14 412 236%%HiResBoundingBox: 16.1749 13.8417 410.9916 236.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -10.6667 354.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-Oblique%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D410.6666 14.1667 m410.6666 236 L16.4999 236 L16.4999 14.1667 L410.6666 14.1667 Lb1 g1 w314.8333 208.3334 m315.0833 225.3334 L112.4166 225.3334 L112.1666 208.3334 L314.8333 208.3334 Lf0 R0 G0.65 w400.6666 107.25 m400.6666 196.3334 L26.2499 196.3334 L26.2499 107.25 L400.6666 107.25 Lb399.3333 24.5834 m399.3333 96.6667 L26.2499 96.6667 L26.2499 24.5834 L399.3333 24.5834 Lb0 To1 0 0 1 213.9999 213.8334 0 TpTP-96.101 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(decode-total-seconds) Tx (\r) TX TO0 To1 0 0 1 30.2499 184.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf0 Ta10 0 Tl(// Method on <integer>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(total-seconds :: <integer>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  let\(total-minutes, seconds\) = truncate/\(total-seconds, 60\);\r) Tx T*(  let\(hours, minutes\) = truncate/\(total-minutes, 60\);\r) Tx T*(  values\(hours, minutes, seconds\);\r) Tx T*(end method decode-total-seconds;\r) Tx T*(\r) Tx TO0 To1 0 0 1 29.9999 85.9167 0 TpTP0 Tr/_Courier-Oblique 9 Tf(// Method on <time-of-day>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(time :: <time-of-day>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  decode-total-seconds\(time.total-seconds\);\r) Tx T*(end method decode-total-seconds;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 177.95 495.65 417.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 74
%%Page: "61" 75
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.4 Redefinition of a method) 405.24 702.62 T
2 F
(61) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(T) 99.65 389.63 T
(o take advantage of the r) 105.38 389.63 T
(ede\336ned classes, we want to r) 225.49 389.63 T
(emove the method on) 369.98 389.63 T
4 10 Q
(<time-of-day>) 99.65 375.63 T
1 11 Q
(, and to add a method on) 177.65 375.63 T
4 10 Q
(<time>) 302.41 375.63 T
1 11 Q
(. The method on) 338.41 375.63 T
4 10 Q
(<time>) 420.68 375.63 T
1 11 Q
( is) 456.68 375.63 T
(appr) 99.65 361.63 T
(opriate for instances of both) 122.52 361.63 T
4 10 Q
(<time-of-day>) 261.12 361.63 T
1 11 Q
( and) 339.12 361.63 T
4 10 Q
(<time-offset>) 363.24 361.63 T
1 11 Q
(.) 441.24 361.63 T
-0.12 (Ther) 126.65 347.63 P
-0.12 (e ar) 149.21 347.63 P
-0.12 (e two important points to cover) 166.76 347.63 P
-0.12 (. W) 318.86 347.63 P
-0.12 (e \336rst discuss how to r) 334.23 347.63 P
-0.12 (emove the) 442.66 347.63 P
-0.14 (method on) 99.65 333.63 P
4 10 Q
-0.3 (<time-of-day>) 154.98 333.63 P
1 11 Q
-0.14 ( and how to add the method on) 232.98 333.63 P
4 10 Q
-0.3 (<time>) 387.97 333.63 P
1 11 Q
-0.14 ( in Section 5.4.) 423.97 333.63 P
(W) 99.65 319.63 T
(e then describe how the) 109.64 319.63 T
4 10 Q
(decode-total-seconds) 227.59 319.63 T
1 11 Q
( generic function works in) 347.59 319.63 T
(Section 5.5.) 99.65 305.63 T
3 15 Q
(5.4  Rede\336nition of a method) 99.65 265.96 T
1 11 Q
(It is important to understand that when you de\336ne a method, Dylan will do one) 99.65 245.63 T
(of the following:) 99.65 231.63 T
(\245) 108.65 211.63 T
(Add that method to the generic function \050without af) 126.65 211.63 T
(fecting existing meth-) 379.75 211.63 T
-0.16 (ods\051, if the parameter list of the new method is dif) 126.65 197.63 P
-0.16 (fer) 368.02 197.63 P
-0.16 (ent fr) 381.09 197.63 P
-0.16 (om the parameter) 406.75 197.63 P
(lists of all the existing methods.) 126.65 183.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 408.96 495.65 416.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.3) 154.68 420.29 T
8 F
(Desired methods f) 207.48 420.29 T
(or) 288.32 420.29 T
4 F
(decode-total-seconds) 299.99 420.29 T
8 F
(.) 419.84 420.29 T
0 0 0 1 0 0 0 K
99.65 432.95 495.65 672.95 C
99.65 436.95 495.65 670.95 C
0 15 14 412 236 397 222 99.15 442.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-3 .eps)%%CreationDate: (6/5/96) (10:40 AM)%%BoundingBox: 15 14 412 236%%HiResBoundingBox: 16.1749 13.8417 410.9916 236.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -62.6667 378.6667 1.5 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-Oblique%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D410.6666 14.1667 m410.6666 236 L16.4999 236 L16.4999 14.1667 L410.6666 14.1667 Lb1 g1 w314.8333 208.3334 m315.0833 225.3334 L112.4166 225.3334 L112.1666 208.3334 L314.8333 208.3334 Lf0 R0 G0.65 w400.6666 107.25 m400.6666 196.3334 L26.2499 196.3334 L26.2499 107.25 L400.6666 107.25 Lb399.3333 24.5834 m399.3333 96.6667 L26.2499 96.6667 L26.2499 24.5834 L399.3333 24.5834 Lb0 To1 0 0 1 213.9999 213.8334 0 TpTP-96.101 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(decode-total-seconds) Tx (\r) TX TO0 To1 0 0 1 29.2499 184.3334 0 TpTP0 Tr/_Courier-Oblique 9 Tf0 Ta10 0 Tl(// Method on <integer>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(total-seconds :: <integer>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  let\(total-minutes, seconds\) = truncate/\(total-seconds, 60\);\r) Tx T*(  let\(hours, minutes\) = truncate/\(total-minutes, 60\);\r) Tx T*(  values\(hours, minutes, seconds\);\r) Tx T*(end method decode-total-seconds;\r) Tx T*(\r) Tx TO0 To1 0 0 1 29.9999 85.9167 0 TpTP0 Tr/_Courier-Oblique 9 Tf(// Method on <time>\r) Tx T*/_Courier-Bold 9 Tf(define method decode-total-seconds\r) Tx T*(    \(time :: <time>\)\r) Tx T*( => \(hours :: <integer>, minutes :: <integer>, seconds :: <integer>\)\r) Tx T*(  decode-total-seconds\(abs\(time.total-seconds\)\);\r) Tx T*(end method decode-total-seconds;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 432.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 75
%%Page: "62" 76
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(62) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(Rede\336ne an existing method of the generic function, if the parameter list of) 126.65 665.62 T
(the new method is equivalent to the parameter list of one of the existing) 126.65 651.62 T
(methods. \050Although the concept of r) 126.65 637.62 T
(ede\336nition is not in the Dylan lan-) 302.79 637.62 T
(guage, most Dylan development envir) 126.65 623.62 T
(onments support r) 313.23 623.62 T
(ede\336nition.\051) 403.38 623.62 T
-0.09 (T) 99.65 603.62 P
-0.09 (wo parameter lists ar) 105.4 603.62 P
-0.09 (e equivalent if the types of each r) 207.68 603.62 P
-0.09 (equir) 367.28 603.62 P
-0.09 (ed parameter ar) 392.69 603.62 P
-0.09 (e the) 469.79 603.62 P
(same. A parameter with no type is the same as a parameter whose type is) 99.65 589.62 T
4 10 Q
(<object>) 99.65 575.62 T
1 11 Q
(. For example, the following parameter lists ar) 147.65 575.62 T
(e equivalent:) 371.43 575.62 T
4 9 Q
(\050a :: <string>, b :: <integer>, c\051) 99.65 554.95 T
(\050str :: <string>, num :: <integer>, any-old-thing :: <object>\051) 99.65 543.95 T
1 11 Q
(Assume that we ar) 99.65 523.62 T
(e working in a listener) 190.56 523.62 T
(, and alr) 298.42 523.62 T
(eady have de\336ned the methods) 338.14 523.62 T
(shown in Figur) 99.65 509.62 T
(e 5.2. Consider what happens when we de\336ne the method on) 173.61 509.62 T
4 10 Q
(<time>) 99.65 495.62 T
1 11 Q
(. The parameter list of the new method is not equivalent to the parameter) 135.65 495.62 T
(list of any of the existing methods, so the new method is added to the generic) 99.65 481.62 T
(function. Thus,) 99.65 467.62 T
4 10 Q
(decode-total-seconds) 175.87 467.62 T
1 11 Q
( has thr) 295.87 467.62 T
(ee methods: a method on) 332.07 467.62 T
4 10 Q
-0.01 (<integer>) 99.65 453.62 P
1 11 Q
-0 (, a method on) 153.65 453.62 P
4 10 Q
-0.01 (<time-of-day>) 222.98 453.62 P
1 11 Q
-0 (, and a method on) 300.98 453.62 P
4 10 Q
-0.01 (<time>) 391.69 453.62 P
1 11 Q
-0 (. The envir) 427.69 453.62 P
-0 (on-) 479.58 453.62 P
(ment may of) 99.65 439.62 T
(fer a way to r) 160.92 439.62 T
(emove a method fr) 225.22 439.62 T
(om a generic function. When we) 316.95 439.62 T
(r) 99.65 425.62 T
(emove the de\336nition of the method on) 103.79 425.62 T
4 10 Q
(<time-of-day>) 293.25 425.62 T
1 11 Q
( using the envir) 371.25 425.62 T
(onment,) 447.01 425.62 T
(the) 99.65 411.62 T
4 10 Q
(decode-total-seconds) 117.65 411.62 T
1 11 Q
( generic function contains only the desir) 237.65 411.62 T
(ed methods,) 432.05 411.62 T
(as shown in Figur) 99.65 397.62 T
(e 5.3. A typical br) 186.53 397.62 T
(owser will help you to \336nd the methods to) 271.18 397.62 T
(r) 99.65 383.62 T
(emove.) 103.79 383.62 T
(If, however) 126.65 369.62 T
(, we ar) 181.38 369.62 T
(e working in sour) 213.72 369.62 T
(ce \336les rather than in a listener) 299.66 369.62 T
(, we sim-) 447.66 369.62 T
-0.17 (ply need to r) 99.65 355.62 P
-0.17 (emove the method on) 160.73 355.62 P
4 10 Q
-0.36 (<time-of-day>) 268.89 355.62 P
1 11 Q
-0.17 ( with the editor) 346.89 355.62 P
-0.17 (, and to type in) 420.58 355.62 P
(the method on) 99.65 341.62 T
4 10 Q
(<time>) 173.26 341.62 T
1 11 Q
(. When we next compile the \336le, the generic function will) 209.26 341.62 T
(contain only the desir) 99.65 327.62 T
(ed methods, as shown in Figur) 204.86 327.62 T
(e 5.3.) 354.34 327.62 T
(W) 126.65 313.62 T
(e can now call) 136.64 313.62 T
4 10 Q
(decode-total-seconds) 208.06 313.62 T
1 11 Q
( on instances of) 328.06 313.62 T
4 10 Q
(<time-of-day>) 405.71 313.62 T
1 11 Q
(and on instances of) 99.65 299.62 T
4 10 Q
(<time-offset>) 195.92 299.62 T
1 11 Q
(:) 273.92 299.62 T
6 9 Q
(?) 99.65 278.95 T
4 F
(decode-total-seconds\050*your-time-of-day*\051;) 110.45 278.95 T
6 F
(8) 99.65 267.95 T
(30) 99.65 256.95 T
(59) 99.65 245.95 T
(?) 99.65 226.95 T
4 F
(decode-total-seconds\050*your-time-offset*\051;) 110.45 226.95 T
6 F
(6) 99.65 215.95 T
(45) 99.65 204.95 T
(30) 99.65 193.95 T
1 11 Q
(The r) 99.65 173.62 T
(esult is as expected \321) 124.96 173.62 T
4 10 Q
(decode-total-seconds) 234.38 173.62 T
1 11 Q
( r) 354.38 173.62 T
(eturns the hours, minutes,) 361.27 173.62 T
(and seconds. W) 99.65 159.62 T
(e now describe how this generic function works.) 175.12 159.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 76
%%Page: "63" 77
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.5 Method dispatch) 434.64 702.62 T
2 F
(63) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(5.5  Method dispatc) 99.65 662.95 T
(h) 213.69 662.95 T
1 11 Q
-0.2 (When a generic function is called, it chooses the) 99.65 642.62 P
2 F
-0.2 (most speci\336c applicable method) 332.73 642.62 P
1 F
(and calls that method. The pr) 99.65 628.62 T
(ocess of choosing the most speci\336c method and call-) 242.16 628.62 T
(ing it is) 99.65 614.62 T
2 F
(method dispatch) 138.27 614.62 T
1 F
(. This pr) 222.28 614.62 T
(ocess has thr) 262.29 614.62 T
(ee steps:) 323.98 614.62 T
2 F
(1.) 108.65 594.62 T
1 F
(Find all the) 126.65 594.62 T
2 F
(applicable methods) 184.5 594.62 T
1 F
( for the ar) 283.17 594.62 T
(gument to the generic function.) 330.33 594.62 T
2 F
(2.) 108.65 574.62 T
1 F
(Sort the applicable methods by) 126.65 574.62 T
2 F
(speci\336city) 279.99 574.62 T
1 F
(.) 329.47 574.62 T
2 F
(3.) 108.65 554.62 T
1 F
(Call the most speci\336c method.) 126.65 554.62 T
-0.24 (Dylan does the method dispatch automatically) 99.65 534.62 P
-0.24 (, but it is important that you under-) 324.54 534.62 P
(stand the semantics of the method dispatch. When you understand how Dylan) 99.65 520.62 T
(determines the applicability of methods and how it sorts them by speci\336city) 99.65 506.62 T
(, you) 467.8 506.62 T
(can design classes and methods that work together corr) 99.65 492.62 T
(ectly) 369.31 492.62 T
(. Method dispatch is) 391.15 492.62 T
(at the heart of object-oriented pr) 99.65 478.62 T
(ogramming.) 256.13 478.62 T
3 13 Q
(5.5.1  Step 1: Find the applicab) 99.65 447.29 T
(le methods) 255.38 447.29 T
1 11 Q
(Start with the set of methods de\336ned for the generic function that was called. A) 99.65 427.62 T
(method is) 99.65 413.62 T
2 F
(specialized) 150.71 413.62 T
1 F
(on a r) 209.66 413.62 T
(equir) 237.21 413.62 T
(ed parameter that has a type constraints. The) 262.62 413.62 T
(type constraint of the r) 99.65 399.62 T
(equir) 209.88 399.62 T
(ed parameter is called the) 235.29 399.62 T
2 F
(parameter specializer) 363.07 399.62 T
1 F
( of) 470.29 399.62 T
(the parameter) 99.65 385.62 T
(. A method is) 166.98 385.62 T
2 F
(applicable) 234.85 385.62 T
1 F
( if the ar) 287.39 385.62 T
(gument to the generic function is) 327.4 385.62 T
(an instance of the parameter specializer of the method.) 99.65 371.62 T
(For example, consider the) 126.65 357.62 T
4 10 Q
(decode-total-seconds) 254.85 357.62 T
1 11 Q
( generic function. T) 374.85 357.62 T
(able) 467.85 357.62 T
(5.1 shows which method is applicable for certain ar) 99.65 343.62 T
(guments.) 348.84 343.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Argument) 162.68 307.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Argument\325) 267.43 307.62 T
(s type) 317 307.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicab) 379.14 307.62 T
(le methods) 421.1 307.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(*my-time-of-day*) 127.11 283.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 257.92 283.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 367.86 282.62 T
4 10 Q
(<time>) 422.89 282.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*my-time-offset*) 127.11 260.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 257.92 260.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 367.86 259.62 T
4 10 Q
(<time>) 422.89 259.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000) 127.11 237.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<integer>) 257.92 237.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 367.86 236.62 T
4 10 Q
(<integer>) 422.89 236.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("hello, world") 127.11 214.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<string>) 257.92 214.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(none) 367.86 213.62 T
0 0 0 1 0 0 0 K
99.65 175.96 513.65 183.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 130.04 187.29 T
(ab) 135.35 187.29 T
(le 5.1) 146.92 187.29 T
8 F
(Applicab) 177.5 187.29 T
(le methods f) 215.65 187.29 T
(or arguments to) 269.82 187.29 T
4 F
(decode-total-seconds) 342.63 187.29 T
8 F
(.) 462.48 187.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
121.11 322.83 121.11 204.08 2 L
V
0.25 H
0 Z
N
492.18 322.83 492.18 204.08 2 L
V
N
120.99 322.95 492.31 322.95 2 L
V
N
120.99 295.95 492.31 295.95 2 L
V
N
120.99 203.95 492.31 203.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 77
%%Page: "64" 78
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(64) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The \336rst r) 99.65 665.62 T
(ow of the table shows that, when the ar) 146.96 665.62 T
(gument is a dir) 337.59 665.62 T
(ect instance of) 410.99 665.62 T
4 10 Q
-0.09 (<time-of-day>) 99.65 651.62 P
1 11 Q
-0.04 (, the method on) 177.65 651.62 P
4 10 Q
-0.09 (<time>) 256.6 651.62 P
1 11 Q
-0.04 ( is applicable, because the ar) 292.6 651.62 P
-0.04 (gument is an) 430.03 651.62 P
-0.46 (instance of) 99.65 637.62 P
4 10 Q
-1 (<time>) 153.81 637.62 P
1 11 Q
-0.46 ( \050the method\325s parameter specializer\051. The \336nal r) 189.81 637.62 P
-0.46 (ow of the table) 422.73 637.62 P
-0.19 (shows that, when the ar) 99.65 623.62 P
-0.19 (gument is) 214.79 623.62 P
4 10 Q
-0.4 ("hello, world") 265.51 623.62 P
1 11 Q
-0.19 (, none of the de\336ned methods) 349.1 623.62 P
(ar) 99.65 609.62 T
(e applicable, because) 109.29 609.62 T
4 10 Q
("hello, world") 213.93 609.62 T
1 11 Q
( is not an instance of) 297.93 609.62 T
4 10 Q
(<time>) 399.77 609.62 T
1 11 Q
( or) 435.77 609.62 T
4 10 Q
(<integer>) 99.65 595.62 T
1 11 Q
(.) 153.65 595.62 T
-0.3 (For) 126.65 581.62 P
4 10 Q
-0.65 (decode-total-seconds) 145.57 581.62 P
1 11 Q
-0.3 (, ther) 265.57 581.62 P
-0.3 (e is either no or one applicable method for) 290.17 581.62 P
(any ar) 99.65 567.62 T
(gument. If ther) 130.06 567.62 T
(e is one applicable method, it is called. If ther) 202.81 567.62 T
(e is no applica-) 421.83 567.62 T
(ble method, the \322No applicable method\323 err) 99.65 553.62 T
(or is signaled. Ther) 314.07 553.62 T
(e is no need to) 406.92 553.62 T
(continue to step 2.) 99.65 539.62 T
-0.42 (In other cases, ther) 126.65 525.62 P
-0.42 (e can be several applicable methods. Consider the generic) 216.49 525.62 P
(function) 99.65 511.62 T
4 10 Q
(say-greeting) 143.18 511.62 T
1 11 Q
(, shown in Figur) 215.18 511.62 T
(e 5.4. T) 294.64 511.62 T
(able 5.2 shows that, for certain) 327.64 511.62 T
(ar) 99.65 497.62 T
(guments, one method is applicable, but that, for an integer ar) 109.29 497.62 T
(gument, two) 405.86 497.62 T
(methods ar) 99.65 483.62 T
(e applicable.) 154.41 483.62 T
(When the ar) 126.65 469.62 T
(gument is) 186.12 469.62 T
4 10 Q
(7) 237.21 469.62 T
1 11 Q
(, a dir) 243.21 469.62 T
(ect instance of) 271.03 469.62 T
4 10 Q
(<integer>) 342.59 469.62 T
1 11 Q
(, the method on) 396.59 469.62 T
4 10 Q
(<object>) 99.65 455.62 T
1 11 Q
( is applicable, because) 147.65 455.62 T
4 10 Q
(7) 257.63 455.62 T
1 11 Q
( is an instance of) 263.63 455.62 T
4 10 Q
(<object>) 346.72 455.62 T
1 11 Q
( \050the method\325s) 394.72 455.62 T
(parameter specializer\051; the method on) 99.65 441.62 T
4 10 Q
(<integer>) 286.96 441.62 T
1 11 Q
( also is applicable, because) 340.96 441.62 T
4 10 Q
(7) 473.05 441.62 T
1 11 Q
( is) 479.05 441.62 T
(an instance of) 99.65 427.62 T
4 10 Q
(<integer>) 169.38 427.62 T
1 11 Q
( \050the method\325s parameter specializer\051.) 223.38 427.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 226.25 495.65 234.24 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.4) 141.48 237.57 T
8 F
(The) 194.28 237.57 T
4 F
(say-greeting) 214.29 237.57 T
8 F
( gener) 286.29 237.57 T
(ic function and its methods) 314.79 237.57 T
(.) 433.03 237.57 T
0 0 0 1 0 0 0 K
99.65 250.24 495.65 406.95 C
99.65 254.24 495.65 404.95 C
0 0 28 386 163 386 135 104.65 263.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-4.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-4 .eps)%%CreationDate: (6/5/96) (10:40 AM)%%BoundingBox: 0 28 386 163%%HiResBoundingBox: 1.0083 28.3417 384.4917 163.6583%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -34.6667 294.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D384.1667 28.6667 m384.1667 163.3333 L1.3333 163.3333 L1.3333 28.6667 L384.1667 28.6667 Lb1 g1 w277.3333 135.6667 m277.3333 152.6667 L117.8333 152.6667 L117.8333 135.6667 L277.3333 135.6667 Lf0 R0 G0.65 w375.3333 85.1667 m375.3333 123.6667 L10.3333 123.6667 L10.3333 85.1667 L375.3333 85.1667 Lb375.3333 37.6667 m375.3333 76.1667 L10.3333 76.1667 L10.3333 37.6667 L375.3333 37.6667 Lb0 To1 0 0 1 198.3333 141.1667 0 TpTP-74.3263 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(say-greet) Tx 0 40 Tk (ing) Tx (\r) TX TO0 To1 0 0 1 16.8333 111.6667 0 TpTP0 Tr0 Ta10 0 Tl(define method say-greeting \(greeting :: <object>\)\r) Tx T*(  format-out\("%s\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TO0 To1 0 0 1 16.8333 65.4167 0 TpTP0 Tr(define method say-greeting \(greeting :: <integer>\)\r) Tx T*(  format-out\("Your lucky number is %s.\\n", greeting\);\r) Tx T*(end;\003) Tx T*(\r) Tx TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 250.24 495.65 406.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 78
%%Page: "65" 79
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.5 Method dispatch) 434.64 702.62 T
2 F
(65) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(5.5.2  Step 2: Sor) 99.65 493.29 T
(t applicab) 185.77 493.29 T
(le methods b) 235.45 493.29 T
(y speci\336city) 301.01 493.29 T
1 11 Q
(Start with the set of applicable methods. Compar) 99.65 473.63 T
(e the parameter specializers of) 337.45 473.63 T
-0.14 (the methods. If one type is a subtype of the other) 99.65 459.63 P
-0.14 (, the method whose parameter is) 334.77 459.63 P
(of the subtype is) 99.65 445.63 T
2 F
(more speci\336c) 182.4 445.63 T
1 F
( than the other method. Sort the list of applicable) 248.08 445.63 T
(methods fr) 99.65 431.63 T
(om most speci\336c to least speci\336c.) 152.57 431.63 T
-0.14 (Let\325s continue with the example of calling) 126.65 417.63 P
4 10 Q
-0.32 (say-greeting) 331.6 417.63 P
1 11 Q
-0.14 ( with an ar) 403.6 417.63 P
-0.14 (gument) 455.32 417.63 P
-0.43 (of) 99.65 403.63 P
4 10 Q
-0.94 (7) 111.63 403.63 P
1 11 Q
-0.43 (. The parameter specializers of the two methods ar) 117.63 403.63 P
-0.43 (e) 359.48 403.63 P
4 10 Q
-0.94 (<objec) 367.07 403.63 P
1 11 Q
-0.43 (t> and) 403.07 403.63 P
4 10 Q
-0.94 (<integer>) 436.58 403.63 P
1 11 Q
-0.43 (.) 490.58 403.63 P
(Because) 99.65 389.63 T
4 10 Q
(<integer>) 141.34 389.63 T
1 11 Q
( is a subtype of) 195.34 389.63 T
4 10 Q
(<object>) 271.08 389.63 T
1 11 Q
(, the method on) 319.08 389.63 T
4 10 Q
(<integer>) 398.2 389.63 T
1 11 Q
( is mor) 452.2 389.63 T
(e) 485.43 389.63 T
(speci\336c than the method on) 99.65 375.63 T
4 10 Q
(<object>) 236.82 375.63 T
1 11 Q
(.) 284.82 375.63 T
3 13 Q
(5.5.3  Step 3: Call the most speci\336c method) 99.65 344.29 T
1 11 Q
(The generic function calls the most speci\336c method.) 99.65 324.63 T
3 13 Q
(5.5.4  Precedence in method dispatc) 99.65 293.29 T
(h) 283.23 293.29 T
1 11 Q
(This conceptual description of how method dispatch works should help you to) 99.65 273.63 T
-0.17 (understand how to design methods. The most important concept to r) 99.65 259.63 P
-0.17 (ealize is that) 433.04 259.63 P
(method dispatch should feel natural \321 it gives pr) 99.65 245.63 T
(ecedence to the methods that) 341.12 245.63 T
-0.33 (ar) 99.65 231.63 P
-0.33 (e mor) 109.29 231.63 P
-0.33 (e closely r) 136.85 231.63 P
-0.33 (elated to the ar) 184.44 231.63 P
-0.33 (gument, rather than to the methods that ar) 255.74 231.63 P
-0.33 (e mor) 460.41 231.63 P
-0.33 (e) 487.96 231.63 P
(general. This pr) 99.65 217.63 T
(ecedence or) 175.77 217.63 T
(dering lets you adjust the behavior of a class with) 232.64 217.63 T
(r) 99.65 203.63 T
(espect to that class\325s super) 103.79 203.63 T
(classes.) 231.7 203.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Argument) 213.19 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicab) 308.64 643.62 T
(le method\050s\051) 350.61 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(7) 189.49 619.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 296.57 618.62 T
4 10 Q
(<object>) 351.6 618.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 296.57 602.62 T
4 10 Q
(<integer>) 351.6 602.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($pi) 189.49 580.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 296.57 579.62 T
4 10 Q
(<object>) 351.6 579.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("hello, world") 189.49 557.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 296.57 556.62 T
4 10 Q
(<object>) 351.6 556.62 T
0 0 0 1 0 0 0 K
99.65 518.96 513.65 526.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 134.66 530.29 T
(ab) 139.97 530.29 T
(le 5.2) 151.54 530.29 T
8 F
(Applicab) 182.12 530.29 T
(le methods f) 220.27 530.29 T
(or diff) 274.44 530.29 T
(erent arguments to) 299.15 530.29 T
4 F
(say-greeting) 385.86 530.29 T
8 F
(.) 457.86 530.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
183.49 658.83 183.49 547.08 2 L
V
0.25 H
0 Z
N
429.8 658.83 429.8 547.08 2 L
V
N
183.37 658.95 429.93 658.95 2 L
V
N
183.37 631.95 429.93 631.95 2 L
V
N
183.37 546.95 429.93 546.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 79
%%Page: "66" 80
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(66) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(5.6  De\336nition of a g) 99.65 519.95 T
(eneric function) 216.65 519.95 T
1 11 Q
(W) 99.65 499.62 T
(e r) 109.64 499.62 T
(epeat the de\336nitions of the methods for) 121.8 499.62 T
4 10 Q
(say-time-of-day) 315.95 499.62 T
1 11 Q
( and) 405.95 499.62 T
4 10 Q
(say-time-) 430.08 499.62 T
(offset) 99.65 485.62 T
1 11 Q
( her) 135.65 485.62 T
(e:) 154.22 485.62 T
4 9 Q
(define method say-time-of-day \050time :: <time-of-day>\051 => \050\051) 99.65 464.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 453.95 T
(format-out) 110.45 442.95 T
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 121.25 431.95 T
(end method say-time-of-day;) 99.65 420.95 T
(define method say-time-offset \050time :: <time-offset>\051 => \050\051) 99.65 401.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 390.95 T
(format-out\050"%s %d:%s%d",) 110.45 379.95 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 169.85 368.95 T
(hours,) 169.85 357.95 T
(if \050minutes < 10\051 "0" else "" end,) 169.85 346.95 T
(minutes\051;) 169.85 335.95 T
(end method say-time-offset;) 99.65 324.95 T
1 11 Q
(Now that) 99.65 304.62 T
4 10 Q
(decode-total-seconds) 148.54 304.62 T
1 11 Q
( has an applicable method for instances of) 268.54 304.62 T
4 10 Q
(<time-offset>) 99.65 290.62 T
1 11 Q
( and) 177.65 290.62 T
4 10 Q
(<time-of-day>) 201.77 290.62 T
1 11 Q
(, both these methods work corr) 279.77 290.62 T
(ectly:) 430.92 290.62 T
6 9 Q
(?) 99.65 269.95 T
4 F
(say-time-of-day\050*my-time-of-day*\051;) 110.45 269.95 T
6 F
(0:02) 99.65 258.95 T
(?) 99.65 239.95 T
4 F
(say-time-of-day\050*your-time-of-day*\051;) 110.45 239.95 T
6 F
(8:30) 99.65 228.95 T
(?) 99.65 209.95 T
4 F
(say-time-offset\050*my-time-offset*\051;) 110.45 209.95 T
6 F
(plus 15:20) 99.65 198.95 T
(?) 99.65 179.95 T
4 F
(say-time-offset\050*your-time-offset*\051;) 110.45 179.95 T
6 F
(minus 6:45) 99.65 168.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Performance note:) 132.65 645.62 T
1 F
( The Dylan compiler and r) 223.71 645.62 T
(un-time system ensur) 351.71 645.62 T
(e) 456.81 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (that the method-dispatch r) 132.65 631.62 P
-0.17 (ules ar) 261.91 631.62 P
-0.17 (e followed for every call to a generic) 293.9 631.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function. Given accurate type declarations, however) 132.65 617.62 T
(, a compiler can) 385.48 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(usually compute the r) 132.65 603.62 T
(esult of the dispatch r) 238.95 603.62 T
(ules at compile time, so) 344.06 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the executed code is just as ef) 132.65 589.62 T
(\336cient as a normal function call in a lan-) 274.81 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(guage without generic functions and methods. See Chapter 19,) 132.65 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(Performance and Flexibility) 132.65 561.62 T
1 F
(.) 255.9 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 554.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 554.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 553.95 477.77 553.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 80
%%Page: "67" 81
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.6 Definition of a generic function) 378.22 702.62 T
2 F
(67) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(e have de\336ned two methods:) 109.64 665.62 T
4 10 Q
(say-time-offset) 252.96 665.62 T
1 11 Q
( and) 342.95 665.62 T
4 10 Q
(say-time-of-day) 367.08 665.62 T
1 11 Q
(. A) 455.86 665.62 T
(method de\336ned with) 99.65 651.62 T
4 10 Q
(define method) 204.99 651.62 T
1 11 Q
( cannot exist without a) 282.99 651.62 T
2 F
(generic function) 396.01 651.62 T
1 F
(.) 478.19 651.62 T
(When you de\336ne a method, and no generic function of that name exists, Dylan) 99.65 637.62 T
(automatically cr) 99.65 623.62 T
(eates a generic function. When we de\336ned these two methods,) 178.06 623.62 T
-0.03 (ther) 99.65 609.62 P
-0.03 (e wer) 119.05 609.62 P
-0.03 (e no generic functions with those names de\336ned, so Dylan cr) 145.63 609.62 P
-0.03 (eated mod-) 440.48 609.62 P
(ule variables named) 99.65 595.62 T
4 10 Q
(say-time-of-day) 200.58 595.62 T
1 11 Q
( and) 290.58 595.62 T
4 10 Q
(say-time-offset) 314.71 595.62 T
1 11 Q
(, cr) 404.71 595.62 T
(eated the) 419.24 595.62 T
(generic functions, stor) 99.65 581.62 T
(ed the generic functions in the module variables, and) 207.23 581.62 T
(added the methods to the generic functions.) 99.65 567.62 T
(These two methods ar) 126.65 553.62 T
(e logically r) 234.02 553.62 T
(elated to each other) 290.36 553.62 T
(, but have no explicit) 384.6 553.62 T
(r) 99.65 539.62 T
(elationship in the code, other than in the similarity of their names. A cleaner) 103.79 539.62 T
-0.07 (appr) 99.65 525.62 P
-0.07 (oach is to abstract the concept of what these methods ar) 122.52 525.62 P
-0.07 (e trying to do \321 that) 392.14 525.62 P
(is, to describe an object. T) 99.65 511.62 T
(o intr) 222.83 511.62 T
(oduce this abstraction, we de\336ne a new generic) 248.92 511.62 T
(function.) 99.65 497.62 T
(W) 126.65 483.62 T
(e use) 136.64 483.62 T
4 10 Q
(define generic) 163.97 483.62 T
1 11 Q
( to de\336ne the generic function explicitly:) 247.97 483.62 T
5 9 Q
(// Given an object, print a description of the object) 99.65 462.95 T
4 F
(define generic say \050any-object :: <object>\051 => \050\051;) 99.65 451.95 T
1 11 Q
(This generic function has a name:) 99.65 431.62 T
4 10 Q
(say) 265.12 431.62 T
1 11 Q
(. It r) 281.9 431.62 T
(eceives one ar) 301.59 431.62 T
(gument: the object to) 369.18 431.62 T
-0.05 (describe. That ar) 99.65 417.62 P
-0.05 (gument must be of the type) 180.12 417.62 P
4 10 Q
-0.1 (<object>) 316.52 417.62 P
1 11 Q
-0.05 (. All objects ar) 364.52 417.62 P
-0.05 (e of the type) 433.05 417.62 P
4 10 Q
(<object>) 99.65 403.62 T
1 11 Q
(, so this generic function does not r) 147.65 403.62 T
(estrict the type of its ar) 317.23 403.62 T
(gument.) 428.13 403.62 T
(Our de\336nition for the generic function) 126.65 389.62 T
4 10 Q
(say) 315.75 389.62 T
1 11 Q
( is similar to that of the generic) 333.75 389.62 T
(function that Dylan would have cr) 99.65 375.62 T
(eated automatically if we had de\336ned a) 267.13 375.62 T
-0.37 (method for) 99.65 361.62 P
4 10 Q
-0.8 (say) 156.13 361.62 P
1 11 Q
-0.37 ( befor) 174.13 361.62 P
-0.37 (e we de\336ned the generic function) 201.68 361.62 P
4 10 Q
-0.8 (say) 364.24 361.62 P
1 11 Q
-0.37 (. \050The only dif) 381.02 361.62 P
-0.37 (fer) 448.11 361.62 P
-0.37 (ence is) 461.19 361.62 P
(that the automatically de\336ned generic function would have a mor) 99.65 347.62 T
(e general value) 419.14 347.62 T
(declaration.\051 However) 99.65 333.62 T
(, de\336ning the generic function explicitly enables us to for-) 208.04 333.62 T
(malize its purpose, to name the parameter) 99.65 319.62 T
(, to specify a type constraint on the) 303.93 319.62 T
(parameter) 99.65 305.62 T
(, to specify the r) 148.97 305.62 T
(eturn values and their types, and to give comments) 226.13 305.62 T
(about the generic function as a whole. The generic function de\336nes the) 99.65 291.62 T
2 F
(contract) 445.36 291.62 T
1 F
(that all methods for this generic function must obey) 99.65 277.62 T
(. The contract of the) 349.96 277.62 T
4 10 Q
(say) 449 277.62 T
1 11 Q
(generic function is as follows:) 99.65 263.62 T
-0.05 (The) 126.65 245.62 P
4 10 Q
-0.11 (say) 147.76 245.62 P
1 11 Q
-0.05 ( generic function r) 165.76 245.62 P
-0.05 (eceives one r) 254.27 245.62 P
-0.05 (equir) 316.26 245.62 P
-0.05 (ed ar) 341.67 245.62 P
-0.05 (gument, which must be of) 366.01 245.62 P
(the type) 126.65 231.62 T
4 10 Q
(<object>) 168.99 231.62 T
1 11 Q
(. It prints a description of the object. The) 216.99 231.62 T
4 10 Q
(say) 415.47 231.62 T
1 11 Q
( generic) 433.47 231.62 T
(function r) 126.65 217.62 T
(eturns no values.) 174.32 217.62 T
(Dylan r) 99.65 197.62 T
(equir) 136.28 197.62 T
(es all the methods for a generic function to have congr) 161.69 197.62 T
(uent parame-) 425.06 197.62 T
(ter lists and values declarations. See Section 12.2.5, page 176.) 99.65 183.62 T
(Now) 126.65 169.62 T
(, we de\336ne two methods for) 149.96 169.62 T
4 10 Q
(say) 289.11 169.62 T
1 11 Q
(. The method for) 305.89 169.62 T
4 10 Q
(say) 389.76 169.62 T
1 11 Q
( on) 407.76 169.62 T
4 10 Q
(<time-of-) 425.67 169.62 T
(day>) 99.65 155.62 T
1 11 Q
( ful\336lls the same purpose \050and has the same body\051 as the) 123.65 155.62 T
4 10 Q
(say-time-of-day) 401.67 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 81
%%Page: "68" 82
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(68) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(method, which we r) 99.65 665.62 T
(emove fr) 197 665.62 T
(om the library with an editor or a gestur) 240.03 665.62 T
(e in the) 435.46 665.62 T
(envir) 99.65 651.62 T
(onment.) 124.88 651.62 T
4 9 Q
(define method say \050time :: <time-of-day>\051 => \050\051) 99.65 630.95 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 619.95 T
(format-out) 110.45 608.95 T
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 121.25 597.95 T
(end method say;) 99.65 586.95 T
1 11 Q
(Similarly) 99.65 566.62 T
(, the method for) 142.68 566.62 T
4 10 Q
(say) 223.4 566.62 T
1 11 Q
( on) 241.4 566.62 T
4 10 Q
(<time-offset>) 259.31 566.62 T
1 11 Q
( is intended to r) 337.31 566.62 T
(eplace) 413.48 566.62 T
4 10 Q
(say-) 446.96 566.62 T
(time-offset) 99.65 552.62 T
1 11 Q
(, which we r) 165.65 552.62 T
(emove.) 225.3 552.62 T
4 9 Q
(define method say \050time :: <time-offset>\051 => \050\051) 99.65 531.95 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 520.95 T
(format-out\050"%s %d:%s%d",) 110.45 509.95 T
(if \050past?\050time\051\051 "minus" else "plus" end,) 169.85 498.95 T
(hours,) 169.85 487.95 T
(if \050minutes < 10\051 "0" else "" end,) 169.85 476.95 T
(minutes\051;) 169.85 465.95 T
(end method say-time-offset;) 99.65 454.95 T
1 11 Q
(Figur) 99.65 428.62 T
(e 5.5 shows that the generic function) 125.86 428.62 T
4 10 Q
(say) 305.63 428.62 T
1 11 Q
( has two methods de\336ned for it.) 323.63 428.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 155.96 495.65 163.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 5.5) 179.12 167.29 T
8 F
(Methods f) 231.92 167.29 T
(or the) 275.53 167.29 T
4 F
(say) 303.88 167.29 T
8 F
( gener) 321.88 167.29 T
(ic function.) 350.38 167.29 T
0 0 0 1 0 0 0 K
99.65 179.95 495.65 407.95 C
99.65 183.95 495.65 405.95 C
0 0 -47 391 163 391 210 102.15 189.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f5-5.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f5-5 .eps)%%CreationDate: (6/6/96) (2:04 PM)%%BoundingBox: 0 -47 391 163%%HiResBoundingBox: 1.0083 -46.6583 389.4917 163.6583%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 193.3333 -5.3333 193.3333 -5.3333%AI3_TileBox: -81.6667 -370.3333 470.3333 359.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -34.6667 282.6667 2 1020 726 18 1 1 2 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4126.6667 4314.6667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Artwork) Ln0 A1 Ap0 O0.9 g0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D389.1667 -46.3333 m389.1667 163.3333 L1.3333 163.3333 L1.3333 -46.3333 L389.1667 -46.3333 Lb1 g1 w255.3333 135.6667 m255.3333 152.6667 L141.3333 152.6667 L141.3333 135.6667 L255.3333 135.6667 Lf0 R0 G0.65 w380.3333 62.9167 m380.3333 123.6667 L10.3333 123.6667 L10.3333 62.9167 L380.3333 62.9167 Lb380.3333 -37.3333 m380.3333 53.9167 L10.3333 53.9167 L10.3333 -37.3333 L380.3333 -37.3333 Lb0 To1 0 0 1 198.3333 141.1667 0 TpTP-50.2122 0 Td0 Tr0 g1 w/_Helvetica 11 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq11 0 Tl0 Tc0 Tw(Gener) Tx 0 -60 Tk (ic funct) Tx 0 -40 Tk (ion ) Tx /_Courier-Bold 9 Tf(say) Tx (\r) TX TO0 To1 0 0 1 15.8333 111.6667 0 TpTP0 Tr0 Ta10 0 Tl(define method say \(time :: <time-of-day>\) => \(\)\r) Tx T*(  let \(hours, minutes\) = decode-total-seconds\(time\);\r) Tx T*(  format-out\r) Tx T*(    \("%d:%s%d", hours, if \(minutes < 10\) "0" else "" end, minutes\);\r) Tx T*(end method say;\r) Tx T*(\r) Tx TO0 To1 0 0 1 16.8333 43.1667 0 TpTP0 Tr(define method say \(time :: <time-offset>\) => \(\)\r) Tx T*(  let\(hours, minutes\) = decode-total-seconds\(time\);\r) Tx T*(  format-out\("%s %d:%s%d",\r) Tx T*(             if \(past?\(time\)\) "minus" else "plus" end,\r) Tx T*(             hours,\r) Tx T*(             if \(minutes < 10\) "0" else "" end,\r) Tx T*(             minutes\);\r) Tx T*(end method say-time-offset;) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 179.95 495.65 407.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 82
%%Page: "69" 83
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.7 Use of) 322.07 702.62 T
5 F
(next-method) 362.71 702.62 T
0 F
( to call another method) 425.41 702.62 T
2 F
(69) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(e can call) 109.64 665.62 T
4 10 Q
(say) 156.73 665.62 T
1 11 Q
(:) 174.73 665.62 T
6 9 Q
(?) 99.65 644.95 T
4 F
(say\050*my-time-of-day*\051;) 110.45 644.95 T
6 F
(0:02) 99.65 633.95 T
1 11 Q
(In the pr) 99.65 607.62 T
(eceding call, the ar) 141.27 607.62 T
(gument is of the type) 231.82 607.62 T
4 10 Q
(<time-of-day>) 337.67 607.62 T
1 11 Q
(, so the method) 415.67 607.62 T
(on) 99.65 593.62 T
4 10 Q
(<time-of-day>) 114.81 593.62 T
1 11 Q
( is the only applicable method. That method is invoked.) 192.81 593.62 T
6 9 Q
(?) 99.65 572.95 T
4 F
(say\050*my-time-offset*\051;) 110.45 572.95 T
6 F
(plus 15:20) 99.65 561.95 T
1 11 Q
(In the pr) 99.65 535.62 T
(eceding call, the ar) 141.27 535.62 T
(gument is of the type) 231.82 535.62 T
4 10 Q
(<time-offset>) 337.67 535.62 T
1 11 Q
(, so the method) 415.67 535.62 T
(on) 99.65 521.62 T
4 10 Q
(<time-offset>) 114.81 521.62 T
1 11 Q
( is the only applicable method. That method is invoked.) 192.81 521.62 T
3 15 Q
(5.7  Use of) 99.65 481.95 T
4 14 Q
(next-method) 164.6 481.95 T
3 15 Q
( to call another method) 257 481.95 T
1 11 Q
(Notice that ther) 99.65 461.62 T
(e is duplication of code in the two methods for) 175.71 461.62 T
4 10 Q
(say) 404.84 461.62 T
1 11 Q
(, as shown in) 421.62 461.62 T
(Figur) 99.65 447.62 T
(e 5.5. Both methods call) 125.86 447.62 T
4 10 Q
(decode-total-seconds) 243.24 447.62 T
1 11 Q
( to get the hours and min-) 363.24 447.62 T
(utes, and call) 99.65 433.62 T
4 10 Q
(format-out) 166.21 433.62 T
1 11 Q
( to print the hours and minutes. Both methods print a) 226.21 433.62 T
(leading zer) 99.65 419.62 T
(o for the minutes, if appr) 153.72 419.62 T
(opriate. These two tasks ar) 274.7 419.62 T
(e all that the) 404.26 419.62 T
(method on) 99.65 405.62 T
4 10 Q
(<time-of-day>) 155.25 405.62 T
1 11 Q
( does. The method on) 233.25 405.62 T
4 10 Q
(<time-offset>) 340.93 405.62 T
1 11 Q
( does a bit) 418.93 405.62 T
(mor) 99.65 391.62 T
(e; it prints either) 119.51 391.62 T
4 10 Q
(minus) 202.2 391.62 T
1 11 Q
( or) 232.2 391.62 T
4 10 Q
(plus) 248.05 391.62 T
1 11 Q
(, depending on the value of the) 272.05 391.62 T
4 10 Q
(past?) 426.17 391.62 T
1 11 Q
( slot.) 456.17 391.62 T
(W) 99.65 377.62 T
(e can eliminate this duplication by de\336ning another method that does the) 109.64 377.62 T
(shar) 99.65 363.62 T
(ed work. This method will be on the) 120.36 363.62 T
4 10 Q
(<time>) 299.24 363.62 T
1 11 Q
( class, so it will be applicable to) 335.24 363.62 T
(instances of) 99.65 349.62 T
4 10 Q
(<time-of-day>) 159.39 349.62 T
1 11 Q
( and) 237.39 349.62 T
4 10 Q
(<time-offset>) 261.51 349.62 T
1 11 Q
(. The method for) 339.51 349.62 T
4 10 Q
(<time-of-) 423.39 349.62 T
(day>) 99.65 335.62 T
1 11 Q
( is no longer needed, because the new method does the same work. How-) 123.65 335.62 T
(ever) 99.65 321.62 T
(, a r) 119.93 321.62 T
(evised method for) 137.83 321.62 T
4 10 Q
(<time-offset>) 229.13 321.62 T
1 11 Q
( is needed, to do the extra work of) 307.13 321.62 T
-0.14 (printing) 99.65 307.62 P
4 10 Q
-0.29 (minus) 142.13 307.62 P
1 11 Q
-0.14 ( or) 172.13 307.62 P
4 10 Q
-0.29 (plus) 187.71 307.62 P
1 11 Q
-0.14 (, and to call the method on) 211.71 307.62 P
4 10 Q
-0.29 (<time>) 343.12 307.62 P
1 11 Q
-0.14 (, which is the next most) 379.12 307.62 P
(speci\336c method.) 99.65 293.62 T
-0.33 (Y) 126.65 279.62 P
-0.33 (ou can use the) 132.97 279.62 P
4 10 Q
-0.71 (next-method) 203.91 279.62 P
1 11 Q
-0.33 ( function to call the next most speci\336c method.) 269.91 279.62 P
(Recall that the r) 99.65 265.62 T
(esult of Dylan\325s method dispatch pr) 175.78 265.62 T
(ocedur) 350.03 265.62 T
(e is a list of applicable) 383.69 265.62 T
-0.31 (methods, sorted by speci\336city) 99.65 251.62 P
-0.31 (. When one method calls the) 242.71 251.62 P
4 10 Q
-0.68 (next-method) 381.24 251.62 P
1 11 Q
-0.31 ( function,) 447.24 251.62 P
(Dylan consults the list of sorted methods and invokes the next most speci\336c) 99.65 237.62 T
(method on the list. \050It is an err) 99.65 223.62 T
(or to call) 246.15 223.62 T
4 10 Q
(next-method) 291.12 223.62 T
1 11 Q
( fr) 357.12 223.62 T
(om the least speci\336c) 367.68 223.62 T
(method.\051) 99.65 209.62 T
(W) 126.65 195.62 T
(e r) 136.64 195.62 T
(emove the de\336nitions of the existing) 148.8 195.62 T
4 10 Q
(say) 328.18 195.62 T
1 11 Q
( methods, and de\336ne these) 346.18 195.62 T
(new methods:) 99.65 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 83
%%Page: "70" 84
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(70) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method say \050time :: <time>\051 => \050\051) 99.65 666.95 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 110.45 655.95 T
(format-out) 110.45 644.95 T
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 121.25 633.95 T
(end method say;) 99.65 622.95 T
(define method say \050time :: <time-offset>\051) 99.65 603.95 T
(format-out\050"%s ", if \050past?\050time\051\051 "minus" else "plus" end\051;) 110.45 592.95 T
(next-method\050\051;) 110.45 581.95 T
(end method say;) 99.65 570.95 T
1 11 Q
(W) 99.65 550.62 T
(e can call) 109.64 550.62 T
4 10 Q
(say) 156.73 550.62 T
1 11 Q
(:) 174.73 550.62 T
6 9 Q
(?) 99.65 529.95 T
4 F
(say\050*my-time-of-day*\051;) 110.45 529.95 T
6 F
(0:02) 99.65 518.95 T
1 11 Q
(In the pr) 99.65 498.62 T
(eceding call, the ar) 141.27 498.62 T
(gument is of the type) 231.82 498.62 T
4 10 Q
(<time-of-day>) 337.67 498.62 T
1 11 Q
(, so the method) 415.67 498.62 T
(on) 99.65 484.62 T
4 10 Q
(<time>) 114.81 484.62 T
1 11 Q
( is the only applicable method. That method is invoked.) 150.81 484.62 T
6 9 Q
(?) 99.65 463.95 T
4 F
(say\050*my-time-offset*\051;) 110.45 463.95 T
6 F
(plus 15:20) 99.65 452.95 T
1 11 Q
-0.4 (In the pr) 99.65 432.62 P
-0.4 (eceding call, the ar) 140.48 432.62 P
-0.4 (gument is of the type) 229.84 432.62 P
4 10 Q
-0.87 (<time-offset>) 333.69 432.62 P
1 11 Q
-0.4 (, so two methods) 411.69 432.62 P
-0.45 (ar) 99.65 418.62 P
-0.45 (e applicable. The method on) 109.29 418.62 P
4 10 Q
-0.99 (<time-offset>) 247.38 418.62 P
1 11 Q
-0.45 ( is mor) 325.39 418.62 P
-0.45 (e speci\336c than is the method) 357.71 418.62 P
(on) 99.65 404.62 T
4 10 Q
(<time>) 114.81 404.62 T
1 11 Q
(, so the method on) 150.81 404.62 T
4 10 Q
(<time-offset>) 243.34 404.62 T
1 11 Q
( is called. That method on) 321.34 404.62 T
4 10 Q
(<time-) 449.57 404.62 T
(offset>) 99.65 390.62 T
1 11 Q
( prints) 141.65 390.62 T
4 10 Q
(minus) 175.96 390.62 T
1 11 Q
( or) 205.96 390.62 T
4 10 Q
(plus) 221.81 390.62 T
1 11 Q
(, and calls) 245.81 390.62 T
4 10 Q
(next-method) 296.88 390.62 T
1 11 Q
(. The) 362.88 390.62 T
4 10 Q
(next-method) 389.55 390.62 T
1 11 Q
( func-) 455.55 390.62 T
(tion calls the method on) 99.65 376.62 T
4 10 Q
(<time>) 219.4 376.62 T
1 11 Q
(, which prints the hours and minutes.) 255.4 376.62 T
-0.37 (Using) 126.65 362.62 P
4 10 Q
-0.82 (next-method) 157.96 362.62 P
1 11 Q
-0.37 ( is convenient in cases such as this, wher) 223.96 362.62 P
-0.37 (e a method on a) 417.4 362.62 P
(super) 99.65 348.62 T
(class can do most of the work, but a method on a subclass needs to do addi-) 126.97 348.62 T
(tional work.) 99.65 334.62 T
(When) 126.65 320.62 T
4 10 Q
(next-method) 158.47 320.62 T
1 11 Q
( is called with no ar) 224.47 320.62 T
(guments, as it is in the method on) 319.28 320.62 T
4 10 Q
(<time-offset>) 99.65 306.62 T
1 11 Q
(, Dylan calls the next most speci\336c method with the same ar) 177.65 306.62 T
(gu-) 468.27 306.62 T
(ments pr) 99.65 292.62 T
(ovided to the method that calls) 142.79 292.62 T
4 10 Q
(next-method) 296.49 292.62 T
1 11 Q
(.) 362.49 292.62 T
(Y) 126.65 278.62 T
(ou can pr) 132.97 278.62 T
(ovide ar) 178.66 278.62 T
(guments to) 218.46 278.62 T
4 10 Q
(next-method) 275.94 278.62 T
1 11 Q
(. For example, you could pr) 341.94 278.62 T
(o-) 475.85 278.62 T
-0.19 (vide a keywor) 99.65 264.62 P
-0.19 (d ar) 168.51 264.62 P
-0.19 (gument with a value that each method can manipulate \050such as) 187.43 264.62 P
(adding a value to a number) 99.65 250.62 T
(, or appending an element to a list\051. If you pr) 233.1 250.62 T
(ovide) 450.18 250.62 T
(ar) 99.65 236.62 T
(guments to) 109.29 236.62 T
4 10 Q
(next-method) 166.77 236.62 T
1 11 Q
(, the ar) 232.77 236.62 T
(guments must be compatible with the generic) 265.92 236.62 T
(function, as described in Section 12.2.5, page 176. In addition, you cannot supply) 99.65 222.62 T
-0.13 (r) 99.65 208.62 P
-0.13 (equir) 103.79 208.62 P
-0.13 (ed ar) 129.21 208.62 P
-0.13 (guments that have classes dif) 153.47 208.62 P
-0.13 (fer) 295.04 208.62 P
-0.13 (ent fr) 308.12 208.62 P
-0.13 (om those of the original r) 333.81 208.62 P
-0.13 (equir) 455.62 208.62 P
-0.13 (ed) 481.03 208.62 P
(ar) 99.65 194.62 T
(guments to the generic function, if doing so would have changed the method) 109.29 194.62 T
(dispatch in any way) 99.65 180.62 T
(. Pr) 196.66 180.62 T
(oviding ar) 212.95 180.62 T
(guments to) 263.21 180.62 T
4 10 Q
(next-method) 320.68 180.62 T
1 11 Q
( is an advanced tech-) 386.68 180.62 T
(nique; see Section 12.2.3, page 172, and Section 17.2.2, page 260.) 99.65 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 84
%%Page: "71" 85
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.8 The time library \050so far\051) 406.92 702.62 T
2 F
(71) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(5.8  The time librar) 99.65 662.95 T
(y \050so far\051) 208.47 662.95 T
1 11 Q
(In the course of intr) 99.65 642.62 T
(oducing methods, classes, and generic functions, we have cr) 194.82 642.62 T
(e-) 486.65 642.62 T
(ated elements of a library dealing with two kinds of time. Now) 99.65 628.62 T
(, we constr) 404.45 628.62 T
(uct a) 456.94 628.62 T
(simple library containing those elements \050we will continue to develop the time) 99.65 614.62 T
(library thr) 99.65 600.62 T
(oughout this book\051. W) 149.32 600.62 T
(e r) 257.42 600.62 T
(epr) 269.59 600.62 T
(esent the time library in four \336les: a LID) 285.61 600.62 T
(\336le, a library \336le, a library implementation \336le, and a test \336le. W) 99.65 586.62 T
(e could have) 409.61 586.62 T
(expr) 99.65 572.62 T
(essed this library in thr) 121.35 572.62 T
(ee \336les, by combining into a single \336le the library) 233.32 572.62 T
(implementation \336le and the test \336le, but we decided that it would be clear) 99.65 558.62 T
(er to) 458.52 558.62 T
(separate the underlying implementation \050the de\336nitions of classes, methods, and) 99.65 544.62 T
(generic functions\051 fr) 99.65 530.62 T
(om the test \050wher) 197.55 530.62 T
(e we cr) 282.53 530.62 T
(eate instances and call) 316.78 530.62 T
4 10 Q
(say) 427.38 530.62 T
1 11 Q
( on them\051.) 445.38 530.62 T
(The library \336le de\336nes the) 99.65 406.62 T
4 10 Q
(time) 229.96 406.62 T
1 11 Q
( library and the) 253.96 406.62 T
4 10 Q
(time) 331.64 406.62 T
1 11 Q
( module.) 355.64 406.62 T
(The library implementation \336le de\336nes the classes, methods, and generic) 99.65 219.62 T
(functions.) 99.65 205.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The LID \336le:) 248.31 502.29 T
4 9 Q
(time.lid) 305 502.29 T
8 10 Q
(.) 348.2 502.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library: time) 105.65 482.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 463.95 T
( library) 148.85 463.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(library-implementation) 154.25 452.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(test) 154.25 441.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The libr) 228.88 378.29 T
(ar) 262.12 378.29 T
(y \336le:) 271.31 378.29 T
4 9 Q
(library.dylan) 297.43 378.29 T
8 10 Q
(.) 367.63 378.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 358.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library time) 105.65 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 328.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 317.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library time;) 105.65 306.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module time) 105.65 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 276.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module time;) 105.65 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 514.83 99.65 435.08 2 L
V
0.25 H
0 Z
N
513.65 514.83 513.65 435.08 2 L
V
N
99.52 514.95 513.77 514.95 2 L
V
N
99.52 494.95 513.77 494.95 2 L
V
N
99.52 434.95 513.77 434.95 2 L
V
N
99.65 390.83 99.65 248.08 2 L
V
N
513.65 390.83 513.65 248.08 2 L
V
N
99.52 390.95 513.77 390.95 2 L
V
N
99.52 370.95 513.77 370.95 2 L
V
N
99.52 247.95 513.77 247.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 85
%%Page: "72" 86
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(72) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
0 X
(The implementation \336le:) 168.19 646.29 T
4 9 Q
(library-implementation.dylan) 277.12 646.29 T
8 10 Q
(.) 428.32 646.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: time) 105.65 626.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Class definitions) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time> \050<object>\051) 105.65 588.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 116.45 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time>;) 105.65 566.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 105.65 547.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-of-day> \050<time>\051) 105.65 536.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-of-day>;) 105.65 525.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A relative time between -24:00 and +24:00) 105.65 506.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-offset> \050<time>\051) 105.65 495.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-offset>;) 105.65 484.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Method for determining whether a time offset is in the past) 105.65 465.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 105.65 454.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time.total-seconds < 0;) 116.45 443.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method past?;) 105.65 432.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Methods for encoding and decoding total seconds) 105.65 413.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method encode-total-seconds) 105.65 394.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 127.25 383.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=>) 111.05 372.95 T
(\050total-seconds :: <integer>\051) 127.25 372.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050\050hours * 60\051 + minutes\051 * 60 + seconds;) 116.45 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method encode-total-seconds;) 105.65 350.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method decode-total-seconds) 105.65 331.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050time :: <time>\051) 127.25 320.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 309.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050abs\050time.total-seconds\051\051;) 116.45 298.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 105.65 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method decode-total-seconds) 105.65 268.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050total-seconds :: <integer>\051) 127.25 257.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 246.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 116.45 235.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 116.45 224.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050hours, minutes, seconds\051;) 116.45 213.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 105.65 202.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 658.83 99.65 196.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 196.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 195.95 513.77 195.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 86
%%Page: "73" 87
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5.8 The time library \050so far\051) 406.92 702.62 T
2 F
(73) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The test \336le cr) 99.65 463.62 T
(eates instances and calls) 167.57 463.62 T
4 10 Q
(say) 287.51 463.62 T
1 11 Q
( on the instances. The test \336le can) 305.51 463.62 T
(access variables de\336ned in the implementation \336le, because both \336les ar) 99.65 449.62 T
(e in the) 448.24 449.62 T
4 10 Q
(time) 99.65 435.62 T
1 11 Q
( module.) 123.65 435.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// The say generic function and its methods) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Given an object, print a description of the object) 105.65 621.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic say \050any-object :: <object>\051 => \050\051;) 105.65 610.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time>\051 => \050\051) 105.65 591.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 116.45 580.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out) 116.45 569.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 127.25 558.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 547.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time-offset>\051) 105.65 528.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%s ", if \050past?\050time\051\051 "minus" else "plus" end\051;) 116.45 517.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 506.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 495.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The test \336le:) 242.63 402.29 T
4 9 Q
(test.dylan) 299.88 402.29 T
8 10 Q
(.) 353.88 402.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: time) 105.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *my-time-offset* :: <time-offset>) 105.65 363.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: encode-total-seconds\05015, 20, 10\051\051;) 116.45 352.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *your-time-offset* :: <time-offset>) 105.65 333.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: - encode-total-seconds\0506, 45, 30\051\051;) 116.45 322.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *my-time-of-day*) 105.65 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0500, 2, 0\051\051;) 116.45 292.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *your-time-of-day*) 105.65 273.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 116.45 262.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*my-time-offset*\051;) 105.65 243.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*your-time-offset*\051;) 105.65 224.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*my-time-of-day*\051;) 105.65 205.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*your-time-of-day*\051;) 105.65 186.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 141.84 660.29 T
4 9 Q
(library-implementation.dylan) 250.77 660.29 T
8 10 Q
(.) 401.97 660.29 T
9 F
( \050contin) 404.75 660.29 T
(ued\051) 437.44 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 489.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 489.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 488.95 513.77 488.95 2 L
V
N
99.65 414.83 99.65 180.08 2 L
V
N
513.65 414.83 513.65 180.08 2 L
V
N
99.52 414.95 513.77 414.95 2 L
V
N
99.52 394.95 513.77 394.95 2 L
V
N
99.52 179.95 513.77 179.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 87
%%Page: "74" 88
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(74) 63.65 702.62 T
0 F
(Chapter 5) 82.65 702.62 T
(Class Inheritance) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.42 (When we r) 99.65 665.62 P
-0.42 (un the) 152.09 665.62 P
4 10 Q
-0.91 (test.dylan) 185.05 665.62 P
1 11 Q
-0.42 ( \336le, Dylan cr) 245.05 665.62 P
-0.42 (eates two instances of) 308.69 665.62 P
4 10 Q
-0.91 (<time-offset>) 415.31 665.62 P
1 11 Q
-0.38 (and two instances of) 99.65 651.62 P
4 10 Q
-0.84 (<time-of-day>) 200.74 651.62 P
1 11 Q
-0.38 (. It calls) 278.74 651.62 P
4 10 Q
-0.84 (say) 317.33 651.62 P
1 11 Q
-0.38 ( on all four instances. The output) 335.33 651.62 P
(of the test is) 99.65 637.62 T
6 9 Q
(plus 15:20) 99.65 616.95 T
(minus 6:45) 99.65 605.95 T
(0:02) 99.65 594.95 T
(8:30) 99.65 583.95 T
3 15 Q
(5.9  Sum) 99.65 545.95 T
(mar) 150.24 545.95 T
(y) 172.92 545.95 T
1 11 Q
(In this chapter) 99.65 525.62 T
(, we cover) 168.89 525.62 T
(ed the following:) 218.11 525.62 T
(\245) 108.65 505.62 T
(W) 126.65 505.62 T
(e showed how to use class inheritance.) 136.64 505.62 T
(\245) 108.65 485.62 T
(W) 126.65 485.62 T
(e intr) 136.64 485.62 T
(oduced the terminology of classes: dir) 161.99 485.62 T
(ect subclass, subclass, dir) 346.53 485.62 T
(ect) 468.67 485.62 T
(super) 126.65 471.62 T
(class, super) 153.97 471.62 T
(class, dir) 209.71 471.62 T
(ect instance, indir) 252.19 471.62 T
(ect instance, instance, subtype,) 337.76 471.62 T
(and supertype.) 126.65 457.62 T
(\245) 108.65 437.62 T
(W) 126.65 437.62 T
(e showed how method dispatch works for a generic function with one) 136.64 437.62 T
(ar) 126.65 423.62 T
(gument, when ther) 136.29 423.62 T
(e is mor) 228.91 423.62 T
(e than one applicable method.) 267.42 423.62 T
(\245) 108.65 403.62 T
(W) 126.65 403.62 T
(e cr) 136.64 403.62 T
(eated a generic function explicitly \050with) 153.69 403.62 T
4 10 Q
(define generic) 349.27 403.62 T
1 11 Q
(\051.) 433.27 403.62 T
(\245) 108.65 383.62 T
(W) 126.65 383.62 T
(e used) 136.64 383.62 T
4 10 Q
(next-method) 170.69 383.62 T
1 11 Q
( to call the next most speci\336c method.) 236.69 383.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 88
%%Page: "75" 89
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(75) 292.9 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(6) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(6) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Multimethods) 100.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we show two important techniques. First, we de\336ne methods) 168.89 449.62 T
(for built-in generic functions \321 in this case, for the functions) 99.65 435.62 T
4 10 Q
(+) 397.04 435.62 T
1 11 Q
(,) 403.04 435.62 T
4 10 Q
(<) 408.54 435.62 T
1 11 Q
(, and) 414.54 435.62 T
4 10 Q
(=) 441.42 435.62 T
1 11 Q
(. Second,) 447.42 435.62 T
(we de\336ne multimethods. W) 99.65 421.62 T
(e describe how method dispatch works for) 234.09 421.62 T
(multimethods.) 99.65 407.62 T
3 15 Q
(6.1  Methods f) 99.65 367.95 T
(o) 181.44 367.95 T
(r the) 188.96 367.95 T
4 14 Q
(+) 219.03 367.95 T
3 15 Q
( g) 227.43 367.95 T
(eneric function) 238.49 367.95 T
1 11 Q
-0.33 (W) 99.65 347.62 P
-0.33 (e need to make it possible to add one time to another) 109.64 347.62 P
-0.33 (. W) 362.15 347.62 P
-0.33 (e could de\336ne a method) 377.31 347.62 P
(with a name such as) 99.65 333.62 T
4 10 Q
(add) 200.89 333.62 T
1 11 Q
( or) 218.89 333.62 T
4 10 Q
(plus) 234.74 333.62 T
1 11 Q
(. However) 258.74 333.62 T
(, the concept of adding times is the) 308.86 333.62 T
(same as the concept of adding numbers. Dylan alr) 99.65 319.62 T
(eady pr) 342.63 319.62 T
(ovides the + generic) 379.74 319.62 T
(function for adding numbers. Instead of inventing a new name for the addition) 99.65 305.62 T
(operation, we de\336ne new methods on the built-in generic function) 99.65 291.62 T
4 10 Q
(+) 424.69 291.62 T
1 11 Q
(. W) 430.69 291.62 T
(e can) 446.17 291.62 T
(extend) 99.65 277.62 T
4 10 Q
(+) 135.32 277.62 T
1 11 Q
( by de\336ning new methods for it. In certain languages, this technique is) 141.32 277.62 T
(called) 99.65 263.62 T
2 F
(operator overloading) 131.17 263.62 T
1 F
(.) 236.61 263.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 89
%%Page: "76" 90
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(76) 63.65 702.62 T
0 F
(Chapter 6) 82.65 702.62 T
(Multimethods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(6.1.1  Method f) 99.65 415.29 T
(or ad) 173.5 415.29 T
(ding tw) 199.48 415.29 T
(o time offsets) 236.59 415.29 T
1 11 Q
-0.1 (W) 99.65 395.62 P
-0.1 (e now de\336ne a method for) 109.64 395.62 P
4 10 Q
-0.22 (+) 239.91 395.62 P
1 11 Q
-0.1 (. The method adds two time of) 245.91 395.62 P
-0.1 (fsets and r) 394.28 395.62 P
-0.1 (eturns the) 444.19 395.62 P
(sum, which is also a time of) 99.65 381.62 T
(fset:) 233.95 381.62 T
5 9 Q
(// Method on <time-offset>, <time-offset>) 99.65 360.95 T
4 F
(define method \134+) 99.65 349.95 T
5 F
(// 1) 473.48 349.95 T
4 F
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 121.25 338.95 T
5 F
(// 2) 473.48 338.95 T
4 F
(=> \050sum :: <time-offset>\051) 105.05 327.95 T
5 F
(// 3) 473.48 327.95 T
4 F
(let sum = offset1.total-seconds + offset2.total-seconds;) 110.45 316.95 T
5 F
(// 4) 473.48 316.95 T
4 F
(make\050<time-offset>, total-seconds: sum\051;) 110.45 305.95 T
5 F
(// 5) 473.48 305.95 T
4 F
(end method \134+;) 99.65 294.95 T
5 F
(// 6) 473.48 294.95 T
1 11 Q
-0.04 (On line 1, notice that the method is de\336ned on) 99.65 274.62 P
4 10 Q
-0.08 (\134+) 326.83 274.62 P
1 11 Q
-0.04 (, rather than simply on) 338.83 274.62 P
4 10 Q
-0.08 (+) 452.4 274.62 P
1 11 Q
-0.04 (. When) 458.4 274.62 P
(we de\336ne a method on) 99.65 260.62 T
4 10 Q
(+) 213.76 260.62 T
1 11 Q
( or on another in\336x function, we need to use a backslash) 219.76 260.62 T
(befor) 99.65 246.62 T
(e the function name. The backslash clari\336es that we mean the value of the) 124.82 246.62 T
(variable + \050which is a generic function\051, and that we ar) 99.65 232.62 T
(e not trying to call the) 364.68 232.62 T
(function.) 99.65 218.62 T
(On line 4, we add the values stor) 126.65 204.62 T
(ed in the) 285.8 204.62 T
4 10 Q
(total-seconds) 330.9 204.62 T
1 11 Q
( slots of the two) 408.9 204.62 T
(instances. On line 5, we make and r) 99.65 190.62 T
(eturn a new instance of) 271.4 190.62 T
4 10 Q
(<time-offset>) 387.31 190.62 T
1 11 Q
(. W) 465.31 190.62 T
(e) 480.8 190.62 T
(initialize the) 99.65 176.62 T
4 10 Q
(total-seconds) 162.67 176.62 T
1 11 Q
( slot to contain the sum calculated in line 4.) 240.67 176.62 T
(T) 126.65 162.62 T
(o test the method, we need to cr) 132.38 162.62 T
(eate two instances of) 287.17 162.62 T
4 10 Q
(<time-offset>) 390.8 162.62 T
1 11 Q
(:) 468.8 162.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C++ and Java:) 132.65 645.62 T
1 F
( In C++, operator overloading) 292.94 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(means customizing the action of any built-in operator for classes) 132.65 631.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (that you de\336ne. In Dylan, operators ar) 132.65 617.62 P
-0.34 (e just generic functions, and) 316.57 617.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(you can add methods to those generic functions for your classes.) 132.65 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (In C++, the meaning of an overloaded operator is r) 132.65 589.62 P
-0.21 (esolved at com-) 377.87 589.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pile time \321 the types of the operands must be known at compile) 132.65 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time. Because Dylan operators ar) 132.65 561.62 T
(e generic functions, the method) 292.82 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is chosen dynamically accor) 132.65 547.62 T
(ding to the ar) 268.37 547.62 T
(gument types \321at r) 333.55 547.62 T
(un) 430.11 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time, if the types may vary at r) 132.65 533.62 T
(un time.) 281.63 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Java does not allow operator overloading. The Java design-) 159.65 519.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ers believe that overloading of operators r) 132.65 505.62 T
(esults in inscr) 336.14 505.62 T
(utable) 402.67 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(code \050because the meaning of the operator can vary\051. Dylan and) 132.65 491.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(C++ designers believe that, judiciously used, operator overload-) 132.65 477.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing permits clear) 132.65 463.62 T
(er) 214.26 463.62 T
(, mor) 223.06 463.62 T
(e concise code.) 248.42 463.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 456.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 456.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 455.95 477.77 455.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 90
%%Page: "77" 91
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.1 Methods for the) 365.42 702.62 T
5 F
(+) 442.2 702.62 T
0 F
( generic function) 447.9 702.62 T
2 F
(77) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define variable *minus-2-hours* =) 99.65 666.95 T
(make\050<time-offset>, total-seconds: - encode-total-seconds \0502, 0, 0\051\051;) 110.45 655.95 T
(define variable *plus-15-20-45* =) 99.65 636.95 T
(make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 45\051\051;) 110.45 625.95 T
1 11 Q
(W) 99.65 605.62 T
(e can add the time of) 109.64 605.62 T
(fsets:) 210.88 605.62 T
6 9 Q
(?) 99.65 584.95 T
4 F
( *minus-2-hours* + *plus-15-20-45*;) 105.05 584.95 T
6 F
({instance <time-offset>}) 99.65 573.95 T
1 11 Q
(The r) 99.65 553.62 T
(esult is a new instance of) 124.96 553.62 T
4 10 Q
(<time-offset>) 248.6 553.62 T
1 11 Q
(. W) 326.6 553.62 T
(e did not save the value) 342.09 553.62 T
(r) 99.65 539.62 T
(eturned. \050Many envir) 103.79 539.62 T
(onments of) 207.59 539.62 T
(fer a way to access values r) 261.85 539.62 T
(eturned by the lis-) 393.01 539.62 T
-0.18 (tener) 99.65 525.62 P
-0.18 (.\051 W) 123.71 525.62 P
-0.18 (e can add the time of) 142.68 525.62 P
-0.18 (fsets again, and view the) 243.04 525.62 P
4 10 Q
-0.38 (total-seconds) 364.97 525.62 P
1 11 Q
-0.18 ( slot of the) 442.97 525.62 P
(r) 99.65 511.62 T
(esult:) 103.79 511.62 T
6 9 Q
(?) 99.65 490.95 T
4 F
( decode-total-seconds\050*minus-2-hours* + *plus-15-20-45*\051;) 105.05 490.95 T
6 F
(13) 99.65 479.95 T
(20) 99.65 468.95 T
(45) 99.65 457.95 T
3 13 Q
(6.1.2  Methods f) 99.65 428.29 T
(or ad) 179.43 428.29 T
(ding a time of da) 205.4 428.29 T
(y to a time offset) 289.92 428.29 T
1 11 Q
(These methods implement addition between a time of) 99.65 408.62 T
(fset and a time of day:) 361.7 408.62 T
5 9 Q
(// Method on <time-offset>, <time-of-day>) 99.65 387.95 T
4 F
(define method \134+) 99.65 376.95 T
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 121.25 365.95 T
(=> \050sum :: <time-of-day>\051) 105.05 354.95 T
(make\050<time-of-day>,) 110.45 343.95 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 137.45 332.95 T
(end method \134+;) 99.65 321.95 T
1 11 Q
(The method on) 99.65 301.62 T
4 10 Q
(<time-offset>) 176.42 301.62 T
1 11 Q
(,) 254.42 301.62 T
4 10 Q
(<time-of-day>) 259.92 301.62 T
1 11 Q
( is invoked when the \336rst ar) 337.92 301.62 T
(gu-) 473.61 301.62 T
-0.18 (ment is a time of) 99.65 287.62 P
-0.18 (fset and the second ar) 179.51 287.62 P
-0.18 (gument is a time of day) 284.45 287.62 P
-0.18 (. It does the work of) 396.95 287.62 P
(cr) 99.65 273.62 T
(eating a new) 108.68 273.62 T
4 10 Q
(<time-of-day>) 173.35 273.62 T
1 11 Q
( instance with the) 251.35 273.62 T
4 10 Q
(total-seconds) 339.88 273.62 T
1 11 Q
( slot initialized) 417.88 273.62 T
(to the sum of the) 99.65 259.62 T
4 10 Q
(total-seconds) 184.18 259.62 T
1 11 Q
( slots of the two ar) 262.18 259.62 T
(guments.) 351.39 259.62 T
5 9 Q
(// Method on <time-of-day>, <time-offset>) 99.65 238.95 T
4 F
(define method \134+) 99.65 227.95 T
(\050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 121.25 216.95 T
(=> \050sum :: <time-of-day>\051) 105.05 205.95 T
(offset + time-of-day;) 110.45 194.95 T
(end method \134+;) 99.65 183.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 91
%%Page: "78" 92
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(78) 63.65 702.62 T
0 F
(Chapter 6) 82.65 702.62 T
(Multimethods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The method on) 99.65 665.62 T
4 10 Q
(<time-of-day>) 176.42 665.62 T
1 11 Q
(,) 254.42 665.62 T
4 10 Q
(<time-offset>) 259.92 665.62 T
1 11 Q
( is invoked when the \336rst ar) 337.92 665.62 T
(gu-) 473.61 665.62 T
(ment is a time of day and the second ar) 99.65 651.62 T
(gument is a time of) 289.98 651.62 T
(fset. It simply calls) 383.3 651.62 T
4 10 Q
(+) 476.49 651.62 T
1 11 Q
(with the or) 99.65 637.62 T
(der of the ar) 152.92 637.62 T
(guments switched \321 this call invokes the method on) 212.08 637.62 T
4 10 Q
(<time-offset>) 99.65 623.62 T
1 11 Q
(,) 177.65 623.62 T
4 10 Q
(<time-of-day>) 183.15 623.62 T
1 11 Q
(.) 261.15 623.62 T
(T) 126.65 609.62 T
(o test these methods, we can use one of the time of) 132.38 609.62 T
(fsets cr) 377.68 609.62 T
(eated in Section) 411.31 609.62 T
(6.1.1, and de\336ne the) 99.65 595.62 T
4 10 Q
(*8-30-59*) 199.59 595.62 T
1 11 Q
( variable, which contains a) 253.59 595.62 T
4 10 Q
(<time-of-day>) 385.62 595.62 T
1 11 Q
(instance, which we de\336ne as follows:) 99.65 581.62 T
4 9 Q
(define variable *8-30-59* =) 99.65 560.95 T
(make\050<time-of-day>, total-seconds: encode-total-seconds\0508, 30, 59\051\051;) 110.45 549.95 T
1 11 Q
(W) 99.65 529.62 T
(e add the time of) 109.64 529.62 T
(fset and the time of day:) 191.34 529.62 T
6 9 Q
(?) 99.65 508.95 T
4 F
( decode-total-seconds\050*minus-2-hours* + *8-30-59*\051;) 105.05 508.95 T
6 F
(6) 99.65 497.95 T
(30) 99.65 486.95 T
(59) 99.65 475.95 T
1 11 Q
(W) 99.65 455.62 T
(e add the time of day and the time of) 109.64 455.62 T
(fset:) 288.75 455.62 T
6 9 Q
(?) 99.65 434.95 T
4 F
( decode-total-seconds\050*8-30-59* + *minus-2-hours*\051;) 105.05 434.95 T
6 F
(6) 99.65 423.95 T
(30) 99.65 412.95 T
(59) 99.65 401.95 T
3 13 Q
(6.1.3  Method f) 99.65 372.29 T
(or ad) 173.5 372.29 T
(ding other kinds of times) 199.48 372.29 T
1 11 Q
-0.37 (W) 99.65 352.62 P
-0.37 (e have alr) 109.64 352.62 P
-0.37 (eady de\336ned methods for adding the kinds of time that it makes sense) 155.89 352.62 P
(to add together) 99.65 338.62 T
(. It is not logical to add one time of day to another time of day \321) 173.45 338.62 T
(what would thr) 99.65 324.62 T
(ee o\325clock plus two o\325clock mean? Someone could cr) 175.68 324.62 T
(eate another) 429.09 324.62 T
-0.27 (concr) 99.65 310.62 P
-0.27 (ete subclass of) 125.97 310.62 P
4 10 Q
-0.59 (<time>) 197.49 310.62 P
1 11 Q
-0.27 (, without pr) 233.49 310.62 P
-0.27 (oviding any methods for adding that time) 290.54 310.62 P
(to other times. If someone tries to add times that we do not intend them to add,) 99.65 296.62 T
(the r) 99.65 282.62 T
(esult will be a \322No applicable method\323 err) 121.8 282.62 T
(or) 327.7 282.62 T
(.) 337.24 282.62 T
-0.23 (W) 126.65 268.62 P
-0.23 (e could pr) 136.64 268.62 P
-0.23 (ovide a method whose sole purpose is to give mor) 185.14 268.62 P
-0.23 (e information) 427.32 268.62 P
(to the user than \322No applicable method\323 when + is called on two times that can-) 99.65 254.62 T
(not be added, because ther) 99.65 240.62 T
(e is no applicable method for adding them. W) 229.38 240.62 T
(e de\336ne) 451.07 240.62 T
(such a method her) 99.65 226.62 T
(e:) 189.5 226.62 T
5 9 Q
(// Method on <time>, <time>) 99.65 205.95 T
4 F
(define method \134+ \050time1 :: <time>, time2 :: <time>\051) 99.65 194.95 T
(error\050"Sorry, we can't add a %s to a %s.",) 110.45 183.95 T
(object-class\050time1\051, object-class\050time2\051\051;) 142.85 172.95 T
(end method \134+;) 99.65 161.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 92
%%Page: "79" 93
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.2 Method dispatch for multimethods) 366.56 702.62 T
2 F
(79) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(This method is called only when the ar) 99.65 665.62 T
(guments ar) 288.12 665.62 T
(e both general instances of) 342.9 665.62 T
4 10 Q
(<time>) 99.65 651.62 T
1 11 Q
(, and none of the mor) 135.65 651.62 T
(e speci\336c methods ar) 239.64 651.62 T
(e applicable to the ar) 341.34 651.62 T
(guments.) 442.16 651.62 T
(The) 99.65 637.62 T
4 10 Q
(error) 120.81 637.62 T
1 11 Q
( function signals an err) 150.81 637.62 T
(or) 262 637.62 T
(. For mor) 271.54 637.62 T
(e information about signaling and) 316.12 637.62 T
(handling err) 99.65 623.62 T
(ors, see Chapter 20,) 160.1 623.62 T
0 F
(Exceptions) 260.08 623.62 T
1 F
(.) 308.56 623.62 T
(Note: This method is useful for explaining how method dispatch works for) 126.65 609.62 T
(multimethods, but it does not r) 99.65 595.62 T
(eally give the user any mor) 250.73 595.62 T
(e useful information) 382.62 595.62 T
-0.05 (than that supplied by the \322No applicable method\323 err) 99.65 581.62 P
-0.05 (or) 360.2 581.62 P
-0.05 (. Ther) 369.74 581.62 P
-0.05 (efor) 397.75 581.62 P
-0.05 (e, we de\336ne the) 416.83 581.62 P
(method in this chapter) 99.65 567.62 T
(, but do not include it as part of the \336nal library) 208.83 567.62 T
(.) 438.42 567.62 T
3 15 Q
(6.2  Method dispatc) 99.65 527.95 T
(h f) 213.69 527.95 T
(or m) 228.5 527.95 T
(ultimethods) 254.93 527.95 T
1 11 Q
(A method is) 99.65 507.62 T
2 F
(specialized) 162.02 507.62 T
1 F
( on the r) 218.22 507.62 T
(equir) 258.28 507.62 T
(ed parameters that have explicit types. The) 283.69 507.62 T
(type of the r) 99.65 493.62 T
(equir) 158.55 493.62 T
(ed parameter is called that parameter) 183.96 493.62 T
(\325s) 366.51 493.62 T
2 F
(specializer) 376.98 493.62 T
1 F
(. A) 429.92 493.62 T
2 F
(multimethod) 99.65 479.62 T
1 F
(is a method that specializes mor) 168.39 479.62 T
(e than one of its parameters. The) 324.1 479.62 T
(methods that we de\336ned in Section 6.1 specialize two r) 99.65 465.62 T
(equir) 366 465.62 T
(ed parameters, and) 391.41 465.62 T
(ther) 99.65 451.62 T
(efor) 119.05 451.62 T
(e ar) 138.14 451.62 T
(e multimethods.) 155.8 451.62 T
-0.06 (The method dispatch considers all the r) 99.65 355.62 P
-0.06 (equir) 290.93 355.62 P
-0.06 (ed parameters, and sorts the applica-) 316.34 355.62 P
(ble methods by speci\336city as follows: For each r) 99.65 341.62 T
(equir) 331.33 341.62 T
(ed parameter) 356.74 341.62 T
(, constr) 420.8 341.62 T
(uct a) 456.1 341.62 T
(separate list of the applicable methods, sorted fr) 99.65 327.62 T
(om most speci\336c to least speci\336c) 332.79 327.62 T
(for that parameter) 99.65 313.62 T
(. Then, combine the separate sorted lists into an overall list of) 187.56 313.62 T
(methods, sorted by speci\336city) 99.65 299.62 T
(. In the overall method or) 243.65 299.62 T
(dering, a method is mor) 367.1 299.62 T
(e) 483.83 299.62 T
(speci\336c than another if it satis\336es two constraints:) 99.65 285.62 T
2 F
( 1.) 126.65 271.62 T
1 F
( The method is) 137.65 271.62 T
0 F
(no less speci\336c) 212.62 271.62 T
1 F
( than the other method for) 276.9 271.62 T
0 F
(all) 407.86 271.62 T
1 F
( r) 418.86 271.62 T
(equir) 425.76 271.62 T
(ed) 451.17 271.62 T
(parameters. \050The two methods might have the same types for some parameters.\051) 99.65 257.62 T
2 F
( 2.) 126.65 243.62 T
1 F
( The method is) 137.65 243.62 T
0 F
(mor) 212.62 243.62 T
(e speci\336c) 230.15 243.62 T
1 F
( than the other method for) 269.05 243.62 T
0 F
(some) 400.02 243.62 T
1 F
( r) 422.02 243.62 T
(equir) 428.92 243.62 T
(ed) 454.33 243.62 T
(parameter) 99.65 229.62 T
(.) 148.97 229.62 T
-0.28 (One method might be mor) 126.65 215.62 P
-0.28 (e speci\336c than another for one parameter) 254.76 215.62 P
-0.28 (, but less) 451.4 215.62 P
(speci\336c for another parameter) 99.65 201.62 T
(. These two methods ar) 244.91 201.62 T
(e) 357.79 201.62 T
2 F
(ambiguous) 365.8 201.62 T
1 F
( in speci\336city) 422.02 201.62 T
-0.36 (and cannot be or) 99.65 187.62 P
-0.36 (der) 179.73 187.62 P
-0.36 (ed. If the method-dispatch pr) 195.87 187.62 P
-0.36 (ocedur) 336.49 187.62 P
-0.36 (e cannot \336nd any method) 370.15 187.62 P
(that is mor) 99.65 173.62 T
(e speci\336c than all other methods, Dylan signals an err) 151.95 173.62 T
(or) 411.8 173.62 T
(.) 421.33 173.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C++ and Java:) 132.65 417.62 T
1 F
( Neither C++ nor Java supports) 292.94 417.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(multimethods. In both languages, method dispatch is based on) 132.65 403.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 132.65 389.62 T
(gument of virtual functions.) 182.3 389.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 430.83 126.65 382.08 2 L
V
0.25 H
0 Z
N
477.65 430.83 477.65 382.08 2 L
V
N
126.52 430.95 477.77 430.95 2 L
V
N
126.52 381.95 477.77 381.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 93
%%Page: "80" 94
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(80) 63.65 702.62 T
0 F
(Chapter 6) 82.65 702.62 T
(Multimethods) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(T) 99.65 396.63 T
(able 6.1 shows the applicable methods for various ar) 105.38 396.63 T
(guments to +. If two meth-) 360 396.63 T
(ods ar) 99.65 382.63 T
(e applicable, we number the mor) 129.44 382.63 T
(e speci\336c method 1, and the less speci\336c) 289.28 382.63 T
(method 2.) 99.65 368.63 T
(W) 126.65 354.63 T
(e call) 136.64 354.63 T
4 10 Q
(+) 164.19 354.63 T
1 11 Q
( on two instances of) 170.19 354.63 T
4 10 Q
(<time-offset>) 269.36 354.63 T
1 11 Q
(:) 347.36 354.63 T
6 9 Q
(?) 99.65 333.96 T
4 F
( *minus-2-hours* + *plus-15-20-45*;) 105.05 333.96 T
6 F
({instance of <time-offset>}) 99.65 322.96 T
1 11 Q
(When both ar) 99.65 296.63 T
(guments ar) 165.95 296.63 T
(e instances of) 220.73 296.63 T
4 10 Q
(<time-offset>) 288.48 296.63 T
1 11 Q
(, the \336rst r) 366.48 296.63 T
(ow of the table) 416.14 296.63 T
(applies. T) 99.65 282.63 T
(wo methods ar) 145.96 282.63 T
(e applicable. The method on) 218.65 282.63 T
4 10 Q
(<time-offset>) 358.99 282.63 T
1 11 Q
(,) 436.99 282.63 T
4 10 Q
(<time-) 442.49 282.63 T
-0.31 (offset>) 99.65 268.63 P
1 11 Q
-0.14 ( is mor) 141.65 268.63 P
-0.14 (e speci\336c than the method on) 174.6 268.63 P
4 10 Q
-0.31 (<time>) 318.95 268.63 P
1 11 Q
-0.14 (,) 354.95 268.63 P
4 10 Q
-0.31 (<time>) 360.31 268.63 P
1 11 Q
-0.14 (. The parameter spe-) 396.31 268.63 P
(cializers of the method on) 99.65 254.63 T
4 10 Q
(<time-offset>) 228.19 254.63 T
1 11 Q
(,) 306.19 254.63 T
4 10 Q
(<time-offset>) 311.69 254.63 T
1 11 Q
( ar) 389.69 254.63 T
(e subtypes of the) 402.09 254.63 T
(parameter specializers of the method on) 99.65 240.63 T
4 10 Q
(<time>) 297.63 240.63 T
1 11 Q
(,) 333.63 240.63 T
4 10 Q
(<time>) 339.13 240.63 T
1 11 Q
(. That is, for the \336rst) 375.13 240.63 T
(parameter) 99.65 226.63 T
(,) 148.97 226.63 T
4 10 Q
(<time-offset>) 154.47 226.63 T
1 11 Q
( is a subtype of) 232.47 226.63 T
4 10 Q
(<time>) 308.22 226.63 T
1 11 Q
(; for the second parameter) 344.22 226.63 T
(,) 470.51 226.63 T
4 10 Q
(<time-offset>) 99.65 212.63 T
1 11 Q
( is a subtype of) 177.65 212.63 T
4 10 Q
(<time>) 253.39 212.63 T
1 11 Q
(.) 289.39 212.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(T) 122.01 636.62 T
(ype of \336rst) 127.41 636.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(argument) 126.85 622.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 219.62 643.62 T
(ype of) 225.02 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second) 219.57 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(argument) 214.07 615.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicab) 291.46 629.62 T
(le methods) 333.42 629.62 T
(, ordered b) 387.06 629.62 T
(y speci\336city) 440.04 629.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(<time-offset>) 112.77 591.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 199.4 591.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(1. method on) 287.2 590.62 T
4 9 Q
(<time-offset>) 353.8 590.62 T
1 11 Q
(,) 424 590.62 T
4 9 Q
(<time-offset>) 429.5 590.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(2. method on) 287.2 576.62 T
4 9 Q
(<time>) 353.8 576.62 T
1 11 Q
(,) 386.2 576.62 T
4 9 Q
(<time>) 391.7 576.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 112.77 554.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 199.4 554.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(1. method on) 287.2 553.62 T
4 9 Q
(<time-of-day>) 354.46 553.62 T
8 11 Q
(,) 424.66 553.62 T
4 9 Q
(<time-offset>) 430.78 553.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(2. method on) 287.2 537.62 T
4 9 Q
(<time>) 354.46 537.62 T
8 11 Q
(,) 386.86 537.62 T
4 9 Q
(<time>) 392.98 537.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 112.77 515.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 199.4 515.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(1. method on) 287.2 514.62 T
4 9 Q
(<time-offset>) 353.8 514.62 T
1 11 Q
(,) 424 514.62 T
4 9 Q
(<time-of-day>) 429.5 514.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(2. method on) 287.2 500.62 T
4 9 Q
(<time>) 353.8 500.62 T
1 11 Q
(,) 386.2 500.62 T
4 9 Q
(<time>) 391.7 500.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 112.77 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 199.4 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(method on) 287.2 477.62 T
4 9 Q
( <time>) 339.17 477.62 T
8 11 Q
(,) 376.97 477.62 T
4 9 Q
(<time>) 383.09 477.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<integer>) 112.77 455.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 199.4 455.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
(none) 287.2 454.62 T
0 0 0 1 0 0 0 K
99.65 416.96 513.65 424.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 118.52 428.29 T
(ab) 123.83 428.29 T
(le 6.1) 135.4 428.29 T
8 F
(Applicab) 165.98 428.29 T
(le methods f) 204.13 428.29 T
(or diff) 258.3 428.29 T
(erent arguments to) 283.01 428.29 T
4 F
(+) 369.72 428.29 T
8 F
(, ordered b) 375.72 428.29 T
(y speci\336city) 423.88 428.29 T
(.) 474 428.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.77 658.83 106.77 445.08 2 L
V
0.25 H
0 Z
N
506.53 658.83 506.53 445.08 2 L
V
N
106.64 658.95 506.65 658.95 2 L
V
N
106.64 603.95 506.65 603.95 2 L
V
N
106.64 444.95 506.65 444.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 94
%%Page: "81" 95
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6.3 Methods for comparison of times) 373.68 702.62 T
2 F
(81) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(6.3  Methods f) 99.65 662.95 T
(or comparison of times) 181.44 662.95 T
1 11 Q
(W) 99.65 642.62 T
(e need to compar) 109.64 642.62 T
(e times to see whether they ar) 193.27 642.62 T
(e the same, and to see whether) 337.73 642.62 T
(one is gr) 99.65 628.62 T
(eater \050later\051 than another) 140.95 628.62 T
(. These methods do the comparisons we need:) 260.98 628.62 T
4 9 Q
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 99.65 607.95 T
(time1.total-seconds < time2.total-seconds;) 110.45 596.95 T
(end method \134<;) 99.65 585.95 T
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 99.65 566.95 T
(time1.total-seconds < time2.total-seconds;) 110.45 555.95 T
(end method \134<;) 99.65 544.95 T
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 99.65 525.95 T
(time1.total-seconds = time2.total-seconds;) 110.45 514.95 T
(end method \134=;) 99.65 503.95 T
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 99.65 484.95 T
(time1.total-seconds = time2.total-seconds;) 110.45 473.95 T
(end method \134=;) 99.65 462.95 T
1 11 Q
(W) 99.65 442.62 T
(e can call these methods:) 109.64 442.62 T
6 9 Q
(?) 99.65 421.95 T
4 F
(*plus-15-20-45* = *minus-2-hours*;) 110.45 421.95 T
6 F
(#f) 99.65 410.95 T
1 11 Q
(T) 99.65 390.62 T
(o compar) 105.38 390.62 T
(e times, we need only to de\336ne methods for < and =. All other numeri-) 151 390.62 T
(cal comparisons in Dylan ar) 99.65 376.62 T
(e based on these two methods. So, we can call) 235.21 376.62 T
4 10 Q
(>) 460.24 376.62 T
1 11 Q
(,) 466.24 376.62 T
4 10 Q
(>=) 471.74 376.62 T
1 11 Q
(,) 483.74 376.62 T
4 10 Q
(<=) 99.65 362.62 T
1 11 Q
(, and) 111.65 362.62 T
4 10 Q
(~=) 138.52 362.62 T
1 11 Q
( \050the not-equal-to function\051. Her) 150.52 362.62 T
(e ar) 305.87 362.62 T
(e examples:) 323.54 362.62 T
6 9 Q
(?) 99.65 341.95 T
4 F
(*plus-15-20-45* ~= *minus-2-hours*;) 110.45 341.95 T
6 F
(#t) 99.65 330.95 T
(?) 99.65 311.95 T
4 F
(*plus-15-20-45* > *minus-2-hours*;) 110.45 311.95 T
6 F
(#t) 99.65 300.95 T
3 15 Q
(6.4  Summar) 99.65 262.95 T
(y) 172.92 262.95 T
1 11 Q
(In this chapter) 99.65 242.62 T
(, we cover) 168.89 242.62 T
(ed the following:) 218.11 242.62 T
(\245) 108.65 222.62 T
(W) 126.65 222.62 T
(e de\336ned new methods on the built-in generic functions +,) 136.64 222.62 T
4 10 Q
(<) 423.63 222.62 T
1 11 Q
(, and) 429.63 222.62 T
4 10 Q
(=) 456.5 222.62 T
1 11 Q
(.) 462.5 222.62 T
(\245) 108.65 202.62 T
(W) 126.65 202.62 T
(e discussed how method dispatch works for multimethods.) 136.64 202.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 95
%%Page: "82" 96
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 96
%%Page: "83" 97
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(83) 292.9 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(7) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(7) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Modularity) 100.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(Object-oriented pr) 99.65 449.62 T
(ogramming can lead to modular code. When you ar) 188.66 449.62 T
(e experi-) 440.07 449.62 T
(enced with an object-oriented pr) 99.65 435.62 T
(ogramming style, you might be able to de\336ne) 257.08 435.62 T
(classes and methods with the right modularity fr) 99.65 421.62 T
(om the start. Novices, however) 336.83 421.62 T
(\321 and even experienced object-oriented pr) 99.65 407.62 T
(ogrammers who ar) 308.71 407.62 T
(e attacking lar) 401.11 407.62 T
(ge) 469.62 407.62 T
(pr) 99.65 393.62 T
(oblems \321 may \336nd that they discover opportunities for sharing as they begin) 110.41 393.62 T
-0.26 (to implement classes and methods. The dynamic aspects of Dylan support an evo-) 99.65 379.62 P
-0.12 (lutionary appr) 99.65 365.62 P
-0.12 (oach to pr) 170.14 365.62 P
-0.12 (ogramming, so it is easy to continue to r) 218.54 365.62 P
-0.12 (e\336ne your imple-) 412.03 365.62 P
(mentation and to design as you go.) 99.65 351.62 T
(In this chapter) 126.65 337.62 T
(, we show an evolutionary appr) 195.89 337.62 T
(oach to pr) 350.33 337.62 T
(ogramming, as we) 398.98 337.62 T
(de\336ne classes that r) 99.65 323.62 T
(epr) 194.28 323.62 T
(esent dif) 210.31 323.62 T
(fer) 251.63 323.62 T
(ent kinds of positions. W) 264.71 323.62 T
(e start out with one) 384.82 323.62 T
(appr) 99.65 309.62 T
(oach, and gradually r) 122.52 309.62 T
(e\336ne it to achieve gr) 226.41 309.62 T
(eater modularity) 324.39 309.62 T
(. W) 404.91 309.62 T
(e illustrate one) 420.4 309.62 T
(new Dylan featur) 99.65 295.62 T
(e: abstract classes.) 184.52 295.62 T
(Starting in this chapter) 126.65 281.62 T
(, and continuing thr) 236.65 281.62 T
(oughout the r) 333.24 281.62 T
(est of the book, we) 399.52 281.62 T
(take the appr) 99.65 267.62 T
(oach of editing and compiling sour) 163.74 267.62 T
(ce code. Now and then, we use a) 333.86 267.62 T
(listener to call a function and show the function\325s output. Whenever we use a lis-) 99.65 253.62 T
(tener) 99.65 239.62 T
(, we show the) 123.71 239.62 T
6 9 Q
(?) 193.4 239.62 T
1 11 Q
( pr) 198.8 239.62 T
(ompt.) 212.31 239.62 T
3 15 Q
(7.1  Requirements of the position c) 99.65 199.95 T
(lasses) 303.8 199.95 T
1 11 Q
(T) 99.65 179.62 T
(o pr) 105.38 179.62 T
(edict when an air) 124.89 179.62 T
(craft will arrive at the airport, we need to know the speed) 208.8 179.62 T
(of the air) 99.65 165.62 T
(craft r) 142.92 165.62 T
(elative to the gr) 171.8 165.62 T
(ound, and the distance the air) 247.4 165.62 T
(craft is fr) 391.87 165.62 T
(om the) 435.03 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 97
%%Page: "84" 98
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(84) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(airport. Thus, we need to r) 99.65 665.62 T
(epr) 228.78 665.62 T
(esent the positions of objects, such as airports and) 244.8 665.62 T
(air) 99.65 651.62 T
(craft, to compute distances.) 112.5 651.62 T
(W) 126.65 637.62 T
(e shall use two ways to expr) 136.64 637.62 T
(ess the position of an object. First, we use lati-) 273.45 637.62 T
(tude and longitude to indicate the) 99.65 623.62 T
2 F
(absolute position) 267.73 623.62 T
1 F
( of the object. Second, we) 354.79 623.62 T
(describe the position of the object r) 99.65 609.62 T
(elative to a second object. For example, a par-) 268.99 609.62 T
-0.25 (ticular air) 99.65 595.62 P
-0.25 (craft might be 200 miles west of a given airport. This kind of description) 146.35 595.62 P
(is a) 99.65 581.62 T
2 F
(relative position) 118.51 581.62 T
1 F
(.) 200.69 581.62 T
(W) 126.65 567.62 T
(e shall de\336ne the classes) 136.64 567.62 T
4 10 Q
(<absolute-position>) 257.04 567.62 T
1 11 Q
( and) 371.04 567.62 T
4 10 Q
(<relative-) 395.17 567.62 T
(position>) 99.65 553.62 T
1 11 Q
(. The slots of) 153.65 553.62 T
4 10 Q
(<absolute-position>) 217.6 553.62 T
1 11 Q
( will stor) 331.6 553.62 T
(e information about the) 374.28 553.62 T
(latitude or longitude of that position. The slots of) 99.65 539.62 T
4 10 Q
(<relative-position>) 340.95 539.62 T
1 11 Q
( will) 454.95 539.62 T
(include a distance \050such as 200 miles\051, and a dir) 99.65 525.62 T
(ection \050such as south\051.) 330 525.62 T
-0.25 (W) 126.65 511.62 P
-0.25 (e need to pr) 136.64 511.62 P
-0.25 (ovide) 193.4 511.62 P
4 10 Q
-0.55 (say) 223.31 511.62 P
1 11 Q
-0.25 ( methods for absolute and r) 241.31 511.62 P
-0.25 (elative positions. The fol-) 373.88 511.62 P
(lowing sample calls show the output that we want to achieve:) 99.65 497.62 T
6 9 Q
(?) 99.65 476.95 T
4 F
(say\050*my-absolute-position*\051;) 110.45 476.95 T
6 F
(42 degrees 19 minutes 34 seconds North latitude) 99.65 465.95 T
(70 degrees 56 minutes 26 seconds West longitude) 99.65 454.95 T
(?) 99.65 435.95 T
4 F
(say\050*her-relative-position*\051;) 110.45 435.95 T
6 F
(30 miles away at heading 90 degrees) 99.65 424.95 T
3 15 Q
(7.2  Initial c) 99.65 386.95 T
(lass de\336nitions) 165.75 386.95 T
1 11 Q
(W) 99.65 366.62 T
(e start with these simple, initial class de\336nitions:) 109.64 366.62 T
5 9 Q
(// Superclass of all position classes) 99.65 345.95 T
4 F
(define class <position> \050<object>\051) 99.65 334.95 T
(end class <position>;) 99.65 323.95 T
(define class <absolute-position> \050<position>\051) 99.65 304.95 T
(slot latitude;) 110.45 293.95 T
(slot longitude;) 110.45 282.95 T
(end class <absolute-position>;) 99.65 271.95 T
(define class <relative-position> \050<position>\051) 99.65 252.95 T
(slot distance;) 110.45 241.95 T
(slot angle;) 110.45 230.95 T
(end class <relative-position>;) 99.65 219.95 T
1 11 Q
(These initial de\336nitions show the inheritance r) 99.65 199.62 T
(elationships among the classes,) 325.01 199.62 T
(and the names of the slots show the information that the classes must pr) 99.65 185.62 T
(ovide.) 449.93 185.62 T
(At this point, we omit the type declarations of the slots, which is equivalent to) 99.65 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 98
%%Page: "85" 99
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.3 Abstract classes) 437.46 702.62 T
2 F
(85) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.43 (specifying the type) 99.65 665.62 P
4 10 Q
-0.94 (<object>) 193.57 665.62 P
1 11 Q
-0.43 (. W) 241.57 665.62 P
-0.43 (e will \336ll in the implementation later) 256.62 665.62 P
-0.43 (, by deciding) 431.23 665.62 P
(on the types of the slots, and pr) 99.65 651.62 T
(oviding the) 251.99 651.62 T
4 10 Q
(say) 310.61 651.62 T
1 11 Q
( methods.) 328.61 651.62 T
(Our r) 126.65 637.62 T
(equir) 153.17 637.62 T
(ements mention only) 178.58 637.62 T
4 10 Q
(<absolute-position>) 284.04 637.62 T
1 11 Q
( and) 398.04 637.62 T
4 10 Q
(<relative-) 422.16 637.62 T
(position>) 99.65 623.62 T
1 11 Q
(, but we choose to de\336ne a super) 153.65 623.62 T
(class of both of them, named) 312.36 623.62 T
4 10 Q
(<position>) 99.65 609.62 T
1 11 Q
(.) 159.65 609.62 T
3 15 Q
(7.3  Abstract c) 99.65 435.95 T
(lasses) 183.51 435.95 T
1 11 Q
(W) 99.65 415.62 T
(e intend that the) 109.64 415.62 T
4 10 Q
(<position>) 191.82 415.62 T
1 11 Q
( class will not have dir) 251.82 415.62 T
(ect instances. Any position) 360.71 415.62 T
(objects should be dir) 99.65 401.62 T
(ect instances of) 200.01 401.62 T
4 10 Q
(<absolute-position>) 276.24 401.62 T
1 11 Q
( and) 390.24 401.62 T
4 10 Q
(<relative-) 414.36 401.62 T
(position>) 99.65 387.62 T
1 11 Q
(. In Dylan, a class that is intended to be a super) 153.65 387.62 T
(class and not to have) 381.93 387.62 T
(dir) 99.65 373.62 T
(ect instances is an) 113.72 373.62 T
2 F
(abstract) 202.79 373.62 T
1 F
( class. A class that is intended to have dir) 241.89 373.62 T
(ect) 441.33 373.62 T
(instances is a) 99.65 359.62 T
2 F
(concrete) 165.84 359.62 T
1 F
( class.) 207.38 359.62 T
(By default, a user) 126.65 345.62 T
(-de\336ned class is concr) 211.27 345.62 T
(ete. T) 317.32 345.62 T
(o de\336ne an abstract class, you) 342.68 345.62 T
(declar) 99.65 331.62 T
(e it to be abstract in the) 129.37 331.62 T
4 10 Q
(define class) 244.63 331.62 T
1 11 Q
( form. For example:) 316.63 331.62 T
5 9 Q
(// Superclass of all position classes) 99.65 307.95 T
4 F
(define abstract class <position> \050<object>\051) 99.65 296.95 T
(end class <position>;) 99.65 285.95 T
1 11 Q
(The) 99.65 259.62 T
4 10 Q
(<time>) 120.81 259.62 T
1 11 Q
( class is another one that we intend to have no dir) 156.81 259.62 T
(ect instances, so we) 397.58 259.62 T
(r) 99.65 245.62 T
(ede\336ne it to be abstract:) 103.79 245.62 T
4 9 Q
(define abstract class <time> \050<object>\051) 99.65 224.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 213.95 T
(end class <time>;) 99.65 202.95 T
1 11 Q
-0.16 (If we tried to make an instance of) 99.65 176.62 P
4 10 Q
-0.34 (<position>) 263 176.62 P
1 11 Q
-0.16 ( or) 323 176.62 P
4 10 Q
-0.34 (<time>) 338.54 176.62 P
1 11 Q
-0.16 ( now) 374.54 176.62 P
-0.16 (,) 397.7 176.62 P
4 10 Q
-0.34 (make) 403.05 176.62 P
1 11 Q
-0.16 ( would signal) 427.05 176.62 P
(an err) 99.65 162.62 T
(or) 128.06 162.62 T
(. For mor) 137.6 162.62 T
(e information about abstract classes, see Section 7.7.) 182.18 162.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Modularity note:) 132.65 575.62 T
1 F
( The bene\336ts of de\336ning the) 217.59 575.62 T
4 10 Q
(<position>) 356.12 575.62 T
1 11 Q
( class) 416.12 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 561.62 T
(e these:) 142.29 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 547.62 T
4 10 Q
(<position>) 180.81 547.62 T
1 11 Q
( class cr) 240.81 547.62 T
(eates an explicit r) 278.26 547.62 T
(elationship) 362.47 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(between the other position classes, which ar) 159.65 533.62 T
(e r) 373.05 533.62 T
(elated) 385.21 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(conceptually) 159.65 519.62 T
(.) 220.72 519.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 159.65 505.62 T
(e can use the) 169.64 505.62 T
4 10 Q
(<position>) 234.51 505.62 T
1 11 Q
( class as the type of a slot or) 294.51 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(other object, in cases wher) 159.65 491.62 T
(e either an absolute or r) 286.98 491.62 T
(elative) 401.42 491.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(position is appr) 159.65 477.62 T
(opriate.) 235.56 477.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 588.83 126.65 470.08 2 L
V
0.25 H
0 Z
N
477.65 588.83 477.65 470.08 2 L
V
N
126.52 588.95 477.77 588.95 2 L
V
N
126.52 469.95 477.77 469.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 99
%%Page: "86" 100
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(86) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(7.4  Absolute position) 99.65 662.95 T
1 11 Q
(The) 99.65 636.62 T
4 10 Q
(<absolute-position>) 120.81 636.62 T
1 11 Q
( class r) 234.81 636.62 T
(epr) 267.37 636.62 T
(esents latitude and longitude. One way to) 283.4 636.62 T
(r) 99.65 622.62 T
(epr) 103.79 622.62 T
(esent latitude and longitude is with degr) 119.82 622.62 T
(ees, minutes, seconds, and a dir) 317.45 622.62 T
(ec-) 470.92 622.62 T
(tion. W) 99.65 608.62 T
(e can use the appr) 134.33 608.62 T
(oach of combining degr) 222.08 608.62 T
(ees, minutes, and seconds into a) 337.05 608.62 T
-0.01 (total-seconds slot as we did for) 99.65 594.62 P
4 10 Q
-0.02 (<time>) 252.97 594.62 P
1 11 Q
-0.01 (. W) 288.97 594.62 P
-0.01 (e can also de\336ne a class that r) 304.45 594.62 P
-0.01 (epr) 447.02 594.62 P
-0.01 (esents) 463.05 594.62 P
(total seconds and a dir) 99.65 580.62 T
(ection, and call it) 209.33 580.62 T
4 10 Q
(<directed-angle>) 294.62 580.62 T
1 11 Q
(:) 390.62 580.62 T
4 9 Q
(define abstract class <directed-angle> \050<object>\051) 99.65 556.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 545.95 T
(slot direction :: <string>, init-keyword: direction:;) 110.45 534.95 T
(end class <directed-angle>;) 99.65 523.95 T
1 11 Q
(W) 99.65 497.62 T
(e use the) 109.64 497.62 T
4 10 Q
(<directed-angle>) 154.98 497.62 T
1 11 Q
( class in the de\336nition of) 250.98 497.62 T
4 10 Q
(<absolute-position>) 372.36 497.62 T
1 11 Q
(:) 486.36 497.62 T
4 9 Q
(define class <absolute-position> \050<position>\051) 99.65 473.95 T
(slot latitude :: <directed-angle>, init-keyword: latitude:;) 110.45 462.95 T
(slot longitude :: <directed-angle>, init-keyword: longitude:;) 110.45 451.95 T
(end class <absolute-position>;) 99.65 440.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Modularity note:) 132.65 400.62 T
1 F
( The) 217.59 400.62 T
4 10 Q
(<directed-angle>) 241.5 400.62 T
1 11 Q
( class r) 337.5 400.62 T
(epr) 370.06 400.62 T
(esents the) 386.09 400.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(characteristics that latitude and longitude have in common.) 132.65 386.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison to C:) 132.65 338.62 T
1 F
( If you ar) 220.34 338.62 T
(e familiar with a language that uses) 264.36 338.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(explicit pointers, such as C, you may be confused by Dylan\325s) 132.65 324.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object model. Although ther) 132.65 310.62 T
(e is no pointer) 269.27 310.62 T
(-to operation in Dylan,) 338.28 310.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.25 (ther) 132.65 296.62 P
-0.25 (e ar) 152.05 296.62 P
-0.25 (e pointers in the implementation. If you ar) 169.46 296.62 P
-0.25 (e trying to imag-) 373.34 296.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ine how Dylan objects ar) 132.65 282.62 T
(e implemented, think in terms of always) 252.55 282.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(manipulating a pointer to the object \321 a Dylan variable \050or slot\051) 132.65 268.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.41 (stor) 132.65 254.62 P
-0.41 (es a pointer to an object, rather than a copy of the object\325s slots.) 151.05 254.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.52 (Similarly) 132.65 240.62 P
-0.52 (, assignment, ar) 175.68 240.62 P
-0.52 (gument passing, and identity comparison) 250.81 240.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 226.62 T
(e in terms of pointers to objects. See Appendix B,) 142.29 226.62 T
0 F
(Dylan Object) 384.99 226.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Model for C and C++ Pr) 132.65 212.62 T
(ogrammers) 242.03 212.62 T
1 F
(.) 291.53 212.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 413.83 126.65 379.08 2 L
V
0.25 H
0 Z
N
477.65 413.83 477.65 379.08 2 L
V
N
126.52 413.95 477.77 413.95 2 L
V
N
126.52 378.95 477.77 378.95 2 L
V
N
126.65 351.83 126.65 205.08 2 L
V
N
477.65 351.83 477.65 205.08 2 L
V
N
126.52 351.95 477.77 351.95 2 L
V
N
126.52 204.95 477.77 204.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 100
%%Page: "87" 101
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.4 Absolute position) 431.46 702.62 T
2 F
(87) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 564.62 T
(e could de\336ne the) 109.64 564.62 T
4 10 Q
(say) 198.92 564.62 T
1 11 Q
( method as follows:) 216.92 564.62 T
4 9 Q
(define method say \050position :: <absolute-position>\051 => \050\051) 99.65 540.95 T
(format-out\050"%d degrees %d minutes %d seconds %s latitude\134n",) 110.45 529.95 T
(decode-total-seconds\050position.latitude\051\051;) 169.85 518.95 T
(format-out\050"%d degrees %d minutes %d seconds %s longitude\134n",) 110.45 507.95 T
(decode-total-seconds\050position.longitude\051\051;) 169.85 496.95 T
(end method say;) 99.65 485.95 T
1 11 Q
(The pr) 99.65 459.62 T
(eceding method depends on) 131.57 459.62 T
4 10 Q
(decode-total-seconds) 272.19 459.62 T
1 11 Q
( having a method) 392.19 459.62 T
(that is applicable to) 99.65 445.62 T
4 10 Q
(<directed-angle>) 197.24 445.62 T
1 11 Q
( \050the type of the objects r) 293.24 445.62 T
(eturned by) 412.38 445.62 T
4 10 Q
(position.latitude) 99.65 431.62 T
1 11 Q
( and) 201.65 431.62 T
4 10 Q
(position.longtude) 225.77 431.62 T
1 11 Q
(\051. W) 327.77 431.62 T
(e de\336ne such a method in) 346.92 431.62 T
(Section 7.6.) 99.65 417.62 T
(The) 99.65 304.62 T
4 10 Q
(say) 120.81 304.62 T
1 11 Q
( method on) 138.81 304.62 T
4 10 Q
(<absolute-position>) 197.17 304.62 T
1 11 Q
( should not call) 311.17 304.62 T
4 10 Q
(format-out) 388.57 304.62 T
1 11 Q
( dir) 448.57 304.62 T
(ectly) 465.39 304.62 T
(on the two instances of) 99.65 290.62 T
4 10 Q
(<directed-angle>) 214.07 290.62 T
1 11 Q
( stor) 310.07 290.62 T
(ed in the latitude and longitude) 331.22 290.62 T
(slots. Instead, we can de\336ne a) 99.65 276.62 T
4 10 Q
(say) 246.66 276.62 T
1 11 Q
( method on) 264.66 276.62 T
4 10 Q
(<directed-angle>) 323.02 276.62 T
1 11 Q
(, and can call it) 419.02 276.62 T
(in the method on) 99.65 262.62 T
4 10 Q
(<absolute-position>) 185.61 262.62 T
1 11 Q
(:) 299.61 262.62 T
4 9 Q
(define method say \050angle :: <directed-angle>\051 => \050\051) 99.65 238.95 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 110.45 227.95 T
(format-out\050"%d degrees %d minutes %d seconds %s",) 110.45 216.95 T
(degrees, minutes, seconds, angle.direction\051;) 169.85 205.95 T
(end method say;) 99.65 194.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Comparison to Java:) 132.65 659.62 T
1 F
( Java r) 233.79 659.62 T
(ecognizes that pointers make it) 264.32 659.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(extr) 132.65 645.62 T
(emely dif) 151.33 645.62 T
(\336cult to enfor) 197.03 645.62 T
(ce safety and for a compiler to r) 262.57 645.62 T
(eason) 415.88 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(about a pr) 132.65 631.62 T
(ogram for optimization. Java supports an object model) 182.21 631.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.03 (similar to that of Dylan, wher) 132.65 617.62 P
-0.03 (e pointers ar) 275.88 617.62 P
-0.03 (e used in the implemen-) 336.31 617.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tation of objects, but ar) 132.65 603.62 T
(e not visible to Java pr) 243.36 603.62 T
(ograms.) 351.44 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.2 (Modularity note:) 132.65 388.62 P
1 F
-0.2 ( The pr) 217.39 388.62 P
-0.2 (eceding) 251.66 388.62 P
4 10 Q
-0.44 (say) 292.07 388.62 P
1 11 Q
-0.2 ( method does not take advan-) 310.07 388.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tage of the similarity between latitude and longitude. One clue) 132.65 374.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that ther) 132.65 360.62 T
(e is a modularity pr) 173.88 360.62 T
(oblem is that the two calls to) 269.29 360.62 T
4 10 Q
(format-) 410.82 360.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(out) 132.65 346.62 T
1 11 Q
( ar) 150.65 346.62 T
(e nearly identical.) 163.04 346.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 672.83 126.65 596.08 2 L
V
0.25 H
0 Z
N
477.65 672.83 477.65 596.08 2 L
V
N
126.52 672.95 477.77 672.95 2 L
V
N
126.52 595.95 477.77 595.95 2 L
V
N
126.65 401.83 126.65 339.08 2 L
V
N
477.65 401.83 477.65 339.08 2 L
V
N
126.52 401.95 477.77 401.95 2 L
V
N
126.52 338.95 477.77 338.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 101
%%Page: "88" 102
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(88) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method say \050position :: <absolute-position>\051 => \050\051) 99.65 666.95 T
(say\050position.latitude\051;) 110.45 655.95 T
(format-out\050" latitude\134n"\051;) 110.45 644.95 T
(say\050position.longitude\051;) 110.45 633.95 T
(format-out\050" longitude\134n"\051;) 110.45 622.95 T
(end method say;) 99.65 611.95 T
1 11 Q
-0.34 (W) 99.65 413.62 P
-0.34 (e de\336ned the) 109.64 413.62 P
4 10 Q
-0.75 (<directed-angle>) 174.42 413.62 P
1 11 Q
-0.34 ( class to r) 270.42 413.62 P
-0.34 (epr) 314.29 413.62 P
-0.34 (esent what latitude and longitude) 330.31 413.62 P
(have in common. It is useful to r) 99.65 399.62 T
(ecognize that latitude and longitude have dif) 256.32 399.62 T
(fer-) 474.77 399.62 T
(ences as well as similarities. W) 99.65 385.62 T
(e r) 247.54 385.62 T
(epr) 259.71 385.62 T
(esented latitude and longitude by the names) 275.74 385.62 T
(of slots in) 99.65 371.62 T
4 10 Q
(<absolute-position>) 149.29 371.62 T
1 11 Q
(, and their implementations as instances of) 263.29 371.62 T
4 10 Q
(<directed-angle>) 99.65 357.62 T
1 11 Q
(. W) 195.65 357.62 T
(e can elevate the visibility of latitude and longitude by) 211.14 357.62 T
(pr) 99.65 343.62 T
(oviding classes that r) 110.41 343.62 T
(epr) 212.59 343.62 T
(esent each of them:) 228.61 343.62 T
4 9 Q
(define class <latitude> \050<directed-angle>\051) 99.65 322.95 T
(end class <latitude>;) 99.65 311.95 T
(define class <longitude> \050<directed-angle>\051) 99.65 292.95 T
(end class <longitude>;) 99.65 281.95 T
1 11 Q
(W) 99.65 261.62 T
(e r) 109.64 261.62 T
(ede\336ne) 121.8 261.62 T
4 10 Q
(<absolute-position>) 160.14 261.62 T
1 11 Q
( to use) 274.14 261.62 T
4 10 Q
(<latitude>) 308.55 261.62 T
1 11 Q
( and) 368.55 261.62 T
4 10 Q
(<longitude>) 392.67 261.62 T
1 11 Q
(:) 458.67 261.62 T
4 9 Q
(define class <absolute-position> \050<position>\051) 99.65 240.95 T
(slot latitude :: <latitude>, init-keyword: latitude:;) 110.45 229.95 T
(slot longitude :: <longitude>, init-keyword: longitude:;) 110.45 218.95 T
(end class <absolute-position>;) 99.65 207.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Modularity note:) 132.65 571.62 T
1 F
( Our modularity is impr) 217.59 571.62 T
(oved, now that the) 334.77 571.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<directed-angle>) 132.65 557.62 T
1 11 Q
( class is r) 228.65 557.62 T
(esponsible for describing its) 271.82 557.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instances. This division of labor r) 132.65 543.62 T
(educes duplication of code.) 293.29 543.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ther) 159.65 529.62 T
(e is still a pr) 182.21 529.62 T
(oblem with this appr) 240.45 529.62 T
(oach, because the) 342.06 529.62 T
4 10 Q
(say) 429.41 529.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method on) 132.65 515.62 T
4 10 Q
(<absolute-position>) 188.25 515.62 T
1 11 Q
( must print \322latitude\323 and) 302.25 515.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\322longitude\323 after calling) 132.65 501.62 T
4 10 Q
(say) 253.9 501.62 T
1 11 Q
( on the dir) 271.9 501.62 T
(ected angles stor) 321.89 501.62 T
(ed in its) 402.67 501.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two slots. The modularity is still \337awed, because the method on) 132.65 487.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
-0.67 (<absolute-position>) 132.65 473.62 P
1 11 Q
-0.31 ( acts on the knowledge that the method on) 246.65 473.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<directed-angle>) 132.65 459.62 T
1 11 Q
( does not print \322latitude\323 or \322longitude.\323) 228.65 459.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 584.83 126.65 452.08 2 L
V
0.25 H
0 Z
N
477.65 584.83 477.65 452.08 2 L
V
N
126.52 584.95 477.77 584.95 2 L
V
N
126.52 451.95 477.77 451.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 102
%%Page: "89" 103
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.4 Absolute position) 431.46 702.62 T
2 F
(89) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Figur) 99.65 498.63 T
(e 7.1 shows the inheritance r) 125.86 498.63 T
(elationships among the position and angle) 263.4 498.63 T
(classes.) 99.65 484.63 T
(W) 126.65 470.63 T
(e de\336ne these new) 136.64 470.63 T
4 10 Q
(say) 229.26 470.63 T
1 11 Q
( methods:) 247.26 470.63 T
4 9 Q
(define method say \050latitude :: <latitude>\051 => \050\051) 99.65 449.96 T
(next-method\050\051;) 110.45 438.96 T
(format-out\050" latitude\134n"\051;) 110.45 427.96 T
(end method say;) 99.65 416.96 T
(define method say \050longitude :: <longitude>\051 => \050\051) 99.65 397.96 T
(next-method\050\051;) 110.45 386.96 T
(format-out\050" longitude\134n"\051;) 110.45 375.96 T
(end method say;) 99.65 364.96 T
1 11 Q
(The calls to) 99.65 338.63 T
4 10 Q
(next-method) 157.35 338.63 T
1 11 Q
( in the methods on) 223.35 338.63 T
4 10 Q
(<latitude>) 316.73 338.63 T
1 11 Q
( and) 376.73 338.63 T
4 10 Q
(<longitude>) 400.86 338.63 T
1 11 Q
( will) 466.86 338.63 T
(call the method on) 99.65 324.63 T
4 10 Q
(<directed-angle>) 192.8 324.63 T
1 11 Q
(, shown on page 87.) 288.8 324.63 T
(W) 126.65 310.63 T
(e r) 136.64 310.63 T
(ede\336ne the) 148.8 310.63 T
4 10 Q
(say) 205.14 310.63 T
1 11 Q
( method on) 223.14 310.63 T
4 10 Q
(<absolute-position>) 281.5 310.63 T
1 11 Q
(:) 395.5 310.63 T
4 9 Q
(define method say \050position :: <absolute-position>\051 => \050\051) 99.65 286.96 T
(say\050position.latitude\051;) 110.45 275.96 T
(say\050position.longitude\051;) 110.45 264.96 T
(end method say;) 99.65 253.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
-0.04 (Figure 7.1) 101.94 540.29 P
8 F
-0.04 (Inher) 154.62 540.29 P
-0.04 (itance relationships among the position and angle classes) 177.56 540.29 P
-0.04 (. Abstr) 432.81 540.29 P
-0.04 (act) 461.57 540.29 P
0 0 0 1 0 0 0 K
99.65 517.96 495.65 525.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
8 10 Q
0 X
0 0 0 1 0 0 0 K
(classes are sho) 180.07 529.29 T
(wn in) 249.39 529.29 T
5 9 Q
(oblique) 275.51 529.29 T
(typewriter) 316.09 529.29 T
(font) 372.87 529.29 T
1 11 Q
(.) 394.47 529.29 T
0 0 0 1 0 0 0 K
99.65 552.95 495.65 672.95 C
99.65 556.95 495.65 670.95 C
0 -387 153 1 238 388 85 103.65 571.45 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f7-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f7-1 .eps)%%CreationDate: (6/6/96) (12:04 PM)%%BoundingBox: -387 153 1 238%%HiResBoundingBox: -386.1208 153.9167 0.3594 237.7444%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -194.5 195 -194.5 195%AI3_TileBox: -469.5 -170 82.5 560%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -422.5 387 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-ObliqueAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4514.5 4515 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4514.5 4515 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4514.5 4515 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -334.8333 156.1667 0 TpTP-51.2875 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq10 0 Tl0 Tc0 Tw(<absolute-position>) Tx (\r) TX TO0 To1 0 0 1 -221.8333 156.1667 0 TpTP-51.2875 0 Td0 Tr(<relative-position>) Tx (\r) TX TO0 To1 0 0 1 -107.3333 156.1667 0 TpTP-26.9934 0 Td0 Tr(<latitude>) Tx (\r) TX TO0 To1 0 0 1 -29.3333 156.1667 0 TpTP-29.6927 0 Td0 Tr(<longitude>) Tx (\r) TX TO0 To1 0 0 1 -274 192 0 TpTP-26.9934 0 Td0 Tr/_Courier-Oblique 9 Tf(<position>\003) Tx 26.9934 -10 Td(\r) Tx TO0 To1 0 0 1 -71 192 0 TpTP-43.1894 0 Td0 Tr(<directed-angle>\003) Tx 43.1894 -10 Td(\r) Tx TO0 To1 0 0 1 -182.75 230.5 0 TpTP-21.5947 0 Td0 Tr(<object>) Tx (\r) TX TOu0 R0 G0.65 w-188.5 225.5 m-259 206 lS0 O0 g1 w-258.1079 208.5688 m-265.6538 204.1311 l-256.8999 204.2014 l-258.1079 208.5688 lfUu0 R0 G0.65 w-179.5 225 m-108 206.5 lS0 O0 g1 w-110.0564 204.724 m-101.3026 204.7992 l-108.9214 209.1109 l-110.0564 204.724 lfUu0 R0 G0.65 w-284.5 184.5 m-309 170.5 lS0 O0 g1 w-308.77 173.2098 m-314.9877 167.0476 l-306.5218 169.2755 l-308.77 173.2098 lfUu0 R0 G0.65 w-270 184.5 m-246.5 171.5 lSu-78.375 184.5 m-102.875 170.5 lS0 O0 g1 w-102.645 173.2098 m-108.8627 167.0476 l-100.3968 169.2755 l-102.645 173.2098 lfUu0 R0 G0.65 w-63.875 184.5 m-40.375 171.5 lS0 O0 g1 w-42.8117 170.2914 m-34.316 168.1806 l-40.6183 174.2565 l-42.8117 170.2914 lfU-248.9367 170.2914 m-240.441 168.1806 l-246.7433 174.2565 l-248.9367 170.2914 lfU0 4515 m0 -4125 L(N) *-396 4515 m-396 -4125 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 552.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 103
%%Page: "90" 104
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(90) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(7.5  Relative position) 99.65 309.95 T
1 11 Q
(W) 99.65 289.62 T
(e de\336ne the) 109.64 289.62 T
4 10 Q
(<relative-position>) 168.73 289.62 T
1 11 Q
( class as follows:) 282.73 289.62 T
4 9 Q
(define class <relative-position> \050<position>\051) 99.65 268.95 T
5 F
(// distance is in miles) 110.45 257.95 T
4 F
(slot distance :: <single-float>, init-keyword: distance:;) 110.45 246.95 T
(slot angle :: <relative-angle>, init-keyword: angle:;) 110.45 235.95 T
(end class <relative-position>;) 99.65 224.95 T
1 11 Q
-0.28 (The) 99.65 204.62 P
4 10 Q
-0.61 (distance) 120.53 204.62 P
1 11 Q
-0.28 ( slot stor) 168.53 204.62 P
-0.28 (es the distance to the other object, and the) 209.33 204.62 P
4 10 Q
-0.61 (angle) 412.45 204.62 P
1 11 Q
-0.28 ( slot stor) 442.45 204.62 P
-0.28 (es) 483.25 204.62 P
(the dir) 99.65 190.62 T
(ection to the other object. Unfortunately) 131.72 190.62 T
(, the angle needed her) 324.48 190.62 T
(e is dif) 431.44 190.62 T
(fer) 463.46 190.62 T
(ent) 476.54 190.62 T
(fr) 99.65 176.62 T
(om the) 107.46 176.62 T
4 10 Q
(<directed-angle>) 143.93 176.62 T
1 11 Q
( class, because the) 239.93 176.62 T
4 10 Q
(<directed-angle>) 330.16 176.62 T
1 11 Q
( class has a) 426.16 176.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Modularity note:) 132.65 645.62 T
1 F
( The appr) 217.59 645.62 T
(oach of de\336ning the classes) 264.37 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<latitude>) 132.65 631.62 T
1 11 Q
( and) 192.65 631.62 T
4 10 Q
(<longitude>) 216.77 631.62 T
1 11 Q
( pr) 282.77 631.62 T
(ovides the following bene\336ts:) 296.28 631.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Each class is r) 159.65 617.62 T
(esponsible for describing its instances. Each) 226.33 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method depends on) 159.65 603.62 T
4 10 Q
(say) 259.66 603.62 T
1 11 Q
( working for all the classes. No) 277.66 603.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method on one class must understand the details of a) 159.65 589.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method on another class.) 159.65 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 159.65 561.62 T
(e guar) 169.64 561.62 T
(d against any attempt to stor) 200.05 561.62 T
(e a latitude in a slot) 339.36 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(designated for a longitude, and vice versa. This type check-) 159.65 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing will be useful when we intr) 159.65 533.62 T
(oduce mor) 311.08 533.62 T
(e dif) 363.21 533.62 T
(fer) 384.62 533.62 T
(ences) 397.7 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(between the classes. For example, the dir) 159.65 519.62 T
(ection of a latitude) 357.83 519.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is north or south, and the dir) 159.65 505.62 T
(ection of a longitude is west or) 299.1 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.17 (east. W) 159.65 491.62 P
-0.17 (e can pr) 193.98 491.62 P
-0.17 (ovide methods that ensur) 231.95 491.62 P
-0.17 (e that the dir) 355.65 491.62 P
-0.17 (ections) 417.06 491.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (stor) 159.65 477.62 P
-0.02 (ed in a) 178.05 477.62 P
4 10 Q
-0.04 (<latitude>) 213.34 477.62 P
1 11 Q
-0.02 ( instance ar) 273.34 477.62 P
-0.02 (e appr) 328.36 477.62 P
-0.02 (opriate for latitude) 359.23 477.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\321 and we can do the same for longitude. W) 159.65 463.62 T
(e show two) 372.27 463.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (techniques for implementing that type checking: See Section) 159.65 449.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(10.6, page 128, and Section 19.5, page 318.) 159.65 435.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 141.65 421.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 159.65 421.62 T
(ou can ask an object what its class is by using the) 165.97 421.62 T
4 10 Q
(object-) 406.35 421.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class) 159.65 407.62 T
1 11 Q
( function. In this case, you can \336nd out that an object) 189.65 407.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is a latitude or longitude, rather than just a dir) 159.65 393.62 T
(ected angle.) 384.06 393.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The data does not stand alone; it is an instance that carries) 159.65 379.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with it its type, its identity) 159.65 365.62 T
(, and the methods appr) 286.64 365.62 T
(opriate to) 399.5 365.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(it.) 159.65 351.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 344.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 344.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 343.95 477.77 343.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 104
%%Page: "91" 105
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.5 Relative position) 434.27 702.62 T
2 F
(91) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(dir) 99.65 665.62 T
(ection, such as south, which is not needed for the angle of) 113.72 665.62 T
4 10 Q
(<relative-) 396.6 665.62 T
(position>) 99.65 651.62 T
1 11 Q
(.) 153.65 651.62 T
-0.01 (W) 126.65 637.62 P
-0.01 (e need to pr) 136.64 637.62 P
-0.01 (ovide a class of angle without dir) 194.14 637.62 P
-0.01 (ection, which we can use for) 355.23 637.62 P
-0.17 (the) 99.65 623.62 P
4 10 Q
-0.36 (angle) 117.49 623.62 P
1 11 Q
-0.17 ( slot of the) 147.49 623.62 P
4 10 Q
-0.36 (<relative-position>) 200.2 623.62 P
1 11 Q
-0.17 ( class\051. Ther) 314.2 623.62 P
-0.17 (efor) 371.26 623.62 P
-0.17 (e, we de\336ne two new) 390.34 623.62 P
(classes, and r) 99.65 609.62 T
(ede\336ne) 163.51 609.62 T
4 10 Q
(<directed-angle>) 201.85 609.62 T
1 11 Q
(:) 297.85 609.62 T
5 9 Q
(// Superclass of all angle classes) 99.65 588.95 T
4 F
(define abstract class <angle> \050<object>\051) 99.65 577.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 566.95 T
(end class <angle>;) 99.65 555.95 T
(define class <relative-angle> \050<angle>\051) 99.65 536.95 T
(end class <relative-angle>;) 99.65 525.95 T
(define abstract class <directed-angle> \050<angle>\051) 99.65 506.95 T
(slot direction :: <string>, init-keyword: direction:;) 110.45 495.95 T
(end class <directed-angle>;) 99.65 484.95 T
1 11 Q
(The) 99.65 197.62 T
4 10 Q
(<angle>) 120.81 197.62 T
1 11 Q
( class looks r) 162.81 197.62 T
(emarkably similar to the) 224.12 197.62 T
4 10 Q
(<time>) 345.63 197.62 T
1 11 Q
( class de\336ned earlier:) 381.63 197.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Modularity note:) 132.65 456.62 T
1 F
( Why pr) 217.59 456.62 T
(ovide both the classes) 257.37 456.62 T
4 10 Q
(<angle>) 365.96 456.62 T
1 11 Q
( and) 407.96 456.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<relative-angle>) 132.65 442.62 T
1 11 Q
(, when the) 228.65 442.62 T
4 10 Q
(<relative-angle>) 282.15 442.62 T
1 11 Q
( class has no) 378.15 442.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (additional slots? W) 132.65 428.62 P
-0.39 (e need a class that has only the) 224.41 428.62 P
4 10 Q
-0.84 (total-seconds) 373.28 428.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(slot, and no others. W) 132.65 414.62 T
(e need to use such a class as the type of the) 237.9 414.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(angle) 132.65 400.62 T
1 11 Q
( slot of) 162.65 400.62 T
4 10 Q
(<relative-angle>) 198.02 400.62 T
1 11 Q
(. W) 294.02 400.62 T
(e might consider making the) 309.51 400.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(<angle>) 132.65 386.62 T
1 11 Q
( class concr) 174.65 386.62 T
(ete, and using that class, which has only the) 229.38 386.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(total-seconds) 132.65 372.62 T
1 11 Q
( slot. However) 210.65 372.62 T
(, that appr) 280.97 372.62 T
(oach would not pr) 331.16 372.62 T
(event) 420.69 372.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.13 (someone fr) 132.65 358.62 P
-0.13 (om storing a) 186.4 358.62 P
4 10 Q
-0.29 (<directed-angle>) 249.79 358.62 P
1 11 Q
-0.13 ( instance in the) 345.79 358.62 P
4 10 Q
-0.29 (angle) 421.03 358.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
-0.04 (slot of) 132.65 344.62 P
4 10 Q
-0.09 (<relative-angle>) 165.19 344.62 P
1 11 Q
-0.04 (, because) 261.19 344.62 P
4 10 Q
-0.09 (<directed-angle>) 307.66 344.62 P
1 11 Q
-0.04 ( instances) 403.66 344.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 330.62 T
(e also instances of) 142.29 330.62 T
4 10 Q
(<angle>) 232.18 330.62 T
1 11 Q
(.) 274.18 330.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In Dylan, by de\336ning classes as speci\336cally as possible, you) 159.65 316.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(enhance the r) 132.65 302.62 T
(eliability of your pr) 197.68 302.62 T
(ogram, because the compiler \050or) 292.02 302.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 288.62 T
(un-time system\051 can verify that only corr) 136.9 288.62 T
(ect values ar) 335.32 288.62 T
(e used. In) 395.69 288.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(contrast, you could write a pr) 132.65 274.62 T
(ogram in Dylan or C in which you) 276.15 274.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 260.62 T
(epr) 136.79 260.62 T
(esented everything as an integer \321 in that style of pr) 152.82 260.62 T
(ogram,) 409.62 260.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(someone could far too easily intr) 132.65 246.62 T
(oduce a pr) 291.57 246.62 T
(ogramming err) 342.84 246.62 T
(or in) 416.46 246.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(which a time was stor) 132.65 232.62 T
(ed wher) 238.72 232.62 T
(e a latitude was needed.) 278.45 232.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 469.83 126.65 225.08 2 L
V
0.25 H
0 Z
N
477.65 469.83 477.65 225.08 2 L
V
N
126.52 469.95 477.77 469.95 2 L
V
N
126.52 224.95 477.77 224.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 105
%%Page: "92" 106
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(92) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// Superclass of all angle classes) 99.65 666.95 T
4 F
(define abstract class <angle> \050<object>\051) 99.65 655.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 644.95 T
(end class <angle>;) 99.65 633.95 T
5 F
(// Superclass of all time classes) 99.65 614.95 T
4 F
(define abstract class <time> \050<object>\051) 99.65 603.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 592.95 T
(end class <time>;) 99.65 581.95 T
1 11 Q
(W) 99.65 561.62 T
(e would like to call) 109.64 561.62 T
4 10 Q
(decode-total-seconds) 204.55 561.62 T
1 11 Q
( on instances of) 324.55 561.62 T
4 10 Q
(<angle>) 402.2 561.62 T
1 11 Q
(, but cur-) 444.2 561.62 T
(r) 99.65 547.62 T
(ently the method is de\336ned to work on) 103.79 547.62 T
4 10 Q
(<time>) 295.87 547.62 T
1 11 Q
(. The next step is to take advan-) 331.87 547.62 T
(tage of the similarity between) 99.65 533.62 T
4 10 Q
(<angle>) 246.57 533.62 T
1 11 Q
( and) 288.58 533.62 T
4 10 Q
(<time>) 312.7 533.62 T
1 11 Q
(.) 348.7 533.62 T
3 15 Q
(7.6  Meeting of angles and times) 99.65 493.95 T
1 11 Q
(W) 99.65 473.62 T
(e can cr) 109.64 473.62 T
(eate a new super) 146.22 473.62 T
(class to combine times and angles. Sometimes, the) 227.76 473.62 T
(trickiest part of de\336ning super) 99.65 459.62 T
(classes that model characteristics shar) 247.3 459.62 T
(ed by other) 430.76 459.62 T
(classes is thinking of the right name for the super) 99.65 445.62 T
(class. Her) 338.59 445.62 T
(e, we use) 385.57 445.62 T
4 10 Q
(<sixty-) 432.85 445.62 T
(unit>) 99.65 431.62 T
1 11 Q
( to name the class that has) 129.65 431.62 T
4 10 Q
(total-seconds) 259.18 431.62 T
1 11 Q
( that can be converted to either) 337.18 431.62 T
-0.22 (hours, minutes, and seconds, or to degr) 99.65 417.62 P
-0.22 (ees, minutes, and seconds. In the methods) 290.04 417.62 P
(for decoding and encoding total seconds, we use the name) 99.65 403.62 T
4 10 Q
(max-unit) 386.49 403.62 T
1 11 Q
( to r) 434.49 403.62 T
(efer to) 453.73 403.62 T
(the unit that is hours for time, and degr) 99.65 389.62 T
(ees for positions.) 291.12 389.62 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 99.65 368.95 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 110.45 357.95 T
(end class <sixty-unit>;) 99.65 346.95 T
(define method decode-total-seconds) 99.65 327.95 T
(\050sixty-unit :: <sixty-unit>\051) 121.25 316.95 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 105.05 305.95 T
(decode-total-seconds\050abs\050sixty-unit.total-seconds\051\051;) 110.45 294.95 T
(end method decode-total-seconds;) 99.65 283.95 T
(define method encode-total-seconds) 99.65 264.95 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 121.25 253.95 T
(=> \050total-seconds :: <integer>\051) 105.05 242.95 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 110.45 231.95 T
(end method encode-total-seconds;) 99.65 220.95 T
1 11 Q
-0.19 (W) 99.65 200.62 P
-0.19 (e r) 109.64 200.62 P
-0.19 (ede\336ne the time and angle classes and methods to take advantage of the new) 121.61 200.62 P
4 10 Q
(<sixty-unit>) 99.65 186.62 T
1 11 Q
( class:) 171.65 186.62 T
4 9 Q
(define abstract class <time> \050<sixty-unit>\051) 99.65 165.95 T
(end class <time>;) 99.65 154.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 106
%%Page: "93" 107
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.6 Meeting of angles and times) 390.73 702.62 T
2 F
(93) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define abstract class <angle> \050<sixty-unit>\051) 99.65 666.95 T
(end class <angle>;) 99.65 655.95 T
(define method say \050angle :: <angle>\051 => \050\051) 99.65 636.95 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 110.45 625.95 T
(format-out\050"%d degrees %d minutes %d seconds",) 110.45 614.95 T
(degrees, minutes, seconds\051;) 169.85 603.95 T
(end method say;) 99.65 592.95 T
5 F
(// definition unchanged, repeated for completeness) 99.65 573.95 T
4 F
(define abstract class <directed-angle> \050<angle>\051) 99.65 562.95 T
(slot direction :: <string>, init-keyword: direction:;) 110.45 551.95 T
(end class <directed-angle>;) 99.65 540.95 T
(define method say \050angle :: <directed-angle>\051 => \050\051) 99.65 521.95 T
(next-method\050\051;) 110.45 510.95 T
(format-out\050" %s", angle.direction\051;) 110.45 499.95 T
(end method say;) 99.65 488.95 T
5 F
(// definition unchanged, repeated for completeness) 99.65 469.95 T
4 F
(define class <relative-angle> \050<angle>\051) 99.65 458.95 T
(end class <relative-angle>;) 99.65 447.95 T
5 F
(// we need to show degrees for <relative-angle>, but do not need to show) 99.65 428.95 T
(// minutes and seconds,so we override the method on <angle>) 99.65 417.95 T
4 F
(define method say \050angle :: <relative-angle>\051 => \050\051) 99.65 406.95 T
(format-out\050" %d degrees", decode-total-seconds\050angle\051\051;) 110.45 395.95 T
(end method say;) 99.65 384.95 T
(define method say \050position :: <relative-position>\051 => \050\051) 99.65 365.95 T
(format-out\050"%d miles away at heading ", position.distance\051;) 110.45 354.95 T
(say\050position.angle\051;) 110.45 343.95 T
(end method say;) 99.65 332.95 T
1 11 Q
(T) 99.65 306.62 T
(o see the complete library) 105.38 306.62 T
(, and the test code that cr) 228.95 306.62 T
(eates position instances and) 350.17 306.62 T
(calls) 99.65 292.62 T
4 10 Q
(say) 123.85 292.62 T
1 11 Q
( on them, see Chapter 8,) 141.85 292.62 T
0 F
(A Simple Library) 264.19 292.62 T
1 F
(.) 341.41 292.62 T
-0.24 (Figur) 126.65 278.62 P
-0.24 (e 7.2 shows the inheritance r) 152.86 278.62 P
-0.24 (elationships of the classes. When one class) 289.2 278.62 P
(inherits fr) 99.65 264.62 T
(om another) 147.28 264.62 T
(, the r) 202.44 264.62 T
(elationship is sometimes called the) 230.1 264.62 T
2 F
(is-a relationship) 401.87 264.62 T
1 F
(.) 483.43 264.62 T
(For example, a dir) 99.65 250.62 T
(ect instance of) 187.92 250.62 T
4 10 Q
(<time-offset>) 259.49 250.62 T
0 11 Q
(is a) 340.24 250.62 T
4 10 Q
(<time>) 357.96 250.62 T
1 11 Q
( as well, and it) 393.96 250.62 T
0 F
(is a) 466.88 250.62 T
4 10 Q
(<sixty-unit>) 99.65 236.62 T
1 11 Q
(.) 171.65 236.62 T
(The classes have another kind of r) 126.65 222.62 T
(elationship as well \321 one class can use) 291.56 222.62 T
(another class as the type of a slot, in what is called the) 99.65 208.62 T
2 F
(has-a relationship) 364.36 208.62 T
1 F
(. Figur) 454.48 208.62 T
(e) 486.19 208.62 T
(7.3 shows both the inheritance r) 99.65 194.62 T
(elationships, and the r) 254 194.62 T
(elationships of one class) 361.73 194.62 T
(using another class as the type of a slot.) 99.65 180.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 107
%%Page: "94" 108
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(94) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 10 Q
0 X
-0.25 (Figure 7.2) 99.65 503.29 P
8 F
-0.25 (Is-a relationships \050inher) 151.68 503.29 P
-0.25 (itance\051 among classes) 255.25 503.29 P
-0.25 (, sho) 354.07 503.29 P
-0.25 (wn b) 375.34 503.29 P
-0.25 (y arro) 396.01 503.29 P
-0.25 (ws) 421.17 503.29 P
-0.25 (. Abstr) 433.24 503.29 P
-0.25 (act) 461.78 503.29 P
0 0 0 1 0 0 0 K
99.65 480.96 495.65 488.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
8 10 Q
0 X
0 0 0 1 0 0 0 K
(classes are sho) 180.07 492.29 T
(wn in) 249.39 492.29 T
5 9 Q
(oblique) 275.51 492.29 T
(typewriter) 316.09 492.29 T
(font) 372.87 492.29 T
1 11 Q
(.) 394.47 492.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 253.98 495.65 261.97 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 7.3) 125.65 265.3 T
8 F
(Has-a relationships among classes) 178.45 265.3 T
(, sho) 333.35 265.3 T
(wn b) 354.88 265.3 T
(y dashed arro) 375.8 265.3 T
(ws) 436.79 265.3 T
(.) 448.86 265.3 T
0 0 0 1 0 0 0 K
99.65 515.95 495.65 672.95 C
99.65 519.95 495.65 670.95 C
0 -396 74 7 213 403 139 96.15 525.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f7-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f7-2 .eps)%%CreationDate: (6/6/96) (2:08 PM)%%BoundingBox: -396 74 7 213%%HiResBoundingBox: -395.0914 74.75 6.3921 212.7444%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -197.5 2 -197.5 2%AI3_TileBox: -472 -363.5 80 366.5%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -425.5 374 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-ObliqueAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4517.5 4322 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4517.5 4322 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4517.5 4322 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -151 205.5 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Oblique 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>\003) Tx 21.5947 -11 Td(\r) Tx TO0 To1 0 0 1 -234 174.25 0 TpTP-32.3921 0 Td0 Tr(<sixty-unit>) Tx (\r) TX TO0 To1 0 0 1 -68.5 174.25 0 TpTP-26.9934 0 Td0 Tr(<position>) Tx (\r) TX TO0 To1 0 0 1 -316 145 0 TpTP-16.196 0 Td0 Tr(<time>) Tx (\r) TX TO0 To1 0 0 1 -165.5 145 0 TpTP-18.8954 0 Td0 Tr(<angle>) Tx (\r) TX TO0 To1 0 0 1 -104 145 0 TpTP-26.9934 0 Td0 Tr/_Courier-Bold 9 Tf9 0 Tl(<absolute-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -26 145 0 TpTP-26.9934 0 Td0 Tr(<relative-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -360 110.5 0 TpTP-35.0914 0 Td0 Tr0 0 Tl(<time-of-day>) Tx (\r) TX TO0 To1 0 0 1 -273.75 110.5 0 TpTP-35.0914 0 Td0 Tr(<time-offset>) Tx (\r) TX TO0 To1 0 0 1 -191.75 110.5 0 TpTP-43.1894 0 Td0 Tr/_Courier-Oblique 9 Tf(<directed-angle>) Tx (\r) TX TO0 To1 0 0 1 -97.5 110.5 0 TpTP-43.1894 0 Td0 Tr/_Courier-Bold 9 Tf(<relative-angle>) Tx (\r) TX TO-396 4321.5 m-396 -4318.5 L(N) *0 To1 0 0 1 -227 77 0 TpTP-29.6927 0 Td0 Tr0 O0 g(<longitude>) Tx (\r) TX TO0 To1 0 0 1 -145.75 77 0 TpTP-26.9934 0 Td0 Tr(<latitude>) Tx (\r) TX TOu0 R0 G0.65 w-157.6667 200.5 m-216.3333 184.5 lS0 O0 g1 w-215.431 187.0661 m-222.9928 182.6555 l-214.2387 182.6944 l-215.431 187.0661 lfUu0 R0 G0.65 w-142 200.8333 m-82.3333 184.1667 lS0 O0 g1 w-84.4213 182.4292 m-75.6677 182.3363 l-83.2022 186.7936 l-84.4213 182.4292 lfUu0 R0 G0.65 w-250.6667 169.1667 m-300.6667 154.8333 lS0 O0 g1 w-299.7948 157.4103 m-307.299 152.9024 l-298.5462 153.0543 l-299.7948 157.4103 lfUu0 R0 G0.65 w-229.6667 168.5 m-179.6667 154.5 lS0 O0 g1 w-181.7591 152.7623 m-173.0055 152.6639 l-180.5372 157.1259 l-181.7591 152.7623 lfUu1 R0 G0.65 w-70.6667 169.8333 m-95.6667 154.8333 lS1 O0 g1 w-93.9552 158.611 m-100.0405 152.3179 l-91.6238 154.7253 l-93.9552 158.611 lbUu0 R0.65 w-62.6667 169.5 m-38.6667 156.1667 lS0 O0 g1 w-41.1043 154.9559 m-32.6125 152.8297 l-38.9037 158.917 l-41.1043 154.9559 lfUu0 R0 G0.65 w-167.5 140.5 m-194.75 124.5 lS0 O0 g1 w-194.5537 127.2132 m-200.6986 120.9783 l-192.2594 123.3055 l-194.5537 127.2132 lfUu0 R0 G0.65 w-161.25 139.5 m-134 123.75 lS0 O0 g1 w-136.4571 122.5845 m-128.0024 120.3147 l-134.1896 126.5078 l-136.4571 122.5845 lfUu0 R0 G0.65 w-183.25 105.75 m-156.25 90 lS0 O0 g1 w-158.711 88.8433 m-150.2655 86.5395 l-156.4277 92.7575 l-158.711 88.8433 lfUu0 R0 G0.65 w-191.2417 105.75 m-218.2417 90 lS0 O0 g1 w-215.7807 88.8433 m-224.2262 86.5395 l-218.064 92.7575 l-215.7807 88.8433 lfUu0 R0 G0.65 w-312.5 141.25 m-278.25 121.75 lS0 O0 g1 w-280.6972 120.571 m-272.2279 118.356 l-278.4551 124.5089 l-280.6972 120.571 lfUu0 R0 G0.65 w-320.6248 141.4845 m-354.8748 121.9845 lS0 O0 g1 w-352.4276 120.8056 m-360.8968 118.5905 l-354.6697 124.7434 l-352.4276 120.8056 lfU0 4321.5 m0 -4318.5 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 515.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
99.65 277.97 495.65 468.96 C
99.65 281.97 495.65 466.96 C
0 -396 75 7 213 403 138 96.15 287.97 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f7-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f7-3 .eps)%%CreationDate: (6/6/96) (2:09 PM)%%BoundingBox: -396 75 7 213%%HiResBoundingBox: -395.0914 74.75 6.3921 212.7444%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Courier-Oblique%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -198 2.5 -198 2.5%AI3_TileBox: -472 -363.5 80 366.5%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -426 326.5 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: Courier-ObliqueAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique[/_Courier-Oblique/Courier-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 1 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4518 4322.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4518 4322.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4518 4322.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -151 205.5 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Oblique 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>\003) Tx 21.5947 -11 Td(\r) Tx TO0 To1 0 0 1 -234 175 0 TpTP-32.3921 0 Td0 Tr(<sixty-unit>) Tx (\r) TX TO0 To1 0 0 1 -68.5 175 0 TpTP-26.9934 0 Td0 Tr(<position>) Tx (\r) TX TO0 To1 0 0 1 -316 145 0 TpTP-16.196 0 Td0 Tr(<time>) Tx (\r) TX TO0 To1 0 0 1 -165.5 144.5 0 TpTP-18.8954 0 Td0 Tr(<angle>) Tx (\r) TX TO0 To1 0 0 1 -104 144.25 0 TpTP-26.9934 0 Td0 Tr/_Courier-Bold 9 Tf9 0 Tl(<absolute-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -26 144.25 0 TpTP-26.9934 0 Td0 Tr(<relative-\r) Tx 2.6993 -9 Td(position>) Tx (\r) TX TO0 To1 0 0 1 -360 110.5 0 TpTP-35.0914 0 Td0 Tr0 0 Tl(<time-of-day>) Tx (\r) TX TO0 To1 0 0 1 -273.75 110.5 0 TpTP-35.0914 0 Td0 Tr(<time-offset>) Tx (\r) TX TO-396 4321.5 m-396 -4318.5 L(N) *0 To1 0 0 1 -227 77 0 TpTP-29.6927 0 Td0 Tr0 O0 g(<longitude>) Tx (\r) TX TO0 To1 0 0 1 -145.75 77 0 TpTP-26.9934 0 Td0 Tr(<latitude>) Tx (\r) TX TOu0 R0 G0.65 w-157.6667 200.5 m-216.3333 184.5 lS0 O0 g1 w-215.431 187.0661 m-222.9928 182.6555 l-214.2387 182.6944 l-215.431 187.0661 lfUu0 R0 G0.65 w-142 200.8333 m-82.3333 184.1667 lS0 O0 g1 w-84.4213 182.4292 m-75.6677 182.3363 l-83.2022 186.7936 l-84.4213 182.4292 lfUu0 R0 G0.65 w-250.6667 169.1667 m-300.6667 154.8333 lS0 O0 g1 w-299.7948 157.4103 m-307.299 152.9024 l-298.5462 153.0543 l-299.7948 157.4103 lfUu0 R0 G0.65 w-229.6667 168.5 m-179.6667 154.5 lS0 O0 g1 w-181.7591 152.7623 m-173.0055 152.6639 l-180.5372 157.1259 l-181.7591 152.7623 lfUu1 R0 G0.65 w-70.6667 169.8333 m-95.6667 154.8333 lS1 O0 g1 w-93.9552 158.611 m-100.0405 152.3179 l-91.6238 154.7253 l-93.9552 158.611 lbUu0 R0.65 w-62.6667 169.5 m-38.6667 156.1667 lS0 O0 g1 w-41.1043 154.9559 m-32.6125 152.8297 l-38.9037 158.917 l-41.1043 154.9559 lfUu0 R0 G0.65 w-167.5 140.5 m-194.75 124.5 lS0 O0 g1 w-194.5537 127.2132 m-200.6986 120.9783 l-192.2594 123.3055 l-194.5537 127.2132 lfUu0 R0 G0.65 w-161.25 139.5 m-134 123.75 lS0 O0 g1 w-136.4571 122.5845 m-128.0024 120.3147 l-134.1896 126.5078 l-136.4571 122.5845 lfUu0 R0 G0.65 w-183.25 105.75 m-156.25 90 lS0 O0 g1 w-158.711 88.8433 m-150.2655 86.5395 l-156.4277 92.7575 l-158.711 88.8433 lfUu0 R0 G0.65 w-191.2417 105.75 m-218.2417 90 lS0 O0 g1 w-215.7807 88.8433 m-224.2262 86.5395 l-218.064 92.7575 l-215.7807 88.8433 lfUu0 R0 G0.65 w-312.5 141.25 m-278.25 121.75 lS0 O0 g1 w-280.6972 120.571 m-272.2279 118.356 l-278.4551 124.5089 l-280.6972 120.571 lfUu0 R0 G0.65 w-320.6248 141.4845 m-354.8748 121.9845 lS0 O0 g1 w-352.4276 120.8056 m-360.8968 118.5905 l-354.6697 124.7434 l-352.4276 120.8056 lfU0 4321.5 m0 -4318.5 L(N) *u0 R0 G0.65 w [5 ]0 d-25.8333 152.6667 m-25.8333 157.6667 -36.8333 191.6667 -65.1667 196.6667 c-114.8861 205.4404 -141.5 185.3333 -155.8333 157.3333 cS0 O0 g1 w []0 d-155.8514 162.1431 m-157.6879 153.5838 l-151.8177 160.0782 l-155.8514 162.1431 lfUu1 R0 G0.65 w [5 ]0 d-130.8958 138.9375 m-197.2292 89.6042 lS0 O0 g1 w []0 d-198.9295 91.3856 m-204.3626 84.5216 l-196.2253 87.7496 l-198.9295 91.3856 lfUu1 R0 G0.65 w [5 ]0 d-109.1667 129 m-134.5 91 lS0 O0 g1 w []0 d-135.5043 93.5246 m-138.3098 85.2323 l-131.7339 91.011 l-135.5043 93.5246 lfU1 Ap1 g-157.1667 109 m-157.1667 117.3333 L-173.1667 117.3333 L-173.1667 109 L-157.1667 109 Lf0 To1 0 0 1 -191.75 110.5 0 TpTP-43.1894 0 Td0 Tr0 g/_Courier-Oblique 9 Tf(<directed-angle>) Tx (\r) TX TO1 g0.65 w [5 ]0 d-114.5 107.6667 m-114.5 116.6667 L-123.1667 116.6667 L-126.1667 107 L-114.5 107.6667 Lf0 To1 0 0 1 -97.5 110.5 0 TpTP-43.1894 0 Td0 Tr0 g1 w []0 d/_Courier-Bold 9 Tf(<relative-angle>) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 277.97 495.65 468.96 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 108
%%Page: "95" 109
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.6 Meeting of angles and times) 390.73 702.62 T
2 F
(95) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(7.7  Abstract, concrete) 99.65 662.95 T
(, and instan) 231.71 662.95 T
(tiab) 300.06 662.95 T
(le c) 321.83 662.95 T
(lasses) 342.12 662.95 T
1 11 Q
(A class is either abstract or concr) 99.65 642.62 T
(ete. Abstract classes ar) 258.38 642.62 T
(e intended to be super-) 367.2 642.62 T
(classes. Ther) 99.65 628.62 T
(e ar) 160.55 628.62 T
(e never any dir) 178.22 628.62 T
(ect instances of an abstract class. All super) 251.33 628.62 T
(classes) 456.55 628.62 T
(of an abstract class must also be abstract. Concr) 99.65 614.62 T
(ete classes ar) 329.73 614.62 T
(e intended to have) 391.85 614.62 T
(dir) 99.65 600.62 T
(ect instances.) 113.72 600.62 T
(When you de\336ne a class with) 126.65 586.62 T
4 10 Q
(define class) 272.07 586.62 T
1 11 Q
(, the r) 344.07 586.62 T
(esult is a concr) 371.72 586.62 T
(ete class.) 443.01 586.62 T
(When you de\336ne a class with) 99.65 572.62 T
4 10 Q
(define abstract class) 245.07 572.62 T
1 11 Q
(, the r) 371.07 572.62 T
(esult is an abstract) 398.72 572.62 T
(class.) 99.65 558.62 T
3 13 Q
(7.7.1  Instantiab) 99.65 527.29 T
(le c) 179.55 527.29 T
(lasses) 197.13 527.29 T
1 11 Q
(A class that can be used as the \336rst ar) 99.65 507.62 T
(gument to) 280.69 507.62 T
4 10 Q
(make) 333.5 507.62 T
1 11 Q
( is an) 357.5 507.62 T
2 F
(instantiable) 385.51 507.62 T
1 F
( class. All) 445.38 507.62 T
(concr) 99.65 493.62 T
(ete classes ar) 125.97 493.62 T
(e instantiable. When you de\336ne an abstract class, Dylan does) 188.09 493.62 T
(not pr) 99.65 479.62 T
(ovide a method for) 129.15 479.62 T
4 10 Q
(make) 224.77 479.62 T
1 11 Q
( that enables you to cr) 248.77 479.62 T
(eate dir) 355.36 479.62 T
(ect instances of that) 391.81 479.62 T
(class. Thus, if you call) 99.65 465.62 T
4 10 Q
(make) 208.66 465.62 T
1 11 Q
( on an abstract class, you get an err) 232.66 465.62 T
(or) 402.17 465.62 T
(.) 411.7 465.62 T
-0.26 (Even though an abstract class does not have dir) 126.65 451.62 P
-0.26 (ect instances, it is sometimes) 355.4 451.62 P
(possible to use an abstract class as the \336rst ar) 99.65 437.62 T
(gument to) 317.54 437.62 T
4 10 Q
(make) 370.35 437.62 T
1 11 Q
(. In this case, the) 394.35 437.62 T
4 10 Q
(make) 99.65 423.62 T
1 11 Q
( function cr) 123.65 423.62 T
(eates and r) 178.96 423.62 T
(eturns a dir) 231.51 423.62 T
(ect instance of a concr) 287.48 423.62 T
(ete subclass of the) 393.62 423.62 T
(abstract class. In other wor) 99.65 409.62 T
(ds,) 229.5 409.62 T
4 10 Q
(make) 246.39 409.62 T
1 11 Q
( can r) 270.39 409.62 T
(eturn either a dir) 296.82 409.62 T
(ect or an indir) 378.95 409.62 T
(ect) 446.86 409.62 T
(instance of its \336rst ar) 99.65 395.62 T
(gument.) 200.57 395.62 T
-0.13 (T) 126.65 381.62 P
-0.13 (o make it possible for an abstract class to be pr) 132.38 381.62 P
-0.13 (ovided as the \336rst ar) 356.37 381.62 P
-0.13 (gument) 455.31 381.62 P
(to) 99.65 367.62 T
4 10 Q
(make) 111.99 367.62 T
1 11 Q
(, you de\336ne the abstract class, and de\336ne one or mor) 135.99 367.62 T
(e concr) 391.21 367.62 T
(ete subclasses) 425.55 367.62 T
(of it. Y) 99.65 353.62 T
(ou then de\336ne a method for) 130.68 353.62 T
4 10 Q
(make) 269 353.62 T
1 11 Q
( that specializes its \336rst parameter on the) 293 353.62 T
(abstract class, and that r) 99.65 339.62 T
(eturns an instance of one of its concr) 216.3 339.62 T
(ete subclasses. T) 393.05 339.62 T
(o) 471.38 339.62 T
(de\336ne) 99.65 325.62 T
4 10 Q
(make) 132.71 325.62 T
1 11 Q
( methods, you need to use the) 156.71 325.62 T
4 10 Q
(singleton) 304.91 325.62 T
1 11 Q
( function to cr) 358.91 325.62 T
(eate a type) 426.56 325.62 T
-0.08 (whose only instance is the class itself; see Chapter 9,) 99.65 311.62 P
0 F
-0.08 (Nonclass T) 357.51 311.62 P
-0.08 (ypes) 406.42 311.62 P
1 F
-0.08 (. De\336nition of) 425.98 311.62 P
4 10 Q
(make) 99.65 297.62 T
1 11 Q
( methods is an advanced topic that we do not cover in this book.) 123.65 297.62 T
(What is the r) 126.65 283.62 T
(eason for enabling users to call) 188.65 283.62 T
4 10 Q
(make) 341.14 283.62 T
1 11 Q
( on an abstract class? This) 365.14 283.62 T
(\337exibility allows a pr) 99.65 269.62 T
(ogram that needs a general kind of object, r) 202.12 269.62 T
(epr) 412.21 269.62 T
(esented by a) 428.24 269.62 T
(super) 99.65 255.62 T
(class, to ask for an instance of the super) 126.97 255.62 T
(class without specifying the dir) 318.58 255.62 T
(ect) 470.54 255.62 T
-0.09 (class of the instance. For example, a pr) 99.65 241.62 P
-0.09 (ogram might need to stor) 285.46 241.62 P
-0.09 (e data in a vector) 408.44 241.62 P
-0.09 (,) 490.24 241.62 P
-0.24 (but might not be concerned about the speci\336c implementation of the vector that it) 99.65 227.62 P
(uses. Such a pr) 99.65 213.62 T
(ogram can cr) 171.83 213.62 T
(eate a vector by calling) 234.83 213.62 T
4 10 Q
(make) 348.71 213.62 T
1 11 Q
( with the ar) 372.71 213.62 T
(gument) 428.23 213.62 T
4 10 Q
(<vector>) 99.65 199.62 T
1 11 Q
(, and) 147.65 199.62 T
4 10 Q
(make) 174.52 199.62 T
1 11 Q
( will cr) 198.52 199.62 T
(eate an instance of a concr) 231.83 199.62 T
(ete subclass. The built-in) 358.51 199.62 T
4 10 Q
(<vector>) 99.65 185.62 T
1 11 Q
( class is abstract, but is instantiable.) 147.65 185.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 109
%%Page: "96" 110
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(96) 63.65 702.62 T
0 F
(Chapter 7) 82.65 702.62 T
(Modularity) 129.88 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(7.7.2  Design considerations f) 99.65 664.29 T
(or abstract c) 249.94 664.29 T
(lasses) 313.73 664.29 T
1 11 Q
(The built-in Dylan classes follow a design principle in which concr) 99.65 644.62 T
(ete classes do) 422.95 644.62 T
(not inherit fr) 99.65 630.62 T
(om other concr) 161.36 630.62 T
(ete classes, but rather inherit fr) 234.51 630.62 T
(om abstract classes) 383.94 630.62 T
-0.3 (only) 99.65 616.62 P
-0.3 (. In other wor) 120.15 616.62 P
-0.3 (ds, the branches of the tr) 185.3 616.62 P
-0.3 (ee ar) 303.16 616.62 P
-0.3 (e abstract classes, and the leaves of) 325.8 616.62 P
(the tr) 99.65 602.62 T
(ee ar) 125.39 602.62 T
(e concr) 148.32 602.62 T
(ete classes. W) 182.66 602.62 T
(e follow that design principle in this book as well.) 247.87 602.62 T
-0.3 (Figur) 99.65 588.62 P
-0.3 (e 7.2 shows our classes graphically; the branches of the tr) 125.86 588.62 P
-0.3 (ee \050abstract classes\051) 399.43 588.62 P
(appear in) 99.65 574.62 T
5 9 Q
(oblique) 148.59 574.62 T
(typewriter) 189.14 574.62 T
(font) 245.89 574.62 T
1 11 Q
(, and the leaves \050concr) 267.49 574.62 T
(ete classes\051 appear in) 375.22 574.62 T
4 9 Q
(bold typewriter font) 99.65 560.62 T
1 11 Q
(.) 207.65 560.62 T
-0.4 (Abstract classes can \336ll two r) 126.65 546.62 P
-0.4 (oles. First, they act as an interface. For example,) 265.21 546.62 P
(the) 99.65 532.62 T
4 10 Q
(<sixty-unit>) 117.65 532.62 T
1 11 Q
( class is an interface. If an object is of the) 189.65 532.62 T
4 10 Q
(<sixty-unit>) 387.92 532.62 T
1 11 Q
( type,) 459.92 532.62 T
-0.28 (you can expect certain behaviors fr) 99.65 518.62 P
-0.28 (om that object. Those behaviors ar) 267.52 518.62 P
-0.28 (e the generic) 432.23 518.62 P
(functions that ar) 99.65 504.62 T
(e specialized on) 179.31 504.62 T
4 10 Q
(<sixty-unit>) 259.26 504.62 T
1 11 Q
(, including) 331.26 504.62 T
4 10 Q
(decode-total-) 386.27 504.62 T
(seconds) 99.65 490.62 T
1 11 Q
(, and) 141.65 490.62 T
4 10 Q
(total-seconds) 168.52 490.62 T
1 11 Q
(.) 246.52 490.62 T
-0.18 (Abstract classes can also act as a partial implementation, if they de\336ne slots.) 126.65 476.62 P
(The slots in an abstract class ar) 99.65 462.62 T
(e useful for the classes that inherit fr) 248.9 462.62 T
(om that class.) 424.89 462.62 T
(For example, the) 99.65 448.62 T
4 10 Q
(<sixty-unit>) 183.61 448.62 T
1 11 Q
( class de\336nes the) 255.61 448.62 T
4 10 Q
(total-seconds) 339.76 448.62 T
1 11 Q
( slot, which is) 417.76 448.62 T
(useful for) 99.65 434.62 T
4 10 Q
(<time>) 149.23 434.62 T
1 11 Q
( and) 185.23 434.62 T
4 10 Q
(<position>) 209.35 434.62 T
1 11 Q
(.) 269.35 434.62 T
3 15 Q
(7.8  Summar) 99.65 394.95 T
(y) 172.92 394.95 T
1 11 Q
(In this chapter) 99.65 374.62 T
(, we cover) 168.89 374.62 T
(ed the following:) 218.11 374.62 T
(\245) 108.65 354.62 T
(A class can r) 126.65 354.62 T
(epr) 187.3 354.62 T
(esent characteristics and behavior in common acr) 203.33 354.62 T
(oss other) 442.44 354.62 T
(classes. For example, the) 126.65 340.62 T
4 10 Q
(<directed-angle>) 248.96 340.62 T
1 11 Q
( class r) 344.96 340.62 T
(epr) 377.52 340.62 T
(esents the degr) 393.54 340.62 T
(ees-) 466.41 340.62 T
(minutes-seconds aspects that ar) 126.65 326.62 T
(e common to latitude and longitude. Also,) 280.54 326.62 T
(the) 126.65 312.62 T
4 10 Q
(<sixty-unit>) 144.65 312.62 T
1 11 Q
( class r) 216.65 312.62 T
(epr) 249.21 312.62 T
(esents the) 265.24 312.62 T
4 10 Q
(total-seconds) 315.85 312.62 T
1 11 Q
( that ar) 393.85 312.62 T
(e common to) 428.07 312.62 T
4 10 Q
(<time>) 126.65 298.62 T
1 11 Q
( and) 162.65 298.62 T
4 10 Q
(<angle>) 186.77 298.62 T
1 11 Q
(.) 228.77 298.62 T
(\245) 108.65 278.62 T
(Classes can be used to r) 126.65 278.62 T
(epr) 241.32 278.62 T
(esent dif) 257.35 278.62 T
(fer) 298.68 278.62 T
(ences between two similar kinds of) 311.76 278.62 T
(objects. For example, the) 126.65 264.62 T
4 10 Q
(<latitude>) 249.18 264.62 T
1 11 Q
( and) 309.18 264.62 T
4 10 Q
(<longitude>) 333.3 264.62 T
1 11 Q
( classes ar) 399.3 264.62 T
(e similar) 447.29 264.62 T
(in that both classes inherit fr) 126.65 250.62 T
(om) 264.21 250.62 T
4 10 Q
(<directed-angle>) 282.68 250.62 T
1 11 Q
(, and neither class) 378.68 250.62 T
(de\336nes additional slots. However) 126.65 236.62 T
(, by pr) 289.4 236.62 T
(oviding the two classes,) 320.61 236.62 T
4 10 Q
(<latitude>) 126.65 222.62 T
1 11 Q
( and) 186.65 222.62 T
4 10 Q
(<longitude>) 210.77 222.62 T
1 11 Q
(, we make it possible to identify objects as) 276.77 222.62 T
(being of type) 126.65 208.62 T
4 10 Q
(<latitude>) 193.22 208.62 T
1 11 Q
( or) 253.22 208.62 T
4 10 Q
(<longitude>) 269.07 208.62 T
1 11 Q
(, and we make it possible to cus-) 335.07 208.62 T
(tomize the behavior of operations on) 126.65 194.62 T
4 10 Q
(<latitude>) 308.37 194.62 T
1 11 Q
( and) 368.37 194.62 T
4 10 Q
(<longitude>) 392.49 194.62 T
1 11 Q
( as) 458.49 194.62 T
(needed.) 126.65 180.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 110
%%Page: "97" 111
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7.8 Summary) 460.39 702.62 T
2 F
(97) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(In many object-oriented libraries and pr) 126.65 665.62 T
(ograms, certain classes ar) 320.29 665.62 T
(e not) 443.32 665.62 T
(intended to have dir) 126.65 651.62 T
(ect instances. Y) 225.52 651.62 T
(ou can de\336ne those classes as abstract) 298.4 651.62 T
(classes to document their purpose.) 126.65 637.62 T
(\245) 108.65 617.62 T
(When you have two r) 126.65 617.62 T
(elated classes and both will have dir) 231.77 617.62 T
(ect instances, it is) 407.6 617.62 T
(good practice to de\336ne a thir) 126.65 603.62 T
(d class to be the super) 266.27 603.62 T
(class of the two other) 373.18 603.62 T
(classes. The super) 126.65 589.62 T
(class is abstract, and the other two classes ar) 213.48 589.62 T
(e concr) 427.9 589.62 T
(ete.) 462.25 589.62 T
(W) 126.65 575.62 T
(e used this style in the time classes, the angle classes, and the position) 136.64 575.62 T
(classes. People can use the abstract super) 126.65 561.62 T
(classes, such as) 325.83 561.62 T
4 10 Q
(<position>) 402.42 561.62 T
1 11 Q
(, as) 462.42 561.62 T
(the type of objects that can be any kind of position.) 126.65 547.62 T
(\245) 108.65 527.62 T
(In pr) 126.65 527.62 T
(oper modularity) 150.26 527.62 T
(, a method on a particular class should not depend on) 229.05 527.62 T
(information that is private to second class. If someone changes the r) 126.65 513.62 T
(epr) 455.13 513.62 T
(e-) 471.16 513.62 T
(sentation of the second class, the method could br) 126.65 499.62 T
(eak. W) 368.43 499.62 T
(e showed an) 400.8 499.62 T
(example of br) 126.65 485.62 T
(eaking this r) 193.29 485.62 T
(ule when one version of the) 253.5 485.62 T
4 10 Q
(say) 391.05 485.62 T
1 11 Q
( method on) 409.05 485.62 T
4 10 Q
-0.4 (<absolute-position>) 126.65 471.62 P
1 11 Q
-0.18 ( printed \322latitude\323 and \322longitude\323 after calling) 240.65 471.62 P
4 10 Q
-0.4 (say) 475.08 471.62 P
1 11 Q
(on the dir) 126.65 457.62 T
(ected angles stor) 173.88 457.62 T
(ed in its two slots. The method on) 254.67 457.62 T
4 10 Q
(<absolute-) 421.87 457.62 T
-0.18 (position>) 126.65 443.62 P
1 11 Q
-0.08 ( acted on the knowledge that the method on) 180.65 443.62 P
4 10 Q
-0.18 (<directed-angle>) 396.98 443.62 P
1 11 Q
(does not print \322latitude\323 or \322longitude.\323) 126.65 429.62 T
(One of the challenges of modular design is for you to decide which attributes to) 99.65 409.62 T
(generalize \050by moving them up to higher) 99.65 395.62 T
(, or mor) 298.46 395.62 T
(e general, classes in the inherit-) 336.93 395.62 T
(ance graph\051, and which attributes to specialize \050by moving them down the inher-) 99.65 381.62 T
(itance graph into mor) 99.65 367.62 T
(e speci\336c classes\051. Another challenge is deciding when to) 204.77 367.62 T
(split a class into multiple behaviors, and when to intr) 99.65 353.62 T
(oduce mor) 357.92 353.62 T
(e abstract classes) 410.05 353.62 T
-0.41 (to hold shar) 99.65 339.62 P
-0.41 (ed behavior) 156.96 339.62 P
-0.41 (. No computer language can make these decisions for you,) 213.49 339.62 P
(but dynamic languages typically allow mor) 99.65 325.62 T
(e fr) 311 325.62 T
(eedom to explor) 326.83 325.62 T
(e these r) 405.81 325.62 T
(elation-) 445.92 325.62 T
(ships. Generic functions and multimethods allow mor) 99.65 311.62 T
(e fr) 361.91 311.62 T
(eedom in de\336ning) 377.74 311.62 T
(behavior than does attaching a method to a single class.) 99.65 297.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 111
%%Page: "98" 112
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 112
%%Page: "99" 113
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(99) 292.9 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(8) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(8) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(A Simple Library) 100.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.38 (In this chapter) 99.65 449.62 P
-0.38 (, we cr) 168.14 449.62 P
-0.38 (eate a complete library that r) 199.12 449.62 P
-0.38 (epr) 336.66 449.62 P
-0.38 (esents time and position. The) 352.69 449.62 P
4 10 Q
(timespace) 99.65 435.62 T
1 11 Q
( library pr) 153.65 435.62 T
(ovides the) 202.7 435.62 T
4 10 Q
(say) 255.53 435.62 T
1 11 Q
( generic function for all concr) 273.53 435.62 T
(ete classes, the) 415.78 435.62 T
-0.16 (mathematical function) 99.65 421.62 P
4 10 Q
-0.36 (+) 211.65 421.62 P
1 11 Q
-0.16 ( on certain kinds of time, and the comparison functions) 217.65 421.62 P
4 10 Q
-0.36 (<) 487.06 421.62 P
1 11 Q
(and) 99.65 407.62 T
4 10 Q
(=) 121.02 407.62 T
1 11 Q
(, which enable users to call all other numerical comparisons,) 127.02 407.62 T
4 10 Q
(>) 422.42 407.62 T
1 11 Q
(,) 428.42 407.62 T
4 10 Q
(>=) 433.92 407.62 T
1 11 Q
(,) 445.92 407.62 T
4 10 Q
(<=) 451.42 407.62 T
1 11 Q
(, and) 463.42 407.62 T
4 10 Q
(~=) 99.65 393.62 T
1 11 Q
(. Our library consists of four \336les:) 111.65 393.62 T
(\245) 108.65 373.62 T
(The LID \336le lists all the \336les in the) 126.65 373.62 T
4 10 Q
(timespace) 295 373.62 T
1 11 Q
( library) 349 373.62 T
(.) 383.32 373.62 T
(\245) 108.65 353.62 T
(The library \336le de\336nes the) 126.65 353.62 T
4 10 Q
(timespace) 256.96 353.62 T
1 11 Q
( library and the) 310.96 353.62 T
4 10 Q
(timespace) 388.64 353.62 T
1 11 Q
( module.) 442.64 353.62 T
(\245) 108.65 333.62 T
(The implementation \336le de\336nes the classes, methods, and generic) 126.65 333.62 T
(functions.) 126.65 319.62 T
(\245) 108.65 299.62 T
(The test \336le cr) 126.65 299.62 T
(eates instances, calls) 194.57 299.62 T
4 10 Q
(say) 295.88 299.62 T
1 11 Q
( on them, and adds time instances.) 313.88 299.62 T
(W) 99.65 279.62 T
(e pr) 109.64 279.62 T
(ovide the test \336le so that you can experiment with the library) 128.41 279.62 T
(. Because the) 423.38 279.62 T
(test code has a purpose dif) 99.65 265.62 T
(fer) 228.98 265.62 T
(ent fr) 242.05 265.62 T
(om that of the implementation code, we sepa-) 267.87 265.62 T
(rate them into two \336les. Normally) 99.65 251.62 T
(, a \336nished library would not contain both the) 263.57 251.62 T
(implementation and the test code \321 the test code would be in a separate library) 99.65 237.62 T
(.) 486.42 237.62 T
(However) 99.65 223.62 T
(, when you ar) 144.26 223.62 T
(e starting to implement your pr) 210.91 223.62 T
(ogram or library) 363.75 223.62 T
(, it is con-) 442.85 223.62 T
(venient to put all the code in one library) 99.65 209.62 T
(, as we do her) 293.3 209.62 T
(e.) 360.2 209.62 T
(W) 126.65 195.62 T
(e shall continue to develop the time and position library in Part II. The) 136.64 195.62 T
(complete version is given in Chapter 14,) 99.65 181.62 T
0 F
(Four Complete Libraries) 300.22 181.62 T
1 F
(.) 408 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 113
%%Page: "100" 114
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(100) 63.65 702.62 T
0 F
(Chapter 8) 87.4 702.62 T
(A Simple Library) 134.63 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(8.1  The LID \336le) 99.65 662.95 T
(8.2  The librar) 99.65 529.95 T
(y \336le) 179.76 529.95 T
(8.3  The implementation \336le) 99.65 325.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The LID \336le:) 234.81 623.29 T
4 9 Q
(timespace.lid) 291.5 623.29 T
8 10 Q
(.) 361.7 623.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library: timespace) 105.65 603.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 592.95 T
( library) 148.85 592.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(library-implementation) 154.25 581.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(test) 159.65 570.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The libr) 228.88 490.29 T
(ar) 262.12 490.29 T
(y \336le:) 271.31 490.29 T
4 9 Q
(library.dylan) 297.43 490.29 T
8 10 Q
(.) 367.63 490.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 470.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library timespace) 105.65 451.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 440.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 429.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library timespace;) 105.65 418.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module timespace) 105.65 399.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 388.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 377.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module timespace;) 105.65 366.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 168.19 286.29 T
4 9 Q
(library-implementation.dylan) 277.12 286.29 T
8 10 Q
(.) 428.32 286.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: timespace) 105.65 266.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The sixty-unit class) 105.65 247.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <sixty-unit> \050<object>\051) 105.65 228.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 116.45 217.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <sixty-unit>;) 105.65 206.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 635.83 99.65 564.08 2 L
V
0.25 H
0 Z
N
513.65 635.83 513.65 564.08 2 L
V
N
99.52 635.95 513.77 635.95 2 L
V
N
99.52 615.95 513.77 615.95 2 L
V
N
99.52 563.95 513.77 563.95 2 L
V
N
99.65 502.83 99.65 360.08 2 L
V
N
513.65 502.83 513.65 360.08 2 L
V
N
99.52 502.95 513.77 502.95 2 L
V
N
99.52 482.95 513.77 482.95 2 L
V
N
99.52 359.95 513.77 359.95 2 L
V
N
99.65 298.83 99.65 200.08 2 L
V
N
513.65 298.83 513.65 200.08 2 L
V
N
99.52 298.95 513.77 298.95 2 L
V
N
99.52 278.95 513.77 278.95 2 L
V
N
99.52 199.95 513.77 199.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 114
%%Page: "101" 115
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8.3 The implementation file) 402.86 702.62 T
2 F
(101) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// decode-total-seconds) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method decode-total-seconds) 105.65 621.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sixty-unit :: <sixty-unit>\051) 127.25 610.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 599.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050abs\050time.total-seconds\051\051;) 116.45 588.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 105.65 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method decode-total-seconds) 105.65 558.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050total-seconds :: <integer>\051) 127.25 547.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 536.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 116.45 525.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 116.45 514.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050hours, minutes, seconds\051;) 116.45 503.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method decode-total-seconds;) 105.65 492.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// encode-total-seconds) 105.65 473.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method encode-total-seconds) 105.65 454.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 127.25 443.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=>) 111.05 432.95 T
(\050total-seconds :: <integer>\051) 127.25 432.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 116.45 421.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method encode-total-seconds;) 105.65 410.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The say generic function) 105.65 391.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Given an object, print a description of the object) 105.65 372.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic say \050any-object :: <object>\051 => \050\051;) 105.65 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time classes and methods) 105.65 342.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <time> \050<sixty-unit>\051) 105.65 323.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time>;) 105.65 312.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time>\051 => \050\051) 105.65 293.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 116.45 282.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out) 116.45 271.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 127.25 260.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 249.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 105.65 230.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-of-day> \050<time>\051) 105.65 219.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-of-day>;) 105.65 208.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A relative time between -24:00 and +24:00) 105.65 189.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <time-offset> \050<time>\051) 105.65 178.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <time-offset>;) 105.65 167.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 141.84 660.29 T
4 9 Q
(library-implementation.dylan) 250.77 660.29 T
8 10 Q
(.) 401.97 660.29 T
9 F
( \050contin) 404.75 660.29 T
(ued\051) 437.44 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 161.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 161.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 160.95 513.77 160.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 115
%%Page: "102" 116
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(102) 63.65 702.62 T
0 F
(Chapter 8) 87.4 702.62 T
(A Simple Library) 134.63 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// Method for determining whether a time offset is in the past) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time.total-seconds < 0;) 116.45 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method past?;) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050time :: <time-offset>\051) 105.65 588.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%s ", if \050past?\050time\051\051 "minus" else "plus" end\051;) 116.45 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 566.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 555.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Methods for adding times) 105.65 536.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method \134+) 105.65 517.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 127.25 506.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sum :: <time-offset>\051) 111.05 495.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sum = offset1.total-seconds + offset2.total-seconds;) 116.45 484.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>, total-seconds: sum\051;) 116.45 473.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134+;) 105.65 462.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134+) 105.65 443.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 127.25 432.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sum :: <time-of-day>\051) 111.05 421.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-of-day>,) 116.45 410.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 143.45 399.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134+;) 105.65 388.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134+) 105.65 369.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 127.25 358.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sum :: <time-of-day>\051) 111.05 347.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(offset + time-of-day;) 116.45 336.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134+;) 105.65 325.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Methods for comparing times) 105.65 306.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 105.65 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds < time2.total-seconds;) 116.45 276.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134<;) 105.65 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 105.65 246.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds < time2.total-seconds;) 116.45 235.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134<;) 105.65 224.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 105.65 205.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds = time2.total-seconds;) 116.45 194.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134=;) 105.65 183.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 141.84 660.29 T
4 9 Q
(library-implementation.dylan) 250.77 660.29 T
8 10 Q
(.) 401.97 660.29 T
9 F
( \050contin) 404.75 660.29 T
(ued\051) 437.44 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 177.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 177.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 176.95 513.77 176.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 116
%%Page: "103" 117
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8.3 The implementation file) 402.86 702.62 T
2 F
(103) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time1.total-seconds = time2.total-seconds;) 116.45 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method \134=;) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The angle classes and methods) 105.65 599.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <angle> \050<sixty-unit>\051) 105.65 580.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <angle>;) 105.65 569.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050angle :: <angle>\051 => \050\051) 105.65 550.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 116.45 539.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out) 116.45 528.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050"%d degrees %d minutes %d seconds",) 127.25 517.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(degrees, minutes, seconds\051;) 132.65 506.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 495.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <relative-angle> \050<angle>\051) 105.65 476.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <relative-angle>;) 105.65 465.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// We need to show degrees for <relative-angle> but we do not need to) 105.65 446.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// show minutes and seconds, so we override the method on <angle>) 105.65 435.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method say \050angle :: <relative-angle>\051 => \050\051) 105.65 424.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" %d degrees", decode-total-seconds\050angle\051\051;) 116.45 413.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 402.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define abstract class <directed-angle> \050<angle>\051) 105.65 383.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot direction :: <string>, init-keyword: direction:;) 116.45 372.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <directed-angle>;) 105.65 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050angle :: <directed-angle>\051 => \050\051) 105.65 342.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 331.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" %s", angle.direction\051;) 116.45 320.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 309.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The latitude and longitude classes and methods) 105.65 290.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <latitude> \050<directed-angle>\051) 105.65 271.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <latitude>;) 105.65 260.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050latitude :: <latitude>\051 => \050\051) 105.65 241.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 230.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" latitude\134n"\051;) 116.45 219.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 208.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <longitude> \050<directed-angle>\051) 105.65 189.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <longitude>;) 105.65 178.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 141.84 660.29 T
4 9 Q
(library-implementation.dylan) 250.77 660.29 T
8 10 Q
(.) 401.97 660.29 T
9 F
( \050contin) 404.75 660.29 T
(ued\051) 437.44 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 172.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 172.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 171.95 513.77 171.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 117
%%Page: "104" 118
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(104) 63.65 702.62 T
0 F
(Chapter 8) 87.4 702.62 T
(A Simple Library) 134.63 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define method say \050longitude :: <longitude>\051 => \050\051) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" longitude\134n"\051;) 116.45 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The position classes and methods) 105.65 588.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <position> \050<object>\051) 105.65 569.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <position>;) 105.65 558.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <absolute-position> \050<position>\051) 105.65 539.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot latitude :: <latitude>, init-keyword: latitude:;) 116.45 528.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot longitude :: <longitude>, init-keyword: longitude:;) 116.45 517.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <absolute-position>;) 105.65 506.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050position :: <absolute-position>\051 => \050\051) 105.65 487.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.latitude\051;) 116.45 476.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.longitude\051;) 116.45 465.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 454.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <relative-position> \050<position>\051) 105.65 435.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Distance is in miles) 116.45 424.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot distance :: <single-float>, init-keyword: distance:;) 116.45 413.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot angle :: <angle>, init-keyword: angle:;) 116.45 402.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <relative-position>;) 105.65 391.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050position :: <relative-position>\051 => \050\051) 105.65 372.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%d miles away at heading ", position.distance\051;) 116.45 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.angle\051;) 116.45 350.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The implementation \336le:) 141.84 660.29 T
4 9 Q
(library-implementation.dylan) 250.77 660.29 T
8 10 Q
(.) 401.97 660.29 T
9 F
( \050contin) 404.75 660.29 T
(ued\051) 437.44 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 333.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 333.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 332.95 513.77 332.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 118
%%Page: "105" 119
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8.4 The test file) 449.31 702.62 T
2 F
(105) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(8.4  The test \336le) 99.65 662.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The test \336le:) 242.63 633.29 T
4 9 Q
(test.dylan) 299.88 633.29 T
8 10 Q
(.) 353.88 633.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: timespace) 105.65 613.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <absolute-position>:\134n"\051;) 105.65 594.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *my-absolute-position*) 105.65 575.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<absolute-position>,) 116.45 564.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(latitude: make\050<latitude>,) 154.25 553.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 235.25 542.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "North"\051,) 235.25 531.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(longitude: make\050<longitude>,) 154.25 520.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 240.65 509.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "West"\051\051;) 240.65 498.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*my-absolute-position*\051;) 105.65 479.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n"\051;) 105.65 460.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <relative-position>:\134n"\051;) 105.65 441.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *her-relative-position*) 105.65 422.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<relative-position>,) 116.45 411.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(distance: 30,) 154.25 400.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(angle: make\050<angle>,) 154.25 389.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05090, 5, 0\051\051\051;) 219.05 378.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050*her-relative-position*\051;) 105.65 359.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n"\051;) 105.65 340.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <time-offset> in *minus-2-hours*.\134n"\051;) 105.65 321.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *minus-2-hours*) 105.65 302.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: - encode-total-seconds \0502, 0, 0\051\051;) 116.45 291.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <time-offset> in *plus-15-20-45*.\134n"\051;) 105.65 272.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *plus-15-20-45*) 105.65 253.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 45\051\051;) 116.45 242.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Creating an instance of <time-of-day> in *8-30-59*.\134n"\051;) 105.65 223.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define variable *8-30-59*) 105.65 204.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<time-of-day>, total-seconds: encode-total-seconds \0508, 30, 59\051\051;) 116.45 193.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 645.83 99.65 187.08 2 L
V
0.25 H
0 Z
N
513.65 645.83 513.65 187.08 2 L
V
N
99.52 645.95 513.77 645.95 2 L
V
N
99.52 625.95 513.77 625.95 2 L
V
N
99.52 186.95 513.77 186.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 119
%%Page: "106" 120
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(106) 63.65 702.62 T
0 F
(Chapter 8) 87.4 702.62 T
(A Simple Library) 134.63 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(When we r) 99.65 480.62 T
(un the test \336le, we see the following output and values:) 152.92 480.62 T
6 9 Q
(Creating an instance of <absolute-position>:) 99.65 459.95 T
(42 degrees 19 minutes 34 seconds North latitude) 99.65 448.95 T
(70 degrees 56 minutes 26 seconds West longitude) 99.65 437.95 T
(Creating an instance of <relative-position>:) 99.65 418.95 T
(30 miles away at heading 90 degrees) 99.65 407.95 T
(Creating an instance of <time-offset> in *minus-2-hours*.) 99.65 388.95 T
(Creating an instance of <time-offset> in *plus-15-20-45*.) 99.65 377.95 T
(Creating an instance of <time-of-day> in *8-30-59*.) 99.65 366.95 T
(Adding <time-offset> + <time-offset>: *minus-2-hours* + *plus-15-20-45":) 99.65 355.95 T
(13) 99.65 344.95 T
(20) 99.65 333.95 T
(45) 99.65 322.95 T
(Adding <time-offset> + <time-of-day>: *minus-2-hours* + *8-30-59":) 99.65 311.95 T
(6) 99.65 300.95 T
(30) 99.65 289.95 T
(59) 99.65 278.95 T
(Adding <time-of-day> + <time-offset>: *8-30-59* + *minus-2-hours*:) 99.65 267.95 T
(6) 99.65 256.95 T
(30) 99.65 245.95 T
(59) 99.65 234.95 T
3 15 Q
(8.5  Summar) 99.65 196.95 T
(y) 172.92 196.95 T
1 11 Q
(In this chapter) 99.65 176.62 T
(, we cr) 168.89 176.62 T
(eated the four \336les that constitute the) 200.62 176.62 T
4 10 Q
(timespace) 384.05 176.62 T
1 11 Q
( library) 438.05 176.62 T
(.) 472.37 176.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(format-out\050"Adding <time-offset> + <time-offset>: *minus-2-hours* + *plus-) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(15-20-45*:\134n"\051;) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050*minus-2-hours* + *plus-15-20-45*\051;) 105.65 610.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Adding <time-offset> + <time-of-day>: *minus-2-hours* + *8-30-) 105.65 591.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59*:\134n"\051;) 105.65 580.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050*minus-2-hours* + *8-30-59*\051;) 105.65 561.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Adding <time-of-day> + <time-offset>: *8-30-59* + *minus-2-) 105.65 542.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours* :\134n"\051;) 105.65 531.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds\050*8-30-59* + *minus-2-hours*\051;) 105.65 512.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The test \336le:) 216.28 660.29 T
4 9 Q
(test.dylan) 273.53 660.29 T
8 10 Q
(.) 327.53 660.29 T
9 F
( \050contin) 330.31 660.29 T
(ued\051) 363 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 506.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 506.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 505.95 513.77 505.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 120
%%Page: "107" 121
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(107) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 555.93 504.08 615.1 R
7 X
V
1 30 Q
0 X
(Part II.) 99.65 595.1 T
(Intermediate T) 204.62 595.1 T
(opics) 398.39 595.1 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.37 (Chapter 9,) 99.65 449.62 P
0 F
-0.37 (Nonclass T) 154.54 449.62 P
-0.37 (ypes) 203.16 449.62 P
1 F
-0.37 (, discusses types that ar) 222.72 449.62 P
-0.37 (e not classes, including singleton) 335.3 449.62 P
(types, limited types, and union types.) 99.65 435.62 T
-0.03 (Chapter 10,) 126.65 421.62 P
0 F
-0.03 (Slots) 188.06 421.62 P
1 F
-0.03 (, focuses on slot getters and setters, techniques for initializ-) 210.06 421.62 P
(ing slots, dif) 99.65 407.62 T
(fer) 159.12 407.62 T
(ent kinds of allocation of slots, virtual slots, and symbols.) 172.2 407.62 T
(Chapter 1) 126.65 393.62 T
(1,) 173.8 393.62 T
0 F
(Collections and Contr) 187.55 393.62 T
(ol Flow) 284.73 393.62 T
1 F
(, describes how to use collections,) 317.42 393.62 T
(including strings, lists, vectors, tables, and arrays. It also shows how to use) 99.65 379.62 T
(contr) 99.65 365.62 T
(ol-\337ow operators to alter the natural \050sequential\051 or) 124.67 365.62 T
(der of statement execu-) 374.27 365.62 T
(tion, including performing iteration.) 99.65 351.62 T
(Chapter 12,) 126.65 337.62 T
0 F
(Functions) 188.16 337.62 T
1 F
(, describes the syntax of function calls, the function-) 232.99 337.62 T
(calling pr) 99.65 323.62 T
(otocol, and the uses of functions as objects.) 145.66 323.62 T
(Chapter 13,) 126.65 309.62 T
0 F
(Libraries and Modules) 188.16 309.62 T
1 F
(, shows how you can package your code) 287.98 309.62 T
(into a r) 99.65 295.62 T
(eusable softwar) 133.99 295.62 T
(e component by designing libraries and modules.) 210.1 295.62 T
(Chapter 14,) 126.65 281.62 T
0 F
(Four Complete Libraries) 188.16 281.62 T
1 F
(, pulls together the techniques shown in) 295.94 281.62 T
(Part II in the context of a set of complete working libraries.) 99.65 267.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 121
%%Page: "108" 122
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 122
%%Page: "109" 123
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(109) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(9) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(9) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Nonclass T) 100.65 591.4 T
(ypes) 245.1 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.32 (Every class is a type, but not every type is a class. In this chapter) 99.65 449.62 P
-0.32 (, we describe how) 406.74 449.62 P
(to cr) 99.65 435.62 T
(eate nonclass types, and how to make use of them.) 121.02 435.62 T
3 15 Q
(9.1  Functions that create nonc) 99.65 395.95 T
(lass types) 280.56 395.95 T
1 11 Q
(Ther) 99.65 375.62 T
(e ar) 122.21 375.62 T
(e thr) 139.88 375.62 T
(ee functions that cr) 162.03 375.62 T
(eate types that ar) 254.36 375.62 T
(e not classes:) 337.2 375.62 T
4 10 Q
(singleton) 402.31 375.62 T
1 11 Q
(,) 456.31 375.62 T
4 10 Q
(type-) 461.81 375.62 T
(union) 99.65 361.62 T
1 11 Q
(, and) 129.65 361.62 T
4 10 Q
(limited) 156.52 361.62 T
1 11 Q
(.) 198.52 361.62 T
4 10 Q
(singleton) 126.65 335.62 T
1 11 Q
-0.01 (T) 207.65 335.62 P
-0.01 (akes any instance, and cr) 213.38 335.62 P
-0.01 (eates a type whose only member) 334.21 335.62 P
(is that instance. Y) 207.65 321.62 T
(ou can de\336ne a singleton type to be used) 291.82 321.62 T
(as the parameter specializer of a method that should be) 207.65 307.62 T
(chosen for a particular instance.) 207.65 293.62 T
4 10 Q
(type-union) 126.65 267.62 T
1 11 Q
(T) 207.65 267.62 T
(akes one or mor) 213.38 267.62 T
(e classes or types, and cr) 291.07 267.62 T
(eates a new type) 409.94 267.62 T
(whose members include all the members of the types that) 207.65 253.62 T
(ar) 207.65 239.62 T
(e its ar) 217.29 239.62 T
(guments.) 249.16 239.62 T
4 10 Q
(limited) 126.65 213.62 T
1 11 Q
(T) 207.65 213.62 T
(akes a type and cr) 213.38 213.62 T
(eates a new type, which is a mor) 300.66 213.62 T
(e) 458.17 213.62 T
(r) 207.65 199.62 T
(estricted version of the type that is its ar) 211.79 199.62 T
(gument \050the) 405.97 199.62 T
2 F
(base) 468.11 199.62 T
-0.24 (type) 207.65 185.62 P
1 F
-0.24 (\051. For example, you can de\336ne a new type that is based) 229.65 185.62 P
(on) 207.65 171.62 T
4 10 Q
(<integer>) 222.81 171.62 T
1 11 Q
(, but has a given minimum or maximum) 276.81 171.62 T
(value. Another example is to de\336ne a new collection type) 207.65 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 123
%%Page: "110" 124
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 63.65 702.62 T
(10) 68.05 702.62 T
0 F
(Chapter 9) 87.05 702.62 T
(Nonclass Types) 134.28 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(that speci\336es the type of elements, such as a type that is a) 207.65 665.62 T
(list of integers. The main r) 207.65 651.62 T
(easons for de\336ning types with) 334.7 651.62 T
4 10 Q
(limited) 207.65 637.62 T
1 11 Q
( ar) 249.65 637.62 T
(e to perform type checking and to incr) 262.05 637.62 T
(ease ef) 447.81 637.62 T
(\336-) 480 637.62 T
(ciency) 207.65 623.62 T
(. For information about the performance of limited) 237.18 623.62 T
(types, see Section 19.4, page 315.) 207.65 609.62 T
3 15 Q
(9.2  Examples of types that are not c) 99.65 522.95 T
(lasses) 312.03 522.95 T
1 11 Q
(Later in our development of the time library) 99.65 502.62 T
(, we shall \336nd it useful to de\336ne a) 313.43 502.62 T
(new type that r) 99.65 488.62 T
(epr) 173.55 488.62 T
(esents nonnegative integers:) 189.57 488.62 T
5 9 Q
(// Define nonnegative integers as integers that are >= zero) 99.65 467.95 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 99.65 456.95 T
1 11 Q
(W) 99.65 436.62 T
(e can use a nonclass type as a parameter specializer of a method, or as the type) 109.64 436.62 T
(of a r) 99.65 422.62 T
(eturn value:) 124.46 422.62 T
4 9 Q
(define method encode-total-seconds) 99.65 401.95 T
(\050max-unit :: <nonnegative-integer>,) 121.25 390.95 T
(minutes :: <nonnegative-integer>,) 126.65 379.95 T
(seconds :: <nonnegative-integer>\051) 126.65 368.95 T
(=>) 105.05 357.95 T
(\050total-seconds :: <nonnegative-integer>\051) 121.25 357.95 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 110.45 346.95 T
(end method encode-total-seconds;) 99.65 335.95 T
1 11 Q
(T) 99.65 315.62 T
(o see how we use) 105.38 315.62 T
4 10 Q
(<nonnegative-integer>) 192.93 315.62 T
1 11 Q
( in the time library) 318.93 315.62 T
(, see Section) 408.13 315.62 T
(10.2.2, page 120.) 99.65 301.62 T
(W) 126.65 287.62 T
(e can de\336ne a type whose only member is the false value,) 136.64 287.62 T
4 10 Q
(#f) 417.71 287.62 T
1 11 Q
(:) 429.71 287.62 T
4 9 Q
(singleton\050#f\051;) 99.65 266.95 T
1 11 Q
(W) 99.65 246.62 T
(e can de\336ne a type that is the union of the false value and) 109.64 246.62 T
4 10 Q
(<integer>) 391.09 246.62 T
1 11 Q
(:) 445.09 246.62 T
4 9 Q
(type-union\050singleton\050#f\051, <integer>\051;) 99.65 225.95 T
1 11 Q
(W) 99.65 205.62 T
(e can make it convenient for people to cr) 109.64 205.62 T
(eate new types like the one de\336ned in) 306.32 205.62 T
-0.34 (the pr) 99.65 191.62 P
-0.34 (eceding code. The new type is the union of the false value and the ar) 128.07 191.62 P
-0.34 (gument) 455.52 191.62 P
(to the method:) 99.65 177.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.49 (Convention:) 132.65 580.62 P
1 F
-0.49 (T) 196.94 580.62 P
-0.49 (ype names, like class names, ar) 202.69 580.62 P
-0.49 (e surr) 350.94 580.62 P
-0.49 (ounded with angle) 378.26 580.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(brackets \321 for example,) 132.65 566.62 T
4 10 Q
(<nonnegative-integer>) 253.1 566.62 T
1 11 Q
(.) 379.1 566.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 593.83 126.65 559.08 2 L
V
0.25 H
0 Z
N
477.65 593.83 477.65 559.08 2 L
V
N
126.52 593.95 477.77 593.95 2 L
V
N
126.52 558.95 477.77 558.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 124
%%Page: "111" 125
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9.3 Method dispatch and nonclass types) 356.27 702.62 T
2 F
(1) 518.1 702.62 T
(1) 522.5 702.62 T
(1) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method false-or \050other-type :: <type>\051 => \050combined-type :: <type>\051) 99.65 666.95 T
(type-union\050singleton\050#f\051, other-type\051;) 110.45 655.95 T
(end method false-or;) 99.65 644.95 T
2 11 Q
(False-or) 99.65 624.62 T
1 F
( types ar) 139.37 624.62 T
(e useful as the type of slots. Note that a slot can be uninitialized.) 180.76 624.62 T
-0.27 (Once a slot r) 99.65 610.62 P
-0.27 (eceives a value, however) 159.4 610.62 P
-0.27 (, it will always have a value: Ther) 278.54 610.62 P
-0.27 (e is no way) 439.39 610.62 P
(to r) 99.65 596.62 T
(eturn a slot to the uninitialized state. Sometimes it is useful to stor) 116.14 596.62 T
(e in a slot a) 436.46 596.62 T
(value that means none. Later on in our development of the airport example, we) 99.65 582.62 T
-0.39 (use a false-or type as the type of a slot that stor) 99.65 568.62 P
-0.39 (es \322the next vehicle, if ther) 322.64 568.62 P
-0.39 (e is one.\323) 449.51 568.62 P
(If ther) 99.65 554.62 T
(e is no next vehicle, the slot contains) 129.17 554.62 T
4 10 Q
(#f) 308.2 554.62 T
1 11 Q
(. W) 320.2 554.62 T
(e cr) 335.68 554.62 T
(eate the type by calling) 352.73 554.62 T
4 10 Q
-0 (false-or\050<vehicle>\051) 99.65 540.62 P
1 11 Q
-0 (, and use the r) 213.65 540.62 P
-0 (esult as the type of the slot. Note that, if the) 281.98 540.62 P
(type of the slot wer) 99.65 526.62 T
(e just) 193.2 526.62 T
4 10 Q
(<vehicle>) 221.43 526.62 T
1 11 Q
(, we could not stor) 275.43 526.62 T
(e) 365.46 526.62 T
4 10 Q
(#f) 373.48 526.62 T
1 11 Q
( in the slot, and ther) 385.48 526.62 T
(e) 482.33 526.62 T
(would be no way to r) 99.65 512.62 T
(epr) 203.42 512.62 T
(esent none.) 219.45 512.62 T
-0.06 (Y) 126.65 498.62 P
-0.06 (ou can use) 132.97 498.62 P
4 10 Q
-0.13 (type-union) 187.03 498.62 P
1 11 Q
-0.06 ( and) 247.03 498.62 P
4 10 Q
-0.13 (singleton) 271.03 498.62 P
1 11 Q
-0.06 ( together to de\336ne a type that is an) 325.03 498.62 P
(enumeration of multiple-choice objects. For example,) 99.65 484.62 T
4 9 Q
(define constant <latitude-direction>) 99.65 463.95 T
(= type-union\050singleton\050#"north"\051, singleton\050#"south"\051\051;) 110.45 452.95 T
1 11 Q
(The) 99.65 432.62 T
4 10 Q
(<latitude-direction>) 120.81 432.62 T
1 11 Q
( type has two valid values: the keywor) 240.81 432.62 T
(ds) 428.13 432.62 T
4 10 Q
(#"north") 442.27 432.62 T
1 11 Q
(and) 99.65 418.62 T
4 10 Q
(#"south") 121.02 418.62 T
1 11 Q
(. For an explanation of how we could use that type to enfor) 169.02 418.62 T
(ce the) 455.93 418.62 T
(corr) 99.65 404.62 T
(ect values of a latitude slot, and for information about the performance of) 119.03 404.62 T
(enumerations, see Section 19.5, page 318.) 99.65 390.62 T
3 15 Q
(9.3  Method dispatc) 99.65 350.95 T
(h and nonc) 213.69 350.95 T
(lass types) 279.08 350.95 T
1 11 Q
(In this section, we describe the implications for method dispatch of using) 99.65 330.62 T
-0.14 (nonclass types as parameter specializers. This advanced topic is included as r) 99.65 316.62 P
-0.14 (efer-) 473.44 316.62 P
(ence material; you can skip it safely if you pr) 99.65 302.62 T
(efer) 317 302.62 T
(. The description that we give) 334.73 302.62 T
(her) 99.65 288.62 T
(e is meant to pr) 115.47 288.62 T
(ovide a general understanding, and does not cover all cases.) 190.42 288.62 T
(For exact details, you should consult) 99.65 274.62 T
0 F
(The Dylan Refer) 280.18 274.62 T
(ence Manual) 353.33 274.62 T
1 F
(.) 410.67 274.62 T
(Recall that, when a generic function is called, Dylan determines which) 126.65 260.62 T
(method to invoke by comparing the r) 99.65 246.62 T
(equir) 281.03 246.62 T
(ed) 306.44 246.62 T
2 F
(arguments) 321.18 246.62 T
1 F
( passed to the generic) 374.34 246.62 T
-0.16 (function with the types of the corr) 99.65 232.62 P
-0.16 (esponding) 264.17 232.62 P
2 F
-0.16 (parameters) 318.16 232.62 P
1 F
-0.16 ( of the generic function\325s) 373.76 232.62 P
(methods. Dylan uses the following pr) 99.65 218.62 T
(ocedur) 282.46 218.62 T
(e, assuming that ther) 316.12 218.62 T
(e is only one) 417.76 218.62 T
(r) 99.65 204.62 T
(equir) 103.79 204.62 T
(ed ar) 129.21 204.62 T
(gument:) 153.59 204.62 T
2 F
(1.) 108.65 184.62 T
1 F
-0.22 (Find all the applicable methods. A method is applicable if the r) 126.65 184.62 P
-0.22 (equir) 429.66 184.62 P
-0.22 (ed ar) 455.07 184.62 P
-0.22 (gu-) 479.24 184.62 P
(ment is an instance of the type of the specialized parameter) 126.65 170.62 T
(.) 413.57 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 125
%%Page: "112" 126
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 63.65 702.62 T
(12) 68.05 702.62 T
0 F
(Chapter 9) 87.05 702.62 T
(Nonclass Types) 134.28 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(2.) 108.65 665.62 T
1 F
(Sort the applicable methods in or) 126.65 665.62 T
(der of speci\336city) 287.55 665.62 T
(. One method is mor) 366.9 665.62 T
(e spe-) 466.39 665.62 T
-0.34 (ci\336c than another if the type of its specialized parameter is a) 126.65 651.62 P
2 F
-0.34 (proper subtype) 416.89 651.62 P
1 F
(of the type of the other method\325s specialized parameter) 126.65 637.62 T
(. For de\336nitions of) 394.45 637.62 T
(\322pr) 126.65 623.62 T
(oper subtype\323 in various situations, see Sections 9.3.1 thr) 142.91 623.62 T
(ough 9.3.5.) 419.08 623.62 T
-0.39 (\050In the pr) 126.65 603.62 P
-0.39 (esence of multiple inheritance, the speci\336city r) 171.16 603.62 P
-0.39 (ule is mor) 393.98 603.62 P
-0.39 (e complex.) 441.54 603.62 P
(For mor) 126.65 589.62 T
(e information, see Section 18.4, page 300.\051) 165.73 589.62 T
2 F
(3.) 108.65 569.62 T
1 F
(Call the most speci\336c method.) 126.65 569.62 T
(\050If ther) 99.65 549.62 T
(e is mor) 132.84 549.62 T
(e than one r) 171.34 549.62 T
(equir) 228.57 549.62 T
(ed ar) 253.98 549.62 T
(gument, Dylan constr) 278.36 549.62 T
(ucts the sorted list of) 383.87 549.62 T
(methods by combining separate sorted lists for all r) 99.65 535.62 T
(equir) 348.93 535.62 T
(ed ar) 374.34 535.62 T
(guments.\051) 398.73 535.62 T
-0.04 (For any given ar) 126.65 521.62 P
-0.04 (gument and any given set of parameter types, Dylan has to) 206.1 521.62 P
(answer two questions:) 99.65 507.62 T
2 F
(1.) 108.65 487.62 T
1 F
-0.33 (Is the ar) 126.65 487.62 P
-0.33 (gument an instance of a given type? The answer determines method) 164.76 487.62 P
(applicability) 126.65 473.62 T
(.) 186.32 473.62 T
2 F
(2.) 108.65 453.62 T
1 F
(Is one type a pr) 126.65 453.62 T
(oper subtype of another type? The answer determines) 201.54 453.62 T
(method speci\336city) 126.65 439.62 T
(.) 214.95 439.62 T
3 13 Q
(9.3.1  Method dispatc) 99.65 408.29 T
(h and c) 207.38 408.29 T
(lasses) 244.51 408.29 T
1 11 Q
(W) 99.65 388.62 T
(e have alr) 109.64 388.62 T
(eady seen that, when all types ar) 156.64 388.62 T
(e classes, Dylan uses the following) 315.21 388.62 T
(r) 99.65 374.62 T
(ules:) 103.9 374.62 T
2 F
(1.) 108.65 354.62 T
1 F
(An object is an instance of a class if it is a general instance of that class \050a) 126.65 354.62 T
(dir) 126.65 340.62 T
(ect instance of the class or of one of that class\325s subclasses\051.) 140.72 340.62 T
2 F
(2.) 108.65 320.62 T
1 F
(One class is a pr) 126.65 320.62 T
(oper subtype of another if the \336rst class is a subclass of the) 205 320.62 T
(second.) 126.65 306.62 T
(For example, suppose that we have these de\336nitions:) 99.65 286.62 T
5 9 Q
(// Method 1) 99.65 265.95 T
4 F
(define method say \050x :: <number>\051 ... end method say;) 99.65 254.95 T
5 F
(// Method 2) 99.65 235.95 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 99.65 224.95 T
1 11 Q
(Now) 99.65 204.62 T
(, if) 122.96 204.62 T
4 10 Q
(say) 138.07 204.62 T
1 11 Q
( is called with an ar) 156.07 204.62 T
(gument of) 250.37 204.62 T
4 10 Q
(100) 303.26 204.62 T
1 11 Q
(, both methods ar) 321.26 204.62 T
(e applicable, and) 406.35 204.62 T
(method 2 is mor) 99.65 190.62 T
(e speci\336c than method 1.) 178.83 190.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 126
%%Page: "113" 127
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9.3 Method dispatch and nonclass types) 355.92 702.62 T
2 F
(1) 517.75 702.62 T
(13) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(9.3.2  Method dispatc) 99.65 664.29 T
(h and singletons) 207.38 664.29 T
1 11 Q
(When a type is a singleton, Dylan uses the following r) 99.65 644.62 T
(ules:) 361.71 644.62 T
2 F
(1.) 108.65 624.62 T
1 F
(An object is an instance of a singleton only if the object is identical to the) 126.65 624.62 T
(object used as the ar) 126.65 610.62 T
(gument in the call to) 224.4 610.62 T
4 10 Q
(singleton) 327.11 610.62 T
1 11 Q
( that cr) 381.11 610.62 T
(eated the) 414.72 610.62 T
(singleton.) 126.65 596.62 T
2 F
(2.) 108.65 576.62 T
1 F
(A singleton is a pr) 126.65 576.62 T
(oper subtype of any other type that the object belongs to.) 215.18 576.62 T
(Thus, a singleton is mor) 126.65 562.62 T
(e speci\336c than any other type of which an object is) 242.92 562.62 T
(an instance. In particular) 126.65 548.62 T
(, a singleton is mor) 246.56 548.62 T
(e speci\336c than the object\325s class.) 338.39 548.62 T
(For example, suppose that we have these de\336nitions:) 99.65 528.62 T
5 9 Q
(// Method 1) 99.65 507.95 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 99.65 496.95 T
5 F
(// Method 2) 99.65 477.95 T
4 F
(define method say \050x == 0\051 ... end method say;) 99.65 466.95 T
1 11 Q
-0.11 (Note that method 2 illustrates a convenient syntax for de\336ning a method on a sin-) 99.65 446.62 P
(gleton without calling) 99.65 432.62 T
4 10 Q
(singleton) 209.57 432.62 T
1 11 Q
( explicitly) 263.57 432.62 T
(.) 310.05 432.62 T
(Now) 126.65 418.62 T
(, if) 149.96 418.62 T
4 10 Q
(say) 165.07 418.62 T
1 11 Q
( is called with an ar) 183.07 418.62 T
(gument of) 277.37 418.62 T
4 10 Q
(0) 330.26 418.62 T
1 11 Q
(, both methods ar) 336.26 418.62 T
(e applicable,) 421.35 418.62 T
(and method 2 is mor) 99.65 404.62 T
(e speci\336c than method 1. If) 200.2 404.62 T
4 10 Q
(say) 333.34 404.62 T
1 11 Q
( is called with an ar) 351.34 404.62 T
(gument) 445.65 404.62 T
(that is any other integer) 99.65 390.62 T
(, only method 1 is applicable.) 214.59 390.62 T
3 13 Q
(9.3.3  Method dispatc) 99.65 359.29 T
(h and unions) 207.38 359.29 T
1 11 Q
(When a type is a union, Dylan uses the following r) 99.65 339.62 T
(ules:) 345.51 339.62 T
2 F
(1.) 108.65 319.62 T
1 F
-0.07 (An object is an instance of a union if it is an instance of any of the types that) 126.65 319.62 P
(make up that union.) 126.65 305.62 T
2 F
(2.) 108.65 285.62 T
1 F
(If none of the types that make up a union is a subtype of any other) 126.65 285.62 T
(, then) 448.39 285.62 T
(\245) 126.65 265.62 T
(A nonunion type is a pr) 144.65 265.62 T
(oper subtype of a union if the nonunion type is) 260.11 265.62 T
(a subtype of any of the types that make up the union.) 144.65 251.62 T
(\245) 126.65 231.62 T
(A union is a pr) 144.65 231.62 T
(oper subtype of a nonunion type if all types that make) 216.97 231.62 T
-0.04 (up the union ar) 144.65 217.62 P
-0.04 (e subtypes of the nonunion type, and if all the types that) 219.57 217.62 P
(make up the union, taken together) 144.65 203.62 T
(, ar) 311.53 203.62 T
(e not equivalent to the nonunion) 326.68 203.62 T
(type.) 144.65 189.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 127
%%Page: "114" 128
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 63.65 702.62 T
(14) 68.05 702.62 T
0 F
(Chapter 9) 87.05 702.62 T
(Nonclass Types) 134.28 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 126.65 665.62 T
(A union is a pr) 144.65 665.62 T
(oper subtype of another union if) 216.97 665.62 T
0 F
(each) 377.35 665.62 T
1 F
( of the types that) 396.49 665.62 T
-0.08 (make up the \336rst union is a subtype of) 144.65 651.62 P
0 F
-0.08 (one) 333.67 651.62 P
1 F
-0.08 ( of the types that make up the) 348.94 651.62 P
(other union, and if the two unions ar) 144.65 637.62 T
(e not equivalent.) 323.36 637.62 T
(For example, suppose that we have these de\336nitions:) 99.65 617.62 T
4 9 Q
(define constant <false-or-integer> = type-union\050<integer>, singleton\050#f\051\051;) 99.65 596.95 T
5 F
(// Method 1) 99.65 577.95 T
4 F
(define method say \050x :: <false-or-integer>\051 ... end method say;) 99.65 566.95 T
5 F
(// Method 2) 99.65 547.95 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 99.65 536.95 T
1 11 Q
(Now) 99.65 516.62 T
(, if) 122.96 516.62 T
4 10 Q
(say) 138.07 516.62 T
1 11 Q
( is called with an ar) 156.07 516.62 T
(gument that is an integer) 250.37 516.62 T
(, both methods ar) 371.31 516.62 T
(e appli-) 456.39 516.62 T
(cable, and method 2 is mor) 99.65 502.62 T
(e speci\336c than method 1. If) 230.64 502.62 T
4 10 Q
(say) 363.78 502.62 T
1 11 Q
( is called with an ar) 381.78 502.62 T
(gu-) 476.08 502.62 T
(ment of) 99.65 488.62 T
4 10 Q
(#f) 139.79 488.62 T
1 11 Q
(, only method 1 is applicable.) 151.79 488.62 T
3 13 Q
(9.3.4  Method dispatc) 99.65 457.29 T
(h and limited integ) 207.38 457.29 T
(er) 301.67 457.29 T
(s) 311.6 457.29 T
1 11 Q
(When a type is a limited-integer type, Dylan uses the following r) 99.65 437.62 T
(ules:) 413.94 437.62 T
2 F
(1.) 108.65 417.62 T
1 F
(An object is an instance of a limited-integer type if it is an instance of) 126.65 417.62 T
4 10 Q
(<integer>) 126.65 403.62 T
1 11 Q
( and if it is \050inclusively\051 within the speci\336ed range.) 180.65 403.62 T
2 F
(2.) 108.65 383.62 T
1 F
(A limited-integer type is a pr) 126.65 383.62 T
(oper subtype of) 267.4 383.62 T
4 10 Q
(<integer>) 346.52 383.62 T
1 11 Q
(, as long as it is not) 400.52 383.62 T
(equivalent to) 126.65 369.62 T
4 10 Q
(<integer>) 193.18 369.62 T
1 11 Q
(.) 247.18 369.62 T
-0.25 (One limited-integer type is a pr) 126.65 349.62 P
-0.25 (oper subtype of another limited-integer type) 277.93 349.62 P
(if the range of the \336rst type is entir) 126.65 335.62 T
(ely within the range of the second type,) 294.63 335.62 T
(and if the two types ar) 126.65 321.62 T
(e not equivalent.) 235.8 321.62 T
(For example, suppose that we have these de\336nitions:) 99.65 301.62 T
4 9 Q
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 99.65 280.95 T
5 F
(// Method 1) 99.65 261.95 T
4 F
(define method say \050x :: <integer>\051 ... end method say;) 99.65 250.95 T
5 F
(// Method 2) 99.65 231.95 T
4 F
(define method say \050x :: <nonnegative-integer>\051 ... end method say;) 99.65 220.95 T
1 11 Q
(Now) 99.65 200.62 T
(, if) 122.96 200.62 T
4 10 Q
(say) 138.07 200.62 T
1 11 Q
( is called with an ar) 156.07 200.62 T
(gument of) 250.37 200.62 T
4 10 Q
(1) 303.26 200.62 T
1 11 Q
(, both methods ar) 309.26 200.62 T
(e applicable, and) 394.35 200.62 T
(method 2 is mor) 99.65 186.62 T
(e speci\336c than method 1. If) 178.83 186.62 T
4 10 Q
(say) 311.97 186.62 T
1 11 Q
( is called with an ar) 329.97 186.62 T
(gument of) 424.27 186.62 T
4 10 Q
(-1) 477.16 186.62 T
1 11 Q
(,) 489.16 186.62 T
(only method 1 is applicable.) 99.65 172.62 T
(Now suppose that, instead, we have the following de\336nitions:) 126.65 158.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 128
%%Page: "115" 129
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9.3 Method dispatch and nonclass types) 355.92 702.62 T
2 F
(1) 517.75 702.62 T
(15) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define constant <limited-integer-1> = limited\050<integer>, min: -2, max: 2\051;) 99.65 666.95 T
(define constant <limited-integer-2> = limited\050<integer>, min: 0, max: 4\051;) 99.65 647.95 T
5 F
(// Method 1) 99.65 628.95 T
4 F
(define method say \050x :: <limited-integer-1>\051 ... end method say;) 99.65 617.95 T
5 F
(// Method 2) 99.65 598.95 T
4 F
(define method say \050x :: <limited-integer-2>\051 ... end method say;) 99.65 587.95 T
1 11 Q
-0.15 (Now) 99.65 567.62 P
-0.15 (, if) 122.96 567.62 P
4 10 Q
-0.32 (say) 137.78 567.62 P
1 11 Q
-0.15 ( is called with an ar) 155.78 567.62 P
-0.15 (gument of) 249.35 567.62 P
4 10 Q
-0.32 (1) 301.95 567.62 P
1 11 Q
-0.15 (, both methods ar) 307.95 567.62 P
-0.15 (e applicable, and nei-) 392.6 567.62 P
(ther method is mor) 99.65 553.62 T
(e speci\336c than the other; the two methods ar) 192.93 553.62 T
(e) 407.9 553.62 T
2 F
(ambiguous) 415.92 553.62 T
1 F
(. If) 472.14 553.62 T
(no mor) 99.65 539.62 T
(e speci\336c method exists, Dylan signals an err) 134.67 539.62 T
(or when we call) 352.01 539.62 T
4 10 Q
(say) 431.84 539.62 T
1 11 Q
( with an) 449.84 539.62 T
(ar) 99.65 525.62 T
(gument of) 109.29 525.62 T
4 10 Q
(1) 162.18 525.62 T
1 11 Q
(.) 168.18 525.62 T
3 13 Q
(9.3.5  Method dispatc) 99.65 494.29 T
(h and limited collections) 207.38 494.29 T
1 11 Q
(When a type is a limited-collection type, Dylan uses the following r) 99.65 474.62 T
(ules:) 426.39 474.62 T
2 F
(1.) 108.65 454.62 T
1 F
(An object is an instance of a limited-collection type) 126.65 454.62 T
0 F
(<L1>) 376.38 454.62 T
1 F
( if the object was) 401.33 454.62 T
-0.12 (cr) 126.65 440.62 P
-0.12 (eated via) 135.68 440.62 P
4 10 Q
-0.25 (make) 182.21 440.62 P
1 11 Q
-0.12 ( \050or a similar constr) 206.21 440.62 P
-0.12 (uctor\051 applied to limited-collection type) 299.88 440.62 P
0 F
(<L2>) 126.65 426.62 T
1 F
(, and if) 151.6 426.62 T
0 F
(<L2>) 188.08 426.62 T
1 F
( is a subtype of) 213.03 426.62 T
0 F
(<L1>) 288.78 426.62 T
1 F
(. An instance of a limited-collection) 313.73 426.62 T
(type is also an instance of the collection\325s base type.) 126.65 412.62 T
2 F
(2.) 108.65 392.62 T
1 F
(A limited-collection type is a pr) 126.65 392.62 T
(oper subtype of its base type, as long as it is) 279.86 392.62 T
(not equivalent to the base type.) 126.65 378.62 T
(Generally) 126.65 358.62 T
(, one limited-collection type is a pr) 173.12 358.62 T
(oper subtype of another) 340.95 358.62 T
(limited-collection type if all the following ar) 126.65 344.62 T
(e tr) 340.57 344.62 T
(ue: the base type of the \336rst) 356.43 344.62 T
-0.04 (is a subclass of the base type of the second; the two element types ar) 126.65 330.62 P
-0.04 (e equiv-) 456.53 330.62 P
(alent; the size or dimensions of the \336rst limited type ar) 126.65 316.62 T
(e no less r) 391.64 316.62 T
(estricted) 439.51 316.62 T
(than those of the second type; and the \336rst limited type is not equivalent to) 126.65 302.62 T
(the second.) 126.65 288.62 T
(For example, suppose that we have these de\336nitions:) 99.65 268.62 T
4 9 Q
(define constant <limited-vector-of-3-integers>) 99.65 247.95 T
(= limited\050<vector>, of: <integer>, size: 3\051;) 110.45 236.95 T
(define constant <limited-vector-of-3-numbers>) 99.65 217.95 T
(= limited\050<vector>, of: <number>, size: 3\051;) 110.45 206.95 T
-0.22 (define constant $v1 = make\050<limited-vector-of-3-integers>, size: 3, fill: 1\051;) 99.65 187.95 P
(define constant $v2 = vector\0501, 1, 1\051;) 99.65 168.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 129
%%Page: "116" 130
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 63.65 702.62 T
(16) 68.05 702.62 T
0 F
(Chapter 9) 87.05 702.62 T
(Nonclass Types) 134.28 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// Method 1) 99.65 666.95 T
4 F
(define method say \050x :: <vector>\051 ... end method say;) 99.65 655.95 T
5 F
(// Method 2) 99.65 636.95 T
4 F
(define method say \050x :: <limited-vector-of-3-integers>\051 ... end method say;) 99.65 625.95 T
5 F
(// Method 3) 99.65 606.95 T
4 F
(define method say \050x :: <limited-vector-of-3-numbers>\051 ... end method say;) 99.65 595.95 T
1 11 Q
(Now) 99.65 575.62 T
(, if) 122.96 575.62 T
4 10 Q
(say) 138.07 575.62 T
1 11 Q
( is called with an ar) 156.07 575.62 T
(gument of) 250.37 575.62 T
4 10 Q
($v1) 303.26 575.62 T
1 11 Q
(, both method 1 and method 2 ar) 321.26 575.62 T
(e) 480 575.62 T
(applicable, and method 2 is mor) 99.65 561.62 T
(e speci\336c than method 1. Note that) 255.76 561.62 T
4 10 Q
($v1) 427.36 561.62 T
1 11 Q
( is an) 445.36 561.62 T
(instance of) 99.65 547.62 T
4 10 Q
(<limited-vector-of-3-integers>) 154.73 547.62 T
1 11 Q
( but is not an instance of) 334.73 547.62 T
4 10 Q
-0.49 (<limited-vector-of-3-numbers>) 99.65 533.62 P
1 11 Q
-0.22 (, because the element type of) 273.65 533.62 P
4 10 Q
-0.49 ($v1) 415.07 533.62 P
1 11 Q
-0.22 ( is not equiv-) 433.07 533.62 P
(alent to the element type of) 99.65 519.62 T
4 10 Q
(<limited-vector-of-3-numbers>.) 234.91 519.62 T
1 11 Q
(If) 126.65 505.62 T
4 10 Q
(say) 136.77 505.62 T
1 11 Q
( is called with an ar) 154.77 505.62 T
(gument of) 249.07 505.62 T
4 10 Q
($v2) 301.96 505.62 T
1 11 Q
(, only method 1 is applicable. Note) 319.96 505.62 T
(that) 99.65 491.62 T
4 10 Q
($v2) 121.47 491.62 T
1 11 Q
(is not an instance of either of the limited-collection types we de\336ned,) 145.47 491.62 T
(even though) 99.65 477.62 T
4 10 Q
($v2) 163.45 477.62 T
1 11 Q
( is a vector that contains thr) 181.45 477.62 T
(ee integers. \050For example, we could) 315.47 477.62 T
(stor) 99.65 463.62 T
(e objects other than integers in) 118.05 463.62 T
4 10 Q
($v2) 268.84 463.62 T
1 11 Q
(.\051) 286.84 463.62 T
3 15 Q
(9.4  Summar) 99.65 423.95 T
(y) 172.92 423.95 T
1 11 Q
(In this chapter) 99.65 403.62 T
(, we discussed types that ar) 168.89 403.62 T
(e not classes:) 302.22 403.62 T
(\245) 108.65 383.62 T
(A) 126.65 383.62 T
2 F
(singleton type) 137.96 383.62 T
1 F
( is a type whose only member is one particular instance.) 209.75 383.62 T
(An example of cr) 126.65 369.62 T
(eating a singleton type is:) 209.8 369.62 T
4 9 Q
(singleton\050#f\051;) 126.65 348.95 T
1 11 Q
(\245) 108.65 328.62 T
(A) 126.65 328.62 T
2 F
(union type) 137.96 328.62 T
1 F
( is a type whose members include all the members of one or) 192.65 328.62 T
(mor) 126.65 314.62 T
(e base types. An example of cr) 146.51 314.62 T
(eating a union type is:) 293.69 314.62 T
4 9 Q
(type-union\050singleton\050#f\051, <integer>\051;) 126.65 293.95 T
1 11 Q
(\245) 108.65 273.62 T
-0.16 (A) 126.65 273.62 P
2 F
-0.16 (limited type) 137.8 273.62 P
1 F
-0.16 ( is a type that is a mor) 199.04 273.62 P
-0.16 (e r) 304.44 273.62 P
-0.16 (estricted version of its base type. For) 316.44 273.62 P
(example, a limited-integer type is based on) 126.65 259.62 T
4 10 Q
(<integer>) 338.22 259.62 T
1 11 Q
(, but has a given) 392.22 259.62 T
(minimum or maximum value:) 126.65 245.62 T
4 9 Q
(limited\050<integer>, min: 0\051;) 126.65 224.95 T
1 11 Q
(Another example of a limited type is a limited-collection type, which is a) 126.65 204.62 T
(collection type that speci\336es the type of elements, and/or the size of the) 126.65 190.62 T
(collection:) 126.65 176.62 T
4 9 Q
(limited\050<vector>, of: <integer>, size: 3\051;) 126.65 155.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 130
%%Page: "117" 131
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 290.7 135.62 T
(17) 295.1 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(10) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(10) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Slots) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.01 (In this chapter) 99.65 449.62 P
-0.01 (, we show how to call getters and setters with the function-call syn-) 168.87 449.62 P
(tax, and how to de\336ne methods for getters and setters. W) 99.65 435.62 T
(e show techniques for) 376.73 435.62 T
(initializing slots, including slot options and) 99.65 421.62 T
4 10 Q
(initialize) 313.05 421.62 T
1 11 Q
( methods. W) 373.05 421.62 T
(e describe) 433.65 421.62 T
(the dif) 99.65 407.62 T
(fer) 131.04 407.62 T
(ent allocations that slots can have. W) 144.12 407.62 T
(e \336nd a need for symbols, so we) 322.13 407.62 T
(describe and use symbols as well.) 99.65 393.62 T
3 15 Q
(10.1  Dot-syntax abbre) 99.65 353.95 T
(viation f) 230.73 353.95 T
(or simple function calls) 277.67 353.95 T
1 11 Q
-0 (The dot syntax that we have shown for getters in Section 4.4, page 42, is an abbr) 99.65 333.62 P
-0 (e-) 486.71 333.62 P
(viation for a function call. The \336rst expr) 99.65 319.62 T
(ession is an abbr) 292.2 319.62 T
(eviation for the second) 372.24 319.62 T
(expr) 99.65 305.62 T
(ession:) 121.35 305.62 T
6 9 Q
(object.function-name) 99.65 284.95 T
(function-name) 99.65 265.95 T
4 10 Q
(\050) 169.85 265.95 T
6 9 Q
(object) 175.85 265.95 T
4 10 Q
(\051) 208.25 265.95 T
1 11 Q
(The dot syntax used with the assignment operator also is an abbr) 99.65 245.62 T
(eviation for a) 415.61 245.62 T
(function call. The \336rst two expr) 99.65 231.62 T
(essions ar) 251.84 231.62 T
(e abbr) 299.11 231.62 T
(eviations for the thir) 328.94 231.62 T
(d expr) 427.84 231.62 T
(ession:) 459.02 231.62 T
6 9 Q
(object.name) 99.65 210.95 T
4 F
( :=) 159.05 210.95 T
6 F
(new-value) 180.65 210.95 T
4 F
(;) 229.25 210.95 T
6 F
(name\050object\051) 99.65 191.95 T
4 F
( :=) 164.45 191.95 T
6 F
(new-value) 186.05 191.95 T
4 F
(;) 234.65 191.95 T
6 F
(name) 99.65 172.95 T
4 F
(-setter\050) 121.25 172.95 T
6 F
(new-value) 164.45 172.95 T
4 F
(,) 213.05 172.95 T
6 F
(object) 223.85 172.95 T
4 F
(\051;) 256.25 172.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 131
%%Page: "118" 132
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(1) 63.65 702.62 T
(18) 68.05 702.62 T
0 F
(Chapter 10) 87.05 702.62 T
(Slots) 139.03 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.27 (Y) 99.65 665.62 P
-0.27 (ou can use the dot syntax as an abbr) 105.97 665.62 P
-0.27 (eviation for any function call that takes a sin-) 279.2 665.62 P
-0.43 (gle ar) 99.65 651.62 P
-0.43 (gument and r) 126.2 651.62 P
-0.43 (eturns a single value. For example, in Section 5.1.3, page 54, we) 191.34 651.62 P
(de\336ned the following method:) 99.65 637.62 T
4 9 Q
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 99.65 616.95 T
(time.total-seconds < 0;) 110.45 605.95 T
(end method past?;) 99.65 594.95 T
1 11 Q
(The following two calls ar) 99.65 574.62 T
(e equivalent:) 225.9 574.62 T
4 9 Q
(past?\050*my-time-offset*\051;) 99.65 553.95 T
(*my-time-offset*.past?;) 99.65 534.95 T
1 11 Q
(In the r) 99.65 514.62 T
(emainder of this book, we use the dot syntax for function calls that r) 134.66 514.62 T
(eturn) 465.3 514.62 T
-0.32 (a pr) 99.65 500.62 P
-0.32 (operty of an object \050such as the) 118.33 500.62 P
4 10 Q
-0.7 (past?) 268.9 500.62 P
1 11 Q
-0.32 ( pr) 298.9 500.62 P
-0.32 (operty of a) 312.09 500.62 P
4 10 Q
-0.7 (<time-offset>) 366.47 500.62 P
1 11 Q
-0.32 ( instance\051,) 444.47 500.62 P
(and that take a single ar) 99.65 486.62 T
(gument and r) 215.57 486.62 T
(eturn a single value.) 281.55 486.62 T
3 15 Q
(10.2  Getter) 99.65 446.95 T
(s and setter) 166.49 446.95 T
(s f) 235.37 446.95 T
(or slots) 249.5 446.95 T
1 11 Q
(As shown in Section 4.4, page 42, when you de\336ne a class, Dylan automatically) 99.65 426.62 T
(de\336nes a getter method to r) 99.65 412.62 T
(eturn the value of a slot, and de\336nes a setter method) 233.49 412.62 T
(to change the value of a slot.) 99.65 398.62 T
(The name of the getter is always the name of the slot. Thus, the getter for the) 99.65 277.62 T
4 10 Q
(total-seconds) 99.65 263.62 T
1 11 Q
( slot is) 177.65 263.62 T
4 10 Q
(total-seconds) 211.22 263.62 T
1 11 Q
(. Let\325s look at an example of calling a get-) 289.22 263.62 T
(ter) 99.65 249.62 T
(. The \336rst expr) 112.03 249.62 T
(ession is an abbr) 182.4 249.62 T
(eviation for the second expr) 262.44 249.62 T
(ession:) 397.74 249.62 T
4 9 Q
(*my-time-of-day*.total-seconds;) 99.65 228.95 T
(total-seconds\050*my-time-of-day*\051;) 99.65 209.95 T
1 11 Q
-0.22 (The pr) 99.65 189.62 P
-0.22 (eceding expr) 131.35 189.62 P
-0.22 (essions ar) 193.45 189.62 P
-0.22 (e calls to the getter function named) 240.5 189.62 P
4 10 Q
-0.47 (total-seconds) 412.36 189.62 P
1 11 Q
-0.22 (.) 490.36 189.62 P
(The choice of which syntax to use is pur) 99.65 175.62 T
(ely a matter of personal style. The \336rst) 293.8 175.62 T
(syntax is pr) 99.65 161.62 T
(ovided for those people who pr) 155.71 161.62 T
(efer the slightly mor) 308.85 161.62 T
(e concise dot syn-) 407.25 161.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.22 (Performance note:) 132.65 369.62 P
1 F
-0.22 ( For slot accesses, given accurate type declarations,) 223.49 369.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the compiler can typically optimize away not only the method dis-) 132.65 355.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (patch, but also the function call, making the executed code just as ef) 132.65 341.62 P
-0.01 (\336-) 461.33 341.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (cient as it would be in a language such as C, wher) 132.65 327.62 P
-0.28 (e str) 371.32 327.62 P
-0.28 (uctur) 391.56 327.62 P
-0.28 (e or r) 417.45 327.62 P
-0.28 (ecor) 442.15 327.62 P
-0.28 (d) 462.46 327.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slots ar) 132.65 313.62 T
(e accessed dir) 167.17 313.62 T
(ectly) 233.86 313.62 T
(. See Chapter 19,) 255.69 313.62 T
0 F
(Performance and Flexibility) 341.77 313.62 T
1 F
(.) 465.02 313.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 382.83 126.65 306.08 2 L
V
0.25 H
0 Z
N
477.65 382.83 477.65 306.08 2 L
V
N
126.52 382.95 477.77 382.95 2 L
V
N
126.52 305.95 477.77 305.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 132
%%Page: "119" 133
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.2 Getters and setters for slots) 384.76 702.62 T
2 F
(1) 517.75 702.62 T
(19) 522.15 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(tax. The second syntax is pr) 99.65 665.62 T
(ovided for those people who pr) 233.84 665.62 T
(efer slot accesses to) 386.97 665.62 T
(look like function calls. In this book, we use the dot syntax.) 99.65 651.62 T
(By default, the name of the setter is the slot\325s name followed by) 126.65 637.62 T
4 10 Q
(-setter) 436.97 637.62 T
1 11 Q
(.) 478.15 637.62 T
(Thus, the setter for the) 99.65 623.62 T
4 10 Q
(total-seconds) 211.84 623.62 T
1 11 Q
( slot is) 289.84 623.62 T
4 10 Q
(total-seconds-setter) 323.41 623.62 T
1 11 Q
(. Y) 442.6 623.62 T
(ou can) 454.42 623.62 T
(use the) 99.65 609.62 T
4 10 Q
(:setter) 136.97 609.62 T
1 11 Q
( slot option to specify a dif) 178.97 609.62 T
(fer) 307.63 609.62 T
(ent name for the setter) 320.71 609.62 T
(.) 429.02 609.62 T
-0.2 (The dot-syntax abbr) 126.65 595.62 P
-0.2 (eviation for assignment enables you to invoke the setter) 223.89 595.62 P
(by using assignment with the name of the getter) 99.65 581.62 T
(. For example, the \336rst two) 333.17 581.62 T
(expr) 99.65 567.62 T
(essions ar) 121.35 567.62 T
(e abbr) 168.62 567.62 T
(eviations for the thir) 198.45 567.62 T
(d expr) 297.35 567.62 T
(ession:) 328.52 567.62 T
4 9 Q
(*my-time-of-day*.total-seconds := 180;) 99.65 546.95 T
(total-seconds\050*my-time-of-day*\051 := 180;) 99.65 527.95 T
(total-seconds-setter\050180, *my-time-of-day*\051;) 99.65 508.95 T
1 11 Q
(Each of these expr) 99.65 488.62 T
(essions stor) 187.97 488.62 T
(es the value) 243.99 488.62 T
4 10 Q
(180) 304.25 488.62 T
1 11 Q
( in the slot named) 322.25 488.62 T
4 10 Q
(total-seconds) 411.92 488.62 T
1 11 Q
(of the object that is the value of the) 99.65 474.62 T
4 10 Q
(*my-time-of-day*) 271.67 474.62 T
1 11 Q
( variable.) 367.67 474.62 T
(Most Dylan pr) 126.65 460.62 T
(ogrammers do not use the syntax of the thir) 197.3 460.62 T
(d expr) 409.72 460.62 T
(ession to) 440.9 460.62 T
(call a setter) 99.65 446.62 T
(, because it is mor) 153.34 446.62 T
(e verbose than the \336rst and second expr) 239.91 446.62 T
(essions.) 432.95 446.62 T
(However) 99.65 432.62 T
(, it is important to know the name of the setter) 144.26 432.62 T
(, so that you can de\336ne) 368.38 432.62 T
(setter methods. For example, to de\336ne a method on the setter for the) 99.65 418.62 T
4 10 Q
(total-) 434.44 418.62 T
-0.61 (seconds) 99.65 404.62 P
1 11 Q
-0.28 ( slot, you de\336ne it on) 141.65 404.62 P
4 10 Q
-0.61 (total-seconds-setter) 244.93 404.62 P
1 11 Q
-0.28 (. For an example of a setter) 364.12 404.62 P
(method, see Section 10.2.2.) 99.65 390.62 T
-0.14 (If you do not want Dylan to de\336ne a setter method for a slot, you can de\336ne) 126.65 376.62 P
(the slot to be constant, using the) 99.65 362.62 T
4 10 Q
(constant) 258.61 362.62 T
1 11 Q
( slot adjective, or you can give the) 306.61 362.62 T
4 10 Q
(:setter #f) 99.65 348.62 T
1 11 Q
( slot option.) 159.65 348.62 T
-0.32 (For mor) 126.65 334.62 P
-0.32 (e information about accessing slots, see Section 12.1.2, page 163, and) 165.41 334.62 P
(Section 12.1.6, page 166.) 99.65 320.62 T
3 13 Q
(10.2.1  Ad) 99.65 289.29 T
(v) 149.28 289.29 T
(anta) 155.01 289.29 T
(g) 176.84 289.29 T
(es of accessing slots via g) 183.46 289.29 T
(eneric functions) 318.07 289.29 T
1 11 Q
(A slot is conceptually like a variable, in that it has a value. But the only way to) 99.65 269.62 T
(access a slot\325s value is to call a generic function. Using generic functions and) 99.65 255.62 T
(methods to gain access to slot values has thr) 99.65 241.62 T
(ee important advantages:) 313.92 241.62 T
(\245) 108.65 221.62 T
(Generic functions pr) 126.65 221.62 T
(ovide a public interface to the private implementation) 226.11 221.62 T
(of a slot. By making the r) 126.65 207.62 T
(epr) 247.81 207.62 T
(esentation of the slot visible to only the meth-) 263.84 207.62 T
(ods of the generic functions, you can change the r) 126.65 193.62 T
(epr) 366.91 193.62 T
(esentation without) 382.94 193.62 T
(changing any of the users of the information \321 the callers of the generic) 126.65 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 133
%%Page: "120" 134
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(120) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(functions. In most cases, a compiler can optimize slot r) 126.65 665.62 T
(efer) 391.61 665.62 T
(ences to r) 409.95 665.62 T
(educe) 455.68 665.62 T
(or eliminate the cost of hiding the implementation.) 126.65 651.62 T
(\245) 108.65 631.62 T
(A subclass can specialize, or \336lter) 126.65 631.62 T
(, r) 288.68 631.62 T
(efer) 298.33 631.62 T
(ences to super) 316.67 631.62 T
(class slots. For exam-) 385.58 631.62 T
(ple, the classes) 126.65 617.62 T
4 10 Q
(<latitude>) 200.83 617.62 T
1 11 Q
( and) 260.83 617.62 T
4 10 Q
(<longitude>) 284.95 617.62 T
1 11 Q
( inherit the) 350.95 617.62 T
4 10 Q
(direction) 406.87 617.62 T
1 11 Q
( slot) 460.87 617.62 T
(fr) 126.65 603.62 T
(om their super) 134.46 603.62 T
(class) 205.8 603.62 T
4 10 Q
(<directed-angle>) 231.47 603.62 T
1 11 Q
(. In Section 10.6, we show how to) 327.47 603.62 T
(pr) 126.65 589.62 T
(ovide a setter method for the dir) 137.41 589.62 T
(ection slot of) 294.57 589.62 T
4 10 Q
(<latitude>) 359.3 589.62 T
1 11 Q
( that ensur) 419.3 589.62 T
(es) 470.99 589.62 T
(that the value is north or south, and a setter method for the dir) 126.65 575.62 T
(ection slot of) 430.42 575.62 T
4 10 Q
(<longitude>) 126.65 561.62 T
1 11 Q
( that ensur) 192.65 561.62 T
(es that the value is east or west.) 244.34 561.62 T
(\245) 108.65 541.62 T
(A slot access can involve arbitrary computation. For example, a slot can be) 126.65 541.62 T
2 F
(virtual) 126.65 527.62 T
1 F
(. See Section 10.6.) 160.25 527.62 T
3 13 Q
(10.2.2  Setter methods) 99.65 496.29 T
1 11 Q
(In most cases, the getter and setter methods that Dylan de\336nes for each slot ar) 99.65 476.62 T
(e) 478.05 476.62 T
(perfectly adequate. In certain cases, however) 99.65 462.62 T
(, you might want to change the way) 316.62 462.62 T
(a getter or setter works.) 99.65 448.62 T
(For example, we can de\336ne a setter method to solve a pr) 126.65 434.62 T
(oblem in our time) 400.02 434.62 T
(library) 99.65 420.62 T
(. The class) 131.22 420.62 T
4 10 Q
(<time-of-day>) 183.54 420.62 T
1 11 Q
( inherits the) 261.55 420.62 T
4 10 Q
(total-seconds) 322.12 420.62 T
1 11 Q
( slot fr) 400.12 420.62 T
(om the class) 430.89 420.62 T
4 10 Q
(<sixty-unit>) 99.65 406.62 T
1 11 Q
(. The type of the slot is) 171.65 406.62 T
4 10 Q
(<integer>) 283.89 406.62 T
1 11 Q
(. However) 337.89 406.62 T
(, the semantics of) 388.01 406.62 T
4 10 Q
(<time-of-day>) 99.65 392.62 T
1 11 Q
( state that the) 177.65 392.62 T
4 10 Q
(total-seconds) 245.58 392.62 T
1 11 Q
( should not be less than 0. W) 323.58 392.62 T
(e can) 461.73 392.62 T
(de\336ne a setter method for) 99.65 378.62 T
4 10 Q
(<time-of-day>) 227.64 378.62 T
1 11 Q
( to ensur) 305.64 378.62 T
(e that the new value for the) 347.85 378.62 T
(total-seconds slot is 0 or gr) 99.65 364.62 T
(eater) 228.99 364.62 T
(.) 252.14 364.62 T
(In our setter method, we will use the type de\336ned in Section 9.2, page 1) 126.65 350.62 T
(10,) 472.69 350.62 T
(and r) 99.65 336.62 T
(epeated her) 125.17 336.62 T
(e:) 181.96 336.62 T
5 9 Q
(// Define nonnegative integers as integers that are >= zero) 99.65 315.95 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 99.65 304.95 T
1 11 Q
(The setter method is as follows:) 99.65 284.62 T
4 9 Q
(define method total-seconds-setter) 99.65 263.95 T
(\050total-seconds :: <integer>, time :: <time-of-day>\051) 121.25 252.95 T
(=> \050total-seconds :: <nonnegative-integer>\051) 105.05 241.95 T
(if \050total-seconds >= 0\051) 110.45 230.95 T
(next-method\050\051;) 121.25 219.95 T
(else) 110.45 208.95 T
(error\050"%d is invalid. total-seconds cannot be negative.", total-seconds\051;) 121.25 197.95 T
(end if;) 110.45 186.95 T
(end method total-seconds-setter;) 99.65 175.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 134
%%Page: "121" 135
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.2 Getters and setters for slots) 384.41 702.62 T
2 F
(121) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(When the setter for the) 99.65 665.62 T
4 10 Q
(total-seconds) 213.72 665.62 T
1 11 Q
( slot is called with an instance of) 291.72 665.62 T
4 10 Q
(<time-) 451.66 665.62 T
(of-day>) 99.65 651.62 T
1 11 Q
(, the pr) 141.65 651.62 T
(eceding method will be invoked, because it is mor) 175.91 651.62 T
(e speci\336c than) 419.1 651.62 T
-0.17 (the method that Dylan generated on the) 99.65 637.62 P
4 10 Q
-0.37 (<sixty-unit>) 295.62 637.62 P
1 11 Q
-0.17 ( class. If the new value for) 367.62 637.62 P
(the) 99.65 623.62 T
4 10 Q
(total-seconds) 117.65 623.62 T
1 11 Q
( slot is valid \050that is, is gr) 195.65 623.62 T
(eater than or equal to 0\051, then this) 316.55 623.62 T
-0.39 (method calls) 99.65 609.62 P
4 10 Q
-0.85 (next-method) 163.52 609.62 P
1 11 Q
-0.39 (, which invokes the setter method on) 229.52 609.62 P
4 10 Q
-0.85 (<sixty-unit>) 408.81 609.62 P
1 11 Q
-0.39 (. If) 480.81 609.62 P
(the new value is less than 0, an err) 99.65 595.62 T
(or is signaled.) 266.03 595.62 T
-0.17 (The following example show what happens when you call) 126.65 581.62 P
4 10 Q
-0.37 (total-seconds-) 411.65 581.62 P
(setter) 99.65 567.62 T
1 11 Q
( with a negative value for) 135.65 567.62 T
4 10 Q
(total-seconds) 262.4 567.62 T
1 11 Q
(:) 340.4 567.62 T
6 9 Q
(?) 99.65 546.95 T
4 F
(begin) 110.45 546.95 T
(let test-time-of-day = make\050<time-of-day>\051;) 121.25 535.95 T
(test-time-of-day.total-seconds := -15;) 121.25 524.95 T
(end;) 110.45 513.95 T
6 F
(ERROR: -15 is invalid. total-seconds cannot be negative.) 99.65 502.95 T
1 11 Q
-0.1 (This setter method ensur) 99.65 482.62 P
-0.1 (es that no one can assign an invalid value to the slot. For) 220.13 482.62 P
-0.08 (completeness, we must also ensur) 99.65 468.62 P
-0.08 (e that no one can initialize the slot to an invalid) 264.14 468.62 P
-0.36 (value. The way to do that is to de\336ne an) 99.65 454.62 P
4 10 Q
-0.79 (initialize) 293.35 454.62 P
1 11 Q
-0.36 ( method, as shown in Section) 353.35 454.62 P
(10.3.) 99.65 440.62 T
3 13 Q
(10.2.3  Considerations f) 99.65 409.29 T
(or naming slots and other objects) 219.13 409.29 T
1 11 Q
-0.24 (A) 99.65 389.62 P
2 F
-0.24 (binding) 110.71 389.62 P
1 F
-0.24 ( is an association between a name and an object. For example, ther) 151.04 389.62 P
-0.24 (e is a) 469.49 389.62 P
(binding that associates the name of a constant and the value of the constant. The) 99.65 375.62 T
(names of functions, module variables, local variables, and classes ar) 99.65 361.62 T
(e also bind-) 428.71 361.62 T
-0.17 (ings. Ther) 99.65 347.62 P
-0.17 (e is a potential pr) 147.92 347.62 P
-0.17 (oblem that can occur if you use short names. If a client) 230.97 347.62 P
(module uses other modules that also de\336ne and export bindings with short) 99.65 333.62 T
(names, ther) 99.65 319.62 T
(e is a signi\336cant chance that name clashes will occur) 156.1 319.62 T
(, with dif) 408.69 319.62 T
(fer) 452.69 319.62 T
(ent) 465.77 319.62 T
(bindings with the same name being imported fr) 99.65 305.62 T
(om dif) 331.67 305.62 T
(fer) 363.53 305.62 T
(ent modules.) 376.61 305.62 T
(If you use the Dylan naming conventions, then a variable will not have the) 126.65 291.62 T
(same name as a class, a function, or a constant. The naming conventions avoid) 99.65 277.62 T
(name clashes between dif) 99.65 263.62 T
(fer) 223.8 263.62 T
(ent kinds of objects.) 236.88 263.62 T
(A slot is identi\336ed by the name of its getter) 126.65 249.62 T
(. The getter is visible to all client) 335.12 249.62 T
(modules. Ther) 99.65 235.62 T
(e is no pr) 169.92 235.62 T
(oblem if two getters with the same name ar) 214.47 235.62 T
(e de\336ned by) 424.5 235.62 T
(unr) 99.65 221.62 T
(elated classes, because the appr) 116.83 221.62 T
(opriate getter is selected thr) 269.4 221.62 T
(ough method dis-) 403.95 221.62 T
-0.08 (patch. Ther) 99.65 207.62 P
-0.08 (e is a pr) 154.61 207.62 P
-0.08 (oblem if a getter has the same name as a generic function with) 192.01 207.62 P
(an incompatible parameter list or values declaration. \050See Section 12.2.5, page) 99.65 193.62 T
(176.\051 When such a pr) 99.65 179.62 T
(oblem occurs, the only way to r) 201.48 179.62 T
(esolve it is to use options to) 353.92 179.62 T
4 10 Q
(define module) 99.65 165.62 T
1 11 Q
( to exclude or r) 177.65 165.62 T
(ename some of the pr) 250.39 165.62 T
(oblem bindings. This) 354.88 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 135
%%Page: "122" 136
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(122) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(solution is undesirable, because it r) 99.65 665.62 T
(equir) 270.24 665.62 T
(es work on the part of the author of the) 295.65 665.62 T
-0.04 (client module, who must spot and r) 99.65 651.62 P
-0.04 (esolve such clashes, and then use an interface) 272.56 651.62 P
(that no longer matches its documentation.) 99.65 637.62 T
(Ther) 126.65 623.62 T
(efor) 149.21 623.62 T
(e, for getters that you intend to export, it makes sense pr) 168.29 623.62 T
(event) 441.73 623.62 T
(clashes by considering the name of the slot car) 99.65 609.62 T
(efully) 324.7 609.62 T
(. One technique is to pr) 351.56 609.62 T
(e\336x) 464.4 609.62 T
(the name of the pr) 99.65 595.62 T
(operty with the name of the class. For example, you might) 188.47 595.62 T
(de\336ne a) 99.65 581.62 T
4 10 Q
(<person>) 140.96 581.62 T
1 11 Q
( class with a slot) 188.96 581.62 T
4 10 Q
(person-name) 270.95 581.62 T
1 11 Q
(, instead of the shorter possibil-) 336.95 581.62 T
(ity) 99.65 567.62 T
(,) 111.33 567.62 T
4 10 Q
(name) 116.83 567.62 T
1 11 Q
(. One drawback of this technique is that it might expose too much infor-) 140.83 567.62 T
(mation about the implementation \321 that is, the name betrays the class that) 99.65 553.62 T
(happens to implement the slot at a particular time, and you have to r) 99.65 539.62 T
(emember) 433.54 539.62 T
(which super) 99.65 525.62 T
(class intr) 159.79 525.62 T
(oduces a pr) 202.78 525.62 T
(operty if you ar) 258.72 525.62 T
(e to access that pr) 334.17 525.62 T
(operty) 419.73 525.62 T
(.) 450.44 525.62 T
-0.27 (Ther) 126.65 511.62 P
-0.27 (e is a compr) 149.21 511.62 P
-0.27 (omise between using short names and using the class name) 206.65 511.62 P
-0.22 (as a pr) 99.65 497.62 P
-0.22 (e\336x \321 you can choose a pr) 131.13 497.62 P
-0.22 (e\336x for a whole gr) 259.94 497.62 P
-0.22 (oup of classes beneath a given) 347.49 497.62 P
(class. For example, you might use the pr) 99.65 483.62 T
(e\336x) 295.37 483.62 T
4 10 Q
(person-) 315.72 483.62 T
1 11 Q
( for slots of many classes) 357.72 483.62 T
(that inherit fr) 99.65 469.62 T
(om the) 164.44 469.62 T
4 10 Q
(<person>) 200.91 469.62 T
1 11 Q
( class, including) 248.91 469.62 T
4 10 Q
(<employee>) 329.59 469.62 T
1 11 Q
(,) 389.59 469.62 T
4 10 Q
(<consultant>) 395.09 469.62 T
1 11 Q
(, and) 467.09 469.62 T
(so on.) 99.65 455.62 T
4 9 Q
(define class <person> \050<object>\051) 99.65 434.95 T
(slot person-name;) 110.45 423.95 T
(slot person-age;) 110.45 412.95 T
(end class <person>;) 99.65 401.95 T
(define class <employee> \050<person>\051) 99.65 382.95 T
(slot person-number;) 110.45 371.95 T
(slot person-salary;) 110.45 360.95 T
(end class <employee>;) 99.65 349.95 T
(define class <consultant> \050<employee>\051) 99.65 330.95 T
(slot person-perks;) 110.45 319.95 T
(slot person-parking-lot;) 110.45 308.95 T
(end class <consultant>;) 99.65 297.95 T
1 11 Q
(Now) 99.65 277.62 T
(, in a method on) 122.96 277.62 T
4 10 Q
(<consultant>) 204.66 277.62 T
1 11 Q
(, all accesses ar) 276.67 277.62 T
(e consistent, and we do not) 349.01 277.62 T
(have to r) 99.65 263.62 T
(emember wher) 142.27 263.62 T
(e the slots actually originate:) 215.68 263.62 T
5 9 Q
(// Method 1) 99.65 242.95 T
4 F
(define method person-status \050p :: <consultant>\051 => \050status :: <integer>\051) 99.65 231.95 T
(\050p.person-perks.evaluation + p.person-salary.evaluation\051) 110.45 220.95 T
(/ p.person-age;) 121.25 209.95 T
(end method person-status;) 99.65 198.95 T
1 11 Q
(If we had de\336ned the classes dif) 99.65 178.62 T
(fer) 255.11 178.62 T
(ently) 268.19 178.62 T
(, such that we pr) 291.54 178.62 T
(e\336xed each getter with) 372.15 178.62 T
(the name of the class that de\336ned it, the method would look like this:) 99.65 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 136
%%Page: "123" 137
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.3 Initialize methods) 420.55 702.62 T
2 F
(123) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// Method 2) 99.65 666.95 T
4 F
(define method person-status \050p :: <consultant>\051 => \050status :: <integer>\051) 99.65 655.95 T
(\050p.consultant-perks.evaluation + p.employee-salary.evaluation\051) 110.45 644.95 T
(/ p.person-age;) 121.25 633.95 T
(end method person-status;) 99.65 622.95 T
1 11 Q
(Method 2 is mor) 99.65 602.62 T
(e dif) 179.52 602.62 T
(\336cult to write and r) 200.93 602.62 T
(ead than is Method 1, and is mor) 294.82 602.62 T
(e) 454.31 602.62 T
(fragile. If, at some point, all employees ar) 99.65 588.62 T
(e allocated perks, then the use of the) 300.02 588.62 T
4 10 Q
(consultant-perks) 99.65 574.62 T
1 11 Q
( getter becomes a pr) 195.65 574.62 T
(oblem.) 292.96 574.62 T
3 15 Q
(10.3  Initializ) 99.65 445.95 T
(e methods) 172.25 445.95 T
1 11 Q
(Every time you call) 99.65 425.62 T
4 10 Q
(make) 196.62 425.62 T
1 11 Q
( to cr) 220.62 425.62 T
(eate an instance of a class,) 244.75 425.62 T
4 10 Q
(make) 373.51 425.62 T
1 11 Q
( calls the) 397.51 425.62 T
4 10 Q
(initialize) 99.65 411.62 T
1 11 Q
( generic function. The purpose of the) 159.65 411.62 T
4 10 Q
(initialize) 341.39 411.62 T
1 11 Q
( generic function) 401.39 411.62 T
(is to initialize the instance befor) 99.65 397.62 T
(e it is r) 253.45 397.62 T
(eturned by) 285.77 397.62 T
4 10 Q
(make) 341.69 397.62 T
1 11 Q
(. Y) 365.69 397.62 T
(ou can customize the) 377.52 397.62 T
(initialization by de\336ning a method on) 99.65 383.62 T
4 10 Q
(initialize) 286.41 383.62 T
1 11 Q
(. Methods for) 346.41 383.62 T
4 10 Q
(initialize) 414.47 383.62 T
1 11 Q
(r) 99.65 369.62 T
(eceive the instance as the \336rst ar) 103.79 369.62 T
(gument, and r) 259.89 369.62 T
(eceive all keywor) 328.62 369.62 T
(d ar) 412.96 369.62 T
(guments) 432.08 369.62 T
(given in the call to) 99.65 355.62 T
4 10 Q
(make) 191.84 355.62 T
1 11 Q
(.) 215.84 355.62 T
(W) 126.65 341.62 T
(e de\336ne an) 136.64 341.62 T
4 10 Q
(initialize) 192.37 341.62 T
1 11 Q
( method:) 252.37 341.62 T
4 9 Q
(define method initialize \050time :: <time-of-day> #key\051) 99.65 320.95 T
5 F
(// 1) 473.48 320.95 T
4 F
(next-method\050\051;) 110.45 309.95 T
5 F
(// 2) 473.48 309.95 T
4 F
(if \050time.total-seconds < 0\051) 110.45 298.95 T
5 F
(// 3) 473.48 298.95 T
4 F
(error\050"%d is invalid. total-seconds cannot be negative",) 121.25 287.95 T
5 F
(// 4) 473.48 287.95 T
4 F
(time.total-seconds\051;) 153.65 276.95 T
5 F
(// 5) 473.48 276.95 T
4 F
(end if;) 110.45 265.95 T
5 F
(// 6) 473.48 265.95 T
4 F
(end method initialize;) 99.65 254.95 T
5 F
(// 7) 473.48 254.95 T
1 11 Q
(On line 2, we call) 99.65 234.62 T
4 10 Q
(next-method) 186 234.62 T
1 11 Q
(. All methods for) 252 234.62 T
4 10 Q
(initialize) 337.08 234.62 T
1 11 Q
( should call) 397.08 234.62 T
4 10 Q
(next-method) 99.65 220.62 T
1 11 Q
( as their \336rst action, to allow any less speci\336c initializations \050that is,) 165.65 220.62 T
4 10 Q
(initialize) 99.65 206.62 T
1 11 Q
( methods de\336ned on super) 159.65 206.62 T
(classes\051 to execute \336rst. If you call) 289.78 206.62 T
4 10 Q
(next-) 456.63 206.62 T
(method) 99.65 192.62 T
1 11 Q
( as the \336rst action, then, in the r) 135.65 192.62 T
(est of the method, you can operate on an) 288.06 192.62 T
(instance that has been pr) 99.65 178.62 T
(operly initialized by any) 219.98 178.62 T
4 10 Q
(initialize) 341.73 178.62 T
1 11 Q
( methods of) 401.73 178.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Comparison with C++:) 132.65 545.62 T
1 F
( In C++, the class is the namespace of its) 247.1 545.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(member functions. In Dylan, the module is the namespace of get-) 132.65 531.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ters and setters. In general, the module is the namespace of all) 132.65 517.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(module bindings, including generic functions; getters and setters) 132.65 503.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 489.62 T
(e generic functions.) 142.29 489.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 558.83 126.65 482.08 2 L
V
0.25 H
0 Z
N
477.65 558.83 477.65 482.08 2 L
V
N
126.52 558.95 477.77 558.95 2 L
V
N
126.52 481.95 477.77 481.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 137
%%Page: "124" 138
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(124) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(super) 99.65 665.62 T
(classes. If you for) 126.97 665.62 T
(get to include the call to) 210.76 665.62 T
4 10 Q
(next-method) 329.77 665.62 T
1 11 Q
(, your) 395.77 665.62 T
4 10 Q
(initialize) 427.12 665.62 T
1 11 Q
(method will be operating on an impr) 99.65 651.62 T
(operly initialized instance.) 278.99 651.62 T
(Lines 3 thr) 126.65 637.62 T
(ough 6 contain the r) 178.04 637.62 T
(eal action of this method. W) 275.08 637.62 T
(e check that the) 410.34 637.62 T
(value is valid. If it is invalid, we signal an err) 99.65 623.62 T
(or) 317.82 623.62 T
(.) 327.36 623.62 T
(The following example shows what happens when) 126.65 609.62 T
4 10 Q
(total-seconds) 376.8 609.62 T
1 11 Q
( is not) 454.8 609.62 T
(valid when we ar) 99.65 595.62 T
(e cr) 184.07 595.62 T
(eating an instance:) 201.12 595.62 T
6 9 Q
(?) 99.65 574.95 T
4 F
(make\050<time-of-day>, total-seconds: -15\051;) 110.45 574.95 T
6 F
(ERROR: -15 is invalid. total-seconds cannot be negative.) 99.65 563.95 T
3 15 Q
(10.4  Slot options f) 99.65 525.95 T
(or initialization of slots) 208.79 525.95 T
1 11 Q
(Unlike variables and constants, slots can be) 99.65 505.62 T
2 F
(uninitialized) 312.95 505.62 T
1 F
(; that is, you can cr) 378.31 505.62 T
(eate) 469.07 505.62 T
(an instance without initializing all the slots. If you call a getter for a slot that has) 99.65 491.62 T
-0.04 (not been initialized, Dylan signals an err) 99.65 477.62 P
-0.04 (or) 295.78 477.62 P
-0.04 (. In the following sections, we describe) 305.32 477.62 P
-0.36 (a variety of techniques for avoiding the pr) 99.65 463.62 P
-0.36 (oblem of accessing an uninitialized slot.) 301.65 463.62 P
(The most general technique is to de\336ne an) 99.65 449.62 T
4 10 Q
(initialize) 307.61 449.62 T
1 11 Q
( method for a slot, as) 367.61 449.62 T
(shown in Section 10.3.) 99.65 435.62 T
(A slot can be uninitialized. Once a slot r) 126.65 421.62 T
(eceives a value, however) 319.87 421.62 T
(, it will) 439.83 421.62 T
(always have a value: Ther) 99.65 407.62 T
(e is no way to r) 225.82 407.62 T
(eturn a slot to the uninitialized state.) 299.64 407.62 T
-0.15 (Sometimes it is useful to stor) 99.65 393.62 P
-0.15 (e in a slot a value that means none. T) 238.54 393.62 P
-0.15 (o make that pos-) 415.23 393.62 P
(sible, you need to de\336ne a new type for that slot, as shown in Section 9.2, page) 99.65 379.62 T
(1) 99.65 365.62 T
(10. In Sections 10.4.1 thr) 104.54 365.62 T
(ough 10.4.4, we show techniques for initializing slots.) 220.82 365.62 T
3 13 Q
(10.4.1  The) 99.65 334.29 T
4 12 Q
(init-value:) 157.13 334.29 T
3 13 Q
( slot option) 236.33 334.29 T
1 11 Q
(W) 99.65 314.62 T
(e can use the) 109.64 314.62 T
4 10 Q
(init-value:) 174.51 314.62 T
1 11 Q
( slot option to give a default initial value to a slot:) 240.51 314.62 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 99.65 293.95 T
(slot total-seconds :: <integer>,) 110.45 282.95 T
(init-keyword: total-seconds:, init-value: 0;) 121.25 271.95 T
(end class <sixty-unit>;) 99.65 260.95 T
1 11 Q
(When we use) 99.65 240.62 T
4 10 Q
(make) 167.98 240.62 T
1 11 Q
( to cr) 191.98 240.62 T
(eate any subclass of) 216.1 240.62 T
4 10 Q
(<sixty-unit>) 314.71 240.62 T
1 11 Q
( \050such as) 386.71 240.62 T
4 10 Q
(<time-of-) 431.37 240.62 T
(day>) 99.65 226.62 T
1 11 Q
(\051, and we do not supply the) 123.65 226.62 T
4 10 Q
(total-seconds:) 260.19 226.62 T
1 11 Q
( keywor) 344.19 226.62 T
(d to) 383.77 226.62 T
4 10 Q
(make) 405.58 226.62 T
1 11 Q
(, the) 429.58 226.62 T
4 10 Q
(total-) 453.09 226.62 T
(seconds) 99.65 212.62 T
1 11 Q
( slot is initialized to 0.) 141.65 212.62 T
-0.01 (The) 126.65 198.62 P
4 10 Q
-0.02 (init-value:) 147.8 198.62 P
1 11 Q
-0.01 ( slot option speci\336es an expr) 213.8 198.62 P
-0.01 (ession that is evaluated once,) 351.6 198.62 P
(befor) 99.65 184.62 T
(e the \336rst instance of the class is made, to yield a value. Every time that an) 124.82 184.62 T
-0.08 (instance is made and the slot needs a default value, this same value is used as the) 99.65 170.62 P
(default.) 99.65 156.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 138
%%Page: "125" 139
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.4 Slot options for initialization of slots) 349.32 702.62 T
2 F
(125) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(In general, a slot r) 126.65 665.62 T
(eceives its default initial value when no init keywor) 213.71 665.62 T
(d is) 464.49 665.62 T
(de\336ned or when the caller does not supply the init-keywor) 99.65 651.62 T
(d ar) 385.32 651.62 T
(gument to) 404.44 651.62 T
4 10 Q
(make) 457.25 651.62 T
1 11 Q
(.) 481.25 651.62 T
3 13 Q
(10.4.2  The) 99.65 620.29 T
4 12 Q
(required-init-keyword:) 157.13 620.29 T
3 13 Q
( slot option) 315.53 620.29 T
1 11 Q
(Instead of giving the slot a default initial value, we can r) 99.65 600.62 T
(equir) 372.69 600.62 T
(e the caller of) 398.1 600.62 T
4 10 Q
(make) 465.7 600.62 T
1 11 Q
-0.12 (to supply an init keywor) 99.65 586.62 P
-0.12 (d for the slot. The) 218.72 586.62 P
4 10 Q
-0.26 (required-init-keyword:) 306.49 586.62 P
1 11 Q
-0.12 ( slot option) 438.49 586.62 P
-0.13 (de\336nes a r) 99.65 572.62 P
-0.13 (equir) 149.51 572.62 P
-0.13 (ed init keywor) 174.92 572.62 P
-0.13 (d. If the caller of) 245.37 572.62 P
4 10 Q
-0.28 (make) 326.64 572.62 P
1 11 Q
-0.13 ( does not supply the r) 350.64 572.62 P
-0.13 (equir) 455.63 572.62 P
-0.13 (ed) 481.04 572.62 P
(init keywor) 99.65 558.62 T
(d, then an err) 155.62 558.62 T
(or is signaled.) 220.66 558.62 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 99.65 537.95 T
(slot total-seconds :: <integer>, required-init-keyword: total-seconds:;) 110.45 526.95 T
(end class <sixty-unit>;) 99.65 515.95 T
1 11 Q
-0.13 (The) 99.65 495.62 P
4 10 Q
-0.28 (total-seconds) 120.68 495.62 P
1 11 Q
-0.13 ( slot is de\336ned in the) 198.68 495.62 P
4 10 Q
-0.28 (<sixty-unit>) 301.62 495.62 P
1 11 Q
-0.13 ( class. By making) 373.62 495.62 P
4 10 Q
-0.28 (total-) 459.65 495.62 P
(seconds:) 99.65 481.62 T
1 11 Q
( a r) 147.65 481.62 T
(equir) 162.79 481.62 T
(ed init keywor) 188.21 481.62 T
(d in this class, we make it r) 258.91 481.62 T
(equir) 389.98 481.62 T
(ed for every) 415.39 481.62 T
(class that inherits fr) 99.65 467.62 T
(om it, including) 194.76 467.62 T
4 10 Q
(<time>) 275.03 467.62 T
1 11 Q
(,) 311.03 467.62 T
4 10 Q
(<angle>) 316.53 467.62 T
1 11 Q
(, and all their subclasses.) 358.53 467.62 T
3 13 Q
(10.4.3  Slot options f) 99.65 436.29 T
(or an inherited slot) 203.13 436.29 T
1 11 Q
(Y) 99.65 416.62 T
(ou can de\336ne a slot in only one particular class in a set of classes r) 105.97 416.62 T
(elated by) 424.93 416.62 T
-0.36 (inheritance. Y) 99.65 402.62 P
-0.36 (ou can use the) 165.58 402.62 P
4 10 Q
-0.78 (inherited slot) 236.4 402.62 P
1 11 Q
-0.36 ( speci\336cation to override the default) 319.63 402.62 P
(initial value of an inherited slot, or the) 99.65 388.62 T
2 F
(init function) 288.54 388.62 T
1 F
( of an inherited slot. See Sec-) 351.77 388.62 T
(tion 10.4.4.) 99.65 374.62 T
(In this example, assume that the) 126.65 360.62 T
4 10 Q
(<sixty-unit>) 285.87 360.62 T
1 11 Q
( class de\336nes the) 357.87 360.62 T
4 10 Q
(total-) 442.02 360.62 T
-0.4 (seconds) 99.65 346.62 P
1 11 Q
-0.19 ( slot and the init keywor) 141.65 346.62 P
-0.19 (d) 259.03 346.62 P
4 10 Q
-0.4 (total-seconds:) 268.32 346.62 P
1 11 Q
-0.19 (, and pr) 352.32 346.62 P
-0.19 (ovides the default ini-) 389.58 346.62 P
(tial value of 0 for that slot, as shown:) 99.65 332.62 T
4 9 Q
(define abstract class <sixty-unit> \050<object>\051) 99.65 311.95 T
(slot total-seconds :: <integer>,) 110.45 300.95 T
(init-keyword: total-seconds:, init-value: 0;) 121.25 289.95 T
(end class <sixty-unit>;) 99.65 278.95 T
(define abstract class <time> \050<sixty-unit>\051) 99.65 259.95 T
(end class <time>;) 99.65 248.95 T
1 11 Q
(The) 99.65 228.62 T
4 10 Q
(<time-offset>) 120.81 228.62 T
1 11 Q
( class pr) 198.81 228.62 T
(ovides a dif) 237.98 228.62 T
(fer) 294.45 228.62 T
(ent default initial value for the inher-) 307.52 228.62 T
(ited slot) 99.65 214.62 T
4 10 Q
(total-seconds) 141.38 214.62 T
1 11 Q
(:) 219.38 214.62 T
4 9 Q
(define class <time-offset> \050<time>\051) 99.65 193.95 T
(inherited slot total-seconds, init-value: encode-total-seconds\0501, 0, 0\051;) 110.45 182.95 T
(end class <time-offset>;) 99.65 171.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 139
%%Page: "126" 140
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(126) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(By using the) 99.65 665.62 T
4 10 Q
(inherited slot) 163.01 665.62 T
1 11 Q
( speci\336cation, we ar) 247.01 665.62 T
(e not de\336ning the slot, but) 342.96 665.62 T
(rather ar) 99.65 651.62 T
(e stating that this slot is de\336ned by a super) 141.49 651.62 T
(class. W) 348.88 651.62 T
(e can then pr) 387.28 651.62 T
(ovide) 450 651.62 T
(either a default initial value or an init function for the inherited slot.) 99.65 637.62 T
3 13 Q
(10.4.4  The) 99.65 606.29 T
4 12 Q
(init-function:) 157.13 606.29 T
3 13 Q
( slot option) 257.93 606.29 T
1 11 Q
(W) 99.65 586.62 T
(e can use the) 109.64 586.62 T
4 10 Q
(init-function:) 174.51 586.62 T
1 11 Q
( slot option to pr) 258.51 586.62 T
(ovide a function of no ar) 339.13 586.62 T
(gu-) 458.3 586.62 T
-0.04 (ments to be called to r) 99.65 572.62 P
-0.04 (eturn a default initial value for the slot. These functions ar) 206.27 572.62 P
-0.04 (e) 487.67 572.62 P
(called) 99.65 558.62 T
2 F
(init functions) 131.17 558.62 T
1 F
(. They allow the initial value of a slot to be an arbitrary) 199.29 558.62 T
(computation.) 99.65 544.62 T
4 9 Q
(define class <time-of-day> \050<time>\051) 99.65 523.95 T
(inherited slot total-seconds, init-function: get-current-time;) 110.45 512.95 T
(end class <time-of-day>;) 99.65 501.95 T
1 11 Q
(Every time that we make an instance of the) 99.65 481.62 T
4 10 Q
(<time-of-day>) 311.68 481.62 T
1 11 Q
( class and we need a) 389.68 481.62 T
(default value for the) 99.65 467.62 T
4 10 Q
(total-seconds) 201.31 467.62 T
1 11 Q
( slot, the) 279.31 467.62 T
4 10 Q
(get-current-time) 323.02 467.62 T
1 11 Q
( function is) 419.02 467.62 T
(called to pr) 99.65 453.62 T
(ovide an initial value. Her) 154.27 453.62 T
(e, we assume that) 281.02 453.62 T
4 10 Q
(get-current-time) 369.99 453.62 T
1 11 Q
( is) 465.99 453.62 T
(available as a library function; it is not part of the cor) 99.65 439.62 T
(e Dylan language.) 356.2 439.62 T
(The) 126.65 425.62 T
4 10 Q
(init-function:) 147.81 425.62 T
1 11 Q
( slot option speci\336es an expr) 231.81 425.62 T
(ession that is evaluated) 369.65 425.62 T
-0.38 (once, befor) 99.65 411.62 P
-0.38 (e the \336rst instance of the class is made, to yield a function. The function) 152.49 411.62 P
(must have no r) 99.65 397.62 T
(equir) 172.43 397.62 T
(ed ar) 197.85 397.62 T
(guments and must r) 222.23 397.62 T
(eturn at least one value. Every time) 320.23 397.62 T
(that an instance is made and the slot needs a default value, this function is called) 99.65 383.62 T
(with no ar) 99.65 369.62 T
(guments, and the value that it r) 149.57 369.62 T
(eturns is used as the default. An init) 301.9 369.62 T
-0.18 (function is called during instance cr) 99.65 355.62 P
-0.18 (eation when no keywor) 272.25 355.62 P
-0.18 (d ar) 386.4 355.62 P
-0.18 (gument is de\336ned) 405.33 355.62 P
(or when an optional keywor) 99.65 341.62 T
(d ar) 237.49 341.62 T
(gument is not passed to) 256.61 341.62 T
4 10 Q
(make) 374.96 341.62 T
1 11 Q
(.) 398.96 341.62 T
3 13 Q
(10.4.5  Init e) 99.65 310.29 T
(xpressions) 159.96 310.29 T
1 11 Q
(An) 99.65 290.62 T
2 F
(init expression) 117.36 290.62 T
1 F
( is another way of pr) 191.59 290.62 T
(oviding a default slot value. Her) 291.93 290.62 T
(e is an) 449.21 290.62 T
(example:) 99.65 276.62 T
4 9 Q
(define class <time-of-day> \050<time>\051) 99.65 255.95 T
(inherited slot total-seconds = get-current-time\050\051;) 110.45 244.95 T
(end class <time-of-day>;) 99.65 233.95 T
1 11 Q
(Every time that we make an instance of the) 99.65 213.62 T
4 10 Q
(<time-of-day>) 311.68 213.62 T
1 11 Q
( class and we need a) 389.68 213.62 T
(default value for the) 99.65 199.62 T
4 10 Q
(total-seconds) 201.31 199.62 T
1 11 Q
( slot, the expr) 279.31 199.62 T
(ession) 344.73 199.62 T
4 10 Q
(get-current-time\050\051;) 377.68 199.62 T
1 11 Q
(is evaluated to pr) 99.65 185.62 T
(ovide an initial value.) 184.01 185.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 140
%%Page: "127" 141
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.5 Allocation of slots) 420.13 702.62 T
2 F
(127) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(An init expr) 126.65 665.62 T
(ession speci\336es an expr) 185.2 665.62 T
(ession. Every time that an instance is) 298.48 665.62 T
-0.28 (made and the slot needs a default value, this expr) 99.65 651.62 P
-0.28 (ession is evaluated and its value) 337.96 651.62 P
(is used as the default.) 99.65 637.62 T
(Notice the similarity between the) 126.65 623.62 T
4 10 Q
(init-function:) 290.78 623.62 T
1 11 Q
( slot option and an init) 374.78 623.62 T
(expr) 99.65 609.62 T
(ession. In fact, the following slot speci\336cations ar) 121.35 609.62 T
(e equivalent:) 358.91 609.62 T
4 9 Q
(inherited slot total-seconds, init-function: get-current-time;) 110.45 588.95 T
(inherited slot total-seconds = get-current-time\050\051;) 110.45 577.95 T
1 11 Q
-0.27 (That substitution works for functions that have no r) 99.65 557.62 P
-0.27 (equir) 348.75 557.62 P
-0.27 (ed ar) 374.16 557.62 P
-0.27 (guments. Mor) 398.27 557.62 P
-0.27 (e gen-) 466.45 557.62 P
(erally) 99.65 543.62 T
(, the following slot speci\336cations ar) 126.06 543.62 T
(e equivalent:) 297.42 543.62 T
4 9 Q
(slot) 110.45 522.95 T
6 F
(slot) 137.45 522.95 T
4 F
( =) 159.05 522.95 T
6 F
(expression) 175.25 522.95 T
4 F
(;) 229.25 522.95 T
(slot) 110.45 511.95 T
6 F
(slot) 137.45 511.95 T
4 F
(, init-function: method \050\051) 159.05 511.95 T
6 F
(expression) 304.85 511.95 T
4 F
( end method;) 358.85 511.95 T
1 11 Q
(The expr) 99.65 491.62 T
(ession can be a call to a function that r) 142.51 491.62 T
(equir) 326.98 491.62 T
(es ar) 352.39 491.62 T
(guments. Her) 374.73 491.62 T
(e, we use) 441.18 491.62 T
4 10 Q
(method) 99.65 477.62 T
1 11 Q
( to de\336ne a method with no name.) 135.65 477.62 T
(The) 126.65 463.62 T
4 10 Q
(init-value:) 147.81 463.62 T
1 11 Q
( slot option,) 213.81 463.62 T
4 10 Q
(init-function:) 274.08 463.62 T
1 11 Q
( slot option, and init expr) 358.08 463.62 T
(es-) 480.57 463.62 T
(sion ar) 99.65 449.62 T
(e mutually exclusive. A given slot speci\336cation can have only one of these.) 132.32 449.62 T
3 15 Q
(10.5  Allocation of slots) 99.65 409.95 T
1 11 Q
(Each slot has a particular kind of) 99.65 389.62 T
2 F
(allocation) 261.84 389.62 T
1 F
(. The allocation of a slot determines) 311.33 389.62 T
(wher) 99.65 375.62 T
(e the storage for the slot\325s value is allocated, and it determines which) 124.64 375.62 T
(instances shar) 99.65 361.62 T
(e the value of the slot. Ther) 167.68 361.62 T
(e ar) 299.22 361.62 T
(e four kinds of allocation:) 316.89 361.62 T
(Instance) 126.65 335.62 T
(Each instance allocates storage for the slot, and each) 207.65 335.62 T
(instance of the class that de\336nes the slot has its own value) 207.65 321.62 T
(for the slot. Changing a slot in one instance does not af) 207.65 307.62 T
(fect) 473.08 307.62 T
(the value of the same slot in a dif) 207.65 293.62 T
(fer) 367.74 293.62 T
(ent instance. Instance) 380.82 293.62 T
(allocation is the default, and is the most commonly used) 207.65 279.62 T
(kind of allocation.) 207.65 265.62 T
(V) 126.65 239.62 T
(irtual) 133.99 239.62 T
(No storage is allocated for the slot. Y) 207.65 239.62 T
(ou must pr) 385.07 239.62 T
(ovide a get-) 438.56 239.62 T
(ter method that computes the value of the virtual slot. See) 207.65 225.62 T
(Section 10.6.) 207.65 211.62 T
(Class) 126.65 185.62 T
(The class that de\336nes the slot allocates storage for the slot.) 207.65 185.62 T
(Instances of the class that de\336nes the slot and instances of) 207.65 171.62 T
(all that class\325s subclasses see the same value for the slot.) 207.65 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 141
%%Page: "128" 142
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(128) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.03 (That is, all general instances of the class shar) 207.65 665.62 P
-0.03 (e the value for) 423.4 665.62 P
(the slot.) 207.65 651.62 T
(Each-subclass) 126.65 625.62 T
(The class that de\336nes the slot and each of its subclasses) 207.65 625.62 T
(allocate storage for the slot. Thus, if the class that de\336nes) 207.65 611.62 T
(the slot has four subclasses, the slot is allocated in \336ve) 207.65 597.62 T
(places. All the dir) 207.65 583.62 T
(ect instances of each class shar) 293.06 583.62 T
(e a value) 440.47 583.62 T
(for the slot.) 207.65 569.62 T
(W) 99.65 549.62 T
(e can give an example of an each-subclass slot by de\336ning a) 109.64 549.62 T
4 10 Q
(<vehicle>) 402.14 549.62 T
1 11 Q
( class:) 456.14 549.62 T
4 9 Q
(define class <vehicle> \050<physical-object>\051) 99.65 528.95 T
5 F
(// Every vehicle has a unique identification code) 110.45 517.95 T
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 110.45 506.95 T
5 F
(// The normal operating speed of this class of vehicle) 110.45 495.95 T
4 F
(each-subclass slot cruising-speed :: <integer>;) 110.45 484.95 T
(end class <vehicle>;) 99.65 473.95 T
1 11 Q
(The slot) 99.65 453.62 T
4 10 Q
(cruising-speed) 141.02 453.62 T
1 11 Q
( is de\336ned with the) 225.02 453.62 T
4 10 Q
(each-subclass) 321.29 453.62 T
1 11 Q
( slot allocation. W) 399.29 453.62 T
(e) 485.22 453.62 T
-0.39 (use) 99.65 439.62 P
4 10 Q
-0.84 (each-subclass) 118.58 439.62 P
1 11 Q
-0.39 ( allocation to expr) 196.58 439.62 P
-0.39 (ess that, for example, all instances of Boeing) 282.45 439.62 P
-0.18 (747 air) 99.65 425.62 P
-0.18 (craft shar) 131.57 425.62 P
-0.18 (e a particular cr) 176.83 425.62 P
-0.18 (uising speed, and all instances of McDonnell Dou-) 252.27 425.62 P
(glas MD-80 air) 99.65 411.62 T
(craft shar) 171.06 411.62 T
(e a particular cr) 216.5 411.62 T
(uising speed, but the cr) 292.47 411.62 T
(uising speed of) 405.67 411.62 T
(747s does not need to be the same as the cr) 99.65 397.62 T
(uising speeds of MD-80s.) 306.54 397.62 T
3 15 Q
(10.6  Vir) 99.65 357.95 T
(tual slots) 147.08 357.95 T
1 11 Q
-0.19 (V) 99.65 337.62 P
-0.19 (irtual slots ar) 106.99 337.62 P
-0.19 (e useful when ther) 170.34 337.62 P
-0.19 (e is information conceptually associated with an) 260.01 337.62 P
(object that is better computed than stor) 99.65 323.62 T
(ed in an or) 289.34 323.62 T
(dinary slot. By using a virtual) 341.24 323.62 T
(slot instead of writing a method, you make the information appear like a slot to) 99.65 309.62 T
(the callers of the getter) 99.65 295.62 T
(. The information appears like a slot because the caller can-) 209.25 295.62 T
-0.23 (not distinguish the getter of a virtual slot fr) 99.65 281.62 P
-0.23 (om a getter of an or) 307.16 281.62 P
-0.23 (dinary slot. In both) 400.88 281.62 P
-0.08 (cases, the getter takes a single r) 99.65 267.62 P
-0.08 (equir) 250.48 267.62 P
-0.08 (ed ar) 275.89 267.62 P
-0.08 (gument \321 the instance \321 and r) 300.2 267.62 P
-0.08 (eturns a) 453.9 267.62 P
(single value.) 99.65 253.62 T
-0.23 (A virtual slot does not occupy storage; instead, its value is computed. When) 126.65 239.62 P
-0.26 (you de\336ne a virtual slot, Dylan de\336nes a generic function for the getter and setter) 99.65 225.62 P
-0.26 (.) 490.41 225.62 P
(Y) 99.65 211.62 T
(ou must de\336ne a getter method to r) 105.97 211.62 T
(eturn the value of the virtual slot. Unlike) 277.88 211.62 T
(those of other slots, the value of a virtual slot can change without a setter being) 99.65 197.62 T
(called, because that value is computed, rather than stor) 99.65 183.62 T
(ed. Y) 367.15 183.62 T
(ou can optionally) 390.96 183.62 T
(de\336ne a setter method. If you want to initialize a virtual slot when you cr) 99.65 169.62 T
(eate an) 454.44 169.62 T
(instance, you can de\336ne an) 99.65 155.62 T
4 10 Q
(initialize) 233.82 155.62 T
1 11 Q
( method.) 293.82 155.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 142
%%Page: "129" 143
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.6 Virtual slots) 440.61 702.62 T
2 F
(129) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.14 (W) 126.65 665.62 P
-0.14 (e can use virtual slots to contr) 136.64 665.62 P
-0.14 (ol the access to a slot. For example, we want) 280.34 665.62 P
(to ensur) 99.65 651.62 T
(e that the value of the) 139.1 651.62 T
4 10 Q
(direction) 246.95 651.62 T
1 11 Q
( slot is north or south for) 300.95 651.62 T
4 10 Q
(<latitude>) 423.92 651.62 T
1 11 Q
(,) 483.92 651.62 T
-0.03 (and is east or west for) 99.65 637.62 P
4 10 Q
-0.06 (<longitude>) 208.54 637.62 P
1 11 Q
-0.03 (. \050An alternative technique is to use enumera-) 274.54 637.62 P
-0.21 (tion types, as shown in Section 19.5, page 318.\051 T) 99.65 623.62 P
-0.21 (o enfor) 332.37 623.62 P
-0.21 (ce this r) 366.4 623.62 P
-0.21 (estriction, we must) 403.64 623.62 P
(\245) 108.65 603.62 T
(Check the value when the setter method is invoked. In this section, we) 126.65 603.62 T
(show how to do this check using a virtual slot. W) 126.65 589.62 T
(e also show how to use) 365.1 589.62 T
(symbols, instead of strings, to r) 126.65 575.62 T
(epr) 278.07 575.62 T
(esent north, south, east, and west.) 294.1 575.62 T
(\245) 108.65 555.62 T
(Check the value of the) 126.65 555.62 T
4 10 Q
(direction) 237.87 555.62 T
1 11 Q
( slot when an instance is cr) 291.87 555.62 T
(eated and ini-) 421.78 555.62 T
(tialized. W) 126.65 541.62 T
(e do that checking in Section 10.6.3.) 178.32 541.62 T
-0.26 (W) 99.65 521.62 P
-0.26 (e r) 109.64 521.62 P
-0.26 (ede\336ne the) 121.54 521.62 P
4 10 Q
-0.57 (<directed-angle>) 177.36 521.62 P
1 11 Q
-0.26 ( class to include a virtual slot and an or) 273.36 521.62 P
-0.26 (dinary) 460.88 521.62 P
(slot:) 99.65 507.62 T
4 9 Q
(define abstract class <directed-angle> \050<angle>\051) 99.65 486.95 T
(virtual slot direction :: <symbol>;) 110.45 475.95 T
(slot internal-direction :: <symbol>;) 110.45 464.95 T
(end class <directed-angle>;) 99.65 453.95 T
1 11 Q
(W) 99.65 433.62 T
(e de\336ne the slot) 109.64 433.62 T
4 10 Q
(direction) 188.93 433.62 T
1 11 Q
( with the) 242.93 433.62 T
4 10 Q
(virtual) 288.8 433.62 T
2 11 Q
(slot allocation) 333.55 433.62 T
1 F
(. Notice that the) 404.12 433.62 T
(slot\325s allocation appears befor) 99.65 419.62 T
(e the name of the slot \050as contrasted with slot) 244.23 419.62 T
(options, which appear after the name of the slot\051.) 99.65 405.62 T
(In the) 126.65 391.62 T
4 10 Q
(<directed-angle>) 157.51 391.62 T
1 11 Q
( class, we use the slot) 253.51 391.62 T
4 10 Q
(internal-direction) 359.4 391.62 T
1 11 Q
(to stor) 99.65 377.62 T
(e the dir) 130.39 377.62 T
(ection. W) 170.49 377.62 T
(e shall pr) 215.32 377.62 T
(ovide a setter method for the virtual slot) 259.82 377.62 T
4 10 Q
(direction) 99.65 363.62 T
1 11 Q
( that checks the validity of the value of the dir) 153.65 363.62 T
(ection befor) 376.18 363.62 T
(e storing) 433.44 363.62 T
(the value in the) 99.65 349.62 T
4 10 Q
(internal-direction) 177.58 349.62 T
1 11 Q
( slot.) 285.58 349.62 T
3 13 Q
(10.6.1  Symbols) 99.65 318.29 T
1 11 Q
(Symbols ar) 99.65 298.62 T
(e much like strings. A) 153.6 298.62 T
2 F
(symbol) 262.33 298.62 T
1 F
( is an instance of the built-in class) 299.61 298.62 T
4 10 Q
(<symbol>) 99.65 284.62 T
1 11 Q
(. The key dif) 147.65 284.62 T
(fer) 207.95 284.62 T
(ence between strings and symbols lies in the way simi-) 221.03 284.62 T
(larity \050as tested by) 99.65 270.62 T
4 10 Q
(=) 191.72 270.62 T
1 11 Q
(\051 and identity \050as tested by) 197.72 270.62 T
4 10 Q
(==) 329.71 270.62 T
1 11 Q
(\051 ar) 341.71 270.62 T
(e de\336ned for each of them.) 357.77 270.62 T
(T) 99.65 256.62 T
(wo string operands can be similar but not identical. However) 105.4 256.62 T
(, two symbol oper-) 402.75 256.62 T
(ands that ar) 99.65 242.62 T
(e similar ar) 157.16 242.62 T
(e always identical \321 that is, they always r) 211.4 242.62 T
(efer to the same) 415.15 242.62 T
(object.) 99.65 228.62 T
(Ther) 126.65 214.62 T
(e ar) 149.21 214.62 T
(e two r) 166.88 214.62 T
(easons to use symbols in certain cases wher) 200.56 214.62 T
(e you might con-) 411.68 214.62 T
(sider using strings. First, symbol comparison is not case sensitive. Second, com-) 99.65 200.62 T
-0.01 (parison of two symbols is much faster than is comparison of two strings, because) 99.65 186.62 P
(symbols ar) 99.65 172.62 T
(e compar) 152.49 172.62 T
(ed by identity) 197.37 172.62 T
(, and strings ar) 263.92 172.62 T
(e usually compar) 336.17 172.62 T
(ed element by) 419.75 172.62 T
(element.) 99.65 158.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 143
%%Page: "130" 144
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(130) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(In the) 126.65 665.62 T
4 10 Q
(<directed-angle>) 157.51 665.62 T
1 11 Q
( class, we de\336ne the type of the two slots as) 253.51 665.62 T
4 10 Q
-0.06 (<symbol>) 99.65 651.62 P
1 11 Q
-0.03 (, instead of) 147.65 651.62 P
4 10 Q
-0.06 (<string>) 203.58 651.62 P
1 11 Q
-0.03 (, which we used in pr) 251.58 651.62 P
-0.03 (evious versions of this class.) 356.1 651.62 P
(If we use strings, then when we checked whether the dir) 99.65 637.62 T
(ection slot of a latitude) 373.92 637.62 T
(was) 99.65 623.62 T
4 10 Q
("north") 121.74 623.62 T
1 11 Q
( or) 163.74 623.62 T
4 10 Q
("south") 179.59 623.62 T
1 11 Q
(, we would have to worry about upper) 221.59 623.62 T
(case versus low-) 409.81 623.62 T
(er) 99.65 609.62 T
(case. For example, we would have to decide whether each of these wer) 109.06 609.62 T
(e valid) 452.76 609.62 T
(values:) 99.65 595.62 T
4 10 Q
("north") 136.63 595.62 T
1 11 Q
(,) 178.63 595.62 T
4 10 Q
("NORTH") 184.13 595.62 T
1 11 Q
(,) 226.13 595.62 T
4 10 Q
("North") 231.63 595.62 T
1 11 Q
(,) 273.63 595.62 T
4 10 Q
("NOrth") 279.13 595.62 T
1 11 Q
(, and so on. W) 321.13 595.62 T
(e simplify that deci-) 389.32 595.62 T
(sion by using the) 99.65 581.62 T
4 10 Q
(<symbol>) 185.39 581.62 T
1 11 Q
( type instead of) 233.39 581.62 T
4 10 Q
(<string>) 310.99 581.62 T
1 11 Q
(.) 358.99 581.62 T
(Ther) 126.65 567.62 T
(e ar) 149.21 567.62 T
(e two equivalent syntaxes for specifying symbols:) 166.88 567.62 T
(\245) 108.65 547.62 T
(Examples of use of the keywor) 126.65 547.62 T
(d syntax ar) 275.74 547.62 T
(e:) 329.55 547.62 T
4 10 Q
(north:) 340.32 547.62 T
1 11 Q
( and) 376.32 547.62 T
4 10 Q
(south:) 400.45 547.62 T
1 11 Q
(.) 436.45 547.62 T
(\245) 108.65 527.62 T
(Examples of use of the hash syntax ar) 126.65 527.62 T
(e:) 308.97 527.62 T
4 10 Q
( #"north") 316.99 527.62 T
1 11 Q
( and) 370.99 527.62 T
4 10 Q
(#"south") 395.11 527.62 T
1 11 Q
(.) 443.11 527.62 T
(Her) 99.65 507.62 T
(e, we show that symbol comparison is not case sensitive:) 118.22 507.62 T
6 9 Q
(?) 99.65 486.95 T
4 F
(#"NORTH" == #"North";) 110.45 486.95 T
6 F
(#t) 99.65 475.95 T
1 11 Q
(Her) 99.65 455.62 T
(e, we show that the two syntaxes ar) 118.22 455.62 T
(e equivalent:) 290.8 455.62 T
6 9 Q
(?) 99.65 434.95 T
4 F
(north: == #"norTH";) 110.45 434.95 T
6 F
(#t) 99.65 423.95 T
1 11 Q
(It is our convention in this book to r) 99.65 403.62 T
(eserve the keywor) 273.57 403.62 T
(d syntax for keywor) 362.18 403.62 T
(d) 459.94 403.62 T
(parameters, and otherwise to use the hash syntax. For example, we would give) 99.65 389.62 T
(the call:) 99.65 375.62 T
4 9 Q
(make\050<latitude>, direction: #"north"\051) 99.65 354.95 T
1 11 Q
(instead of the call:) 99.65 334.62 T
4 9 Q
(make\050<latitude>, direction: north:\051) 99.65 313.95 T
3 13 Q
(10.6.2  Getter and setter methods f) 99.65 284.29 T
(or a vir) 274.23 284.29 T
(tual slot) 309.99 284.29 T
1 11 Q
(Her) 99.65 264.62 T
(e is the getter method for the virtual slot) 118.22 264.62 T
4 10 Q
(direction) 316.63 264.62 T
1 11 Q
(:) 370.63 264.62 T
5 9 Q
(// Method 1) 99.65 243.95 T
4 F
(define method direction \050angle :: <directed-angle>\051 => \050dir :: <symbol>\051) 99.65 232.95 T
(angle.internal-direction;) 110.45 221.95 T
(end method direction;) 99.65 210.95 T
1 11 Q
(Her) 99.65 190.62 T
(e ar) 118.22 190.62 T
(e the setter methods for the virtual slot) 135.88 190.62 T
4 10 Q
(direction) 326.9 190.62 T
1 11 Q
(:) 380.9 190.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 144
%%Page: "131" 145
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.6 Virtual slots) 440.61 702.62 T
2 F
(131) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// Method 2) 99.65 666.95 T
4 F
(define method direction-setter) 99.65 655.95 T
(\050dir :: <symbol>, angle :: <directed-angle>\051 => \050new-dir :: <symbol>\051) 121.25 644.95 T
(angle.internal-direction := dir;) 110.45 633.95 T
(end method direction-setter;) 99.65 622.95 T
5 F
(// Method 3) 99.65 603.95 T
4 F
(define method direction-setter) 99.65 592.95 T
(\050dir :: <symbol>, latitude :: <latitude>\051 => \050new-dir :: <symbol>\051) 121.25 581.95 T
(if \050dir == #"north" | dir == #"south"\051) 110.45 570.95 T
(next-method\050\051;) 121.25 559.95 T
(else) 110.45 548.95 T
(error\050"%= is not north or south", dir\051;) 121.25 537.95 T
(end if;) 110.45 526.95 T
(end method direction-setter;) 99.65 515.95 T
5 F
(// Method 4) 99.65 496.95 T
4 F
(define method direction-setter) 99.65 485.95 T
(\050dir :: <symbol>, longitude :: <longitude>\051 => \050new-dir :: <symbol>\051) 121.25 474.95 T
(if \050dir == #"east" | dir == #"west"\051) 110.45 463.95 T
(next-method\050\051;) 121.25 452.95 T
(else) 110.45 441.95 T
(error\050"%= is not east or west", dir\051;) 121.25 430.95 T
(end if;) 110.45 419.95 T
(end method direction-setter;) 99.65 408.95 T
1 11 Q
(The pr) 99.65 388.62 T
(eceding methods work as follows:) 131.57 388.62 T
(\245) 108.65 368.62 T
(When you call) 126.65 368.62 T
4 10 Q
(direction) 199.51 368.62 T
1 11 Q
( on an instance of) 253.51 368.62 T
4 10 Q
(<directed-angle>) 341.15 368.62 T
1 11 Q
( or any of) 437.15 368.62 T
(its subclasses, method 1 is invoked. Method 1 calls the getter) 126.65 354.62 T
4 10 Q
(internal-) 423.83 354.62 T
(direction) 126.65 340.62 T
1 11 Q
(, and r) 180.65 340.62 T
(eturns the value of the) 211.67 340.62 T
4 10 Q
(internal-direction) 323.32 340.62 T
1 11 Q
( slot.) 431.32 340.62 T
(\245) 108.65 320.62 T
(When you call) 126.65 320.62 T
4 10 Q
(direction-setter) 199.51 320.62 T
1 11 Q
( on a dir) 295.51 320.62 T
(ect instance of) 335.74 320.62 T
4 10 Q
(<latitude>) 407.3 320.62 T
1 11 Q
(,) 467.3 320.62 T
(method 3 is invoked. Method 3 checks that the dir) 126.65 306.62 T
(ection is valid for lati-) 369.65 306.62 T
(tude; if it \336nds that the dir) 126.65 292.62 T
(ection is valid, it calls) 254.6 292.62 T
4 10 Q
(next-method) 361.39 292.62 T
1 11 Q
(, which) 427.39 292.62 T
(invokes method 2. Method 2 stor) 126.65 278.62 T
(es the dir) 286.51 278.62 T
(ection in the) 331.27 278.62 T
4 10 Q
(internal-) 393.73 278.62 T
(direction) 126.65 264.62 T
1 11 Q
( slot.) 180.65 264.62 T
(\245) 108.65 244.62 T
(When you call) 126.65 244.62 T
4 10 Q
(direction-setter) 199.51 244.62 T
1 11 Q
( on a dir) 295.51 244.62 T
(ect instance of) 335.74 244.62 T
4 10 Q
(<longitude>) 407.3 244.62 T
1 11 Q
(,) 473.3 244.62 T
-0.18 (method 4 is called. Method 4 checks that the dir) 126.65 230.62 P
-0.18 (ection is valid for longitude;) 356.86 230.62 P
(if it \336nds that the dir) 126.65 216.62 T
(ection is valid, it calls) 226.89 216.62 T
4 10 Q
(next-method) 333.68 216.62 T
1 11 Q
(, which invokes) 399.68 216.62 T
(method 2. Method 2 stor) 126.65 202.62 T
(es the dir) 245.89 202.62 T
(ection in the) 290.65 202.62 T
4 10 Q
(internal-direction) 353.11 202.62 T
1 11 Q
( slot.) 461.11 202.62 T
(\245) 108.65 182.62 T
(When you call) 126.65 182.62 T
4 10 Q
(direction-setter) 199.51 182.62 T
1 11 Q
( on a dir) 295.51 182.62 T
(ect instance of) 335.74 182.62 T
4 10 Q
(<directed-) 407.3 182.62 T
(angle>) 126.65 168.62 T
1 11 Q
(, method 2 is invoked. Method 2 stor) 162.65 168.62 T
(es the dir) 340.68 168.62 T
(ection in the) 385.44 168.62 T
4 10 Q
(internal-direction) 126.65 154.62 T
1 11 Q
( slot.) 234.65 154.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 145
%%Page: "132" 146
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(132) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(In these methods, we use) 99.65 665.62 T
4 10 Q
(dir) 224.82 665.62 T
1 11 Q
(, rather than) 242 665.62 T
4 10 Q
(direction) 304.34 665.62 T
1 11 Q
(, as the name of the parame-) 358.34 665.62 T
(ter that r) 99.65 651.62 T
(epr) 141.57 651.62 T
(esents dir) 157.6 651.62 T
(ection. Recall that) 204.27 651.62 T
4 10 Q
(direction) 293.09 651.62 T
1 11 Q
( is the name of a getter) 347.09 651.62 T
(.) 456.13 651.62 T
(Although we technically could use) 99.65 637.62 T
4 10 Q
(direction) 271.4 637.62 T
1 11 Q
( as the parameter name in these) 325.4 637.62 T
(methods \050because we do not call the) 99.65 623.62 T
4 10 Q
(direction) 278.43 623.62 T
1 11 Q
( getter in the bodies\051,) 332.43 623.62 T
4 10 Q
(direction) 437.57 623.62 T
1 11 Q
(as a parameter name might be confusing to other people r) 99.65 609.62 T
(eading the code.) 380.49 609.62 T
(The) 126.65 595.62 T
4 10 Q
(error) 147.81 595.62 T
1 11 Q
( function signals an err) 177.81 595.62 T
(or) 289 595.62 T
(. For mor) 298.54 595.62 T
(e information about signaling) 343.12 595.62 T
(and handling err) 99.65 581.62 T
(ors, see Chapter 20,) 181.48 581.62 T
0 F
(Exceptions) 281.46 581.62 T
1 F
(.) 329.93 581.62 T
(The) 126.65 567.62 T
4 10 Q
(direction-setter) 147.81 567.62 T
1 11 Q
( methods check the dir) 243.81 567.62 T
(ection when the setter is) 354.05 567.62 T
(called. In Section 10.6.3, we check the dir) 99.65 553.62 T
(ection when an instance is made.) 297.23 553.62 T
3 13 Q
(10.6.3  Initializ) 99.65 522.29 T
(e method f) 171.46 522.29 T
(or a vir) 225.16 522.29 T
(tual slot) 260.93 522.29 T
1 11 Q
(W) 99.65 502.62 T
(e de\336ne the) 109.64 502.62 T
4 10 Q
(initialize) 168.73 502.62 T
1 11 Q
( method:) 228.73 502.62 T
4 9 Q
(define method initialize \050angle :: <directed-angle>, #key direction: dir\051) 99.65 481.95 T
5 F
(//1) 497.45 481.95 T
4 F
(next-method\050\051;) 110.45 470.95 T
5 F
(//2) 497.45 470.95 T
4 F
(angle.direction := dir;) 110.45 459.95 T
5 F
(//3) 497.45 459.95 T
4 F
(end method initialize;) 99.65 448.95 T
5 F
(//4) 497.45 448.95 T
1 11 Q
(For keywor) 99.65 428.62 T
(d parameters, the name of the keywor) 155.69 428.62 T
(d that you supply to) 340.36 428.62 T
4 10 Q
(make) 442.09 428.62 T
1 11 Q
( is) 466.09 428.62 T
(normally the same name as the parameter that is initialized within the body) 99.65 414.62 T
(. In) 466.83 414.62 T
(this case, we want to avoid confusion between the getter) 99.65 400.62 T
4 10 Q
(direction) 376.75 400.62 T
1 11 Q
( and the) 430.75 400.62 T
(keywor) 99.65 386.62 T
(d parameter) 136.48 386.62 T
4 10 Q
(direction:) 198.84 386.62 T
1 11 Q
(, so we use) 258.83 386.62 T
4 10 Q
(dir) 314.26 386.62 T
1 11 Q
( as the name of the keywor) 332.26 386.62 T
(d) 462.82 386.62 T
(parameter for the) 99.65 372.62 T
4 10 Q
(initialize) 187.31 372.62 T
1 11 Q
( method. When you call) 247.31 372.62 T
4 10 Q
(make) 366.12 372.62 T
1 11 Q
(, you use the) 390.12 372.62 T
4 10 Q
(direc-) 454.45 372.62 T
(tion:) 99.65 358.62 T
1 11 Q
( keywor) 129.65 358.62 T
(d. However) 169.23 358.62 T
(, within this method, the parameter is named) 226.06 358.62 T
4 10 Q
(dir) 447.94 358.62 T
1 11 Q
(.) 465.13 358.62 T
(Line 3 calls the setter for the) 126.65 344.62 T
4 10 Q
(direction) 265.69 344.62 T
1 11 Q
( slot. W) 319.69 344.62 T
(e de\336ned the methods for) 355.38 344.62 T
4 10 Q
(direction-setter) 99.65 330.62 T
1 11 Q
( in Section 10.6.2. If the ar) 195.65 330.62 T
(gument is a latitude, then method 3) 319.4 330.62 T
(is invoked to check the value. If the ar) 99.65 316.62 T
(gument is a longitude, then method 4 is) 283.69 316.62 T
(invoked to check the value.) 99.65 302.62 T
(W) 126.65 288.62 T
(e can cr) 136.64 288.62 T
(eate a new instance of) 173.22 288.62 T
4 10 Q
(<absolute-position>) 282.52 288.62 T
1 11 Q
(.) 396.52 288.62 T
6 9 Q
(?) 99.65 267.95 T
4 F
(define variable *my-absolute-position* =) 110.45 267.95 T
(make\050<absolute-position>,) 121.25 256.95 T
(latitude:) 148.25 245.95 T
(make\050<latitude>,) 159.05 234.95 T
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 186.05 223.95 T
(direction: #"north"\051,) 186.05 212.95 T
(longitude:) 148.25 201.95 T
(make\050<longitude>,) 159.05 190.95 T
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 186.05 179.95 T
(direction: #"west"\051\051;) 186.05 168.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 146
%%Page: "133" 147
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.7 Summary) 450.89 702.62 T
2 F
(133) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The pr) 99.65 665.62 T
(eceding example works, because the values for dir) 131.57 665.62 T
(ection ar) 376.1 665.62 T
(e appr) 417.85 665.62 T
(opriate) 448.73 665.62 T
-0.28 (for latitude and longitude. The following example shows what happens when the) 99.65 651.62 P
(dir) 99.65 637.62 T
(ection is not valid when an instance is cr) 113.72 637.62 T
(eated:) 309.71 637.62 T
6 9 Q
(?) 99.65 616.95 T
4 F
(make\050<latitude>, direction: #"nooth"\051;) 110.45 616.95 T
6 F
(ERROR: nooth is not north or south) 99.65 605.95 T
1 11 Q
-0.41 (The following example shows what happens when the dir) 99.65 585.62 P
-0.41 (ection is not valid when) 378.63 585.62 P
(the) 99.65 571.62 T
4 10 Q
(direction) 117.65 571.62 T
1 11 Q
( setter is used:) 171.65 571.62 T
6 9 Q
(?) 99.65 550.95 T
4 F
(begin) 110.45 550.95 T
(let my-longitude = make\050<longitude>, direction: #"east"\051;) 121.25 539.95 T
(my-longitude.direction := #"north";) 121.25 528.95 T
(end;) 110.45 517.95 T
6 F
(ERROR: north is not east or west) 99.65 506.95 T
3 15 Q
(10.7  Summar) 99.65 468.95 T
(y) 179.76 468.95 T
1 11 Q
(In this chapter) 99.65 448.62 T
(, we cover) 168.89 448.62 T
(ed the following:) 218.11 448.62 T
(\245) 108.65 428.62 T
(W) 126.65 428.62 T
(e described techniques for initializing slots; see T) 136.64 428.62 T
(able 10.1.) 373.31 428.62 T
(\245) 108.65 408.62 T
(W) 126.65 408.62 T
(e discussed the syntax of calling getters and setters; see T) 136.64 408.62 T
(able 10.2.) 412.73 408.62 T
(\245) 108.65 388.62 T
(W) 126.65 388.62 T
(e showed how to de\336ne methods for getters and setters.) 136.64 388.62 T
(\245) 108.65 368.62 T
(W) 126.65 368.62 T
(e showed how and why you can use symbols instead of strings.) 136.64 368.62 T
(\245) 108.65 348.62 T
(W) 126.65 348.62 T
(e described the dif) 136.64 348.62 T
(fer) 225.96 348.62 T
(ent kinds of slot allocation; see T) 239.04 348.62 T
(able 10.3.) 396.19 348.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(T) 121.91 306.62 T
(echnique) 127.31 306.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summar) 330.25 306.62 T
(y) 372.14 306.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(initialize) 105.64 281.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method) 105.64 267.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Y) 194.23 281.62 T
(ou can de\336ne a method for) 200.55 281.62 T
4 10 Q
(initialize) 334 281.62 T
1 11 Q
( for a class to per-) 394 281.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(form any actions to initialize the instance. The) 194.23 267.62 T
4 10 Q
(make) 420.4 267.62 T
1 11 Q
( function) 444.4 267.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(calls the) 194.23 253.62 T
4 10 Q
(initialize) 236.43 253.62 T
1 11 Q
( generic function after) 296.43 253.62 T
4 10 Q
(make) 406.06 253.62 T
1 11 Q
( cr) 430.06 253.62 T
(eates an) 441.84 253.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.47 (instance and supplies those initial slot values that it can. If you) 194.23 239.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (need to do any complex computation to determine and set the) 194.23 225.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of a slot, you can do it in an) 194.23 211.62 T
4 10 Q
(initialize) 360.48 211.62 T
1 11 Q
( method.) 420.48 211.62 T
0 0 0 1 0 0 0 K
99.64 173.96 513.66 181.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 180.48 185.29 T
(ab) 185.79 185.29 T
(le 10.1) 197.36 185.29 T
8 F
(Summar) 233.5 185.29 T
(y of slot-initialization techniques) 271.58 185.29 T
(.) 412.04 185.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.64 321.83 99.64 202.08 2 L
V
0.25 H
0 Z
N
513.66 321.83 513.66 202.08 2 L
V
N
99.51 321.95 513.78 321.95 2 L
V
N
99.51 294.95 513.78 294.95 2 L
V
N
99.51 201.95 513.78 201.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 147
%%Page: "134" 148
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(134) 63.65 702.62 T
0 F
(Chapter 10) 87.4 702.62 T
(Slots) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(Init keyword) 105.64 633.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 194.23 632.62 T
(ou can use the) 200.55 632.62 T
4 10 Q
(init-keyword:) 272.8 632.62 T
1 11 Q
( slot option to declar) 350.8 632.62 T
(e an) 450.38 632.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(optional keywor) 194.23 618.62 T
(d ar) 274.32 618.62 T
(gument, or the) 293.43 618.62 T
4 10 Q
(required-init-) 367.76 618.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.76 (keyword:) 194.23 604.62 P
1 11 Q
-0.35 ( slot option to declar) 242.23 604.62 P
-0.35 (e a r) 340.42 604.62 P
-0.35 (equir) 360.14 604.62 P
-0.35 (ed keywor) 385.55 604.62 P
-0.35 (d ar) 436.77 604.62 P
-0.35 (gument) 455.54 604.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (for) 194.23 590.62 P
4 10 Q
-0.72 (make) 210.66 590.62 P
1 11 Q
-0.33 ( when you cr) 234.66 590.62 P
-0.33 (eate an instance of the class. The value of) 296.95 590.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the keywor) 194.23 576.62 T
(d ar) 249.06 576.62 T
(gument becomes the value of the slot.) 268.18 576.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Init value) 105.64 554.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 194.23 553.62 T
(ou can use the) 200.55 553.62 T
4 10 Q
(init-value:) 272.8 553.62 T
1 11 Q
( slot option to give a default ini-) 338.8 553.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tial value for the slot. This option speci\336es an expr) 194.23 539.62 T
(ession that) 438.4 539.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (is evaluated once, befor) 194.23 525.62 P
-0.26 (e the \336rst instance of the class is made,) 307.93 525.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to yield a value. Every time an instance is made and the slot) 194.23 511.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(needs a default value, this same value is used as the default.) 194.23 497.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.39 (The slot r) 194.23 483.62 P
-0.39 (eceives its default initial value when no init keywor) 238.96 483.62 P
-0.39 (d) 486.58 483.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is de\336ned, or when the caller does not supply the init-) 194.23 469.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keywor) 194.23 455.62 T
(d ar) 231.05 455.62 T
(gument to) 250.17 455.62 T
4 10 Q
(make) 302.98 455.62 T
1 11 Q
(.) 326.98 455.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Init function) 105.64 433.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 194.23 432.62 T
(ou can use the) 200.55 432.62 T
4 10 Q
(init-function:) 272.8 432.62 T
1 11 Q
( slot option to pr) 356.8 432.62 T
(ovide a) 437.42 432.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function that r) 194.23 418.62 T
(eturns a default value. This option speci\336es an) 263.72 418.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(expr) 194.23 404.62 T
(ession that is evaluated once, befor) 215.93 404.62 T
(e the \336rst instance of) 385.2 404.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the class is made, to yield a function. The function must have) 194.23 390.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(no r) 194.23 376.62 T
(equir) 213.53 376.62 T
(ed ar) 238.94 376.62 T
(guments and must r) 263.33 376.62 T
(eturn at least one value.) 361.33 376.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Every time that an instance is made and the slot needs a) 194.23 362.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(default value, this function is called with no ar) 194.23 348.62 T
(guments, and) 420.05 348.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (the value that it r) 194.23 334.62 P
-0.46 (eturns is used as the default. The slot r) 275.47 334.62 P
-0.46 (eceives) 458.6 334.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(its default initial value when no init keywor) 194.23 320.62 T
(d is de\336ned or) 407.48 320.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.33 (when the caller does not supply the init-keywor) 194.23 306.62 P
-0.33 (d ar) 424.71 306.62 P
-0.33 (gument to) 443.5 306.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 10 Q
(make) 194.23 292.62 T
1 11 Q
(.) 218.23 292.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Init expression) 105.64 270.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Y) 194.23 269.62 T
(ou can use an init expr) 200.55 269.62 T
(ession to pr) 310.29 269.62 T
(ovide an expr) 366.34 269.62 T
(ession that) 432.86 269.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (yields a default value. Every time that an instance is made and) 194.23 255.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the slot needs a default value, this expr) 194.23 241.62 T
(ession is evaluated,) 383.71 241.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.46 (and its value is used as the default. The slot r) 194.23 227.62 P
-0.46 (eceives its default) 407.98 227.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(initial value when no init keywor) 194.23 213.62 T
(d is de\336ned, or when the) 355.96 213.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(caller does not supply the init-keywor) 194.23 199.62 T
(d ar) 379 199.62 T
(gument to) 398.12 199.62 T
4 10 Q
(make) 450.93 199.62 T
1 11 Q
(.) 474.93 199.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(T) 121.91 657.62 T
(echnique) 127.31 657.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Summar) 330.25 657.62 T
(y) 372.14 657.62 T
0 0 0 1 0 0 0 K
99.64 161.96 513.66 169.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 154.13 173.29 T
(ab) 159.44 173.29 T
(le 10.1) 171.01 173.29 T
8 F
(Summar) 207.15 173.29 T
(y of slot-initialization techniques) 245.23 173.29 T
(.) 385.69 173.29 T
9 F
( \050contin) 388.47 173.29 T
(ued\051) 421.16 173.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.64 672.83 99.64 190.08 2 L
V
0.25 H
0 Z
N
513.66 672.83 513.66 190.08 2 L
V
N
99.51 672.95 513.78 672.95 2 L
V
N
99.51 645.95 513.78 645.95 2 L
V
N
99.51 189.95 513.78 189.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 148
%%Page: "135" 149
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10.7 Summary) 450.89 702.62 T
2 F
(135) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 11 Q
0 X
(Call) 183.2 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 371.89 643.62 T
(r) 377.29 643.62 T
(anslation) 380.84 643.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(object.function-name) 104.94 619.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function-name) 284.4 619.95 T
4 10 Q
(\050) 354.6 619.95 T
6 9 Q
(object) 360.6 619.95 T
4 10 Q
(\051) 393 619.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(*my-time-of-day*.total-seconds;) 104.94 598.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds\050*my-time-of-day*\051;) 284.4 598.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(object.name) 104.94 577.95 T
4 F
( :=) 164.34 577.95 T
6 F
(new-value) 185.94 577.95 T
4 F
(;) 234.54 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(name) 284.4 577.95 T
4 F
(-setter\050) 306 577.95 T
6 F
(new-value) 349.2 577.95 T
4 F
(,) 397.8 577.95 T
6 F
(object) 408.6 577.95 T
4 F
(\051;) 441 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(name\050object\051) 104.94 555.62 T
1 11 Q
( :=) 169.74 555.62 T
6 9 Q
(new-value) 184.66 555.62 T
1 11 Q
(;) 233.26 555.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(name) 284.4 556.95 T
4 F
(-setter\050) 306 556.95 T
6 F
(new-value) 349.2 556.95 T
4 F
(,) 397.8 556.95 T
6 F
(object) 408.6 556.95 T
4 F
(\051;) 441 556.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*my-time-of-day*.total-seconds) 104.94 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= 0;) 115.74 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds-setter) 284.4 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\0500, *my-time-of-day*\051;) 295.2 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds\050*my-time-of-day*\051) 104.94 501.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= 0;) 115.74 490.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds-setter\0500, *my-time-of-day*\051;) 284.4 501.95 T
0 0 0 1 0 0 0 K
99.65 453.96 513.65 461.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 190.62 465.29 T
(ab) 195.93 465.29 T
(le 10.2) 207.5 465.29 T
8 F
(Syntax of calling getters and setters) 243.64 465.29 T
(.) 401.9 465.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Allocation) 109.79 389.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 F
(Summar) 324.71 387.63 T
(y) 366.6 387.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(Instance) 108.31 362.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (Each instance allocates storage for the slot, and each instance) 191.82 362.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of the class that de\336nes the slot has its own value of the slot.) 191.82 348.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Instance allocation is the default.) 191.82 334.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(V) 108.31 311.63 T
(irtual) 115.64 311.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (No storage is allocated for the slot. Y) 191.82 311.63 P
-0.42 (ou must pr) 366.28 311.63 P
-0.42 (ovide a getter) 418.92 311.63 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method that computes the value of the virtual slot.) 191.82 297.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(Class) 108.31 275.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The class that de\336nes the slot allocates storage for the slot.) 191.82 274.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(All general instances of the class shar) 191.82 260.63 T
(e the value of the slot.) 372.51 260.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Each-) 108.31 237.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(subclass) 108.31 223.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The class that de\336nes the slot and each of its subclasses allo-) 191.82 237.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cate storage for the slot. All the dir) 191.82 223.63 T
(ect instances of each class) 359.56 223.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(shar) 191.82 209.63 T
(e the value of the slot.) 212.53 209.63 T
0 0 0 1 0 0 0 K
99.65 171.97 513.65 179.96 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 208.54 183.29 T
(ab) 213.85 183.29 T
(le 10.3) 225.42 183.29 T
8 F
(Summar) 261.56 183.29 T
(y of slot allocations) 299.64 183.29 T
(.) 383.97 183.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
100.94 658.83 100.94 482.08 2 L
V
0.25 H
0 Z
N
512.35 658.83 512.35 482.08 2 L
V
N
100.82 658.95 512.48 658.95 2 L
V
N
100.82 631.95 512.48 631.95 2 L
V
N
100.82 481.95 512.48 481.95 2 L
V
N
102.31 402.84 102.31 200.09 2 L
V
N
510.99 402.84 510.99 200.09 2 L
V
N
102.18 402.96 511.11 402.96 2 L
V
N
102.18 375.96 511.11 375.96 2 L
V
N
102.18 199.96 511.11 199.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 149
%%Page: "136" 150
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 150
%%Page: "137" 151
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(137) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(1) 171.65 652.95 T
(1) 185 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(1) 99.65 591.4 T
(1) 100.54 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Collections and Contr) 101.54 591.4 T
(ol) 391.4 591.4 T
(Flow) 99.65 561.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.12 (A) 99.65 449.62 P
2 F
-0.12 (collection) 110.83 449.62 P
1 F
-0.12 ( is a kind of container that can hold zer) 159.71 449.62 P
-0.12 (o or mor) 347.54 449.62 P
-0.12 (e objects. In this chap-) 389.02 449.62 P
-0.1 (ter) 99.65 435.62 P
-0.1 (, we illustrate several useful built-in collections including strings, lists, vectors,) 112.03 435.62 P
(arrays, and tables.) 99.65 421.62 T
(In Dylan, a collection is an instance of the built-in class) 126.65 407.62 T
4 10 Q
(<collection>) 395.11 407.62 T
1 11 Q
(.) 467.11 407.62 T
(Dylan pr) 99.65 393.62 T
(ovides a rich set of collection classes, and a rich set of generic functions) 142.89 393.62 T
(to iterate over and to manipulate instances of those classes. In addition to using) 99.65 379.62 T
-0.4 (the built-in collection classes, you can de\336ne new collection classes. W) 99.65 365.62 P
-0.4 (e pr) 435.49 365.62 P
-0.4 (esent an) 453.86 365.62 P
(example of de\336ning a new collection class in Chapter 16,) 99.65 351.62 T
0 F
(De\336nition of a New) 377.58 351.62 T
(Collection) 99.65 337.62 T
1 F
(.) 144.46 337.62 T
(Contr) 126.65 323.62 T
(ol-\337ow functions enable you to alter the default \050sequential\051 or) 154.59 323.62 T
(der of) 458.68 323.62 T
-0.53 (statement execution, including performing iteration. Dylan pr) 99.65 309.62 P
-0.53 (ovides several ways) 396.99 309.62 P
-0.42 (of branching to dif) 99.65 295.62 P
-0.42 (fer) 188.61 295.62 P
-0.42 (ent code depending on the value of one or mor) 201.69 295.62 P
-0.42 (e tests, as well) 425.54 295.62 P
(as iterating over ranges of numbers and elements of collections.) 99.65 281.62 T
(In this chapter) 126.65 267.62 T
(, we pr) 195.89 267.62 T
(esent collections and contr) 229.34 267.62 T
(ol \337ow together) 357.74 267.62 T
(, because) 434.08 267.62 T
(often Dylan contr) 99.65 253.62 T
(ol-\337ow constr) 184.83 253.62 T
(ucts ar) 252.12 253.62 T
(e used to operate on collections.) 284.28 253.62 T
3 15 Q
(11.1  Built-in collection c) 99.65 213.95 T
(lasses) 243.66 213.95 T
1 11 Q
(Figur) 99.65 193.62 T
(e 1) 125.86 193.62 T
(1.1 shows the most common Dylan collection classes.) 138.77 193.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 151
%%Page: "138" 152
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(138) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(A collection holds a gr) 99.65 473.63 T
(oup of objects, called) 208.6 473.63 T
2 F
(elements) 313.11 473.63 T
1 F
(. Each element is associated) 358.32 473.63 T
(with a key) 99.65 459.63 T
(. Each class of collection can have dif) 149.29 459.63 T
(fer) 327.58 459.63 T
(ent r) 340.66 459.63 T
(estrictions on keys or) 362.81 459.63 T
(elements.) 99.65 445.63 T
(Sequences ar) 126.65 431.63 T
(e an important subclass of collections. Sequences r) 189.37 431.63 T
(estrict their) 433.23 431.63 T
(keys to be nonnegative integers starting at 0, and incr) 99.65 417.63 T
(easing by one for each addi-) 358.72 417.63 T
(tional value in the collection. Arrays, vectors, strings, and lists ar) 99.65 403.63 T
(e sequences.) 413.42 403.63 T
-0.33 (Instances of) 99.65 389.63 P
4 10 Q
-0.72 (<string>) 159.24 389.63 P
1 11 Q
-0.33 ( ar) 207.24 389.63 P
-0.33 (e sequences that can hold only characters. Y) 219.3 389.63 P
-0.33 (ou can access) 429.1 389.63 P
(instances of) 99.65 375.63 T
4 10 Q
(<array>) 159.39 375.63 T
1 11 Q
( using several subscripts. Instances of) 201.39 375.63 T
4 10 Q
(<vector>) 386.2 375.63 T
1 11 Q
( ar) 434.2 375.63 T
(e one-) 446.6 375.63 T
-0.1 (dimensional arrays. Instances of) 99.65 361.63 P
4 10 Q
-0.22 (<simple-object-vector>) 258.5 361.63 P
1 11 Q
-0.1 ( can hold any kind of) 390.5 361.63 P
(Dylan object. Instances of most subclasses of) 99.65 347.63 T
4 10 Q
(<vector>) 318.39 347.63 T
1 11 Q
( cannot change size; the) 366.39 347.63 T
(exception is instances of) 99.65 333.63 T
4 10 Q
(<stretchy-vector>) 219.66 333.63 T
1 11 Q
(.) 321.66 333.63 T
3 15 Q
(11.2  Basic use of collections) 99.65 293.96 T
1 11 Q
(In Sections 1) 99.65 273.63 T
(1.2.1 thr) 159.94 273.63 T
(ough 1) 198.82 273.63 T
(1.2.3, we show how to cr) 231.63 273.63 T
(eate collections, and how to) 351.02 273.63 T
(access the elements of a collection.) 99.65 259.63 T
3 13 Q
(11.2.1  Creation of strings and access to elements) 99.65 228.29 T
1 11 Q
(First, we de\336ne a variable, initializing it with a string:) 99.65 208.63 T
6 9 Q
(?) 99.65 187.96 T
4 F
(define variable *greeting* = "Hello, world.";) 110.45 187.96 T
6 F
(?) 99.65 168.96 T
4 F
(*greeting*;) 110.45 168.96 T
6 F
("Hello, world.") 99.65 157.96 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 492.96 495.65 500.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.1) 202.58 504.29 T
8 F
(Built-in collection classes) 260.94 504.29 T
(.) 371.93 504.29 T
0 0 0 1 0 0 0 K
99.65 516.95 495.65 672.95 C
113.15 520.95 482.15 670.95 C
0 -357 161 0 299 357 138 119.15 526.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-1 .eps)%%CreationDate: (6/5/96) (10:42 AM)%%BoundingBox: -357 161 0 299%%HiResBoundingBox: -356.0555 160.9167 -1.2713 298.8737%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -174.6667 163.1667 -174.6667 163.1667%AI3_TileBox: -449.6667 -202.3333 102.3333 527.6667%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -930.6667 667.1667 -1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4494.6667 4483.1667 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4494.6667 4483.1667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4494.6667 4483.1667 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -207.1667 291.6667 0 TpTP-32.3921 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<collection>) Tx (\r) TX TO0 To1 0 0 1 -336.1667 260.6667 0 TpTP-18.8954 0 Td0 Tr(<table>) Tx (\r) TX TO0 To1 0 0 1 -116.1667 260.6667 0 TpTP-26.9934 0 Td0 Tr(<sequence>) Tx (\r) TX TO0 To1 0 0 1 -192.1667 246.1667 0 TpTP-18.8954 0 Td0 Tr(<array>) Tx (\r) TX TO0 To1 0 0 1 -238.6667 226.6667 0 TpTP-21.5947 0 Td0 Tr(<vector>) Tx (\r) TX TO0 To1 0 0 1 -181.4167 226.6667 0 TpTP-21.5947 0 Td0 Tr(<string>) Tx (\r) TX TO0 To1 0 0 1 -126.6667 226.6667 0 TpTP-18.8954 0 Td0 Tr(<deque>) Tx (\r) TX TO0 To1 0 0 1 -70.4167 226.6667 0 TpTP-16.196 0 Td0 Tr(<list>) Tx (\r) TX TO0 To1 0 0 1 -20.1667 226.6667 0 TpTP-18.8954 0 Td0 Tr(<range>) Tx (\r) TX TO0 To1 0 0 1 -310.1667 190.1667 0 TpTP-45.8888 0 Td0 Tr(<stretchy-vector>) Tx (\r) TX TO0 To1 0 0 1 -101.1667 202.1667 0 TpTP-16.196 0 Td0 Tr(<pair>) Tx (\r) TX TO0 To1 0 0 1 -37.1667 202.1667 0 TpTP-32.3921 0 Td0 Tr(<empty-list>) Tx (\r) TX TO0 To1 0 0 1 -292.6667 163.1667 0 TpTP-59.3855 0 Td0 Tr(<simple-object-vector>) Tx (\r) TX TO0 To1 0 0 1 -177.1667 163.1667 0 TpTP-43.1894 0 Td0 Tr(<unicode-string>) Tx (\r) TX TO0 To1 0 0 1 -83.1667 163.1667 0 TpTP-35.0914 0 Td0 Tr(<byte-string>) Tx (\r) TX TOu0 R0 G0.65 w-223.1667 287.6667 m-321.6667 272.1667 lS0 O0 g1 w-320.4839 274.6183 m-328.4847 271.0659 l-319.7796 270.142 l-320.4839 274.6183 lfUu0 R0 G0.65 w-199.1667 288.6667 m-121.6667 274.6667 lS0 O0 g1 w-123.583 272.74 m-114.8591 273.4663 l-122.7774 277.1993 l-123.583 272.74 lfUu0 R0 G0.65 w-144.6667 261.6667 m-167 255 lS0 O0 g1 w-166.1556 257.5879 m-173.6101 252.9985 l-164.8595 253.2459 l-166.1556 257.5879 lfUu0 R0 G0.65 w-125 255.6667 m-158.3333 239.3334 lS0 O0 g1 w-157.9332 242.024 m-164.5297 236.2689 l-155.9394 237.9548 l-157.9332 242.024 lfUu0 R0 G0.65 w-115.3333 255.6667 m-121.6667 241.3334 lS0 O0 g1 w-123.0875 243.6548 m-124.4327 235.0048 l-118.9427 241.8235 l-123.0875 243.6548 lfUu0 R0 G0.65 w-107 256.6667 m-80.3333 239.6667 lS0 O0 g1 w-82.8423 238.608 m-74.4943 235.9729 l-80.4064 242.429 l-82.8423 238.608 lfUu0 R0 G0.65 w-101 257.6667 m-29.6667 236.6667 lS0 O0 g1 w-31.7812 234.9561 m-23.0298 234.7413 l-30.5014 239.303 l-31.7812 234.9561 lfUu0 R0 G0.65 w-211.3333 243.6667 m-232 236.3334 lS0 O0 g1 w-231.2917 238.9607 m-238.5031 233.998 l-229.7764 234.6902 l-231.2917 238.9607 lfUu0 R0 G0.65 w-240.6667 223 m-295 201.6667 lS0 O0 g1 w-294.3823 204.3129 m-301.4252 199.1138 l-292.7262 200.0949 l-294.3823 204.3129 lfUu0 R0 G0.65 w-237.6667 222 m-261.6667 178 lS0 O0 g1 w-262.8864 180.4292 m-264.9465 171.921 l-258.9082 178.2594 l-262.8864 180.4292 lfUu0 R0 G0.65 w-234.6667 222.3334 m-200.3333 176.6667 lS0 O0 g1 w-203.0507 176.5562 m-196.1585 171.1589 l-199.4288 179.2793 l-203.0507 176.5562 lfUu0 R0 G0.65 w-231 223.3334 m-111.6667 174 lS0 O0 g1 w-113.9501 172.5253 m-105.2701 171.3885 l-112.2189 176.713 l-113.9501 172.5253 lfUu0 R0 G0.65 w-181.6667 223.3334 m-181.6667 178.6667 lS0 O0 g1 w-183.9046 180.2124 m-181.6391 171.7566 l-179.3732 180.2124 l-183.9046 180.2124 lfUu0 R0 G0.65 w-177.6667 223 m-89.6667 173.6667 lS0 O0 g1 w-92.1078 172.4739 m-83.6241 170.3152 l-89.892 176.4266 l-92.1078 172.4739 lfUu0 R0 G0.65 w-73 222 m-89.3333 213.6667 lS0 O0 g1 w-88.9732 216.3634 m-95.4757 210.5025 l-86.9138 212.327 l-88.9732 216.3634 lfUu0 R0 G0.65 w-67.0988 222 m-50.7655 213.6667 lS0 O0 g1 w-51.1256 216.3634 m-44.6231 210.5025 l-53.185 212.327 l-51.1256 216.3634 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 516.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 152
%%Page: "139" 153
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.2 Basic use of collections) 402.09 702.62 T
2 F
(139) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(e can access elements of the string:) 109.64 665.62 T
6 9 Q
(?) 99.65 644.95 T
4 F
(*greeting*[0];) 110.45 644.95 T
6 F
(\325H\325) 99.65 633.95 T
(?) 99.65 614.95 T
4 F
(*greeting*[1];) 110.45 614.95 T
6 F
(\325e\325) 99.65 603.95 T
1 11 Q
-0.28 (The syntax) 99.65 583.62 P
4 10 Q
-0.61 (*greeting*[) 154.95 583.62 P
6 F
-0.61 (n) 220.95 583.62 P
4 F
-0.61 (]) 226.95 583.62 P
1 11 Q
-0.28 ( r) 232.95 583.62 P
-0.28 (efers to the) 239.56 583.62 P
0 F
-0.28 (n) 295.03 583.62 P
1 F
-0.28 (th element of the string in) 301.15 583.62 P
4 10 Q
-0.61 (*greeting*) 427.51 583.62 P
1 11 Q
-0.28 (.) 487.51 583.62 P
-0.02 (Y) 99.65 569.62 P
-0.02 (ou can use this syntax to access any element of any collection.) 105.97 569.62 P
-0.02 (In Dylan, double) 410.96 569.62 P
(quotes ar) 99.65 555.62 T
(e used to enclose literal strings, and single quotes ar) 144.36 555.62 T
(e used to enclose) 396.43 555.62 T
(characters.) 99.65 541.62 T
(W) 126.65 527.62 T
(e can use the assignment operator to change an element of a string:) 136.64 527.62 T
6 9 Q
(?) 99.65 506.95 T
4 F
(*greeting* := copy-sequence\050*greeting*\051;) 110.45 506.95 T
6 F
("Hello, world.") 99.65 495.95 T
(?) 99.65 476.95 T
4 F
(*greeting*[0] :=) 110.45 476.95 T
6 F
(') 202.25 476.95 T
4 F
(j) 207.65 476.95 T
6 F
(') 213.05 476.95 T
4 F
(;) 218.45 476.95 T
6 F
(\325j\325) 99.65 465.95 T
(?) 99.65 446.95 T
4 F
(*greeting*;) 110.45 446.95 T
6 F
("jello, world.") 99.65 435.95 T
1 11 Q
(W) 99.65 415.62 T
(e copied the gr) 109.64 415.62 T
(eeting befor) 181.37 415.62 T
(e modifying it, because modifying a literal constant) 239.13 415.62 T
-0.28 (is an err) 99.65 401.62 P
-0.28 (or) 138.12 401.62 P
-0.28 (. A) 147.66 401.62 P
2 F
-0.28 ( literal constant) 161.44 401.62 P
1 F
-0.28 ( is an object whose contents ar) 238.47 401.62 P
-0.28 (e known completely at) 383.44 401.62 P
(compile time. Dylan has a special syntax for each class of literal constant, so that) 99.65 387.62 T
-0.33 (they can be identi\336ed easily) 99.65 373.62 P
-0.33 (. The literal constant) 232.58 373.62 P
4 10 Q
-0.73 ("Hello, world.") 332.74 373.62 P
1 11 Q
-0.33 (, which is used) 422.02 373.62 P
(to initialize the) 99.65 359.62 T
4 10 Q
(*greeting*) 175.01 359.62 T
1 11 Q
( variable, is part of the pr) 235.01 359.62 T
(ogram executable, and is) 357.16 359.62 T
(allocated when you compile the pr) 99.65 345.62 T
(ogram.) 268.17 345.62 T
-0.43 (The) 126.65 331.62 P
4 10 Q
-0.94 (copy-sequence) 147.38 331.62 P
1 11 Q
-0.43 ( generic function r) 225.38 331.62 P
-0.43 (eturns a new collection with the same) 312.75 331.62 P
(elements as its ar) 99.65 317.62 T
(gument. The) 182.53 317.62 T
4 10 Q
(copy-sequence) 246.92 317.62 T
1 11 Q
( function cr) 324.92 317.62 T
(eates the copy at r) 380.22 317.62 T
(un) 467.73 317.62 T
-0.18 (time, so modi\336cation of its r) 99.65 303.62 P
-0.18 (esults is permitted, because such changes do not alter) 234.83 303.62 P
(the pr) 99.65 289.62 T
(ogram itself. Note that, although the listener pr) 128.41 289.62 T
(esents all objects in literal-) 357.3 289.62 T
(constant syntax, not everything displayed by the listener is a literal constant.) 99.65 275.62 T
-0.22 (The squar) 126.65 261.62 P
-0.22 (e-bracket syntax is an abbr) 174.7 261.62 P
-0.22 (eviation for calling the generic function) 303.05 261.62 P
4 10 Q
(element) 99.65 247.62 T
1 11 Q
(. The following examples ar) 141.65 247.62 T
(e equivalent:) 276.33 247.62 T
6 9 Q
(?) 99.65 226.95 T
4 F
(*greeting*[0];) 110.45 226.95 T
6 F
(\325j\325) 99.65 215.95 T
(?) 99.65 196.95 T
4 F
(element\050*greeting*, 0\051;) 110.45 196.95 T
6 F
(\325j\325) 99.65 185.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 153
%%Page: "140" 154
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(140) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 141.95 513.65 672.95 R
V
1 11 Q
0 X
(Y) 99.65 665.62 T
(ou can use either the squar) 105.97 665.62 T
(e-bracket syntax or the) 236.15 665.62 T
4 10 Q
(element) 349.41 665.62 T
1 11 Q
( generic function on) 391.41 665.62 T
(any collection. Y) 99.65 651.62 T
(ou must be car) 178.88 651.62 T
(eful if you use) 250.25 651.62 T
4 10 Q
(element) 322.2 651.62 T
1 11 Q
( as a local variable, how-) 364.2 651.62 T
(ever) 99.65 637.62 T
(, because doing so will interfer) 119.93 637.62 T
(e with its use as a generic function, including) 268.51 637.62 T
(the use of the squar) 99.65 623.62 T
(e-bracket abbr) 194.5 623.62 T
(eviation.) 263.78 623.62 T
3 13 Q
(11.2.2  Creation of vector) 99.65 594.29 T
(s and access to elements) 226.29 594.29 T
1 11 Q
(Ther) 99.65 574.62 T
(e ar) 122.21 574.62 T
(e several ways to cr) 139.88 574.62 T
(eate collections. One way is to cr) 234.68 574.62 T
(eate a collection by) 392.46 574.62 T
(using) 99.65 560.62 T
4 10 Q
(make) 129.41 560.62 T
1 11 Q
(. For example, her) 153.41 560.62 T
(e we cr) 240.69 560.62 T
(eate a vector that contains two elements:) 274.93 560.62 T
6 9 Q
(?) 99.65 539.95 T
4 F
(define variable *my-vector* = make\050<vector>, size: 2\051;) 110.45 539.95 T
1 11 Q
(W) 99.65 519.62 T
(e can change the \336rst and second elements:) 109.64 519.62 T
6 9 Q
(?) 99.65 498.95 T
4 F
(*my-vector*[0] := 5;) 110.45 498.95 T
6 F
(5) 99.65 487.95 T
(?) 99.65 468.95 T
4 F
(*my-vector*[1] := 3;) 110.45 468.95 T
6 F
(3) 99.65 457.95 T
(?) 99.65 438.95 T
4 F
(*my-vector*;) 110.45 438.95 T
6 F
(#[5, 3]) 99.65 427.95 T
1 11 Q
(If you want to cr) 99.65 407.62 T
(eate a sequence of a certain size, with every element having the) 180.06 407.62 T
-0.27 (same value, you can specify a) 99.65 393.62 P
4 10 Q
-0.58 (fill) 244.71 393.62 P
1 11 Q
-0.27 ( keywor) 268.71 393.62 P
-0.27 (d ar) 308.03 393.62 P
-0.27 (gument to) 326.88 393.62 P
4 10 Q
-0.58 (make) 379.16 393.62 P
1 11 Q
-0.27 (. The default value) 403.16 393.62 P
(for the) 99.65 379.62 T
4 10 Q
(fill) 134.42 379.62 T
1 11 Q
( keywor) 158.42 379.62 T
(d parameter is) 198 379.62 T
4 10 Q
(#f) 270.97 379.62 T
1 11 Q
(. Thus, if you had r) 282.97 379.62 T
(ead an element of) 375.05 379.62 T
4 10 Q
(*my-) 463.82 379.62 T
(vector*) 99.65 365.62 T
1 11 Q
( befor) 141.65 365.62 T
(e you wr) 169.57 365.62 T
(ote numbers into it, you would have r) 212.41 365.62 T
(eceived) 396.39 365.62 T
4 10 Q
(#f) 435.96 365.62 T
1 11 Q
(.) 447.96 365.62 T
-0.22 (W) 126.65 351.62 P
-0.22 (e can cr) 136.64 351.62 P
-0.22 (eate and initialize a vector to dif) 172.79 351.62 P
-0.22 (fer) 327.29 351.62 P
-0.22 (ent values all at once by using a) 340.37 351.62 P
-0.23 (built-in constr) 99.65 337.62 P
-0.23 (uctor) 167.94 337.62 P
-0.23 (. A) 192.58 337.62 P
2 F
-0.23 (constructor) 208.93 337.62 P
1 F
-0.23 ( is a function that cr) 265.14 337.62 P
-0.23 (eates an instance; using it is) 360 337.62 P
-0.08 (a shorthand for calling) 99.65 323.62 P
4 10 Q
-0.17 (make) 212.39 323.62 P
1 11 Q
-0.08 (. Her) 236.39 323.62 P
-0.08 (e, we use the) 260.38 323.62 P
4 10 Q
-0.17 (vector) 325.37 323.62 P
1 11 Q
-0.08 ( constr) 361.37 323.62 P
-0.08 (uctor function to cr) 393.84 323.62 P
-0.08 (e-) 486.72 323.62 P
(ate a vector and to initialize it with data.) 99.65 309.62 T
6 9 Q
(?) 99.65 288.95 T
4 F
( define variable *my-vector* = vector\0505, 3\051;) 105.05 288.95 T
6 F
(?) 99.65 269.95 T
4 F
( *my-vector*;) 105.05 269.95 T
6 F
(#[5, 3]) 99.65 258.95 T
1 11 Q
(As we saw in Section 1) 99.65 238.62 T
(1.2.1, certain collections have a literal syntax that enables) 210.02 238.62 T
(you to specify a particular data str) 99.65 224.62 T
(uctur) 266.02 224.62 T
(e as part of the pr) 291.91 224.62 T
(ogram:) 376.82 224.62 T
6 9 Q
(?) 99.65 203.95 T
4 F
(define variable *my-vector* = #[5, 3];) 110.45 203.95 T
6 F
(?) 99.65 184.95 T
4 F
(*my-vector*;) 110.45 184.95 T
6 F
(#[5, 3]) 99.65 173.95 T
1 11 Q
(Figur) 99.65 153.62 T
(e 1) 125.86 153.62 T
(1.2 shows how you can pictur) 138.77 153.62 T
(e the vector that we just cr) 283.37 153.62 T
(eated.) 410.71 153.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 154
%%Page: "141" 155
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.2 Basic use of collections) 402.09 702.62 T
2 F
(141) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Y) 99.65 580.2 T
(ou might think that) 105.97 580.2 T
4 10 Q
(*my-vector*) 203.41 580.2 T
1 11 Q
( is a dir) 269.41 580.2 T
(ect instance of) 305.1 580.2 T
4 10 Q
(<vector>) 376.66 580.2 T
1 11 Q
(, but it is not:) 424.66 580.2 T
(The) 99.65 566.2 T
4 10 Q
(<vector>) 120.81 566.2 T
1 11 Q
( class is abstract, but instantiable. When you use the) 168.81 566.2 T
4 10 Q
(vector) 423.29 566.2 T
1 11 Q
( func-) 459.29 566.2 T
(tion, or use) 99.65 552.2 T
4 10 Q
(make) 156.76 552.2 T
1 11 Q
( with) 180.76 552.2 T
4 10 Q
(<vector>) 208.62 552.2 T
1 11 Q
(, the r) 256.62 552.2 T
(esult is a general instance of) 284.28 552.2 T
4 10 Q
(<simple-) 423.17 552.2 T
(object-vector>) 99.65 538.2 T
1 11 Q
(. Y) 183.65 538.2 T
(ou specify the size of a) 195.47 538.2 T
4 10 Q
(<simple-object-vector>) 308.08 538.2 T
1 11 Q
( when you) 440.08 538.2 T
(cr) 99.65 524.2 T
(eate one, and you cannot change that size later) 108.68 524.2 T
(. If you need a vector that can) 334.26 524.2 T
-0.43 (change size, use the) 99.65 510.2 P
4 10 Q
-0.93 (<stretchy-vector>) 196.72 510.2 P
1 11 Q
-0.43 ( class. See Section 16.1.1, page 246, for an) 298.72 510.2 P
(example that uses str) 99.65 496.2 T
(etchy vectors.) 201.84 496.2 T
3 13 Q
(11.2.3  Creation of lists and access to elements) 99.65 464.87 T
1 11 Q
(Lists ar) 99.65 445.2 T
(e similar in purpose to vectors: Each one can stor) 134.88 445.2 T
(e an or) 372.15 445.2 T
(der) 404.98 445.2 T
(ed sequence of) 421.11 445.2 T
(objects. Lists dif) 99.65 431.2 T
(fer fr) 177.19 431.2 T
(om vectors in that it is easy to add and r) 201.02 431.2 T
(emove elements) 395.39 431.2 T
(fr) 99.65 417.2 T
(om lists, especially at the fr) 107.46 417.2 T
(ont. In general, if the number of elements in a) 239.06 417.2 T
(sequence will r) 99.65 403.2 T
(emain constant, lists ar) 172.62 403.2 T
(e less ef) 283.7 403.2 T
(\336cient than vectors ar) 321 403.2 T
(e.) 425.75 403.2 T
-0.31 (Each element of a list is stor) 126.65 389.2 P
-0.31 (ed in a) 259.57 389.2 P
2 F
-0.31 (pair) 293.98 389.2 P
1 F
-0.31 (. A pair has two parts \321 a head and a) 313.33 389.2 P
-0.19 (tail. T) 99.65 375.2 P
-0.19 (ypically) 126.2 375.2 P
-0.19 (, the head of a pair r) 163.81 375.2 P
-0.19 (efers to an element, and the tail r) 260.06 375.2 P
-0.19 (efers to the pair) 417.68 375.2 P
(that holds the next element of the list. Normally) 99.65 361.2 T
(, the \336nal tail of the list is the) 330.95 361.2 T
(empty list, r) 99.65 347.2 T
(epr) 157.99 347.2 T
(esented by) 174.02 347.2 T
4 10 Q
(#\050\051) 228.9 347.2 T
1 11 Q
(. Elements of lists can be any kind of object, includ-) 246.9 347.2 T
(ing, of course, lists.) 99.65 333.2 T
(The) 126.65 319.2 T
4 10 Q
(list) 147.81 319.2 T
1 11 Q
( constr) 171.81 319.2 T
(uctor function cr) 204.36 319.2 T
(eates a list whose elements ar) 285.12 319.2 T
(e the ar) 427.85 319.2 T
(gu-) 463.52 319.2 T
(ments pr) 99.65 305.2 T
(ovided:) 142.79 305.2 T
6 9 Q
(?) 99.65 284.53 T
4 F
( list\0504, 5, 6\051;) 105.05 284.53 T
6 F
(#\0504, 5, 6\051) 99.65 273.53 T
1 11 Q
(Figur) 99.65 253.2 T
(e 1) 125.86 253.2 T
(1.3 is a diagram of the list that we just cr) 138.77 253.2 T
(eated.) 334.07 253.2 T
(W) 126.65 239.2 T
(e can cr) 136.64 239.2 T
(eate a similar list by using the) 173.22 239.2 T
4 10 Q
(pair) 320.55 239.2 T
1 11 Q
( function, which cr) 344.55 239.2 T
(eates one) 435.42 239.2 T
(pair of the list at a time:) 99.65 225.2 T
6 9 Q
(?) 99.65 204.53 T
4 F
(pair\0504, pair\0505, pair\0506, #\050\051\051\051\051;) 110.45 204.53 T
6 F
(#\0504, 5, 6\051) 99.65 193.53 T
1 11 Q
-0.18 (As you can see, using) 99.65 173.2 P
4 10 Q
-0.4 (list) 206.22 173.2 P
1 11 Q
-0.18 ( instead of) 230.22 173.2 P
4 10 Q
-0.4 (pair) 282.94 173.2 P
1 11 Q
-0.18 (, in this case, is much clear) 306.13 173.2 P
-0.18 (er) 433.32 173.2 P
-0.18 (. Note that) 442.11 173.2 P
(Dylan pr) 99.65 159.2 T
(ovides functions called) 142.89 159.2 T
4 10 Q
(head) 257.43 159.2 T
1 11 Q
( and) 281.43 159.2 T
4 10 Q
(tail) 305.55 159.2 T
1 11 Q
(, which operate on lists:) 329.55 159.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 599.53 495.65 607.52 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.2) 188.12 610.86 T
8 F
(Diag) 246.48 610.86 T
(r) 266.94 610.86 T
(am of the v) 270.17 610.86 T
(ector) 319.39 610.86 T
4 F
(#[5, 3]) 344.4 610.86 T
8 F
(.) 386.4 610.86 T
0 0 0 1 0 0 0 K
99.65 623.52 495.65 672.95 C
254.15 627.52 341.15 670.95 C
0 264 387 339 417 75 30 260.15 635.67 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-2 .eps)%%CreationDate: (6/5/96) (10:42 AM)%%BoundingBox: 264 387 339 417%%HiResBoundingBox: 265.0833 387.75 338.3333 416.9167%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396 305.5 396%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 209.5 468 4 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 R0 G800 Ar0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D301.6667 388 m301.6667 416.6667 L265.3333 416.6667 L265.3333 388 L301.6667 388 Ls338.0833 388 m338.0833 416.6667 L301.75 416.6667 L301.75 388 L338.0833 388 Ls0 To1 0 0 1 284 400.5 0 TpTP-2.6993 0 Td0 Tr0 O0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(5) Tx (\r) TX TO0 To1 0 0 1 320 400.5 0 TpTP-2.6993 0 Td0 Tr(3) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 623.52 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 155
%%Page: "142" 156
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(142) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 540.67 T
4 F
(head\050#\0504, 5, 6\051\051;) 110.45 540.67 T
6 F
(4) 99.65 529.67 T
(?) 99.65 510.67 T
4 F
(tail\050#\0504, 5, 6\051\051;) 110.45 510.67 T
6 F
(#\0505, 6\051) 99.65 499.67 T
(?) 99.65 480.67 T
4 F
( tail\050tail\050#\0504, 5, 6\051\051\051;) 105.05 480.67 T
6 F
(#\0506\051) 99.65 469.67 T
1 11 Q
(A r) 99.65 443.34 T
(efer) 115.1 443.34 T
(ence to the \336rst pair of a list is exactly the same as a r) 133.45 443.34 T
(efer) 389.66 443.34 T
(ence to the entir) 408.01 443.34 T
(e) 485.54 443.34 T
(list.) 99.65 429.34 T
-0.22 (W) 126.65 415.34 P
-0.22 (e use) 136.64 415.34 P
4 10 Q
-0.48 (head) 163.53 415.34 P
1 11 Q
-0.22 ( and) 187.53 415.34 P
4 10 Q
-0.48 (tail) 211.22 415.34 P
1 11 Q
-0.22 ( when we de\336ne a method for copying lists in Section) 235.22 415.34 P
(1) 99.65 401.34 T
(1.3.3. W) 104.54 401.34 T
(e use) 142.03 401.34 T
4 10 Q
(pair) 169.37 401.34 T
1 11 Q
( in a method that copies lists r) 193.37 401.34 T
(ecursively in Section 1) 338.59 401.34 T
(1.3.6.) 446.26 401.34 T
3 15 Q
(11.3  Iteration o) 99.65 361.68 T
(ver a sequence) 189.66 361.68 T
1 11 Q
(In the examples in Sections 1) 99.65 341.34 T
(1.3.1 thr) 238.95 341.34 T
(ough 1) 277.84 341.34 T
(1.3.9, we show how to pr) 310.64 341.34 T
(ocess each) 431.76 341.34 T
(element of a sequence using dif) 99.65 327.34 T
(fer) 252.23 327.34 T
(ent techniques.) 265.31 327.34 T
3 13 Q
(11.3.1  Building our o) 99.65 296.01 T
(wn) 207.33 296.01 T
4 12 Q
(copy-sequence) 225.1 296.01 T
1 11 Q
-0.12 (How would we write our own) 99.65 276.34 P
4 10 Q
-0.27 (copy-sequence) 250.05 276.34 P
1 11 Q
-0.12 ( function, if Dylan did not alr) 328.05 276.34 P
-0.12 (eady) 469.42 276.34 P
(pr) 99.65 262.34 T
(ovide one? Ther) 110.41 262.34 T
(e ar) 188.44 262.34 T
(e many possible appr) 206.11 262.34 T
(oaches. One way would be to use a) 309.92 262.34 T
4 10 Q
-0.29 (while) 99.65 248.34 P
1 11 Q
-0.13 ( loop. A) 129.65 248.34 P
4 10 Q
-0.29 (while) 170.63 248.34 P
1 11 Q
-0.13 ( loop has a) 200.63 248.34 P
2 F
-0.13 (test expression) 254.99 248.34 P
1 F
-0.13 ( \050surr) 329.09 248.34 P
-0.13 (ounded by par) 355.16 248.34 P
-0.13 (entheses\051 and) 426.6 248.34 P
(a) 99.65 234.34 T
2 F
(body) 107.9 234.34 T
1 F
(. As long as the value of the test expr) 132.35 234.34 T
(ession is tr) 310.77 234.34 T
(ue, the body will be exe-) 362.18 234.34 T
(cuted r) 99.65 220.34 T
(epeatedly) 133.64 220.34 T
(.) 179.96 220.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 569.67 495.65 577.67 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.3) 186.5 581 T
8 F
(Diag) 244.86 581 T
(r) 265.32 581 T
(am of the list) 268.55 581 T
4 F
(#\0504, 5, 6\051) 328.02 581 T
8 F
(.) 388.02 581 T
0 0 0 1 0 0 0 K
99.65 593.67 495.65 672.95 C
159.15 597.67 436.15 670.95 C
0 180 454 445 516 265 62 165.15 602.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-3 .eps)%%CreationDate: (6/5/96) (10:42 AM)%%BoundingBox: 180 454 445 516%%HiResBoundingBox: 180.75 454.1667 444.25 516.1237%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 306 396.5 306 396.5%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 102 672.5 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au1 Ap0 R0 G800 Ar0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D221.6667 474.5 m221.6667 502.5 L186 502.5 L186 474.5 L221.6667 474.5 Ls257.5 474.5 m257.5 502.5 L221.8334 502.5 L221.8334 474.5 L257.5 474.5 LsU312.0833 474.5 m312.0833 502.5 L276.4167 502.5 L276.4167 474.5 L312.0833 474.5 Ls347.6667 474.5 m347.6667 502.5 L312 502.5 L312 474.5 L347.6667 474.5 Ls402.5 474.5 m402.5 502.5 L366.8333 502.5 L366.8333 474.5 L402.5 474.5 Ls438.0833 474.5 m438.0833 502.5 L402.4166 502.5 L402.4166 474.5 L438.0833 474.5 Ls0 To1 0 0 1 204.25 508.9167 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(Head) Tx (\r) TX TO0 To1 0 0 1 240 508.9167 0 TpTP-10.7974 0 Td0 Tr(Tail) Tx (\r) TX TO0 To1 0 0 1 293.75 508.9167 0 TpTP-10.7974 0 Td0 Tr(Head) Tx (\r) TX TO0 To1 0 0 1 329.5 508.9167 0 TpTP-10.7974 0 Td0 Tr(Tail) Tx (\r) TX TO0 To1 0 0 1 383.25 508.9167 0 TpTP-10.7974 0 Td0 Tr(Head) Tx (\r) TX TO0 To1 0 0 1 419 508.9167 0 TpTP-10.7974 0 Td0 Tr(Tail) Tx (\r) TX TO0 To1 0 0 1 385 486.9167 0 TpTP-2.6993 0 Td0 Tr(6) Tx (\r) TX TO0 To1 0 0 1 420.5 486.9167 0 TpTP-8.098 0 Td0 Tr(#\(\)) Tx (\r) TX TO0 To1 0 0 1 294.75 486.9167 0 TpTP-2.6993 0 Td0 Tr(5) Tx (\r) TX TO0 To1 0 0 1 204.5 486.9167 0 TpTP-2.6993 0 Td0 Tr(4) Tx (\r) TX TO0 To1 0 0 1 222.25 456.4167 0 TpTP-10.7974 0 Td0 Tr(Pair) Tx (\r) TX TO0 To1 0 0 1 312.25 456.4167 0 TpTP-10.7974 0 Td0 Tr(Pair) Tx (\r) TX TO0 To1 0 0 1 402.25 456.4167 0 TpTP-10.7974 0 Td0 Tr(Pair) Tx (\r) TX TO0 Ap0 R0 G0.5 w444 476.1667 m444 466.4167 l362 466.4167 l362 476.1667 lS353.5 476.1667 m353.5 466.4167 l271.5 466.4167 l271.5 476.1667 lS263 476.1667 m263 466.4167 l181 466.4167 l181 476.1667 lSu0.65 w239.6667 488.5 m267.75 488.5 lS0 O0 g1 w267.2043 486.2621 m275.6601 488.5275 l267.2043 490.7934 l267.2043 486.2621 lfUu0 R0 G0.65 w329.9167 488.5 m358 488.5 lS0 O0 g1 w357.4543 486.2621 m365.9101 488.5275 l357.4543 490.7934 l357.4543 486.2621 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 593.67 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 156
%%Page: "143" 157
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 394.35 702.62 T
2 F
(143) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method my-copy-sequence) 99.65 666.95 T
(\050old-sequence :: <sequence>\051 => \050new-sequence :: <sequence>\051) 121.25 655.95 T
(let seq-size = old-sequence.size;) 110.45 644.95 T
(let new-sequence = make\050type-for-copy\050old-sequence\051, size: seq-size\051;) 110.45 633.95 T
(let index = 0;) 110.45 622.95 T
(while \050index < seq-size\051) 110.45 611.95 T
(new-sequence[index] := old-sequence[index];) 121.25 600.95 T
(index := index + 1;) 121.25 589.95 T
(end while;) 110.45 578.95 T
(new-sequence;) 110.45 567.95 T
(end method my-copy-sequence;) 99.65 556.95 T
1 11 Q
(The method) 99.65 536.62 T
4 10 Q
(my-copy-sequence) 161.26 536.62 T
1 11 Q
( makes a new sequence of the same size as its) 257.26 536.62 T
(ar) 99.65 522.62 T
(gument, then iterates over all the elements of the ar) 109.29 522.62 T
(gument, storing each ele-) 358.53 522.62 T
-0.21 (ment of the sequence into the appr) 99.65 508.62 P
-0.21 (opriate element of the new sequence. The) 266.64 508.62 P
4 10 Q
-0.46 (size) 469.11 508.62 P
1 11 Q
(generic function r) 99.65 494.62 T
(eturns the number of elements in a collection. In this example,) 185.56 494.62 T
(the) 99.65 480.62 T
4 10 Q
(while) 117.65 480.62 T
1 11 Q
( loop terminates when) 147.65 480.62 T
4 10 Q
(index) 259.26 480.62 T
1 11 Q
( r) 289.26 480.62 T
(eaches the size of the sequence.) 296.16 480.62 T
(The) 126.65 466.62 T
4 10 Q
(type-for-copy) 147.81 466.62 T
1 11 Q
( generic function r) 225.81 466.62 T
(eturns an appr) 314.47 466.62 T
(opriate class for) 385.64 466.62 T
4 10 Q
(make) 465.34 466.62 T
1 11 Q
(,) 489.34 466.62 T
(given an object that you wish to copy) 99.65 452.62 T
(. For most collections,) 279.66 452.62 T
4 10 Q
(type-for-copy) 387.9 452.62 T
1 11 Q
( just) 465.9 452.62 T
(r) 99.65 438.62 T
(eturns the class of the collection pr) 103.79 438.62 T
(ovided.) 271.69 438.62 T
3 13 Q
(11.3.2  Iteration with) 99.65 407.29 T
4 12 Q
(for) 204.52 407.29 T
1 11 Q
(W) 99.65 387.62 T
(e can use the) 109.64 387.62 T
4 10 Q
(for) 174.51 387.62 T
1 11 Q
( to expr) 192.51 387.62 T
(ess concisely ia loop that incr) 229.31 387.62 T
(ements a variable until a) 370.52 387.62 T
(limit is r) 99.65 373.62 T
(eached.) 140.06 373.62 T
4 9 Q
(define method my-copy-sequence) 99.65 352.95 T
(\050old-sequence :: <sequence>\051 => \050new-sequence :: <sequence>\051) 121.25 341.95 T
(let new-sequence) 110.45 330.95 T
(= make\050type-for-copy\050old-sequence\051, size: old-sequence.size\051;) 121.25 319.95 T
(for \050index from 0 below old-sequence.size\051) 110.45 308.95 T
5 F
(// Iteration clause) 407.45 308.95 T
4 F
(new-sequence[index] := old-sequence[index];) 121.25 297.95 T
5 F
(// Body) 407.45 297.95 T
4 F
(end for;) 110.45 286.95 T
5 F
(// End of body) 407.45 286.95 T
4 F
(new-sequence;) 110.45 275.95 T
(end method my-copy-sequence;) 99.65 264.95 T
1 11 Q
(In the pr) 99.65 244.62 T
(eceding example, the body is executed) 141.27 244.62 T
4 10 Q
(old-sequence.size) 330.98 244.62 T
1 11 Q
( times, with) 432.98 244.62 T
4 10 Q
(index) 99.65 230.62 T
1 11 Q
( bound to zer) 129.65 230.62 T
(o \336rst, then r) 194.25 230.62 T
(ebound to one mor) 256.31 230.62 T
(e than the pr) 348.81 230.62 T
(evious value of) 410.24 230.62 T
4 10 Q
(index) 99.65 216.62 T
1 11 Q
( each time thr) 129.65 216.62 T
(ough the loop. The variable) 195.86 216.62 T
4 10 Q
(index) 332.32 216.62 T
1 11 Q
( is de\336ned only within the) 362.32 216.62 T
-0.22 (body of the) 99.65 202.62 P
4 10 Q
-0.48 (for) 157.09 202.62 P
1 11 Q
-0.22 ( iteration constr) 175.09 202.62 P
-0.22 (uct. The body of the) 251.04 202.62 P
4 10 Q
-0.48 (for) 349.8 202.62 P
1 11 Q
-0.22 ( iteration constr) 367.8 202.62 P
-0.22 (uct begins) 443.75 202.62 P
(after the iteration clause\050s\051, and \336nishes with the matching) 99.65 188.62 T
4 10 Q
(end) 387.31 188.62 T
1 11 Q
(. For the) 405.31 188.62 T
4 10 Q
(while) 448.03 188.62 T
1 11 Q
-0.06 (iteration constr) 99.65 174.62 P
-0.06 (uct shown in Section 1) 173.24 174.62 P
-0.06 (1.3.1, the body starts after the pr) 281.39 174.62 P
-0.06 (edicate and) 437.21 174.62 P
(\336nishes with the matching) 99.65 160.62 T
4 10 Q
(end) 231.33 160.62 T
1 11 Q
(.) 249.33 160.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 157
%%Page: "144" 158
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(144) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 126.65 665.62 T
4 10 Q
(for) 147.81 665.62 T
1 11 Q
( loop can have many dif) 165.81 665.62 T
(fer) 282.68 665.62 T
(ent kinds of iteration clauses. In this sec-) 295.76 665.62 T
-0.14 (tion, we have shown a simple iteration over a series of numbers. In Section 1) 99.65 651.62 P
-0.14 (1.3.3,) 468.29 651.62 P
(we use clauses that bind variables to initial values for the \336rst time thr) 99.65 637.62 T
(ough a) 440.47 637.62 T
(loop, and use expr) 99.65 623.62 T
(essions to r) 189.36 623.62 T
(ebind the variables for the second and subsequent) 243.47 623.62 T
(times thr) 99.65 609.62 T
(ough the loop. W) 142.97 609.62 T
(e also demonstrate a clause that permits iteration to) 226.19 609.62 T
-0.23 (continue until an expr) 99.65 595.62 P
-0.23 (ession is tr) 206.21 595.62 P
-0.23 (ue, both in Section 1) 257.16 595.62 P
-0.23 (1.3.3 and Section 16.1.3, page) 353.57 595.62 P
(248.) 99.65 581.62 T
(The) 126.65 567.62 T
4 10 Q
(for) 147.81 567.62 T
1 11 Q
( loop has a simple type of iteration clause that we can use to iterate) 165.81 567.62 T
(over any Dylan collection. The airport example in Section 17.2.2, page 257, dem-) 99.65 553.62 T
(onstrates iteration over vectors using this kind of iteration clause.) 99.65 539.62 T
3 13 Q
(11.3.3  Lists and ef\336cienc) 99.65 505.29 T
(y) 228.14 505.29 T
1 11 Q
(The) 99.65 479.62 T
4 10 Q
(my-copy-sequence) 120.81 479.62 T
1 11 Q
( method in Section 1) 216.81 479.62 T
(1.3.2 works ef) 315.13 479.62 T
(\336ciently for vectors. It) 381.67 479.62 T
(does so because Dylan can stor) 99.65 465.62 T
(e and r) 249.95 465.62 T
(etrieve arbitrary elements of vectors, and) 283.49 465.62 T
(can determine the size of vectors in constant time.) 99.65 451.62 T
(Lists ar) 126.65 437.62 T
(e quite a dif) 161.88 437.62 T
(fer) 219.14 437.62 T
(ent data str) 232.21 437.62 T
(uctur) 286.79 437.62 T
(e fr) 312.67 437.62 T
(om vectors. Accessing elements) 328.5 437.62 T
(and determining the size of a list takes linear time. Thus, you can access the thou-) 99.65 423.62 T
-0.1 (sandth element of a vector or string in the same amount of time as you can access) 99.65 409.62 P
-0.11 (the \336rst element of a vector or string; when you uses lists, however) 99.65 395.62 P
-0.11 (, it takes about) 422.61 395.62 P
(1000 times longer to access the thousandth element than to access the \336rst ele-) 99.65 381.62 T
-0.2 (ment. The dif) 99.65 367.62 P
-0.2 (fer) 164.27 367.62 P
-0.2 (ence in access times occurs because Dylan must walk over almost) 177.35 367.62 P
-0.33 (1000 pairs to get to the thousandth pair) 99.65 353.62 P
-0.33 (, and thus get to the thousandth element of) 287.08 353.62 P
(the list. Although the method de\336ned in Section 1) 99.65 339.62 T
(1.3.2 can copy lists, it will be) 340.82 339.62 T
(excessively slow) 99.65 325.62 T
(, especially for long lists.) 178.86 325.62 T
-0.33 (W) 126.65 311.62 P
-0.33 (e would like to pr) 136.64 311.62 P
-0.33 (ovide a special method for copying lists that uses a mor) 221.46 311.62 P
-0.33 (e) 487.96 311.62 P
(ef) 99.65 297.62 T
(\336cient algorithm. In particular) 108.38 297.62 T
(, we want to walk over the pr) 254.55 297.62 T
(ovided list element) 397.09 297.62 T
(by element, without having to r) 99.65 283.62 T
(etrace over elements of the list that we have) 253.22 283.62 T
(alr) 99.65 269.62 T
(eady copied.) 112.5 269.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 158
%%Page: "145" 159
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 394.35 702.62 T
2 F
(145) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// Assumes that old-list is a proper list \050that is, it ends with #\050\051\051) 99.65 666.95 T
(// and is not circular) 99.65 655.95 T
4 F
(define method my-copy-sequence \050old-list :: <list>\051 => \050new-list :: <list>\051) 99.65 644.95 T
(let new-list = make\050<list>, size: old-list.size\051;) 110.45 633.95 T
(for \050old = old-list then old.tail,) 110.45 622.95 T
(new = new-list then new.tail,) 137.45 611.95 T
(until: empty?\050old\051\051) 137.45 600.95 T
(new.head := old.head;) 121.25 589.95 T
(end for;) 110.45 578.95 T
(new-list;) 110.45 567.95 T
(end method my-copy-sequence;) 99.65 556.95 T
1 11 Q
(First,) 99.65 536.62 T
4 10 Q
(my-copy-sequence) 127.06 536.62 T
1 11 Q
( makes a new list that is the same length as the old one.) 223.06 536.62 T
(Next, the) 99.65 522.62 T
4 10 Q
(for) 146.83 522.62 T
1 11 Q
( iterator is used to bind the variables) 164.83 522.62 T
4 10 Q
(old) 345.05 522.62 T
1 11 Q
( and) 363.05 522.62 T
4 10 Q
(new) 387.17 522.62 T
1 11 Q
( to) 405.17 522.62 T
4 10 Q
(old-list) 420.27 522.62 T
1 11 Q
( and) 468.27 522.62 T
4 10 Q
(new-list) 99.65 508.62 T
1 11 Q
(, r) 147.65 508.62 T
(espectively) 157.29 508.62 T
(. Then, the) 210.36 508.62 T
4 10 Q
(for) 264.18 508.62 T
1 11 Q
( iterator executes the) 282.18 508.62 T
4 10 Q
(until:) 385.53 508.62 T
1 11 Q
( expr) 421.53 508.62 T
(ession to) 445.98 508.62 T
(determine whether it is time to terminate the loop. If the) 99.65 494.62 T
4 10 Q
(until:) 375.46 494.62 T
1 11 Q
( expr) 411.46 494.62 T
(ession) 435.92 494.62 T
(r) 99.65 480.62 T
(eturns tr) 103.79 480.62 T
(ue, then the) 145.29 480.62 T
4 10 Q
(for) 205.1 480.62 T
1 11 Q
( loop terminates, and the newly cr) 223.1 480.62 T
(eated list is r) 388.79 480.62 T
(eturned) 450.05 480.62 T
(fr) 99.65 466.62 T
(om) 107.46 466.62 T
4 10 Q
(my-copy-sequence) 125.93 466.62 T
1 11 Q
(. Otherwise, the body of the) 221.93 466.62 T
4 10 Q
(for) 359.59 466.62 T
1 11 Q
( loop is executed \321 the) 377.59 466.62 T
(body stor) 99.65 452.62 T
(es the head of the \336rst pair in) 145.73 452.62 T
4 10 Q
(old) 290.24 452.62 T
1 11 Q
( into the head of the \336rst pair in) 308.24 452.62 T
4 10 Q
(new) 464.77 452.62 T
1 11 Q
(.) 481.76 452.62 T
-0.03 (The r) 99.65 438.62 P
-0.03 (esult of that action is that the \336rst element of) 124.93 438.62 P
4 10 Q
-0.07 (new) 343.61 438.62 P
1 11 Q
-0.03 ( is indentical to the \336rst ele-) 361.61 438.62 P
(ment of) 99.65 424.62 T
4 10 Q
(old) 139.79 424.62 T
1 11 Q
(. For this iteration, that action causes the \336rst element of) 157.79 424.62 T
4 10 Q
(new-list) 432.11 424.62 T
1 11 Q
( to) 480.11 424.62 T
(be identical to the \336rst element of) 99.65 410.62 T
4 10 Q
(old-list) 264.69 410.62 T
1 11 Q
(. In subsequent iterations, the body) 312.69 410.62 T
(will access elements 1 closer to the end of the list. It will do so because, after the) 99.65 396.62 T
(body is executed, the) 99.65 382.62 T
4 10 Q
(for) 204.75 382.62 T
1 11 Q
( iterator loops back to the iterator clauses, wher) 222.75 382.62 T
(e the) 452.91 382.62 T
4 10 Q
(then) 99.65 368.62 T
1 11 Q
( clauses bind) 123.65 368.62 T
4 10 Q
(old) 189.12 368.62 T
1 11 Q
( to all but the \336rst pair of) 207.12 368.62 T
4 10 Q
(old) 330.75 368.62 T
1 11 Q
(, and bind) 348.75 368.62 T
4 10 Q
(new) 400.78 368.62 T
1 11 Q
( to all but the) 418.78 368.62 T
-0.32 (\336rst pair of) 99.65 354.62 P
4 10 Q
-0.7 (new) 155.52 354.62 P
1 11 Q
-0.32 (. The termination check occurs again, with the same consequences,) 172.5 354.62 P
(depending on the value of the) 99.65 340.62 T
4 10 Q
(until:) 248.27 340.62 T
1 11 Q
( expr) 284.27 340.62 T
(ession. Iteration then continues just) 308.72 340.62 T
(like the second time thr) 99.65 326.62 T
(ough the loop until the end of) 213.54 326.62 T
4 10 Q
(old) 361.37 326.62 T
1 11 Q
( is r) 379.37 326.62 T
(eached.) 396.88 326.62 T
(In this method, we never have to sear) 126.65 312.62 T
(ch for the curr) 308.81 312.62 T
(ent spot of the old list) 377.62 312.62 T
(that we ar) 99.65 298.62 T
(e copying, or to sear) 148.31 298.62 T
(ch for the end of the new list that we ar) 246.19 298.62 T
(e building.) 436.23 298.62 T
-0.14 (The variables) 99.65 284.62 P
4 10 Q
-0.31 (old) 167.26 284.62 P
1 11 Q
-0.14 ( and) 185.26 284.62 P
4 10 Q
-0.31 (new) 209.1 284.62 P
1 11 Q
-0.14 ( track exactly which pairs in the iteration to access, and) 227.1 284.62 P
(that tracking saves a considerable amount of time for lar) 99.65 270.62 T
(ge lists. When the itera-) 373.12 270.62 T
(tion is \336nished,) 99.65 256.62 T
4 10 Q
(my-copy-sequence) 177.02 256.62 T
1 11 Q
( r) 273.02 256.62 T
(eturns the new list.) 279.92 256.62 T
3 13 Q
(11.3.4  P) 99.65 225.29 T
(ol) 141.91 225.29 T
(ymorphism) 151.24 225.29 T
1 11 Q
(An important advantage of pr) 99.65 205.62 T
(ogramming in Dylan is that we can pr) 245.79 205.62 T
(ovide a gen-) 430.42 205.62 T
-0.12 (eral method for copying a sequence \050as shown in Section 1) 99.65 191.62 P
-0.12 (1.3.2\051, and also can pr) 381.49 191.62 P
-0.12 (o-) 485.98 191.62 P
-0.04 (vide special copying methods for particular subclasses of sequences \050as shown in) 99.65 177.62 P
(Section 1) 99.65 163.62 T
(1.3.3\051. Method dispatch takes car) 142.42 163.62 T
(e of picking the best method for the) 301.45 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 159
%%Page: "146" 160
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(146) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(ar) 99.65 665.62 T
(gument. Callers of) 109.29 665.62 T
4 10 Q
(my-copy-sequence) 201.66 665.62 T
1 11 Q
( do not need to worry about any perfor-) 297.66 665.62 T
(mance optimizations that we have installed for lists. They simply use) 99.65 651.62 T
4 10 Q
(my-copy-) 438.17 651.62 T
-0.52 (sequence) 99.65 637.62 P
1 11 Q
-0.24 ( for lists, just as they would for any other sequence. This polymorphism) 147.65 637.62 P
(can be useful for keeping interfaces between components of a pr) 99.65 623.62 T
(ogram simple) 411.65 623.62 T
(and extensible.) 99.65 609.62 T
3 13 Q
(11.3.5  Mapping functions) 99.65 578.29 T
1 11 Q
(Iterating over all the elements of a collection is a common idiom, and Dylan pr) 99.65 558.62 T
(o-) 480.83 558.62 T
(vides several dif) 99.65 544.62 T
(fer) 179.07 544.62 T
(ent mapping functions that accomplish these kinds of itera-) 192.15 544.62 T
(tions in dif) 99.65 530.62 T
(fer) 152 530.62 T
(ent ways. In the following example, we r) 165.08 530.62 T
(ede\336ne the) 362.7 530.62 T
4 10 Q
(my-copy-) 419.04 530.62 T
(sequence) 99.65 516.62 T
1 11 Q
( method originally de\336ned in Section 1) 147.65 516.62 T
(1.3.3. Her) 335.79 516.62 T
(e, we use the) 381.86 516.62 T
4 10 Q
(do) 447.14 516.62 T
1 11 Q
( itera-) 459.14 516.62 T
(tion constr) 99.65 502.62 T
(uct, instead of a) 151.39 502.62 T
4 10 Q
(for) 230.76 502.62 T
1 11 Q
( loop.) 248.76 502.62 T
5 9 Q
(// Assumes that old-list is a proper list \050that is, it ends with #\050\051\051) 99.65 481.95 T
(// and is not circular) 99.65 470.95 T
4 F
(define method my-copy-sequence \050old-list :: <list>\051 => \050new-list :: <list>\051) 99.65 459.95 T
(let new-list = make\050<list>, size: old-list.size\051;) 110.45 448.95 T
5 F
(// Remember the pair of the copy that we are initializing) 110.45 437.95 T
4 F
(let current-pair = new-list;) 110.45 426.95 T
5 F
(// Iterate over all the elements of the existing list, making new pairs,) 121.25 415.95 T
(// and splicing them into the end of the copy that we are building) 121.25 404.95 T
4 F
(do\050method \050old-element\051) 110.45 393.95 T
(current-pair.head := old-element;) 137.45 382.95 T
(current-pair := current-pair.tail;) 137.45 371.95 T
(end method,) 126.65 360.95 T
(old-list\051;) 126.65 349.95 T
(new-list;) 110.45 338.95 T
(end method my-copy-sequence;) 99.65 327.95 T
1 11 Q
(The) 99.65 307.62 T
4 10 Q
(do) 120.81 307.62 T
1 11 Q
( mapping function takes a function and one or mor) 132.81 307.62 T
(e collections, and calls) 380.42 307.62 T
(the function on each element of each collection. The function should take one) 99.65 293.62 T
(ar) 99.65 279.62 T
(gument if you pr) 109.29 279.62 T
(ovide) 191.64 279.62 T
4 10 Q
(do) 221.8 279.62 T
1 11 Q
( with one collection, two ar) 233.8 279.62 T
(guments if you pr) 365.4 279.62 T
(ovide) 452.41 279.62 T
(two collections, and so on. The r) 99.65 265.62 T
(esult of calling the function is ignor) 255.98 265.62 T
(ed, and) 427.78 265.62 T
4 10 Q
(do) 466.64 265.62 T
1 11 Q
(itself r) 99.65 251.62 T
(eturns no meaningful value. The) 130.13 251.62 T
4 10 Q
(do) 291.27 251.62 T
1 11 Q
( function is useful only if the method) 303.27 251.62 T
(that you pr) 99.65 237.62 T
(ovide accomplishes a valuable side ef) 153.74 237.62 T
(fect. In the pr) 335.59 237.62 T
(eceding example,) 400.11 237.62 T
(the supplied method stor) 99.65 223.62 T
(es an element of the old list into the head of the curr) 222.17 223.62 T
(ent) 474.49 223.62 T
(pair of the new list, and moves to the next pair of the new list. Note that this) 99.65 209.62 T
(method is actually a closur) 99.65 195.62 T
(e, which closes over the) 229.87 195.62 T
4 10 Q
(current-pair) 347.48 195.62 T
1 11 Q
( local variable.) 419.48 195.62 T
(See Section 12.3.6, page 183, for mor) 99.65 181.62 T
(e information about closur) 274.46 181.62 T
(es.) 403.35 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 160
%%Page: "147" 161
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 394.35 702.62 T
2 F
(147) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(11.3.6  A recur) 99.65 664.29 T
(sive list copier) 172.4 664.29 T
1 11 Q
(In many situations, the most concise way to manipulate lists \050and other tr) 99.65 644.62 T
(eelike) 456.16 644.62 T
(str) 99.65 630.62 T
(uctur) 112.15 630.62 T
(es\051 is to use r) 138.04 630.62 T
(ecursion. In) 200.8 630.62 T
2 F
(recursion) 260.57 630.62 T
1 F
(, a function calls itself, dir) 307.61 630.62 T
(ectly or indi-) 432.24 630.62 T
(r) 99.65 616.62 T
(ectly) 103.79 616.62 T
(. In the following example, we r) 125.63 616.62 T
(ede\336ne the) 279.8 616.62 T
4 10 Q
(my-copy-sequence) 336.14 616.62 T
1 11 Q
( method for) 432.14 616.62 T
(lists to use r) 99.65 602.62 T
(ecursion instead of iteration.) 157.52 602.62 T
4 9 Q
(define method my-copy-sequence \050old-list :: <list>\051 => \050new-list :: <list>\051) 99.65 581.95 T
(if \050empty?\050old-list\051\051) 110.45 570.95 T
(#\050\051;) 121.25 559.95 T
(else) 110.45 548.95 T
(pair\050old-list.head, my-copy-sequence\050old-list.tail\051\051;) 121.25 537.95 T
(end if;) 110.45 526.95 T
(end method my-copy-sequence;) 99.65 515.95 T
1 11 Q
(Note that r) 99.65 495.62 T
(ecursion can be just as ef) 152.37 495.62 T
(\336cient as iteration. For example, consider the) 272.02 495.62 T
(function) 99.65 481.62 T
4 10 Q
(my-reverse) 143.18 481.62 T
1 11 Q
(, which cr) 203.18 481.62 T
(eates a new list with elements in the r) 250.52 481.62 T
(everse or) 432.55 481.62 T
(der) 476.48 481.62 T
(fr) 99.65 467.62 T
(om the list you supply) 107.46 467.62 T
(.) 215.46 467.62 T
4 9 Q
(define method my-reverse \050old-list :: <list>\051 => \050reversed-list :: <list>\051) 99.65 446.95 T
(local method rev \050old :: <list>, results :: <list>\051) 110.45 435.95 T
(if \050empty?\050old\051\051 results else rev\050old.tail, pair\050old.head, results\051\051 end;) 121.25 424.95 T
(end method;) 110.45 413.95 T
(rev\050old-list, #\050\051\051;) 110.45 402.95 T
(end method my-reverse;) 99.65 391.95 T
1 11 Q
(The) 99.65 371.62 T
4 10 Q
(local) 120.81 371.62 T
(method) 153.56 371.62 T
1 11 Q
( declaration inside the) 189.56 371.62 T
4 10 Q
(my-reverse) 299.89 371.62 T
1 11 Q
( method de\336nes a function) 359.89 371.62 T
(that is bound to the name) 99.65 357.62 T
4 10 Q
(rev) 226.66 357.62 T
1 11 Q
( only within a scope of the body of) 244.66 357.62 T
4 10 Q
(my-reverse) 415.56 357.62 T
1 11 Q
(.) 475.56 357.62 T
-0.13 (This declaration is dif) 99.65 343.62 P
-0.13 (fer) 204.38 343.62 P
-0.13 (ent fr) 217.46 343.62 P
-0.13 (om) 243.14 343.62 P
4 10 Q
-0.29 (define) 261.48 343.62 P
-0.29 (method) 300.1 343.62 P
1 11 Q
-0.13 (, which cr) 336.1 343.62 P
-0.13 (eates module bindings) 383.17 343.62 P
(that can be accessed outside the lexical scope of wher) 99.65 329.62 T
(e they ar) 357.83 329.62 T
(e de\336ned.) 399.62 329.62 T
(The local method) 126.65 315.62 T
4 10 Q
(rev) 213.8 315.62 T
1 11 Q
( calls itself as the last expr) 231.8 315.62 T
(ession in its body) 357.41 315.62 T
(. Thus, the) 440.62 315.62 T
4 10 Q
(rev) 99.65 301.62 T
1 11 Q
( method can be optimized by the Dylan compiler into code that is exactly as) 117.65 301.62 T
(ef) 99.65 287.62 T
(\336cient as if it was written with iteration.) 108.38 287.62 T
(Alternative ways of de\336ning the) 126.65 273.62 T
4 10 Q
(my-reverse) 286.68 273.62 T
1 11 Q
( function ar) 346.68 273.62 T
(e discussed in Sec-) 402.6 273.62 T
(tion 1) 99.65 259.62 T
(1.4.1.) 126.49 259.62 T
3 13 Q
(11.3.7  Using) 99.65 228.29 T
4 12 Q
(map) 167.79 228.29 T
3 13 Q
( and) 189.39 228.29 T
4 12 Q
(curry) 214.28 228.29 T
1 11 Q
(Per) 99.65 208.62 T
(haps the easiest way to implement our simple sequence copier is to use the) 115.71 208.62 T
4 10 Q
(map) 99.65 194.62 T
1 11 Q
( function. The) 117.65 194.62 T
4 10 Q
(map) 187.84 194.62 T
1 11 Q
( function takes the same ar) 205.84 194.62 T
(guments as does) 335.55 194.62 T
4 10 Q
(do) 419.01 194.62 T
1 11 Q
(. However) 431.01 194.62 T
(,) 481.12 194.62 T
-0.01 (instead of ignoring the r) 99.65 180.62 P
-0.01 (eturn value of the function that you pr) 216.83 180.62 P
-0.01 (ovide,) 403.37 180.62 P
4 10 Q
-0.01 (map) 436.28 180.62 P
1 11 Q
-0.01 ( gathers) 454.28 180.62 P
(into a new collection all the r) 99.65 166.62 T
(esults of calling the pr) 239.63 166.62 T
(ovided function. The new) 346.84 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 161
%%Page: "148" 162
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(148) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(collection will be an instance of the) 99.65 665.62 T
4 10 Q
(type-for-copy) 272.4 665.62 T
1 11 Q
( of the \336rst collection ar) 350.4 665.62 T
(gu-) 464.62 665.62 T
(ment to) 99.65 651.62 T
4 10 Q
(map) 139.71 651.62 T
1 11 Q
(.) 157.71 651.62 T
4 9 Q
(define method my-copy-sequence) 99.65 630.95 T
(\050old-sequence :: <sequence>\051 => \050new-sequence :: <sequence>\051) 121.25 619.95 T
(map\050identity, old-sequence\051;) 110.45 608.95 T
(end method my-copy-sequence;) 99.65 597.95 T
1 11 Q
-0.41 (The) 99.65 577.62 P
4 10 Q
-0.88 (identity) 120.41 577.62 P
1 11 Q
-0.41 ( function simply r) 168.41 577.62 P
-0.41 (eturns its ar) 253.87 577.62 P
-0.41 (gument without making any changes.) 310.56 577.62 P
(A mor) 99.65 563.62 T
(e inter) 130.82 563.62 T
(esting example is to de\336ne a method that multiplies a number by) 161.45 563.62 T
(each element of a vector) 99.65 549.62 T
(, yielding a new vector with the pr) 216.07 549.62 T
(oducts. Her) 383.33 549.62 T
(e is a sam-) 439.89 549.62 T
(ple call to) 99.65 535.62 T
4 10 Q
(scalar-multiply) 149.36 535.62 T
1 11 Q
(, which we de\336ne next:) 238.14 535.62 T
6 9 Q
(?) 99.65 514.95 T
4 F
( scalar-multiply\0503, #[4, 5, 6]\051;) 105.05 514.95 T
6 F
(#[12, 15, 18]) 99.65 503.95 T
1 11 Q
(Her) 99.65 483.62 T
(e is our de\336nition of) 118.22 483.62 T
4 10 Q
(scalar-multiply) 219.2 483.62 T
1 11 Q
(, using) 307.98 483.62 T
4 10 Q
(map) 343.24 483.62 T
1 11 Q
(:) 361.24 483.62 T
4 9 Q
(define method scalar-multiply) 99.65 462.95 T
(\050scalar :: <number>, old-vector :: <vector>\051 => \050result :: <vector>\051) 121.25 451.95 T
(map\050method \050vector-element\051 scalar * vector-element end,) 110.45 440.95 T
(old-vector\051;) 132.05 429.95 T
(end method scalar-multiply;) 99.65 418.95 T
1 11 Q
(W) 99.65 398.62 T
(e use the) 109.64 398.62 T
4 10 Q
(method) 154.98 398.62 T
1 11 Q
( statement to cr) 190.98 398.62 T
(eate a kind of function \050a closur) 265.43 398.62 T
(e\051 that multi-) 418.63 398.62 T
(plies) 99.65 384.62 T
4 10 Q
(scalar) 125.34 384.62 T
1 11 Q
( by an element of the vector pr) 161.34 384.62 T
(ovided by) 309.39 384.62 T
4 10 Q
(map) 361.23 384.62 T
1 11 Q
(. The) 379.23 384.62 T
4 10 Q
(map) 405.89 384.62 T
1 11 Q
( iterator then) 423.89 384.62 T
(calls that function on each element of) 99.65 370.62 T
4 10 Q
(old-vector) 283.04 370.62 T
1 11 Q
(, collecting the r) 342.23 370.62 T
(esults in a new) 419.38 370.62 T
(sequence. A variant of) 99.65 356.62 T
4 10 Q
(map) 210.92 356.62 T
1 11 Q
(, called) 228.92 356.62 T
4 10 Q
(map-into) 265.95 356.62 T
1 11 Q
(, r) 313.95 356.62 T
(eplaces elements in an existing col-) 323.6 356.62 T
(lection, rather than cr) 99.65 342.62 T
(eating a new collection for the r) 203.57 342.62 T
(esults. See Section 16.1.2,) 356.54 342.62 T
(page 247, for an example of the use of) 99.65 328.62 T
4 10 Q
(map-into) 285.46 328.62 T
1 11 Q
(.) 333.46 328.62 T
-0.08 (W) 126.65 314.62 P
-0.08 (e can de\336ne this method mor) 136.64 314.62 P
-0.08 (e succinctly using) 277.79 314.62 P
4 10 Q
-0.17 (curry) 366.55 314.62 P
1 11 Q
-0.08 (, which is a function) 395.33 314.62 P
(that generates a function:) 99.65 300.62 T
4 9 Q
(define method scalar-multiply) 99.65 279.95 T
(\050scalar :: <number>, old-vector :: <vector>\051 => \050result :: <vector>\051) 121.25 268.95 T
(map\050curry\050\134*, scalar\051, old-vector\051;) 110.45 257.95 T
(end method scalar-multiply;) 99.65 246.95 T
1 11 Q
(The) 99.65 226.62 T
4 10 Q
(curry) 120.81 226.62 T
1 11 Q
( function in this example cr) 150.81 226.62 T
(eates exactly the same method as the one) 283.07 226.62 T
(that we cr) 99.65 212.62 T
(eated in the pr) 147.7 212.62 T
(evious de\336nition of) 217.91 212.62 T
4 10 Q
(scalar-multiply) 315.26 212.62 T
1 11 Q
(. That is,) 404.04 212.62 T
4 10 Q
(curry\050\134*, scalar\051) 99.65 198.62 T
1 11 Q
( builds a function that multiplies its ar) 201.65 198.62 T
(gument by) 387.13 198.62 T
4 10 Q
(scalar) 442.55 198.62 T
1 11 Q
(.) 477.73 198.62 T
-0.22 (This generated function is then used by) 99.65 184.62 P
4 10 Q
-0.48 (map) 292.62 184.62 P
1 11 Q
-0.22 ( to compute the value of each element) 310.62 184.62 P
(of the new sequence.) 99.65 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 162
%%Page: "149" 163
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.3 Iteration over a sequence) 394.35 702.62 T
2 F
(149) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.32 (Mapping functions such as) 126.65 665.62 P
4 10 Q
-0.7 (do) 259.4 665.62 P
1 11 Q
-0.32 ( and) 271.4 665.62 P
4 10 Q
-0.7 (map) 294.88 665.62 P
1 11 Q
-0.32 ( work well when you want to operate) 312.88 665.62 P
(over the entir) 99.65 651.62 T
(e collection. The) 164.85 651.62 T
4 10 Q
(map) 246.17 651.62 T
1 11 Q
( function works well only if ther) 264.17 651.62 T
(e is a one-to-) 420.59 651.62 T
(one corr) 99.65 637.62 T
(espondence between input-collection sizes and output-collection size.) 139.46 637.62 T
(However) 99.65 623.62 T
(, the other techniques that we have pr) 144.26 623.62 T
(esented, such as using) 327.26 623.62 T
4 10 Q
(for) 437.95 623.62 T
1 11 Q
( and) 455.95 623.62 T
4 10 Q
(while) 99.65 609.62 T
1 11 Q
(, can work better when you want to operate on only part of a sequence. In) 129.65 609.62 T
(Section 1) 99.65 595.62 T
(1.3.8, we take another look at how a) 142.42 595.62 T
4 10 Q
(for) 319.09 595.62 T
1 11 Q
( loop can help us to solve the) 337.09 595.62 T
(pr) 99.65 581.62 T
(oblem of iterating over only part of a collection.) 110.41 581.62 T
3 13 Q
(11.3.8  A sequence copier that can cop) 99.65 550.29 T
(y a por) 295.62 550.29 T
(tion of a sequence) 330.79 550.29 T
1 11 Q
(The) 99.65 530.62 T
4 10 Q
(copy-sequence) 120.81 530.62 T
1 11 Q
( generic function pr) 198.81 530.62 T
(ovided by Dylan actually takes keywor) 294.08 530.62 T
(d) 484.48 530.62 T
(ar) 99.65 516.62 T
(guments that allow only a portion of the sequence to be copied. Her) 109.29 516.62 T
(e is an) 438.65 516.62 T
(example:) 99.65 502.62 T
6 9 Q
(?) 99.65 481.95 T
4 F
( copy-sequence\050"airport", start: 3\051;) 105.05 481.95 T
6 F
("port") 99.65 470.95 T
(?) 99.65 451.95 T
4 F
( copy-sequence\050"snow", start: 1, end: 3\051;) 105.05 451.95 T
6 F
("no") 99.65 440.95 T
1 11 Q
(In the following, we use a) 99.65 420.62 T
4 10 Q
(for) 227.74 420.62 T
1 11 Q
( loop with two iteration clauses to implement the) 245.74 420.62 T
(mor) 99.65 406.62 T
(e \337exible version of the general purpose) 119.51 406.62 T
4 10 Q
(my-copy-sequence) 316.69 406.62 T
1 11 Q
(:) 412.69 406.62 T
4 9 Q
(define method my-copy-sequence) 99.65 385.95 T
(\050old-sequence :: <sequence>,) 121.25 374.95 T
(#key start = 0, end: limit = old-sequence.size\051) 126.65 363.95 T
(=> \050new-sequence :: <sequence>\051) 105.05 352.95 T
(let new-sequence = make\050type-for-copy\050old-sequence\051, size: limit - start\051;) 110.45 341.95 T
(for \050source-index from start below limit,) 110.45 330.95 T
(destination-index from 0\051) 137.45 319.95 T
(new-sequence[destination-index] := old-sequence[source-index];) 121.25 308.95 T
(end for;) 110.45 297.95 T
(new-sequence;) 110.45 286.95 T
(end method my-copy-sequence;) 99.65 275.95 T
1 11 Q
(In the pr) 99.65 255.62 T
(eceding example, we for) 141.27 255.62 T
(ce the keywor) 259.63 255.62 T
(d parameter) 327.37 255.62 T
4 10 Q
(end:) 389.73 255.62 T
1 11 Q
( to bind the vari-) 413.73 255.62 T
(able) 99.65 241.62 T
4 10 Q
(limit) 122.45 241.62 T
1 11 Q
(, rather than binding) 152.45 241.62 T
4 10 Q
(end) 255.66 241.62 T
1 11 Q
(. It is illegal to use) 273.66 241.62 T
4 10 Q
(end) 363.92 241.62 T
1 11 Q
( as a variable name,) 381.92 241.62 T
-0.06 (because) 99.65 227.62 P
4 10 Q
-0.13 (end) 140.64 227.62 P
1 11 Q
-0.06 ( is one of a few r) 158.64 227.62 P
-0.06 (eserved wor) 237.73 227.62 P
-0.06 (ds in Dylan. In the body of the) 297.5 227.62 P
4 10 Q
-0.13 (for) 447.7 227.62 P
1 11 Q
-0.06 ( loop,) 465.7 227.62 P
4 10 Q
(source-index) 99.65 213.62 T
1 11 Q
( will range fr) 171.65 213.62 T
(om) 234.12 213.62 T
4 10 Q
(start) 252.59 213.62 T
1 11 Q
( to 1 less than) 282.59 213.62 T
4 10 Q
(limit) 351.12 213.62 T
1 11 Q
(, and) 381.12 213.62 T
4 10 Q
(destination-) 407.99 213.62 T
(index) 99.65 199.62 T
1 11 Q
( will range fr) 129.65 199.62 T
(om 0 to 1 less then) 192.12 199.62 T
4 10 Q
(limit) 284.39 199.62 T
1 11 Q
( minus) 314.39 199.62 T
4 10 Q
(start) 350.5 199.62 T
1 11 Q
(, which is the length of) 380.5 199.62 T
(the new sequence being cr) 99.65 185.62 T
(eated.) 227.4 185.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 163
%%Page: "150" 164
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(150) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(11.3.9  Chang) 99.65 664.29 T
(es to a g) 168.48 664.29 T
(eneric function\325) 211.84 664.29 T
(s signature) 290.59 664.29 T
1 11 Q
(Note that the) 99.65 644.62 T
4 10 Q
(my-copy-sequence) 166.23 644.62 T
1 11 Q
( method de\336ned in Section 1) 262.23 644.62 T
(1.3.8 has a parame-) 400.34 644.62 T
(ter list that is not congr) 99.65 630.62 T
(uent with the parameter list of the generic function. That) 211.85 630.62 T
(is, that method accepts the) 99.65 616.62 T
4 10 Q
(start:) 231.44 616.62 T
1 11 Q
( and) 267.44 616.62 T
4 10 Q
(end:) 291.56 616.62 T
1 11 Q
( keywor) 315.56 616.62 T
(d ar) 355.14 616.62 T
(guments, when pr) 374.26 616.62 T
(evi-) 462.9 616.62 T
-0.35 (ously only r) 99.65 602.62 P
-0.35 (equir) 156.93 602.62 P
-0.35 (ed ar) 182.34 602.62 P
-0.35 (guments wer) 206.38 602.62 P
-0.35 (e allowed for that generic function. W) 269.74 602.62 P
-0.35 (e did not) 450.55 602.62 P
(explicitly de\336ne the) 99.65 588.62 T
4 10 Q
(my-copy-sequence) 198.42 588.62 T
1 11 Q
( generic function; Dylan cr) 294.42 588.62 T
(eated the) 423.19 588.62 T
(generic function implicitly) 99.65 574.62 T
(, when we de\336ned the \336rst method for it, in Section) 227.1 574.62 T
(1) 99.65 560.62 T
(1.3.1. The generic function accepts two r) 104.54 560.62 T
(equir) 298.78 560.62 T
(ed parameters, and no keywor) 324.19 560.62 T
(d) 472.59 560.62 T
(parameters.) 99.65 546.62 T
(When you need to change the signatur) 126.65 532.62 T
(e of a generic function, you must) 314.31 532.62 T
(change all the methods for that generic function to have a compatible signatur) 99.65 518.62 T
(e.) 478.87 518.62 T
(In our example, we would have to \336x the) 99.65 504.62 T
4 10 Q
(my-copy-sequence) 302.22 504.62 T
1 11 Q
( method for lists to) 398.22 504.62 T
(accept the) 99.65 490.62 T
4 10 Q
(start:) 151.14 490.62 T
1 11 Q
( and) 187.14 490.62 T
4 10 Q
(end:) 211.26 490.62 T
1 11 Q
( keywor) 235.26 490.62 T
(d ar) 274.84 490.62 T
(guments, and would have to change the) 293.96 490.62 T
(methods to operate on only a portion of the list pr) 99.65 476.62 T
(ovided. For mor) 341.81 476.62 T
(e information) 420.53 476.62 T
(about the congr) 99.65 462.62 T
(uence r) 175.88 462.62 T
(ules for methods of a generic function, see Section 12.2.5,) 211.34 462.62 T
(page 176.) 99.65 448.62 T
3 15 Q
(11.4  Manipulation of collections) 99.65 408.95 T
1 11 Q
(Dylan pr) 99.65 388.62 T
(ovides an extensive library of functions that manipulate collections. In) 142.89 388.62 T
(this section, we explor) 99.65 374.62 T
(e how to build complex collection functions fr) 207.87 374.62 T
(om simpler) 430.65 374.62 T
(ones, using the contr) 99.65 360.62 T
(ol-\337ow functions alr) 200.29 360.62 T
(eady shown in this chapter) 298.81 360.62 T
(.) 429.31 360.62 T
3 13 Q
(11.4.1  Re) 99.65 329.29 T
(ver) 148.7 329.29 T
(sal of sequences) 164.56 329.29 T
1 11 Q
(Dylan pr) 99.65 309.62 T
(ovides two generic functions for r) 142.89 309.62 T
(eversing sequences:) 306.57 309.62 T
4 10 Q
(reverse) 405.51 309.62 T
1 11 Q
(, and) 447.51 309.62 T
4 10 Q
(reverse!) 99.65 295.62 T
1 11 Q
(. They both achieve the same objective, but) 147.65 295.62 T
4 10 Q
(reverse!) 358.29 295.62 T
1 11 Q
( is allowed to) 406.29 295.62 T
(modify its ar) 99.65 281.62 T
(gument, wher) 161.67 281.62 T
(eas) 229.88 281.62 T
4 10 Q
(reverse) 248.06 281.62 T
1 11 Q
( never modi\336es its ar) 290.06 281.62 T
(gument.) 391.89 281.62 T
6 9 Q
(?) 99.65 260.95 T
4 F
( reverse\050"lever"\051;) 105.05 260.95 T
6 F
("revel") 99.65 249.95 T
(?) 99.65 230.95 T
4 F
( define variable *switch* = vector\050"switch", "on"\051;) 105.05 230.95 T
6 F
(?) 99.65 211.95 T
4 F
( reverse\050*switch*\051;) 105.05 211.95 T
6 F
(#["on", "switch"]) 99.65 200.95 T
(?) 99.65 181.95 T
4 F
( *switch*;) 105.05 181.95 T
6 F
(#["switch", "on"]) 99.65 170.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 164
%%Page: "151" 165
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.4 Manipulation of collections) 384.06 702.62 T
2 F
(151) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
(reverse!\050*switch*\051;) 110.45 666.95 T
6 F
(#["on", "switch"]) 99.65 655.95 T
1 11 Q
(After the call to) 99.65 635.62 T
4 10 Q
(reverse!) 177.7 635.62 T
1 11 Q
(, the value of) 225.7 635.62 T
4 10 Q
(*switch*) 291.2 635.62 T
1 11 Q
( is not de\336ned. Only the r) 339.2 635.62 T
(eturn) 463.11 635.62 T
(value fr) 99.65 621.62 T
(om) 137.03 621.62 T
4 10 Q
(reverse!) 155.49 621.62 T
1 11 Q
( will be meaningful. If we want) 203.49 621.62 T
4 10 Q
(*switch*) 358.2 621.62 T
1 11 Q
( to contain the) 406.2 621.62 T
(r) 99.65 607.62 T
(eversed sequence, we must instead write) 103.79 607.62 T
6 9 Q
(?) 99.65 586.95 T
4 F
( *switch* := reverse!\050*switch*\051;) 105.05 586.95 T
6 F
(#["on", "switch"]) 99.65 575.95 T
(?) 99.65 556.95 T
4 F
( *switch*;) 105.05 556.95 T
6 F
(#["on", "switch"]) 99.65 545.95 T
1 11 Q
-0.12 (Note that) 99.65 525.62 P
4 10 Q
-0.27 (reverse!) 147.98 525.62 P
1 11 Q
-0.12 ( cannot change the object to which) 195.98 525.62 P
4 10 Q
-0.27 (*switch*) 365.04 525.62 P
1 11 Q
-0.12 ( r) 413.04 525.62 P
-0.12 (efers; however) 419.82 525.62 P
-0.12 (,) 490.27 525.62 P
4 10 Q
(reverse!) 99.65 511.62 T
1 11 Q
( is allowed to alter the contents of that object. Also note that) 147.65 511.62 T
4 10 Q
(reverse!) 440.55 511.62 T
1 11 Q
(may not r) 99.65 497.62 T
(eturn the same object as that you pr) 146.62 497.62 T
(ovide as its ar) 319.66 497.62 T
(gument. Consider the) 386.58 497.62 T
(case of using) 99.65 483.62 T
4 10 Q
(reverse!) 164.9 483.62 T
1 11 Q
( on a list to see how this behavior can be useful.) 212.9 483.62 T
-0.21 (How can we write our own version of) 99.65 303.62 P
4 10 Q
-0.46 (reverse) 285.43 303.62 P
1 11 Q
-0.21 ( using the iteration techniques pr) 327.43 303.62 P
-0.21 (e-) 486.72 303.62 P
(sented so far?) 99.65 289.62 T
4 9 Q
(define method my-reverse \050seq :: <sequence>\051 => \050reversed-seq :: <sequence>\051) 99.65 268.95 T
(let reversed-seq = make\050type-for-copy\050seq\051, size: seq.size\051;) 110.45 257.95 T
(for \050destination-index from seq.size - 1 to 0 by -1,) 110.45 246.95 T
(source-index from 0\051) 137.45 235.95 T
(reversed-seq[destination-index] := seq[source-index];) 121.25 224.95 T
(end for;) 110.45 213.95 T
(reversed-seq;) 110.45 202.95 T
(end method my-reverse;) 99.65 191.95 T
1 11 Q
(Once again, this algorithm is \336ne for vectors and strings, but has poor perfor-) 99.65 171.62 T
(mance for lists. Her) 99.65 157.62 T
(e is a special) 194.31 157.62 T
4 10 Q
(my-reverse) 257.28 157.62 T
1 11 Q
( method for lists:) 317.28 157.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 132.65 449.62 T
1 F
( Dylan has a convention of putting an exclamation point) 194.68 449.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(at the ends of the names of functions that can destr) 132.65 435.62 T
(uctively modify) 379.49 435.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(their ar) 132.65 421.62 T
(guments. For example,) 167.85 421.62 T
4 10 Q
(reverse!) 281.69 421.62 T
1 11 Q
( takes a sequence, and) 329.69 421.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 132.65 407.62 T
(eturns a sequence that has the same elements but in r) 136.79 407.62 T
(everse or) 394.71 407.62 T
(der) 438.65 407.62 T
(.) 454.17 407.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 132.65 393.62 T
4 10 Q
(reverse!) 153.81 393.62 T
1 11 Q
( generic function may change the sequence that is its) 201.81 393.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 379.62 T
(gument. In contrast, the) 142.29 379.62 T
4 10 Q
(reverse) 260.85 379.62 T
1 11 Q
( generic function performs a simi-) 302.85 379.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(lar operation, but does not destr) 132.65 365.62 T
(uctively modify its ar) 288.57 365.62 T
(gument. Setters) 392.45 365.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 351.62 T
(e an exception to this convention: They modify their ar) 142.29 351.62 T
(gument, but) 408.09 351.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(do not typically end with) 132.65 337.62 T
4 10 Q
(!) 258.29 337.62 T
1 11 Q
(.) 264.29 337.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 462.83 126.65 330.08 2 L
V
0.25 H
0 Z
N
477.65 462.83 477.65 330.08 2 L
V
N
126.52 462.95 477.77 462.95 2 L
V
N
126.52 329.95 477.77 329.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 165
%%Page: "152" 166
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(152) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method my-reverse \050old-list :: <list>\051 => \050reversed-list :: <list>\051) 99.65 666.95 T
(let reversed-list = #\050\051;) 110.45 655.95 T
(for \050old-element in old-list\051) 110.45 644.95 T
(reversed-list := pair\050old-element, reversed-list\051;) 121.25 633.95 T
(end for;) 110.45 622.95 T
(reversed-list;) 110.45 611.95 T
(end method my-reverse;) 99.65 600.95 T
1 11 Q
(It is easy to build up a list fr) 99.65 580.62 T
(om its end to its start, and that is exactly what we do) 234.99 580.62 T
(in the pr) 99.65 566.62 T
(eceding method. W) 140.77 566.62 T
(e start with the empty list, and add pairs to the) 234.56 566.62 T
-0.19 (r) 99.65 552.62 P
-0.19 (eversed list whose heads ar) 103.79 552.62 P
-0.19 (e the elements of the ar) 236.17 552.62 P
-0.19 (gument. W) 347.46 552.62 P
-0.19 (e follow the old list) 400.48 552.62 P
(fr) 99.65 538.62 T
(om its start to its end, while we build the new list fr) 107.46 538.62 T
(om its end to its start, thus) 357.59 538.62 T
(r) 99.65 524.62 T
(eversing the list.) 103.79 524.62 T
-0.25 (It is important to r) 126.65 510.62 P
-0.25 (emember that, even though we cr) 214.51 510.62 P
-0.25 (eated a new sequence to) 376.29 510.62 P
(contain the elements of the old sequence, we still shar) 99.65 496.62 T
(e those old elements with) 360.17 496.62 T
(the new sequence. If two elements of a collection r) 99.65 482.62 T
(efer to the same object, then) 343.27 482.62 T
-0.02 (modifying the element of one of the collections af) 99.65 468.62 P
-0.02 (fects the value of the element of) 339.11 468.62 P
(the other collection. W) 99.65 454.62 T
(e illustrate this behavior in Section 1) 208.14 454.62 T
(1.4.2.) 383.59 454.62 T
3 13 Q
(11.4.2  Destructive operations and shared structure) 99.65 423.29 T
1 11 Q
(Consider the following example, and Figur) 99.65 403.62 T
(es 1) 308.86 403.62 T
(1.4 and 1) 326.43 403.62 T
(1.5.) 369.2 403.62 T
5 9 Q
(// Firste we construct a vector of two vectors) 99.65 382.95 T
6 F
(?) 99.65 371.95 T
4 F
( define variable *switch-states*) 105.05 371.95 T
(= vector\050vector\050"switch", "on"\051, vector\050"switch", "off"\051\051;) 121.25 360.95 T
6 F
(?) 99.65 341.95 T
4 F
( *switch-states*;) 105.05 341.95 T
6 F
(#[#["switch", "on"], #["switch", "off"]]) 99.65 330.95 T
5 F
(// Now, we reverse the vector, holding on to the result) 99.65 311.95 T
6 F
(?) 99.65 300.95 T
4 F
( define variable *rev-switch-states* = my-reverse\050*switch-states*\051;) 105.05 300.95 T
1 11 Q
(At this point, the states of the variables and vectors corr) 99.65 280.62 T
(espond to Figur) 370.11 280.62 T
(e 1) 447.08 280.62 T
(1.4.) 460 280.62 T
(W) 126.65 266.62 T
(e examine the two sequences:) 136.64 266.62 T
6 9 Q
(?) 99.65 245.95 T
4 F
( *rev-switch-states*;) 105.05 245.95 T
6 F
(#[#["switch", "off"], #["switch", "on"]]) 99.65 234.95 T
5 F
(// Although *switch-states* and *rev-switch-states* are different vectors,) 99.65 215.95 T
(// they share elements) 99.65 204.95 T
6 F
(?) 99.65 193.95 T
4 F
( *switch-states* == *rev-switch-states*;) 105.05 193.95 T
6 F
(#f) 99.65 182.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 166
%%Page: "153" 167
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.4 Manipulation of collections) 384.06 702.62 T
2 F
(153) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Now) 99.65 462.63 T
(, we change an element:) 122.96 462.63 T
6 9 Q
(?) 99.65 441.96 T
4 F
( *switch-states*[0] == *rev-switch-states*[1];) 105.05 441.96 T
6 F
(#t) 99.65 430.96 T
5 F
(// So, when we change an element in one, the same change occurs in the other) 99.65 411.96 T
6 F
(?) 99.65 400.96 T
4 F
( \050*switch-states*[0]\051[0] := "master switch";) 105.05 400.96 T
6 F
("master switch") 99.65 389.96 T
1 11 Q
(At this point, the states of the variables and vectors corr) 99.65 369.63 T
(espond to Figur) 370.11 369.63 T
(e 1) 447.08 369.63 T
(1.5.) 460 369.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 481.96 495.65 489.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.4) 177.9 493.29 T
8 F
(State bef) 236.26 493.29 T
(ore the element is changed.) 275.99 493.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 162.97 495.65 170.96 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 11.5) 181.92 174.29 T
8 F
(State after the element is changed.) 240.28 174.29 T
0 0 0 1 0 0 0 K
99.65 505.95 495.65 672.95 C
166.65 509.95 428.65 670.95 C
0 -248 100 2 249 250 149 172.65 515.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-4.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-4 .eps)%%CreationDate: (6/5/96) (10:43 AM)%%BoundingBox: -248 100 2 249%%HiResBoundingBox: -247.1984 100.3333 0.7884 248.0403%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -120.5 107 -120.5 107%AI3_TileBox: -395.5 -258 156.5 472%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -876.5 611 -1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -206.7083 240.8333 0 TpTP-40.4901 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(*switch-states*) Tx (\r) TX TO0 To1 0 0 1 -77.9583 240.8333 0 TpTP-51.2875 0 Td0 Tr(*rev-switch-states*) Tx (\r) TX TO0 To1 0 0 1 -196.9583 102.5833 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO0 To1 0 0 1 -137.9583 102.5833 0 TpTP-10.7974 0 Td0 Tr("on") Tx (\r) TX TO0 To1 0 0 1 -73.875 102.5833 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO0 To1 0 0 1 -12.7083 102.5833 0 TpTP-13.4967 0 Td0 Tr("off") Tx (\r) TX TOu1 Ap0 R0 G0.5 w-170.7917 191.4167 m-170.7917 218.7708 L-206.7917 218.7708 L-206.7917 191.4167 L-170.7917 191.4167 Ls-178.125 191.4167 m-134.7084 191.4167 L-134.7084 218.7708 L-178.125 218.7708 LS-168.4167 191.2083 mS-168.4167 218.5625 mSUu-44.5208 191.4167 m-44.5208 218.7708 L-80.5208 218.7708 L-80.5208 191.4167 L-44.5208 191.4167 Ls-44.4375 191.4167 mS-44.4375 218.7708 mS-48.4583 191.4167 m-8.4375 191.4167 L-8.4375 218.7708 L-49.4583 218.7708 LSUu-170.7917 124.9792 m-170.7917 152.3333 L-206.7917 152.3333 L-206.7917 124.9792 L-170.7917 124.9792 Ls-170.7084 124.9792 m-134.7084 124.9792 L-134.7084 152.3333 L-170.7084 152.3333 LS-176.125 124.9792 mS-176.125 152.3333 mSU-44.5208 124.9792 m-44.5208 152.3333 L-80.5208 152.3333 L-80.5208 124.9792 L-44.5208 124.9792 Ls-49.125 124.9792 m-8.6875 124.9792 L-8.6875 152.3333 L-49.125 152.3333 LS-44.6875 124.9792 mS-44.6875 152.3333 mSu0 Ap0.65 w-60.4583 204.9167 m-60.4583 160.25 lS0 O0 g1 w-62.6963 161.7958 m-60.4308 153.34 l-58.1649 161.7958 l-62.6963 161.7958 lfUu0 R0 G0.65 w-188.3959 204.9167 m-188.3959 160.25 lS0 O0 g1 w-190.6338 161.7958 m-188.3683 153.34 l-186.1024 161.7958 l-190.6338 161.7958 lfUuu0 R0 G0.65 w-23.7917 203.75 m-172.7917 155.5833 lS0 O0 g1 w-172.0074 158.1867 m-179.3564 153.4299 l-170.6135 153.8749 l-172.0074 158.1867 lfUUu0 R0 G0.65 w-204.375 237.5 m-189.375 224.1667 lS0 O0 g1 w-192.0208 223.5225 m-184.1958 219.598 l-189.0103 226.9092 l-192.0208 223.5225 lfUu0 R0 G0.65 w-80 237.5 m-65 224.1667 lS0 O0 g1 w-67.6458 223.5225 m-59.8208 219.598 l-64.6353 226.9092 l-67.6458 223.5225 lfUuu0 R0 G0.65 w-187.4583 138.4167 m-194.7917 117.0833 lS0 O0 g1 w-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfU-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfUu0 R0 G0.65 w-153.4583 137.75 m-142.7917 117.4167 lS0 O0 g1 w-145.4916 117.75 m-139.5572 111.3145 l-141.4789 119.8551 l-145.4916 117.75 lfUuu0 R0 G0.65 w-62.9583 138.4167 m-70.2917 117.0833 lS0 O0 g1 w-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfU-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfUu0 R0 G0.65 w-28.9583 137.75 m-18.2917 117.4167 lS0 O0 g1 w-20.9916 117.75 m-15.0572 111.3145 l-16.9789 119.8551 l-20.9916 117.75 lfUu0 R0 G0.65 w-152.4583 204.4167 m-80.125 157.0833 lS0 O0 g1 w-82.6408 156.0572 m-74.3247 153.3228 l-80.1595 159.849 l-82.6408 156.0572 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 505.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
99.65 186.96 495.65 353.96 C
161.65 190.96 433.65 351.96 C
0 -258 100 2 249 260 149 167.65 196.96 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f11-5.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f11-5 .eps)%%CreationDate: (6/5/96) (10:43 AM)%%BoundingBox: -258 100 2 249%%HiResBoundingBox: -256.6984 100.3333 0.7884 248.0403%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -120.5 107 -120.5 107%AI3_TileBox: -395.5 -258 156.5 472%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -392.5 379 1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4440.5 4427 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 -206.7083 240.8333 0 TpTP-40.4901 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(*switch-states*) Tx (\r) TX TO0 To1 0 0 1 -77.9583 240.8333 0 TpTP-51.2875 0 Td0 Tr(*rev-switch-states*) Tx (\r) TX TO0 To1 0 0 1 -216.2083 102.5833 0 TpTP-40.4901 0 Td0 Tr("master switch") Tx (\r) TX TO0 To1 0 0 1 -137.9583 102.5833 0 TpTP-10.7974 0 Td0 Tr("on") Tx (\r) TX TO0 To1 0 0 1 -73.875 102.5833 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO0 To1 0 0 1 -12.7083 102.5833 0 TpTP-13.4967 0 Td0 Tr("off") Tx (\r) TX TOu1 Ap0 R0 G0.5 w-170.7917 191.4167 m-170.7917 218.7708 L-206.7917 218.7708 L-206.7917 191.4167 L-170.7917 191.4167 Ls-178.125 191.4167 m-134.7084 191.4167 L-134.7084 218.7708 L-178.125 218.7708 LS-168.4167 191.2083 mS-168.4167 218.5625 mSUu-44.5208 191.4167 m-44.5208 218.7708 L-80.5208 218.7708 L-80.5208 191.4167 L-44.5208 191.4167 Ls-44.4375 191.4167 mS-44.4375 218.7708 mS-48.4583 191.4167 m-8.4375 191.4167 L-8.4375 218.7708 L-49.4583 218.7708 LSUu-170.7917 124.9792 m-170.7917 152.3333 L-206.7917 152.3333 L-206.7917 124.9792 L-170.7917 124.9792 Ls-170.7084 124.9792 m-134.7084 124.9792 L-134.7084 152.3333 L-170.7084 152.3333 LS-176.125 124.9792 mS-176.125 152.3333 mSU-44.5208 124.9792 m-44.5208 152.3333 L-80.5208 152.3333 L-80.5208 124.9792 L-44.5208 124.9792 Ls-49.125 124.9792 m-8.6875 124.9792 L-8.6875 152.3333 L-49.125 152.3333 LS-44.6875 124.9792 mS-44.6875 152.3333 mSu0 Ap0.65 w-60.4583 204.9167 m-60.4583 160.25 lS0 O0 g1 w-62.6963 161.7958 m-60.4308 153.34 l-58.1649 161.7958 l-62.6963 161.7958 lfUu0 R0 G0.65 w-188.3959 204.9167 m-188.3959 160.25 lS0 O0 g1 w-190.6338 161.7958 m-188.3683 153.34 l-186.1024 161.7958 l-190.6338 161.7958 lfUuu0 R0 G0.65 w-23.7917 203.75 m-172.7917 155.5833 lS0 O0 g1 w-172.0074 158.1867 m-179.3564 153.4299 l-170.6135 153.8749 l-172.0074 158.1867 lfUUu0 R0 G0.65 w-204.375 237.5 m-189.375 224.1667 lS0 O0 g1 w-192.0208 223.5225 m-184.1958 219.598 l-189.0103 226.9092 l-192.0208 223.5225 lfUu0 R0 G0.65 w-80 237.5 m-65 224.1667 lS0 O0 g1 w-67.6458 223.5225 m-59.8208 219.598 l-64.6353 226.9092 l-67.6458 223.5225 lfUuu0 R0 G0.65 w-187.4583 138.4167 m-194.7917 117.0833 lS0 O0 g1 w-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfU-196.4093 119.2713 m-197.0159 110.5383 l-192.1241 117.7981 l-196.4093 119.2713 lfUu0 R0 G0.65 w-153.4583 137.75 m-142.7917 117.4167 lS0 O0 g1 w-145.4916 117.75 m-139.5572 111.3145 l-141.4789 119.8551 l-145.4916 117.75 lfUuu0 R0 G0.65 w-62.9583 138.4167 m-70.2917 117.0833 lS0 O0 g1 w-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfU-71.9093 119.2713 m-72.5159 110.5383 l-67.6241 117.7981 l-71.9093 119.2713 lfUu0 R0 G0.65 w-28.9583 137.75 m-18.2917 117.4167 lS0 O0 g1 w-20.9916 117.75 m-15.0572 111.3145 l-16.9789 119.8551 l-20.9916 117.75 lfUu0 R0 G0.65 w-152.4583 204.4167 m-80.125 157.0833 lS0 O0 g1 w-82.6408 156.0572 m-74.3247 153.3228 l-80.1595 159.849 l-82.6408 156.0572 lfU0 To1 0 0 1 -234.9167 172.3333 0 TpTP-21.5947 0 Td0 Tr("switch") Tx (\r) TX TO-254.5 4427 m-254.5 -4213 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 186.96 495.65 353.96 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 167
%%Page: "154" 168
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(154) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(e can look at the values of the variables:) 109.64 665.62 T
6 9 Q
(?) 99.65 644.95 T
4 F
( *switch-states*;) 105.05 644.95 T
6 F
(#[#["master switch", "on"], #["switch", "off"]]) 99.65 633.95 T
(?) 99.65 614.95 T
4 F
( *rev-switch-states*;) 105.05 614.95 T
6 F
(#[#["switch", "off"], #["master switch", "on"]]) 99.65 603.95 T
1 11 Q
(Each object pictur) 99.65 583.62 T
(ed in Figur) 186.12 583.62 T
(es 1) 239.43 583.62 T
(1.4 and 1) 257 583.62 T
(1.5 is a vector) 299.77 583.62 T
(. The strings in the \336gur) 364.63 583.62 T
(es) 480.93 583.62 T
(ar) 99.65 569.62 T
(e vectors, although we did not draw them as such, to keep the diagrams r) 109.29 569.62 T
(ela-) 465.94 569.62 T
(tively simple. V) 99.65 555.62 T
(ariables ar) 175.07 555.62 T
(e not objects in Dylan, but they ar) 225.24 555.62 T
(e shown r) 388.22 555.62 T
(eferring to) 435.79 555.62 T
(objects. In Figur) 99.65 541.62 T
(e 1) 177.29 541.62 T
(1.5, the string) 190.2 541.62 T
4 10 Q
("switch") 258.52 541.62 T
1 11 Q
( is not r) 306.52 541.62 T
(efer) 342.78 541.62 T
(enced by any other object) 361.12 541.62 T
(and is ther) 99.65 527.62 T
(efor) 151.04 527.62 T
(e garbage; eventually) 170.12 527.62 T
(, it will be r) 272.74 527.62 T
(eclaimed by a garbage collector) 327.56 527.62 T
(.) 479.51 527.62 T
(Changing an element of one collection can af) 126.65 513.62 T
(fect another collection if the) 344.18 513.62 T
-0.37 (two collections shar) 99.65 499.62 P
-0.37 (e elements. T) 195.18 499.62 P
-0.37 (wo collections shar) 257.08 499.62 P
-0.37 (e an element if ther) 349.03 499.62 P
-0.37 (e is a value) 440.69 499.62 P
(in one collection that is) 99.65 485.62 T
4 10 Q
(==) 214.26 485.62 T
1 11 Q
( \050that is, identical\051 to a value in the other collection.) 226.26 485.62 T
(Functions such as) 99.65 471.62 T
4 10 Q
(copy-sequence) 188.54 471.62 T
1 11 Q
( and) 266.54 471.62 T
4 10 Q
(reverse) 290.66 471.62 T
1 11 Q
( do only a) 332.66 471.62 T
2 F
(shallow copy) 383.61 471.62 T
1 F
( of their) 449.91 471.62 T
(ar) 99.65 457.62 T
(guments: only the top level of the copy is new) 109.29 457.62 T
(. Every other part is shar) 331.76 457.62 T
(ed with) 451.15 457.62 T
(the old sequence. Thus, it is important to take car) 99.65 443.62 T
(e when you modify objects that) 338.27 443.62 T
-0.08 (might be shar) 99.65 429.62 P
-0.08 (ed with other parts of your application. Using well-de\336ned module) 166.06 429.62 P
(boundaries that specify whether data str) 99.65 415.62 T
(uctur) 295.96 415.62 T
(es can be modi\336ed by clients of the) 321.85 415.62 T
(module can help you to keep application data consistent.) 99.65 401.62 T
3 15 Q
(11.5  Conditional e) 99.65 361.95 T
(x) 208.17 361.95 T
(ecution) 214.91 361.95 T
1 11 Q
(In Sections 1) 99.65 341.62 T
(1.5.1 thr) 159.94 341.62 T
(ough 1) 198.82 341.62 T
(1.5.6, we consider ways to execute dif) 231.63 341.62 T
(fer) 413.83 341.62 T
(ent code) 426.91 341.62 T
(depending on the r) 99.65 327.62 T
(esults of one or mor) 192.42 327.62 T
(e tests.) 289 327.62 T
3 13 Q
(11.5.1) 99.65 296.29 T
4 12 Q
(if) 135.22 296.29 T
3 13 Q
(,) 149.52 296.29 T
4 12 Q
(else) 155.45 296.29 T
3 13 Q
(, and) 184.36 296.29 T
4 12 Q
(elseif) 212.2 296.29 T
1 11 Q
(W) 99.65 276.62 T
(e showed the simplest use of) 109.64 276.62 T
4 10 Q
(if) 252.04 276.62 T
1 11 Q
( in Section 5.1.3, page 54. Consider the case) 264.04 276.62 T
(wher) 99.65 262.62 T
(e ther) 124.64 262.62 T
(e is mor) 152.06 262.62 T
(e than one test involved. Suppose that we want to write a) 190.56 262.62 T
(method that describes a vote. Her) 99.65 248.62 T
(e ar) 263.16 248.62 T
(e sample calls to) 280.83 248.62 T
4 10 Q
(interpret-votes) 363.1 248.62 T
1 11 Q
(:) 453.1 248.62 T
6 9 Q
(?) 99.65 227.95 T
4 F
(interpret-votes\050yes: 4, no: 0\051;) 110.45 227.95 T
6 F
("unanimously approved") 99.65 216.95 T
(?) 99.65 197.95 T
4 F
(interpret-votes\050yes: 3, no: 1\051;) 110.45 197.95 T
6 F
("approved") 99.65 186.95 T
(?) 99.65 167.95 T
4 F
(interpret-votes\050yes: 2, no: 2\051;) 110.45 167.95 T
6 F
("tie") 99.65 156.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 168
%%Page: "155" 169
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.5 Conditional execution) 404.54 702.62 T
2 F
(155) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
(interpret-votes\050yes: 1, no: 3\051;) 110.45 666.95 T
6 F
("not approved") 99.65 655.95 T
1 11 Q
(W) 99.65 635.62 T
(e can de\336ne the) 109.64 635.62 T
4 10 Q
(interpret-votes) 188.26 635.62 T
1 11 Q
( method using the) 278.26 635.62 T
4 10 Q
(if) 369.23 635.62 T
1 11 Q
( contr) 381.23 635.62 T
(ol str) 409.01 635.62 T
(uctur) 433.47 635.62 T
(e and) 459.36 635.62 T
(the) 99.65 621.62 T
4 10 Q
(else) 117.65 621.62 T
1 11 Q
( clause:) 141.65 621.62 T
4 9 Q
(define method interpret-votes) 99.65 600.95 T
(\050#key yes :: <nonnegative-integer> = 0, no :: <nonnegative-integer> = 0\051) 121.25 589.95 T
(=> \050interpretation :: <string>\051) 105.05 578.95 T
(if \050yes > 0 & no = 0\051) 110.45 567.95 T
("unanimously approved";) 121.25 556.95 T
(else if \050yes > no\051) 110.45 545.95 T
("approved";) 121.25 534.95 T
(else if \050yes = no\051) 110.45 523.95 T
("tie";) 121.25 512.95 T
(else) 110.45 501.95 T
("not approved";) 121.25 490.95 T
(end if;) 110.45 479.95 T
(end if;) 110.45 468.95 T
(end if;) 110.45 457.95 T
(end method interpret-votes;) 99.65 446.95 T
1 11 Q
(W) 99.65 426.62 T
(e de\336ned the) 109.64 426.62 T
4 10 Q
(<nonnegative-integer>) 175.45 426.62 T
1 11 Q
( type in Section 9.2, page 1) 301.45 426.62 T
(10, using) 429.15 426.62 T
4 10 Q
-0.34 (limited) 99.65 412.62 P
1 11 Q
-0.15 (. Only positive integers and the integer 0 ar) 141.65 412.62 P
-0.15 (e instances of) 350.35 412.62 P
4 10 Q
-0.34 (<nonnegative-) 417.65 412.62 P
(integer>) 99.65 398.62 T
1 11 Q
(. W) 147.65 398.62 T
(e use this type in the) 163.14 398.62 T
4 10 Q
(interpret-votes) 265.77 398.62 T
1 11 Q
( method parameter list to) 355.77 398.62 T
(ensur) 99.65 384.62 T
(e that no negative vote counts ar) 126.76 384.62 T
(e accepted.) 284.47 384.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Quick summary of) 132.65 350.62 T
4 10 Q
(&) 229.5 350.62 T
2 11 Q
(in\336x operator) 238.25 350.62 T
1 F
(:) 305.78 350.62 T
0 F
(ar) 311.28 350.62 T
(g1) 320.25 350.62 T
4 10 Q
(&) 334 350.62 T
0 11 Q
(ar) 342.75 350.62 T
(g2) 351.71 350.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
-0.04 (The in\336x operator) 159.65 336.62 P
4 10 Q
-0.08 (&) 249.81 336.62 P
1 11 Q
-0.04 ( does the) 255.81 336.62 P
1 8.8 Q
-0.04 (AND) 301.87 336.62 P
1 11 Q
-0.04 ( logical operation. If either) 322.84 336.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (or both of the ar) 132.65 322.62 P
-0.15 (guments to the) 210.06 322.62 P
4 10 Q
-0.32 (&) 285.1 322.62 P
1 11 Q
-0.15 ( operator ar) 291.1 322.62 P
-0.15 (e false, then) 347.62 322.62 P
4 10 Q
-0.32 (&) 407.4 322.62 P
1 11 Q
-0.15 ( r) 413.4 322.62 P
-0.15 (eturns) 420.15 322.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(false.) 132.65 308.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.45 (Note that the) 159.65 294.62 P
4 10 Q
-0.99 (&) 224.87 294.62 P
1 11 Q
-0.45 ( operator is actually a contr) 230.87 294.62 P
-0.45 (ol-\337ow operator) 361.04 294.62 P
-0.45 (. If) 438.93 294.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 132.65 280.62 T
(gument to the) 182.3 280.62 T
4 10 Q
(&) 253.12 280.62 T
1 11 Q
( operator is false, then the value of the) 259.12 280.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second ar) 132.65 266.62 T
(gument is never computed, and false is r) 178.99 266.62 T
(eturned. If the) 376.43 266.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of the \336rst ar) 132.65 252.62 T
(gument is tr) 224.29 252.62 T
(ue, then the value of the second) 283.22 252.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 132.65 238.62 T
(gument is computed and r) 142.29 238.62 T
(eturned.) 271.07 238.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 159.65 224.62 T
4 10 Q
(|) 180.81 224.62 T
1 11 Q
( operator \050logical) 186.81 224.62 T
1 8.8 Q
(OR) 272.5 224.62 T
1 11 Q
(\051 behaves in a similar manner) 285.3 224.62 T
(,) 427.86 224.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(except that its second ar) 132.65 210.62 T
(gument is computed and r) 249.06 210.62 T
(eturned only if) 377.84 210.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 132.65 196.62 T
(gument is false.) 182.3 196.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 363.83 126.65 189.08 2 L
V
0.25 H
0 Z
N
477.65 363.83 477.65 189.08 2 L
V
N
126.52 363.95 477.77 363.95 2 L
V
N
126.52 188.95 477.77 188.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 169
%%Page: "156" 170
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(156) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The syntax for the) 99.65 665.62 T
4 10 Q
(if) 190.28 665.62 T
1 11 Q
( contr) 202.28 665.62 T
(ol str) 230.05 665.62 T
(uctur) 254.52 665.62 T
(e allows) 280.4 665.62 T
4 10 Q
(elseif) 322.91 665.62 T
1 11 Q
( clauses, which makes this) 358.91 665.62 T
(style of conditionalization slightly mor) 99.65 651.62 T
(e compact:) 288.01 651.62 T
4 9 Q
(define method interpret-votes) 99.65 630.95 T
(\050#key yes :: <nonnegative-integer> = 0, no :: <nonnegative-integer> = 0\051) 121.25 619.95 T
(=> \050interpretation :: <string>\051) 105.05 608.95 T
(if \050yes > 0 & no = 0\051) 110.45 597.95 T
("unanimously approved";) 121.25 586.95 T
(elseif \050yes > no\051) 110.45 575.95 T
("approved";) 121.25 564.95 T
(elseif \050yes = no\051) 110.45 553.95 T
("tie";) 121.25 542.95 T
(else) 110.45 531.95 T
("not approved";) 121.25 520.95 T
(end if;) 110.45 509.95 T
(end method interpret-votes;) 99.65 498.95 T
3 13 Q
(11.5.2  Branc) 99.65 469.29 T
(hing with) 165.34 469.29 T
4 12 Q
(case) 215.09 469.29 T
1 11 Q
(Dylan also pr) 99.65 449.62 T
(ovides the) 165.01 449.62 T
4 10 Q
(case) 217.84 449.62 T
1 11 Q
( contr) 241.84 449.62 T
(ol str) 269.62 449.62 T
(uctur) 294.08 449.62 T
(e to give you an alternative way to) 319.96 449.62 T
(expr) 99.65 435.62 T
(ess the branching style shown in Section 1) 121.35 435.62 T
(1.5.1:) 324.89 435.62 T
4 9 Q
(define method interpret-votes) 99.65 414.95 T
(\050#key yes :: <nonnegative-integer> = 0, no :: <nonnegative-integer> = 0\051) 121.25 403.95 T
(=> \050interpretation :: <string>\051) 105.05 392.95 T
(case \050yes > 0 & no = 0\051 => "unanimously approved";) 110.45 381.95 T
(\050yes > no\051) 137.45 370.95 T
(=> "approved";) 240.05 370.95 T
(\050yes = no\051) 137.45 359.95 T
(=> "tie";) 240.05 359.95 T
(otherwise) 137.45 348.95 T
(=> "not approved";) 240.05 348.95 T
(end case;) 110.45 337.95 T
(end method interpret-votes;) 99.65 326.95 T
1 11 Q
(The decision of whether to use) 99.65 306.62 T
4 10 Q
(if) 251.18 306.62 T
1 11 Q
( with) 263.18 306.62 T
4 10 Q
(elseif) 291.05 306.62 T
1 11 Q
( and) 327.05 306.62 T
4 10 Q
(else) 351.17 306.62 T
1 11 Q
(, as opposed to using) 375.17 306.62 T
4 10 Q
(case,) 99.65 292.62 T
1 11 Q
( is lar) 129.65 292.62 T
(gely a matter of personal style.) 155.86 292.62 T
3 13 Q
(11.5.3  Branc) 99.65 261.29 T
(hing with) 165.34 261.29 T
4 12 Q
(select) 215.09 261.29 T
1 11 Q
(In certain situations, you ar) 99.65 241.62 T
(e working with a particular two-ar) 232.54 241.62 T
(gument pr) 400.66 241.62 T
(edicate) 451.89 241.62 T
(\050such as) 99.65 227.62 T
4 10 Q
(==) 141.56 227.62 T
1 11 Q
( or) 153.56 227.62 T
4 10 Q
(<) 169.41 227.62 T
1 11 Q
(\051. The value of the \336rst ar) 175.41 227.62 T
(gument to the pr) 297.38 227.62 T
(edicate will always be) 378.95 227.62 T
(the same, and you would like to perform dif) 99.65 213.62 T
(fer) 314.63 213.62 T
(ent actions based on the second) 327.71 213.62 T
(value. Y) 99.65 199.62 T
(ou can use both) 138.29 199.62 T
4 10 Q
(if) 217.36 199.62 T
1 11 Q
( and) 229.36 199.62 T
4 10 Q
(case) 253.48 199.62 T
1 11 Q
( to handle this situation, but the) 277.48 199.62 T
4 10 Q
(select) 434.76 199.62 T
1 11 Q
(contr) 99.65 185.62 T
(ol str) 124.67 185.62 T
(uctur) 149.14 185.62 T
(e is mor) 175.02 185.62 T
(e concise. The following example interpr) 213.52 185.62 T
(ets traf) 410.78 185.62 T
(\336c-light) 443.95 185.62 T
(colors:) 99.65 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 170
%%Page: "157" 171
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.5 Conditional execution) 404.54 702.62 T
2 F
(157) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method color-action) 99.65 666.95 T
(\050color :: <symbol>\051 => \050action :: <symbol>\051) 121.25 655.95 T
(select \050color\051) 110.45 644.95 T
(#"red") 121.25 633.95 T
(=> #"stop";) 175.25 633.95 T
(#"yellow") 121.25 622.95 T
(=> #"slow";) 175.25 622.95 T
(#"green") 121.25 611.95 T
(=> #"go";) 175.25 611.95 T
(end select;) 110.45 600.95 T
(end method color-action;) 99.65 589.95 T
1 11 Q
-0.37 (The) 99.65 569.62 P
4 10 Q
-0.8 (select) 120.44 569.62 P
1 11 Q
-0.37 ( contr) 156.45 569.62 P
-0.37 (ol str) 183.85 569.62 P
-0.37 (uctur) 207.95 569.62 P
-0.37 (e uses) 233.83 569.62 P
4 10 Q
-0.8 (==) 265.1 569.62 P
1 11 Q
-0.37 ( for the default pr) 277.1 569.62 P
-0.37 (edicate. For example, in the) 361.23 569.62 P
(pr) 99.65 555.62 T
(eceding) 110.41 555.62 T
4 10 Q
(select) 151.02 555.62 T
1 11 Q
( statement, the symbol) 187.02 555.62 T
4 10 Q
(#"stop") 299.38 555.62 T
1 11 Q
( will be r) 341.38 555.62 T
(eturned if) 383.91 555.62 T
4 10 Q
(color ==) 434.5 555.62 T
-0.15 (#"red") 99.65 541.62 P
1 11 Q
-0.07 (. If you r) 135.65 541.62 P
-0.07 (equir) 176.71 541.62 P
-0.07 (e a dif) 202.12 541.62 P
-0.07 (fer) 231.64 541.62 P
-0.07 (ent pr) 244.72 541.62 P
-0.07 (edicate, use the) 273.41 541.62 P
4 10 Q
-0.15 (by) 350.46 541.62 P
1 11 Q
-0.07 ( clause, as shown in the fol-) 362.46 541.62 P
(lowing example, which interpr) 99.65 527.62 T
(ets age fr) 249.61 527.62 T
(om a number r) 293.33 527.62 T
(epr) 365.39 527.62 T
(esenting years:) 381.41 527.62 T
4 9 Q
(define method interpret-age) 99.65 506.95 T
(\050age :: <nonnegative-integer>\051 => \050description :: <string>\051) 121.25 495.95 T
(select \050age by \134<\051) 110.45 484.95 T
(13) 121.25 473.95 T
(=> "youngster";) 175.25 473.95 T
(20) 121.25 462.95 T
(=> "teenager";) 175.25 462.95 T
(60) 121.25 451.95 T
(=> "adult";) 175.25 451.95 T
(otherwise) 121.25 440.95 T
(=> "senior";) 175.25 440.95 T
(end select;) 110.45 429.95 T
(end method interpret-age;) 99.65 418.95 T
1 11 Q
-0.42 (The pr) 99.65 398.62 P
-0.42 (eceding method r) 131.15 398.62 P
-0.42 (eturns the string) 215.51 398.62 P
4 10 Q
-0.92 ("youngster") 296.96 398.62 P
1 11 Q
-0.42 ( when pr) 362.96 398.62 P
-0.42 (ovided an age less) 405.62 398.62 P
(then 13; r) 99.65 384.62 T
(eturns) 144.7 384.62 T
4 10 Q
("teenager") 178.35 384.62 T
1 11 Q
( when the age is between 13 and 20; and r) 238.35 384.62 T
(eturns) 440.3 384.62 T
4 10 Q
("adult") 99.65 370.62 T
1 11 Q
( when the age is between 20 and 60. In all other cases, it r) 141.65 370.62 T
(eturns) 418.11 370.62 T
4 10 Q
("senior") 99.65 356.62 T
1 11 Q
(.) 147.65 356.62 T
3 13 Q
(11.5.4  T) 99.65 325.29 T
(ab) 140.88 325.29 T
(les: Dynamic associations) 153.23 325.29 T
1 11 Q
(In Section 1) 99.65 305.62 T
(1.5.3, we saw how the) 155.27 305.62 T
4 10 Q
(color-action) 264.39 305.62 T
1 11 Q
( method associated traf) 336.39 305.62 T
(\336c-light) 449.23 305.62 T
(colors with actions by using) 99.65 291.62 T
4 10 Q
(select) 238.32 291.62 T
1 11 Q
(. These associations ar) 274.33 291.62 T
(e) 381.6 291.62 T
0 F
(static) 389.62 291.62 T
1 F
(. They ar) 413.64 291.62 T
(e deter-) 456.07 291.62 T
(mined at compile time, and you cannot change them without r) 99.65 277.62 T
(ecompiling the) 403.38 277.62 T
4 10 Q
(color-action) 99.65 263.62 T
1 11 Q
( method. Sometimes, it is useful to associate one object with) 171.65 263.62 T
(another) 99.65 249.62 T
0 F
(dynamically) 139.91 249.62 T
1 F
(, while the pr) 193.28 249.62 T
(ogram is r) 257.54 249.62 T
(unning. Collections ar) 306.84 249.62 T
(e good data) 414.12 249.62 T
-0.15 (str) 99.65 235.62 P
-0.15 (uctur) 112.15 235.62 P
-0.15 (es for this purpose. How could we r) 138.04 235.62 P
-0.15 (ewrite) 311.32 235.62 P
4 10 Q
-0.32 (color-action) 344.77 235.62 P
1 11 Q
-0.15 ( so that it uses a) 416.77 235.62 P
(collection to associate colors with actions?) 99.65 221.62 T
4 9 Q
(define variable *color-action-table* = make\050<table>, size: 3\051;) 99.65 200.95 T
(*color-action-table*[#"red"]) 99.65 181.95 T
(:= #"stop";) 272.45 181.95 T
(*color-action-table*[#"yellow"]) 99.65 170.95 T
(:= #"slow";) 272.45 170.95 T
(*color-action-table*[#"green"]) 99.65 159.95 T
(:= #"go";) 272.45 159.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 171
%%Page: "158" 172
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(158) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method color-action \050color :: <symbol>\051 => \050action :: <symbol>\051) 99.65 666.95 T
(*color-action-table*[color];) 110.45 655.95 T
(end method color-action;) 99.65 644.95 T
1 11 Q
(The tables pr) 99.65 624.62 T
(ovided by Dylan use) 162.62 624.62 T
4 10 Q
(==) 266.25 624.62 T
1 11 Q
( to compar) 278.25 624.62 T
(e keys.) 330.21 624.62 T
(During the execution of the pr) 126.65 610.62 T
(ogram, we could add new associations to) 273.48 610.62 T
4 10 Q
-0.1 (*color-action-table*) 99.65 596.62 P
1 11 Q
-0.05 (, or could change or r) 219.65 596.62 P
-0.05 (emove existing associations. T) 322.78 596.62 P
-0.05 (ables) 468.23 596.62 P
(gr) 99.65 582.62 T
(ow as necessary to accommodate new associations that ar) 109.91 582.62 T
(e added.) 389.59 582.62 T
3 13 Q
(11.5.5  Sear) 99.65 551.29 T
(c) 158.13 551.29 T
(h of arra) 163.97 551.29 T
(ys with) 206.43 551.29 T
4 12 Q
(for) 245.53 551.29 T
3 13 Q
( and) 267.13 551.29 T
4 12 Q
(block) 292.02 551.29 T
1 11 Q
(Suppose that you wanted to sear) 99.65 531.62 T
(ch a two-dimensional array) 258.62 531.62 T
(, and to r) 390.95 531.62 T
(eturn the) 434.31 531.62 T
(\336rst number gr) 99.65 517.62 T
(eater than a given value.) 173.11 517.62 T
4 9 Q
(define method find-larger-than) 99.65 496.95 T
(\0502d-array :: <array>, value :: <integer>\051) 121.25 485.95 T
(=> \050result :: type-union\050singleton\050#f\051, <integer>\051\051) 105.05 474.95 T
(let first-dimension = dimension\0502d-array, 0\051;) 110.45 463.95 T
(let second-dimension = dimension\0502d-array, 1\051;) 110.45 452.95 T
(block \050return\051) 110.45 441.95 T
(for \050i from 0 below first-dimension\051) 121.25 430.95 T
(for \050j from 0 below second-dimension\051) 132.05 419.95 T
(if \0502d-array[i, j] > value\051) 142.85 408.95 T
(return\0502d-array[i, j]\051;) 153.65 397.95 T
(end if;) 142.85 386.95 T
(end for;) 132.05 375.95 T
(end for;) 121.25 364.95 T
(#f;) 121.25 353.95 T
(end block;) 110.45 342.95 T
(end method find-larger-than;) 99.65 331.95 T
1 11 Q
(In the pr) 99.65 311.62 T
(eceding example, the) 141.27 311.62 T
4 10 Q
(block) 246.63 311.62 T
1 11 Q
( statement binds the variable) 276.63 311.62 T
4 10 Q
(return) 419.6 311.62 T
1 11 Q
( to a) 455.6 311.62 T
2 F
(nonlocal exit procedure) 99.65 297.62 T
1 F
(. If this exit pr) 217.58 297.62 T
(ocedur) 285.04 297.62 T
(e is called while the) 318.7 297.62 T
4 10 Q
(block) 416.87 297.62 T
1 11 Q
( is in) 446.87 297.62 T
(ef) 99.65 283.62 T
(fect, it will r) 108.38 283.62 T
(eturn immediately fr) 166.49 283.62 T
(om the) 267.53 283.62 T
4 10 Q
(block) 304.01 283.62 T
1 11 Q
( statement, using any pr) 334.01 283.62 T
(ovided) 451.12 283.62 T
(ar) 99.65 269.62 T
(guments as r) 109.29 269.62 T
(eturn values. Thus, if an element of) 171.49 269.62 T
4 10 Q
(2d-array) 345.54 269.62 T
1 11 Q
( is gr) 393.54 269.62 T
(eater than) 417.17 269.62 T
4 10 Q
(value) 99.65 255.62 T
1 11 Q
(, then this element will be r) 129.65 255.62 T
(eturned immediately fr) 261.39 255.62 T
(om the) 374.42 255.62 T
4 10 Q
(block) 410.9 255.62 T
1 11 Q
(, and thus) 440.9 255.62 T
-0.22 (fr) 99.65 241.62 P
-0.22 (om the method. Array elements can be accessed with the squar) 107.46 241.62 P
-0.22 (e-bracket syntax,) 411.17 241.62 P
(or with the function) 99.65 227.62 T
4 10 Q
(aref) 199.4 227.62 T
1 11 Q
(. \050For mor) 223.4 227.62 T
(e information about r) 271.64 227.62 T
(efer) 375.14 227.62 T
(encing elements of) 393.49 227.62 T
(an array) 99.65 213.62 T
(, see Section 12.1.3, page 164.\051 If the entir) 138.88 213.62 T
(e array is sear) 335.85 213.62 T
(ched, and no ele-) 402.62 213.62 T
-0.22 (ment is found that is gr) 99.65 199.62 P
-0.22 (eater than) 211.74 199.62 P
4 10 Q
-0.49 (value) 262.66 199.62 P
1 11 Q
-0.22 (, then the) 292.66 199.62 P
4 10 Q
-0.49 (for) 339.9 199.62 P
1 11 Q
-0.22 ( loops exit normally and the) 357.9 199.62 P
4 10 Q
(block) 99.65 185.62 T
1 11 Q
( statement r) 129.65 185.62 T
(eturns the last value in the) 186.87 185.62 T
4 10 Q
(block) 318.15 185.62 T
1 11 Q
( body) 348.15 185.62 T
(, which in this case is) 374.61 185.62 T
(false. W) 99.65 171.62 T
(e use the) 137.43 171.62 T
4 10 Q
(type-union) 182.77 171.62 T
1 11 Q
( type-generating function to cr) 242.77 171.62 T
(eate a type that per-) 390.63 171.62 T
(mits either false or an integer to be r) 99.65 157.62 T
(eturned fr) 274.71 157.62 T
(om this method.) 323.5 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 172
%%Page: "159" 173
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11.6 Summary) 450.89 702.62 T
2 F
(159) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(11.5.6  Sear) 99.65 664.29 T
(c) 158.13 664.29 T
(h of arra) 163.97 664.29 T
(ys with) 206.43 664.29 T
4 12 Q
(find-key) 245.53 664.29 T
1 11 Q
(In Dylan, we can access multidimensional arrays as though they ar) 99.65 644.62 T
(e linearized) 424.25 644.62 T
-0.4 (one-dimensional vectors by using the) 99.65 630.62 P
4 10 Q
-0.87 (element) 282.46 630.62 P
1 11 Q
-0.4 ( generic function. Dylan pr) 324.46 630.62 P
-0.4 (ovides a) 453.37 630.62 P
4 10 Q
-0.13 (find-key) 99.65 616.62 P
1 11 Q
-0.06 ( generic function that uses) 147.65 616.62 P
4 10 Q
-0.13 (element) 277.67 616.62 P
1 11 Q
-0.06 ( to \336nd the index \050or key\051 that corr) 319.67 616.62 P
-0.06 (e-) 486.72 616.62 P
(sponds to a desir) 99.65 602.62 T
(ed value in a collection. Her) 182.06 602.62 T
(e, we r) 317.68 602.62 T
(ewrite) 349.79 602.62 T
4 10 Q
(find-larger-than) 383.38 602.62 T
1 11 Q
( to) 479.38 602.62 T
(use) 99.65 588.62 T
4 10 Q
(find-key) 118.96 588.62 T
1 11 Q
(:) 166.96 588.62 T
4 9 Q
(define method find-larger-than) 99.65 567.95 T
(\050array :: <array>, value :: <integer>\051) 121.25 556.95 T
(=> \050result :: type-union\050singleton\050#f\051, <integer>\051\051) 105.05 545.95 T
(let index) 110.45 534.95 T
(= find-key\050array, method \050array-element\051 array-element > value end\051;) 121.25 523.95 T
(index & array[index];) 110.45 512.95 T
(end method find-larger-than;) 99.65 501.95 T
1 11 Q
-0.18 (The) 99.65 481.62 P
4 10 Q
-0.4 (find-key) 120.63 481.62 P
1 11 Q
-0.18 ( generic function sear) 168.63 481.62 P
-0.18 (ches an array) 272.17 481.62 P
-0.18 (, calling the function that we pr) 335.01 481.62 P
-0.18 (o-) 485.98 481.62 P
-0.18 (vided on each element. If our function ever r) 99.65 467.62 P
-0.18 (eturns tr) 314.63 467.62 P
-0.18 (ue,) 355.95 467.62 P
4 10 Q
-0.39 (find-key) 373.17 467.62 P
1 11 Q
-0.18 ( r) 421.17 467.62 P
-0.18 (eturns the lin-) 427.88 467.62 P
(earized index of the array element containing the value. For a two-dimensional) 99.65 453.62 T
-0.19 (array) 99.65 439.62 P
-0.19 (, the linearized index is the index that would be the appr) 124.23 439.62 P
-0.19 (opriate key of a one-) 396.9 439.62 P
(dimensional array that we could constr) 99.65 425.62 T
(uct by placing the r) 290.24 425.62 T
(ows of the two-dimen-) 383.87 425.62 T
(sional array one after the other) 99.65 411.62 T
(. Rows in a two-dimensional array ar) 248.27 411.62 T
(e number) 427.98 411.62 T
(ed) 474.24 411.62 T
-0.25 (with the \336rst subscript, and the column within those r) 99.65 397.62 P
-0.25 (ows is number) 359.24 397.62 P
-0.25 (ed by the sec-) 430.21 397.62 P
(ond subscript.) 99.65 383.62 T
-0.45 (If our function never r) 126.65 369.62 P
-0.45 (eturns tr) 232.62 369.62 P
-0.45 (ue for any element,) 273.66 369.62 P
4 10 Q
-0.98 (find-key) 368.25 369.62 P
1 11 Q
-0.45 ( r) 416.25 369.62 P
-0.45 (eturns false. In) 422.7 369.62 P
(this example) 99.65 355.62 T
4 10 Q
(&) 164.24 355.62 T
1 11 Q
( is tr) 170.24 355.62 T
(uly used as a contr) 191.45 355.62 T
(ol str) 282.37 355.62 T
(uctur) 306.84 355.62 T
(e. If) 332.72 355.62 T
4 10 Q
(index) 353.61 355.62 T
1 11 Q
( is false, then) 383.61 355.62 T
4 10 Q
(&) 449.18 355.62 T
1 11 Q
( will) 455.18 355.62 T
(r) 99.65 341.62 T
(eturn false without executing the array access. If) 103.79 341.62 T
4 10 Q
(index) 341 341.62 T
1 11 Q
( is tr) 371 341.62 T
(ue, then the array) 392.21 341.62 T
(access occurs, and that is the value of the) 99.65 327.62 T
4 10 Q
(&) 300.99 327.62 T
1 11 Q
( expr) 306.99 327.62 T
(ession, and thus the value) 331.45 327.62 T
(r) 99.65 313.62 T
(eturned fr) 103.79 313.62 T
(om the method.) 152.58 313.62 T
3 15 Q
(11.6  Summar) 99.65 273.95 T
(y) 179.76 273.95 T
1 11 Q
(In this chapter) 99.65 253.62 T
(, we cover) 168.89 253.62 T
(ed the following:) 218.11 253.62 T
(\245) 108.65 233.62 T
(W) 126.65 233.62 T
(e showed a selection of built-in collection classes, including strings, lists,) 136.64 233.62 T
(vectors, tables, and arrays.) 126.65 219.62 T
(\245) 108.65 199.62 T
-0.06 (W) 126.65 199.62 P
-0.06 (e showed various iteration facilities and contr) 136.64 199.62 P
-0.06 (ol str) 357.93 199.62 P
-0.06 (uctur) 382.33 199.62 P
-0.06 (es, including) 408.21 199.62 P
4 10 Q
-0.14 (for) 473.03 199.62 P
1 11 Q
-0.06 (,) 490.21 199.62 P
4 10 Q
(do) 126.65 185.62 T
1 11 Q
(,) 138.65 185.62 T
4 10 Q
(map) 144.15 185.62 T
1 11 Q
(,) 162.15 185.62 T
4 10 Q
(while) 167.65 185.62 T
1 11 Q
(,) 197.65 185.62 T
4 10 Q
(if) 203.15 185.62 T
1 11 Q
(,) 215.15 185.62 T
4 10 Q
(case) 220.65 185.62 T
1 11 Q
(,) 244.65 185.62 T
4 10 Q
(select) 250.15 185.62 T
1 11 Q
(,) 286.15 185.62 T
4 10 Q
(block) 291.65 185.62 T
1 11 Q
(,) 321.65 185.62 T
4 10 Q
(&) 327.15 185.62 T
1 11 Q
(, and) 333.15 185.62 T
4 10 Q
(|) 360.02 185.62 T
1 11 Q
(.) 366.02 185.62 T
(\245) 108.65 165.62 T
(W) 126.65 165.62 T
(e showed a simple example of r) 136.64 165.62 T
(ecursion.) 289.86 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 173
%%Page: "160" 174
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(160) 63.65 702.62 T
0 F
(Chapter 11) 87.4 702.62 T
(Collections and Control Flow) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(W) 126.65 665.62 T
(e showed some basic collection functions:) 136.64 665.62 T
4 10 Q
(element) 341.46 665.62 T
1 11 Q
(,) 383.46 665.62 T
4 10 Q
(size) 388.96 665.62 T
1 11 Q
(, and) 412.96 665.62 T
4 10 Q
(find-key) 439.83 665.62 T
1 11 Q
(.) 486.61 665.62 T
(\245) 108.65 645.62 T
(W) 126.65 645.62 T
(e showed some basic sequence functions:) 136.64 645.62 T
4 10 Q
(copy-sequence) 339.37 645.62 T
1 11 Q
(, and) 417.37 645.62 T
4 10 Q
(reverse) 444.24 645.62 T
1 11 Q
(.) 486.24 645.62 T
(\245) 108.65 625.62 T
(W) 126.65 625.62 T
(e showed additional collection functions:) 136.64 625.62 T
4 10 Q
(head) 338.76 625.62 T
1 11 Q
(,) 362.76 625.62 T
4 10 Q
(tail) 368.26 625.62 T
1 11 Q
(,) 392.26 625.62 T
4 10 Q
(pair) 397.76 625.62 T
1 11 Q
(,) 420.95 625.62 T
4 10 Q
(list) 426.45 625.62 T
1 11 Q
(, and) 450.45 625.62 T
4 10 Q
(vector) 126.65 611.62 T
1 11 Q
(.) 161.83 611.62 T
(\245) 108.65 591.62 T
(W) 126.65 591.62 T
(e explor) 136.64 591.62 T
(ed basic sequence algorithms, and found that, although the vari-) 175.57 591.62 T
-0.19 (ous sequence classes ar) 126.65 577.62 P
-0.19 (e r) 238.66 577.62 P
-0.19 (elated, algorithms that ar) 250.63 577.62 P
-0.19 (e ef) 372.05 577.62 P
-0.19 (\336cient for one class of) 388.6 577.62 P
(sequence may not be appr) 126.65 563.62 T
(opriate for a dif) 253.74 563.62 T
(fer) 329.41 563.62 T
(ent class of sequence.) 342.49 563.62 T
(\245) 108.65 543.62 T
(W) 126.65 543.62 T
(e discussed destr) 136.64 543.62 T
(uctive versus nondestr) 219.32 543.62 T
(uctive functions.) 329.71 543.62 T
(\245) 108.65 523.62 T
(W) 126.65 523.62 T
(e demonstrated the) 136.64 523.62 T
4 10 Q
(curry) 233.19 523.62 T
1 11 Q
( function, which generates functions.) 263.19 523.62 T
(\245) 108.65 503.62 T
(W) 126.65 503.62 T
(e showed several examples of the use of closur) 136.64 503.62 T
(es as ar) 363.2 503.62 T
(guments to) 398.45 503.62 T
(iterators.) 126.65 489.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 174
%%Page: "161" 175
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(161) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(12) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(12) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Functions) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(Functions ar) 99.65 449.62 T
(e ubiquitous in Dylan. Generic functions and methods \321 the two) 159.94 449.62 T
-0.27 (kinds of function \321 ar) 99.65 435.62 P
-0.27 (e the primary means of specialization. Many common oper-) 207.75 435.62 P
(ations, such as slot r) 99.65 421.62 T
(efer) 197.11 421.62 T
(ences and arithmetic operations, ar) 215.46 421.62 T
(e accomplished) 385.24 421.62 T
(thr) 99.65 407.62 T
(ough function calls. In Dylan, unlike in many languages, functions ar) 113.78 407.62 T
(e \336rst-) 449.4 407.62 T
-0.14 (class objects. They can be the values of variables or slots, ar) 99.65 393.62 P
-0.14 (guments to other func-) 384.99 393.62 P
(tions, or values r) 99.65 379.62 T
(eturned by functions. Dylan has functions that build new func-) 180.49 379.62 T
(tions out of existing functions. Much of the power of Dylan arises thr) 99.65 365.62 T
(ough its) 434.54 365.62 T
(sophisticated tr) 99.65 351.62 T
(eatment of functions.) 174.43 351.62 T
(This chapter discusses general aspects of the operation of functions in) 126.65 337.62 T
(Dylan. It does not describe all aspects of functions. In particular) 99.65 323.62 T
(, we discuss the) 408.05 323.62 T
(pr) 99.65 309.62 T
(ocess of method dispatch within generic functions elsewher) 110.41 309.62 T
(e \050see Sections 5.5,) 400.37 309.62 T
(6.2, 9.3, and 18.4\051. This chapter covers thr) 99.65 295.62 T
(ee main topics:) 299.31 295.62 T
2 F
(1.) 108.65 275.62 T
1 F
(The syntax of function calls, including abbr) 126.65 275.62 T
(eviations for function calls) 336.73 275.62 T
2 F
(2.) 108.65 255.62 T
1 F
(The function-calling pr) 126.65 255.62 T
(otocol, and particularly the interaction between a) 238.26 255.62 T
(function and its caller) 126.65 241.62 T
2 F
(3.) 108.65 221.62 T
1 F
(The uses of functions as objects, including ways of cr) 126.65 221.62 T
(eating and operating) 383.05 221.62 T
(on functions) 126.65 207.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 175
%%Page: "162" 176
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(162) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(12.1  Function-calling syntax) 99.65 662.95 T
1 11 Q
(This section describes the syntax of Dylan function calls. An explicit function call) 99.65 642.62 T
(consists of the operand followed by the ar) 99.65 628.62 T
(guments enclosed in par) 303.09 628.62 T
(entheses and) 422 628.62 T
(separated by commas. Several other syntactic str) 99.65 614.62 T
(uctur) 335.55 614.62 T
(es in Dylan ar) 361.44 614.62 T
(e also abbr) 428.6 614.62 T
(e-) 480.56 614.62 T
(viations for function calls, including the following:) 99.65 600.62 T
(\245) 108.65 580.62 T
(Slot r) 126.65 580.62 T
(efer) 152.11 580.62 T
(ences) 170.46 580.62 T
(\245) 108.65 560.62 T
(Refer) 126.65 560.62 T
(ences to elements of collections) 152.34 560.62 T
(\245) 108.65 540.62 T
(Most unary and binary operator calls) 126.65 540.62 T
(\245) 108.65 520.62 T
(Certain assignment operations) 126.65 520.62 T
(The r) 99.65 500.62 T
(emainder of this section describes these syntactic forms and the equivalent) 124.96 500.62 T
(function calls. Unless otherwise noted, all expr) 99.65 486.62 T
(essions that make up any of these) 326.14 486.62 T
(function calls ar) 99.65 472.62 T
(e evaluated fr) 177.02 472.62 T
(om left to right. \050A notable exception is an expr) 243.49 472.62 T
(es-) 472.32 472.62 T
(sion containing the assignment operator) 99.65 458.62 T
(, discussed in Section 12.1.6.\051 The com-) 294.25 458.62 T
-0.25 (mon left-to-right r) 99.65 444.62 P
-0.25 (ule makes it easy to understand the or) 187.32 444.62 P
-0.25 (der of execution of Dylan) 370.8 444.62 P
(code. But it also means that certain syntactic forms that we call) 99.65 430.62 T
0 F
(equivalent) 406.7 430.62 T
1 F
( \321 that) 452.75 430.62 T
-0.24 (is, syntactic forms that generally r) 99.65 416.62 P
-0.24 (esult in calls to the same function with the same) 262.65 416.62 P
(ar) 99.65 402.62 T
(guments \321 dif) 109.29 402.62 T
(fer in the or) 181.57 402.62 T
(der of evaluation of their components. The compo-) 238.1 402.62 T
-0.01 (nents can appear in dif) 99.65 388.62 P
-0.01 (fer) 210.54 388.62 P
-0.01 (ent or) 223.62 388.62 P
-0.01 (ders in otherwise equivalent syntactic forms. Usu-) 251.77 388.62 P
(ally) 99.65 374.62 T
(, the or) 116.44 374.62 T
(der of evaluation makes no dif) 150.1 374.62 T
(fer) 298.43 374.62 T
(ence, and you can use whichever of) 311.51 374.62 T
(the equivalent syntactic forms you \336nd most convenient.) 99.65 360.62 T
3 13 Q
(12.1.1  Explicit function calls) 99.65 329.29 T
1 11 Q
(The Dylan syntax for an explicit function call has two parts:) 99.65 309.62 T
2 F
(1.) 108.65 289.62 T
1 F
-0.09 (The function to be called \321 This is an) 126.65 289.62 P
2 F
-0.09 (operand) 311.28 289.62 P
1 F
-0.09 ( that is evaluated to yield the) 352.84 289.62 P
(function itself. Usually) 126.65 275.62 T
(, the operand is a r) 235.91 275.62 T
(efer) 326.03 275.62 T
(ence to a variable or constant) 344.38 275.62 T
-0.03 (that names the function, although it can be any expr) 126.65 261.62 P
-0.03 (ession \050except an opera-) 379.03 261.62 P
(tor call\051 whose value is a function. \050For information on operator calls, see) 126.65 247.62 T
(Sections 12.1.4 and 12.1.5.\051) 126.65 233.62 T
2 F
(2.) 108.65 213.62 T
1 F
-0.05 (The ar) 126.65 213.62 P
-0.05 (guments to which the function is applied \321 The ar) 157.41 213.62 P
-0.05 (guments ar) 403.84 213.62 P
-0.05 (e r) 458.57 213.62 P
-0.05 (epr) 470.69 213.62 P
-0.05 (e-) 486.72 213.62 P
(sented by a series of expr) 126.65 199.62 T
(essions, enclosed in par) 248.79 199.62 T
(entheses and separated by) 362.94 199.62 T
(commas. Each expr) 126.65 185.62 T
(ession is evaluated, and its value is passed to the func-) 220.59 185.62 T
(tion as an ar) 126.65 171.62 T
(gument.) 185.81 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 176
%%Page: "163" 177
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.1 Function-calling syntax) 396.44 702.62 T
2 F
(163) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.15 (In the following function call, the function is the value of the variable) 99.65 665.62 P
4 10 Q
-0.33 (truncate/) 436.3 665.62 P
1 11 Q
-0.15 (;) 490.3 665.62 P
(the two ar) 99.65 651.62 T
(guments ar) 148.82 651.62 T
(e the value of the variable) 203.6 651.62 T
4 10 Q
(n) 331.68 651.62 T
1 11 Q
( and the number) 337.68 651.62 T
4 10 Q
(3) 421.01 651.62 T
1 11 Q
(:) 427.01 651.62 T
4 9 Q
(truncate/\050n, 3\051;) 99.65 630.95 T
1 11 Q
(A function can be obtained in other ways: for example, it might be an element of) 99.65 610.62 T
(an array) 99.65 596.62 T
(, the value of a slot of an instance, or the value r) 138.88 596.62 T
(eturned by a call to) 370.14 596.62 T
(another function. The following example calls the function that is the element of) 99.65 582.62 T
(an) 99.65 568.62 T
4 10 Q
(operations) 114.3 568.62 T
1 11 Q
( array designated by the constant) 174.3 568.62 T
4 10 Q
($trunc) 338.54 568.62 T
1 11 Q
(:) 374.54 568.62 T
4 9 Q
(operations[$trunc]\050n, 3\051;) 99.65 547.95 T
3 13 Q
(12.1.2  Slot ref) 99.65 518.29 T
(erences) 171.85 518.29 T
1 11 Q
-0.14 (A slot r) 99.65 498.62 P
-0.14 (efer) 135.03 498.62 P
-0.14 (ence is a r) 153.38 498.62 P
-0.14 (efer) 200.54 498.62 P
-0.14 (ence to the value of a slot of an instance. The syntax for a) 218.89 498.62 P
(slot r) 99.65 484.62 T
(efer) 124 484.62 T
(ence has two parts, separated by a period:) 142.35 484.62 T
(\245) 108.65 464.62 T
(An operand whose value is the instance) 126.65 464.62 T
(\245) 108.65 444.62 T
(The name of the slot\325s getter generic function) 126.65 444.62 T
(In the following slot r) 99.65 424.62 T
(efer) 204.59 424.62 T
(ence, the function) 222.94 424.62 T
4 10 Q
(get-employee-named) 311.79 424.62 T
1 11 Q
( r) 419.79 424.62 T
(eturns an) 426.69 424.62 T
(instance, which has a slot whose getter is named) 99.65 410.62 T
4 10 Q
(employee-number) 337.8 410.62 T
1 11 Q
(:) 427.8 410.62 T
4 9 Q
(get-employee-named\050"Jane"\051.employee-number;) 99.65 389.95 T
1 11 Q
-0.03 (Note that the operand that yields the instance can itself be a slot r) 99.65 369.62 P
-0.03 (efer) 416.44 369.62 P
-0.03 (ence, so slot) 434.79 369.62 P
(r) 99.65 355.62 T
(efer) 103.79 355.62 T
(ences can be chained:) 122.14 355.62 T
4 9 Q
(plant.manager.employee-number;) 99.65 334.95 T
1 11 Q
(Every slot value in Dylan is obtained by a call to the slot\325s getter generic function) 99.65 314.62 T
-0.32 (\050although the compiler can often optimize this generic function call to a dir) 99.65 300.62 P
-0.32 (ect slot) 459.6 300.62 P
(access\051. A slot r) 99.65 286.62 T
(efer) 174.34 286.62 T
(ence is just an abbr) 192.69 286.62 T
(eviation for a function call. W) 284.55 286.62 T
(ith one excep-) 427.9 286.62 T
(tion, the following examples ar) 99.65 272.62 T
(e equivalent:) 250.37 272.62 T
4 9 Q
(plant.manager;) 99.65 251.95 T
(manager\050plant\051;) 99.65 240.95 T
1 11 Q
-0.09 (The one dif) 99.65 220.62 P
-0.09 (fer) 154.43 220.62 P
-0.09 (ence between these examples is that, in the \336rst,) 167.51 220.62 P
4 10 Q
-0.21 (plant) 401.92 220.62 P
1 11 Q
-0.09 ( is evaluated) 431.92 220.62 P
(\336rst, wher) 99.65 206.62 T
(eas in the second,) 149.39 206.62 T
4 10 Q
(manager) 237.38 206.62 T
1 11 Q
( is evaluated \336rst.) 279.38 206.62 T
(In fact, you can use the slot-r) 126.65 192.62 T
(efer) 266.27 192.62 T
(ence syntax for mor) 284.62 192.62 T
(e than slot r) 380.52 192.62 T
(efer) 437.53 192.62 T
(ences.) 455.88 192.62 T
(The object that is the value of the left side can be any object, and the function) 99.65 178.62 T
(named by the right side can be any function that can take the object as an ar) 99.65 164.62 T
(gu-) 466.85 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 177
%%Page: "164" 178
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(164) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.2 (ment. The function named by the right side is always called with the object that is) 99.65 665.62 P
(the value of the left side as its only ar) 99.65 651.62 T
(gument. Thus, using the) 279.96 651.62 T
4 10 Q
(plant.manager) 400.89 651.62 T
1 11 Q
(syntax is just another way of calling the function named by) 99.65 637.62 T
4 10 Q
(manager) 389.48 637.62 T
1 11 Q
( with the) 431.48 637.62 T
(object that is the value of) 99.65 623.62 T
4 10 Q
(plant) 223.23 623.62 T
1 11 Q
( as the only ar) 253.23 623.62 T
(gument. The) 321.03 623.62 T
4 10 Q
(plant) 385.41 623.62 T
1 11 Q
( object does not) 415.41 623.62 T
(have to have a) 99.65 609.62 T
4 10 Q
(manager) 172.51 609.62 T
1 11 Q
( slot.) 214.51 609.62 T
(In this book, we use slot-r) 126.65 595.62 T
(efer) 251.6 595.62 T
(ence syntax for) 269.95 595.62 T
(\245) 108.65 575.62 T
(A call to a getter generic function for a slot) 126.65 575.62 T
(\245) 108.65 555.62 T
(A call to a function that takes one ar) 126.65 555.62 T
(gument and r) 301.39 555.62 T
(eturns one value that) 367.38 555.62 T
(r) 126.65 541.62 T
(epr) 130.79 541.62 T
(esents a pr) 146.82 541.62 T
(operty of an object) 198.43 541.62 T
3 13 Q
(12.1.3  Element ref) 99.65 510.29 T
(erences) 193.18 510.29 T
1 11 Q
(Collections in Dylan include such data str) 99.65 490.62 T
(uctur) 302.41 490.62 T
(es as arrays, strings, lists, and) 328.29 490.62 T
(tables. Each collection has a mapping fr) 99.65 476.62 T
(om) 291.38 476.62 T
2 F
(keys) 309.85 476.62 T
1 F
( to) 333.07 476.62 T
2 F
(elements) 348.16 476.62 T
1 F
(. Dylan\325s syntax for) 393.37 476.62 T
(r) 99.65 462.62 T
(eferring to an element of a collection has two parts:) 103.79 462.62 T
2 F
(1.) 108.65 442.62 T
1 F
(An operand whose value is the collection) 126.65 442.62 T
2 F
(2.) 108.65 422.62 T
1 F
(An expr) 126.65 422.62 T
(ession, in squar) 166.06 422.62 T
(e brackets, whose value is the key that maps to the) 241.22 422.62 T
(desir) 126.65 408.62 T
(ed element of the collection) 150.65 408.62 T
-0.26 (If the collection is a multidimensional array) 99.65 388.62 P
-0.26 (, the key expr) 308.4 388.62 P
-0.26 (ession in squar) 373.07 388.62 P
-0.26 (e brackets) 444.96 388.62 P
(can be a series of expr) 99.65 374.62 T
(essions, separated by commas. Each expr) 205.82 374.62 T
(ession yields the) 405.29 374.62 T
(index for one dimension of the array) 99.65 360.62 T
(. \050Dylan array indices ar) 276.2 360.62 T
(e zer) 393.14 360.62 T
(o based.\051) 416.07 360.62 T
(The following example r) 126.65 346.62 T
(eturns the \336rst element of the array named by) 245.67 346.62 T
4 10 Q
(my-array) 99.65 332.62 T
1 11 Q
(:) 147.65 332.62 T
4 9 Q
(my-array[0];) 99.65 311.95 T
1 11 Q
(An element r) 99.65 291.62 T
(efer) 162.96 291.62 T
(ence, like a slot r) 181.31 291.62 T
(efer) 261.78 291.62 T
(ence, is an abbr) 280.12 291.62 T
(eviation for a function call.) 354.53 291.62 T
(The generic function) 99.65 277.62 T
4 10 Q
(element) 202.57 277.62 T
1 11 Q
( takes a collection and a key as ar) 244.57 277.62 T
(guments, and) 405.29 277.62 T
(r) 99.65 263.62 T
(eturns the element of the collection that is associated with the given key) 103.79 263.62 T
(. Except) 451.26 263.62 T
(for the or) 99.65 249.62 T
(der of evaluation, the following examples ar) 144.57 249.62 T
(e equivalent:) 359.12 249.62 T
4 9 Q
(my-array[0];) 99.65 228.95 T
(element\050my-array, 0\051;) 99.65 217.95 T
1 11 Q
-0.29 (For arrays of mor) 99.65 197.62 P
-0.29 (e than one dimension, the key expr) 183.51 197.62 P
-0.29 (ession in brackets is instead a) 351.91 197.62 P
(comma-separated series of expr) 99.65 183.62 T
(essions. In this case, the element r) 253.63 183.62 T
(efer) 416.89 183.62 T
(ence is an) 435.24 183.62 T
(abbr) 99.65 169.62 T
(eviation for a call to the) 121.46 169.62 T
4 10 Q
(aref) 238.49 169.62 T
1 11 Q
( generic function. This function takes an array) 262.49 169.62 T
-0.29 (and any number of indices as ar) 99.65 155.62 P
-0.29 (guments, and r) 253.31 155.62 P
-0.29 (eturns the element associated with) 326.13 155.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 178
%%Page: "165" 179
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.1 Function-calling syntax) 396.44 702.62 T
2 F
(165) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(the array indices. Except for the or) 99.65 665.62 T
(der of evaluation, the following examples ar) 266.47 665.62 T
(e) 481.02 665.62 T
(equivalent:) 99.65 651.62 T
4 9 Q
(my-array[0, 2];) 99.65 630.95 T
(aref\050my-array, 0, 2\051;) 99.65 619.95 T
3 13 Q
(12.1.4  Unar) 99.65 590.29 T
(y operator calls) 159.6 590.29 T
1 11 Q
(Dylan has two built-in unary operators,) 99.65 570.62 T
4 10 Q
(-) 295.26 570.62 T
1 11 Q
( and) 301.26 570.62 T
4 10 Q
(~) 325.38 570.62 T
1 11 Q
(. The syntax for a unary operator) 331.38 570.62 T
(call has two parts:) 99.65 556.62 T
2 F
(1.) 108.65 536.62 T
1 F
(The operator) 126.65 536.62 T
2 F
(2.) 108.65 516.62 T
1 F
(An operand) 126.65 516.62 T
(The) 99.65 496.62 T
4 10 Q
(-) 120.81 496.62 T
1 11 Q
( operator performs the arithmetic negation of its operand, and the) 126.81 496.62 T
4 10 Q
(~) 449.38 496.62 T
1 11 Q
( opera-) 455.38 496.62 T
(tor performs the logical negation. Both operator calls ar) 99.65 482.62 T
(e abbr) 368.28 482.62 T
(eviations for func-) 398.11 482.62 T
(tion calls. The following examples ar) 99.65 468.62 T
(e equivalent:) 277.73 468.62 T
4 9 Q
(- time-offset;) 99.65 447.95 T
(negative\050time-offset\051;) 99.65 436.95 T
1 11 Q
(The following examples also ar) 99.65 416.62 T
(e equivalent:) 250.95 416.62 T
4 9 Q
(~ test-condition\050cond\051;) 99.65 395.95 T
(\134~\050test-condition\050cond\051\051;) 99.65 384.95 T
1 11 Q
-0.15 (In the pr) 99.65 364.62 P
-0.15 (eceding example, we must escape) 140.97 364.62 P
4 10 Q
-0.33 (~) 307.06 364.62 P
1 11 Q
-0.15 ( with) 313.06 364.62 P
4 10 Q
-0.33 (\134) 340.62 364.62 P
1 11 Q
-0.15 ( so that Dylan interpr) 346.62 364.62 P
-0.15 (ets) 450.06 364.62 P
4 10 Q
-0.33 (~) 466.18 364.62 P
1 11 Q
-0.15 ( as a) 472.18 364.62 P
(variable name, instead of as an operator) 99.65 350.62 T
(. This syntax indicates an explicit call to) 293.03 350.62 T
(the function that is the value of the variable named) 99.65 336.62 T
4 10 Q
(~) 350.04 336.62 T
1 11 Q
(.) 356.04 336.62 T
3 13 Q
(12.1.5  Binar) 99.65 305.29 T
(y-operator calls) 162.57 305.29 T
1 11 Q
(Dylan has 16 built-in binary operators, of the following kinds:) 99.65 285.62 T
(\245) 108.65 265.62 T
(Arithmetic operations:) 126.65 265.62 T
4 10 Q
(+) 239.23 265.62 T
1 11 Q
(,) 245.23 265.62 T
4 10 Q
(-) 250.73 265.62 T
1 11 Q
(,) 256.73 265.62 T
4 10 Q
(*) 262.23 265.62 T
1 11 Q
(,) 268.23 265.62 T
4 10 Q
(/) 273.73 265.62 T
1 11 Q
(, and) 279.73 265.62 T
4 10 Q
(^) 306.61 265.62 T
1 11 Q
(\245) 108.65 245.62 T
(Comparisons:) 126.65 245.62 T
4 10 Q
(=) 197.06 245.62 T
1 11 Q
(,) 203.06 245.62 T
4 10 Q
(==) 208.56 245.62 T
1 11 Q
(,) 220.56 245.62 T
4 10 Q
(<) 226.06 245.62 T
1 11 Q
(,) 232.06 245.62 T
4 10 Q
(>) 237.56 245.62 T
1 11 Q
(,) 243.56 245.62 T
4 10 Q
(<=) 249.06 245.62 T
1 11 Q
(,) 261.06 245.62 T
4 10 Q
(>=) 266.56 245.62 T
1 11 Q
(,) 278.56 245.62 T
4 10 Q
(~=) 284.06 245.62 T
1 11 Q
(, and) 296.06 245.62 T
4 10 Q
(~==) 322.93 245.62 T
1 11 Q
(\245) 108.65 225.62 T
(Logical operations:) 126.65 225.62 T
4 10 Q
(&) 222.12 225.62 T
1 11 Q
( and) 228.12 225.62 T
4 10 Q
(|) 252.24 225.62 T
1 11 Q
(\245) 108.65 205.62 T
(Assignment:) 126.65 205.62 T
4 10 Q
(:=) 190.72 205.62 T
1 11 Q
(The syntax for a binary-operator call has thr) 99.65 185.62 T
(ee parts:) 313.23 185.62 T
2 F
(1.) 108.65 165.62 T
1 F
(An expr) 126.65 165.62 T
(ession that serves as the \336rst operand) 166.06 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 179
%%Page: "166" 180
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(166) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(2.) 108.65 665.62 T
1 F
(The operator) 126.65 665.62 T
2 F
(3.) 108.65 645.62 T
1 F
(An expr) 126.65 645.62 T
(ession that serves as the second operand) 166.06 645.62 T
-0.46 (All binary-operator calls, except those to the logical and assignment operators, ar) 99.65 625.62 P
-0.46 (e) 488.08 625.62 P
-0.04 (abbr) 99.65 611.62 P
-0.04 (eviations for calls to functions that have the same names as do the operators.) 121.46 611.62 P
(Except for the or) 99.65 597.62 T
(der of evaluation, the following examples ar) 180.07 597.62 T
(e equivalent:) 394.61 597.62 T
4 9 Q
(a + b;) 99.65 576.95 T
(\134+\050a, b\051;) 99.65 565.95 T
1 11 Q
(The) 99.65 545.62 T
4 10 Q
(&) 120.81 545.62 T
1 11 Q
( and) 126.81 545.62 T
4 10 Q
(|) 150.93 545.62 T
1 11 Q
( operators ar) 156.93 545.62 T
(e implemented as) 218.41 545.62 T
2 F
(macros) 307.05 545.62 T
1 F
(. \050For information on macr) 342.49 545.62 T
(os,) 471.05 545.62 T
(see Chapter 21,) 99.65 531.62 T
0 F
(Macr) 179.11 531.62 T
(os) 202.94 531.62 T
1 F
(.\051 In an expr) 212.1 531.62 T
(ession that includes the) 270.48 531.62 T
4 10 Q
(&) 386.99 531.62 T
1 11 Q
( operator) 392.99 531.62 T
(, if the \336rst) 436.59 531.62 T
(operand has a false value, the second operand is not evaluated. In an expr) 99.65 517.62 T
(ession) 458.46 517.62 T
(that includes the) 99.65 503.62 T
4 10 Q
(|) 183.2 503.62 T
1 11 Q
( operator) 189.2 503.62 T
(, if the \336rst operand has a tr) 232.81 503.62 T
(ue value, the second oper-) 366.94 503.62 T
(and is not evaluated.) 99.65 489.62 T
3 13 Q
(12.1.6  Assignment) 99.65 458.29 T
1 11 Q
(The assignment binary operator) 99.65 438.62 T
(,) 254.33 438.62 T
4 10 Q
(:=) 259.83 438.62 T
1 11 Q
(, also is implemented as a macr) 271.83 438.62 T
(o. An expr) 423.18 438.62 T
(es-) 474.1 438.62 T
(sion that includes this operator works in a special way) 99.65 424.62 T
(.) 362.55 424.62 T
(The operand to the) 126.65 410.62 T
0 F
(right) 221.76 410.62 T
1 F
( of the operator is evaluated \336rst. The r) 243.76 410.62 T
(esult is the) 432.68 410.62 T
(new value to be assigned.) 99.65 396.62 T
(The operand to the) 126.65 382.62 T
0 F
(left) 221.76 382.62 T
1 F
( of the operator determines the place to which the) 235.82 382.62 T
(new value is assigned. This operand can have one of the following kinds of) 99.65 368.62 T
(syntax:) 99.65 354.62 T
(V) 99.65 328.62 T
(ariable name) 106.58 328.62 T
(The variable name is not evaluated. Dylan assigns the new) 207.65 328.62 T
(value to the variable.) 207.65 314.62 T
(Explicit function call) 99.65 288.62 T
(Dylan calls the function) 207.65 288.62 T
0 F
(name) 325.86 288.62 T
4 10 Q
(-setter) 349.7 288.62 T
1 11 Q
(, wher) 391.7 288.62 T
(e) 422.19 288.62 T
0 F
(name) 430.21 288.62 T
1 F
( is the) 454.05 288.62 T
-0.46 (name of the function in the function call. The \336rst ar) 207.65 274.62 P
-0.46 (gument) 455.64 274.62 P
(to) 207.65 260.62 T
0 F
(name) 219.99 260.62 T
4 10 Q
(-setter) 243.83 260.62 T
1 11 Q
( is the new value, and the r) 285.83 260.62 T
(emaining ar) 416.64 260.62 T
(gu-) 474.84 260.62 T
(ments ar) 207.65 246.62 T
(e the ar) 249.68 246.62 T
(guments to) 285.35 246.62 T
0 F
(name) 342.83 246.62 T
1 F
( in the original function) 366.66 246.62 T
(call.) 207.65 232.62 T
(Slot r) 99.65 206.62 T
(efer) 125.11 206.62 T
(ence) 143.46 206.62 T
(Dylan \336rst converts the slot r) 207.65 206.62 T
(efer) 348.61 206.62 T
(ence to the corr) 366.96 206.62 T
(esponding) 441.27 206.62 T
(function call. Dylan then calls the function) 207.65 192.62 T
0 F
(name) 416.09 192.62 T
4 10 Q
(-setter) 439.92 192.62 T
1 11 Q
(just as it would have if the slot r) 207.65 178.62 T
(efer) 362.9 178.62 T
(ence had been an) 381.25 178.62 T
(explicit function call.) 207.65 164.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 180
%%Page: "167" 181
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(167) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Element r) 99.65 665.62 T
(efer) 146.71 665.62 T
(ence) 165.05 665.62 T
(Dylan \336rst converts the element r) 207.65 665.62 T
(efer) 369.86 665.62 T
(ence to the corr) 388.21 665.62 T
(e-) 462.52 665.62 T
-0.16 (sponding function call, using) 207.65 651.62 P
4 10 Q
-0.35 (element) 351.46 651.62 P
1 11 Q
-0.16 ( or) 393.46 651.62 P
4 10 Q
-0.35 (aref) 408.99 651.62 P
1 11 Q
-0.16 ( as the name) 432.99 651.62 P
(of the function, as appr) 207.65 637.62 T
(opriate. Dylan then calls the func-) 320.13 637.62 T
(tion) 207.65 623.62 T
4 10 Q
(element-setter) 229.59 623.62 T
1 11 Q
( or) 313.59 623.62 T
4 10 Q
(aref-setter) 329.44 623.62 T
1 11 Q
( just as it would) 395.44 623.62 T
(have if the element r) 207.65 609.62 T
(efer) 307.01 609.62 T
(ence had been an explicit function) 325.36 609.62 T
(call.) 207.65 595.62 T
(Except for the or) 99.65 575.62 T
(der of evaluation and r) 180.07 575.62 T
(eturned values, the following examples) 291.36 575.62 T
(ar) 99.65 561.62 T
(e equivalent:) 109.29 561.62 T
4 9 Q
(*my-position*.distance := 3.0;) 99.65 540.95 T
(distance\050*my-position*\051 := 3.0;) 99.65 529.95 T
(distance-setter\0503.0, *my-position*\051;) 99.65 518.95 T
1 11 Q
(The \336rst two examples r) 99.65 498.62 T
(eturn) 217.13 498.62 T
4 10 Q
(3.0) 246.11 498.62 T
1 11 Q
(; the second r) 264.11 498.62 T
(eturns whatever) 328.46 498.62 T
4 10 Q
(distance-) 410.62 498.62 T
(setter) 99.65 484.62 T
1 11 Q
( r) 135.65 484.62 T
(eturns. Usually) 142.54 484.62 T
(, this value would be) 215.6 484.62 T
4 10 Q
(3.0) 319.85 484.62 T
1 11 Q
(. Note that, if) 337.85 484.62 T
4 10 Q
(distance) 404.29 484.62 T
1 11 Q
( is the) 452.29 484.62 T
-0.01 (name of a slot\325s getter) 99.65 470.62 P
-0.01 (, and if the slot is constant or has a setter with a name other) 205.2 470.62 P
(than) 99.65 456.62 T
4 10 Q
(distance-setter) 124.29 456.62 T
1 11 Q
(, then the assignment operation r) 213.47 456.62 T
(esults in an err) 373.48 456.62 T
(or) 445.01 456.62 T
(.) 454.55 456.62 T
(Except for the or) 126.65 442.62 T
(der of evaluation and r) 207.07 442.62 T
(eturned values, the following exam-) 318.36 442.62 T
(ples ar) 99.65 428.62 T
(e equivalent:) 131.79 428.62 T
4 9 Q
(vertices[2] := list\0503.5, 4.5\051;) 99.65 407.95 T
(element\050vertices, 2\051 := list\0503.5, 4.5\051;) 99.65 396.95 T
(element-setter\050list\0503.5, 4.5\051, vertices, 2\051;) 99.65 385.95 T
3 15 Q
(12.2  The function-calling pr) 99.65 347.95 T
(otocol) 262.79 347.95 T
1 11 Q
(W) 99.65 327.62 T
(e have seen that Dylan has two kinds of function: methods and generic func-) 109.64 327.62 T
(tions. Both can be called; fr) 99.65 313.62 T
(om the caller) 230.2 313.62 T
(\325s point of view) 293.89 313.62 T
(, the two ar) 368.18 313.62 T
(e called in the) 422.85 313.62 T
(same way) 99.65 299.62 T
(. When a generic function is called, Dylan selects one of its methods to) 147.11 299.62 T
(execute, in a pr) 99.65 285.62 T
(ocess called method dispatch. This section discusses the interac-) 173.1 285.62 T
(tion between a function and that function\325s caller) 99.65 271.62 T
(, focusing on ar) 337.2 271.62 T
(guments, param-) 411.83 271.62 T
(eters, value declarations, and r) 99.65 257.62 T
(eturned values. W) 248.15 257.62 T
(e discuss interactions between) 336.09 257.62 T
(generic functions and their methods but do not describe the pr) 99.65 243.62 T
(ocess of method) 403.34 243.62 T
(dispatch. For information on method dispatch, see Section 5.5, page 63; Section) 99.65 229.62 T
(6.2, page 79; Section 9.3, page 1) 99.65 215.62 T
(1) 249.91 215.62 T
(1; and Section 18.4, page 300.) 254.8 215.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 181
%%Page: "168" 182
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(168) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(12.2.1  P) 99.65 664.29 T
(arameter) 142.01 664.29 T
(s, ar) 186.9 664.29 T
(guments, and return v) 208.69 664.29 T
(alues) 320.45 664.29 T
1 11 Q
(In Dylan, a function is called with zer) 99.65 644.62 T
(o or mor) 281.69 644.62 T
(e) 323.41 644.62 T
2 F
(arguments) 331.43 644.62 T
1 F
(. The function can per-) 384.59 644.62 T
(form computations, which may have side ef) 99.65 630.62 T
(fects. It then) 312.78 630.62 T
2 F
(returns) 374.8 630.62 T
1 F
( zer) 410.85 630.62 T
(o or mor) 428.52 630.62 T
(e) 470.24 630.62 T
2 F
(values) 99.65 616.62 T
1 F
( to its caller) 132.03 616.62 T
(. Each ar) 186.91 616.62 T
(gument and each r) 228.32 616.62 T
(eturned value is an object.) 319.11 616.62 T
(A function has zer) 126.65 602.62 T
(o or mor) 215.71 602.62 T
(e) 257.44 602.62 T
2 F
(parameters) 265.46 602.62 T
1 F
( that determine the number and) 321.06 602.62 T
(types of ar) 99.65 588.62 T
(guments that the function takes. Following is a simpli\336ed description) 150.71 588.62 T
-0.24 (of what happens when a function is called \050for a generic function, this description) 99.65 574.62 P
(applies to the method that it invokes\051:) 99.65 560.62 T
2 F
(1.) 108.65 540.62 T
1 F
(An implicit) 126.65 540.62 T
2 F
(body) 184.71 540.62 T
1 F
( is enter) 210.38 540.62 T
(ed. A body establishes the scope for all local vari-) 248.42 540.62 T
(ables bound inside the body) 126.65 526.62 T
(.) 262.63 526.62 T
2 F
(2.) 108.65 506.62 T
1 F
(The parameters ar) 126.65 506.62 T
(e matched with the ar) 215.01 506.62 T
(guments to the function.) 320.62 506.62 T
2 F
(3.) 108.65 486.62 T
1 F
(A local variable is cr) 126.65 486.62 T
(eated with the name of each parameter) 225.21 486.62 T
(.) 413.61 486.62 T
2 F
(4.) 108.65 466.62 T
1 F
(Each parameter \321 that is, each local variable with the name of a parameter) 126.65 466.62 T
(\321 is initialized, or bound, to one of the ar) 126.65 452.62 T
(guments. \050In some cases, the) 328.78 452.62 T
(parameter is bound to a list of ar) 126.65 438.62 T
(guments, or to a default value.\051) 284.81 438.62 T
2 F
(5.) 108.65 418.62 T
1 F
(The code that makes up the actual body of the function is executed.) 126.65 418.62 T
-0.21 (A function can have a) 99.65 398.62 P
2 F
-0.21 (value declaration) 207.34 398.62 P
1 F
-0.21 ( that determines the number and types of) 293.59 398.62 P
-0.39 (values the function r) 99.65 384.62 P
-0.39 (eturns. If ther) 198.39 384.62 P
-0.39 (e is no explicit declaration, a default declaration) 263.54 384.62 P
(allows the function to r) 99.65 370.62 T
(eturn any number of values of any type. Following is a) 212.17 370.62 T
(simpli\336ed description of what happens when a function r) 99.65 356.62 T
(eturns \050for a generic) 379.23 356.62 T
(function, this description applies to the method that it invokes\051:) 99.65 342.62 T
2 F
(1.) 108.65 322.62 T
1 F
(The values r) 126.65 322.62 T
(eturned by the last expr) 186.19 322.62 T
(ession in the function\325s implicit body) 301.53 322.62 T
(ar) 126.65 308.62 T
(e matched with the values declar) 136.29 308.62 T
(ed in the value declaration.) 296.21 308.62 T
2 F
(2.) 108.65 288.62 T
1 F
-0.13 (The function\325s implicit body is exited, ending the scope of all local variables) 126.65 288.62 P
(\050including parameters\051 established in that body) 126.65 274.62 T
(.) 356.23 274.62 T
2 F
(3.) 108.65 254.62 T
1 F
-0.36 (The values speci\336ed by the value declaration ar) 126.65 254.62 P
-0.36 (e r) 355.09 254.62 P
-0.36 (eturned to the caller of the) 366.9 254.62 P
(function. \050Depending on the value declaration, the number of values) 126.65 240.62 T
(r) 126.65 226.62 T
(eturned to the function\325s caller might be mor) 130.79 226.62 T
(e or less than the number of) 348.25 226.62 T
(values r) 126.65 212.62 T
(eturned by the last expr) 165.03 212.62 T
(ession in the function\325s body) 280.36 212.62 T
(.\051) 418.63 212.62 T
(Note these two important implications of the way that ar) 99.65 192.62 T
(guments ar) 375.91 192.62 T
(e passed:) 430.69 192.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 182
%%Page: "169" 183
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(169) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(All bindings of ar) 126.65 665.62 T
(guments to parameters ar) 211.96 665.62 T
(e local to the body of the func-) 336.64 665.62 T
(tion called. Assignment to a parameter inside the called function\325s body) 126.65 651.62 T
(does not af) 126.65 637.62 T
(fect any variables outside the body that have the same name.) 179.77 637.62 T
(For example, consider these de\336nitions:) 126.65 617.62 T
4 9 Q
(define method calling-function \050\051) 126.65 596.95 T
(let x = 1;) 137.45 585.95 T
(let y = 2;) 137.45 574.95 T
(format-out\050"In calling function, before call: x = %d, y = %d\134n",) 137.45 563.95 T
(x, y\051;) 196.85 552.95 T
(called-function\050x, y\051;) 137.45 541.95 T
(format-out\050"In calling function, after call: x = %d, y = %d\134n", x, y\051;) 137.45 530.95 T
(end method calling-function;) 126.65 519.95 T
(define method called-function \050x, y\051) 126.65 500.95 T
(x := 3;) 137.45 489.95 T
(y := 4;) 137.45 478.95 T
(format-out\050"In called function, before return: x = %d, y = %d\134n",) 137.45 467.95 T
(x, y\051;) 196.85 456.95 T
(end method called-function;) 126.65 445.95 T
1 11 Q
(A call to) 126.65 425.62 T
4 10 Q
(calling-function) 169.83 425.62 T
1 11 Q
( pr) 265.83 425.62 T
(oduces the following output:) 279.34 425.62 T
6 9 Q
(In calling function, before call: x = 1, y = 2) 126.65 404.95 T
(In called function, before return: x = 3, y = 4) 126.65 393.95 T
(In calling function, after call: x = 1, y = 2) 126.65 382.95 T
1 11 Q
(\245) 108.65 362.62 T
(Although) 126.65 362.62 T
0 F
(parameters) 176.3 362.62 T
1 F
( ar) 225.19 362.62 T
(e local to a function, all) 237.58 362.62 T
0 F
(ar) 352.67 362.62 T
(guments) 361.63 362.62 T
1 F
( and) 400.14 362.62 T
0 F
(r) 424.26 362.62 T
(eturn values) 428.35 362.62 T
1 F
(ar) 126.65 348.62 T
(e shar) 136.29 348.62 T
(ed between a function and its caller) 165.03 348.62 T
(. If an ar) 336.51 348.62 T
(gument or r) 376.42 348.62 T
(eturn value) 434.14 348.62 T
(is a) 126.65 334.62 T
2 F
(mutable) 145.51 334.62 T
1 F
( object \321 one that can be changed \321 then any changes that a) 187.06 334.62 T
(function makes to that object ar) 126.65 320.62 T
(e visible to its caller) 279.15 320.62 T
(.) 373.88 320.62 T
(Consider the following de\336nitions:) 126.65 300.62 T
4 9 Q
(define class <test> \050<object>\051) 126.65 279.95 T
(slot test-slot, required-init-keyword: test-slot:;) 137.45 268.95 T
(end class <test>;) 126.65 257.95 T
(define method calling-function \050\051) 126.65 238.95 T
(let x = make\050<test>, test-slot: "before"\051;) 137.45 227.95 T
(format-out\050"In calling function, before call: x.test-slot = %s\134n",) 137.45 216.95 T
(x.test-slot\051;) 196.85 205.95 T
(called-function\050x\051;) 137.45 194.95 T
(format-out\050"In calling function, after call: x.test-slot = %s\134n",) 137.45 183.95 T
(x.test-slot\051;) 196.85 172.95 T
(end method calling-function;) 126.65 161.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 183
%%Page: "170" 184
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(170) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method called-function \050x :: <test>\051) 126.65 666.95 T
(x.test-slot := "after";) 137.45 655.95 T
(format-out\050"In called function, before return: x.test-slot = %s\134n",) 137.45 644.95 T
(x.test-slot\051;) 196.85 633.95 T
(end method called-function;) 126.65 622.95 T
1 11 Q
-0.31 (Note her) 126.65 602.62 P
-0.31 (e that we have r) 168.91 602.62 P
-0.31 (ede\336ned the) 244.99 602.62 P
4 10 Q
-0.68 (calling-function) 307.43 602.62 P
1 11 Q
-0.31 ( method, and have) 403.43 602.62 P
-0.04 (de\336ned a new) 126.65 588.62 P
4 10 Q
-0.08 (called-function) 198.16 588.62 P
1 11 Q
-0.04 ( method, which we \336rst de\336ned in the pr) 288.17 588.62 P
-0.04 (e-) 486.72 588.62 P
(vious example. Our new) 126.65 574.62 T
4 10 Q
(called-function) 248.82 574.62 T
1 11 Q
( method has one parameter) 338.83 574.62 T
(,) 471.09 574.62 T
(wher) 126.65 560.62 T
(eas the pr) 151.64 560.62 T
(evious method had two. The parameter list of this new) 198.59 560.62 T
(method is not compatible with that of the pr) 126.65 546.62 T
(evious method, and, if we actu-) 341.38 546.62 T
(ally tried to de\336ne the second) 126.65 532.62 T
4 10 Q
(called-function) 273.4 532.62 T
1 11 Q
( method, Dylan would sig-) 363.4 532.62 T
(nal an err) 126.65 518.62 T
(or) 172.91 518.62 T
(. For mor) 182.45 518.62 T
(e information on compatibility of parameter lists for) 227.03 518.62 T
(generic functions and methods, see Section 12.2.5.) 126.65 504.62 T
(A call to) 126.65 484.62 T
4 10 Q
(calling-function) 169.83 484.62 T
1 11 Q
( now pr) 265.83 484.62 T
(oduces the following output:) 303.67 484.62 T
6 9 Q
(In calling function, before call: x.test-slot = "before") 126.65 463.95 T
(In called function, before return: x.test-slot = "after") 126.65 452.95 T
(In calling function, after call: x.test-slot = "after") 126.65 441.95 T
1 11 Q
-0.37 (In this case,) 126.65 421.62 P
4 10 Q
-0.8 (x) 184.83 421.62 P
1 11 Q
-0.37 ( in the calling function and) 190.83 421.62 P
4 10 Q
-0.8 (x) 321.9 421.62 P
1 11 Q
-0.37 ( in the called function ar) 327.9 421.62 P
-0.37 (e dif) 443.89 421.62 P
-0.37 (fer) 464.93 421.62 P
-0.37 (ent) 478.01 421.62 P
-0.25 (variables. But the) 126.65 407.62 P
0 F
-0.25 (values) 213.06 407.62 P
1 F
-0.25 ( of both variables ar) 241.17 407.62 P
-0.25 (e the same object: the instance of) 336.52 407.62 P
4 10 Q
(<test>) 126.65 393.62 T
1 11 Q
( that we make in the calling function. The change to the slot value) 162.65 393.62 T
(of this object that we make in the called function is visible to the calling) 126.65 379.62 T
(function.) 126.65 365.62 T
(It is equally pr) 126.65 345.62 T
(oper to think of ar) 196.89 345.62 T
(guments that ar) 284.74 345.62 T
(e) 361.34 345.62 T
2 F
(immutable) 369.36 345.62 T
1 F
(, like integers,) 424.35 345.62 T
(as being shar) 126.65 331.62 T
(ed between a function and its caller) 190.1 331.62 T
(. By de\336nition, however) 361.58 331.62 T
(, a) 477.47 331.62 T
(function cannot make any changes to such objects that ar) 126.65 317.62 T
(e visible to the) 402.77 317.62 T
(function\325s caller) 126.65 303.62 T
(.) 203.48 303.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 184
%%Page: "171" 185
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(171) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
0 X
(Comparison with C and C++:) 132.65 645.62 T
1 F
( As in Dylan, the parameters of a C) 279.49 645.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function ar) 132.65 631.62 T
(e local to the body of the function, and assignment to a) 185.82 631.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(parameter does not af) 132.65 617.62 T
(fect the value of a variable that has the same) 238.65 617.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.48 (name in the function\325s caller) 132.65 603.62 P
-0.48 (. But the r) 267.54 603.62 P
-0.48 (elationship between) 313.43 603.62 P
2 F
-0.48 (objects) 413.06 603.62 P
1 F
-0.48 ( and) 448.49 603.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
-0.37 (values) 132.65 589.62 P
1 F
-0.37 ( is not the same in C and in Dylan. In C, a value can be an object) 165.03 589.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050r) 132.65 575.62 T
(oughly meaning the contents of the object\051 or a) 140.46 575.62 T
2 F
(pointer) 371.18 575.62 T
1 F
( to an object) 407.85 575.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050r) 132.65 561.62 T
(oughly meaning the location of the object in memory\051. The value of) 140.46 561.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a parameter in C is always a copy of the corr) 132.65 547.62 T
(esponding ar) 348.63 547.62 T
(gument.) 412.42 547.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When a C str) 132.65 533.62 T
(uctur) 195.78 533.62 T
(e is an ar) 221.66 533.62 T
(gument to a function, the value of the cor-) 264.59 533.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (r) 132.65 519.62 P
-0.02 (esponding parameter is a copy of the str) 136.79 519.62 P
-0.02 (uctur) 331.83 519.62 P
-0.02 (e; it is not the str) 357.71 519.62 P
-0.02 (uctur) 437.77 519.62 P
-0.02 (e) 463.65 519.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(itself. If the function changes the value of a member of this str) 132.65 505.62 T
(uctur) 432.29 505.62 T
(e,) 458.17 505.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (the change is not visible to the caller) 132.65 491.62 P
-0.21 (, because the function is changing) 306.41 491.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (only its own copy of the str) 132.65 477.62 P
-0.31 (uctur) 263.08 477.62 P
-0.31 (e. But if the ar) 288.96 477.62 P
-0.31 (gument is a pointer to a) 355.43 477.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(str) 132.65 463.62 T
(uctur) 145.15 463.62 T
(e, the function can gain access to the caller) 171.04 463.62 T
(\325s str) 377.02 463.62 T
(uctur) 400 463.62 T
(e \050by) 425.89 463.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(dereferencing) 132.65 449.62 T
1 F
( the pointer\051. If the function changes the value of a) 202.31 449.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (member of such a str) 132.65 435.62 P
-0.42 (uctur) 232.61 435.62 P
-0.42 (e by der) 258.49 435.62 P
-0.42 (efer) 296.75 435.62 P
-0.42 (encing the pointer) 315.1 435.62 P
-0.42 (, the change is) 401.89 435.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(visible to the caller) 132.65 421.62 T
(.) 223.17 421.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In Dylan, a value is always an object, which has a unique) 159.65 407.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (identity) 132.65 393.62 P
-0.09 (. The value of a parameter is always the same object as the) 169.51 393.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.23 (corr) 132.65 379.62 P
-0.23 (esponding ar) 152.03 379.62 P
-0.23 (gument. When a function changes such an object) 215.58 379.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.21 (\050as by changing the value of a slot\051, the change is always visible to) 132.65 365.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the caller) 132.65 351.62 T
(. Dylan has no equivalent to C pointers.) 176.24 351.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In C++, a parameter declar) 159.65 337.62 T
(ed using or) 290 337.62 T
(dinary C syntax also) 344.66 337.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.16 (r) 132.65 323.62 P
-0.16 (eceives a copy of a str) 136.79 323.62 P
-0.16 (uctur) 241.3 323.62 P
-0.16 (e or an instance that is the corr) 267.18 323.62 P
-0.16 (espond-) 414.31 323.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ing ar) 132.65 309.62 T
(gument. C++ has additional syntax for declaring that a) 160.76 309.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.4 (parameter is a) 132.65 295.62 P
2 F
-0.4 (reference) 203.2 295.62 P
1 F
-0.4 ( \321 essentially an implicit pointer \321 to the) 249.65 295.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(corr) 132.65 281.62 T
(esponding ar) 152.03 281.62 T
(gument. In this case the ar) 215.82 281.62 T
(gument is not copied,) 343.22 281.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.05 (and if the function changes the object that the parameter r) 132.65 267.62 P
-0.05 (efers to,) 412.69 267.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the changes ar) 132.65 253.62 T
(e visible to the caller) 202.29 253.62 T
(. In some ways Dylan\325s ar) 300.83 253.62 T
(gu-) 425.64 253.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment-passing pr) 132.65 239.62 T
(otocol is similar to C++ r) 211.95 239.62 T
(efer) 331.95 239.62 T
(ences.) 350.29 239.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(In both C and C++, array ar) 159.65 225.62 T
(guments ar) 294.09 225.62 T
(e always passed as) 348.87 225.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pointers. In Dylan, arrays ar) 132.65 211.62 T
(e instances of the) 269.19 211.62 T
4 10 Q
(<array>) 354.96 211.62 T
1 11 Q
( class, and) 396.96 211.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(array ar) 132.65 197.62 T
(guments ar) 170.85 197.62 T
(e tr) 225.63 197.62 T
(eated like all other ar) 241.38 197.62 T
(guments.) 343.67 197.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For mor) 159.65 183.62 T
(e comparisons between Dylan and C objects, see) 198.73 183.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Appendix B,) 132.65 169.62 T
0 F
(Dylan Object Model for C and C++ Pr) 199.42 169.62 T
(ogrammers) 371.55 169.62 T
1 F
(.) 421.05 169.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.65 658.83 126.65 162.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 162.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 161.95 477.77 161.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 185
%%Page: "172" 186
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(172) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(12.2.2  Return and reception of m) 99.65 664.29 T
(ultiple v) 267.7 664.29 T
(alues) 307.79 664.29 T
1 11 Q
(A Dylan function call \321 and, in general, a Dylan expr) 99.65 644.62 T
(ession \321 can r) 360.77 644.62 T
(eturn any) 431.15 644.62 T
-0.1 (number of values, including none. The) 99.65 630.62 P
4 10 Q
-0.22 (values) 289.89 630.62 P
1 11 Q
-0.1 ( function is the means of r) 325.89 630.62 P
-0.1 (eturning) 451.05 630.62 P
-0.18 (multiple values. This function takes zer) 99.65 616.62 P
-0.18 (o or mor) 289.99 616.62 P
-0.18 (e ar) 331.36 616.62 P
-0.18 (guments, and r) 348.85 616.62 P
-0.18 (eturns them as) 421.9 616.62 P
(separate values.) 99.65 602.62 T
(Multiple values can be r) 126.65 588.62 T
(eceived as the initial values of local variables in a) 243.52 588.62 T
4 10 Q
-0.91 (let) 99.65 574.62 P
1 11 Q
-0.42 ( declaration. If a) 117.65 574.62 P
4 10 Q
-0.91 (let) 197.22 574.62 P
1 11 Q
-0.42 ( declaration contains multiple variables, they ar) 215.22 574.62 P
-0.42 (e matched) 443.64 574.62 P
(with the values r) 99.65 560.62 T
(eturned by the initialization expr) 181.15 560.62 T
(ession, and each variable is) 341.22 560.62 T
(bound to the corr) 99.65 546.62 T
(esponding value. The following example initializes) 183.97 546.62 T
4 10 Q
(a) 434.98 546.62 T
1 11 Q
( to) 440.98 546.62 T
4 10 Q
(1) 456.08 546.62 T
1 11 Q
( and) 462.08 546.62 T
4 10 Q
(b) 486.2 546.62 T
1 11 Q
(to) 99.65 532.62 T
4 10 Q
(2:) 111.99 532.62 T
4 9 Q
(let \050a, b\051 = values\0501, 2\051;) 99.65 511.95 T
1 11 Q
-0.39 (The following example initializes) 99.65 491.62 P
4 10 Q
-0.85 (ans) 262.64 491.62 P
1 11 Q
-0.39 ( to) 280.64 491.62 P
4 10 Q
-0.85 (2) 294.95 491.62 P
1 11 Q
-0.39 ( and) 300.95 491.62 P
4 10 Q
-0.85 (rem) 324.3 491.62 P
1 11 Q
-0.39 ( to) 342.3 491.62 P
4 10 Q
-0.85 (1) 356.61 491.62 P
1 11 Q
-0.39 ( \321 the two values r) 362.61 491.62 P
-0.39 (eturned) 455.06 491.62 P
(by this call to) 99.65 477.62 T
4 10 Q
(truncate/) 167.08 477.62 T
1 11 Q
(:) 221.08 477.62 T
4 9 Q
(let \050ans, rem\051 = truncate/\0505, 2\051;) 99.65 456.95 T
1 11 Q
(The variable list can also end with) 99.65 436.62 T
4 10 Q
(#rest) 268.19 436.62 T
1 11 Q
( followed by the name of a variable. In) 298.19 436.62 T
(this case, the variable is initialized to a sequence. This sequence contains all the) 99.65 422.62 T
(r) 99.65 408.62 T
(emaining values r) 103.79 408.62 T
(eturned by the initialization expr) 190.73 408.62 T
(ession. If ther) 350.8 408.62 T
(e is no) 416.03 408.62 T
4 10 Q
(#rest) 449.82 408.62 T
1 11 Q
(,) 479.82 408.62 T
-0.01 (any excess values ar) 99.65 394.62 P
-0.01 (e discar) 197.45 394.62 P
-0.01 (ded. If the number of variables in the) 234.57 394.62 P
4 10 Q
-0.02 (let) 417.55 394.62 P
1 11 Q
-0.01 ( declaration) 435.55 394.62 P
(is gr) 99.65 380.62 T
(eater than the number of values r) 120.53 380.62 T
(eturned, the r) 281.89 380.62 T
(emaining variables ar) 347.76 380.62 T
(e initial-) 452.69 380.62 T
(ized to) 99.65 366.62 T
4 10 Q
(#f) 135.43 366.62 T
1 11 Q
(. \050But if the) 147.43 366.62 T
4 10 Q
(let) 203.9 366.62 T
1 11 Q
( declaration speci\336es a type for any of these variables,) 221.9 366.62 T
(and if) 99.65 352.62 T
4 10 Q
(#f) 130.63 352.62 T
1 11 Q
( is not an instance of that type, then Dylan signals an err) 142.63 352.62 T
(or) 415.18 352.62 T
(.\051) 424.72 352.62 T
(Module variables and constants can also be initialized to multiple values.) 126.65 338.62 T
(The variable list of a) 99.65 324.62 T
4 10 Q
(define variable) 200.95 324.62 T
1 11 Q
( or) 290.95 324.62 T
4 10 Q
(define constant) 306.8 324.62 T
1 11 Q
( de\336nition can con-) 396.8 324.62 T
(tain multiple variables, and can r) 99.65 310.62 T
(eceive multiple values fr) 259.79 310.62 T
(om its initialization) 378.85 310.62 T
(expr) 99.65 296.62 T
(ession in the same way as a) 121.35 296.62 T
4 10 Q
(let) 257.27 296.62 T
1 11 Q
( declaration.) 275.27 296.62 T
3 13 Q
(12.2.3  P) 99.65 265.29 T
(arameter lists) 142.01 265.29 T
1 11 Q
-0.09 (A function\325s parameter list is speci\336ed in the function de\336nition. \050If Dylan implic-) 99.65 245.62 P
-0.24 (itly de\336nes a function, such as the getter and setter functions for a slot, Dylan also) 99.65 231.62 P
(de\336nes the parameter list for that function.\051 In a function de\336nition, the parame-) 99.65 217.62 T
(ter list follows the function name and consists of zer) 99.65 203.62 T
(o or mor) 352.36 203.62 T
(e parameter speci\336-) 394.08 203.62 T
(cations, separated by commas and enclosed in par) 99.65 189.62 T
(entheses. A parameter list can) 342.93 189.62 T
(have thr) 99.65 175.62 T
(ee kinds of parameters:) 139.92 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 186
%%Page: "173" 187
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(173) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(1.) 108.65 665.62 T
(Required parameters) 126.65 665.62 T
1 F
( specify r) 232.05 665.62 T
(equir) 276.11 665.62 T
(ed ar) 301.52 665.62 T
(guments, or ar) 325.9 665.62 T
(guments that must) 396.53 665.62 T
(be supplied when the function is called. All r) 126.65 651.62 T
(equir) 344.69 651.62 T
(ed parameters appear) 370.1 651.62 T
(befor) 126.65 637.62 T
(e other kinds of parameters in the parameter list.) 151.82 637.62 T
2 F
(2.) 108.65 617.62 T
1 F
(A function can have at most one) 126.65 617.62 T
2 F
(rest parameter) 286.14 617.62 T
1 F
(, which allows the function) 357.93 617.62 T
-0.42 (to accept a variable number of ar) 126.65 603.62 P
-0.42 (guments. The r) 283.51 603.62 P
-0.42 (est parameter is identi\336ed in) 355.86 603.62 P
(the parameter list by) 126.65 589.62 T
4 10 Q
(#rest) 229.89 589.62 T
1 11 Q
( followed by the name of the parameter) 259.89 589.62 T
(. When) 450.98 589.62 T
(the function is called, all ar) 126.65 575.62 T
(guments that follow the r) 257.37 575.62 T
(equir) 380.48 575.62 T
(ed ar) 405.89 575.62 T
(guments ar) 430.28 575.62 T
(e) 485.06 575.62 T
(put into a sequence. This sequence is the initial value of the r) 126.65 561.62 T
(est parameter) 421.34 561.62 T
(in the function body) 126.65 547.62 T
(.) 224.24 547.62 T
2 F
(3.) 108.65 527.62 T
(Keyword parameters) 126.65 527.62 T
1 F
( specify optional keywor) 231.46 527.62 T
(d ar) 351.45 527.62 T
(guments. In the parame-) 370.57 527.62 T
-0.44 (ter list, keywor) 126.65 513.62 P
-0.44 (d parameters ar) 198.69 513.62 P
-0.44 (e identi\336ed by) 274.48 513.62 P
4 10 Q
-0.97 (#key) 345.89 513.62 P
1 11 Q
-0.44 ( followed by the names of) 369.89 513.62 P
(the parameters \050and possibly by other information\051. Keywor) 126.65 499.62 T
(d parameters) 419.73 499.62 T
(must follow all r) 126.65 485.62 T
(equir) 206.79 485.62 T
(ed parameters and the r) 232.2 485.62 T
(est parameter \050if any\051. When) 348.02 485.62 T
(the function is called, the caller can supply any or none of the speci\336ed) 126.65 471.62 T
(keywor) 126.65 457.62 T
(d ar) 163.48 457.62 T
(guments, in any or) 182.59 457.62 T
(der) 273.75 457.62 T
(, after supplying all r) 289.27 457.62 T
(equir) 390.99 457.62 T
(ed ar) 416.4 457.62 T
(guments.) 440.79 457.62 T
-0.39 (The caller supplies each keywor) 126.65 443.62 P
-0.39 (d ar) 280.65 443.62 P
-0.39 (gument as a symbol \050usually in the form) 299.38 443.62 P
(of the parameter name followed by a colon\051, followed by the ar) 126.65 429.62 T
(gument) 433.04 429.62 T
(value. This ar) 126.65 415.62 T
(gument is the initial value of the corr) 192.37 415.62 T
(esponding keywor) 371.88 415.62 T
(d) 462.85 415.62 T
(parameter in the function body) 126.65 401.62 T
(.) 277.13 401.62 T
-0.41 (The speci\336cation for each parameter in the parameter list includes the name of the) 99.65 375.62 P
-0.06 (parameter) 99.65 361.62 P
-0.06 (. In addition, a r) 148.97 361.62 P
-0.06 (equir) 226.32 361.62 P
-0.06 (ed parameter \050or) 251.73 361.62 P
-0.06 (, for a method, a keywor) 332.43 361.62 P
-0.06 (d param-) 450.91 361.62 P
(eter\051 can be) 99.65 347.62 T
2 F
(specialized) 158.17 347.62 T
1 F
( to corr) 214.37 347.62 T
(espond to an ar) 248.84 347.62 T
(gument of a given type. The type) 323.9 347.62 T
-0.38 (specializer follows the parameter name and is identi\336ed by) 99.65 333.62 P
4 10 Q
-0.83 (::) 386.53 333.62 P
1 11 Q
-0.38 ( followed by a type.) 398.53 333.62 P
-0.4 (When the function is called, the ar) 99.65 319.62 P
-0.4 (gument that corr) 263.13 319.62 P
-0.4 (esponds to the parameter must) 344 319.62 P
(be of the speci\336ed type, or Dylan signals an err) 99.65 305.62 T
(or) 327.78 305.62 T
(. The default ar) 337.31 305.62 T
(gument type is) 410.95 305.62 T
4 10 Q
(<object>) 99.65 291.62 T
1 11 Q
(.) 147.65 291.62 T
-0.42 (The speci\336cation for a keywor) 126.65 277.62 P
-0.42 (d parameter can have two additional pieces of) 271.59 277.62 P
(information:) 99.65 263.62 T
2 F
(1.) 108.65 243.62 T
1 F
(It may include a keywor) 126.65 243.62 T
(d for the caller to use in its ar) 244.91 243.62 T
(gument list, if this) 386.16 243.62 T
(keywor) 126.65 229.62 T
(d must be dif) 163.48 229.62 T
(fer) 227.78 229.62 T
(ent fr) 240.86 229.62 T
(om the parameter name. The keywor) 266.68 229.62 T
(d pr) 446.42 229.62 T
(e-) 466.65 229.62 T
(cedes the parameter name in the parameter list.) 126.65 215.62 T
2 F
(2.) 108.65 195.62 T
1 F
(It may include a default value for the keywor) 126.65 195.62 T
(d ar) 346.57 195.62 T
(gument, which is used if) 365.69 195.62 T
(the caller does not supply that ar) 126.65 181.62 T
(gument. The default expr) 286.02 181.62 T
(ession appears) 409.42 181.62 T
(at the end of the parameter speci\336cation, followed by) 126.65 167.62 T
4 10 Q
(=) 388.25 167.62 T
1 11 Q
(. If no default) 394.25 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 187
%%Page: "174" 188
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(174) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(expr) 126.65 665.62 T
(ession is supplied and the caller does not supply the keywor) 148.35 665.62 T
(d ar) 441.69 665.62 T
(gu-) 460.81 665.62 T
(ment, the ar) 126.65 651.62 T
(gument\325s value is) 184.77 651.62 T
4 10 Q
(#f) 273.15 651.62 T
1 11 Q
(.) 285.15 651.62 T
-0.1 (The following example shows how we could use a r) 99.65 631.62 P
-0.1 (est parameter to implement a) 350.69 631.62 P
(function to sum an arbitrary number of values:) 99.65 617.62 T
5 9 Q
(// Sum one or more values) 99.65 596.95 T
4 F
(define method sum \050value, #rest more-values\051) 99.65 585.95 T
(for \050next in more-values\051) 110.45 574.95 T
(value := value + next;) 121.25 563.95 T
(end for;) 110.45 552.95 T
(value;) 110.45 541.95 T
(end method sum;) 99.65 530.95 T
6 F
(?) 99.65 511.95 T
4 F
(sum\0503\051;) 110.45 511.95 T
6 F
(3) 99.65 500.95 T
(?) 99.65 481.95 T
4 F
(sum\0501, 2, 3, 4, 5\051;) 110.45 481.95 T
6 F
(15) 99.65 470.95 T
1 11 Q
-0.06 (In the pr) 99.65 450.62 P
-0.06 (eceding example, the) 141.16 450.62 P
4 10 Q
-0.12 (for) 246.35 450.62 P
1 11 Q
-0.06 ( iteration statement performs the addition once) 264.35 450.62 P
(for every element of) 99.65 436.62 T
4 10 Q
(more-values) 200.25 436.62 T
1 11 Q
(.) 266.25 436.62 T
(The following example shows how we could use keywor) 126.65 422.62 T
(d parameters in) 403.05 422.62 T
(de\336ning a method similar to) 99.65 408.62 T
4 10 Q
(encode-total-seconds) 240.78 408.62 T
1 11 Q
(:) 360.78 408.62 T
5 9 Q
(// Convert days, hours, minutes, and seconds to seconds.) 99.65 387.95 T
(// Named \050keyword\051 arguments are optional) 99.65 376.95 T
4 F
(define method convert-to-seconds) 99.65 365.95 T
(\050#key hours :: <integer> = 0, minutes :: <integer> = 0,) 121.25 354.95 T
(seconds :: <integer> = 0\051 => \050seconds :: <integer>\051) 126.65 343.95 T
(  \050\050hours * 60\051 + minutes\051 * 60 + seconds;) 99.65 332.95 T
(end method convert-to-seconds;) 99.65 321.95 T
6 F
(?) 99.65 302.95 T
4 F
(convert-to-seconds\050minutes: 3, seconds: 9\051;) 110.45 302.95 T
6 F
(189) 99.65 291.95 T
(?) 99.65 272.95 T
4 F
(convert-to-seconds\050minutes: 1, hours: 2\051;) 110.45 272.95 T
6 F
(7260) 99.65 261.95 T
1 11 Q
(Note fr) 99.65 241.62 T
(om the pr) 134.21 241.62 T
(eceding example that we can supply keywor) 181.44 241.62 T
(d ar) 398.01 241.62 T
(guments in any) 417.13 241.62 T
(or) 99.65 227.62 T
(der) 109.8 227.62 T
(. Note also that all keywor) 125.32 227.62 T
(d ar) 253 227.62 T
(guments ar) 272.12 227.62 T
(e optional; however) 326.9 227.62 T
(, if we try to) 422.8 227.62 T
-0.34 (call a function with a keywor) 99.65 213.62 P
-0.34 (d ar) 239.43 213.62 P
-0.34 (gument that the function does not accept \321 such) 258.2 213.62 P
-0.27 (as) 99.65 199.62 P
4 10 Q
-0.6 (days:) 112.29 199.62 P
1 11 Q
-0.27 (, in this example \321 Dylan signals an err) 142.29 199.62 P
-0.27 (or) 333.7 199.62 P
-0.27 (. For mor) 343.23 199.62 P
-0.27 (e information on func-) 387.27 199.62 P
(tion calls and keywor) 99.65 185.62 T
(d ar) 203.99 185.62 T
(guments, see Section 12.2.7, page 178.) 223.11 185.62 T
(Following ar) 126.65 171.62 T
(e additional featur) 188.47 171.62 T
(es and r) 278.07 171.62 T
(estrictions of keywor) 316.28 171.62 T
(d ar) 418.08 171.62 T
(guments:) 437.2 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 188
%%Page: "175" 189
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(175) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(If a parameter list ends with) 126.65 665.62 T
4 10 Q
(#all-keys) 266.23 665.62 T
1 11 Q
( following) 320.23 665.62 T
4 10 Q
(#key) 372.7 665.62 T
1 11 Q
(, the function) 395.48 665.62 T
(accepts \050but ignor) 126.65 651.62 T
(es\051 any keywor) 213.38 651.62 T
(d ar) 287.33 651.62 T
(gument. A parameter list can have) 306.44 651.62 T
-0.03 (speci\336c keywor) 126.65 637.62 P
-0.03 (d parameters and also end with) 202.37 637.62 P
4 10 Q
-0.05 (#all-keys) 358.99 637.62 P
1 11 Q
-0.03 (. In this case, the) 412.99 637.62 P
-0.18 (function accepts any keywor) 126.65 623.62 P
-0.18 (d ar) 265.39 623.62 P
-0.18 (gument, and also has local variables whose) 284.33 623.62 P
-0.01 (values ar) 126.65 609.62 P
-0.01 (e the keywor) 170.52 609.62 P
-0.01 (d-ar) 233.36 609.62 P
-0.01 (gument values \050or their defaults\051 that corr) 253.39 609.62 P
-0.01 (espond) 457.23 609.62 P
(to the keywor) 126.65 595.62 T
(d parameters.) 193.82 595.62 T
(\245) 108.65 575.62 T
(If the parameter list of a method contains both) 126.65 575.62 T
4 10 Q
(#rest) 354.4 575.62 T
1 11 Q
( and) 384.4 575.62 T
4 10 Q
(#key) 408.53 575.62 T
1 11 Q
(, the) 432.53 575.62 T
(sequence that is the value of the r) 126.65 561.62 T
(est parameter contains alternating sym-) 288.54 561.62 T
(bols and ar) 126.65 547.62 T
(gument values r) 180.37 547.62 T
(epr) 259.22 547.62 T
(esenting the keywor) 275.25 547.62 T
(d ar) 373.74 547.62 T
(guments passed to) 392.86 547.62 T
(the function. In this case,) 126.65 533.62 T
0 F
(all) 250.21 533.62 T
1 F
( optional ar) 261.21 533.62 T
(guments must be keywor) 316.87 533.62 T
(d ar) 440.28 533.62 T
(gu-) 459.4 533.62 T
(ments. A generic function\325s parameter list can have either) 126.65 519.62 T
4 10 Q
(#rest) 409.36 519.62 T
1 11 Q
( or) 439.36 519.62 T
4 10 Q
(#key) 455.21 519.62 T
1 11 Q
(,) 477.99 519.62 T
(but cannot have both.) 126.65 505.62 T
(\245) 108.65 485.62 T
(Keywor) 126.65 485.62 T
(d parameters for a generic function cannot be specialized.) 165.35 485.62 T
(The r) 99.65 465.62 T
(estrictions on a generic function\325s parameter list have to do with parameter) 124.96 465.62 T
(-) 489.71 465.62 T
(list congr) 99.65 451.62 T
(uency and keywor) 144.71 451.62 T
(d-ar) 234.97 451.62 T
(gument checking in generic function calls. For) 255 451.62 T
(mor) 99.65 437.62 T
(e information, see Sections 12.2.5 and 12.2.7.) 119.51 437.62 T
3 13 Q
(12.2.4  V) 99.65 406.29 T
(alue dec) 141.7 406.29 T
(larations) 184.17 406.29 T
1 11 Q
(A function de\336nition\325s value declaration follows the parameter list and is pr) 99.65 386.62 T
(e-) 469.04 386.62 T
-0.39 (ceded by) 99.65 372.62 P
4 10 Q
-0.85 (=>) 145.44 372.62 P
1 11 Q
-0.39 (. The syntax of a value declaration is similar to that of a parameter list.) 157.44 372.62 P
(If the function r) 99.65 358.62 T
(eturns no values, the value declaration is an empty set of par) 175.45 358.62 T
(en-) 470.44 358.62 T
(theses. Otherwise, the declaration can contain separate declarations for all) 99.65 344.62 T
-0.06 (r) 99.65 330.62 P
-0.06 (eturned values, separated by commas. Each of these individual declarations con-) 103.79 330.62 P
(sists of a name and, optionally) 99.65 316.62 T
(,) 246.21 316.62 T
4 10 Q
(::) 251.71 316.62 T
1 11 Q
( followed by a type. The name does not specify) 263.71 316.62 T
(a variable and has no use other than documentation. But the r) 99.65 302.62 T
(eturned value that) 399.38 302.62 T
(corr) 99.65 288.62 T
(esponds to the declaration must be of the declar) 119.03 288.62 T
(ed type, or Dylan signals an) 351.43 288.62 T
(err) 99.65 274.62 T
(or) 113.41 274.62 T
(. The default r) 122.95 274.62 T
(eturn value type is) 191.08 274.62 T
4 10 Q
(<object>) 284.58 274.62 T
1 11 Q
(.) 332.58 274.62 T
(A value declaration can also end with) 126.65 260.62 T
4 10 Q
(#rest) 312.8 260.62 T
1 11 Q
( followed by a name and,) 342.8 260.62 T
(optionally) 99.65 246.62 T
(,) 148.26 246.62 T
4 10 Q
(::) 153.76 246.62 T
1 11 Q
( and a type. This declaration indicates that the function can r) 165.76 246.62 T
(eturn) 459.56 246.62 T
-0.07 (any number of additional ar) 99.65 232.62 P
-0.07 (guments, each of which must be of the speci\336ed type.) 236.17 232.62 P
(If a function has no explicit value declaration, the default declaration is) 126.65 218.62 T
4 10 Q
(\050#rest x :: <object>\051) 99.65 204.62 T
1 11 Q
(. This declaration indicates that the function can r) 225.65 204.62 T
(eturn) 465.49 204.62 T
(any number of ar) 99.65 190.62 T
(guments of any type.) 183.68 190.62 T
(The value declaration determines the number and types of values that the) 126.65 176.62 T
(function r) 99.65 162.62 T
(eturns, even if the last expr) 147.32 162.62 T
(ession in the function\325s body r) 278.65 162.62 T
(eturns a) 425.04 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "175" 189
%%Page: "176" 190
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(176) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(dif) 99.65 665.62 T
(fer) 113.04 665.62 T
(ent number of values. If the function\325s body r) 126.11 665.62 T
(eturns fewer values than ar) 345.92 665.62 T
(e) 478.55 665.62 T
(declar) 99.65 651.62 T
(ed, the function defaults the r) 129.37 651.62 T
(emaining values to) 272.54 651.62 T
4 10 Q
(#f) 367.66 651.62 T
1 11 Q
( and r) 379.66 651.62 T
(eturns them. \050But) 407.93 651.62 T
(if the value declaration speci\336es a type for any of these values, and if) 99.65 637.62 T
4 10 Q
(#f) 436.61 637.62 T
1 11 Q
( is not an) 448.61 637.62 T
(instance of that type, Dylan signals an err) 99.65 623.62 T
(or) 301.02 623.62 T
(.\051 If the function\325s body r) 310.56 623.62 T
(eturns mor) 430.92 623.62 T
(e) 484.44 623.62 T
(values than ar) 99.65 609.62 T
(e declar) 168.17 609.62 T
(ed, the function r) 205.91 609.62 T
(eturns the additional values if the declara-) 289.08 609.62 T
(tion contains) 99.65 595.62 T
4 10 Q
(#rest) 164.99 595.62 T
1 11 Q
(; otherwise, the function discar) 194.99 595.62 T
(ds the additional values.) 344.55 595.62 T
3 13 Q
(12.2.5  P) 99.65 564.29 T
(arameter) 142.01 564.29 T
(-list congruence) 186.85 564.29 T
1 11 Q
-0.02 (A generic function and its methods must all have parameter lists that ar) 99.65 544.62 P
-0.02 (e compat-) 447.69 544.62 P
(ible, or) 99.65 530.62 T
2 F
(congruent) 136 530.62 T
1 F
(. Following ar) 186.72 530.62 T
(e the basic r) 254.04 530.62 T
(ules:) 311.41 530.62 T
(\245) 108.65 510.62 T
(A generic function and its methods must all have the same number of) 126.65 510.62 T
(r) 126.65 496.62 T
(equir) 130.79 496.62 T
(ed ar) 156.21 496.62 T
(guments.) 180.59 496.62 T
(\245) 108.65 476.62 T
(The type of any given parameter in each method must be a subtype of the) 126.65 476.62 T
(corr) 126.65 462.62 T
(esponding parameter in the generic function.) 146.03 462.62 T
(\245) 108.65 442.62 T
(If a generic function or any of its methods has only r) 126.65 442.62 T
(equir) 380.32 442.62 T
(ed ar) 405.73 442.62 T
(guments \321) 430.12 442.62 T
-0.16 (that is, it has neither) 126.65 428.62 P
4 10 Q
-0.34 (#rest) 227.13 428.62 P
1 11 Q
-0.16 ( nor) 257.13 428.62 P
4 10 Q
-0.34 (#key) 279.07 428.62 P
1 11 Q
-0.16 ( in its parameter list \321 then the generic) 303.07 428.62 P
(function and all its methods must have only r) 126.65 414.62 T
(equir) 347.62 414.62 T
(ed ar) 373.03 414.62 T
(guments.) 397.41 414.62 T
(\245) 108.65 394.62 T
(If a generic function or any of its methods accepts a variable number of) 126.65 394.62 T
(ar) 126.65 380.62 T
(guments, but does not accept keywor) 136.29 380.62 T
(d ar) 317.7 380.62 T
(guments \321 that is, it has) 336.81 380.62 T
4 10 Q
(#rest) 459.74 380.62 T
1 11 Q
(,) 489.74 380.62 T
(but does not have) 126.65 366.62 T
4 10 Q
(#key) 215.99 366.62 T
1 11 Q
(, in its parameter list \321 then the generic function) 238.77 366.62 T
(and all its methods must accept a variable number of ar) 126.65 352.62 T
(guments, but must) 396.39 352.62 T
(not accept keywor) 126.65 338.62 T
(d ar) 215.7 338.62 T
(guments.) 234.82 338.62 T
(\245) 108.65 318.62 T
(If a generic function or any of its methods accepts keywor) 126.65 318.62 T
(d ar) 407.36 318.62 T
(guments \321) 426.48 318.62 T
(that is, it has) 126.65 304.62 T
4 10 Q
(#key) 190.69 304.62 T
1 11 Q
( in its parameter list \321 then the generic function and all) 214.69 304.62 T
(its methods must accept keywor) 126.65 290.62 T
(d ar) 283.62 290.62 T
(guments. For this r) 302.74 290.62 T
(ule, a generic func-) 394.7 290.62 T
-0.21 (tion or method \322accepts keywor) 126.65 276.62 P
-0.21 (d ar) 281.77 276.62 P
-0.21 (guments\323 even if its parameter list ends) 300.68 276.62 P
(with just) 126.65 262.62 T
4 10 Q
(#key) 171.97 262.62 T
1 11 Q
(.) 194.75 262.62 T
(\245) 108.65 242.62 T
(If a generic function has any speci\336c keywor) 126.65 242.62 T
(d parameters, then all its meth-) 342.61 242.62 T
(ods must have \050at least\051 those speci\336c keywor) 126.65 228.62 T
(d parameters. The appear-) 348.83 228.62 T
(ance of) 126.65 214.62 T
4 10 Q
(#all-keys) 163.87 214.62 T
1 11 Q
( in a method\325s parameter list does not satisfy this) 217.87 214.62 T
(r) 126.65 200.62 T
(equir) 130.79 200.62 T
(ement.) 156.21 200.62 T
(The following parameter lists ar) 99.65 180.62 T
(e congr) 255.13 180.62 T
(uent, because both functions have only) 290.82 180.62 T
(r) 99.65 166.62 T
(equir) 103.79 166.62 T
(ed ar) 129.21 166.62 T
(guments, they have the same number of r) 153.59 166.62 T
(equir) 355.4 166.62 T
(ed ar) 380.81 166.62 T
(guments, and the) 405.2 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "176" 190
%%Page: "177" 191
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(177) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(type of each method parameter is a subtype of the same parameter in the generic) 99.65 665.62 T
(function:) 99.65 651.62 T
4 9 Q
(define generic g \050arg1 :: <complex>, arg2 :: <integer>\051;) 99.65 630.95 T
(define method g \050arg1 :: <real>, arg2 :: <integer>\051) 99.65 611.95 T
(...) 110.45 600.95 T
(end method g;) 99.65 589.95 T
1 11 Q
-0.48 (The following parameter lists ar) 99.65 569.62 P
-0.48 (e congr) 253.22 569.62 P
-0.48 (uent, because both functions meet the tests) 288.42 569.62 P
(for r) 99.65 555.62 T
(equir) 120.56 555.62 T
(ed ar) 145.97 555.62 T
(guments, both accept keywor) 170.36 555.62 T
(d ar) 313.38 555.62 T
(guments, and the generic func-) 332.5 555.62 T
(tion has no speci\336c keywor) 99.65 541.62 T
(d parameters:) 231.81 541.62 T
4 9 Q
(define generic g \050arg1 :: <real>, #key\051;) 99.65 520.95 T
(define method g \050arg1 :: <integer>, #key base :: <integer> = 10\051) 99.65 501.95 T
(...) 110.45 490.95 T
(end method g;) 99.65 479.95 T
1 11 Q
-0.13 (The following parameter lists ar) 99.65 459.62 P
-0.13 (e not congr) 254.62 459.62 P
-0.13 (uent, because the method\325s parameter) 308.79 459.62 P
(list does not include the speci\336c keywor) 99.65 445.62 T
(d) 294.02 445.62 T
4 10 Q
(base) 303.49 445.62 T
1 11 Q
( of the generic function, even) 327.49 445.62 T
(though it does include) 99.65 431.62 T
4 10 Q
(#all-keys) 211.55 431.62 T
1 11 Q
(:) 265.55 431.62 T
4 9 Q
(define generic g \050arg1 :: <integer>, #key base\051;) 99.65 410.95 T
(define method g \050arg1 :: <integer>, #key #all-keys\051) 99.65 391.95 T
(...) 110.45 380.95 T
(end method g;) 99.65 369.95 T
3 13 Q
(12.2.6  Return-v) 99.65 340.29 T
(alue congruence) 178.84 340.29 T
1 11 Q
(Like parameter lists, the value declarations of a generic function and that func-) 99.65 320.62 T
-0.23 (tion\325s methods must be congr) 99.65 306.62 P
-0.23 (uent. The r) 242.6 306.62 P
-0.23 (ules depend on whether the generic func-) 294.95 306.62 P
(tion r) 99.65 292.62 T
(eturns a \336xed or a variable number of values:) 125.74 292.62 T
(\245) 108.65 272.62 T
(If the generic function r) 126.65 272.62 T
(eturns a \336xed number of values \321 that is, it does) 240.68 272.62 T
(not have) 126.65 258.62 T
4 10 Q
(#rest) 171.53 258.62 T
1 11 Q
( in its value declaration \321 then its methods cannot have) 201.53 258.62 T
4 10 Q
(#rest) 126.65 244.62 T
1 11 Q
(, and must r) 156.65 244.62 T
(eturn the same number of r) 215.01 244.62 T
(equir) 347.66 244.62 T
(ed values as the generic) 373.07 244.62 T
(function. For each method, the type of each r) 126.65 230.62 T
(eturned value must be a) 343.85 230.62 T
(subtype of the same r) 126.65 216.62 T
(eturned value in the generic function.) 230.83 216.62 T
(\245) 108.65 196.62 T
(If the generic function r) 126.65 196.62 T
(eturns a variable number of values \321 that is, it has) 240.68 196.62 T
4 10 Q
(#rest) 126.65 182.62 T
1 11 Q
( in its value declaration \321 then its methods can \050but ar) 156.65 182.62 T
(e not r) 422.25 182.62 T
(equir) 453.16 182.62 T
(ed) 478.57 182.62 T
(to\051 have) 126.65 168.62 T
4 10 Q
(#rest) 168.79 168.62 T
1 11 Q
(, and must r) 198.79 168.62 T
(eturn at least as many r) 257.15 168.62 T
(equir) 370.49 168.62 T
(ed values as the) 395.9 168.62 T
(generic function. For each method, the type of each r) 126.65 154.62 T
(eturned value must be) 382.09 154.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "177" 191
%%Page: "178" 192
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(178) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(a subtype of the same r) 126.65 665.62 T
(eturned value in the generic function. If the method) 239.08 665.62 T
(has mor) 126.65 651.62 T
(e r) 165.83 651.62 T
(equir) 178 651.62 T
(ed r) 203.41 651.62 T
(eturned values than the generic function, their types) 222.29 651.62 T
(must all be subtypes of the generic function\325s) 126.65 637.62 T
4 10 Q
(#rest) 349.04 637.62 T
1 11 Q
( value.) 379.04 637.62 T
(The following value declarations ar) 99.65 617.62 T
(e congr) 271.78 617.62 T
(uent, because the generic function) 307.46 617.62 T
(implicitly r) 99.65 603.62 T
(eturns any number of values of any type:) 153.46 603.62 T
4 9 Q
(define generic g \050arg1 :: <complex>, arg2 :: <integer>\051;) 99.65 582.95 T
(define method g) 99.65 563.95 T
(\050arg1 :: <real>, arg2 :: <integer>\051 => \050result :: <real>\051) 121.25 552.95 T
(...) 110.45 541.95 T
(end method g;) 99.65 530.95 T
1 11 Q
(The following value declarations ar) 99.65 510.62 T
(e not congr) 271.78 510.62 T
(uent, because the type of the) 326.2 510.62 T
-0.06 (method\325s r) 99.65 496.62 P
-0.06 (eturned value is not a subtype of the generic function\325s r) 151.9 496.62 P
-0.06 (eturned value:) 425.17 496.62 P
4 9 Q
(define generic g) 99.65 475.95 T
(\050arg1 :: <complex>, arg2 :: <integer>\051 => \050result :: <integer>\051;) 121.25 464.95 T
(define method g) 99.65 445.95 T
(\050arg1 :: <real>, arg2 :: <integer>\051 => \050result :: <real>\051) 121.25 434.95 T
(...) 110.45 423.95 T
(end method g;) 99.65 412.95 T
3 13 Q
(12.2.7  K) 99.65 383.29 T
(e) 142.77 383.29 T
(yw) 148.55 383.29 T
(or) 162.58 383.29 T
(d-ar) 173.05 383.29 T
(gument c) 193.04 383.29 T
(hec) 240.33 383.29 T
(king) 258.51 383.29 T
1 11 Q
(When a function is called, Dylan determines which keywor) 99.65 363.62 T
(d ar) 387.45 363.62 T
(guments, if any) 406.57 363.62 T
(,) 480.86 363.62 T
(ar) 99.65 349.62 T
(e permitted for that function call. The set of permitted keywor) 109.29 349.62 T
(d ar) 410.5 349.62 T
(guments) 429.61 349.62 T
(depends on whether or not a generic function is being called:) 99.65 335.62 T
(\245) 108.65 315.62 T
(If a method is called dir) 126.65 315.62 T
(ectly) 241.68 315.62 T
(, rather than thr) 263.51 315.62 T
(ough a generic function, the) 339.98 315.62 T
(speci\336c keywor) 126.65 301.62 T
(ds in the method\325s parameter list ar) 202.39 301.62 T
(e permitted. If the) 374.99 301.62 T
(parameter list includes) 126.65 287.62 T
4 10 Q
(#all-keys) 240.66 287.62 T
1 11 Q
(, any keywor) 294.66 287.62 T
(d ar) 357.76 287.62 T
(gument is permitted.) 376.88 287.62 T
(\245) 108.65 267.62 T
(If a generic function is called, all the speci\336c keywor) 126.65 267.62 T
(ds in the parameter) 380.08 267.62 T
(lists of all) 126.65 253.62 T
2 F
(applicable) 175.79 253.62 T
1 F
( methods ar) 228.32 253.62 T
(e permitted. If the parameter list of the) 285.83 253.62 T
(generic function or of) 126.65 239.62 T
0 F
(any) 233.93 239.62 T
1 F
( applicable method includes) 250.43 239.62 T
4 10 Q
(#all-keys) 390.16 239.62 T
1 11 Q
(, any) 444.16 239.62 T
(keywor) 126.65 225.62 T
(d ar) 163.48 225.62 T
(gument is permitted.) 182.59 225.62 T
(When a generic function is called, one of its methods is) 99.65 205.62 T
2 F
(applicable) 369.15 205.62 T
1 F
( if every) 421.68 205.62 T
(r) 99.65 191.62 T
(equir) 103.79 191.62 T
(ed ar) 129.21 191.62 T
(gument is an instance of the type of the corr) 153.59 191.62 T
(esponding parameter of) 366.55 191.62 T
(the method. For mor) 99.65 177.62 T
(e information on applicable methods, see Section 5.5, page) 199.93 177.62 T
(63.) 99.65 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "178" 192
%%Page: "179" 193
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.2 The function-calling protocol) 377.55 702.62 T
2 F
(179) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Consider the following de\336nitions:) 126.65 665.62 T
4 9 Q
(define generic g \050arg1 :: <real>, #key\051;) 99.65 644.95 T
5 F
(// Method 1) 99.65 625.95 T
4 F
(define method g \050arg1 :: <real>, #key real-key\051) 99.65 614.95 T
(...) 110.45 603.95 T
(end method g;) 99.65 592.95 T
5 F
(// Method 2) 99.65 573.95 T
4 F
(define method g \050arg1 :: <float>, #key float-key\051) 99.65 562.95 T
(...) 110.45 551.95 T
(end method g;) 99.65 540.95 T
5 F
(// Method 3) 99.65 521.95 T
4 F
(define method g \050arg1 :: <integer>, #key integer-key\051) 99.65 510.95 T
(...) 110.45 499.95 T
(end method g;) 99.65 488.95 T
1 11 Q
-0.21 (Now) 99.65 468.62 P
-0.21 (, if we call the generic function) 122.96 468.62 P
4 10 Q
-0.45 (g) 273.11 468.62 P
1 11 Q
-0.21 ( with an instance of) 279.11 468.62 P
4 10 Q
-0.45 (<float>) 375.67 468.62 P
1 11 Q
-0.21 (, we can supply) 417.67 468.62 P
(the keywor) 99.65 454.62 T
(d ar) 154.48 454.62 T
(guments) 173.6 454.62 T
4 10 Q
(real-key:) 218.73 454.62 T
1 11 Q
( and) 272.73 454.62 T
4 10 Q
(float-key:) 296.86 454.62 T
1 11 Q
(, because the methods that) 356.86 454.62 T
(have those keywor) 99.65 440.62 T
(d parameters ar) 191.29 440.62 T
(e both applicable. If we call) 267.96 440.62 T
4 10 Q
(g) 403.21 440.62 T
1 11 Q
( with an instance) 409.21 440.62 T
(of) 99.65 426.62 T
4 10 Q
(<integer>) 112.07 426.62 T
1 11 Q
(, we can supply the keywor) 166.07 426.62 T
(d ar) 299.72 426.62 T
(guments) 318.83 426.62 T
4 10 Q
(real-key:) 363.97 426.62 T
1 11 Q
( and) 417.97 426.62 T
4 10 Q
(integer-) 442.09 426.62 T
(key:) 99.65 412.62 T
1 11 Q
(.) 123.65 412.62 T
(Suppose that, in this same example, we call the generic function) 126.65 398.62 T
4 10 Q
(g) 439.63 398.62 T
1 11 Q
( with an) 445.63 398.62 T
(instance of) 99.65 384.62 T
4 10 Q
(<float>) 154.73 384.62 T
1 11 Q
(, and supply the keywor) 196.73 384.62 T
(d ar) 315.02 384.62 T
(guments) 334.14 384.62 T
4 10 Q
(real-key:) 379.27 384.62 T
1 11 Q
( and) 433.27 384.62 T
4 10 Q
(float-) 457.39 384.62 T
(key:) 99.65 370.62 T
1 11 Q
(. Method 2 is most speci\336c, and is called as a r) 123.65 370.62 T
(esult of Dylan\325s method dis-) 346.36 370.62 T
-0.32 (patch. But method 2 does not have a) 99.65 356.62 P
4 10 Q
-0.69 (real-key:) 276.52 356.62 P
1 11 Q
-0.32 ( parameter) 330.52 356.62 P
-0.32 (. If we wer) 382.27 356.62 P
-0.32 (e calling this) 432.72 356.62 P
(method dir) 99.65 342.62 T
(ectly) 154.16 342.62 T
(, Dylan would signal an err) 176 342.62 T
(or) 308.71 342.62 T
(. In this case, method 2 simply) 318.25 342.62 T
-0.43 (ignor) 99.65 328.62 P
-0.43 (es the) 125.52 328.62 P
4 10 Q
-0.95 (real-key:) 155.34 328.62 P
1 11 Q
-0.43 ( ar) 209.34 328.62 P
-0.43 (gument, because Dylan checks keywor) 221.3 328.62 P
-0.43 (d ar) 408.12 328.62 P
-0.43 (guments for a) 426.8 328.62 P
(generic function call as a whole, rather than for a particular method chosen as a) 99.65 314.62 T
(r) 99.65 300.62 T
(esult of method dispatch.) 103.79 300.62 T
(Ther) 126.65 286.62 T
(e is an important subtlety of keywor) 149.21 286.62 T
(d-parameter speci\336cations to note) 325.33 286.62 T
(in this example. Because of the r) 99.65 272.62 T
(ules for parameter) 255.72 272.62 T
(-list congr) 344.94 272.62 T
(uence, the generic) 393.67 272.62 T
-0.37 (function and all its methods must accept keywor) 99.65 258.62 P
-0.37 (d ar) 333.58 258.62 P
-0.37 (guments \321 that is, they must) 352.33 258.62 P
(all have) 99.65 244.62 T
4 10 Q
(#key) 140.44 244.62 T
1 11 Q
( in their parameter lists. Notice that we terminated the generic func-) 164.44 244.62 T
(tion\325s parameter list with) 99.65 230.62 T
4 10 Q
(#key) 224.72 230.62 T
1 11 Q
(. This use indicates that the generic function per-) 247.5 230.62 T
(mits \321 but does not r) 99.65 216.62 T
(equir) 204.66 216.62 T
(e \321 individual methods to specify keywor) 230.07 216.62 T
(d) 437.03 216.62 T
(parameters.) 99.65 202.62 T
(Suppose that we had instead terminated the generic function\325s parameter) 126.65 188.62 T
(list with) 99.65 174.62 T
4 10 Q
(#key, #all-keys) 142.16 174.62 T
1 11 Q
(. This use also would have permitted, but would not) 232.16 174.62 T
(have r) 99.65 160.62 T
(equir) 129.93 160.62 T
(ed, individual methods to specify keywor) 155.34 160.62 T
(d parameters. But it also) 358.02 160.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "179" 193
%%Page: "180" 194
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(180) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(would have allowed a caller of the generic function to supply) 99.65 665.62 T
0 F
(any) 400.61 665.62 T
1 F
( keywor) 417.11 665.62 T
(d ar) 456.69 665.62 T
(gu-) 475.8 665.62 T
(ment. In the earlier example, only a small set of keywor) 99.65 651.62 T
(d ar) 368.87 651.62 T
(guments was permit-) 387.99 651.62 T
(ted, and the members of the set varied with the applicable methods.) 99.65 637.62 T
(In general, when you de\336ne a generic function or a method that accepts) 126.65 623.62 T
(keywor) 99.65 609.62 T
(d ar) 136.48 609.62 T
(guments, it is advisable not to specify) 155.59 609.62 T
4 10 Q
(#all-keys) 340.98 609.62 T
1 11 Q
( unnecessarily) 394.98 609.62 T
(,) 463.06 609.62 T
-0.3 (because doing so defeats Dylan\325s keywor) 99.65 595.62 P
-0.3 (d-ar) 298.28 595.62 P
-0.3 (gument checking. If a method needs) 318.31 595.62 P
(to accept keywor) 99.65 581.62 T
(d ar) 182.3 581.62 T
(guments because of the r) 201.42 581.62 T
(ules of parameter) 322.29 581.62 T
(-list congr) 407.16 581.62 T
(uence,) 455.89 581.62 T
(but does not need to r) 99.65 567.62 T
(ecognize any keywor) 205.75 567.62 T
(ds itself, you should terminate its) 308.75 567.62 T
(parameter list with) 99.65 553.62 T
4 10 Q
(#key) 195.05 553.62 T
1 11 Q
(.) 217.83 553.62 T
3 15 Q
(12.3  Functions as objects) 99.65 513.95 T
1 11 Q
(In Dylan, all functions ar) 99.65 493.62 T
(e objects. A function can be the value of a variable, an) 220.23 493.62 T
(ar) 99.65 479.62 T
(gument to another function, or a value r) 109.29 479.62 T
(eturned by a function. In fact, Dylan) 303.71 479.62 T
(pr) 99.65 465.62 T
(ovides a number of operations on functions, including operations to compose) 110.41 465.62 T
(new functions fr) 99.65 451.62 T
(om existing functions.) 179.24 451.62 T
3 13 Q
(12.3.1  T) 99.65 420.29 T
(ypes of functions) 141.1 420.29 T
1 11 Q
-0.16 (All functions ar) 99.65 400.62 P
-0.16 (e instances of the class) 174.87 400.62 P
4 10 Q
-0.35 (<function>) 285.5 400.62 P
1 11 Q
-0.16 (. Dylan has two built-in instan-) 345.5 400.62 P
(tiable subclasses of) 99.65 386.62 T
4 10 Q
(<function>) 194.63 386.62 T
1 11 Q
(:) 254.63 386.62 T
4 10 Q
(<generic-function>) 260.13 386.62 T
1 11 Q
( and) 368.13 386.62 T
4 10 Q
(<method>) 392.26 386.62 T
1 11 Q
(. Both) 440.26 386.62 T
-0 (methods and generic functions can be called in the same way) 99.65 372.62 P
-0 (. As we have seen, a) 395.51 372.62 P
-0.11 (generic function can contain zer) 99.65 358.62 P
-0.11 (o or mor) 254.14 358.62 P
-0.11 (e methods. If a generic function is called,) 295.64 358.62 P
(it must have at least one applicable method or Dylan signals an err) 99.65 344.62 T
(or) 423.65 344.62 T
(.) 433.19 344.62 T
3 13 Q
(12.3.2  Creation of g) 99.65 313.29 T
(eneric functions) 201.06 313.29 T
1 11 Q
(Y) 99.65 293.62 T
(ou can cr) 105.97 293.62 T
(eate a generic function in the following ways:) 149.93 293.62 T
(\245) 108.65 273.62 T
(Y) 126.65 273.62 T
(ou can cr) 132.97 273.62 T
(eate one explicitly by) 176.93 273.62 T
4 10 Q
(define generic) 282.38 273.62 T
1 11 Q
(.) 366.38 273.62 T
(\245) 108.65 253.62 T
(Y) 126.65 253.62 T
(ou can cr) 132.97 253.62 T
(eate one explicitly by calling) 176.93 253.62 T
4 10 Q
(make) 317.63 253.62 T
1 11 Q
( on the) 341.63 253.62 T
4 10 Q
(<generic-function>) 377.55 253.62 T
1 11 Q
(class. Y) 126.65 239.62 T
(ou rar) 161.39 239.62 T
(ely need to cr) 190.77 239.62 T
(eate a generic function this way) 255.89 239.62 T
(.) 408.45 239.62 T
(\245) 108.65 219.62 T
(Y) 126.65 219.62 T
(ou can cr) 132.97 219.62 T
(eate one implicitly by) 176.93 219.62 T
4 10 Q
(define method) 284.34 219.62 T
1 11 Q
(. If the generic function) 362.34 219.62 T
(named by this de\336nition does not yet exist, Dylan cr) 126.65 205.62 T
(eates it.) 380.03 205.62 T
(\245) 108.65 185.62 T
(Y) 126.65 185.62 T
(ou can cr) 132.97 185.62 T
(eate one implicitly by de\336ning a slot in) 176.93 185.62 T
4 10 Q
(define class) 368.67 185.62 T
1 11 Q
(. If a getter) 440.67 185.62 T
(generic function for the slot does not yet exist, Dylan cr) 126.65 171.62 T
(eates it.) 394.67 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "180" 194
%%Page: "181" 195
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.3 Functions as objects) 411.84 702.62 T
2 F
(181) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(Y) 126.65 665.62 T
(ou can cr) 132.97 665.62 T
(eate one implicitly by de\336ning a slot \050other than a constant slot\051) 176.93 665.62 T
(in) 126.65 651.62 T
4 10 Q
(define class) 139 651.62 T
1 11 Q
(. If a setter generic function for the slot does not yet exist,) 211 651.62 T
(Dylan cr) 126.65 637.62 T
(eates it.) 168.16 637.62 T
(Each of these pr) 99.65 617.62 T
(ocedur) 177.02 617.62 T
(es, except a call to) 210.68 617.62 T
4 10 Q
(make) 300.29 617.62 T
1 11 Q
(, de\336nes a module constant whose) 324.29 617.62 T
(value is the generic function cr) 99.65 603.62 T
(eated.) 248.63 603.62 T
(When Dylan cr) 126.65 589.62 T
(eates a generic function implicitly, it cr) 199.99 589.62 T
(eates a parameter list) 388.02 589.62 T
(and a value declaration for the generic function that ar) 99.65 575.62 T
(e designed to r) 364.21 575.62 T
(estrict the) 435.83 575.62 T
(addition of subsequent methods to the generic function as little as possible. All) 99.65 561.62 T
(r) 99.65 547.62 T
(equir) 103.79 547.62 T
(ed ar) 129.21 547.62 T
(guments to the generic function have type specializers of) 153.59 547.62 T
4 10 Q
(<object>) 432.78 547.62 T
1 11 Q
(,) 480.78 547.62 T
-0.41 (and the generic function can r) 99.65 533.62 P
-0.41 (eturn any number of values of any type. The generic) 242.44 533.62 P
(function\325s parameter list is congr) 99.65 519.62 T
(uent with that of the method being de\336ned. If) 259.47 519.62 T
(the generic function accepts keywor) 99.65 505.62 T
(d ar) 274.39 505.62 T
(guments, the parameter list ends with) 293.51 505.62 T
4 10 Q
(#key) 99.65 491.62 T
1 11 Q
(.) 122.43 491.62 T
3 13 Q
(12.3.3  Creation of methods) 99.65 460.29 T
1 11 Q
(Y) 99.65 440.62 T
(ou can cr) 105.97 440.62 T
(eate a method in the following ways:) 149.93 440.62 T
(\245) 108.65 420.62 T
(Y) 126.65 420.62 T
(ou can cr) 132.97 420.62 T
(eate one explicitly by) 176.93 420.62 T
4 10 Q
(define method) 282.38 420.62 T
1 11 Q
(. This de\336nition also adds) 360.38 420.62 T
(the method to a generic function, cr) 126.65 406.62 T
(eating the generic function if the latter) 299.24 406.62 T
(does not alr) 126.65 392.62 T
(eady exist.) 183.65 392.62 T
(\245) 108.65 372.62 T
(Y) 126.65 372.62 T
(ou can cr) 132.97 372.62 T
(eate one explicitly by a) 176.93 372.62 T
4 10 Q
(method) 290.62 372.62 T
1 11 Q
( statement. This statement does) 326.62 372.62 T
(not add the method to a generic function.) 126.65 358.62 T
(\245) 108.65 338.62 T
(Y) 126.65 338.62 T
(ou can cr) 132.97 338.62 T
(eate one explicitly by a) 176.93 338.62 T
4 10 Q
(local method) 290.62 338.62 T
1 11 Q
( declaration. This declara-) 362.62 338.62 T
(tion cr) 126.65 324.62 T
(eates one or mor) 157.62 324.62 T
(e methods, and assigns each to a local variable such) 238.06 324.62 T
(that the binding is visible to all other methods de\336ned in the same) 126.65 310.62 T
4 10 Q
(local) 451.06 310.62 T
1 11 Q
(declaration. This declaration does not add the method to a generic function.) 126.65 296.62 T
(\245) 108.65 276.62 T
(Y) 126.65 276.62 T
(ou can cr) 132.97 276.62 T
(eate one implicitly by de\336ning a slot \050other than a virtual slot\051 in) 176.93 276.62 T
4 10 Q
(define class) 126.65 262.62 T
1 11 Q
(. Dylan de\336nes a getter method for the slot, and adds it to a) 198.65 262.62 T
(generic function, cr) 126.65 248.62 T
(eating the generic function if that function does not) 220.19 248.62 T
(alr) 126.65 234.62 T
(eady exist.) 139.5 234.62 T
(\245) 108.65 214.62 T
(Y) 126.65 214.62 T
(ou can cr) 132.97 214.62 T
(eate one implicitly by de\336ning a slot \050other than a virtual or a) 176.93 214.62 T
(constant slot\051 in) 126.65 200.62 T
4 10 Q
(define class) 206.65 200.62 T
1 11 Q
(. Dylan de\336nes a setter method for the slot,) 278.65 200.62 T
(and adds it to a generic function, cr) 126.65 186.62 T
(eating the generic function if that func-) 298.05 186.62 T
(tion does not alr) 126.65 172.62 T
(eady exist.) 205.6 172.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "181" 195
%%Page: "182" 196
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(182) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Cr) 99.65 665.62 T
(eating a method by using) 111.59 665.62 T
4 10 Q
(method) 237.83 665.62 T
1 11 Q
( is useful when the method does not need to) 273.83 665.62 T
(be part of a generic function. For instance, various Dylan functions take as ar) 99.65 651.62 T
(gu-) 472.12 651.62 T
(ments other functions that act as pr) 99.65 637.62 T
(edicates, or test functions. One of these is) 270.8 637.62 T
4 10 Q
(choose) 99.65 623.62 T
1 11 Q
(, which selects members of a sequence that satisfy a test function, and) 135.65 623.62 T
(r) 99.65 609.62 T
(eturns those members as a new sequence. W) 103.79 609.62 T
(e might pick all the strings out of a) 318.72 609.62 T
(mixed sequence as follows:) 99.65 595.62 T
4 9 Q
(define method choose-strings) 99.65 574.95 T
(\050sequence :: <sequence>\051 => \050new-seq :: <sequence>\051) 121.25 563.95 T
5 F
(// choose takes two arguments: a function and a sequence) 110.45 552.95 T
4 F
(choose\050method \050object\051 instance?\050object, <string>\051 end method, sequence\051;) 110.45 541.95 T
(end method choose-strings;) 110.45 530.95 T
1 11 Q
(Cr) 99.65 510.62 T
(eating a method by using) 111.59 510.62 T
4 10 Q
(local method) 237.83 510.62 T
1 11 Q
( is useful for a method that does not) 309.83 510.62 T
(need to be part of a generic function, but does need to be given a name so that it) 99.65 496.62 T
-0.38 (can call itself r) 99.65 482.62 P
-0.38 (ecursively) 168.05 482.62 P
-0.38 (, or so that other code in the enclosing body can r) 216.63 482.62 P
-0.38 (efer to it.) 450.87 482.62 P
(For an example, see Section 1) 99.65 468.62 T
(1.3.6, page 147.) 240.98 468.62 T
3 13 Q
(12.3.4  Application of a function to ar) 99.65 437.29 T
(guments) 286.11 437.29 T
1 11 Q
(The Dylan function) 99.65 417.62 T
4 10 Q
(apply) 196.82 417.62 T
1 11 Q
( takes as ar) 226.82 417.62 T
(guments a function and one or mor) 280.02 417.62 T
(e addi-) 451.7 417.62 T
(tional ar) 99.65 403.62 T
(guments, the \336nal one of which must be a sequence. The) 139.94 403.62 T
4 10 Q
(apply) 416.91 403.62 T
1 11 Q
( function) 446.91 403.62 T
(calls its \336rst ar) 99.65 389.62 T
(gument \321 the function \321 and passes that function the r) 169.7 389.62 T
(emaining) 442.2 389.62 T
(ar) 99.65 375.62 T
(guments to) 109.29 375.62 T
4 10 Q
(apply) 166.77 375.62 T
1 11 Q
(. But instead of passing its \336nal ar) 195.55 375.62 T
(gument as a sequence, it) 359.52 375.62 T
(passes each element of the sequence as an individual ar) 99.65 361.62 T
(gument.) 368.72 361.62 T
(The) 126.65 347.62 T
4 10 Q
(apply) 147.81 347.62 T
1 11 Q
( function is per) 177.81 347.62 T
(haps most useful in the body of a function that) 250.73 347.62 T
(r) 99.65 333.62 T
(eceives a variable number of ar) 103.79 333.62 T
(guments and must pass those ar) 254.89 333.62 T
(guments to) 411.26 333.62 T
-0.32 (another function that also takes a variable number of ar) 99.65 319.62 P
-0.32 (guments. For example, we) 365.92 319.62 P
(can use) 99.65 305.62 T
4 10 Q
(apply) 138.5 305.62 T
1 11 Q
( to write a r) 168.5 305.62 T
(ecursive version of the) 224.31 305.62 T
4 10 Q
(sum) 336.82 305.62 T
1 11 Q
( function that we de\336ned) 354.82 305.62 T
(iteratively in Section 12.2.3, page 172:) 99.65 291.62 T
5 9 Q
(// Sum one or more values) 99.65 270.95 T
4 F
(define method sum \050value, #rest more-values\051) 99.65 259.95 T
5 F
(// If only one value, that is the answer) 110.45 248.95 T
4 F
(if \050empty?\050more-values\051\051) 110.45 237.95 T
(value;) 121.25 226.95 T
5 F
(// Otherwise, add the first value to the sum of the rest) 110.45 215.95 T
4 F
(else) 110.45 204.95 T
(value + apply\050sum, more-values\051;) 121.25 193.95 T
(end if;) 110.45 182.95 T
(end method sum;) 99.65 171.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "182" 196
%%Page: "183" 197
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.3 Functions as objects) 411.84 702.62 T
2 F
(183) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(12.3.5  Operations on functions) 99.65 664.29 T
1 11 Q
(Dylan has several functions that take functions as ar) 99.65 644.62 T
(guments, and r) 352.65 644.62 T
(eturn new) 426.05 644.62 T
(functions that ar) 99.65 630.62 T
(e transformations of those ar) 179.31 630.62 T
(guments. These operations permit) 318.4 630.62 T
(many kinds of composition of functions and other objects to generate new) 99.65 616.62 T
(functions.) 99.65 602.62 T
(Thr) 126.65 588.62 T
(ee of these functions take pr) 143.94 588.62 T
(edicates as ar) 279.76 588.62 T
(guments, and r) 344.16 588.62 T
(eturn the com-) 417.57 588.62 T
(plement, disjunction, or conjunction of the pr) 99.65 574.62 T
(edicates. For example,) 318.99 574.62 T
4 10 Q
(complement) 429.54 574.62 T
1 11 Q
-0.38 (takes a pr) 99.65 560.62 P
-0.38 (edicate and r) 145.78 560.62 P
-0.38 (eturns the latter) 207.72 560.62 P
-0.38 (\325s complement \321 a function that r) 284.92 560.62 P
-0.38 (eturns) 448.01 560.62 P
4 10 Q
-0.83 (#t) 481.28 560.62 P
1 11 Q
(when the original pr) 99.65 546.62 T
(edicate would have r) 199.13 546.62 T
(eturned) 301.08 546.62 T
4 10 Q
(#f) 342.05 546.62 T
1 11 Q
(, and otherwise r) 354.05 546.62 T
(eturns) 435.74 546.62 T
4 10 Q
(#f) 469.39 546.62 T
1 11 Q
(.) 481.39 546.62 T
(The) 126.65 532.62 T
4 10 Q
(curry) 147.81 532.62 T
1 11 Q
( function takes a function and any number of additional ar) 177.81 532.62 T
(gu-) 461.94 532.62 T
(ments. It r) 99.65 518.62 T
(eturns a new function that applies the original function, \336rst to the) 148.97 518.62 T
-0.03 (additional ar) 99.65 504.62 P
-0.03 (guments to) 162.05 504.62 P
4 10 Q
-0.07 (curry) 219.47 504.62 P
1 11 Q
-0.03 (, then to the ar) 248.25 504.62 P
-0.03 (guments to the new function. In Sec-) 318.03 504.62 P
-0.34 (tion 1) 99.65 490.62 P
-0.34 (1.3.7, page 147, we call) 126.15 490.62 P
4 10 Q
-0.75 (curry) 236.91 490.62 P
1 11 Q
-0.34 ( with) 266.91 490.62 P
4 10 Q
-0.75 (\134*) 294.09 490.62 P
1 11 Q
-0.34 ( and a number to r) 306.09 490.62 P
-0.34 (eturn a function that) 394.43 490.62 P
(multiplies that function\325s ar) 99.65 476.62 T
(gument by the given number) 234.4 476.62 T
(. W) 375.41 476.62 T
(e then map this new) 390.89 476.62 T
(function over the elements of a vector to perform a scalar multiplication of the) 99.65 462.62 T
(vector) 99.65 448.62 T
(.) 129.14 448.62 T
(In fact, Dylan has a set of functions that map other functions over the ele-) 126.65 434.62 T
(ments of collections in dif) 99.65 420.62 T
(fer) 224.24 420.62 T
(ent ways. W) 237.32 420.62 T
(e used one of these,) 296.27 420.62 T
4 10 Q
(choose) 393.86 420.62 T
1 11 Q
(, in Section) 429.86 420.62 T
-0.08 (12.3.3, page 181. Some of these functions r) 99.65 406.62 P
-0.08 (eturn new collections; others r) 302.57 406.62 P
-0.08 (eturn sin-) 448.81 406.62 P
(gle values. For mor) 99.65 392.62 T
(e examples, see Section 1) 193.05 392.62 T
(1.3, page 142.) 313.19 392.62 T
3 13 Q
(12.3.6  Closures) 99.65 361.29 T
1 11 Q
-0.07 (This section describes closur) 99.65 341.62 P
-0.07 (es \321 an advanced concept. If you do not understand) 237.34 341.62 P
(or wish to study this section, you can safely skip it.) 99.65 327.62 T
(Consider the following example:) 126.65 313.62 T
4 9 Q
(define method call-and-show \050function :: <function>, #rest arguments\051) 99.65 292.95 T
(format-out\050"The result is %=.\134n", apply\050function, arguments\051\051;) 110.45 281.95 T
(end method call-and-show;) 99.65 270.95 T
(define method show-next \050x :: <integer>\051) 99.65 251.95 T
(call-and-show\050method \050\051 x + 1 end method\051;) 110.45 240.95 T
(end method show-next;) 99.65 229.95 T
1 11 Q
(When we execute this code, we get the expected r) 99.65 209.62 T
(esult:) 340.09 209.62 T
6 9 Q
(?) 99.65 188.95 T
4 F
( show-next\05041\051;) 105.05 188.95 T
6 F
(The result is 42.) 99.65 177.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "183" 197
%%Page: "184" 198
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(184) 63.65 702.62 T
0 F
(Chapter 12) 87.4 702.62 T
(Functions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.19 (But why did we get that r) 99.65 665.62 P
-0.19 (esult? W) 222.91 665.62 P
-0.19 (e cr) 263.7 665.62 P
-0.19 (eated an anonymous method in) 280.55 665.62 P
4 10 Q
-0.42 (show-next) 436.34 665.62 P
1 11 Q
-0.19 (,) 490.34 665.62 P
(and passed that anonymous method into a completely separate method \050) 99.65 651.62 T
4 10 Q
(call-) 454.07 651.62 T
-0.35 (and-show) 99.65 637.62 P
1 11 Q
-0.16 (\051, wher) 147.65 637.62 P
-0.16 (e) 181.64 637.62 P
4 10 Q
-0.35 (x) 189.5 637.62 P
1 11 Q
-0.16 ( is not bound to anything. And yet, when the) 195.5 637.62 P
4 10 Q
-0.35 (call-and-show) 415.06 637.62 P
1 11 Q
(method executed the anonymous method that we made, somehow the anony-) 99.65 623.62 T
(mous method could still access the) 99.65 609.62 T
4 10 Q
(x) 271.28 609.62 T
1 11 Q
( binding. W) 277.28 609.62 T
(e got this r) 333.64 609.62 T
(easonable r) 384.87 609.62 T
(esult) 439.66 609.62 T
-0.22 (because the) 99.65 595.62 P
4 10 Q
-0.47 (method) 158.28 595.62 P
1 11 Q
-0.22 ( statement can cr) 194.28 595.62 P
-0.22 (eate a special kind of method called a closur) 275.27 595.62 P
-0.22 (e.) 487.63 595.62 P
-0.19 (Recall that Dylan has two kinds of variable: module variables and local vari-) 126.65 581.62 P
(ables. A local variable is de\336ned explicitly by a) 99.65 567.62 T
4 10 Q
(let) 330.08 567.62 T
1 11 Q
( or) 348.08 567.62 T
4 10 Q
(local) 363.93 567.62 T
1 11 Q
( declaration, and) 393.93 567.62 T
(implicitly by a function call, when a method\325s parameters ar) 99.65 553.62 T
(e initialized to that) 391.94 553.62 T
-0.27 (method\325s ar) 99.65 539.62 P
-0.27 (guments. Local variables ar) 157.19 539.62 P
-0.27 (e de\336ned within a limited) 289.69 539.62 P
2 F
-0.27 (lexical scope) 416.74 539.62 P
1 F
-0.27 ( \321) 479.69 539.62 P
-0.09 (that is, they) 99.65 525.62 P
2 F
-0.09 (bind) 158.7 525.62 P
1 F
-0.09 ( a name to a value only within a particular textual portion of the) 182.53 525.62 P
(pr) 99.65 511.62 T
(ogram. This portion of the pr) 110.41 511.62 T
(ogram is that part of the innermost body that fol-) 251.44 511.62 T
(lows the de\336nition of the local variable.) 99.65 497.62 T
-0.26 (A) 126.65 483.62 P
4 10 Q
-0.57 (method) 137.7 483.62 P
1 11 Q
-0.26 ( statement or a) 173.7 483.62 P
4 10 Q
-0.57 (local) 247.07 483.62 P
1 11 Q
-0.26 ( declaration can de\336ne a method in a portion) 277.08 483.62 P
-0.15 (of a pr) 99.65 469.62 P
-0.15 (ogram wher) 130.77 469.62 P
-0.15 (e local variables ar) 190.04 469.62 P
-0.15 (e in ef) 279.52 469.62 P
-0.15 (fect. In the pr) 308.33 469.62 P
-0.15 (eceding example, we use) 372.39 469.62 P
-0.26 (a) 99.65 455.62 P
4 10 Q
-0.58 (method) 107.63 455.62 P
1 11 Q
-0.26 ( statement to de\336ne a method inside the body of the) 143.63 455.62 P
4 10 Q
-0.58 (show-next) 396.23 455.62 P
1 11 Q
-0.26 ( method,) 450.23 455.62 P
(wher) 99.65 441.62 T
(e the local variable) 124.64 441.62 T
4 10 Q
(x) 218.27 441.62 T
1 11 Q
( \050the parameter for the) 224.27 441.62 T
4 10 Q
(show-next) 336.35 441.62 T
1 11 Q
( method\051 is bound to) 390.35 441.62 T
(the ar) 99.65 427.62 T
(gument to) 127.3 427.62 T
4 10 Q
(show-next) 180.11 427.62 T
1 11 Q
(. The method that we de\336ne inside) 234.11 427.62 T
4 10 Q
(show-next) 405.52 427.62 T
1 11 Q
( r) 459.52 427.62 T
(efers) 466.41 427.62 T
(to that local variable) 99.65 413.62 T
4 10 Q
(x) 201.42 413.62 T
1 11 Q
(.) 207.42 413.62 T
(In general, when a pr) 126.65 399.62 T
(ogram exits a body) 230.11 399.62 T
(, the local variables de\336ned inside) 321.64 399.62 T
(that body cease to be de\336ned, and it is an err) 99.65 385.62 T
(or for the pr) 316.4 385.62 T
(ogram to r) 375.03 385.62 T
(efer to those) 425.95 385.62 T
-0.4 (variables. But ther) 99.65 371.62 P
-0.4 (e is an exception. If we use) 187.43 371.62 P
4 10 Q
-0.87 (method) 316.97 371.62 P
1 11 Q
-0.4 ( or) 352.97 371.62 P
4 10 Q
-0.87 (local) 368.03 371.62 P
1 11 Q
-0.4 ( to de\336ne a method,) 398.03 371.62 P
(and if we then execute that method outside the body in which we de\336ne it, the) 99.65 357.62 T
(method can still r) 99.65 343.62 T
(efer to the local variables that wer) 184.38 343.62 T
(e in ef) 348.71 343.62 T
(fect when the method) 377.82 343.62 T
(was de\336ned. Such a method is called a closur) 99.65 329.62 T
(e.) 319.34 329.62 T
-0.06 (A) 126.65 315.62 P
2 F
-0.06 (closure) 137.89 315.62 P
1 F
-0.06 ( is a method that) 173.94 315.62 P
2 F
-0.06 (closes over) 257.51 315.62 P
1 F
-0.06 ( or captur) 312.14 315.62 P
-0.06 (es local variables that ar) 359.23 315.62 P
-0.06 (e in) 475.4 315.62 P
(ef) 99.65 301.62 T
(fect when the method is de\336ned and that ar) 108.38 301.62 T
(e r) 320.23 301.62 T
(eferr) 332.4 301.62 T
(ed to in the body of the) 355.09 301.62 T
-0.32 (method. The closur) 99.65 287.62 P
-0.32 (e cr) 192.9 287.62 P
-0.32 (eated by the) 209.62 287.62 P
4 10 Q
-0.7 (method) 270.71 287.62 P
1 11 Q
-0.32 ( statement in our example captur) 306.71 287.62 P
-0.32 (es the) 465.6 287.62 P
(local variable) 99.65 273.62 T
4 10 Q
(x) 167.25 273.62 T
1 11 Q
(. So, even though the local variable) 173.25 273.62 T
4 10 Q
(x) 345.45 273.62 T
1 11 Q
( is not de\336ned in the lexical) 351.45 273.62 T
(scope of the) 99.65 259.62 T
4 10 Q
(call-and-show) 160.26 259.62 T
1 11 Q
( method, the closur) 238.26 259.62 T
(e called by) 331.75 259.62 T
4 10 Q
(call-and-show) 386.24 259.62 T
1 11 Q
( can) 464.24 259.62 T
(access the captur) 99.65 245.62 T
(ed binding of) 181.63 245.62 T
4 10 Q
(x) 249.67 245.62 T
1 11 Q
(.) 255.67 245.62 T
(For examples of closur) 126.65 231.62 T
(es as iteration or mapping functions for collections,) 236.47 231.62 T
(see Section 1) 99.65 217.62 T
(1.3.5, page 146, and Section 1) 160.37 217.62 T
(1.3.7, page 147.) 300.26 217.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "184" 198
%%Page: "185" 199
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12.4 Summary) 450.89 702.62 T
2 F
(185) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(12.4) 99.65 662.95 T
(Summar) 130.43 662.95 T
(y) 179.76 662.95 T
1 11 Q
(In this chapter) 99.65 642.62 T
(, we cover) 168.89 642.62 T
(ed the following:) 218.11 642.62 T
(\245) 108.65 622.62 T
(W) 126.65 622.62 T
(e described the syntax of Dylan function calls, including syntactic str) 136.64 622.62 T
(uc-) 470.23 622.62 T
(tur) 126.65 608.62 T
(es that ar) 141.01 608.62 T
(e abbr) 185.17 608.62 T
(eviations for function calls. These syntactic str) 215 608.62 T
(uctur) 438.21 608.62 T
(es) 464.1 608.62 T
(include slot r) 126.65 594.62 T
(efer) 190.06 594.62 T
(ences, element r) 208.41 594.62 T
(efer) 286.01 594.62 T
(ences, and most operator calls.) 304.35 594.62 T
(\245) 108.65 574.62 T
(W) 126.65 574.62 T
(e described how a function and its caller interact. In particular) 136.64 574.62 T
(, we dis-) 437.52 574.62 T
(cussed the r) 126.65 560.62 T
(elations among ar) 184.39 560.62 T
(guments, parameters, value declarations, and) 271.1 560.62 T
(r) 126.65 546.62 T
(eturned values.) 130.79 546.62 T
(\245) 108.65 526.62 T
(W) 126.65 526.62 T
(e discussed the kinds of parameters that a function can have \050r) 136.64 526.62 T
(equir) 439.74 526.62 T
(ed,) 465.15 526.62 T
(r) 126.65 512.62 T
(est, and keywor) 130.79 512.62 T
(d\051. W) 208.01 512.62 T
(e then outlined the r) 233.89 512.62 T
(ules for congr) 332.35 512.62 T
(uent parameter) 399.29 512.62 T
(lists and value declarations of a generic function and its methods.) 126.65 498.62 T
(\245) 108.65 478.62 T
(W) 126.65 478.62 T
(e discussed ways of cr) 136.64 478.62 T
(eating generic functions and methods, and of) 244.48 478.62 T
(applying a function to ar) 126.65 464.62 T
(guments.) 246.92 464.62 T
(\245) 108.65 444.62 T
(W) 126.65 444.62 T
(e outlined Dylan\325s operations on functions.) 136.64 444.62 T
(\245) 108.65 424.62 T
(W) 126.65 424.62 T
(e intr) 136.64 424.62 T
(oduced the concept of closur) 161.99 424.62 T
(es.) 301.33 424.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 199
%%Page: "186" 200
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 200
%%Page: "187" 201
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(187) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(13) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(13) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Libraries and Modules) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(As you cr) 99.65 449.62 T
(eate a pr) 146.16 449.62 T
(ogram, you will often discover subsets of your code that ar) 187.54 449.62 T
(e) 473.16 449.62 T
(candidates for sharing, r) 99.65 435.62 T
(euse, or r) 217.89 435.62 T
(esale. Alternatively) 262.47 435.62 T
(, you may be working on a) 355.1 435.62 T
(lar) 99.65 421.62 T
(ge pr) 112.5 421.62 T
(ogram that has been divided into pieces that can be implemented sepa-) 137.39 421.62 T
(rately) 99.65 407.62 T
(, either to allow parallel development, or to make the pr) 126.44 407.62 T
(ogramming task) 397.84 407.62 T
(mor) 99.65 393.62 T
(e manageable. For either of these r) 119.51 393.62 T
(easons, you can package your code into a) 286.13 393.62 T
2 F
(reusable software component) 99.65 379.62 T
1 F
( so that) 247.52 379.62 T
(\245) 108.65 359.62 T
(Other pr) 126.65 359.62 T
(ogrammers can easily add your component to their pr) 168.4 359.62 T
(ograms) 430.89 359.62 T
(\050which ar) 126.65 345.62 T
(e called) 172.77 345.62 T
2 F
(client programs) 212.32 345.62 T
1 F
( of your component\051.) 290.83 345.62 T
(\245) 108.65 325.62 T
(Y) 126.65 325.62 T
(ou can develop your component independently fr) 132.97 325.62 T
(om any clients.) 375.15 325.62 T
(\245) 108.65 305.62 T
(Clients can use your code without knowing or depending on the internal) 126.65 305.62 T
(implementation of your component.) 126.65 291.62 T
(\245) 108.65 271.62 T
(Y) 126.65 271.62 T
(ou can sell your component to clients without r) 132.97 271.62 T
(evealing your sour) 362.25 271.62 T
(ce code.) 453.47 271.62 T
-0.14 (T) 99.65 251.62 P
-0.14 (wo important principles of softwar) 105.4 251.62 P
-0.14 (e engineering apply her) 274.77 251.62 P
-0.14 (e: information hiding) 389.73 251.62 P
(and pr) 99.65 237.62 T
(otocols. The principle of) 131.78 237.62 T
2 F
(information hiding) 251.69 237.62 T
1 F
( says that you should try to) 348.55 237.62 T
(minimize the information that is passed between components in a system, thus) 99.65 223.62 T
(minimizing the inter) 99.65 209.62 T
(dependencies of components. A) 199.66 209.62 T
2 F
(protocol) 357.86 209.62 T
1 F
( is the interface def-) 399.42 209.62 T
-0.46 (inition of a softwar) 99.65 195.62 P
-0.46 (e component. The purpose of establishing pr) 190.43 195.62 P
-0.46 (otocols is to de\336ne) 404.35 195.62 P
(a uniform interface that clients can use, even if the implementation of a) 99.65 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 201
%%Page: "188" 202
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(188) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.02 (component is enhanced or modi\336ed. Dylan supports softwar) 99.65 665.62 P
-0.02 (e components, infor-) 395.34 665.62 P
(mation hiding, and pr) 99.65 651.62 T
(otocols in terms of) 206.48 651.62 T
2 F
(libraries) 298.68 651.62 T
1 F
( and) 340.83 651.62 T
2 F
(modules) 364.96 651.62 T
1 F
(.) 408.34 651.62 T
(Many Dylan envir) 126.65 637.62 T
(onments support simple or exploratory pr) 215.54 637.62 T
(ogramming) 420.22 637.62 T
(with a) 99.65 623.62 T
4 10 Q
(dylan-user) 133.01 623.62 T
1 11 Q
( module that includes both the standar) 193.01 623.62 T
(d Dylan language facil-) 380.96 623.62 T
(ities and a common subset of Dylan libraries. Because all but the simplest pr) 99.65 609.62 T
(o-) 469.09 609.62 T
-0.04 (grams usually gr) 99.65 595.62 P
-0.04 (ow into pr) 181.62 595.62 P
-0.04 (ojects or ar) 232.17 595.62 P
-0.04 (e r) 284.57 595.62 P
-0.04 (eused in new pr) 296.69 595.62 P
-0.04 (ojects, it is good practice) 374.58 595.62 P
(to cr) 99.65 581.62 T
(eate a unique library and module for each pr) 121.02 581.62 T
(ogram or component. If you ar) 338.23 581.62 T
(e) 487.41 581.62 T
(writing a simple, stand-alone pr) 99.65 567.62 T
(ogram or a simple component, you can use the) 255.25 567.62 T
(simple library and module str) 99.65 553.62 T
(uctur) 244.77 553.62 T
(e illustrated in Section 2.5, page 20. Y) 270.65 553.62 T
(ou may) 449.88 553.62 T
(want to skim this chapter) 99.65 539.62 T
(, however) 222.23 539.62 T
(, so you have an idea of the options available) 269.6 539.62 T
(for mor) 99.65 525.62 T
(e complex situations.) 136.28 525.62 T
-0.2 (In this chapter) 126.65 511.62 P
-0.2 (, we start by describing the basic concepts of libraries \050Section) 195.49 511.62 P
(13.1\051, modules and namespaces \050Section 13.2\051, and pr) 99.65 497.62 T
(ograms and sour) 357.7 497.62 T
(ce r) 439.61 497.62 T
(ecor) 456.66 497.62 T
(ds) 476.97 497.62 T
(\050Section 13.3\051. In the r) 99.65 483.62 T
(emainder of the chapter) 204.61 483.62 T
(, we illustrate the concepts of librar-) 319.99 483.62 T
-0.43 (ies and modules by considering the classes and methods for times that we de\336ned) 99.65 469.62 P
(in Chapter 8,) 99.65 455.62 T
0 F
(A Simple Library) 168.01 455.62 T
1 F
(, and showing how they might be packaged into a) 245.23 455.62 T
(r) 99.65 441.62 T
(eusable softwar) 103.79 441.62 T
(e component or library) 179.9 441.62 T
(. W) 290.22 441.62 T
(e also show how the) 305.71 441.62 T
4 10 Q
(sixty-unit) 407.19 441.62 T
1 11 Q
(classes and methods could be a component substrate that the) 99.65 427.62 T
4 10 Q
(time) 398.82 427.62 T
1 11 Q
( library uses) 422.82 427.62 T
(and shar) 99.65 413.62 T
(es with an) 141.73 413.62 T
4 10 Q
(angle) 194.18 413.62 T
1 11 Q
( library) 224.18 413.62 T
(. Finally) 258.5 413.62 T
(, we illustrate how to implement a) 296.52 413.62 T
4 10 Q
(say) 465.79 413.62 T
1 11 Q
(pr) 99.65 399.62 T
(otocol that works with either or both of the) 110.41 399.62 T
4 10 Q
(time) 322.01 399.62 T
1 11 Q
( and) 346.01 399.62 T
4 10 Q
(angle) 370.14 399.62 T
1 11 Q
( libraries by cr) 400.14 399.62 T
(eat-) 469.42 399.62 T
(ing a separate library that de\336nes the shar) 99.65 385.62 T
(ed pr) 303.68 385.62 T
(otocol.) 329.17 385.62 T
3 15 Q
(13.1  Libraries) 99.65 345.95 T
1 11 Q
(A Dylan library de\336nes a softwar) 99.65 325.62 T
(e component \321 a separately compilable unit) 261.7 325.62 T
(that can be either a stand-alone pr) 99.65 311.62 T
(ogram or a component \050library\051 of some lar) 264.6 311.62 T
(ger) 474.55 311.62 T
(pr) 99.65 297.62 T
(ogram. The elements of the cor) 110.41 297.62 T
(e Dylan language ar) 260.34 297.62 T
(e in a library called) 357.97 297.62 T
4 10 Q
(dylan) 453.66 297.62 T
1 11 Q
(.) 483.66 297.62 T
(The simplest Dylan pr) 99.65 283.62 T
(ogram consists of at least two libraries: the original pr) 207.71 283.62 T
(o-) 468.5 283.62 T
-0.21 (gram sour) 99.65 269.62 P
-0.21 (ce in the pr) 149.31 269.62 P
-0.21 (ogram library) 202.71 269.62 P
-0.21 (, and the) 268.5 269.62 P
4 10 Q
-0.46 (dylan) 312.76 269.62 P
1 11 Q
-0.21 ( library) 342.76 269.62 P
-0.21 (, which supplies the pr) 376.87 269.62 P
-0.21 (e-) 486.72 269.62 P
(de\336ned Dylan language elements used by the pr) 99.65 255.62 T
(ogram library) 335.28 255.62 T
(. A simple Dylan) 401.28 255.62 T
(component may consist of only a single library \321 the component library) 99.65 241.62 T
(. The) 450.76 241.62 T
-0.2 (component library will be used by other libraries. The component library will use) 99.65 227.62 P
-0.3 (de\336nitions fr) 99.65 213.62 P
-0.3 (om the) 162.01 213.62 P
4 10 Q
-0.65 (dylan) 197.89 213.62 P
1 11 Q
-0.3 ( library \050and possibly other components\051. Hence, when) 227.89 213.62 P
-0.17 (combined with other components into a complete pr) 99.65 199.62 P
-0.17 (ogram, the pr) 353.48 199.62 P
-0.17 (ogram will con-) 419.08 199.62 P
(sist of several libraries.) 99.65 185.62 T
(In each Dylan implementation, a library is associated with implementation-) 126.65 171.62 T
-0 (speci\336c export information that is automatically maintained by the compiler) 99.65 157.62 P
-0 (. The) 468.99 157.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 202
%%Page: "189" 203
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.2 Modules) 455.65 702.62 T
2 F
(189) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(library export information completely describes whatever implementation-) 99.65 665.62 T
(speci\336c information is needed for other softwar) 99.65 651.62 T
(e components to use the library) 330.22 651.62 T
(.) 481.77 651.62 T
(Thus, you can use libraries to deliver components in compiled form, keeping the) 99.65 637.62 T
(implementation of the library con\336dential.) 99.65 623.62 T
3 15 Q
(13.2  Modules) 99.65 463.95 T
1 11 Q
(A library is made up of modules, which hold the de\336nitions of the library) 99.65 443.62 T
(. Each) 455.94 443.62 T
(module speci\336es an independent) 99.65 429.62 T
2 F
(namespace) 263.16 429.62 T
1 F
( for Dylan constants and variables.) 318.15 429.62 T
(Each module can use de\336nitions fr) 99.65 415.62 T
(om other modules in the same library or in) 267.72 415.62 T
(other libraries, and each module can pr) 99.65 401.62 T
(ovide de\336nitions to other modules in the) 290.08 401.62 T
-0.15 (same or in other libraries. Each module contr) 99.65 387.62 P
-0.15 (ols the visibility of the names within) 317.2 387.62 P
(a module fr) 99.65 373.62 T
(om outside the module. Y) 156 373.62 T
(ou can use modules both to do information) 280.67 373.62 T
(hiding and to pr) 99.65 359.62 T
(event name clashes between constants and variables.) 178.91 359.62 T
3 13 Q
(13.2.1  Namespaces) 99.65 328.29 T
1 11 Q
(W) 99.65 308.62 T
(e mentioned in Section 2.3, page 14, that Dylan has module variables and mod-) 109.64 308.62 T
(ule constants. Every module contains its own set of module variables and con-) 99.65 294.62 T
(stants. T) 99.65 280.62 T
(wo independent modules) 139.3 280.62 T
4 10 Q
(a) 266.79 280.62 T
1 11 Q
( and) 272.79 280.62 T
4 10 Q
(b) 296.92 280.62 T
1 11 Q
( might both have variables named) 302.92 280.62 T
4 10 Q
(*x*) 471.48 280.62 T
1 11 Q
(.) 489.48 280.62 T
-0.26 (These ar) 99.65 266.62 P
-0.26 (e two dif) 140.14 266.62 P
-0.26 (fer) 182.55 266.62 P
-0.26 (ent variables with possibly dif) 195.62 266.62 P
-0.26 (fer) 341.13 266.62 P
-0.26 (ent values. W) 354.21 266.62 P
-0.26 (ithin module) 419.08 266.62 P
4 10 Q
-0.56 (a) 484.4 266.62 P
1 11 Q
-0.26 (,) 490.4 266.62 P
(a r) 99.65 252.62 T
(efer) 112.04 252.62 T
(ence to module variable) 130.39 252.62 T
4 10 Q
(*x*) 249.67 252.62 T
1 11 Q
( is a r) 267.67 252.62 T
(efer) 293.43 252.62 T
(ence to) 311.78 252.62 T
4 10 Q
(a) 348.69 252.62 T
1 11 Q
(\325s variable) 354.69 252.62 T
4 10 Q
(*x*) 407.23 252.62 T
1 11 Q
(. W) 425.23 252.62 T
(ithin mod-) 441.12 252.62 T
(ule) 99.65 238.62 T
4 10 Q
(b) 117.5 238.62 T
1 11 Q
(, a r) 123.5 238.62 T
(efer) 141.4 238.62 T
(ence to module variable) 159.75 238.62 T
4 10 Q
(*x*) 279.02 238.62 T
1 11 Q
( is a r) 297.02 238.62 T
(efer) 322.78 238.62 T
(ence to) 341.13 238.62 T
4 10 Q
(b) 378.05 238.62 T
1 11 Q
(\325s variable) 384.05 238.62 T
4 10 Q
(*x*) 436.58 238.62 T
1 11 Q
(. In this) 454.58 238.62 T
(sense, a module de\336nes its own namespace.) 99.65 224.62 T
3 13 Q
(13.2.2  De\336nitions) 99.65 193.29 T
1 11 Q
-0.09 (A module variable or module constant is declar) 99.65 173.62 P
-0.09 (ed and initialized by a) 330.17 173.62 P
2 F
-0.09 (de\336nition) 440.75 173.62 P
1 F
-0.09 (.) 490.24 173.62 P
(W) 99.65 159.62 T
(e have alr) 109.64 159.62 T
(eady seen that) 156.64 159.62 T
4 10 Q
(define variable) 229.17 159.62 T
1 11 Q
( is a de\336nition that establishes a) 319.17 159.62 T
2 F
(Comparison with C++ and Modula:) 132.65 589.62 T
1 F
( Dylan libraries ar) 311.27 589.62 T
(e similar to) 398.7 589.62 T
(C++ libraries in that they both ar) 132.65 575.62 T
(e potentially shar) 291.86 575.62 T
(ed components of) 376.02 575.62 T
(many pr) 132.65 561.62 T
(ograms. Unlike C++ libraries, Dylan libraries include all the) 173.89 561.62 T
-0.22 (information needed to be used by another Dylan library \321 ther) 132.65 547.62 P
-0.22 (e is no) 438.51 547.62 P
(companion header \336le that must be kept up to date.) 132.65 533.62 T
(Dylan libraries ar) 159.65 519.62 T
(e analogous to Modula packages \321 all the) 244.34 519.62 T
(information necessary to use a library is contained in the library) 132.65 505.62 T
(.) 442 505.62 T
126.65 602.83 126.65 498.08 2 L
V
0.25 H
0 Z
N
477.65 602.83 477.65 498.08 2 L
V
N
126.52 602.95 477.77 602.95 2 L
V
N
126.52 497.95 477.77 497.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 203
%%Page: "190" 204
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(190) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(module variable, and) 99.65 665.62 T
4 10 Q
(define constant) 206.13 665.62 T
1 11 Q
( is a de\336nition that establishes a module) 296.13 665.62 T
(constant. Dylan also uses module constants to r) 99.65 651.62 T
(efer to classes, generic functions,) 329.99 651.62 T
(and macr) 99.65 637.62 T
(os. The de\336nition for a class,) 145.26 637.62 T
4 10 Q
(define class) 286.22 637.62 T
1 11 Q
(, establishes a module con-) 358.22 637.62 T
-0.01 (stant whose name is the class name and whose value is the class object. Similarly) 99.65 623.62 P
-0.01 (,) 490.16 623.62 P
(the de\336nitions for a generic function and a macr) 99.65 609.62 T
(o establish module constants.) 333.16 609.62 T
(When we say that a module contains de\336nitions, we mean that the classes,) 99.65 595.62 T
-0.25 (generic functions, macr) 99.65 581.62 P
-0.25 (os, and other objects de\336ned in that module ar) 212.56 581.62 P
-0.25 (e the values) 436.15 581.62 P
(of variables and constants in that module.) 99.65 567.62 T
3 13 Q
(13.2.3  Expor) 99.65 536.29 T
(t and impor) 165.64 536.29 T
(t of names b) 223.89 536.29 T
(y modules) 286.48 536.29 T
1 11 Q
(W) 99.65 516.62 T
(ithin each module, every name r) 110.04 516.62 T
(efers either to a de\336nition owned by that mod-) 267.18 516.62 T
(ule, or possibly to a de\336nition owned by another module. Modules make the) 99.65 502.62 T
(names of their de\336nitions available to other modules by) 99.65 488.62 T
2 F
(exporting) 373.8 488.62 T
1 F
( those names.) 422.08 488.62 T
(A module can r) 99.65 474.62 T
(efer to the names of another module by) 174.93 474.62 T
2 F
(using) 368.8 474.62 T
1 F
( the other module.) 396.9 474.62 T
(Note that no module can access a de\336nition in another module that is not) 99.65 460.62 T
(exported; hence, modules pr) 99.65 446.62 T
(ovide a form of access contr) 238.07 446.62 T
(ol.) 373.02 446.62 T
(When a module exports its names and a second module uses the \336rst mod-) 126.65 432.62 T
(ule, importing the names of the \336rst module, then the de\336nitions of the second) 99.65 418.62 T
-0.34 (module can use the names of the \336rst module, just as they can use any other name) 99.65 404.62 P
(in their own module.) 99.65 390.62 T
(When one module uses a second module, it can use all the names exported) 126.65 376.62 T
(fr) 99.65 362.62 T
(om the second module, or it can specify a subset of those exports to) 107.46 362.62 T
2 F
(import) 437.25 362.62 T
1 F
(. In) 471.47 362.62 T
(addition, imported names can be) 99.65 348.62 T
2 F
(renamed) 262.62 348.62 T
1 F
( \321 they can be given dif) 306.62 348.62 T
(fer) 424.23 348.62 T
(ent names) 437.3 348.62 T
(when imported. Y) 99.65 334.62 T
(ou can use r) 186.92 334.62 T
(enaming to document which de\336nitions ar) 245.31 334.62 T
(e fr) 452.29 334.62 T
(om) 468.11 334.62 T
(another module, by giving them all a uniform pr) 99.65 320.62 T
(e\336x; you can use r) 335.99 320.62 T
(enaming to) 423.6 320.62 T
(r) 99.65 306.62 T
(esolve name con\337icts; or you can use r) 103.79 306.62 T
(enaming to give nicknames or shorthand) 290.22 306.62 T
(names for imported names.) 99.65 292.62 T
2 F
-0.23 (Comparison with C:) 132.65 258.62 P
1 F
-0.23 ( Exported variables in Dylan ar) 233.31 258.62 P
-0.23 (e like external) 383.79 258.62 P
(variables and functions in C. \050By) 132.65 244.62 T
0 F
(external) 293.84 244.62 T
1 F
(, we do not mean the) 329.9 244.62 T
4 10 Q
(extern) 132.65 230.62 T
1 11 Q
( storage declaration, but rather the concept of an external) 168.65 230.62 T
(variable \321 one that is available for linking to.\051) 132.65 216.62 T
-0.42 (Unexported variables in Dylan ar) 159.65 202.62 P
-0.42 (e like) 320.36 202.62 P
4 10 Q
-0.92 (static) 348.07 202.62 P
1 11 Q
-0.42 ( variables and) 384.07 202.62 P
(functions in C.) 132.65 188.62 T
126.65 271.83 126.65 181.08 2 L
V
0.25 H
0 Z
N
477.65 271.83 477.65 181.08 2 L
V
N
126.52 271.95 477.77 271.95 2 L
V
N
126.52 180.95 477.77 180.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 204
%%Page: "191" 205
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.2 Modules) 455.65 702.62 T
2 F
(191) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.2.4  Expor) 99.65 485.29 T
(t and impor) 165.64 485.29 T
(t of modules b) 223.89 485.29 T
(y libraries) 296.55 485.29 T
1 11 Q
(Just as a module speci\336es a namespace for de\336nitions, each library speci\336es an) 99.65 465.62 T
(independent namespace of modules and contr) 99.65 451.62 T
(ols the visibility of its modules.) 324.59 451.62 T
-0.29 (W) 99.65 437.62 P
-0.29 (ithin each library) 110.04 437.62 P
-0.29 (, every module r) 191.38 437.62 P
-0.29 (efers either to a module owned by that library) 270.42 437.62 P
-0.29 (,) 490.44 437.62 P
(or to a module owned by another library) 99.65 423.62 T
(. Libraries make their modules available) 296.73 423.62 T
(to other libraries by) 99.65 409.62 T
2 F
(exporting) 197.86 409.62 T
1 F
( those modules. A library can r) 246.13 409.62 T
(efer to the modules) 395.8 409.62 T
(of another library by) 99.65 395.62 T
2 F
(using) 202.82 395.62 T
1 F
( the other library) 230.92 395.62 T
(. No library can r) 311.61 395.62 T
(efer to the modules) 394.23 395.62 T
(of another library that ar) 99.65 381.62 T
(e not exported.) 219.34 381.62 T
(When a library exports a module and a second library uses the \336rst library) 126.65 367.62 T
(,) 487.13 367.62 T
(importing its modules, then the modules of the second library can use the mod-) 99.65 353.62 T
-0.17 (ules of the \336rst library) 99.65 339.62 P
-0.17 (, just as they can use any other modules in their own library) 205.47 339.62 P
-0.17 (.) 492.9 339.62 P
(When one library uses another library) 126.65 325.62 T
(, it can use all the modules exported) 310.25 325.62 T
(fr) 99.65 311.62 T
(om the second library) 107.46 311.62 T
(, or it can specify a subset of those exports to) 212.2 311.62 T
2 F
(import) 431.28 311.62 T
1 F
(.) 465.5 311.62 T
-0.41 (Imported modules can be) 99.65 297.62 P
2 F
-0.41 (renamed) 225.31 297.62 P
1 F
-0.41 ( as they ar) 269.31 297.62 P
-0.41 (e imported, just as imported module) 317.52 297.62 P
(names can be r) 99.65 283.62 T
(emoved.) 171.73 283.62 T
(Y) 126.65 269.62 T
(ou can see that libraries and modules together pr) 132.97 269.62 T
(ovide a two-level str) 370.65 269.62 T
(uc-) 469.9 269.62 T
(tur) 99.65 255.62 T
(e of naming, information hiding, and access contr) 114.01 255.62 T
(ol. The designers of Dylan) 354.62 255.62 T
-0.26 (believed that only a single level would not give suf) 99.65 241.62 P
-0.26 (\336cient \337exibility) 344.92 241.62 P
-0.26 (, but that mor) 422.41 241.62 P
-0.26 (e) 487.89 241.62 P
(than two levels was unnecessary) 99.65 227.62 T
(. In essence, modules give a \336ne level of contr) 257.39 227.62 T
(ol) 478.85 227.62 T
-0.2 (that lets you or) 99.65 213.62 P
-0.2 (ganize within a single component, and libraries give a higher level) 172.01 213.62 P
(of contr) 99.65 199.62 T
(ol that lets you or) 137.09 199.62 T
(ganize components into a pr) 222 199.62 T
(ogram. Also, libraries ar) 359.98 199.62 T
(e) 477.3 199.62 T
(the Dylan) 99.65 185.62 T
2 F
(compilation unit) 150.14 185.62 T
1 F
( \321 they ar) 234.15 185.62 T
(e the level at which components can be) 284.42 185.62 T
(exchanged without sour) 99.65 171.62 T
(ce code being exchanged. A softwar) 217.43 171.62 T
(e publisher would) 391.57 171.62 T
(typically sell its war) 99.65 157.62 T
(es as Dylan libraries.) 196.92 157.62 T
2 F
(Comparison with C++:) 132.65 645.62 T
1 F
( Dylan modules ar) 247.1 645.62 T
(e similar to C++) 336.94 645.62 T
(namespaces in that they eliminate the pr) 132.65 631.62 T
(oblem of global namespace) 329.03 631.62 T
(pollution or clashes between names used in individual libraries.) 132.65 617.62 T
(Unlike C++ namespaces, Dylan modules also de\336ne a level of access) 132.65 603.62 T
(contr) 132.65 589.62 T
(ol: Each module decides what names ar) 157.67 589.62 T
(e externally visible, and) 349.77 589.62 T
(no module can cr) 132.65 575.62 T
(eate or access names in another module, unless that) 216.67 575.62 T
(other module explicitly exports those names. In contrast, the C++) 132.65 561.62 T
4 10 Q
-1 (using) 132.65 547.62 P
1 11 Q
-0.46 ( declaration allows the client of a namespace to access any name) 162.65 547.62 P
(in that namespace.) 132.65 533.62 T
126.65 658.83 126.65 526.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 526.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 525.95 477.77 525.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 205
%%Page: "192" 206
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(192) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.2.5  Simple e) 99.65 664.29 T
(xample of libraries and modules) 178.92 664.29 T
1 11 Q
(T) 99.65 644.62 T
(o illustrate these concepts, we r) 105.38 644.62 T
(epeat the de\336nition of the) 257.16 644.62 T
4 10 Q
(library.dylan) 384.77 644.62 T
1 11 Q
( \336le,) 462.77 644.62 T
-0.42 (\336rst shown in Chapter 2,) 99.65 630.62 P
0 F
-0.42 (Quick Start) 222.91 630.62 P
1 F
-0.42 (. Her) 274.95 630.62 P
-0.42 (e, we have used a mor) 298.6 630.62 P
-0.42 (e verbose, but also) 404.77 630.62 P
(mor) 99.65 616.62 T
(e pr) 119.51 616.62 T
(ecise, format.) 138.29 616.62 T
(The \336rst line of) 99.65 426.62 T
4 10 Q
(library.dylan) 176.05 426.62 T
1 11 Q
( states that the expr) 254.05 426.62 T
(essions and de\336nitions in this) 348.36 426.62 T
(\336le ar) 99.65 412.62 T
(e in the) 127.17 412.62 T
4 10 Q
(dylan-user) 165.55 412.62 T
1 11 Q
( module. In this pr) 225.55 412.62 T
(ede\336ned module, you de\336ne the) 315.56 412.62 T
-0.29 (modules and library that make up your component or pr) 99.65 398.62 P
-0.29 (ogram. Every library has) 373.37 398.62 P
(a unique) 99.65 384.62 T
4 10 Q
(dylan-user) 144.95 384.62 T
1 11 Q
( module. In the \336le) 204.95 384.62 T
4 10 Q
(library.dylan) 299.48 384.62 T
1 11 Q
(, we de\336ne a library) 377.48 384.62 T
(named) 99.65 370.62 T
4 10 Q
(hello) 136 370.62 T
1 11 Q
( and a module named) 166 370.62 T
4 10 Q
(hello) 275.02 370.62 T
1 11 Q
(.) 305.02 370.62 T
(The module de\336nition names the other modules whose names the) 126.65 356.62 T
4 10 Q
(hello) 450.49 356.62 T
1 11 Q
(module will use. In this case, the) 99.65 342.62 T
4 10 Q
(hello) 260.82 342.62 T
1 11 Q
( module uses the) 290.82 342.62 T
4 10 Q
(dylan) 375.85 342.62 T
1 11 Q
( and) 405.85 342.62 T
4 10 Q
(format-out) 429.97 342.62 T
1 11 Q
-0.43 (modules. Her) 99.65 328.62 P
-0.43 (e, we have explicitly stated that we ar) 165.49 328.62 P
-0.43 (e importing all the names fr) 345.03 328.62 P
-0.43 (om) 477.61 328.62 P
-0.34 (the modules that we use \321 using the) 99.65 314.62 P
4 10 Q
-0.75 (import: all) 279.72 314.62 P
1 11 Q
-0.34 ( clause is not strictly necessary) 344.97 314.62 P
-0.34 (,) 490.49 314.62 P
-0.07 (because it is the default that is used if we do not specify what to import. By using) 99.65 300.62 P
(another module, we import the names exported fr) 99.65 286.62 T
(om that module, making them) 342.7 286.62 T
(available in our namespace. For example,) 99.65 272.62 T
4 10 Q
(format-out) 303.42 272.62 T
1 11 Q
( is exported fr) 363.42 272.62 T
(om the) 430.83 272.62 T
4 10 Q
(format-out) 99.65 258.62 T
1 11 Q
( module, so the) 159.65 258.62 T
4 10 Q
(use format-out) 236.87 258.62 T
1 11 Q
( clause enables our pr) 320.87 258.62 T
(ogram to call) 426.15 258.62 T
(the) 99.65 244.62 T
4 10 Q
(format-out) 117.65 244.62 T
1 11 Q
( function. The) 177.65 244.62 T
4 10 Q
(use dylan) 247.85 244.62 T
1 11 Q
( clause in the module de\336nition makes) 301.85 244.62 T
(available all the built-in Dylan language elements exported fr) 99.65 230.62 T
(om the) 397.58 230.62 T
4 10 Q
(dylan) 434.06 230.62 T
1 11 Q
( mod-) 464.06 230.62 T
(ule. When we de\336ne a module, it must) 99.65 216.62 T
4 10 Q
(use) 290.51 216.62 T
1 11 Q
( all the modules that export the de\336ni-) 308.51 216.62 T
(tions used by the de\336nitions in our module.) 99.65 202.62 T
(The library de\336nition tells the compiler which other libraries our pr) 126.65 188.62 T
(ogram) 454.43 188.62 T
(uses. Her) 99.65 174.62 T
(e, we have explicitly stated that we ar) 144.95 174.62 T
(e inter) 327.48 174.62 T
(ested in only the) 358.1 174.62 T
4 10 Q
(dylan) 441.2 174.62 T
1 11 Q
( and) 471.2 174.62 T
4 10 Q
(format-out) 99.65 160.62 T
1 11 Q
( modules fr) 159.65 160.62 T
(om these other libraries. This clause is not strictly neces-) 215.16 160.62 T
8 10 Q
(The libr) 228.88 583.29 T
(ar) 262.12 583.29 T
(y \336le:) 271.31 583.29 T
4 9 Q
(library.dylan) 297.43 583.29 T
8 10 Q
(.) 367.63 583.29 T
4 9 Q
(module: dylan-user) 105.65 563.95 T
(define library hello) 105.65 544.95 T
(use dylan, import: { dylan };) 116.45 533.95 T
(use format-out, import: { format-out };) 116.45 522.95 T
(end library hello;) 105.65 511.95 T
(define module hello) 105.65 492.95 T
(use dylan, import: all;) 116.45 481.95 T
(use format-out, import: all;) 116.45 470.95 T
(end module hello;) 105.65 459.95 T
99.65 595.83 99.65 453.08 2 L
V
0.25 H
0 Z
N
513.65 595.83 513.65 453.08 2 L
V
N
99.52 595.95 513.77 595.95 2 L
V
N
99.52 575.95 513.77 575.95 2 L
V
N
99.52 452.95 513.77 452.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 206
%%Page: "193" 207
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.2 Modules) 455.65 702.62 T
2 F
(193) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.3 (sary) 99.65 665.62 P
-0.3 (, since the module de\336nition tells the compiler which modules it uses; but it is) 119.05 665.62 P
-0.05 (good practice to document our intent. For example, the) 99.65 651.62 P
4 10 Q
-0.1 (format-out) 369.82 651.62 P
1 11 Q
-0.05 ( module is in) 429.82 651.62 P
(the) 99.65 637.62 T
4 10 Q
(format-out) 117.65 637.62 T
1 11 Q
( library) 177.65 637.62 T
(. Ther) 211.98 637.62 T
(efor) 240.04 637.62 T
(e, our) 259.12 637.62 T
4 10 Q
(hello) 289.62 637.62 T
1 11 Q
( library must use the) 319.62 637.62 T
4 10 Q
(format-out) 422.58 637.62 T
1 11 Q
-0.32 (library) 99.65 623.62 P
-0.32 (, and must import the) 131.22 623.62 P
4 10 Q
-0.71 (format-out) 238.04 623.62 P
1 11 Q
-0.32 ( module for the) 298.04 623.62 P
4 10 Q
-0.71 (hello) 374.56 623.62 P
1 11 Q
-0.32 ( module to use the) 404.56 623.62 P
4 10 Q
(format-out) 99.65 609.62 T
1 11 Q
( module. Similarly) 159.65 609.62 T
(, the) 248.47 609.62 T
4 10 Q
(dylan) 271.98 609.62 T
1 11 Q
( module is in the) 301.98 609.62 T
4 10 Q
(dylan) 386 609.62 T
1 11 Q
( library) 416 609.62 T
(, and) 450.32 609.62 T
(ther) 99.65 595.62 T
(efor) 119.05 595.62 T
(e our) 138.14 595.62 T
4 10 Q
(hello) 165.89 595.62 T
1 11 Q
( library must use the) 195.89 595.62 T
4 10 Q
(dylan) 298.85 595.62 T
1 11 Q
( library and import the) 328.85 595.62 T
4 10 Q
(dylan) 442.73 595.62 T
1 11 Q
-0.08 (module in or) 99.65 581.62 P
-0.08 (der for the) 162.28 581.62 P
4 10 Q
-0.18 (hello) 215.89 581.62 P
1 11 Q
-0.08 ( module to use the) 245.89 581.62 P
4 10 Q
-0.18 (dylan) 338.18 581.62 P
1 11 Q
-0.08 ( module. When we de\336ne) 368.18 581.62 P
-0.32 (a library) 99.65 567.62 P
-0.32 (, it must) 139.15 567.62 P
4 10 Q
-0.7 (use) 180.56 567.62 P
1 11 Q
-0.32 ( all the libraries that export the modules used by the modules) 198.56 567.62 P
(in our library) 99.65 553.62 T
(.) 163.3 553.62 T
(The module de\336nition also speci\336es which variables and constants ar) 126.65 539.62 T
(e) 463.39 539.62 T
(exported fr) 99.65 525.62 T
(om the module for use by other modules. The library de\336nition speci-) 153.69 525.62 T
-0.14 (\336es which modules ar) 99.65 511.62 P
-0.14 (e exported fr) 205.98 511.62 P
-0.14 (om the library for use by other libraries. In our) 267.76 511.62 P
(simple example, the) 99.65 497.62 T
4 10 Q
(hello) 199.8 497.62 T
1 11 Q
( module exports no variables or constants, and the) 229.8 497.62 T
4 10 Q
(hello) 99.65 483.62 T
1 11 Q
( library exports no modules.) 129.65 483.62 T
(Figur) 126.65 469.62 T
(e 13.1 illustrates the r) 152.86 469.62 T
(elationships between libraries and modules in) 255.63 469.62 T
(our example pr) 99.65 455.62 T
(ogram. In Figur) 174.13 455.62 T
(e 13.1, and in the other \336gur) 250.38 455.62 T
(es in this chapter) 386.79 455.62 T
(, we) 468.21 455.62 T
(draw libraries as heavy bold boxes and modules as light boxes. W) 99.65 441.62 T
(e have tried to) 418.76 441.62 T
(illustrate how libraries and modules build on one another thr) 99.65 427.62 T
(ough their \322use\323) 397.37 427.62 T
-0.25 (r) 99.65 413.62 P
-0.25 (elationships. A library that uses another library is shown above the library that it) 103.79 413.62 P
(uses, so we show the) 99.65 399.62 T
4 10 Q
(hello) 203.99 399.62 T
1 11 Q
( library above the) 233.99 399.62 T
4 10 Q
(format-out) 322.11 399.62 T
1 11 Q
( and) 382.11 399.62 T
4 10 Q
(dylan) 406.24 399.62 T
1 11 Q
( libraries.) 436.24 399.62 T
-0.41 (An exported module is illustrated as being on top of \050overlapping\051 the library that) 99.65 385.62 P
99.65 171.96 495.65 179.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.1) 112.22 183.29 T
8 F
(Libr) 170.58 183.29 T
(ar) 187.15 183.29 T
(ies \050hea) 196.19 183.29 T
(vy bo) 231.56 183.29 T
(x) 255.16 183.29 T
(es\051 and modules \050light bo) 259.86 183.29 T
(x) 371.83 183.29 T
(es\051 in \322Hello) 376.53 183.29 T
(, w) 429.47 183.29 T
(or) 442.15 183.29 T
(ld\323.) 451.19 183.29 T
99.65 195.95 495.65 364.95 C
108.65 199.95 486.65 362.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 128 439 494 590 366 151 114.65 205.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-1 .eps)%%CreationDate: (6/11/96) (11:29 AM)%%BoundingBox: 128 439 494 590%%HiResBoundingBox: 128.5 439 494 590%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 66 660 2 826 581 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.9 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.9 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR463.5 439 m463.5 507.5 L355 507.5 L355 439 L463.5 439 Lf279 439 m279 507.5 L194.5 507.5 L194.5 439 L279 439 Lf0 To1 0 0 1 322.5 529.5 0 TpTP-13.4967 0 Td0 Tr0 g/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(hello) Tx (\r) TX TO0 To1 0 0 1 149 571.5 0 TpTP-13.4967 0 Td0 Tr(hello) Tx (\r) TX TO0 R0 G0.65 w468.5 494 m468.5 566.5 L185.5 566.5 L185.5 494 L468.5 494 Ls0 Ap355 439 m355 507.5 l463.5 507.5 l463.5 439 lS0 To1 0 0 1 161 458.5 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TO0 To1 0 0 1 236.25 458.5 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 318 458.5 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO0 To1 0 0 1 408.75 458.5 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G2 w493 480 m493 589 L129.5 589 L129.5 480 L493 480 Ls0 Ap129.5 439 m129.5 471.5 l194.5 471.5 lS279 471.5 m288.5 471.5 l288.5 439 lS296.5 439 m296.5 471.5 l355 471.5 lS464 471.5 m493 471.5 l493 439 lS0.5 w230.1667 558.3333 mS0.65 w194.5 439 m194.5 507.5 l279 507.5 l279 439 l279 507.5 lS238.5 530.6667 mS0.5 w261.9792 517.3542 mSLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 195.95 495.65 364.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 207
%%Page: "194" 208
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(194) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(exports it \050we have also shaded them, to illustrate this overlap\051. And a module) 99.65 665.62 T
(that uses another module is illustrated as being on top of \050overlapping\051 the used) 99.65 651.62 T
(module. T) 99.65 637.62 T
(ry to envision the modules as semitranspar) 148.44 637.62 T
(ent overlays, layer) 357.59 637.62 T
(ed up) 446.64 637.62 T
(fr) 99.65 623.62 T
(om the surface of the paper) 107.46 623.62 T
(. Thus, the) 239.59 623.62 T
4 10 Q
(hello) 293.04 623.62 T
1 11 Q
( module overlays the) 323.04 623.62 T
4 10 Q
(format-out) 428.15 623.62 T
1 11 Q
(and) 99.65 609.62 T
4 10 Q
(dylan) 121.02 609.62 T
1 11 Q
( modules that it uses.) 151.02 609.62 T
(Note that we intentionally do not show all the modules in the) 126.65 595.62 T
4 10 Q
(format-out) 428.43 595.62 T
1 11 Q
(and) 99.65 581.62 T
4 10 Q
(dylan) 121.02 581.62 T
1 11 Q
( libraries in Figur) 151.02 581.62 T
(e 13.1. The) 234.9 581.62 T
4 10 Q
(format-out) 288.83 581.62 T
1 11 Q
( and) 348.83 581.62 T
4 10 Q
(dylan) 372.95 581.62 T
1 11 Q
( libraries might) 402.95 581.62 T
(well have other modules, but either those modules ar) 99.65 567.62 T
(e not exported or our pr) 358.6 567.62 T
(o-) 475.19 567.62 T
(gram does not use them.) 99.65 553.62 T
3 15 Q
(13.3  Sour) 99.65 513.95 T
(ce code) 158.22 513.95 T
(, modules, and libraries) 204.15 513.95 T
1 11 Q
-0.25 (How is Dylan sour) 99.65 493.62 P
-0.25 (ce code associated with modules and libraries? In Sections 13.1) 190.54 493.62 P
(and 13.2, we looked at a Dylan pr) 99.65 479.62 T
(ogram fr) 262.36 479.62 T
(om the top down: A pr) 304.6 479.62 T
(ogram contains) 415.9 479.62 T
(libraries; a library contains modules; and a module contains variables and their) 99.65 465.62 T
(de\336nitions. W) 99.65 451.62 T
(e now look at a pr) 167.24 451.62 T
(ogram fr) 254.52 451.62 T
(om the bottom up, to see how sour) 296.76 451.62 T
(ce) 465.78 451.62 T
(code is or) 99.65 437.62 T
(ganized into modules, modules into libraries, and libraries into) 146.05 437.62 T
(pr) 99.65 423.62 T
(ograms.) 110.41 423.62 T
3 13 Q
(13.3.1  Sour) 99.65 392.29 T
(ce recor) 159.3 392.29 T
(ds and modules) 200.59 392.29 T
1 11 Q
(All the Dylan sour) 99.65 372.62 T
(ce code for a pr) 189.3 372.62 T
(ogram is or) 263.6 372.62 T
(ganized into units called) 318.8 372.62 T
2 F
(source) 440.97 372.62 T
(records) 99.65 358.62 T
1 F
(. How sour) 136.31 358.62 T
(ce r) 190.34 358.62 T
(ecor) 207.39 358.62 T
(ds ar) 227.7 358.62 T
(e stor) 251.48 358.62 T
(ed is dependent on the implementation.) 277.9 358.62 T
-0.36 (Some implementations may stor) 99.65 344.62 P
-0.36 (e sour) 255.64 344.62 P
-0.36 (ce r) 284.75 344.62 P
-0.36 (ecor) 301.44 344.62 P
-0.36 (ds in a database, others may simply) 321.74 344.62 P
(use) 99.65 330.62 T
2 F
(interchange format) 118.96 330.62 T
1 F
( \336les \050see Section 13.6, page 203\051. No matter how they ar) 214.6 330.62 T
(e) 486.78 330.62 T
(stor) 99.65 316.62 T
(ed, each sour) 118.05 316.62 T
(ce r) 181.8 316.62 T
(ecor) 198.85 316.62 T
(d is in a module; ther) 219.15 316.62 T
(efor) 322.29 316.62 T
(e,) 341.37 316.62 T
(\245) 108.65 296.62 T
(All the module\325s variables and constants, including those imported by) 126.65 296.62 T
(using other modules, ar) 126.65 282.62 T
(e visible to, and can be used by) 242.13 282.62 T
(, the code in the) 391.85 282.62 T
(sour) 126.65 268.62 T
(ce r) 148.1 268.62 T
(ecor) 165.15 268.62 T
(d.) 185.45 268.62 T
(\245) 108.65 248.62 T
(The module contr) 126.65 248.62 T
(ols which de\336nitions in the sour) 213.13 248.62 T
(ce r) 369.23 248.62 T
(ecor) 386.28 248.62 T
(d ar) 406.59 248.62 T
(e exported,) 425.7 248.62 T
(and ther) 126.65 234.62 T
(efor) 167.43 234.62 T
(e ar) 186.51 234.62 T
(e visible, to other modules.) 204.18 234.62 T
(\245) 108.65 214.62 T
-0.09 (V) 126.65 214.62 P
-0.09 (ariables and constants in other modules that ar) 133.58 214.62 P
-0.09 (e not exported, or ones that) 360.42 214.62 P
(ar) 126.65 200.62 T
(e exported but ar) 136.29 200.62 T
(e not imported by the sour) 219.25 200.62 T
(ce r) 348.62 200.62 T
(ecor) 365.67 200.62 T
(d\325s module, ar) 385.97 200.62 T
(e not) 455.86 200.62 T
(visible to the sour) 126.65 186.62 T
(ce r) 213.03 186.62 T
(ecor) 230.08 186.62 T
(d.) 250.39 186.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 208
%%Page: "195" 209
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.3 Source code, modules, and libraries) 354.83 702.62 T
2 F
(195) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Dylan implementations can associate a sour) 99.65 665.62 T
(ce r) 312.46 665.62 T
(ecor) 329.52 665.62 T
(d with a module in dif) 349.82 665.62 T
(fer) 458.69 665.62 T
(ent) 471.77 665.62 T
(ways. The inter) 99.65 651.62 T
(change format has a) 174.37 651.62 T
2 F
(header) 274.82 651.62 T
1 F
( at the fr) 309.04 651.62 T
(ont that speci\336es the module) 349.45 651.62 T
(for its sour) 99.65 637.62 T
(ce r) 152.06 637.62 T
(ecor) 169.11 637.62 T
(ds.) 189.42 637.62 T
3 13 Q
(13.3.2  Modules and libraries) 99.65 606.29 T
1 11 Q
(Every module is in a library; ther) 99.65 586.62 T
(efor) 260.27 586.62 T
(e,) 279.36 586.62 T
(\245) 108.65 566.62 T
-0.22 (All the library\325s modules, including those imported by using other libraries,) 126.65 566.62 P
(ar) 126.65 552.62 T
(e visible to, and can be used by) 136.29 552.62 T
(, the module.) 286.02 552.62 T
(\245) 108.65 532.62 T
(The library contr) 126.65 532.62 T
(ols whether the module is exported, and ther) 208.38 532.62 T
(efor) 426.87 532.62 T
(e is visi-) 445.96 532.62 T
(ble, to other libraries.) 126.65 518.62 T
(\245) 108.65 498.62 T
(Modules in other libraries that ar) 126.65 498.62 T
(e not exported, or ones that ar) 287.04 498.62 T
(e exported) 432.45 498.62 T
(but ar) 126.65 484.62 T
(e not imported by the module\325s library) 155.35 484.62 T
(, ar) 342.85 484.62 T
(e not visible to the module.) 358 484.62 T
(Dylan implementations can associate a module with a library in dif) 99.65 464.62 T
(fer) 425.95 464.62 T
(ent ways.) 439.03 464.62 T
(The) 99.65 450.62 T
2 F
( library-interchange de\336nition) 118.06 450.62 T
1 F
( \050) 270.2 450.62 T
2 F
(LID\051) 276.62 450.62 T
1 F
( format lists the inter) 300.44 450.62 T
(change \336les that) 401.43 450.62 T
(make up a library) 99.65 436.62 T
(. The module de\336nitions in those inter) 184.81 436.62 T
(change \336les ar) 370.26 436.62 T
(e thus in) 439.77 436.62 T
(that library) 99.65 422.62 T
(.) 153.04 422.62 T
3 13 Q
(13.3.3  Libraries and pr) 99.65 391.29 T
(ograms) 215.6 391.29 T
1 11 Q
(Every library is in a set of libraries that can be combined into a pr) 99.65 371.62 T
(ogram;) 416.51 371.62 T
(ther) 99.65 357.62 T
(efor) 119.05 357.62 T
(e,) 138.14 357.62 T
(\245) 108.65 337.62 T
(The library can import the exported modules of any other available library) 126.65 337.62 T
(.) 487.83 337.62 T
(\245) 108.65 317.62 T
-0.15 (The library\325s exported modules ar) 126.65 317.62 P
-0.15 (e visible to, and can be imported by) 291.29 317.62 P
-0.15 (, other) 462.1 317.62 P
(available libraries.) 126.65 303.62 T
(The Dylan implementation determines what libraries ar) 99.65 283.62 T
(e available; how they ar) 370.51 283.62 T
(e) 485.8 283.62 T
(combined into a pr) 99.65 269.62 T
(ogram; and how they ar) 191.63 269.62 T
(e compiled, linked, and r) 308.29 269.62 T
(un. Consult) 429.45 269.62 T
(your implementation documentation for further information.) 99.65 255.62 T
(W) 126.65 241.62 T
(e have pr) 136.64 241.62 T
(esented a simple hierar) 181.55 241.62 T
(chical model: All Dylan code r) 294 241.62 T
(esides in) 441.2 241.62 T
-0.41 (sour) 99.65 227.62 P
-0.41 (ce r) 121.1 227.62 P
-0.41 (ecor) 137.73 227.62 P
-0.41 (ds; every sour) 158.04 227.62 P
-0.41 (ce r) 225.51 227.62 P
-0.41 (ecor) 242.14 227.62 P
-0.41 (d r) 262.45 227.62 P
-0.41 (esides in a module; every module r) 275.65 227.62 P
-0.41 (esides in a) 443.75 227.62 P
(library) 99.65 213.62 T
(. Every module must be completely de\336ned within its library) 131.22 213.62 T
(, because the) 426.76 213.62 T
(library is the Dylan unit of compilation. So that this r) 99.65 199.62 T
(estriction is enfor) 356.2 199.62 T
(ced, every) 440.2 199.62 T
(sour) 99.65 185.62 T
(ce r) 121.1 185.62 T
(ecor) 138.15 185.62 T
(d in a library must be in a module that is de\336ned in the library; no) 158.45 185.62 T
(sour) 99.65 171.62 T
(ce r) 121.1 171.62 T
(ecor) 138.15 171.62 T
(d can be in a module that is imported by the library) 158.45 171.62 T
(. W) 407.63 171.62 T
(ithin a library) 423.52 171.62 T
(,) 488.88 171.62 T
(it is possible for a name to be owned by one module and for that name\325s) 99.65 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 209
%%Page: "196" 210
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(196) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.07 (de\336nition to be pr) 99.65 665.62 P
-0.07 (ovided by another module. This \337exibility helps us to str) 186.82 665.62 P
-0.07 (uctur) 461.82 665.62 P
-0.07 (e) 487.7 665.62 P
(code, as we shall see in Section 13.4.) 99.65 651.62 T
3 15 Q
(13.4  Module de\336nition) 99.65 611.95 T
1 11 Q
(Enough theory) 99.65 591.62 T
(. Let\325s see how modules and libraries can be used in practice by) 171.18 591.62 T
(considering the classes and methods for r) 99.65 577.62 T
(epr) 300.61 577.62 T
(esenting and manipulating times) 316.63 577.62 T
(that we de\336ned in Chapter 8,) 99.65 563.62 T
0 F
(A Simple Library) 246.82 563.62 T
1 F
(, and showing how they might be) 324.04 563.62 T
(packaged into a r) 99.65 549.62 T
(eusable softwar) 183.46 549.62 T
(e component.) 259.57 549.62 T
(First, let\325s examine what the external pr) 126.65 535.62 T
(otocol of our time library might be.) 318.54 535.62 T
(W) 99.65 521.62 T
(e have de\336ned two kinds of time that can be cr) 109.64 521.62 T
(eated:) 336.38 521.62 T
4 10 Q
(<time-of-day>) 368.22 521.62 T
1 11 Q
( and) 446.22 521.62 T
4 10 Q
(<time-offset>) 99.65 507.62 T
1 11 Q
(. W) 177.65 507.62 T
(e have a generic function for printing times,) 193.14 507.62 T
4 10 Q
(say) 408.61 507.62 T
1 11 Q
(, and one, per-) 425.39 507.62 T
(haps not so obvious, utility function for cr) 99.65 493.62 T
(eating new times,) 303.64 493.62 T
4 10 Q
(encode-total-) 391.99 493.62 T
(seconds) 99.65 479.62 T
1 11 Q
(.) 141.65 479.62 T
(W) 126.65 465.62 T
(e de\336ne a method,) 136.64 465.62 T
4 10 Q
(\134+) 229.17 465.62 T
1 11 Q
(, for adding times, but a method is not a pr) 241.17 465.62 T
(otocol.) 448.89 465.62 T
(The pr) 99.65 451.62 T
(otocol for the generic function) 131.57 451.62 T
4 10 Q
(\134+) 280.54 451.62 T
1 11 Q
( is de\336ned by the Dylan library) 292.54 451.62 T
(, which) 442.7 451.62 T
(alr) 99.65 437.62 T
(eady exports it, for any Dylan pr) 112.5 437.62 T
(ogram. When we de\336ne our method for add-) 270.82 437.62 T
(ing times, we ar) 99.65 423.62 T
(e extending that pr) 176.89 423.62 T
(otocol; we ar) 268.88 423.62 T
(e not cr) 330.91 423.62 T
(eating a new one.) 366.71 423.62 T
-0.12 (The) 126.65 409.62 P
4 10 Q
-0.26 (decode-total-seconds) 147.69 409.62 P
1 11 Q
-0.12 ( function, the) 267.69 409.62 P
4 10 Q
-0.26 (<sixty-unit>) 334.37 409.62 P
1 11 Q
-0.12 ( class, and several) 406.37 409.62 P
(other functions ar) 99.65 395.62 T
(e used internally only) 185.84 395.62 T
(, so they ar) 290.38 395.62 T
(e not part of the external) 343.07 395.62 T
(pr) 99.65 381.62 T
(otocol.) 110.41 381.62 T
(Although) 126.65 367.62 T
4 10 Q
(<time>) 176.3 367.62 T
1 11 Q
( is used internally only within our library) 212.3 367.62 T
(, it is good prac-) 412.17 367.62 T
-0.33 (tice to make abstract super) 99.65 353.62 P
-0.33 (classes such as) 227.93 353.62 P
4 10 Q
-0.72 (<time>) 300.77 353.62 P
1 11 Q
-0.33 ( part of a library interface. When) 336.77 353.62 P
(we do so, a client of the library that does not car) 99.65 339.62 T
(e which speci\336c kind of time is) 332.51 339.62 T
(being manipulated can simply use) 99.65 325.62 T
4 10 Q
(<time>) 269.66 325.62 T
1 11 Q
(.) 305.66 325.62 T
(Thus, \336ve items \050) 126.65 311.62 T
4 10 Q
(<time>) 210.32 311.62 T
1 11 Q
(,) 246.32 311.62 T
4 10 Q
(<time-of-day>) 251.82 311.62 T
1 11 Q
(,) 329.83 311.62 T
4 10 Q
(<time-offset>) 335.33 311.62 T
1 11 Q
(,) 413.33 311.62 T
4 10 Q
(say) 418.83 311.62 T
1 11 Q
(, and) 435.6 311.62 T
4 10 Q
(encode-total-seconds) 99.65 297.62 T
1 11 Q
(\051 de\336ne the external pr) 219.65 297.62 T
(otocol of the time library) 329.89 297.62 T
(.) 448.84 297.62 T
3 13 Q
(13.4.1  Roles of modules) 99.65 266.29 T
1 11 Q
(In our experience, we have found it useful to consider modules as having r) 99.65 246.62 T
(oles:) 462.98 246.62 T
(interface, implementation, or client. These r) 99.65 232.62 T
(oles lead to a simple, low-mainte-) 310.82 232.62 T
-0.12 (nance str) 99.65 218.62 P
-0.12 (uctur) 143.24 218.62 P
-0.12 (e. An) 169.13 218.62 P
2 F
-0.12 (interface module) 197.37 218.62 P
1 F
-0.12 ( cr) 282.49 218.62 P
-0.12 (eates names that ar) 294.15 218.62 P
-0.12 (e to be visible to other) 386.61 218.62 P
(modules and at a library interface. An) 99.65 204.62 T
2 F
(implementation module) 286.93 204.62 T
1 F
( contains the de\336-) 408.84 204.62 T
(nitions that make up the library \050including those visible thr) 99.65 190.62 T
(ough an interface) 387.14 190.62 T
(module\051. A) 99.65 176.62 T
2 F
(client module) 157.66 176.62 T
1 F
( is a module that depends on other modules\325) 227.01 176.62 T
(de\336nitions.) 99.65 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 210
%%Page: "197" 211
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.4 Module definition) 420.01 702.62 T
2 F
(197) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.3 (It is possible for a module to play mor) 126.65 665.62 P
-0.3 (e than one r) 309.07 665.62 P
-0.3 (ole \321 for example, a client) 365.41 665.62 P
(module may also implement a higher) 99.65 651.62 T
(-level interface. W) 281.64 651.62 T
(e r) 368.82 651.62 T
(ecommend thinking of) 380.98 651.62 T
-0.16 (modules as having these r) 99.65 637.62 P
-0.16 (oles, and in this chapter we use that design convention.) 225.57 637.62 P
(When illustrating the r) 99.65 623.62 T
(oles of modules, we use the conventions shown in) 210.01 623.62 T
(Figur) 99.65 609.62 T
(e 13.2.In Figur) 125.86 609.62 T
(e 13.2, we show a library with thr) 194.95 609.62 T
(ee modules: an interface) 356.95 609.62 T
(module \050with its interface sticking out of the top of the library\051, an implementa-) 99.65 595.62 T
(tion module \050overlapping the interface, because it implements the interface by) 99.65 581.62 T
(giving de\336nitions to the names the interface exports\051, and a client module over-) 99.65 567.62 T
-0.4 (lapping another library\325s interface module \050using its exported interface module to) 99.65 553.62 P
(import de\336nitions fr) 99.65 539.62 T
(om another library\051. As we noted, the implementation and) 198.53 539.62 T
(client ar) 99.65 525.62 T
(e often the same module, and the interface of one library is used by the) 138.59 525.62 T
(clients of other libraries. Dylan modules and libraries ar) 99.65 511.62 T
(e not allowed to have) 370.71 511.62 T
(mutual dependencies, so we can use the convention of drawing at the top the) 99.65 497.62 T
-0.27 (interfaces that a library exports, and of drawing at the bottom the interfaces that a) 99.65 483.62 P
(library uses. It is dif) 99.65 469.62 T
(\336cult simultaneously to illustrate the module \322use\323 r) 195.96 469.62 T
(elation-) 452.25 469.62 T
(ships in only two dimensions \321 the overlapping of one module by another is) 99.65 455.62 T
(intended to depict usage.) 99.65 441.62 T
99.65 204.96 495.65 212.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.2) 128.8 216.29 T
8 F
(The roles of modules: interf) 187.16 216.29 T
(ace) 308.02 216.29 T
(, implementation, and client.) 323.99 216.29 T
99.65 228.95 495.65 411.95 C
123.15 232.95 472.15 409.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 138 393 475 558 337 165 129.15 238.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-2 .eps)%%CreationDate: (6/11/96) (11:30 AM)%%BoundingBox: 138 393 475 558%%HiResBoundingBox: 138 393.5 475 557.325%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 2 748 1.5 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.9 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR437.5 394 m437.5 456.5 L346.5 456.5 L346.5 394 L437.5 394 Lf0 R0 G0.65 w294 510.5 m294 557 L202.5 557 L202.5 510.5 L294 510.5 Lb0 To1 0 0 1 161.5 530 0 TpTP-13.7483 0 Td0 Tr0 g1 w/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(Library) Tx (\r) TX TO0 To1 0 0 1 247.5 532.5 0 TpTP-17.5045 0 Td0 Tr(Interface) Tx (\r) TX TO0 To1 0 0 1 248 494 0 TpTP-30.754 0 Td0 Tr(Implementation) Tx (\r) TX TO0 To1 0 0 1 393 468 0 TpTP-11.4994 0 Td0 Tr(Client) Tx (\r) TX TO0 To1 0 0 1 287 414.5 0 TpTP-29.2511 0 Td0 Tr(Another library) Tx (\r) TX TO0 To1 0 0 1 392 417 0 TpTP-23.2537 0 Td0 Tr(Its interface) Tx (\r) TX TO0 Ap0 R0 G0.65 w437.5 394 m437.5 456.5 l346.5 456.5 l346.5 393.5 lS1 Ap302.5 475 m302.5 519.5 L193.5 519.5 L193.5 475 L302.5 475 Ls456 447 m456 492 L329.5 492 L329.5 447 L456 447 Ls0 Ap2 w202.5 547.5 m139 547.5 l139 437 l473.5 437 l473.5 547.5 l294.5 547.5 lS474 393.5 m474 430 l437.5 430 lS346 430 m248 430 l248 394.5 lSLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 228.95 495.65 411.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 211
%%Page: "198" 212
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(198) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.4.2  The int) 99.65 664.29 T
(erface module) 170.16 664.29 T
1 11 Q
(W) 99.65 644.62 T
(e can now write a \336rst draft of the interface module for our library:) 109.64 644.62 T
4 9 Q
(define module time) 99.65 623.95 T
5 F
(// Classes) 110.45 612.95 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 110.45 601.95 T
5 F
(// Generics) 110.45 590.95 T
4 F
(create say, encode-total-seconds;) 110.45 579.95 T
(end module time;) 99.65 568.95 T
1 11 Q
-0.26 (In the pr) 99.65 548.62 P
-0.26 (eceding de\336nition, the) 140.75 548.62 P
4 10 Q
-0.57 (time) 251.53 548.62 P
1 11 Q
-0.26 ( interface module cr) 275.53 548.62 P
-0.26 (eates and exports \050makes) 371.7 548.62 P
-0.18 (visible\051 thr) 99.65 534.62 P
-0.18 (ee classes and two functions. W) 151.85 534.62 P
-0.18 (e use the) 303.64 534.62 P
4 10 Q
-0.4 (create) 348.43 534.62 P
1 11 Q
-0.18 ( clause, because we do) 384.43 534.62 P
(not intend to de\336ne any implementations in the time-library interface module) 99.65 520.62 T
(itself \321 that will be done in an implementation module, which will use the time-) 99.65 506.62 T
-0.37 (library module as its interface. The) 99.65 492.62 P
4 10 Q
-0.8 (create) 269.17 492.62 P
1 11 Q
-0.37 ( clause causes the names to be r) 305.17 492.62 P
-0.37 (eserved) 455.51 492.62 P
(in the) 99.65 478.62 T
4 10 Q
(time) 130.01 478.62 T
1 11 Q
( interface module, with the r) 154.01 478.62 T
(equisite that de\336nitions be pr) 291.94 478.62 T
(ovided by) 434.21 478.62 T
(some other module in the same library) 99.65 464.62 T
(.) 286.53 464.62 T
3 13 Q
(13.4.3  The imple) 99.65 368.29 T
(mentation module) 184.98 368.29 T
1 11 Q
(Our) 99.65 348.62 T
4 10 Q
(time) 122.02 348.62 T
1 11 Q
( interface module speci\336es the names that ar) 146.02 348.62 T
(e visible to clients of our) 361.68 348.62 T
(library) 99.65 334.62 T
(. It also serves to specify the names that must be de\336ned in our implemen-) 131.22 334.62 T
(tation. T) 99.65 320.62 T
(o pr) 139.16 320.62 T
(epar) 158.67 320.62 T
(e to de\336ne those names, we cr) 180.2 320.62 T
(eate a separate implementation) 325.58 320.62 T
(module:) 99.65 306.62 T
4 9 Q
(define module time-implementation) 99.65 285.95 T
5 F
(// Interface module) 110.45 274.95 T
4 F
(use time;) 110.45 263.95 T
5 F
(// Substrate modules) 110.45 252.95 T
4 F
(use format-out;) 110.45 241.95 T
(use dylan;) 110.45 230.95 T
(end module time-implementation;) 99.65 219.95 T
1 11 Q
(In the pr) 99.65 199.62 T
(eceding de\336nition, the implementation module uses the) 141.27 199.62 T
4 10 Q
(time) 415.52 199.62 T
1 11 Q
( interface) 439.52 199.62 T
(module so that it can give de\336nitions to the names that the interface cr) 99.65 185.62 T
(eated. The) 441.04 185.62 T
-0.16 (implementation module is also a client module: It is a client of the) 99.65 171.62 P
4 10 Q
-0.36 (dylan) 420.18 171.62 P
1 11 Q
-0.16 ( module,) 450.18 171.62 P
(because its de\336nitions use de\336nitions such as) 99.65 157.62 T
4 10 Q
(define class) 322.18 157.62 T
1 11 Q
(,) 394.18 157.62 T
4 10 Q
(<integer>) 399.68 157.62 T
1 11 Q
(, and) 453.68 157.62 T
4 10 Q
(*) 480.55 157.62 T
2 11 Q
(Comparison with C:) 132.65 430.62 T
1 F
( The Dylan) 233.77 430.62 T
4 10 Q
(create) 290.17 430.62 T
1 11 Q
( clause is r) 326.17 430.62 T
(oughly analogous) 376.58 430.62 T
(to the C) 132.65 416.62 T
4 10 Q
(extern) 173.55 416.62 T
1 11 Q
( declaration.) 209.55 416.62 T
126.65 443.83 126.65 409.08 2 L
V
0.25 H
0 Z
N
477.65 443.83 477.65 409.08 2 L
V
N
126.52 443.95 477.77 443.95 2 L
V
N
126.52 408.95 477.77 408.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 212
%%Page: "199" 213
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.4 Module definition) 420.01 702.62 T
2 F
(199) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.08 (\050which ar) 99.65 665.62 P
-0.08 (e de\336ned by the) 145.7 665.62 P
4 10 Q
-0.17 (dylan) 226.15 665.62 P
1 11 Q
-0.08 ( module of the) 256.15 665.62 P
4 10 Q
-0.17 (dylan) 329.32 665.62 P
1 11 Q
-0.08 ( library\051; it is also a client of) 359.32 665.62 P
(the) 99.65 651.62 T
4 10 Q
(format-out) 117.65 651.62 T
1 11 Q
( module, because the) 177.65 651.62 T
4 10 Q
(say) 282.51 651.62 T
1 11 Q
( methods ar) 300.51 651.62 T
(e implemented using the) 358.02 651.62 T
4 10 Q
-0.59 (format-out) 99.65 637.62 P
1 11 Q
-0.27 ( function \050which is de\336ned in the) 159.65 637.62 P
4 10 Q
-0.59 (format-out) 321.26 637.62 P
1 11 Q
-0.27 ( module of the) 381.26 637.62 P
4 10 Q
-0.59 (format-) 453.65 637.62 P
(out) 99.65 623.62 T
1 11 Q
( library\051.) 117.65 623.62 T
-0.38 (W) 126.65 609.62 P
-0.38 (e can start to envision the) 136.64 609.62 P
4 10 Q
-0.82 (time) 260.82 609.62 P
1 11 Q
-0.38 ( library as shown in Figur) 284.82 609.62 P
-0.38 (e 13.3. In a library) 408.11 609.62 P
(mor) 99.65 595.62 T
(e complicated than the time library) 119.51 595.62 T
(, we might decompose the constr) 288.6 595.62 T
(uction of) 448.76 595.62 T
(the library into several implementation modules. For example, we might want to) 99.65 581.62 T
(assign the implementation of the) 99.65 567.62 T
4 10 Q
(<sixty-unit>) 261.79 567.62 T
1 11 Q
( substrate to another pr) 333.79 567.62 T
(ogram-) 446.98 567.62 T
(mer) 99.65 553.62 T
(, and to cr) 118.16 553.62 T
(eate an interface between that substrate and the r) 166.41 553.62 T
(est of the imple-) 404.54 553.62 T
(mentation so that work on either side of the interface can pr) 99.65 539.62 T
(oceed in parallel. In) 389.87 539.62 T
(that case, we might use the following module de\336nitions:) 99.65 525.62 T
4 9 Q
(define module sixty-unit) 99.65 504.95 T
5 F
(// External interface) 110.45 493.95 T
4 F
(use time;) 110.45 482.95 T
5 F
(// Internal interface) 110.45 471.95 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 110.45 460.95 T
5 F
(// Substrate module) 110.45 449.95 T
4 F
(use dylan;) 110.45 438.95 T
(end module sixty-unit;) 99.65 427.95 T
99.65 185.96 495.65 193.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.3) 218.42 197.29 T
8 F
(Initial) 276.78 197.29 T
4 F
(time) 302.9 197.29 T
8 F
( libr) 326.9 197.29 T
(ar) 342.91 197.29 T
(y) 352.1 197.29 T
(.) 356.1 197.29 T
99.65 209.95 495.65 391.95 C
108.15 213.95 487.15 389.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 126 404 493 568 367 164 114.15 219.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-3 .eps)%%CreationDate: (6/11/96) (11:30 AM)%%BoundingBox: 126 404 493 568%%HiResBoundingBox: 126.75 404.1667 492.25 567.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 146 620 3 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Au1 Ap0 O0.9 g800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D0 XR461.75 404.4167 m461.75 472.9167 L353.25 472.9167 L353.25 404.4167 L461.75 404.4167 Lf277.25 404.1667 m277.25 472.6667 L192.75 472.6667 L192.75 404.1667 L277.25 404.1667 Lf0 R0 G442.75 515.5 m442.75 567 L232.75 567 L232.75 515.5 L442.75 515.5 Lb0 To1 0 0 1 320.75 494.9167 0 TpTP-51.2875 0 Td0 Tr0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(time-implementation) Tx (\r) TX TO0 To1 0 0 1 147.25 536.9167 0 TpTP-10.7974 0 Td0 Tr(time) Tx (\r) TX TO0 R0 G0.65 w466.75 459.4167 m466.75 531.9167 L183.75 531.9167 L183.75 459.4167 L466.75 459.4167 Ls0 Ap353.25 404.4167 m353.25 472.9167 l461.75 472.9167 l461.75 404.4167 lS0 To1 0 0 1 159.25 423.9167 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TO0 To1 0 0 1 234 423.9167 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 316.25 423.9167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO0 To1 0 0 1 407.5 423.9167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G2 w232.4167 554.4167 m127.75 554.4167 L127.75 445.4167 L491.25 445.4167 L491.25 554.4167 L442.4167 554.4167 LS232.4167 554.4167 mS442.4167 554.4167 mS0 Ap127.75 404.4167 m127.75 436.9167 l192.75 436.9167 lS277.25 436.9167 m286.75 436.9167 l286.75 404.4167 lS294.75 404.4167 m294.75 436.9167 l353.25 436.9167 lS462.25 436.9167 m491.25 436.9167 l491.25 404.4167 lS0.5 w228.4167 523.75 mS0.65 w192.75 404.4167 m192.75 472.9167 l277.25 472.9167 l277.25 404.4167 l277.25 472.9167 lS236.75 496.0834 mS0.5 w260.2292 482.7709 mS0 To1 0 0 1 335.25 540 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w(time) Tx (\r) TX TO1 Ap0 R0 G2 w232.5 552.5 mS442.5 552.5 mSULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 209.95 495.65 391.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 213
%%Page: "200" 214
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(200) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define module time-implementation) 99.65 666.95 T
5 F
(// External interface) 110.45 655.95 T
4 F
(use time;) 110.45 644.95 T
5 F
(// Substrate modules) 110.45 633.95 T
4 F
(use sixty-unit;) 110.45 622.95 T
(use format-out;) 110.45 611.95 T
(use dylan;) 110.45 600.95 T
(end module time-implementation;) 99.65 589.95 T
1 11 Q
(Her) 99.65 569.62 T
(e, because the) 118.22 569.62 T
4 10 Q
(sixty-unit) 188.04 569.62 T
1 11 Q
( module is an internal interface, we for) 248.04 569.62 T
(go the for-) 435.64 569.62 T
-0 (mality of cr) 99.65 555.62 P
-0 (eating a separate implementation module; we simply) 155.16 555.62 P
4 10 Q
-0.01 (export) 416.59 555.62 P
1 11 Q
-0 ( the de\336-) 452.59 555.62 P
(nitions that we expect to be used by other modules within the library) 99.65 541.62 T
(. This) 433.96 541.62 T
(appr) 99.65 527.62 T
(oach is per) 122.52 527.62 T
(haps a short-sighted one. If later we want the) 174.7 527.62 T
4 10 Q
(sixty-unit) 396.81 527.62 T
1 11 Q
( func-) 456.81 527.62 T
(tionality to be available to another library) 99.65 513.62 T
(, we will be faced with r) 300.23 513.62 T
(eor) 416.6 513.62 T
(ganizing its) 432.02 513.62 T
(module de\336nitions \050as we shall see in Section 13.8, page 209\051. Even within a) 99.65 499.62 T
(library) 99.65 485.62 T
(, it is good practice to or) 131.22 485.62 T
(ganize modules as interface and implementation.) 247.99 485.62 T
(Notice the distinction between the way that we handled the external) 126.65 471.62 T
4 10 Q
(time) 461.43 471.62 T
1 11 Q
(interface, and the shortcut we took with) 99.65 457.62 T
4 10 Q
(sixty-unit) 296.27 457.62 T
1 11 Q
(. Although the) 356.27 457.62 T
4 10 Q
(sixty-unit) 429.43 457.62 T
1 11 Q
-0.05 (module will) 99.65 443.62 P
0 F
-0.05 (de\336ne) 161.37 443.62 P
4 10 Q
-0.11 (encode-total-seconds) 190.05 443.62 P
1 11 Q
-0.05 (, which is part of the) 310.05 443.62 P
4 10 Q
-0.11 (time) 411.89 443.62 P
1 11 Q
-0.05 ( interface, it) 435.89 443.62 P
-0.23 (does not) 99.65 429.62 P
0 F
-0.23 (export) 143.34 429.62 P
4 10 Q
-0.51 (encode-total-seconds) 173.96 429.62 P
1 11 Q
-0.23 (; rather) 293.96 429.62 P
-0.23 (, it) 327.86 429.62 P
0 F
-0.23 (uses) 342.43 429.62 P
1 F
-0.23 ( the) 361.39 429.62 P
4 10 Q
-0.51 (time) 381.68 429.62 P
1 11 Q
-0.23 ( interface module,) 405.68 429.62 P
(which) 99.65 415.62 T
0 F
(cr) 132.46 415.62 T
(eated) 141.02 415.62 T
4 10 Q
(encode-total-seconds) 166.37 415.62 T
1 11 Q
( \050without de\336ning that function\051. Because) 286.37 415.62 T
4 10 Q
(sixty-unit) 99.65 401.62 T
1 11 Q
( uses) 159.65 401.62 T
4 10 Q
(time) 186.38 401.62 T
1 11 Q
(, the name) 210.38 401.62 T
4 10 Q
(encode-total-seconds) 263.52 401.62 T
1 11 Q
( is the same object in) 383.52 401.62 T
-0.48 (both modules. Ef) 99.65 387.62 P
-0.48 (fectively) 181.4 387.62 P
-0.48 (,) 221.58 387.62 P
4 10 Q
-1.06 (encode-total-seconds) 226.6 387.62 P
1 11 Q
-0.48 ( is owned by the) 346.6 387.62 P
4 10 Q
-1.06 (time) 426.82 387.62 P
1 11 Q
-0.48 ( module,) 450.82 387.62 P
(although it is de\336ned by the) 99.65 373.62 T
4 10 Q
(sixty-unit) 239.14 373.62 T
1 11 Q
( module.) 299.14 373.62 T
(This or) 126.65 359.62 T
(ganization of the external interface may appear odd at \336rst, but it) 160.56 359.62 T
(r) 99.65 345.62 T
(educes duplication that would otherwise have to occur: If) 103.79 345.62 T
4 10 Q
(sixty-unit) 386.51 345.62 T
1 11 Q
( exported) 446.51 345.62 T
4 10 Q
(encode-total-seconds) 99.65 331.62 T
1 11 Q
(, then, for it to be visible at the interface of the library) 219.65 331.62 T
(,) 476.34 331.62 T
(either the) 99.65 317.62 T
4 10 Q
(sixty-unit) 148.48 317.62 T
1 11 Q
( module would have to be exported fr) 208.48 317.62 T
(om the library as an) 392.63 317.62 T
-0.25 (interface \050which export is undesirable, because the) 99.65 303.62 P
4 10 Q
-0.55 (sixty-unit) 345.94 303.62 P
1 11 Q
-0.25 ( module has other) 405.94 303.62 P
(exports that ar) 99.65 289.62 T
(e not intended to be visible outside the library\051, or the) 170.03 289.62 T
4 10 Q
(time) 434.04 289.62 T
1 11 Q
( inter-) 458.04 289.62 T
(face module would have to use) 99.65 275.62 T
4 10 Q
(sixty-unit) 254.29 275.62 T
1 11 Q
( and to r) 314.29 275.62 T
(e-export) 354.9 275.62 T
4 10 Q
(encode-total-) 398.07 275.62 T
(seconds) 99.65 261.62 T
1 11 Q
(. The) 141.65 261.62 T
4 10 Q
(create) 168.31 261.62 T
1 11 Q
( clause pr) 204.31 261.62 T
(ovides the cleaner solution of allowing a name to) 250.72 261.62 T
(be exported fr) 99.65 247.62 T
(om only the one interface module, de\336ned in a separate implemen-) 167.79 247.62 T
-0.45 (tation module \050without exposing the implementation module\051, and used by many) 99.65 233.62 P
(client modules.) 99.65 219.62 T
(Dylan r) 126.65 205.62 T
(equir) 163.28 205.62 T
(es that all the variables exported via the) 188.69 205.62 T
4 10 Q
(create) 384.49 205.62 T
1 11 Q
( clause be) 420.49 205.62 T
-0.13 (de\336ned by some module in the same library; however) 99.65 191.62 P
-0.13 (, they can be de\336ned in any) 360.42 191.62 P
(module, and the interface de\336nitions can be spr) 99.65 177.62 T
(ead over several implementation) 330.86 177.62 T
(modules. The compiler will verify that the interface is implemented completely) 99.65 163.62 T
(,) 483.24 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 214
%%Page: "201" 215
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.4 Module definition) 420.01 702.62 T
2 F
(201) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(even if its implementation is spr) 99.65 665.62 T
(ead over several modules, by checking when the) 255.82 665.62 T
(library is compiled that each cr) 99.65 651.62 T
(eated name has a de\336nition.) 249.82 651.62 T
(The) 126.65 637.62 T
4 10 Q
(sixty-unit) 147.81 637.62 T
1 11 Q
( module exports the class) 207.81 637.62 T
4 10 Q
(<sixty-unit>) 333.43 637.62 T
1 11 Q
(, because) 405.43 637.62 T
4 10 Q
(time-) 451.98 637.62 T
(implementation) 99.65 623.62 T
1 11 Q
( will subclass that class. The) 183.65 623.62 T
4 10 Q
(sixty-unit) 322.37 623.62 T
1 11 Q
( module also exports) 382.37 623.62 T
(the generic functions) 99.65 609.62 T
4 10 Q
(total-seconds) 204.08 609.62 T
1 11 Q
(, and) 282.08 609.62 T
4 10 Q
(decode-total-seconds) 308.95 609.62 T
1 11 Q
(. The export) 428.95 609.62 T
(of) 99.65 595.62 T
4 10 Q
(total-seconds) 112.07 595.62 T
1 11 Q
( might seem surprising at \336rst, because, in many object-) 190.07 595.62 T
(oriented languages, access to a class includes access to all the slots of a class. In) 99.65 581.62 T
(Dylan, slots ar) 99.65 567.62 T
(e simply methods on generic functions and names in the module) 169.4 567.62 T
(namespace; hence, the functions must be exported if slot access fr) 99.65 553.62 T
(om outside the) 416.81 553.62 T
(module is to be allowed. Note that exporting) 99.65 539.62 T
4 10 Q
(total-seconds) 320.11 539.62 T
1 11 Q
( allows other mod-) 398.11 539.62 T
(ules only to get the curr) 99.65 525.62 T
(ent value of the) 214.72 525.62 T
4 10 Q
(total-seconds) 292.72 525.62 T
1 11 Q
( slot. T) 370.72 525.62 T
(o allow other mod-) 402.16 525.62 T
(ules also to set the slot value, we would have to export) 99.65 511.62 T
4 10 Q
(total-seconds-setter) 367.83 511.62 T
1 11 Q
(.) 487.01 511.62 T
(It is not necessary to export the init keywor) 99.65 497.62 T
(d) 309.47 497.62 T
4 10 Q
(total-seconds:) 318.94 497.62 T
1 11 Q
(, which allows the) 402.94 497.62 T
(initial value of the slot to be set when objects ar) 99.65 483.62 T
(e cr) 329.06 483.62 T
(eated. Keywor) 346.11 483.62 T
(ds, or symbols,) 416.66 483.62 T
(all exist in a single global namespace that is separate fr) 99.65 469.62 T
(om module variables.) 364.81 469.62 T
(Br) 99.65 205.62 T
(eaking out the) 110.52 205.62 T
4 10 Q
(sixty-unit) 182.85 205.62 T
1 11 Q
( substrate to a separate module cr) 242.85 205.62 T
(eates a slightly) 406.09 205.62 T
(mor) 99.65 191.62 T
(e complicated str) 119.51 191.62 T
(uctur) 202.37 191.62 T
(e to our diagram, as shown in Figur) 228.25 191.62 T
(e 13.4.) 401.82 191.62 T
-0.32 (In Figur) 126.65 177.62 P
-0.32 (e 13.4, we show the de\336nitions of) 165.4 177.62 P
4 10 Q
-0.7 (sixty-unit) 327.37 177.62 P
1 11 Q
-0.32 ( in a separate module.) 387.37 177.62 P
(The) 99.65 163.62 T
4 10 Q
(sixty-unit) 120.81 163.62 T
1 11 Q
( module is a client of) 180.81 163.62 T
4 10 Q
(dylan) 284.43 163.62 T
1 11 Q
(, an interface and implementation of) 314.43 163.62 T
2 F
-0.3 (Comparison with C++:) 132.65 435.62 P
1 F
-0.3 ( Dylan modules pr) 246.49 435.62 P
-0.3 (ovide access contr) 336.53 435.62 P
-0.3 (ol similar) 423.72 435.62 P
(to that pr) 132.65 421.62 T
(ovided by the) 177.57 421.62 T
4 10 Q
(private:) 247.41 421.62 T
1 11 Q
( and) 295.41 421.62 T
4 10 Q
(public:) 319.53 421.62 T
1 11 Q
( keywor) 361.53 421.62 T
(ds in C++) 401.11 421.62 T
(classes, but Dylan access contr) 132.65 407.62 T
(ol is done at the module, rather than at) 280.17 407.62 T
-0.42 (the class, level. Dylan has no equivalent to) 132.65 393.62 P
4 10 Q
-0.92 (protected:) 337.82 393.62 P
1 11 Q
-0.42 ( access contr) 397.82 393.62 P
-0.42 (ol,) 457.36 393.62 P
(in that a class that subclasses a class fr) 132.65 379.62 T
(om another module does) 317.26 379.62 T
0 F
(not) 441.69 379.62 T
1 F
(have access to slots or other generic functions on its super) 132.65 365.62 T
(class fr) 413.18 365.62 T
(om) 446.65 365.62 T
(the other module, unless they ar) 132.65 351.62 T
(e explicitly exported fr) 289.41 351.62 T
(om that) 399.17 351.62 T
(module.) 132.65 337.62 T
(Dylan does support multiple interfaces, however; dif) 159.65 323.62 T
(fer) 416.76 323.62 T
(ent) 429.84 323.62 T
-0.44 (levels of access can be pr) 132.65 309.62 P
-0.44 (ovided by having mor) 250.46 309.62 P
-0.44 (e than one interface) 357.44 309.62 P
(module, each supplying the access needed for the particular inter-) 132.65 295.62 T
(face.) 132.65 281.62 T
(One way to think of Dylan access contr) 159.65 267.62 T
(ol in C++ terms is) 349.6 267.62 T
(that all de\336nitions in a module ar) 132.65 253.62 T
(e) 294.52 253.62 T
4 10 Q
(friend) 302.54 253.62 T
1 11 Q
(s of all classes in the) 338.54 253.62 T
(module, and the exported de\336nitions of the module ar) 132.65 239.62 T
(e) 396.53 239.62 T
4 10 Q
(public) 404.55 239.62 T
1 11 Q
(.) 440.55 239.62 T
126.65 448.83 126.65 232.08 2 L
V
0.25 H
0 Z
N
477.65 448.83 477.65 232.08 2 L
V
N
126.52 448.95 477.77 448.95 2 L
V
N
126.52 231.95 477.77 231.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 215
%%Page: "202" 216
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(202) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(de\336nitions used by) 99.65 442.63 T
4 10 Q
(time-implementation) 195.49 442.63 T
1 11 Q
( \050that is,) 309.49 442.63 T
4 10 Q
(time-implementation) 351.09 442.63 T
1 11 Q
( is a) 465.09 442.63 T
(client of) 99.65 428.63 T
4 10 Q
(sixty-unit) 141.36 428.63 T
1 11 Q
(\051, and an implementation of part of the interface cr) 201.36 428.63 T
(eated by) 446.49 428.63 T
4 10 Q
(time) 99.65 414.63 T
1 11 Q
(.) 123.65 414.63 T
3 15 Q
(13.5  Librar) 99.65 374.96 T
(y de\336nition) 165.41 374.96 T
1 11 Q
(W) 99.65 354.63 T
(e can now give the de\336nition of the library:) 109.64 354.63 T
4 9 Q
(define library time) 99.65 333.96 T
5 F
(// Interface module) 110.45 322.96 T
4 F
(export time;) 110.45 311.96 T
5 F
(// Substrate libraries) 110.45 300.96 T
4 F
(use format-out;) 110.45 289.96 T
(use dylan;) 110.45 278.96 T
(end library time;) 99.65 267.96 T
1 11 Q
(In the pr) 99.65 247.63 T
(eceding de\336nition, we declar) 141.27 247.63 T
(e that the interface to our library is de\336ned) 281.74 247.63 T
(by the) 99.65 233.63 T
4 10 Q
(time) 132.6 233.63 T
1 11 Q
( interface module. By exporting that module, we make all the) 156.6 233.63 T
(exported names fr) 99.65 219.63 T
(om that module accessible to clients of this library) 187.99 219.63 T
(. W) 429.83 219.63 T
(e also) 445.32 219.63 T
-0.27 (declar) 99.65 205.63 P
-0.27 (e that the) 129.37 205.63 P
4 10 Q
-0.59 (time) 176.4 205.63 P
1 11 Q
-0.27 ( library r) 200.4 205.63 P
-0.27 (elies on the) 242.3 205.63 P
4 10 Q
-0.59 (format-out) 299 205.63 P
1 11 Q
-0.27 ( and) 359 205.63 P
4 10 Q
-0.59 (dylan) 382.58 205.63 P
1 11 Q
-0.27 ( libraries \050that is,) 412.58 205.63 P
(that those libraries have interface modules of which our modules will be clients\051.) 99.65 191.63 T
(Notice that no mention is made of the) 99.65 177.63 T
4 10 Q
(time-implementation) 285.79 177.63 T
1 11 Q
(, or) 399.79 177.63 T
4 10 Q
(sixty-unit) 418.39 177.63 T
99.65 461.96 495.65 469.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.4) 187.44 473.29 T
8 F
(Inter) 245.8 473.29 T
(nal modules of) 266.06 473.29 T
4 F
(time) 333.87 473.29 T
8 F
( libr) 357.87 473.29 T
(ar) 373.88 473.29 T
(y) 383.07 473.29 T
(.) 387.07 473.29 T
99.65 485.95 495.65 672.95 C
108.65 489.95 486.65 670.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 125 432 491 601 366 169 114.65 495.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-4.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-4 .eps)%%CreationDate: (6/11/96) (11:31 AM)%%BoundingBox: 125 432 491 601%%HiResBoundingBox: 125.25 432.9167 490.75 600.325%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 4%AI5_OpenToView: 178 652 3 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7777%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 0 0 0 0 79 128 255 Lb(Background) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Guides) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Foreground) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.9 g800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D0 XR460.25 432.9167 m460.25 501.4167 L351.75 501.4167 L351.75 432.9167 L460.25 432.9167 Lf275.75 432.9167 m275.75 501.4167 L191.25 501.4167 L191.25 432.9167 L275.75 432.9167 Lf0 R0 G441.25 548.5 m441.25 600 L231.25 600 L231.25 548.5 L441.25 548.5 Lb0 To1 0 0 1 145.75 565.4167 0 TpTP-10.7974 0 Td0 Tr0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(time) Tx (\r) TX TO0 Ap0 R0 G0.65 w351.75 432.9167 m351.75 501.4167 l460.25 501.4167 l460.25 432.9167 lS0 To1 0 0 1 157.75 452.4167 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TO0 To1 0 0 1 234 450.9167 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 314.75 452.4167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO0 To1 0 0 1 405.5 452.4167 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G2 w230.9167 582.9167 m126.25 582.9167 L126.25 473.9167 L489.75 473.9167 L489.75 582.9167 L440.9167 582.9167 LS230.9167 582.9167 mS440.9167 582.9167 mS0 Ap126.25 432.9167 m126.25 465.4167 l191.25 465.4167 lS275.75 465.4167 m285.25 465.4167 l285.25 432.9167 lS293.25 432.9167 m293.25 465.4167 l351.75 465.4167 lS460.75 465.4167 m489.75 465.4167 l489.75 432.9167 lS0.5 w226.9167 552.25 mS0.65 w191.25 432.9167 m191.25 501.4167 l275.75 501.4167 l275.75 432.9167 l275.75 501.4167 lS235.25 524.5834 mS0.5 w258.7292 511.2709 mS0 To1 0 0 1 332.25 569.75 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w(time) Tx (\r) TX TO1 Ap0 R0 G2 w231 581 mS441 581 mS0 To1 0 0 1 278.2708 520.4584 0 TpTP-51.2875 0 Td0 Tr0 O0 g1 w(time-implementation) Tx (\r) TX TO0 R0 G0.65 w383.5833 487.7084 m383.5833 560.2084 L182.2708 560.2084 L182.2708 487.7084 L383.5833 487.7084 Ls466.6042 483.2084 m466.6042 551.7084 L374.6042 551.7084 L374.6042 483.2084 L466.6042 483.2084 Ls0 To1 0 0 1 422.6042 514.7084 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(sixty-unit) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 485.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 216
%%Page: "203" 217
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.6 Interchange files) 425.65 702.62 T
2 F
(203) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.29 (modules, because they ar) 99.65 665.62 P
-0.29 (e completely internal to our library and ar) 221.29 665.62 P
-0.29 (e not visible to) 423.14 665.62 P
(any clients of our library) 99.65 651.62 T
(.) 218.1 651.62 T
(Recall that constant and variable names, module names, and library names) 126.65 637.62 T
-0.26 (ar) 99.65 623.62 P
-0.26 (e distinct, so it is possible to have a library) 109.29 623.62 P
-0.26 (, module, and constant all of the same) 311.05 623.62 P
(name. A common convention in a library with only one interface module is to) 99.65 609.62 T
(give them the same name, as we have done her) 99.65 595.62 T
(e.) 328.42 595.62 T
-0.09 (T) 126.65 581.62 P
-0.09 (o build our library) 132.38 581.62 P
-0.09 (, we would need to de\336ne the library) 220.75 581.62 P
-0.09 (, de\336ne all the mod-) 398.69 581.62 P
-0.1 (ules, specify wher) 99.65 567.62 P
-0.1 (e and how the de\336nitions or sour) 186.86 567.62 P
-0.1 (ce r) 347.39 567.62 P
-0.1 (ecor) 364.34 567.62 P
-0.1 (ds that implement our) 384.65 567.62 P
(library ar) 99.65 553.62 T
(e to be found, specify wher) 144.84 553.62 T
(e the object code that r) 276.37 553.62 T
(esults fr) 385.15 553.62 T
(om compiling) 423.73 553.62 T
(the sour) 99.65 539.62 T
(ce r) 139.1 539.62 T
(ecor) 156.15 539.62 T
(ds ar) 176.46 539.62 T
(e to be stor) 200.24 539.62 T
(ed, and pr) 253.11 539.62 T
(ovide any particular instr) 302.73 539.62 T
(uctions to the) 426.33 539.62 T
(compiler r) 99.65 525.62 T
(egar) 149.77 525.62 T
(ding how to build the library) 170.81 525.62 T
(. The details of how to pr) 310.84 525.62 T
(ovide this) 432.24 525.62 T
(information vary fr) 99.65 511.62 T
(om one Dylan implementation to the next.) 193.16 511.62 T
(T) 126.65 497.62 T
(o use our library) 132.38 497.62 T
(, we would need to specify wher) 211.76 497.62 T
(e to \336nd the object code) 369.84 497.62 T
(and the implementation-dependent export information that allows another) 99.65 483.62 T
(library to use our library without access to our sour) 99.65 469.62 T
(ce r) 349.6 469.62 T
(ecor) 366.65 469.62 T
(ds. The details of this) 386.96 469.62 T
(information also depend on the Dylan implementation that we ar) 99.65 455.62 T
(e using.) 417.01 455.62 T
3 15 Q
(13.6  Inter) 99.65 295.95 T
(chang) 156.86 295.95 T
(e \336les) 193.2 295.95 T
1 11 Q
(Sour) 99.65 275.62 T
(ce r) 122.21 275.62 T
(ecor) 139.26 275.62 T
(ds in Dylan do not have to be stor) 159.57 275.62 T
(ed in \336les. Certain envir) 323.74 275.62 T
(onments) 440.21 275.62 T
(use a database for storing sour) 99.65 261.62 T
(ce r) 248.07 261.62 T
(ecor) 265.12 261.62 T
(ds, and a hypertextlike mechanism for) 285.43 261.62 T
(exploring them. Dylan does, however) 99.65 247.62 T
(, specify a portable inter) 282.2 247.62 T
(change format,) 399.07 247.62 T
(based on \336les, for exchanging Dylan sour) 99.65 233.62 T
(ce r) 300.5 233.62 T
(ecor) 317.55 233.62 T
(ds among Dylan) 337.85 233.62 T
(implementations.) 99.65 219.62 T
-0.28 (A \336le in) 126.65 205.62 P
2 F
-0.28 ( interchange format) 164.87 205.62 P
1 F
-0.28 ( has a header and a body) 262.69 205.62 P
-0.28 (. The header consists of) 380.9 205.62 P
(consecutive lines of keywor) 99.65 191.62 T
(ds and values. The body consists of Dylan sour) 234.15 191.62 T
(ce) 462.65 191.62 T
(r) 99.65 177.62 T
(ecor) 103.79 177.62 T
(ds, and is separated fr) 124.1 177.62 T
(om the header by at least one blank line. The only) 231 177.62 T
(r) 99.65 163.62 T
(equir) 103.79 163.62 T
(ed keywor) 129.21 163.62 T
(d is one to specify to what module the sour) 180.77 163.62 T
(ce r) 390.29 163.62 T
(ecor) 407.34 163.62 T
(ds in the \336le) 427.65 163.62 T
2 F
(Comparison with C++:) 132.65 421.62 T
1 F
( The library de\336nition, which names the mod-) 247.1 421.62 T
(ules exported and libraries used by a library) 132.65 407.62 T
(, is similar to C++ header) 346.14 407.62 T
-0.1 (\336les and includes. The main dif) 132.65 393.62 P
-0.1 (fer) 284.65 393.62 P
-0.1 (ence is that the Dylan development) 297.73 393.62 P
(envir) 132.65 379.62 T
(onment extracts the information that it needs about exported) 157.88 379.62 T
(and imported variables dir) 132.65 365.62 T
(ectly) 263.02 365.62 T
(, rather than r) 284.86 365.62 T
(equiring exports to be) 351.34 365.62 T
(duplicated in a set of header \336les, and r) 132.65 351.62 T
(equiring those header \336les to) 324.08 351.62 T
(be included in every sour) 132.65 337.62 T
(ce \336le that uses the imports.) 256.3 337.62 T
126.65 434.83 126.65 330.08 2 L
V
0.25 H
0 Z
N
477.65 434.83 477.65 330.08 2 L
V
N
126.52 434.95 477.77 434.95 2 L
V
N
126.52 329.95 477.77 329.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 217
%%Page: "204" 218
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(204) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(belong. Each \336le contains sour) 99.65 665.62 T
(ce r) 247.2 665.62 T
(ecor) 264.25 665.62 T
(ds of a single module, although the sour) 284.56 665.62 T
(ce) 480.06 665.62 T
(r) 99.65 651.62 T
(ecor) 103.79 651.62 T
(ds of each module can be stor) 124.1 651.62 T
(ed in any number of \336les. Standar) 267.79 651.62 T
(d keywor) 432.19 651.62 T
(ds) 478.49 651.62 T
(ar) 99.65 637.62 T
(e also de\336ned for author) 109.29 637.62 T
(, copyright, and version, although an implementation) 227.64 637.62 T
(may ignor) 99.65 623.62 T
(e them, or may de\336ne additional keywor) 149.6 623.62 T
(ds.) 347.95 623.62 T
(So, for instance, if we wanted to publish our library sour) 126.65 609.62 T
(ce r) 400.92 609.62 T
(ecor) 417.97 609.62 T
(ds, we) 438.28 609.62 T
(might cr) 99.65 595.62 T
(eate the \336les shown in the following sections.) 140.45 595.62 T
3 15 Q
(13.7  The) 99.65 555.95 T
4 14 Q
(time-library) 155.72 555.95 T
3 15 Q
( \336le) 256.52 555.95 T
8 10 Q
(The) 196.69 516.29 T
4 9 Q
(time-library) 216.7 516.29 T
8 10 Q
( \336le:) 281.5 516.29 T
4 9 Q
(time-library.dylan) 302.62 516.29 T
8 10 Q
(.) 399.82 516.29 T
4 9 Q
(Module: dylan-user) 105.65 496.95 T
5 F
(// Library definition) 105.65 477.95 T
4 F
(define library time) 105.65 466.95 T
5 F
(// Interface module) 116.45 455.95 T
4 F
(export time;) 116.45 444.95 T
5 F
(// Substrate libraries) 116.45 433.95 T
4 F
(use format-out;) 116.45 422.95 T
(use dylan;) 116.45 411.95 T
(end library time;) 105.65 400.95 T
5 F
(// Interface module) 105.65 381.95 T
4 F
(define module time) 105.65 370.95 T
5 F
(// Classes) 116.45 359.95 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 116.45 348.95 T
5 F
(// Generics) 116.45 337.95 T
4 F
(create say, encode-total-seconds;) 116.45 326.95 T
(end module time;) 105.65 315.95 T
5 F
(// Internal substrate module) 105.65 296.95 T
4 F
(define module sixty-unit) 105.65 285.95 T
5 F
(// External interface) 116.45 274.95 T
4 F
(use time;) 116.45 263.95 T
5 F
(// Internal interface) 116.45 252.95 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 116.45 241.95 T
5 F
(// Substrate module) 116.45 230.95 T
4 F
(use dylan;) 116.45 219.95 T
(end module sixty-unit;) 105.65 208.95 T
99.65 528.83 99.65 202.08 2 L
V
0.25 H
0 Z
N
513.65 528.83 513.65 202.08 2 L
V
N
99.52 528.95 513.77 528.95 2 L
V
N
99.52 508.95 513.77 508.95 2 L
V
N
99.52 201.95 513.77 201.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 218
%%Page: "205" 219
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.7 The) 389.88 702.62 T
5 F
(time-library) 425.51 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(205) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.37 (Because every \336le has to name the module to which its sour) 99.65 520.62 P
-0.37 (ce r) 385.54 520.62 P
-0.37 (ecor) 402.23 520.62 P
-0.37 (ds belong, you) 422.53 520.62 P
-0.04 (might wonder wher) 99.65 506.62 P
-0.04 (e to start. Every library implicitly de\336nes a) 197 506.62 P
4 10 Q
-0.08 (dylan-user) 406.83 506.62 P
1 11 Q
-0.04 ( mod-) 466.83 506.62 P
-0.3 (ule for this purpose. The) 99.65 492.62 P
4 10 Q
-0.66 (dylan-user) 220.16 492.62 P
1 11 Q
-0.3 ( module imports all of the) 280.16 492.62 P
4 10 Q
-0.66 (dylan) 407.34 492.62 P
1 11 Q
-0.3 ( module, so) 437.34 492.62 P
-0.18 (any Dylan de\336nition can be used. Y) 99.65 478.62 P
-0.18 (ou can think of) 270.74 478.62 P
4 10 Q
-0.4 (dylan-user) 345.81 478.62 P
1 11 Q
-0.18 ( as being a scratch) 405.81 478.62 P
(version of) 99.65 464.62 T
4 10 Q
(dylan) 150.92 464.62 T
1 11 Q
(. Each library has a private copy of) 180.92 464.62 T
4 10 Q
(dylan-user) 352.05 464.62 T
1 11 Q
(, so ther) 411.23 464.62 T
(e is no) 449.56 464.62 T
-0.46 (concern that de\336nitions in one library\325s) 99.65 450.62 P
4 10 Q
-1 (dylan-user) 290.57 450.62 P
1 11 Q
-0.46 ( could be confused with those) 350.57 450.62 P
(of another) 99.65 436.62 T
(.) 148.76 436.62 T
(The purposes of the library \336le ar) 126.65 422.62 T
(e to communicate to the Dylan compiler) 288.85 422.62 T
(the str) 99.65 408.62 T
(uctur) 130.16 408.62 T
(e of the module namespaces, to state which other libraries to sear) 156.04 408.62 T
(ch) 472.11 408.62 T
(for the modules that ar) 99.65 394.62 T
(e used in the implementation of this library) 210.85 394.62 T
(, and to deter-) 420.27 394.62 T
(mine which modules implemented by this library ar) 99.65 380.62 T
(e visible to other libraries) 353.2 380.62 T
(\050and pr) 99.65 366.62 T
(ograms\051 that use this library) 135.44 366.62 T
(. The details of how these tasks ar) 271.51 366.62 T
(e done) 434.69 366.62 T
(depend on the implementation, but each envir) 99.65 352.62 T
(onment will pr) 324.81 352.62 T
(ovide a mechanism) 397.22 352.62 T
(for r) 99.65 338.62 T
(eading library and module de\336nitions, either dir) 120.56 338.62 T
(ectly fr) 356.22 338.62 T
(om an inter) 389.84 338.62 T
(change) 445.57 338.62 T
(\336le, or after conversion of the inter) 99.65 324.62 T
(change \336le to an implementation-dependent) 267.66 324.62 T
(format.) 99.65 310.62 T
3 13 Q
(13.7.1  The) 99.65 279.29 T
4 12 Q
(sixty-unit) 157.13 279.29 T
3 13 Q
( implementation \336le) 229.13 279.29 T
5 9 Q
(// Implementation module) 105.65 640.95 T
4 F
(define module time-implementation) 105.65 629.95 T
5 F
(// External interface) 116.45 618.95 T
4 F
(use time;) 116.45 607.95 T
5 F
(// Substrate modules) 116.45 596.95 T
4 F
(use sixty-unit;) 116.45 585.95 T
(use format-out;) 116.45 574.95 T
(use dylan;) 116.45 563.95 T
(end module time-implementation;) 105.65 552.95 T
8 10 Q
(The) 172.2 240.29 T
4 9 Q
(sixty-unit) 192.21 240.29 T
8 10 Q
( implementation \336le:) 246.21 240.29 T
4 9 Q
(sixty-unit.dylan) 337.91 240.29 T
8 10 Q
(.) 424.31 240.29 T
4 9 Q
(Module: sixty-unit) 105.65 220.95 T
(define abstract class <sixty-unit> \050<object>\051) 105.65 201.95 T
(slot total-seconds :: <integer>,) 116.45 190.95 T
( required-init-keyword: total-seconds:;) 121.85 179.95 T
(end class <sixty-unit>;) 105.65 168.95 T
8 10 Q
(The) 170.34 660.29 T
4 9 Q
(time-library) 190.35 660.29 T
8 10 Q
( \336le:) 255.15 660.29 T
4 9 Q
(time-library.dylan) 276.27 660.29 T
8 10 Q
(.) 373.47 660.29 T
9 F
( \050contin) 376.25 660.29 T
(ued\051) 408.94 660.29 T
99.65 672.83 99.65 546.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 546.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 545.95 513.77 545.95 2 L
V
N
99.65 252.83 99.65 162.08 2 L
V
N
513.65 252.83 513.65 162.08 2 L
V
N
99.52 252.95 513.77 252.95 2 L
V
N
99.52 232.95 513.77 232.95 2 L
V
N
99.52 161.95 513.77 161.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 219
%%Page: "206" 220
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(206) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.12 (The pr) 99.65 416.62 P
-0.12 (eceding implementation \336le is the \336rst \336le in which we use one of our own) 131.45 416.62 P
(modules. The header statement) 99.65 402.62 T
4 10 Q
(Module: sixty-unit) 255.1 402.62 T
1 11 Q
( tells the Dylan compiler) 363.1 402.62 T
(wher) 99.65 388.62 T
(e to look to r) 124.64 388.62 T
(esolve the names that we ar) 185.57 388.62 T
(e using \321 it tells Dylan that, when) 319.91 388.62 T
(we say) 99.65 374.62 T
4 10 Q
(define class) 135.87 374.62 T
1 11 Q
( or) 207.87 374.62 T
4 10 Q
(<integer>) 223.72 374.62 T
1 11 Q
( or) 277.72 374.62 T
4 10 Q
(*) 293.57 374.62 T
1 11 Q
(, we mean the Dylan de\336nitions of) 299.57 374.62 T
4 10 Q
(define class) 99.65 360.62 T
1 11 Q
(,) 171.65 360.62 T
4 10 Q
(<integer>) 177.15 360.62 T
1 11 Q
(, and) 231.15 360.62 T
4 10 Q
(*) 258.02 360.62 T
1 11 Q
(, because) 264.02 360.62 T
4 10 Q
(sixty-unit) 310.57 360.62 T
1 11 Q
( uses the) 370.57 360.62 T
4 10 Q
(dylan) 415.31 360.62 T
1 11 Q
( module.) 445.31 360.62 T
(When we de\336ne) 99.65 346.62 T
4 10 Q
(encode-total-seconds) 181.73 346.62 T
1 11 Q
(, we mean the) 301.73 346.62 T
4 10 Q
(encode-total-seconds) 372.06 346.62 T
1 11 Q
(cr) 99.65 332.62 T
(eated by the) 108.68 332.62 T
4 10 Q
(time) 170.73 332.62 T
1 11 Q
( module, because) 194.73 332.62 T
4 10 Q
(sixty-unit) 281.58 332.62 T
1 11 Q
( uses that module.) 341.58 332.62 T
3 13 Q
(13.7.2  The) 99.65 301.29 T
4 12 Q
(time) 157.13 301.29 T
3 13 Q
( implementation \336le) 185.93 301.29 T
4 9 Q
(define method encode-total-seconds) 105.65 640.95 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 127.25 629.95 T
(=>) 111.05 618.95 T
(\050total-seconds :: <integer>\051) 127.25 618.95 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 116.45 607.95 T
(end method encode-total-seconds;) 105.65 596.95 T
(define method decode-total-seconds) 105.65 577.95 T
(\050sixty-unit :: <sixty-unit>\051) 127.25 566.95 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 555.95 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 116.45 544.95 T
(end method decode-total-seconds;) 105.65 533.95 T
(define method decode-total-seconds) 105.65 514.95 T
(\050total-seconds :: <integer>\051) 127.25 503.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 492.95 T
(let\050total-minutes, seconds\051 = truncate/\050abs\050total-seconds\051, 60\051;) 116.45 481.95 T
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 116.45 470.95 T
(values\050hours, minutes, seconds\051;) 116.45 459.95 T
(end method decode-total-seconds;) 105.65 448.95 T
8 10 Q
(The) 204.6 262.29 T
4 9 Q
(time) 224.61 262.29 T
8 10 Q
( implementation \336le:) 246.21 262.29 T
4 9 Q
(time.dylan) 337.91 262.29 T
8 10 Q
(.) 391.91 262.29 T
4 9 Q
(Module: time-implementation) 105.65 242.95 T
5 F
(// Define nonnegative integers as integers that are >= zero.) 105.65 223.95 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 105.65 212.95 T
(define abstract class <time> \050<sixty-unit>\051) 105.65 193.95 T
(end class <time>;) 105.65 182.95 T
8 10 Q
(The) 145.85 660.29 T
4 9 Q
(sixty-unit) 165.86 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(sixty-unit.dylan) 311.56 660.29 T
8 10 Q
(.) 397.96 660.29 T
9 F
( \050contin) 400.74 660.29 T
(ued\051) 433.43 660.29 T
99.65 672.83 99.65 442.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 442.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 441.95 513.77 441.95 2 L
V
N
99.65 274.83 99.65 176.08 2 L
V
N
513.65 274.83 513.65 176.08 2 L
V
N
99.52 274.95 513.77 274.95 2 L
V
N
99.52 254.95 513.77 254.95 2 L
V
N
99.52 175.95 513.77 175.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 220
%%Page: "207" 221
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.7 The) 389.88 702.62 T
5 F
(time-library) 425.51 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(207) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method say \050time :: <time>\051) 105.65 640.95 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 116.45 629.95 T
(format-out\050"%d:%s%d",) 116.45 618.95 T
(hours, if \050minutes < 10\051 "0" else " " end, minutes\051;) 175.85 607.95 T
(end method say;) 105.65 596.95 T
5 F
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 105.65 577.95 T
4 F
(define class <time-of-day> \050<time>\051) 105.65 566.95 T
(end class <time-of-day>;) 105.65 555.95 T
(define method total-seconds-setter) 105.65 536.95 T
(\050total-seconds :: <integer>, time :: <time-of-day>\051) 127.25 525.95 T
(=> \050total-seconds :: <nonnegative-integer>\051) 111.05 514.95 T
(if \050total-seconds >= 0\051) 116.45 503.95 T
(next-method\050\051;) 127.25 492.95 T
(else) 116.45 481.95 T
(error\050"%d cannot be negative", total-seconds\051;) 127.25 470.95 T
(end if;) 116.45 459.95 T
(end method total-seconds-setter;) 105.65 448.95 T
(define method initialize \050time :: <time-of-day>, #key\051) 105.65 429.95 T
(next-method\050\051;) 116.45 418.95 T
(if \050time.total-seconds < 0\051) 116.45 407.95 T
(error\050"%d cannot be negative", time.total-seconds\051;) 127.25 396.95 T
(end if;) 116.45 385.95 T
(end method initialize;) 105.65 374.95 T
5 F
(// A relative time between -24:00 and +24:00) 105.65 355.95 T
4 F
(define class <time-offset> \050<time>\051) 105.65 344.95 T
(end class <time-offset>;) 105.65 333.95 T
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 105.65 314.95 T
(time.total-seconds < 0;) 116.45 303.95 T
(end method past?;) 105.65 292.95 T
(define method say \050time :: <time-offset>\051 => \050\051) 105.65 273.95 T
(format-out\050"%s ", if \050time.past?\051 "minus" else "plus" end\051;) 116.45 262.95 T
(next-method\050\051;) 116.45 251.95 T
(end method say;) 105.65 240.95 T
(define method \134+) 105.65 221.95 T
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 127.25 210.95 T
(=> \050sum :: <time-offset>\051) 111.05 199.95 T
(let sum = offset1.total-seconds + offset2.total-seconds;) 116.45 188.95 T
(make\050<time-offset>, total-seconds: sum\051;) 116.45 177.95 T
(end method \134+;) 105.65 166.95 T
8 10 Q
(The) 178.25 660.29 T
4 9 Q
(time) 198.26 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(time.dylan) 311.56 660.29 T
8 10 Q
(.) 365.56 660.29 T
9 F
( \050contin) 368.34 660.29 T
(ued\051) 401.03 660.29 T
99.65 672.83 99.65 160.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 160.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 159.95 513.77 159.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 221
%%Page: "208" 222
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(208) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.39 (In the pr) 99.65 255.62 P
-0.39 (eceding implementation \336le, it is the) 140.49 255.62 P
4 10 Q
-0.85 (time-implementation) 317.95 255.62 P
1 11 Q
-0.39 ( module that) 431.95 255.62 P
(speci\336es what we mean when we write Dylan expr) 99.65 241.62 T
(essions, and in which module) 347.55 241.62 T
(namespace our de\336nitions will appear) 99.65 227.62 T
(.) 285.35 227.62 T
3 13 Q
(13.7.3  The librar) 99.65 196.29 T
(y-inter) 183.9 196.29 T
(c) 216.28 196.29 T
(hang) 222.12 196.29 T
(e de\336nition \050LID\051) 247.69 196.29 T
1 11 Q
(As described in Section 2.5.1, page 21, most Dylan implementations also accept a) 99.65 176.62 T
(LID \336le that enumerates the \336les of a library and the or) 99.65 162.62 T
(der in which those \336les) 366.73 162.62 T
4 9 Q
(define method \134+) 105.65 640.95 T
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 127.25 629.95 T
(=> \050sum :: <time-of-day>\051) 111.05 618.95 T
(make\050<time-of-day>,) 116.45 607.95 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 143.45 596.95 T
(end method \134+;) 105.65 585.95 T
(define method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 105.65 566.95 T
(=> \050sum :: <time-of-day>\051) 111.05 555.95 T
(offset + time-of-day;) 116.45 544.95 T
(end method \134+;) 105.65 533.95 T
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 105.65 514.95 T
(time1.total-seconds < time2.total-seconds;) 116.45 503.95 T
(end method \134<;) 105.65 492.95 T
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 105.65 473.95 T
(time1.total-seconds < time2.total-seconds;) 116.45 462.95 T
(end method \134<;) 105.65 451.95 T
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 105.65 432.95 T
(time1.total-seconds = time2.total-seconds;) 116.45 421.95 T
(end method \134=;) 105.65 410.95 T
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 105.65 391.95 T
(time1.total-seconds = time2.total-seconds;) 116.45 380.95 T
(end method \134=;) 105.65 369.95 T
5 F
(// Two useful time constants) 105.65 350.95 T
4 F
(define constant $midnight) 105.65 339.95 T
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0500, 0, 0\051\051;) 116.45 328.95 T
(define constant $tomorrow) 105.65 309.95 T
(= make\050<time-of-day>,) 116.45 298.95 T
( total-seconds: encode-total-seconds\05024, 0, 0\051\051;) 148.85 287.95 T
8 10 Q
(The) 178.25 660.29 T
4 9 Q
(time) 198.26 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(time.dylan) 311.56 660.29 T
8 10 Q
(.) 365.56 660.29 T
9 F
( \050contin) 368.34 660.29 T
(ued\051) 401.03 660.29 T
99.65 672.83 99.65 281.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 281.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 280.95 513.77 280.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 222
%%Page: "209" 223
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.8 Component library) 416.15 702.62 T
2 F
(209) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(will be initialized, if ther) 99.65 665.62 T
(e ar) 218.78 665.62 T
(e any top-level forms. The LID \336le for our) 236.44 665.62 T
4 10 Q
(time) 442.12 665.62 T
1 11 Q
(library would be as follows.) 99.65 651.62 T
(In a LID \336le, only the base \336le name is given. Information about the folder or) 99.65 538.62 T
(dir) 99.65 524.62 T
(ectory wher) 113.72 524.62 T
(e the \336les ar) 171.66 524.62 T
(e stor) 229.88 524.62 T
(ed, and about the \336le extension \050) 256.3 524.62 T
4 10 Q
(.dylan) 414.49 524.62 T
1 11 Q
( in our) 450.49 524.62 T
-0.03 (examples\051, is implementation dependent and must be supplied by the individual) 99.65 510.62 P
(implementation.) 99.65 496.62 T
3 15 Q
(13.8  Component librar) 99.65 456.95 T
(y) 233.06 456.95 T
1 11 Q
(In pr) 99.65 436.62 T
(evious examples, we have shown how the) 123.26 436.62 T
4 10 Q
(<angle>) 330.47 436.62 T
1 11 Q
( class can use the) 372.47 436.62 T
4 10 Q
(<sixty-unit>) 99.65 422.62 T
1 11 Q
( class as a base class. W) 171.65 422.62 T
(e could have simply included the) 283.89 422.62 T
4 10 Q
(<angle>) 448.29 422.62 T
1 11 Q
(class in our time library \050pr) 99.65 408.62 T
(esumably calling it a time-and-angle library\051, but it) 231.88 408.62 T
(seems plausible that clients might not want both classes all the time. Another) 99.65 394.62 T
(or) 99.65 380.62 T
(ganization would be to make an angle library that uses the time library) 109.8 380.62 T
(, which) 453.57 380.62 T
(would be bur) 99.65 366.62 T
(densome only to clients who want angles without time. Clearly) 165.1 366.62 T
(, the) 471.13 366.62 T
-0.04 (right solution is to make a separate) 99.65 352.62 P
4 10 Q
-0.08 (sixty-unit) 272.29 352.62 P
1 11 Q
-0.04 ( library that is shar) 332.29 352.62 P
-0.04 (ed by the time) 423.58 352.62 P
(and angle libraries.) 99.65 338.62 T
-0.36 (Because we had alr) 126.65 324.62 P
-0.36 (eady br) 218.67 324.62 P
-0.36 (oken out) 254.9 324.62 P
4 10 Q
-0.78 (sixty-unit) 299.7 324.62 P
1 11 Q
-0.36 ( into a separate module and) 359.7 324.62 P
(\336le, we can cr) 99.65 310.62 T
(eate this new or) 166.03 310.62 T
(ganization by) 242.76 310.62 T
(\245) 108.65 290.62 T
(Moving the) 126.65 290.62 T
4 10 Q
(sixty-unit) 185.75 290.62 T
1 11 Q
( module to its own library \336le) 245.75 290.62 T
(\245) 108.65 270.62 T
(Updating the) 126.65 270.62 T
4 10 Q
(time) 194.1 270.62 T
1 11 Q
( library \336le) 218.1 270.62 T
(\245) 108.65 250.62 T
(Opening the) 126.65 250.62 T
4 10 Q
(<sixty-unit>) 190.05 250.62 T
1 11 Q
( class) 262.05 250.62 T
(Note that no changes ar) 99.65 230.62 T
(e r) 215.02 230.62 T
(equir) 227.18 230.62 T
(ed to the) 252.59 230.62 T
4 10 Q
(time) 297.68 230.62 T
1 11 Q
( implementation \336le, so we do not) 321.68 230.62 T
(pr) 99.65 216.62 T
(esent it again.) 110.41 216.62 T
8 10 Q
(The LID \336le:) 248.31 618.29 T
4 9 Q
(time.lid) 305 618.29 T
8 10 Q
(.) 348.2 618.29 T
4 9 Q
(library:) 105.65 598.95 T
(time) 154.25 598.95 T
(files:) 105.65 587.95 T
(library) 154.25 587.95 T
(sixty-unit) 154.25 576.95 T
(time) 154.25 565.95 T
99.65 630.83 99.65 559.08 2 L
V
0.25 H
0 Z
N
513.65 630.83 513.65 559.08 2 L
V
N
99.52 630.95 513.77 630.95 2 L
V
N
99.52 610.95 513.77 610.95 2 L
V
N
99.52 558.95 513.77 558.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 223
%%Page: "210" 224
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(210) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.8.1  The) 99.65 664.29 T
4 12 Q
(sixty-unit-library) 157.13 664.29 T
3 13 Q
( \336le) 286.73 664.29 T
1 11 Q
-0.31 (Notice that we have taken this opportunity to r) 99.65 328.62 P
-0.31 (eor) 325.69 328.62 P
-0.31 (ganize the) 341.12 328.62 P
4 10 Q
-0.69 (sixty-unit) 393.23 328.62 P
1 11 Q
-0.31 ( module) 453.23 328.62 P
(into a separate interface and implementation. W) 99.65 314.62 T
(e also have to cr) 332.73 314.62 T
(eate) 410.38 314.62 T
4 10 Q
(encode-) 432.75 314.62 T
(total-seconds) 99.65 300.62 T
1 11 Q
( in the) 177.65 300.62 T
4 10 Q
(sixty-unit) 210.76 300.62 T
1 11 Q
( module, rather than to cr) 270.76 300.62 T
(eate it in the) 394.76 300.62 T
4 10 Q
(time) 457.03 300.62 T
1 11 Q
(interface and to de\336ne it in) 99.65 286.62 T
4 10 Q
(sixty-unit) 233.19 286.62 T
1 11 Q
(. Recall that all cr) 293.19 286.62 T
(eated names must be) 376.35 286.62 T
(de\336ned in the library in which they ar) 99.65 272.62 T
(e cr) 284.27 272.62 T
(eated; we cannot use the cr) 301.32 272.62 T
(eate\320de\336ne) 432.24 272.62 T
(str) 99.65 258.62 T
(uctur) 112.15 258.62 T
(e acr) 138.04 258.62 T
(oss libraries. W) 160.59 258.62 T
(e still want) 233.97 258.62 T
4 10 Q
(encode-total-seconds) 290 258.62 T
1 11 Q
( to be part of the) 410 258.62 T
-0.06 (interface of the) 99.65 244.62 P
4 10 Q
-0.14 (time) 174.75 244.62 P
1 11 Q
-0.06 ( library) 198.75 244.62 P
-0.06 (, so we will have to change the) 233 244.62 P
4 10 Q
-0.14 (time) 383.93 244.62 P
1 11 Q
-0.06 ( interface module) 407.93 244.62 P
(to import it and to r) 99.65 230.62 T
(e-export it fr) 195.6 230.62 T
(om the time library) 256.12 230.62 T
(, as shown in Section 13.8.2.) 348.69 230.62 T
(If we had followed our own r) 126.65 216.62 T
(ecommendations in Section 13.4.3, page 198,) 269.54 216.62 T
(we would pr) 99.65 202.62 T
(obably have discover) 162.08 202.62 T
(ed that) 265.07 202.62 T
4 10 Q
(encode-total-seconds) 301.63 202.62 T
1 11 Q
( belonged in) 421.63 202.62 T
(the) 99.65 188.62 T
4 10 Q
(sixty-unit) 117.65 188.62 T
1 11 Q
( interface, and we would have avoided most of this) 177.65 188.62 T
(r) 99.65 174.62 T
(eor) 103.79 174.62 T
(ganization.) 119.22 174.62 T
8 10 Q
(The) 170.79 625.29 T
4 9 Q
(sixty-unit) 190.8 625.29 T
8 10 Q
( libr) 244.8 625.29 T
(ar) 260.81 625.29 T
(y \336le:) 270 625.29 T
4 9 Q
(sixty-unit-library.dylan) 296.12 625.29 T
8 10 Q
(.) 425.72 625.29 T
4 9 Q
(Module: dylan-user) 105.65 605.95 T
5 F
(// Library definition) 105.65 586.95 T
4 F
(define library sixty-unit) 105.65 575.95 T
5 F
(// Interface module) 116.45 564.95 T
4 F
(export sixty-unit;) 116.45 553.95 T
5 F
(// Substrate library) 116.45 542.95 T
4 F
(use dylan;) 116.45 531.95 T
(end library sixty-unit;) 105.65 520.95 T
5 F
(// Interface module) 105.65 501.95 T
4 F
(define module sixty-unit) 105.65 490.95 T
5 F
(// External interface) 116.45 479.95 T
4 F
(create <sixty-unit>;) 116.45 468.95 T
(create total-seconds, encode-total-seconds, decode-total-seconds;) 116.45 457.95 T
(end module sixty-unit;) 105.65 446.95 T
5 F
(// Implementation module) 105.65 427.95 T
4 F
(define module sixty-unit-implementation) 105.65 416.95 T
5 F
(// External interface) 116.45 405.95 T
4 F
(use sixty-unit;) 116.45 394.95 T
5 F
(// Substrate module) 116.45 383.95 T
4 F
(use dylan;) 116.45 372.95 T
(end module sixty-unit;) 105.65 361.95 T
99.65 637.83 99.65 355.08 2 L
V
0.25 H
0 Z
N
513.65 637.83 513.65 355.08 2 L
V
N
99.52 637.95 513.77 637.95 2 L
V
N
99.52 617.95 513.77 617.95 2 L
V
N
99.52 354.95 513.77 354.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 224
%%Page: "211" 225
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.8 Component library) 416.5 702.62 T
2 F
(21) 517.75 702.62 T
(1) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.8.2  The updated) 99.65 664.29 T
4 12 Q
(time-library) 201.55 664.29 T
3 13 Q
( \336le) 287.95 664.29 T
1 11 Q
(Note that the) 99.65 251.62 T
4 10 Q
(time) 166.23 251.62 T
1 11 Q
( interface module imports only) 190.23 251.62 T
4 10 Q
(encode-total-seconds) 343.49 251.62 T
1 11 Q
( fr) 463.49 251.62 T
(om) 474.05 251.62 T
4 10 Q
(sixty-unit) 99.65 237.62 T
1 11 Q
(. It then r) 159.65 237.62 T
(e-exports all the names that it has imported \321 in this case,) 203.75 237.62 T
(just) 99.65 223.62 T
4 10 Q
(encode-total-seconds) 119.86 223.62 T
1 11 Q
(. In this way) 239.85 223.62 T
(, the) 298.39 223.62 T
4 10 Q
(time) 321.89 223.62 T
1 11 Q
( interface is acting as a \336lter) 345.89 223.62 T
(and is passing on only a subset of the) 99.65 209.62 T
4 10 Q
(sixty-unit) 283.5 209.62 T
1 11 Q
( interface to its clients.) 343.5 209.62 T
-0.08 (At this point, we need to) 126.65 195.62 P
2 F
-0.08 (open) 248.9 195.62 P
1 F
-0.08 ( the) 273.95 195.62 P
4 10 Q
-0.18 (<sixty-unit>) 294.54 195.62 P
1 11 Q
-0.08 ( class. Because it is now in) 366.54 195.62 P
(a separate library) 99.65 181.62 T
(, it must be de\336ned to be open to allow other libraries, such as) 182.96 181.62 T
4 10 Q
(time) 99.65 167.62 T
1 11 Q
( or) 123.65 167.62 T
4 10 Q
(angle,) 139.5 167.62 T
1 11 Q
( to subclass it. Opening a class simply amounts to changing the) 175.5 167.62 T
8 10 Q
(The) 196.69 625.29 T
4 9 Q
(time-library) 216.7 625.29 T
8 10 Q
( \336le:) 281.5 625.29 T
4 9 Q
(time-library.dylan) 302.62 625.29 T
8 10 Q
(.) 399.82 625.29 T
4 9 Q
(Module: dylan-user) 105.65 605.95 T
5 F
(// Library definition) 105.65 586.95 T
4 F
(define library time) 105.65 575.95 T
5 F
(// Interface module) 116.45 564.95 T
4 F
(export time;) 116.45 553.95 T
5 F
(// Substrate libraries) 116.45 542.95 T
4 F
(use sixty-unit;) 116.45 531.95 T
(use format-out;) 116.45 520.95 T
(use dylan;) 116.45 509.95 T
(end library time;) 105.65 498.95 T
5 F
(// Interface module) 105.65 479.95 T
4 F
(define module time) 105.65 468.95 T
5 F
(// Classes) 116.45 457.95 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 116.45 446.95 T
5 F
(// Generics) 116.45 435.95 T
4 F
(create say;) 116.45 424.95 T
5 F
(// Shared protocol) 116.45 413.95 T
4 F
(use sixty-unit, import: { encode-total-seconds }, export: all;) 116.45 402.95 T
(end module time;) 105.65 391.95 T
5 F
(// Implementation module) 105.65 372.95 T
4 F
(define module time-implementation) 105.65 361.95 T
5 F
(// External interface) 116.45 350.95 T
4 F
(use time;) 116.45 339.95 T
5 F
(// Substrate modules) 116.45 328.95 T
4 F
(use sixty-unit;) 116.45 317.95 T
(use format-out;) 116.45 306.95 T
(use dylan;) 116.45 295.95 T
(end module time-implementation;) 105.65 284.95 T
99.65 637.83 99.65 278.08 2 L
V
0.25 H
0 Z
N
513.65 637.83 513.65 278.08 2 L
V
N
99.52 637.95 513.77 637.95 2 L
V
N
99.52 617.95 513.77 617.95 2 L
V
N
99.52 277.95 513.77 277.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 225
%%Page: "212" 226
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(212) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
-0.1 (define class) 99.65 665.62 P
1 11 Q
-0.05 ( to) 171.55 665.62 P
4 10 Q
-0.1 (define open class) 186.54 665.62 P
1 11 Q
-0.05 (. The exact implications of this declaration) 288.34 665.62 P
(ar) 99.65 651.62 T
(e discussed in Chapter 19,) 109.29 651.62 T
0 F
(Performance and Flexibility) 241.35 651.62 T
1 F
(.) 364.61 651.62 T
3 13 Q
(13.8.3  The updated) 99.65 620.29 T
4 12 Q
(sixty-unit) 201.55 620.29 T
3 13 Q
( implementation \336le) 273.55 620.29 T
1 11 Q
(Figur) 99.65 265.62 T
(e 13.5 shows the r) 125.86 265.62 T
(elationships among our libraries and modules at this) 211.69 265.62 T
(point. Note that) 99.65 251.62 T
4 10 Q
(sixty-unit) 179.53 251.62 T
1 11 Q
( is now a separate library) 239.53 251.62 T
(. It uses the) 360.54 251.62 T
4 10 Q
(dylan) 418.07 251.62 T
1 11 Q
( library) 448.07 251.62 T
(and is used by the) 99.65 237.62 T
4 10 Q
(time) 190.63 237.62 T
1 11 Q
( library) 214.63 237.62 T
(. W) 248.95 237.62 T
(e illustrate the) 264.44 237.62 T
4 10 Q
(time) 336.4 237.62 T
1 11 Q
( module importing and r) 360.4 237.62 T
(e-) 480.89 237.62 T
(exporting part of the) 99.65 223.62 T
4 10 Q
(sixty-unit) 202.83 223.62 T
1 11 Q
( interface module \050the method) 262.83 223.62 T
4 10 Q
(encode-total-) 412.86 223.62 T
(seconds) 99.65 209.62 T
1 11 Q
(\051 by the darker gr) 141.65 209.62 T
(ey ar) 226.33 209.62 T
(ea.) 250.11 209.62 T
8 10 Q
(The) 172.2 581.29 T
4 9 Q
(sixty-unit) 192.21 581.29 T
8 10 Q
( implementation \336le:) 246.21 581.29 T
4 9 Q
(sixty-unit.dylan) 337.91 581.29 T
8 10 Q
(.) 424.31 581.29 T
4 9 Q
(Module: sixty-unit-implementation) 105.65 561.95 T
(define open abstract class <sixty-unit> \050<object>\051) 105.65 542.95 T
(slot total-seconds :: <integer>,) 116.45 531.95 T
(required-init-keyword: total-seconds:;) 127.25 520.95 T
(end class <sixty-unit>;) 105.65 509.95 T
(define method encode-total-seconds) 105.65 490.95 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 127.25 479.95 T
(=>) 111.05 468.95 T
(\050total-seconds :: <integer>\051) 127.25 468.95 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 116.45 457.95 T
(end method encode-total-seconds;) 105.65 446.95 T
(define method decode-total-seconds) 105.65 427.95 T
(\050sixty-unit :: <sixty-unit>\051) 127.25 416.95 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 405.95 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 116.45 394.95 T
(end method decode-total-seconds;) 105.65 383.95 T
(define method decode-total-seconds) 105.65 364.95 T
(\050total-seconds :: <integer>\051) 127.25 353.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 342.95 T
(let\050total-minutes, seconds\051 = truncate/\050abs\050total-seconds\051, 60\051;) 116.45 331.95 T
(let\050hours, minutes\051 = truncate/\050total-minutes, 60\051;) 116.45 320.95 T
(values\050hours, minutes, seconds\051;) 116.45 309.95 T
(end method decode-total-seconds;) 105.65 298.95 T
99.65 593.83 99.65 292.08 2 L
V
0.25 H
0 Z
N
513.65 593.83 513.65 292.08 2 L
V
N
99.52 593.95 513.77 593.95 2 L
V
N
99.52 573.95 513.77 573.95 2 L
V
N
99.52 291.95 513.77 291.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 226
%%Page: "213" 227
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.8 Component library) 416.15 702.62 T
2 F
(213) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.8.4  T) 99.65 329.29 T
(w) 141.1 329.29 T
(o LID \336les) 149.2 329.29 T
1 11 Q
(Her) 99.65 309.63 T
(e, we show the LID \336les for each library) 118.22 309.63 T
(.) 310.55 309.63 T
99.65 353.96 495.65 361.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 13.5) 184.84 365.29 T
4 9 Q
(sixty-unit) 243.2 365.29 T
8 10 Q
( as a separ) 297.2 365.29 T
(ate libr) 346.57 365.29 T
(ar) 376.48 365.29 T
(y) 385.67 365.29 T
(.) 389.67 365.29 T
(The LID \336le:) 232.11 281.29 T
4 9 Q
(sixty-unit.lid) 288.8 281.29 T
8 10 Q
(.) 364.4 281.29 T
4 9 Q
(library:) 105.65 261.96 T
(sixty-unit) 154.25 261.96 T
(files:) 105.65 250.96 T
(sixty-unit-library) 154.25 250.96 T
(sixty-unit) 154.25 239.96 T
8 10 Q
(The LID \336le:) 248.31 208.29 T
4 9 Q
(time.lid) 305 208.29 T
8 10 Q
(.) 348.2 208.29 T
4 9 Q
(library:) 105.65 188.96 T
(time) 154.25 188.96 T
(files:) 105.65 177.96 T
(time-library) 154.25 177.96 T
(time) 154.25 166.96 T
99.65 293.84 99.65 233.09 2 L
V
0.25 H
0 Z
N
513.65 293.84 513.65 233.09 2 L
V
N
99.52 293.96 513.77 293.96 2 L
V
N
99.52 273.96 513.77 273.96 2 L
V
N
99.52 232.96 513.77 232.96 2 L
V
N
99.65 220.84 99.65 160.09 2 L
V
N
513.65 220.84 513.65 160.09 2 L
V
N
99.52 220.96 513.77 220.96 2 L
V
N
99.52 200.96 513.77 200.96 2 L
V
N
99.52 159.96 513.77 159.96 2 L
V
N
99.65 377.95 495.65 672.95 C
109.65 381.95 485.65 670.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 149 334 513 611 364 277 115.65 387.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f13-5.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0%%For: (brent) (harlequin)%%Title: (f13-5 .eps)%%CreationDate: (6/11/96) (11:31 AM)%%BoundingBox: 149 334 513 611%%HiResBoundingBox: 149.75 334.75 512.25 610.575%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.0%AI3_ColorUsage: Black&White%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 29 31 581 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 300%AI5_NumLayers: 1%AI5_OpenToView: 150 636 2 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 23 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin		/initialize	{ 		Adobe_ColorImage_AI6 begin		Adobe_ColorImage_AI6		{			dup type /arraytype eq			{				dup xcheck				{					bind				} if			} if			pop pop		} forall	} def	/terminate { end } def		currentdict /Adobe_ColorImage_AI6_Vars known not	{		/Adobe_ColorImage_AI6_Vars 14 dict def	} if		Adobe_ColorImage_AI6_Vars begin		/channelcount 0 def		/sourcecount 0 def		/sourcearray 4 array def		/plateindex -1 def		/XIMask 0 def		/XIBinary 0 def		/XIChannelCount 0 def		/XIBitsPerPixel 0 def		/XIImageHeight 0 def		/XIImageWidth 0 def		/XIImageMatrix null def		/XIBuffer null def		/XIDataProc null def end		/WalkRGBString null def	/WalkCMYKString null def		/StuffRGBIntoGrayString null def	/RGBToGrayImageProc null def	/StuffCMYKIntoGrayString null def	/CMYKToGrayImageProc null def	/ColorImageCompositeEmulator null def		/SeparateCMYKImageProc null def		/FourEqual null def	/TestPlateIndex null def		currentdict /_colorimage known not	{		/colorimage where		{			/colorimage get /_colorimage exch def		}		{			/_colorimage null def		} ifelse	} if		/_currenttransfer systemdict /currenttransfer get def		/colorimage null def	/XI null def			/WalkRGBString	{		0 3 index			dup length 1 sub 0 3 3 -1 roll		{			3 getinterval { } forall				5 index exec				3 index		} for				 5 { pop } repeat		} def			/WalkCMYKString	{		0 3 index			dup length 1 sub 0 4 3 -1 roll		{			4 getinterval { } forall						6 index exec						3 index					} for				5 { pop } repeat			} def			/StuffRGBIntoGrayString	{		.11 mul exch				.59 mul add exch				.3 mul add				cvi 3 copy put				pop 1 add	} def			/RGBToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin 			sourcearray 0 get exec			dup length 3 idiv string			dup 3 1 roll 						/StuffRGBIntoGrayString load exch			WalkRGBString	 end	} def			/StuffCMYKIntoGrayString	{		exch .11 mul add				exch .59 mul add				exch .3 mul add				dup 255 gt { pop 255 } if				255 exch sub cvi 3 copy put				pop 1 add	} def			/CMYKToGrayImageProc	{			Adobe_ColorImage_AI6_Vars begin			sourcearray 0 get exec			dup length 4 idiv string			dup 3 1 roll 						/StuffCMYKIntoGrayString load exch			WalkCMYKString	 end	} def			/ColorImageCompositeEmulator	{		pop true eq		{			Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat		}		{			Adobe_ColorImage_AI6_Vars /channelcount get 1 ne			{				Adobe_ColorImage_AI6_Vars begin					sourcearray 0 3 -1 roll put									channelcount 3 eq 					{ 						/RGBToGrayImageProc 					}					{ 						/CMYKToGrayImageProc					} ifelse					load			 end			} if			image		} ifelse	} def			/SeparateCMYKImageProc	{			Adobe_ColorImage_AI6_Vars begin				sourcecount 0 ne			{				sourcearray plateindex get exec			}			{							sourcearray 0 get exec								dup length 4 idiv string								0 2 index								plateindex 4 2 index length 1 sub				{					get 255 exch sub										3 copy put pop 1 add										2 index				} for					pop pop exch pop			} ifelse	 end	} def				/FourEqual	{		4 index ne		{			pop pop pop false		}		{			4 index ne			{				pop pop false			}			{				4 index ne				{					pop false				}				{					4 index eq				} ifelse			} ifelse		} ifelse	} def			/TestPlateIndex	{		Adobe_ColorImage_AI6_Vars begin			/plateindex -1 def				/setcmykcolor where			{				pop				gsave				1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub				0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub				grestore					1 0 0 0 FourEqual 				{ 					/plateindex 0 def				}				{					0 1 0 0 FourEqual					{ 						/plateindex 1 def					}					{						0 0 1 0 FourEqual						{							/plateindex 2 def						}						{							0 0 0 1 FourEqual							{ 								/plateindex 3 def							}							{								0 0 0 0 FourEqual								{									/plateindex 5 def								} if							} ifelse						} ifelse					} ifelse				} ifelse				pop pop pop pop			} if			plateindex	 end	} def			/colorimage	{		Adobe_ColorImage_AI6_Vars begin			/channelcount 1 index def			/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def				4 sourcecount add index dup 			8 eq exch 1 eq or not	 end				{			/_colorimage load null ne			{				_colorimage			}			{				Adobe_ColorImage_AI6_Vars /sourcecount get				7 add { pop } repeat			} ifelse		}		{			dup 3 eq			TestPlateIndex			dup -1 eq exch 5 eq or or			{				/_colorimage load null eq				{					ColorImageCompositeEmulator				}				{					dup 1 eq					{						pop pop image					}					{						Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							gsave														0 _currenttransfer exec							1 _currenttransfer exec							eq							{ 0 _currenttransfer exec 0.5 lt }							{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse														{ { pop 0 } } { { pop 1 } } ifelse							systemdict /settransfer get exec						} if												_colorimage												Adobe_ColorImage_AI6_Vars /plateindex get 5 eq						{							grestore						} if					} ifelse				} ifelse			}			{				dup 1 eq				{					pop pop					image				}				{					pop pop						Adobe_ColorImage_AI6_Vars begin						sourcecount -1 0						{										exch sourcearray 3 1 roll put						} for							/SeparateCMYKImageProc load				 end						systemdict /image get exec				} ifelse			} ifelse		} ifelse	} def		/XI	{		Adobe_ColorImage_AI6_Vars begin			gsave			/XIMask exch 0 ne def			/XIBinary exch 0 ne def			pop			pop			/XIChannelCount exch def			/XIBitsPerPixel exch def			/XIImageHeight exch def			/XIImageWidth exch def			pop pop pop pop			/XIImageMatrix exch def						XIBitsPerPixel 1 eq			{				XIImageWidth 8 div ceiling cvi			}			{				XIImageWidth XIChannelCount mul			} ifelse			/XIBuffer exch string def						XIBinary			{				/XIDataProc { currentfile XIBuffer readstring pop } def				currentfile 128 string readline pop pop			}			{				/XIDataProc { currentfile XIBuffer readhexstring pop } def			} ifelse						0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale						XIMask			{				XIImageWidth XIImageHeight				false				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								/_lp /null ddef				_fc				/_lp /imagemask ddef								imagemask			}			{				XIImageWidth XIImageHeight				XIBitsPerPixel				[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]				/XIDataProc load								XIChannelCount 1 eq				{										gsave					0 setgray										image										grestore				}				{					false					XIChannelCount					colorimage				} ifelse			} ifelse			grestore	 end	} def	end%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Bricks)(Bricks) 2.565 5.19 74.565 77.19 [(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR1.6 73.6 m75.6 73.6 lS1.6 66.399 m75.6 66.399 LS1.6 59.199 m75.6 59.199 LS1.6 51.998 m75.6 51.998 LS1.6 44.798 m75.6 44.798 LS1.6 37.597 m75.6 37.597 LS1.6 30.397 m75.6 30.397 LS1.6 23.196 m75.6 23.196 LS1.6 15.996 m75.6 15.996 LS1.6 8.796 m75.6 8.796 LS70.975 73.6 m70.975 66.412 lS56.575 73.6 m56.575 66.412 LS42.175 73.6 m42.175 66.412 LS27.775 73.6 m27.775 66.412 LS13.375 73.6 m13.375 66.412 LS70.975 59.162 m70.975 51.975 lS56.575 59.162 m56.575 51.975 LS42.175 59.162 m42.175 51.975 LS27.775 59.162 m27.775 51.975 LS13.375 59.162 m13.375 51.975 LS70.975 44.787 m70.975 37.6 lS56.575 44.787 m56.575 37.6 LS42.175 44.787 m42.175 37.6 LS27.775 44.787 m27.775 37.6 LS13.375 44.787 m13.375 37.6 LS70.975 30.412 m70.975 23.225 lS56.575 30.412 m56.575 23.225 LS42.175 30.412 m42.175 23.225 LS27.775 30.412 m27.775 23.225 LS13.375 30.412 m13.375 23.225 LS70.975 15.975 m70.975 8.787 lS56.575 15.975 m56.575 8.787 LS42.175 15.975 m42.175 8.787 LS27.775 15.975 m27.775 8.787 LS13.375 15.975 m13.375 8.787 LS63.762 8.787 m63.762 1.6 LS49.362 8.787 m49.362 1.6 LS34.962 8.787 m34.962 1.6 LS20.562 8.787 m20.562 1.6 LS6.162 8.787 m6.162 1.6 lS63.762 23.225 m63.762 16.037 LS49.362 23.225 m49.362 16.037 LS34.962 23.225 m34.962 16.037 LS20.562 23.225 m20.562 16.037 LS6.162 23.225 m6.162 16.037 lS63.762 37.6 m63.762 30.412 LS49.362 37.6 m49.362 30.412 LS20.562 37.6 m20.562 30.412 LS6.162 37.6 m6.162 30.412 lS63.762 51.975 m63.762 44.787 LS49.362 51.975 m49.362 44.787 LS34.962 51.975 m34.962 44.787 LS20.562 51.975 m20.562 44.787 LS6.162 51.975 m6.162 44.787 lS63.762 66.412 m63.762 59.225 LS49.362 66.412 m49.362 59.225 LS34.962 66.412 m34.962 59.225 LS20.562 66.412 m20.562 59.225 LS6.162 66.412 m6.162 59.225 lS63.762 80.849 m63.762 73.662 LS49.362 80.849 m49.362 73.662 LS34.962 80.849 m34.962 73.662 LS20.562 80.849 m20.562 73.662 LS6.162 80.849 m6.162 73.662 lS34.962 37.6 m34.962 30.412 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Cross Texture)(Cross Texture) 1 1 58.6 58.6 [(0 O 0 R 1 1 0.2 0 k 1 1 0.2 0 K) @_ &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR53.5 55 m56.5 55 lS39.1 55 m42.1 55 lS24.7 55 m27.7 55 lS10.3 55 m13.3 55 lS46.3 47.8 m49.3 47.8 lS31.9 47.8 m34.9 47.8 lS17.5 47.8 m20.5 47.8 lS3.1 47.8 m6.1 47.8 lS53.5 40.6 m56.5 40.6 lS39.1 40.6 m42.1 40.6 lS24.7 40.6 m27.7 40.6 lS10.3 40.6 m13.3 40.6 lS46.3 33.4 m49.3 33.4 lS31.9 33.4 m34.9 33.4 lS17.5 33.4 m20.5 33.4 lS3.1 33.4 m6.1 33.4 lS53.5 26.2 m56.5 26.2 lS39.1 26.2 m42.1 26.2 lS24.7 26.2 m27.7 26.2 lS10.3 26.2 m13.3 26.2 lS46.3 19 m49.3 19 lS31.9 19 m34.9 19 lS17.5 19 m20.5 19 lS3.1 19 m6.1 19 lS53.5 11.8 m56.5 11.8 lS39.1 11.8 m42.1 11.8 lS24.7 11.8 m27.7 11.8 lS10.3 11.8 m13.3 11.8 lS46.3 4.6 m49.3 4.6 lS31.9 4.6 m34.9 4.6 lS17.5 4.6 m20.5 4.6 lS3.1 4.6 m6.1 4.6 lS55 56.5 m55 53.5 lS40.6 56.5 m40.6 53.5 lS26.2 56.5 m26.2 53.5 lS11.8 56.5 m11.8 53.5 lS47.8 49.3 m47.8 46.3 lS33.4 49.3 m33.4 46.3 lS19 49.3 m19 46.3 lS4.6 49.3 m4.6 46.3 lS55 42.1 m55 39.1 lS40.6 42.1 m40.6 39.1 lS26.2 42.1 m26.2 39.1 lS11.8 42.1 m11.8 39.1 lS47.8 34.9 m47.8 31.9 lS33.4 34.9 m33.4 31.9 lS19 34.9 m19 31.9 lS4.6 34.9 m4.6 31.9 lS55 27.7 m55 24.7 lS40.6 27.7 m40.6 24.7 lS26.2 27.7 m26.2 24.7 lS11.8 27.7 m11.8 24.7 lS47.8 20.5 m47.8 17.5 lS33.4 20.5 m33.4 17.5 lS19 20.5 m19 17.5 lS4.6 20.5 m4.6 17.5 lS55 13.3 m55 10.3 lS40.6 13.3 m40.6 10.3 lS26.2 13.3 m26.2 10.3 lS11.8 13.3 m11.8 10.3 lS47.8 6.1 m47.8 3.1 lS33.4 6.1 m33.4 3.1 lS19 6.1 m19 3.1 lS4.6 6.1 m4.6 3.1 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master diagonal)(Master diagonal) 798.9318 33.4829 1412.9318 827.4829 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.9318 1208.4829 m1.9318 4.4829 lS1214.4318 1208.4829 m10.4318 4.4829 lS1222.9318 1208.4829 m18.9318 4.4829 lS1231.4318 1208.4829 m27.4318 4.4829 lS1239.9318 1208.4829 m35.9318 4.4829 lS1248.4318 1208.4829 m44.4318 4.4829 lS1256.9318 1208.4829 m52.9318 4.4829 lS1265.4318 1208.4829 m61.4318 4.4829 lS1273.9318 1208.4829 m69.9318 4.4829 lS1282.4318 1208.4829 m78.4318 4.4829 lS1290.9318 1208.4829 m86.9318 4.4829 lS1299.4318 1208.4829 m95.4318 4.4829 lS1307.9318 1208.4829 m103.9318 4.4829 lS1316.4318 1208.4829 m112.4318 4.4829 lS1324.9318 1208.4829 m120.9318 4.4829 lS1333.4318 1208.4829 m129.4318 4.4829 lS1341.9318 1208.4829 m137.9318 4.4829 lS1350.4318 1208.4829 m146.4318 4.4829 lS1358.9318 1208.4829 m154.9318 4.4829 lS1367.4318 1208.4829 m163.4318 4.4829 lS1375.9318 1208.4829 m171.9318 4.4829 lS1384.4318 1208.4829 m180.4318 4.4829 lS1392.9318 1208.4829 m188.9318 4.4829 lS1401.4318 1208.4829 m197.4318 4.4829 lS1409.9318 1208.4829 m205.9318 4.4829 lS1418.4318 1208.4829 m214.4318 4.4829 lS1426.9318 1208.4829 m222.9318 4.4829 lS1435.4318 1208.4829 m231.4318 4.4829 lS1443.9318 1208.4829 m239.9318 4.4829 lS1452.4318 1208.4829 m248.4318 4.4829 lS1460.9318 1208.4829 m256.9318 4.4829 lS1469.4318 1208.4829 m265.4318 4.4829 lS1477.9318 1208.4829 m273.9318 4.4829 lS1486.4318 1208.4829 m282.4318 4.4829 lS1494.9318 1208.4829 m290.9318 4.4829 lS1503.4318 1208.4829 m299.4318 4.4829 lS1511.9318 1208.4829 m307.9318 4.4829 lS1520.4318 1208.4829 m316.4318 4.4829 lS1528.9318 1208.4829 m324.9318 4.4829 lS1537.4318 1208.4829 m333.4318 4.4829 lS1545.9318 1208.4829 m341.9318 4.4829 lS1554.4318 1208.4829 m350.4318 4.4829 lS1562.9318 1208.4829 m358.9318 4.4829 lS1571.4318 1208.4829 m367.4318 4.4829 lS1579.9318 1208.4829 m375.9318 4.4829 lS1588.4318 1208.4829 m384.4318 4.4829 lS1596.9318 1208.4829 m392.9318 4.4829 lS1605.4318 1208.4829 m401.4318 4.4829 lS1613.9318 1208.4829 m409.9318 4.4829 lS1622.4318 1208.4829 m418.4318 4.4829 lS1630.9318 1208.4829 m426.9318 4.4829 lS1639.4318 1208.4829 m435.4318 4.4829 lS1647.9318 1208.4829 m443.9318 4.4829 lS1656.4318 1208.4829 m452.4318 4.4829 lS1664.9318 1208.4829 m460.9318 4.4829 lS1673.4318 1208.4829 m469.4318 4.4829 lS1681.9318 1208.4829 m477.9318 4.4829 lS1690.4318 1208.4829 m486.4318 4.4829 lS1698.9318 1208.4829 m494.9318 4.4829 lS1707.4318 1208.4829 m503.4318 4.4829 lS1715.9318 1208.4829 m511.9318 4.4829 lS1724.4318 1208.4829 m520.4318 4.4829 lS1732.9318 1208.4829 m528.9318 4.4829 lS1741.4318 1208.4829 m537.4318 4.4829 lS1749.9318 1208.4829 m545.9318 4.4829 lS1758.4318 1208.4829 m554.4318 4.4829 lS1766.9318 1208.4829 m562.9318 4.4829 lS1775.4318 1208.4829 m571.4318 4.4829 lS1783.9318 1208.4829 m579.9318 4.4829 lS1792.4318 1208.4829 m588.4318 4.4829 lS1800.9318 1208.4829 m596.9318 4.4829 lS1809.4318 1208.4829 m605.4318 4.4829 lS1817.9318 1208.4829 m613.9318 4.4829 lS1826.4318 1208.4829 m622.4318 4.4829 lS1834.9318 1208.4829 m630.9318 4.4829 lS1843.4318 1208.4829 m639.4318 4.4829 lS1851.9318 1208.4829 m647.9318 4.4829 lS1860.4318 1208.4829 m656.4318 4.4829 lS1868.9318 1208.4829 m664.9318 4.4829 lS1877.4318 1208.4829 m673.4318 4.4829 lS1885.9318 1208.4829 m681.9318 4.4829 lS1894.4318 1208.4829 m690.4318 4.4829 lS1902.9318 1208.4829 m698.9318 4.4829 lS1911.4318 1208.4829 m707.4318 4.4829 lS1919.9318 1208.4829 m715.9318 4.4829 lS1928.4318 1208.4829 m724.4318 4.4829 lS1936.9318 1208.4829 m732.9318 4.4829 lS1945.4318 1208.4829 m741.4318 4.4829 lS1953.9318 1208.4829 m749.9318 4.4829 lS1962.4318 1208.4829 m758.4318 4.4829 lS1970.9318 1208.4829 m766.9318 4.4829 lS1979.4318 1208.4829 m775.4318 4.4829 lS1987.9318 1208.4829 m783.9318 4.4829 lS1996.4318 1208.4829 m792.4318 4.4829 lS2004.9318 1208.4829 m800.9318 4.4829 lS2013.4318 1208.4829 m809.4318 4.4829 lS2021.9318 1208.4829 m817.9318 4.4829 lS2030.4318 1208.4829 m826.4318 4.4829 lS2038.9318 1208.4829 m834.9318 4.4829 lS2047.4318 1208.4829 m843.4318 4.4829 lS2055.9318 1208.4829 m851.9318 4.4829 lS2064.4318 1208.4829 m860.4318 4.4829 lS2072.9318 1208.4829 m868.9318 4.4829 lS2081.4318 1208.4829 m877.4318 4.4829 lS2089.9318 1208.4829 m885.9318 4.4829 lS2098.4318 1208.4829 m894.4318 4.4829 lS2106.9318 1208.4829 m902.9318 4.4829 lS2115.4318 1208.4829 m911.4318 4.4829 lS2123.9318 1208.4829 m919.9318 4.4829 lS2132.4318 1208.4829 m928.4318 4.4829 lS2140.9318 1208.4829 m936.9318 4.4829 lS2149.4318 1208.4829 m945.4318 4.4829 lS2157.9318 1208.4829 m953.9318 4.4829 lS2166.4318 1208.4829 m962.4318 4.4829 lS2174.9318 1208.4829 m970.9318 4.4829 lS2183.4318 1208.4829 m979.4318 4.4829 lS2191.9318 1208.4829 m987.9318 4.4829 lS2200.4318 1208.4829 m996.4318 4.4829 lS2208.9318 1208.4829 m1004.9318 4.4829 lS2217.4318 1208.4829 m1013.4318 4.4829 lS2225.9318 1208.4829 m1021.9318 4.4829 lS2234.4318 1208.4829 m1030.4318 4.4829 lS2242.9318 1208.4829 m1038.9318 4.4829 lS2251.4318 1208.4829 m1047.4318 4.4829 lS2259.9318 1208.4829 m1055.9318 4.4829 lS2268.4318 1208.4829 m1064.4318 4.4829 lS2276.9318 1208.4829 m1072.9318 4.4829 lS2285.4318 1208.4829 m1081.4318 4.4829 lS2293.9318 1208.4829 m1089.9318 4.4829 lS2302.4318 1208.4829 m1098.4318 4.4829 lS2310.9318 1208.4829 m1106.9318 4.4829 lS2319.4318 1208.4829 m1115.4318 4.4829 lS2327.9318 1208.4829 m1123.9318 4.4829 lS2336.4318 1208.4829 m1132.4318 4.4829 lS2344.9318 1208.4829 m1140.9318 4.4829 lS2353.4318 1208.4829 m1149.4318 4.4829 lS2361.9318 1208.4829 m1157.9318 4.4829 lS1157.8485 4.4829 mS2361.8485 1208.4829 mS2370.3485 1208.4829 m1166.3485 4.4829 lS2378.8485 1208.4829 m1174.8485 4.4829 lS2387.3485 1208.4829 m1183.3485 4.4829 lS2395.8485 1208.4829 m1191.8485 4.4829 lS2404.3485 1208.4829 m1200.3485 4.4829 lS2412.8485 1208.4829 m1208.8485 4.4829 lS2421.3485 1208.4829 m1217.3485 4.4829 lS2429.8485 1208.4829 m1225.8485 4.4829 lS2438.3485 1208.4829 m1234.3485 4.4829 lS2446.8485 1208.4829 m1242.8485 4.4829 lS2455.3485 1208.4829 m1251.3485 4.4829 lS2463.8485 1208.4829 m1259.8485 4.4829 lS2472.3485 1208.4829 m1268.3485 4.4829 lS1268.2652 4.4829 mS2472.2652 1208.4829 mS2480.7652 1208.4829 m1276.7652 4.4829 lS2489.2652 1208.4829 m1285.2652 4.4829 lS2497.7652 1208.4829 m1293.7652 4.4829 lS2506.2652 1208.4829 m1302.2652 4.4829 lS2514.7652 1208.4829 m1310.7652 4.4829 lS2523.2652 1208.4829 m1319.2652 4.4829 lS2531.7652 1208.4829 m1327.7652 4.4829 lS2540.2652 1208.4829 m1336.2652 4.4829 lS2548.7652 1208.4829 m1344.7652 4.4829 lS2557.2652 1208.4829 m1353.2652 4.4829 lS2565.7652 1208.4829 m1361.7652 4.4829 lS2574.2652 1208.4829 m1370.2652 4.4829 lS2582.7652 1208.4829 m1378.7652 4.4829 lS994.9318 893.4829 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Master Hatch)(Master Hatch) 798.4488 33 1412.4488 827 [(0 O 0 R 1 g 1 G) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer300 Ar0 J 0 j 0.25 w 3.8636 M []0 d%AI3_Note:0 D0 XR1205.4488 1208 m1.4488 4 lS1213.9488 1208 m9.9488 4 lS1222.4488 1208 m18.4488 4 lS1230.9488 1208 m26.9488 4 lS1239.4488 1208 m35.4488 4 lS1247.9488 1208 m43.9488 4 lS1256.4488 1208 m52.4488 4 lS1264.9488 1208 m60.9488 4 lS1273.4488 1208 m69.4488 4 lS1281.9488 1208 m77.9488 4 lS1290.4488 1208 m86.4488 4 lS1298.9488 1208 m94.9488 4 lS1307.4488 1208 m103.4488 4 lS1315.9488 1208 m111.9488 4 lS1324.4488 1208 m120.4488 4 lS1332.9488 1208 m128.9488 4 lS1341.4488 1208 m137.4488 4 lS1349.9488 1208 m145.9488 4 lS1358.4488 1208 m154.4488 4 lS1366.9488 1208 m162.9488 4 lS1375.4488 1208 m171.4488 4 lS1383.9488 1208 m179.9488 4 lS1392.4488 1208 m188.4488 4 lS1400.9488 1208 m196.9488 4 lS1409.4488 1208 m205.4488 4 lS1417.9488 1208 m213.9488 4 lS1426.4488 1208 m222.4488 4 lS1434.9488 1208 m230.9488 4 lS1443.4488 1208 m239.4488 4 lS1451.9488 1208 m247.9488 4 lS1460.4488 1208 m256.4488 4 lS1468.9488 1208 m264.9488 4 lS1477.4488 1208 m273.4488 4 lS1485.9488 1208 m281.9488 4 lS1494.4488 1208 m290.4488 4 lS1502.9488 1208 m298.9488 4 lS1511.4488 1208 m307.4488 4 lS1519.9488 1208 m315.9488 4 lS1528.4488 1208 m324.4488 4 lS1536.9488 1208 m332.9488 4 lS1545.4488 1208 m341.4488 4 lS1553.9488 1208 m349.9488 4 lS1562.4488 1208 m358.4488 4 lS1570.9488 1208 m366.9488 4 lS1579.4488 1208 m375.4488 4 lS1587.9488 1208 m383.9488 4 lS1596.4488 1208 m392.4488 4 lS1604.9488 1208 m400.9488 4 lS1613.4488 1208 m409.4488 4 lS1621.9488 1208 m417.9488 4 lS1630.4488 1208 m426.4488 4 lS1638.9488 1208 m434.9488 4 lS1647.4488 1208 m443.4488 4 lS1655.9488 1208 m451.9488 4 lS1664.4488 1208 m460.4488 4 lS1672.9488 1208 m468.9488 4 lS1681.4488 1208 m477.4488 4 lS1689.9488 1208 m485.9488 4 lS1698.4488 1208 m494.4488 4 lS1706.9488 1208 m502.9488 4 lS1715.4488 1208 m511.4488 4 lS1723.9488 1208 m519.9488 4 lS1732.4488 1208 m528.4488 4 lS1740.9488 1208 m536.9488 4 lS1749.4488 1208 m545.4488 4 lS1757.9488 1208 m553.9488 4 lS1766.4488 1208 m562.4488 4 lS1774.9488 1208 m570.9488 4 lS1783.4488 1208 m579.4488 4 lS1791.9488 1208 m587.9488 4 lS1800.4488 1208 m596.4488 4 lS1808.9488 1208 m604.9488 4 lS1817.4488 1208 m613.4488 4 lS1825.9488 1208 m621.9488 4 lS1834.4488 1208 m630.4488 4 lS1842.9488 1208 m638.9488 4 lS1851.4488 1208 m647.4488 4 lS1859.9488 1208 m655.9488 4 lS1868.4488 1208 m664.4488 4 lS1876.9488 1208 m672.9488 4 lS1885.4488 1208 m681.4488 4 lS1893.9488 1208 m689.9488 4 lS1902.4488 1208 m698.4488 4 lS1910.9488 1208 m706.9488 4 lS1919.4488 1208 m715.4488 4 lS1927.9488 1208 m723.9488 4 lS1936.4488 1208 m732.4488 4 lS1944.9488 1208 m740.9488 4 lS1953.4488 1208 m749.4488 4 lS1961.9488 1208 m757.9488 4 lS1970.4488 1208 m766.4488 4 lS1978.9488 1208 m774.9488 4 lS1987.4488 1208 m783.4488 4 lS1995.9488 1208 m791.9488 4 lS2004.4488 1208 m800.4488 4 lS2012.9488 1208 m808.9488 4 lS2021.4488 1208 m817.4488 4 lS2029.9488 1208 m825.9488 4 lS2038.4488 1208 m834.4488 4 lS2046.9488 1208 m842.9488 4 lS2055.4488 1208 m851.4488 4 lS2063.9488 1208 m859.9488 4 lS2072.4488 1208 m868.4488 4 lS2080.9488 1208 m876.9488 4 lS2089.4488 1208 m885.4488 4 lS2097.9488 1208 m893.9488 4 lS2106.4488 1208 m902.4488 4 lS2114.9488 1208 m910.9488 4 lS2123.4488 1208 m919.4488 4 lS2131.9488 1208 m927.9488 4 lS2140.4488 1208 m936.4488 4 lS2148.9488 1208 m944.9488 4 lS2157.4488 1208 m953.4488 4 lS2165.9488 1208 m961.9488 4 lS2174.4488 1208 m970.4488 4 lS2182.9488 1208 m978.9488 4 lS2191.4488 1208 m987.4488 4 lS2199.9488 1208 m995.9488 4 lS2208.4488 1208 m1004.4488 4 lS2216.9488 1208 m1012.9488 4 lS2225.4488 1208 m1021.4488 4 lS2233.9488 1208 m1029.9488 4 lS2242.4488 1208 m1038.4488 4 lS2250.9488 1208 m1046.9488 4 lS2259.4488 1208 m1055.4488 4 lS2267.9488 1208 m1063.9488 4 lS2276.4488 1208 m1072.4488 4 lS2284.9488 1208 m1080.9488 4 lS2293.4488 1208 m1089.4488 4 lS2301.9488 1208 m1097.9488 4 lS2310.4488 1208 m1106.4488 4 lS2318.9488 1208 m1114.9488 4 lS2327.4488 1208 m1123.4488 4 lS2335.9488 1208 m1131.9488 4 lS2344.4488 1208 m1140.4488 4 lS2352.9488 1208 m1148.9488 4 lS2361.4488 1208 m1157.4488 4 lS1157.3655 4 mS2361.3655 1208 mS2369.8655 1208 m1165.8655 4 lS2378.3655 1208 m1174.3655 4 lS2386.8655 1208 m1182.8655 4 lS2395.3655 1208 m1191.3655 4 lS2403.8655 1208 m1199.8655 4 lS2412.3655 1208 m1208.3655 4 lS2420.8655 1208 m1216.8655 4 lS2429.3655 1208 m1225.3655 4 lS2437.8655 1208 m1233.8655 4 lS2446.3655 1208 m1242.3655 4 lS2454.8655 1208 m1250.8655 4 lS2463.3655 1208 m1259.3655 4 lS2471.8655 1208 m1267.8655 4 lS1267.7822 4 mS2471.7822 1208 mS2480.2822 1208 m1276.2822 4 lS2488.7822 1208 m1284.7822 4 lS2497.2822 1208 m1293.2822 4 lS2505.7822 1208 m1301.7822 4 lS2514.2822 1208 m1310.2822 4 lS2522.7822 1208 m1318.7822 4 lS2531.2822 1208 m1327.2822 4 lS2539.7822 1208 m1335.7822 4 lS2548.2822 1208 m1344.2822 4 lS2556.7822 1208 m1352.7822 4 lS2565.2822 1208 m1361.2822 4 lS2573.7822 1208 m1369.7822 4 lS2582.2822 1208 m1378.2822 4 lS994.4488 893 mS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (New Pattern 10)(New Pattern 10) 7 19.8232 484 264.3232 [(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3 w 4 M []0 d%AI3_Note:0 D0 XR484 19.8232 m484 264.3232 L7 264.3232 L7 19.8232 L484 19.8232 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D0 XR248.2708 265.0524 mS23.6563 262.1669 mS31.5834 263.7398 m6.5834 238.7398 lS38.0105 263.8127 m7.2605 233.0627 lS44.4376 263.8856 m7.1876 226.6356 lS51.1147 264.2085 m6.8647 219.9585 lS57.5418 264.2814 m7.2918 214.0314 lS63.7189 264.1043 m6.4689 206.8543 lS69.396 263.4272 m7.646 201.6772 lS76.3231 264.0001 m7.0731 194.7501 lS83.5001 264.823 m6.2502 187.573 lS89.1772 264.1459 m8.4273 183.3959 lS95.1877 263.8022 m6.6044 175.2188 lS101.1981 263.4584 m6.5314 168.7917 lS108.8752 264.7813 m7.7085 163.6147 lS114.3856 263.9375 m7.1356 156.6876 lS120.5627 263.7604 m7.8127 151.0105 lS126.7398 263.5834 m8.2398 145.0834 lS133.2502 263.7396 m7.1669 137.6563 lS140.9273 265.0625 m8.094 132.2292 lS146.7711 264.5521 m7.7711 125.5521 lS153.4482 264.875 m7.1982 118.625 lS152.7604 264.5628 mS158.2708 263.719 m6.9375 112.3857 lS166.6146 265.7086 m7.6146 106.7086 lS170.7917 263.5315 m7.0417 99.7815 lS176.4688 262.8544 m6.7188 93.1044 lS183.1459 263.1773 m6.1459 86.1773 lS191.6563 265.3335 m6.823 80.5002 lS196.5001 263.8231 m6.5001 73.8231 lS204.3438 265.3127 m6.4272 67.396 lS209.3542 263.9689 m7.3543 61.9689 lS216.698 264.9585 m7.2814 55.5418 lS221.3751 263.2814 m7.2084 49.1147 lS226.0522 261.6043 m7.8855 43.4376 lS235.2293 264.4272 m7.8126 37.0106 lS240.7397 263.5835 m8.323 31.1668 lS247.7501 264.2397 m7.9168 24.4064 lS254.0939 264.2293 m9.8439 19.9793 lS260.771 264.5522 m17.8543 21.6355 lS266.7814 264.2084 m23.1981 20.6251 lS272.9585 264.0313 m28.6252 19.698 lS279.1356 263.8542 m35.0523 19.7709 lS285.9794 264.3438 m41.2294 19.5938 lS292.4898 264.5 m47.4065 19.4167 lS299.0002 264.6563 m54.0836 19.7396 lS304.6773 263.9792 m59.5107 18.8125 lS310.8544 263.8021 m65.9378 18.8854 lS317.3648 263.9583 m73.3648 19.9583 lS323.3753 263.6146 m80.0419 20.2812 lS476.6458 150.6774 mS326.2083 266.4482 mS329.8854 263.7711 m85.7188 19.6044 lS336.0625 263.594 m92.1459 19.6773 lS342.4063 263.5836 m99.0729 20.2502 lS348.5834 263.4065 m105.5 20.3231 lS355.7605 264.2294 m111.5938 20.0627 lS361.9376 264.0523 m117.6042 19.719 lS367.7813 263.5419 m124.2813 20.0419 lS374.1251 263.5314 m129.4584 18.8648 lS380.6355 263.6877 m136.8855 19.9377 lS387.8126 264.5106 m143.3126 20.0106 lS393.9897 264.3335 m147.9897 18.3335 lS399.6668 263.6564 m156.4168 20.4064 lS407.0105 264.646 m161.8439 19.4793 lS413.521 264.8022 m168.021 19.3022 lS419.3647 264.2918 m173.9481 18.8751 lS425.7085 264.2814 m182.0419 20.6147 lS432.2189 264.4376 m187.8023 20.0209 lS438.396 264.2605 m194.4794 20.3438 lS444.5731 264.0834 m200.4064 19.9167 lS449.9169 263.073 m206.3335 19.4897 lS456.7606 263.5625 m212.5106 19.3126 lS562.1877 362.6355 m219.4377 19.8855 lS568.7815 362.8751 m227.3648 21.4584 lS475.6252 263.3646 m233.0419 20.7813 lS482.3023 263.6875 m238.969 20.3542 lS483.4794 258.5104 m245.1461 20.1771 lS235.3232 4 mS481.5732 250.25 mS483.8021 252.8544 m252.1354 21.1878 lS484.5625 247.2607 m258.0625 20.7607 lS483.4896 239.8336 m263.4896 19.8336 lS483.1667 233.1565 m270.1667 20.1565 lS484.1771 227.8127 m276.8438 20.4794 lS483.6875 220.969 m283.2709 20.5523 lS483.8646 214.7919 m288.948 19.8752 lS483.0417 207.6148 m295.3751 19.9481 lS483.2188 201.4377 m302.3022 20.521 lS483.7292 195.5939 m307.4793 19.3439 lS484.073 189.5835 m314.6564 20.1668 lS483.4168 182.5731 m321.3334 20.4897 lS482.7605 175.5626 m327.7605 20.5626 lS483.4376 169.8855 m333.1876 19.6356 lS484.448 164.5418 m339.6147 19.7085 lS483.4585 157.198 m347.2918 21.0314 lS483.6356 151.0209 m352.7189 20.1043 lS484.646 145.6772 m358.396 19.4272 lS483.6564 138.3334 m365.8231 20.5001 lS484.1669 132.4897 m371.7502 20.073 lS482.8439 124.8126 m377.9273 19.8959 lS483.3544 118.9688 m383.8544 19.4688 lS483.1981 112.4584 m390.7815 20.0417 lS483.8752 106.7813 m397.9586 20.8646 lS483.0523 99.6042 m403.1357 19.6875 lS483.0627 93.2604 m410.5628 20.7604 lS483.4065 87.25 m416.7398 20.5833 lS483.75 81.2398 m423.1667 20.6565 lS483.2604 74.3961 m429.0938 20.2294 lS482.6042 67.3857 m433.7709 18.5523 lS482.6146 61.0419 m440.9479 19.3752 lS483.7917 55.8648 m446.875 18.9481 lS485.4688 51.1877 m453.3021 19.0211 lS482.8126 42.1773 m461.2292 20.594 lS482.6563 35.6669 m467.1563 20.1669 lS483.0001 29.6564 m473.5834 20.2398 lS483.3438 23.646 m479.5105 19.8127 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Parquet Floor)(Parquet Floor) 3.85 3.85 75.85 75.85 [(0 O 0 R 0.26 0.497 0.75 0 k 0.26 0.497 0.75 0 K) @_ &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR37.6 6.1 m37.6 10.598 L19.6 10.598 L19.6 6.1 L37.6 6.1 Ls73.6 6.1 m73.6 10.598 L55.6 10.598 L55.6 6.1 L73.6 6.1 Ls19.6 24.1 m19.6 28.598 L1.6 28.598 L1.6 24.1 L19.6 24.1 Ls55.6 24.1 m55.6 28.598 L37.6 28.598 L37.6 24.1 L55.6 24.1 Ls82.6 24.1 m82.6 28.598 L73.6 28.598 L73.6 24.1 L82.6 24.1 Ls37.6 42.1 m37.6 46.598 L19.6 46.598 L19.6 42.1 L37.6 42.1 Ls73.6 42.1 m73.6 46.598 L55.6 46.598 L55.6 42.1 L73.6 42.1 Ls19.6 60.1 m19.6 64.598 L1.6 64.598 L1.6 60.1 L19.6 60.1 Ls55.6 60.1 m55.6 64.598 L37.6 64.598 L37.6 60.1 L55.6 60.1 Ls82.6 60.1 m82.6 64.598 L73.6 64.598 L73.6 60.1 L82.6 60.1 Ls37.6 15.098 m37.6 19.598 L19.6 19.598 L19.6 15.098 L37.6 15.098 Ls73.6 15.098 m73.6 19.598 L55.6 19.598 L55.6 15.098 L73.6 15.098 Ls19.6 33.098 m19.6 37.598 L1.6 37.598 L1.6 33.098 L19.6 33.098 Ls55.6 33.098 m55.6 37.598 L37.6 37.598 L37.6 33.098 L55.6 33.098 Ls82.6 33.098 m82.6 37.598 L73.6 37.598 L73.6 33.098 L82.6 33.098 Ls37.6 51.098 m37.6 55.598 L19.6 55.598 L19.6 51.098 L37.6 51.098 Ls73.6 51.098 m73.6 55.598 L55.6 55.598 L55.6 51.098 L73.6 51.098 Ls19.6 69.098 m19.6 73.598 L1.6 73.598 L1.6 69.098 L19.6 69.098 Ls55.6 69.098 m55.6 73.598 L37.6 73.598 L37.6 69.098 L55.6 69.098 Ls82.6 69.098 m82.6 73.598 L73.6 73.598 L73.6 69.098 L82.6 69.098 Ls15.1 19.598 m10.6 19.598 L10.6 1.6 L15.1 1.6 L15.1 19.598 Ls51.1 19.598 m46.6 19.598 L46.6 1.6 L51.1 1.6 L51.1 19.598 Ls33.1 37.598 m28.6 37.598 L28.6 19.6 L33.1 19.6 L33.1 37.598 Ls69.1 37.598 m64.6 37.598 L64.6 19.6 L69.1 19.6 L69.1 37.598 Ls15.1 55.598 m10.6 55.598 L10.6 37.6 L15.1 37.6 L15.1 55.598 Ls51.1 55.598 m46.6 55.598 L46.6 37.6 L51.1 37.6 L51.1 55.598 Ls33.1 73.598 m28.6 73.598 L28.6 55.6 L33.1 55.6 L33.1 73.598 Ls69.1 73.598 m64.6 73.598 L64.6 55.6 L69.1 55.6 L69.1 73.598 Ls15.1 82.598 m10.6 82.598 L10.6 73.6 L15.1 73.6 L15.1 82.598 Ls51.1 82.598 m46.6 82.598 L46.6 73.6 L51.1 73.6 L51.1 82.598 Ls19.6 19.598 m15.1 19.598 L15.1 1.6 L19.6 1.6 L19.6 19.598 Ls55.6 19.598 m51.1 19.598 L51.1 1.6 L55.6 1.6 L55.6 19.598 Ls37.6 37.598 m33.1 37.598 L33.1 19.6 L37.6 19.6 L37.6 37.598 Ls73.6 37.598 m69.1 37.598 L69.1 19.6 L73.6 19.6 L73.6 37.598 Ls19.6 55.598 m15.1 55.598 L15.1 37.6 L19.6 37.6 L19.6 55.598 Ls55.6 55.598 m51.1 55.598 L51.1 37.6 L55.6 37.6 L55.6 55.598 Ls37.6 73.598 m33.1 73.598 L33.1 55.6 L37.6 55.6 L37.6 73.598 Ls73.6 73.598 m69.1 73.598 L69.1 55.6 L73.6 55.6 L73.6 73.598 Ls19.6 82.598 m15.1 82.598 L15.1 73.6 L19.6 73.6 L19.6 82.598 Ls55.6 82.598 m51.1 82.598 L51.1 73.6 L55.6 73.6 L55.6 82.598 Ls6.1 19.598 m1.6 19.598 L1.6 1.6 L6.1 1.6 L6.1 19.598 Ls42.1 19.598 m37.6 19.598 L37.6 1.6 L42.1 1.6 L42.1 19.598 Ls78.1 19.598 m73.6 19.598 L73.6 1.6 L78.1 1.6 L78.1 19.598 Ls24.1 37.598 m19.6 37.598 L19.6 19.6 L24.1 19.6 L24.1 37.598 Ls60.1 37.598 m55.6 37.598 L55.6 19.6 L60.1 19.6 L60.1 37.598 Ls6.1 55.598 m1.6 55.598 L1.6 37.6 L6.1 37.6 L6.1 55.598 Ls42.1 55.598 m37.6 55.598 L37.6 37.6 L42.1 37.6 L42.1 55.598 Ls78.1 55.598 m73.6 55.598 L73.6 37.6 L78.1 37.6 L78.1 55.598 Ls24.1 73.598 m19.6 73.598 L19.6 55.6 L24.1 55.6 L24.1 73.598 Ls60.1 73.598 m55.6 73.598 L55.6 55.6 L60.1 55.6 L60.1 73.598 Ls6.1 82.598 m1.6 82.598 L1.6 73.6 L6.1 73.6 L6.1 82.598 Ls42.1 82.598 m37.6 82.598 L37.6 73.6 L42.1 73.6 L42.1 82.598 Ls78.1 82.598 m73.6 82.598 L73.6 73.6 L78.1 73.6 L78.1 82.598 Ls37.6 1.6 m37.6 6.098 L19.6 6.098 L19.6 1.6 L37.6 1.6 Ls73.6 1.6 m73.6 6.098 L55.6 6.098 L55.6 1.6 L73.6 1.6 Ls19.6 19.6 m19.6 24.098 L1.6 24.098 L1.6 19.6 L19.6 19.6 Ls55.6 19.6 m55.6 24.098 L37.6 24.098 L37.6 19.6 L55.6 19.6 Ls82.6 19.6 m82.6 24.098 L73.6 24.098 L73.6 19.6 L82.6 19.6 Ls37.6 37.6 m37.6 42.098 L19.6 42.098 L19.6 37.6 L37.6 37.6 Ls73.6 37.6 m73.6 42.098 L55.6 42.098 L55.6 37.6 L73.6 37.6 Ls19.6 55.6 m19.6 60.098 L1.6 60.098 L1.6 55.6 L19.6 55.6 Ls55.6 55.6 m55.6 60.098 L37.6 60.098 L37.6 55.6 L55.6 55.6 Ls82.6 55.6 m82.6 60.098 L73.6 60.098 L73.6 55.6 L82.6 55.6 Ls37.6 73.6 m37.6 78.098 L19.6 78.098 L19.6 73.6 L37.6 73.6 Ls73.6 73.6 m73.6 78.098 L55.6 78.098 L55.6 73.6 L73.6 73.6 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Waves-Transparent)(Waves-Transparent) 4 5.89 113.125 31.693 [%AI3_Tile(0 O 0 R 1 0 0.35 0 k 1 0 0.35 0 K) @(%AI6_BeginPatternLayer800 Ar2 J 0 j 1.5 w 4 M []0 d%AI3_Note:0 D0 XR113.125 12.602 m106.95 12.602 102.306 13.907 99.484 14.73 c96.664 15.553 92.018 16.858 85.844 16.858 c79.67 16.858 75.024 15.553 72.203 14.73 c69.382 13.906 64.737 12.602 58.562 12.602 c52.388 12.602 47.743 13.907 44.922 14.73 c42.101 15.553 37.455 16.858 31.281 16.858 c25.107 16.858 20.461 15.553 17.641 14.73 c14.819 13.907 10.174 12.602 4 12.602 cS113.125 8.301 m106.95 8.301 102.306 9.606 99.484 10.429 c96.664 11.252 92.018 12.557 85.844 12.557 c79.67 12.557 75.024 11.252 72.203 10.429 c69.382 9.606 64.737 8.301 58.562 8.301 c52.388 8.301 47.743 9.606 44.922 10.429 c42.101 11.252 37.455 12.557 31.281 12.557 c25.107 12.557 20.461 11.252 17.641 10.429 c14.819 9.606 10.174 8.301 4 8.301 cS113.125 4 m106.95 4 102.306 5.305 99.484 6.128 c96.664 6.951 92.018 8.256 85.844 8.256 c79.67 8.256 75.024 6.951 72.203 6.128 c69.382 5.305 64.737 4 58.562 4 c52.388 4 47.743 5.305 44.922 6.128 c42.101 6.951 37.455 8.256 31.281 8.256 c25.107 8.256 20.461 6.951 17.641 6.128 c14.819 5.305 10.174 4 4 4 cS113.125 29.805 m106.95 29.805 102.306 31.11 99.484 31.933 c96.664 32.756 92.018 34.061 85.844 34.061 c79.67 34.061 75.024 32.756 72.203 31.933 c69.382 31.109 64.737 29.805 58.562 29.805 c52.388 29.805 47.743 31.11 44.922 31.933 c42.101 32.756 37.455 34.061 31.281 34.061 c25.107 34.061 20.461 32.756 17.641 31.933 c14.819 31.11 10.174 29.805 4 29.805 cS113.125 25.504 m106.95 25.504 102.306 26.809 99.484 27.632 c96.664 28.455 92.018 29.76 85.844 29.76 c79.67 29.76 75.024 28.455 72.203 27.632 c69.382 26.809 64.737 25.504 58.562 25.504 c52.388 25.504 47.743 26.809 44.922 27.632 c42.101 28.455 37.455 29.76 31.281 29.76 c25.107 29.76 20.461 28.455 17.641 27.632 c14.819 26.809 10.174 25.504 4 25.504 cS113.125 21.203 m106.95 21.203 102.306 22.508 99.484 23.331 c96.664 24.154 92.018 25.459 85.844 25.459 c79.67 25.459 75.024 24.154 72.203 23.331 c69.382 22.508 64.737 21.203 58.562 21.203 c52.388 21.203 47.743 22.508 44.922 23.331 c42.101 24.154 37.455 25.459 31.281 25.459 c25.107 25.459 20.461 24.154 17.641 23.331 c14.819 22.508 10.174 21.203 4 21.203 cS113.125 16.902 m106.95 16.902 102.306 18.207 99.484 19.03 c96.664 19.853 92.018 21.158 85.844 21.158 c79.67 21.158 75.024 19.853 72.203 19.03 c69.382 18.207 64.737 16.902 58.562 16.902 c52.388 16.902 47.743 18.207 44.922 19.03 c42.101 19.853 37.455 21.158 31.281 21.158 c25.107 21.158 20.461 19.853 17.641 19.03 c14.819 18.207 10.174 16.902 4 16.902 cS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182828384858586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A3A3A4A5A6A6A7A8A9A9AAABACACADAEAFAFB0B1B2B2B3B4B5B5B6B7B8B8B9BABBBBBCBDBEBEBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_Bs0.6 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E5E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7F7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_Bs0 1 0.8 0 1 50 50 %_Bs0.9 0.9 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_Bs1 0 50 70 %_Bs0 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White & Purple Radial)(White & Purple Radial) 1 2 Bd[<8C8C8B8B8A898988888787868685858483838282818180807F7F7E7D7D7C7C7B7B7A7A7978787777767675757474737272717170706F6F6E6D6D6C6C6B6B6A6A6969686767666665656464636262616160605F5F5E5E5D5C5C5B5B5A5A5959585757565655555454535352515150504F4F4E4E4D4C4C4B4B4A4A4949484847464645454444434342414140403F3F3E3E3D3D3C3B3B3A3A3939383837363635353434333332323130302F2F2E2E2D2D2C2B2B2A2A2929282827272625252424232322222120201F1F1E1E1D1D1C1C1B1A1A1919181817171615151414131312121111100F0F0E0E0D0D0C0C0B0A0A090908080707060605040403030202010100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>001 %_Br[0.55 1 0 0 1 50 10 %_Bs0 0 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 4 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 O0.75 g300 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR468 555 m468 610 L435.25 610 L435.25 555 L468 555 Lf0 Ap0.9 g403 445.75 m403 534.5 l435 534.5 l435.25 554.25 l467.75 554.25 l467.75 445.5 lF1 Ap800 Ar474.75 554.75 m474.75 610.2083 L467.9375 610.2083 L467.9375 554.75 L474.75 554.75 Lf435.25 554.75 m435.25 610.25 L265.75 610.25 L265.75 554.75 L435.25 554.75 Lfu0 Ap330.75 334.75 m330.75 527.75 l378.25 527.75 l378.25 418.75 l483.25 418.75 l483.25 334.75 l330.75 334.75 lf0 R0 G0.65 w467.9375 610.2083 m467.9375 445.4583 l402.9375 445.4583 l402.9375 534.4583 l435.4375 534.4583 l435.4375 610.2083 l467.9375 610.2083 ls0 O0.9 g1 w219.25 334.75 m219.25 527.75 l304.5 527.75 l304.5 334.75 l219.25 334.75 lf0 R0 G0.65 w435.25 566 mS446.375 554.875 mS435.375 559.125 mS439.625 554.875 mS435.75 594.25 mS467.75 562.25 mS435.625 586.875 mS435.5 580.25 mS460.875 554.875 mS435.25 573.5 mS453.75 555 mS0 To1 0 0 1 168.25 584.75 0 TpTP-10.7974 0 Td0 Tr0 O0 g1 w/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(time) Tx (\r) TX TO0 To1 0 0 1 369 585 0 TpTP-10.7974 0 Td0 Tr(time) Tx (\r) TX TO0 To1 0 0 1 326.75 540.5 0 TpTP-51.2875 0 Td0 Tr(time-implementation) Tx (\r) TX TO0 To1 0 0 1 440.25 436.25 0 TpTP-29.6927 0 Td0 Tr(sixty-unit-\r) Tx -8.098 -11 Td(implementation) Tx (\r) TX TO0 To1 0 0 1 183 372.25 0 TpTP-26.9934 0 Td0 Tr(format-out) Tx (\r) TX TO0 To1 0 0 1 407 367.75 0 TpTP-13.4967 0 Td0 Tr(dylan) Tx (\r) TX TO1 Ap0 R0 G0.65 w490.25 410.75 m490.25 475.25 L391.25 475.25 L391.25 410.75 L490.25 410.75 Ls419.25 512.75 m419.25 577.25 L213.75 577.25 L213.75 512.75 L419.25 512.75 Ls0 Ap304.75 334.75 m304.75 527.75 l219.25 527.75 l219.25 334.75 lS483.25 334.75 m483.25 418.75 l378.5 418.75 l378.5 527.75 l330.75 527.75 l330.75 334.75 lS1 Ap2 w265.75 602.25 m150.75 602.25 L150.75 493.75 L511.25 493.75 L511.25 602.25 L474.75 602.25 LS265.75 602.25 mS474.75 602.25 mS403.25 482.75 m385.25 482.75 L385.25 400.75 L511.25 400.75 L511.25 482.75 L467.75 482.75 LS403.25 482.75 mS467.75 482.75 mS0 Ap511.25 334.75 m511.25 384.25 l483.25 384.25 lS330.75 384.25 m321.25 384.25 l321.25 334.75 lS304.75 384.25 m313.75 384.25 l313.75 334.75 lS219 384.25 m151 384.25 l151 334.75 lS0.65 w462.625 609.875 mS467.75 604.75 mS455.875 609.875 mS467.75 598 mS448.375 610.125 mS467.75 590.75 mS441 610 mS467.75 583.25 mS435.375 608.125 mS467.75 575.75 mS435.75 601.25 mS467.75 569.25 mS0 To1 0 0 1 435.75 462 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(sixty-unit) Tx (\r) TX TO1 Ap0 R0 G0.65 w474.75 554.75 m474.75 610.25 L265.75 610.25 L265.75 554.75 L474.75 554.75 LsU0 To1 0 0 1 261.25 372.8125 0 TpTP-26.9934 0 Td0 Tr0 O0 g1 w(format-out) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 377.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 227
%%Page: "214" 228
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(214) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(13.9  Pr) 99.65 662.95 T
(otocol design) 143.19 662.95 T
1 11 Q
(W) 99.65 642.62 T
(e can now de\336ne the) 109.64 642.62 T
4 10 Q
(angle) 212.6 642.62 T
1 11 Q
( library as another client of the) 242.6 642.62 T
4 10 Q
(sixty-unit) 393.78 642.62 T
1 11 Q
( library) 453.78 642.62 T
(.) 488.1 642.62 T
-0.14 (The interface of the) 99.65 628.62 P
4 10 Q
-0.31 (angle) 195.54 628.62 P
1 11 Q
-0.14 ( library consists of the classes) 225.54 628.62 P
4 10 Q
-0.31 (<angle>) 369.81 628.62 P
1 11 Q
-0.14 ( and) 411.81 628.62 P
4 10 Q
-0.31 (<directed-) 435.65 628.62 P
(angle>) 99.65 614.62 T
1 11 Q
(, and the) 135.65 614.62 T
4 10 Q
(say) 180.53 614.62 T
1 11 Q
( method. Uh-oh! W) 198.53 614.62 T
(e want that) 291.3 614.62 T
4 10 Q
(say) 348.56 614.62 T
1 11 Q
( method to be another) 366.56 614.62 T
-0.12 (method on the) 99.65 600.62 P
4 10 Q
-0.26 (say) 172.9 600.62 P
1 11 Q
-0.12 ( generic function de\336ned by the) 190.9 600.62 P
4 10 Q
-0.26 (time) 347.45 600.62 P
1 11 Q
-0.12 ( library) 371.45 600.62 P
-0.12 (, so that a client of) 405.65 600.62 P
(the) 99.65 586.62 T
4 10 Q
(time) 117.65 586.62 T
0 11 Q
(and) 144.4 586.62 T
4 10 Q
(angle) 163.65 586.62 T
1 11 Q
( libraries sees a single generic function,) 193.65 586.62 T
4 10 Q
(say) 385.95 586.62 T
1 11 Q
(, that applies to) 402.73 586.62 T
(either times or angles. This situation illustrates the value of putting a lot of) 99.65 572.62 T
(thought into designing our pr) 99.65 558.62 T
(otocols befor) 244.41 558.62 T
(e we get too deep into an implementa-) 306.68 558.62 T
(tion. The) 99.65 544.62 T
4 10 Q
(say) 145.51 544.62 T
1 11 Q
( generic function is a separate pr) 163.51 544.62 T
(otocol that could apply to many) 321.14 544.62 T
(classes in our system. T) 99.65 530.62 T
(o permit separate libraries to add methods to a Dylan) 212.57 530.62 T
(generic function, the module de\336ning the pr) 99.65 516.62 T
(otocol \050that is, the module de\336ning) 314.74 516.62 T
(the generic function\051 needs to be de\336ned \336rst, in a separate, common library) 99.65 502.62 T
(.) 469.03 502.62 T
(Other libraries then use this component library to de\336ne their particular imple-) 99.65 488.62 T
(mentation of the pr) 99.65 474.62 T
(otocol.) 193.25 474.62 T
(T) 126.65 460.62 T
(o cr) 132.38 460.62 T
(eate the) 150.17 460.62 T
4 10 Q
(say) 190.55 460.62 T
1 11 Q
( pr) 208.55 460.62 T
(otocol, we de\336ne a library and implementation \336le as) 222.05 460.62 T
(shown in Sections 13.9.1 thr) 99.65 446.62 T
(ough 13.9.4.) 234.32 446.62 T
3 13 Q
(13.9.1  The) 99.65 415.29 T
4 12 Q
(say-library) 157.13 415.29 T
3 13 Q
( \336le) 236.33 415.29 T
8 10 Q
(The) 202.09 376.29 T
4 9 Q
(say-library) 222.1 376.29 T
8 10 Q
( \336le:) 281.5 376.29 T
4 9 Q
(say-library.dylan) 302.62 376.29 T
8 10 Q
(.) 394.42 376.29 T
4 9 Q
(Module: dylan-user) 105.65 356.95 T
5 F
(// Library definition) 105.65 337.95 T
4 F
(define library say) 105.65 326.95 T
5 F
(// Interface modules) 116.45 315.95 T
4 F
(export say, say-implementor;) 116.45 304.95 T
5 F
(// Substrate libraries) 116.45 293.95 T
4 F
(use format-out;) 116.45 282.95 T
(use dylan;) 116.45 271.95 T
(end library say;) 105.65 260.95 T
5 F
(// Protocol interface) 105.65 241.95 T
4 F
(define module say) 105.65 230.95 T
(create say;) 116.45 219.95 T
(end module say;) 105.65 208.95 T
99.65 388.83 99.65 202.08 2 L
V
0.25 H
0 Z
N
513.65 388.83 513.65 202.08 2 L
V
N
99.52 388.95 513.77 388.95 2 L
V
N
99.52 368.95 513.77 368.95 2 L
V
N
99.52 201.95 513.77 201.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 228
%%Page: "215" 229
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.9 Protocol design) 429.88 702.62 T
2 F
(215) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.9.2  The) 99.65 487.29 T
4 12 Q
(say) 157.13 487.29 T
3 13 Q
( implementation \336le) 178.73 487.29 T
1 11 Q
-0.15 (Her) 99.65 376.62 P
-0.15 (e, we have cr) 118.22 376.62 P
-0.15 (eated the r) 180.9 376.62 P
-0.15 (ecommended interface and implementation str) 231.86 376.62 P
-0.15 (uctur) 459.14 376.62 P
-0.15 (e,) 485.03 376.62 P
-0.44 (having learned our lesson with the) 99.65 362.62 P
4 10 Q
-0.96 (sixty-unit) 268.86 362.62 P
1 11 Q
-0.44 ( module. Even though it looks like) 328.86 362.62 P
(overkill to have a separate implementation module for a single generic function) 99.65 348.62 T
(de\336nition, we have planned for futur) 99.65 334.62 T
(e expansion.) 280.2 334.62 T
-0.36 (The) 126.65 320.62 P
4 10 Q
-0.79 (say) 147.45 320.62 P
1 11 Q
-0.36 ( pr) 165.45 320.62 P
-0.36 (otocol library is an example of the multiple-interface capability of) 178.6 320.62 P
(Dylan libraries. The) 99.65 306.62 T
4 10 Q
(say) 198.6 306.62 T
1 11 Q
( library has two interfaces that it makes available:) 216.6 306.62 T
4 10 Q
(say) 459.8 306.62 T
1 11 Q
(de\336nes the) 99.65 292.62 T
4 10 Q
(say) 155.38 292.62 T
1 11 Q
( pr) 173.38 292.62 T
(otocol, and) 186.89 292.62 T
4 10 Q
(say-implementor) 243.46 292.62 T
1 11 Q
( pr) 333.45 292.62 T
(ovides the substrate for pr) 346.96 292.62 T
(oto-) 474.4 292.62 T
(col implementors. This interface is cleaner than the one that we used for) 99.65 278.62 T
4 10 Q
(sixty-) 451.73 278.62 T
(unit) 99.65 264.62 T
1 11 Q
(, wher) 123.65 264.62 T
(e) 154.14 264.62 T
4 10 Q
(encode-total-seconds) 162.16 264.62 T
1 11 Q
( played mor) 282.16 264.62 T
(e of an interface r) 340.94 264.62 T
(ole, and) 425.05 264.62 T
4 10 Q
(<sixty-unit>) 99.65 250.62 T
1 11 Q
( and) 171.65 250.62 T
4 10 Q
(decode-total-seconds) 195.77 250.62 T
1 11 Q
( played mor) 315.77 250.62 T
(e of a substrate r) 374.55 250.62 T
(ole. The) 454.47 250.62 T
(r) 99.65 236.62 T
(esult is seen in the clients of the) 103.79 236.62 T
4 10 Q
(sixty-unit) 259.61 236.62 T
1 11 Q
( library) 319.61 236.62 T
(, who must split out these) 353.93 236.62 T
(r) 99.65 222.62 T
(oles for themselves.) 103.79 222.62 T
(Note that the) 126.65 208.62 T
4 10 Q
(say-implementor) 193.23 208.62 T
1 11 Q
( module is both a client and an interface) 283.23 208.62 T
(module. It is the interface of the) 99.65 194.62 T
4 10 Q
(say) 256.65 194.62 T
1 11 Q
( pr) 274.65 194.62 T
(otocol for clients who will implement) 288.16 194.62 T
4 10 Q
(say) 472.89 194.62 T
1 11 Q
-0.1 (methods, and it is a client of the) 99.65 180.62 P
4 10 Q
-0.22 (format-out) 256.19 180.62 P
1 11 Q
-0.1 ( module. Because most) 316.19 180.62 P
4 10 Q
-0.22 (say) 429.99 180.62 P
1 11 Q
-0.1 ( methods) 447.99 180.62 P
5 9 Q
(// Implementor interface) 105.65 640.95 T
4 F
(define module say-implementor) 105.65 629.95 T
(use say, export: all;) 116.45 618.95 T
(use format-out, export: all;) 116.45 607.95 T
(end module say-implementor;) 105.65 596.95 T
5 F
(// Implementation module) 105.65 577.95 T
4 F
(define module say-implementation) 105.65 566.95 T
(use say;) 116.45 555.95 T
(use dylan;) 116.45 544.95 T
(end module say-implementation;) 105.65 533.95 T
8 10 Q
(The) 210 448.29 T
4 9 Q
(say) 230.01 448.29 T
8 10 Q
( implementation \336le:) 246.21 448.29 T
4 9 Q
(say.dylan) 337.91 448.29 T
8 10 Q
(.) 386.51 448.29 T
4 9 Q
(Module: say-implementation) 105.65 428.95 T
(define open generic say \050object :: <object>\051 => \050\051;) 105.65 409.95 T
8 10 Q
(The) 175.74 660.29 T
4 9 Q
(say-library) 195.75 660.29 T
8 10 Q
( \336le:) 255.15 660.29 T
4 9 Q
(say-library.dylan) 276.27 660.29 T
8 10 Q
(.) 368.07 660.29 T
9 F
( \050contin) 370.85 660.29 T
(ued\051) 403.54 660.29 T
99.65 672.83 99.65 527.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 527.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 526.95 513.77 526.95 2 L
V
N
99.65 460.83 99.65 403.08 2 L
V
N
513.65 460.83 513.65 403.08 2 L
V
N
99.52 460.95 513.77 460.95 2 L
V
N
99.52 440.95 513.77 440.95 2 L
V
N
99.52 402.95 513.77 402.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 229
%%Page: "216" 230
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(216) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(use) 99.65 665.62 T
4 10 Q
(format-out) 118.96 665.62 T
1 11 Q
( in their implementations, it makes sense to r) 178.96 665.62 T
(e-export all of the) 396.5 665.62 T
4 10 Q
(format-out) 99.65 651.62 T
1 11 Q
( module for) 159.65 651.62 T
4 10 Q
(say-implementor) 219.46 651.62 T
1 11 Q
( clients.) 309.45 651.62 T
(The explicit de\336nition of the) 126.65 637.62 T
4 10 Q
(say) 266.81 637.62 T
1 11 Q
( generic function is good pr) 284.81 637.62 T
(otocol docu-) 418.3 637.62 T
(mentation. It is also r) 99.65 623.62 T
(equir) 201.74 623.62 T
(ed: All module variables must have a de\336nition for a) 227.15 623.62 T
(library to be complete. \050An alternative would have been to de\336ne a default) 99.65 609.62 T
(method for) 99.65 595.62 T
4 10 Q
(say) 156.86 595.62 T
1 11 Q
(, which would also cr) 173.64 595.62 T
(eate an implicit generic-function de\336nition.) 277.59 595.62 T
(However) 99.65 581.62 T
(, implicit generic-function de\336nitions ar) 144.26 581.62 T
(e) 337.29 581.62 T
2 F
(sealed) 345.31 581.62 T
1 F
(, and, for a pr) 377.08 581.62 T
(otocol, we) 442.47 581.62 T
(need an) 99.65 567.62 T
2 F
(open) 140.71 567.62 T
1 F
( generic function, because we intend clients to add methods to it.) 165.77 567.62 T
(The exact implications of this declaration ar) 99.65 553.62 T
(e discussed in Chapter 19,) 311.43 553.62 T
0 F
(Performance and Flexibility) 99.65 539.62 T
1 F
(.\051 The designer of the) 221.68 539.62 T
4 10 Q
(say) 327.17 539.62 T
1 11 Q
( pr) 345.17 539.62 T
(otocol still has to choose) 358.68 539.62 T
(whether to r) 99.65 525.62 T
(equir) 159.33 525.62 T
(e each type to de\336ne its own) 184.74 525.62 T
4 10 Q
(say) 325.84 525.62 T
1 11 Q
( method, or to pr) 343.84 525.62 T
(ovide a uni-) 425.99 525.62 T
-0.42 (versal default. In this case, we choose not to pr) 99.65 511.62 P
-0.42 (ovide a default, so that an err) 322.21 511.62 P
-0.42 (or will) 461.85 511.62 P
(be signaled if) 99.65 497.62 T
4 10 Q
(say) 167.19 497.62 T
1 11 Q
( is called on a type that does not either pr) 185.19 497.62 T
(ovide or inherit a) 385.38 497.62 T
4 10 Q
(say) 472.05 497.62 T
1 11 Q
(method.) 99.65 483.62 T
(T) 99.65 241.62 T
(o complete our r) 105.38 241.62 T
(estr) 185.3 241.62 T
(ucturing, we must r) 203.08 241.62 T
(eor) 299.07 241.62 T
(ganize the) 314.49 241.62 T
4 10 Q
(time) 367.23 241.62 T
1 11 Q
( library and module) 391.23 241.62 T
(\336les to use the) 99.65 227.62 T
4 10 Q
(say) 171.85 227.62 T
1 11 Q
( pr) 189.85 227.62 T
(otocol, so that the) 203.36 227.62 T
4 10 Q
(say) 291.8 227.62 T
1 11 Q
( pr) 309.8 227.62 T
(otocol is shar) 323.31 227.62 T
(ed with the) 387.08 227.62 T
4 10 Q
(angle) 444.93 227.62 T
1 11 Q
(library that we intend to build.) 99.65 213.62 T
2 F
-0.3 (Comparison with C++:) 132.65 449.62 P
1 F
-0.3 ( Dylan modules enfor) 246.51 449.62 P
-0.3 (ce a str) 351.3 449.62 P
-0.3 (uctur) 384.37 449.62 P
-0.3 (ed design of) 410.25 449.62 P
-0.4 (pr) 132.65 435.62 P
-0.4 (otocols. T) 143.41 435.62 P
-0.4 (o cr) 188.6 435.62 P
-0.4 (eate a shar) 205.99 435.62 P
-0.4 (ed pr) 256.53 435.62 P
-0.4 (otocol, to which methods can be added) 281.64 435.62 P
-0.05 (fr) 132.65 421.62 P
-0.05 (om independent libraries, we must ensur) 140.46 421.62 P
-0.05 (e that the module de\336ning) 340.24 421.62 P
(the pr) 132.65 407.62 T
(otocol \050the module de\336ning the generic function\051 is de\336ned) 161.41 407.62 T
(\336rst, in a separate, common library) 132.65 393.62 T
(. The common library de\336nes the) 301.29 393.62 T
(pr) 132.65 379.62 T
(otocol in one place, easing documentation and maintenance.) 143.41 379.62 T
(In C++ however) 159.65 365.62 T
(, a) 238.25 365.62 T
4 10 Q
(using) 252 365.62 T
1 11 Q
( dir) 282 365.62 T
(ective can cr) 298.82 365.62 T
(eate a local alias to) 358.56 365.62 T
(overload a function in any other library) 132.65 351.62 T
(, even if it is in another) 323.49 351.62 T
(namespace.) 132.65 337.62 T
(The library-use r) 159.65 323.62 T
(elationships of Dylan modules form a) 240.73 323.62 T
(dir) 132.65 309.62 T
(ected graph, centralizing shar) 146.72 309.62 T
(ed functionality) 290.74 309.62 T
(, wher) 366.64 309.62 T
(eas C++) 397.13 309.62 T
-0.09 (namespaces can be inter) 132.65 295.62 P
-0.09 (connected arbitrarily) 249.86 295.62 P
-0.09 (, making documenta-) 350.15 295.62 P
(tion and maintenance of shar) 132.65 281.62 T
(ed pr) 273.98 281.62 T
(otocols dif) 299.47 281.62 T
(\336cult.) 349.96 281.62 T
126.65 462.83 126.65 274.08 2 L
V
0.25 H
0 Z
N
477.65 462.83 477.65 274.08 2 L
V
N
126.52 462.95 477.77 462.95 2 L
V
N
126.52 273.95 477.77 273.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 230
%%Page: "217" 231
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.9 Protocol design) 429.88 702.62 T
2 F
(217) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.9.3  The updated) 99.65 664.29 T
4 12 Q
(time-library) 201.55 664.29 T
3 13 Q
( \336le) 287.95 664.29 T
1 11 Q
(The) 99.65 262.62 T
4 10 Q
(time) 120.81 262.62 T
1 11 Q
( module is modi\336ed to use) 144.81 262.62 T
4 10 Q
(say) 277.16 262.62 T
1 11 Q
(, which it exports to its clients. The) 293.94 262.62 T
(implementation module is modi\336ed to use) 99.65 248.62 T
4 10 Q
(say-implementor) 309.66 248.62 T
1 11 Q
(, which includes) 398.85 248.62 T
4 10 Q
(format-out) 99.65 234.62 T
1 11 Q
(, so it would be super\337uous to continue to include) 159.65 234.62 T
4 10 Q
(format-out) 406.47 234.62 T
1 11 Q
( in) 466.47 234.62 T
4 10 Q
(time-implementation) 99.65 220.62 T
1 11 Q
(. Similarly) 213.65 220.62 T
(, the) 262.18 220.62 T
4 10 Q
(time) 285.69 220.62 T
1 11 Q
(library de\336nition r) 315.69 220.62 T
(eplaces its use of) 405.57 220.62 T
(the) 99.65 206.62 T
4 10 Q
(format-out) 117.65 206.62 T
1 11 Q
( library with the) 177.65 206.62 T
4 10 Q
(say) 259.07 206.62 T
1 11 Q
( library) 277.07 206.62 T
(.) 311.39 206.62 T
(Note that the compiler r) 126.65 192.62 T
(ecursively \336nds all the libraries necessary for com-) 243.36 192.62 T
(pilation. In this case, the) 99.65 178.62 T
4 10 Q
(format-out) 220.14 178.62 T
1 11 Q
( library will be included in the compilation) 280.14 178.62 T
(of the) 99.65 164.62 T
4 10 Q
(time) 130.07 164.62 T
1 11 Q
( library) 154.07 164.62 T
(, even though it is not dir) 188.39 164.62 T
(ectly named.) 310.66 164.62 T
8 10 Q
(The) 196.69 625.29 T
4 9 Q
(time-library) 216.7 625.29 T
8 10 Q
( \336le:) 281.5 625.29 T
4 9 Q
(time-library.dylan) 302.62 625.29 T
8 10 Q
(.) 399.82 625.29 T
4 9 Q
(Module: dylan-user) 105.65 605.95 T
5 F
(// Library definition) 105.65 586.95 T
4 F
(define library time) 105.65 575.95 T
5 F
(// Interface module) 116.45 564.95 T
4 F
(export time;) 116.45 553.95 T
5 F
(// Substrate libraries) 116.45 542.95 T
4 F
(use sixty-unit;) 116.45 531.95 T
(use say;) 116.45 520.95 T
(use dylan;) 116.45 509.95 T
(end library time;) 105.65 498.95 T
5 F
(// Interface module) 105.65 479.95 T
4 F
(define module time) 105.65 468.95 T
5 F
(// Classes) 116.45 457.95 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 116.45 446.95 T
5 F
(// Shared protocol) 116.45 435.95 T
4 F
(use say, export: all;) 116.45 424.95 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 116.45 413.95 T
(end module time;) 105.65 402.95 T
5 F
(// Implementation module) 105.65 383.95 T
4 F
(define module time-implementation) 105.65 372.95 T
5 F
(// External interface) 116.45 361.95 T
4 F
(use time;) 116.45 350.95 T
5 F
(// Substrate modules) 116.45 339.95 T
4 F
(use sixty-unit;) 116.45 328.95 T
(use say-implementor;) 116.45 317.95 T
(use dylan;) 116.45 306.95 T
(end module time-implementation;) 105.65 295.95 T
99.65 637.83 99.65 289.08 2 L
V
0.25 H
0 Z
N
513.65 637.83 513.65 289.08 2 L
V
N
99.52 637.95 513.77 637.95 2 L
V
N
99.52 617.95 513.77 617.95 2 L
V
N
99.52 288.95 513.77 288.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 231
%%Page: "218" 232
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(218) 63.65 702.62 T
0 F
(Chapter 13) 87.4 702.62 T
(Libraries and Modules) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(13.9.4  The) 99.65 664.29 T
4 12 Q
(angle) 157.13 664.29 T
3 13 Q
( librar) 193.13 664.29 T
(y) 222.87 664.29 T
1 11 Q
(At this point, we ar) 99.65 644.62 T
(e r) 193.29 644.62 T
(eady to de\336ne the) 205.46 644.62 T
4 10 Q
(angle) 295.23 644.62 T
1 11 Q
( library) 325.23 644.62 T
(, which will shar) 359.55 644.62 T
(e the) 440.1 644.62 T
4 10 Q
-0.19 (sixty-unit) 99.65 630.62 P
1 11 Q
-0.09 ( and) 159.65 630.62 P
4 10 Q
-0.19 (say) 183.6 630.62 P
1 11 Q
-0.09 ( libraries with the) 201.6 630.62 P
4 10 Q
-0.19 (time) 289.69 630.62 P
1 11 Q
-0.09 ( library) 313.69 630.62 P
-0.09 (. In Chapter 14,) 347.92 630.62 P
0 F
-0.09 (Four Complete) 427.37 630.62 P
(Libraries) 99.65 616.62 T
1 F
(, we pr) 138.97 616.62 T
(esent the consolidated changes to the) 172.42 616.62 T
4 10 Q
(sixty-unit) 355.62 616.62 T
1 11 Q
(,) 415.62 616.62 T
4 10 Q
(say) 421.12 616.62 T
1 11 Q
(, and) 437.9 616.62 T
4 10 Q
(time) 464.77 616.62 T
1 11 Q
(libraries that we have developed in this chapter) 99.65 602.62 T
(, followed by the complete de\336ni-) 330.13 602.62 T
(tion of the) 99.65 588.62 T
4 10 Q
(angle) 152.02 588.62 T
1 11 Q
( library) 182.02 588.62 T
(.) 216.34 588.62 T
3 15 Q
(13.10  Summar) 99.65 548.95 T
(y) 186.6 548.95 T
1 11 Q
(In this chapter) 99.65 528.62 T
(, we cover) 168.89 528.62 T
(ed the following:) 218.11 528.62 T
(\245) 108.65 508.62 T
(W) 126.65 508.62 T
(e illustrated Dylan modules and libraries.) 136.64 508.62 T
(\245) 108.65 488.62 T
(W) 126.65 488.62 T
(e showed how to design modules using thr) 136.64 488.62 T
(ee r) 346.3 488.62 T
(oles: interface modules,) 363.73 488.62 T
(implementation modules, and client modules.) 126.65 474.62 T
(\245) 108.65 454.62 T
(W) 126.65 454.62 T
(e described how a library might appear in Dylan inter) 136.64 454.62 T
(change format.) 398.48 454.62 T
(\245) 108.65 434.62 T
(W) 126.65 434.62 T
(e showed how to cr) 136.64 434.62 T
(eate a component library) 231.35 434.62 T
(.) 351.17 434.62 T
(\245) 108.65 414.62 T
(W) 126.65 414.62 T
(e illustrated the complexity of component and pr) 136.64 414.62 T
(otocol design.) 374.51 414.62 T
(\245) 108.65 394.62 T
(W) 126.65 394.62 T
(e discussed how to cr) 136.64 394.62 T
(eate a pr) 240.53 394.62 T
(otocol that can be extended by multiple cli-) 281.91 394.62 T
(ent libraries.) 126.65 380.62 T
(\245) 108.65 360.62 T
(W) 126.65 360.62 T
(e discussed namespaces in Dylan, and their applicable scope; see T) 136.64 360.62 T
(able) 459.99 360.62 T
(13.1.) 126.65 346.62 T
8 F
(Namespace) 177.23 317.62 T
(Scope) 303.4 317.62 T
(libr) 177.23 294.62 T
(ar) 191.79 294.62 T
(y) 201.9 294.62 T
(global) 303.4 294.62 T
(module) 177.23 271.62 T
(per libr) 303.4 271.62 T
(ar) 336.9 271.62 T
(y) 347.01 271.62 T
(constant or v) 177.23 248.62 T
(ar) 239.93 248.62 T
(iab) 249.88 248.62 T
(le) 264.33 248.62 T
(per module) 303.4 248.62 T
(symbol or k) 177.23 225.62 T
(e) 233.24 225.62 T
(yw) 239.14 225.62 T
(ord) 252.47 225.62 T
(global) 303.4 225.62 T
99.65 187.96 513.65 195.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 225.92 199.29 T
(ab) 231.23 199.29 T
(le 13.1) 242.8 199.29 T
8 F
(Namespace scopes) 278.94 199.29 T
(.) 366.6 199.29 T
171.23 330.83 171.23 216.08 2 L
V
0.25 H
0 Z
N
442.06 330.83 442.06 216.08 2 L
V
N
171.11 330.95 442.19 330.95 2 L
V
N
171.11 307.95 442.19 307.95 2 L
V
N
171.11 215.95 442.19 215.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 232
%%Page: "219" 233
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13.10 Summary) 446.14 702.62 T
2 F
(219) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 665.62 T
(W) 126.65 665.62 T
(e described the r) 136.64 665.62 T
(oles of modules and the de\336nition clauses that modules) 216.72 665.62 T
(use; see T) 126.65 651.62 T
(able 13.2.) 172.4 651.62 T
8 F
(Role) 177.23 622.62 T
(Example clause) 303.4 622.62 T
(interf) 177.23 599.62 T
(ace) 201.36 599.62 T
5 9 Q
(// Interface class) 303.4 600.95 T
4 F
(create <time>;) 303.4 589.95 T
5 F
(// Re-exported interface) 303.4 578.95 T
4 F
(use say, export: all;) 303.4 567.95 T
8 11 Q
(client) 177.23 545.62 T
5 9 Q
(// Substrate module) 303.4 546.95 T
4 F
(use dylan;) 303.4 535.95 T
8 11 Q
(implementation) 177.23 513.62 T
5 9 Q
(// Interface module) 303.4 514.95 T
4 F
(use time;) 303.4 503.95 T
8 11 Q
(implementation and) 177.23 481.62 T
(interf) 177.23 465.62 T
(ace) 201.36 465.62 T
5 9 Q
(// Interface protocol) 303.4 482.95 T
4 F
(export say;) 303.4 471.95 T
99.65 427.96 513.65 435.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 241.2 439.29 T
(ab) 246.51 439.29 T
(le 13.2) 258.08 439.29 T
8 F
(Module roles) 294.22 439.29 T
(.) 351.31 439.29 T
171.23 635.83 171.23 456.08 2 L
V
0.25 H
0 Z
N
442.06 635.83 442.06 456.08 2 L
V
N
171.11 635.95 442.19 635.95 2 L
V
N
171.11 612.95 442.19 612.95 2 L
V
N
171.11 455.95 442.19 455.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 233
%%Page: "220" 234
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 234
%%Page: "221" 235
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(221) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(14) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(14) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Four Complete Libraries) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this chapter) 99.65 449.62 T
(, we show all the \336les that the complete) 168.89 449.62 T
4 10 Q
(time) 362.9 449.62 T
1 11 Q
(,) 386.9 449.62 T
4 10 Q
(angle) 392.4 449.62 T
1 11 Q
(,) 422.4 449.62 T
4 10 Q
(sixty-unit) 427.9 449.62 T
1 11 Q
(,) 487.9 449.62 T
(and) 99.65 435.62 T
4 10 Q
(say) 121.02 435.62 T
1 11 Q
( libraries comprise.) 139.02 435.62 T
3 15 Q
(14.1  The) 99.65 395.95 T
4 14 Q
(sixty-unit) 155.72 395.95 T
3 15 Q
( librar) 239.72 395.95 T
(y) 274.02 395.95 T
1 11 Q
-0.23 (The) 99.65 375.62 P
4 10 Q
-0.5 (sixty-unit) 120.58 375.62 P
1 11 Q
-0.23 ( library is an example of a shar) 180.58 375.62 P
-0.23 (ed substrate library) 327.91 375.62 P
-0.23 (. Both the) 420.84 375.62 P
4 10 Q
-0.5 (time) 469.13 375.62 P
1 11 Q
-0.03 (and) 99.65 361.62 P
4 10 Q
-0.05 (angle) 121 361.62 P
1 11 Q
-0.03 ( libraries use the) 151 361.62 P
4 10 Q
-0.05 (sixty-unit) 233.53 361.62 P
1 11 Q
-0.03 ( library to cr) 293.53 361.62 P
-0.03 (eate mor) 353.12 361.62 P
-0.03 (e specialized classes) 395.33 361.62 P
(that build on a common substrate.) 99.65 347.62 T
(The) 126.65 333.62 T
4 10 Q
(sixty-unit) 147.81 333.62 T
1 11 Q
( library comprises two Dylan inter) 207.81 333.62 T
(change-format \336les: a) 374.81 333.62 T
-0.35 (library \336le, containing the library and module de\336nitions; and an implementation) 99.65 319.62 P
-0.32 (\336le, containing a single sour) 99.65 305.62 P
-0.32 (ce r) 234.76 305.62 P
-0.32 (ecor) 251.49 305.62 P
-0.32 (d, de\336ning the generic function that is the) 271.8 305.62 P
4 10 Q
-0.69 (say) 475.21 305.62 P
1 11 Q
(pr) 99.65 291.62 T
(otocol. For completeness, we also show the LID \336le that describes the library) 110.41 291.62 T
(and its component \336les.) 99.65 277.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 235
%%Page: "222" 236
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(222) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.1.1  The) 99.65 664.29 T
4 12 Q
(sixty-unit-library) 157.13 664.29 T
3 13 Q
( \336le) 286.73 664.29 T
(14.1.2  The) 99.65 303.29 T
4 12 Q
(sixty-unit) 157.13 303.29 T
3 13 Q
( implementation \336le) 229.13 303.29 T
8 10 Q
(The) 163.99 625.29 T
4 9 Q
(sixty-unit-librar) 184 625.29 T
4 10 Q
(y) 275.8 625.29 T
8 F
( \336le:) 281.8 625.29 T
4 9 Q
(sixty-unit-library.dylan) 302.92 625.29 T
8 10 Q
(.) 432.52 625.29 T
4 9 Q
(Module: dylan-user) 105.65 605.95 T
5 F
(// Library definition) 105.65 586.95 T
4 F
(define library sixty-unit) 105.65 575.95 T
5 F
(// Interface module) 116.45 564.95 T
4 F
(export sixty-unit;) 116.45 553.95 T
5 F
(// Substrate library) 116.45 542.95 T
4 F
(use dylan;) 116.45 531.95 T
(end library sixty-unit;) 105.65 520.95 T
5 F
(// Interface module) 105.65 501.95 T
4 F
(define module sixty-unit) 105.65 490.95 T
5 F
(// Classes) 116.45 479.95 T
4 F
(create <sixty-unit>;) 116.45 468.95 T
5 F
(// Generics) 116.45 457.95 T
4 F
(create total-seconds, encode-total-seconds, decode-total-seconds;) 116.45 446.95 T
(end module sixty-unit;) 105.65 435.95 T
5 F
(// Implementation module) 105.65 416.95 T
4 F
(define module sixty-unit-implementation) 105.65 405.95 T
5 F
(// External interface) 116.45 394.95 T
4 F
(use sixty-unit;) 116.45 383.95 T
5 F
(// Substrate module) 116.45 372.95 T
4 F
(use dylan;) 116.45 361.95 T
(end module sixty-unit;) 105.65 350.95 T
8 10 Q
(The) 172.2 264.29 T
4 9 Q
(sixty-unit) 192.21 264.29 T
8 10 Q
( implementation \336le:) 246.21 264.29 T
4 9 Q
(sixty-unit.dylan) 337.91 264.29 T
8 10 Q
(.) 424.31 264.29 T
4 9 Q
(Module: sixty-unit-implementation) 105.65 244.95 T
(define open abstract class <sixty-unit> \050<object>\051) 105.65 225.95 T
(slot total-seconds :: <integer>, required-init-keyword: total-seconds:;) 116.45 214.95 T
(end class <sixty-unit>;) 105.65 203.95 T
99.65 637.83 99.65 344.08 2 L
V
0.25 H
0 Z
N
513.65 637.83 513.65 344.08 2 L
V
N
99.52 637.95 513.77 637.95 2 L
V
N
99.52 617.95 513.77 617.95 2 L
V
N
99.52 343.95 513.77 343.95 2 L
V
N
99.65 276.83 99.65 197.08 2 L
V
N
513.65 276.83 513.65 197.08 2 L
V
N
99.52 276.95 513.77 276.95 2 L
V
N
99.52 256.95 513.77 256.95 2 L
V
N
99.52 196.95 513.77 196.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 236
%%Page: "223" 237
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.2 The) 426.76 702.62 T
5 F
(say) 462.38 702.62 T
0 F
( library) 479.48 702.62 T
2 F
(223) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.1.3  The) 99.65 402.29 T
4 12 Q
(sixty-unit) 157.13 402.29 T
3 13 Q
( LID \336le) 229.13 402.29 T
3 15 Q
(14.2  The) 99.65 280.95 T
4 14 Q
(say) 155.72 280.95 T
3 15 Q
( librar) 180.92 280.95 T
(y) 215.22 280.95 T
1 11 Q
(The) 99.65 260.62 T
4 10 Q
(say) 120.81 260.62 T
1 11 Q
( library is an example of a library that de\336nes a shar) 138.81 260.62 T
(ed pr) 391.09 260.62 T
(otocol. All our) 416.58 260.62 T
-0.22 (other libraries use the) 99.65 246.62 P
4 10 Q
-0.48 (say) 207.01 246.62 P
1 11 Q
-0.22 ( library) 225.01 246.62 P
-0.22 (, so that they can add to the) 259.11 246.62 P
4 10 Q
-0.48 (say) 393.79 246.62 P
1 11 Q
-0.22 ( generic function) 411.79 246.62 P
(methods that appr) 99.65 232.62 T
(opriately display the objects of the classes that they de\336ne.) 189.45 232.62 T
-0.06 (The) 126.65 218.62 P
4 10 Q
-0.13 (say) 147.75 218.62 P
1 11 Q
-0.06 ( library comprises two Dylan inter) 165.75 218.62 P
-0.06 (change-format \336les: a library \336le,) 332.45 218.62 P
(containing the library and module de\336nitions; and an implementation \336le, con-) 99.65 204.62 T
(taining a single sour) 99.65 190.62 T
(ce r) 198.11 190.62 T
(ecor) 215.16 190.62 T
(d, de\336ning the generic function that is the) 235.46 190.62 T
4 10 Q
(say) 441.42 190.62 T
1 11 Q
( pr) 459.42 190.62 T
(oto-) 472.93 190.62 T
(col. For completeness, we also show the LID \336le that describes the library and its) 99.65 176.62 T
(component \336les.) 99.65 162.62 T
4 9 Q
(define method encode-total-seconds) 105.65 640.95 T
(\050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 127.25 629.95 T
(=>) 111.05 618.95 T
(\050total-seconds :: <integer>\051) 127.25 618.95 T
(\050\050max-unit * 60\051 + minutes\051 * 60 + seconds;) 116.45 607.95 T
(end method encode-total-seconds;) 105.65 596.95 T
(define method decode-total-seconds) 105.65 577.95 T
(\050sixty-unit :: <sixty-unit>\051) 127.25 566.95 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 555.95 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 116.45 544.95 T
(end method decode-total-seconds;) 105.65 533.95 T
(define method decode-total-seconds) 105.65 514.95 T
(\050total-seconds :: <integer>\051) 127.25 503.95 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 111.05 492.95 T
(let\050total-minutes, seconds\051 = truncate/\050abs\050total-seconds\051, 60\051;) 116.45 481.95 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 116.45 470.95 T
(values\050max-unit, minutes, seconds\051;) 116.45 459.95 T
(end method decode-total-seconds;) 105.65 448.95 T
8 10 Q
(The LID \336le:) 232.11 363.29 T
4 9 Q
(sixty-unit.lid) 288.8 363.29 T
8 10 Q
(.) 364.4 363.29 T
4 9 Q
(library:) 105.65 343.95 T
(sixty-unit) 154.25 343.95 T
(files:) 105.65 332.95 T
(sixty-unit-library) 154.25 332.95 T
(sixty-unit) 154.25 321.95 T
8 10 Q
(The) 145.85 660.29 T
4 9 Q
(sixty-unit) 165.86 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(sixty-unit.dylan) 311.56 660.29 T
8 10 Q
(.) 397.96 660.29 T
9 F
( \050contin) 400.74 660.29 T
(ued\051) 433.43 660.29 T
99.65 672.83 99.65 442.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 442.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 441.95 513.77 441.95 2 L
V
N
99.65 375.83 99.65 315.08 2 L
V
N
513.65 375.83 513.65 315.08 2 L
V
N
99.52 375.95 513.77 375.95 2 L
V
N
99.52 355.95 513.77 355.95 2 L
V
N
99.52 314.95 513.77 314.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 237
%%Page: "224" 238
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(224) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.2.1  The) 99.65 664.29 T
4 12 Q
(say-library) 157.13 664.29 T
3 13 Q
( \336le) 236.33 664.29 T
(14.2.2  The) 99.65 299.29 T
4 12 Q
(say) 157.13 299.29 T
3 13 Q
( implementation \336le) 178.73 299.29 T
8 10 Q
(The) 202.09 625.29 T
4 9 Q
(say-library) 222.1 625.29 T
8 10 Q
( \336le:) 281.5 625.29 T
4 9 Q
(say-library.dylan) 302.62 625.29 T
8 10 Q
(.) 394.42 625.29 T
4 9 Q
(Module: dylan-user) 105.65 605.95 T
5 F
(// Library definition) 105.65 586.95 T
4 F
(define library say) 105.65 575.95 T
5 F
(// Interface modules) 116.45 564.95 T
4 F
(export say, say-implementor;) 116.45 553.95 T
5 F
(// Substrate libraries) 116.45 542.95 T
4 F
(use format-out;) 116.45 531.95 T
(use dylan;) 116.45 520.95 T
(end library say;) 105.65 509.95 T
5 F
(// Protocol interface) 105.65 490.95 T
4 F
(define module say) 105.65 479.95 T
(create say;) 116.45 468.95 T
(end module say;) 105.65 457.95 T
5 F
(// Implementor interface) 105.65 438.95 T
4 F
(define module say-implementor) 105.65 427.95 T
(use say, export: all;) 116.45 416.95 T
(use format-out, export: all;) 116.45 405.95 T
(end module say-implementor;) 105.65 394.95 T
5 F
(// Implementation module) 105.65 375.95 T
4 F
(define module say-implementation) 105.65 364.95 T
(use say;) 116.45 353.95 T
(use dylan;) 116.45 342.95 T
(end module say-implementation;) 105.65 331.95 T
8 10 Q
(The) 210 260.29 T
4 9 Q
(say) 230.01 260.29 T
8 10 Q
( implementation \336le:) 246.21 260.29 T
4 9 Q
(say.dylan) 337.91 260.29 T
8 10 Q
(.) 386.51 260.29 T
4 9 Q
(Module: say-implementation) 105.65 240.95 T
(define open generic say \050object :: <object>\051 => \050\051;) 105.65 221.95 T
99.65 637.83 99.65 325.08 2 L
V
0.25 H
0 Z
N
513.65 637.83 513.65 325.08 2 L
V
N
99.52 637.95 513.77 637.95 2 L
V
N
99.52 617.95 513.77 617.95 2 L
V
N
99.52 324.95 513.77 324.95 2 L
V
N
99.65 272.83 99.65 215.08 2 L
V
N
513.65 272.83 513.65 215.08 2 L
V
N
99.52 272.95 513.77 272.95 2 L
V
N
99.52 252.95 513.77 252.95 2 L
V
N
99.52 214.95 513.77 214.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 238
%%Page: "225" 239
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.3 The) 421.06 702.62 T
5 F
(time) 456.68 702.62 T
0 F
( library) 479.48 702.62 T
2 F
(225) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.2.3  The) 99.65 664.29 T
4 12 Q
(say) 157.13 664.29 T
3 13 Q
( LID \336le) 178.73 664.29 T
3 15 Q
(14.3  The) 99.65 551.95 T
4 14 Q
(time) 155.72 551.95 T
3 15 Q
( librar) 189.32 551.95 T
(y) 223.62 551.95 T
1 11 Q
(The) 99.65 531.62 T
4 10 Q
(time) 120.81 531.62 T
1 11 Q
( library is a client of the) 144.81 531.62 T
4 10 Q
(sixty-unit) 261.69 531.62 T
1 11 Q
( and) 321.69 531.62 T
4 10 Q
(say) 345.81 531.62 T
1 11 Q
( libraries, and it will serve) 363.81 531.62 T
(as a substrate library for the r) 99.65 517.62 T
(est of our application. Like the pr) 242.35 517.62 T
(evious two librar-) 403.8 517.62 T
(ies, it comprises a library \336le and an implementation \336le; we also show the corr) 99.65 503.62 T
(e-) 484.35 503.62 T
(sponding LID \336le.) 99.65 489.62 T
3 13 Q
(14.3.1  The) 99.65 458.29 T
4 12 Q
(time-library) 157.13 458.29 T
3 13 Q
( \336le) 243.53 458.29 T
8 10 Q
(The LID \336le:) 251.01 635.29 T
4 9 Q
(say.lid) 307.7 635.29 T
8 10 Q
(.) 345.5 635.29 T
4 9 Q
(library:) 105.65 615.95 T
(say) 154.25 615.95 T
(files:) 105.65 604.95 T
(say-library) 154.25 604.95 T
(say) 154.25 593.95 T
8 10 Q
(The) 196.39 419.29 T
4 9 Q
(time-library) 216.4 419.29 T
8 10 Q
( \336le:) 281.2 419.29 T
4 9 Q
(time-library.dyla) 302.32 419.29 T
4 10 Q
(n) 394.12 419.29 T
8 F
(.) 400.12 419.29 T
4 9 Q
(Module: dylan-user) 105.65 399.95 T
5 F
(// Library definition) 105.65 380.95 T
4 F
(define library time) 105.65 369.95 T
5 F
(// Interface module) 116.45 358.95 T
4 F
(export time;) 116.45 347.95 T
5 F
(// Substrate libraries) 116.45 336.95 T
4 F
(use sixty-unit;) 116.45 325.95 T
(use say;) 116.45 314.95 T
(use dylan;) 116.45 303.95 T
(end library time;) 105.65 292.95 T
99.65 647.83 99.65 587.08 2 L
V
0.25 H
0 Z
N
513.65 647.83 513.65 587.08 2 L
V
N
99.52 647.95 513.77 647.95 2 L
V
N
99.52 627.95 513.77 627.95 2 L
V
N
99.52 586.95 513.77 586.95 2 L
V
N
99.65 431.83 99.65 286.08 2 L
V
N
513.65 431.83 513.65 286.08 2 L
V
N
99.52 431.95 513.77 431.95 2 L
V
N
99.52 411.95 513.77 411.95 2 L
V
N
99.52 285.95 513.77 285.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "225" 239
%%Page: "226" 240
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(226) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.3.2  The) 99.65 366.29 T
4 12 Q
(time) 157.13 366.29 T
3 13 Q
( implementation \336le) 185.93 366.29 T
5 9 Q
(// Interface module) 105.65 640.95 T
4 F
(define module time) 105.65 629.95 T
5 F
(// Classes) 116.45 618.95 T
4 F
(create <time>, <time-of-day>, <time-offset>;) 116.45 607.95 T
5 F
(// Types) 116.45 596.95 T
4 F
(create <nonnegative-integer>;) 116.45 585.95 T
5 F
(// Constants) 116.45 574.95 T
4 F
(create $midnight, $tomorrow;) 116.45 563.95 T
5 F
(// Shared protocol) 116.45 552.95 T
4 F
(use say, export: all;) 116.45 541.95 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 116.45 530.95 T
(end module time;) 105.65 519.95 T
5 F
(// Implementation module) 105.65 500.95 T
4 F
(define module time-implementation) 105.65 489.95 T
5 F
(// External interface) 116.45 478.95 T
4 F
(use time;) 116.45 467.95 T
5 F
(// Substrate modules) 116.45 456.95 T
4 F
(use sixty-unit;) 116.45 445.95 T
(use say-implementor;) 116.45 434.95 T
(use dylan;) 116.45 423.95 T
(end module time-implementation;) 105.65 412.95 T
8 10 Q
(The) 204.6 327.29 T
4 9 Q
(time) 224.61 327.29 T
8 10 Q
( implementation \336le:) 246.21 327.29 T
4 9 Q
(time.dylan) 337.91 327.29 T
8 10 Q
(.) 391.91 327.29 T
4 9 Q
(Module: time-implementation) 105.65 307.95 T
5 F
(// Define nonnegative integers as integers that are >= zero) 105.65 288.95 T
4 F
(define constant <nonnegative-integer> = limited\050<integer>, min: 0\051;) 105.65 277.95 T
(define abstract class <time> \050<sixty-unit>\051) 105.65 258.95 T
(end class <time>;) 105.65 247.95 T
(define method say \050time :: <time>\051) 105.65 228.95 T
(let \050hours, minutes\051 = decode-total-seconds\050time\051;) 116.45 217.95 T
(format-out\050"%d:%s%d",) 116.45 206.95 T
(hours, if \050minutes < 10\051 "0" else " " end, minutes\051;) 175.85 195.95 T
(end method say;) 105.65 184.95 T
8 10 Q
(The) 170.04 660.29 T
4 9 Q
(time-library) 190.05 660.29 T
8 10 Q
( \336le:) 254.85 660.29 T
4 9 Q
(time-library.dyla) 275.97 660.29 T
4 10 Q
(n) 367.77 660.29 T
8 F
(.) 373.77 660.29 T
9 F
( \050contin) 376.55 660.29 T
(ued\051) 409.24 660.29 T
99.65 672.83 99.65 406.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 406.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 405.95 513.77 405.95 2 L
V
N
99.65 339.83 99.65 178.08 2 L
V
N
513.65 339.83 513.65 178.08 2 L
V
N
99.52 339.95 513.77 339.95 2 L
V
N
99.52 319.95 513.77 319.95 2 L
V
N
99.52 177.95 513.77 177.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "226" 240
%%Page: "227" 241
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.3 The) 421.06 702.62 T
5 F
(time) 456.68 702.62 T
0 F
( library) 479.48 702.62 T
2 F
(227) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
5 9 Q
0 X
(// A specific time of day from 00:00 \050midnight\051 to before 24:00 \050tomorrow\051) 105.65 640.95 T
4 F
(define class <time-of-day> \050<time>\051) 105.65 629.95 T
(end class <time-of-day>;) 105.65 618.95 T
(define method total-seconds-setter) 105.65 599.95 T
(\050total-seconds :: <integer>, time :: <time-of-day>\051) 127.25 588.95 T
(=> \050total-seconds :: <nonnegative-integer>\051) 111.05 577.95 T
(if \050total-seconds >= 0\051) 116.45 566.95 T
(next-method\050\051;) 127.25 555.95 T
(else) 116.45 544.95 T
(error\050"%d cannot be negative", total-seconds\051;) 127.25 533.95 T
(end if;) 116.45 522.95 T
(end method total-seconds-setter;) 105.65 511.95 T
(define method initialize \050time :: <time-of-day>, #key\051) 105.65 492.95 T
(next-method\050\051;) 116.45 481.95 T
(if \050time.total-seconds < 0\051) 116.45 470.95 T
(error\050"%d cannot be negative", time.total-seconds\051;) 127.25 459.95 T
(end if;) 116.45 448.95 T
(end method initialize;) 105.65 437.95 T
5 F
(// A relative time between -24:00 and +24:00) 105.65 418.95 T
4 F
(define class <time-offset> \050<time>\051) 105.65 407.95 T
(end class <time-offset>;) 105.65 396.95 T
(define method past? \050time :: <time-offset>\051 => \050past? :: <boolean>\051) 105.65 377.95 T
(time.total-seconds < 0;) 116.45 366.95 T
(end method past?;) 105.65 355.95 T
(define method say \050time :: <time-offset>\051 => \050\051) 105.65 336.95 T
(format-out\050"%s ", if \050time.past?\051 "minus" else "plus" end\051;) 116.45 325.95 T
(next-method\050\051;) 116.45 314.95 T
(end method say;) 105.65 303.95 T
(define method \134+) 105.65 284.95 T
(\050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 127.25 273.95 T
(=> \050sum :: <time-offset>\051) 111.05 262.95 T
(let sum = offset1.total-seconds + offset2.total-seconds;) 116.45 251.95 T
(make\050<time-offset>, total-seconds: sum\051;) 116.45 240.95 T
(end method \134+;) 105.65 229.95 T
8 10 Q
(The) 178.25 660.29 T
4 9 Q
(time) 198.26 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(time.dylan) 311.56 660.29 T
8 10 Q
(.) 365.56 660.29 T
9 F
( \050contin) 368.34 660.29 T
(ued\051) 401.03 660.29 T
99.65 672.83 99.65 223.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 223.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 222.95 513.77 222.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 241
%%Page: "228" 242
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(228) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.3.3  The) 99.65 241.29 T
4 12 Q
(time) 157.13 241.29 T
3 13 Q
( LID \336le) 185.93 241.29 T
4 9 Q
(define method \134+) 105.65 640.95 T
(\050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 127.25 629.95 T
(=> \050sum :: <time-of-day>\051) 111.05 618.95 T
(make\050<time-of-day>,) 116.45 607.95 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 143.45 596.95 T
(end method \134+;) 105.65 585.95 T
(define method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 105.65 566.95 T
(=> \050sum :: <time-of-day>\051) 111.05 555.95 T
(offset + time-of-day;) 116.45 544.95 T
(end method \134+;) 105.65 533.95 T
(define method \134< \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 105.65 514.95 T
(time1.total-seconds < time2.total-seconds;) 116.45 503.95 T
(end method \134<;) 105.65 492.95 T
(define method \134< \050time1 :: <time-offset>, time2 :: <time-offset>\051) 105.65 473.95 T
(time1.total-seconds < time2.total-seconds;) 116.45 462.95 T
(end method \134<;) 105.65 451.95 T
(define method \134= \050time1 :: <time-of-day>, time2 :: <time-of-day>\051) 105.65 432.95 T
(time1.total-seconds = time2.total-seconds;) 116.45 421.95 T
(end method \134=;) 105.65 410.95 T
(define method \134= \050time1 :: <time-offset>, time2 :: <time-offset>\051) 105.65 391.95 T
(time1.total-seconds = time2.total-seconds;) 116.45 380.95 T
(end method \134=;) 105.65 369.95 T
5 F
(// Two useful time constants) 105.65 350.95 T
4 F
(define constant $midnight) 105.65 339.95 T
(= make\050<time-of-day>, total-seconds: encode-total-seconds\0500, 0, 0\051\051;) 116.45 328.95 T
(define constant $tomorrow) 105.65 309.95 T
(= make\050<time-of-day>,) 116.45 298.95 T
( total-seconds: encode-total-seconds\05024, 0, 0\051\051;) 148.85 287.95 T
8 10 Q
(The LID \336le:) 248.31 202.29 T
4 9 Q
(time.lid) 305 202.29 T
8 10 Q
(.) 348.2 202.29 T
4 9 Q
(library:) 105.65 182.95 T
(time) 154.25 182.95 T
(files:) 105.65 171.95 T
(time-library) 154.25 171.95 T
(time) 154.25 160.95 T
8 10 Q
(The) 178.25 660.29 T
4 9 Q
(time) 198.26 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(time.dylan) 311.56 660.29 T
8 10 Q
(.) 365.56 660.29 T
9 F
( \050contin) 368.34 660.29 T
(ued\051) 401.03 660.29 T
99.65 672.83 99.65 281.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 281.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 280.95 513.77 280.95 2 L
V
N
99.65 214.83 99.65 154.08 2 L
V
N
513.65 214.83 513.65 154.08 2 L
V
N
99.52 214.95 513.77 214.95 2 L
V
N
99.52 194.95 513.77 194.95 2 L
V
N
99.52 153.95 513.77 153.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 242
%%Page: "229" 243
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.4 The) 415.36 702.62 T
5 F
(angle) 450.98 702.62 T
0 F
( library) 479.48 702.62 T
2 F
(229) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(14.4  The) 99.65 662.95 T
4 14 Q
(angle) 155.72 662.95 T
3 15 Q
( librar) 197.72 662.95 T
(y) 232.02 662.95 T
1 11 Q
(The) 99.65 642.62 T
4 10 Q
(angle) 120.81 642.62 T
1 11 Q
( library is the second client of the) 150.81 642.62 T
4 10 Q
(sixty-unit) 314.14 642.62 T
1 11 Q
( substrate. The) 374.14 642.62 T
4 10 Q
(angle) 447.88 642.62 T
1 11 Q
(library extends the) 99.65 628.62 T
4 10 Q
(say) 193.53 628.62 T
1 11 Q
( pr) 211.53 628.62 T
(otocol to handle objects of the classes that it de\336nes,) 225.04 628.62 T
(such as) 99.65 614.62 T
4 10 Q
(<latitude>) 137.9 614.62 T
1 11 Q
(,) 197.9 614.62 T
4 10 Q
(<longitude>) 203.4 614.62 T
1 11 Q
(, and) 269.39 614.62 T
4 10 Q
(<absolute-position>) 296.27 614.62 T
1 11 Q
(. For the time) 410.27 614.62 T
-0.34 (being, we have included positions with angles, as we do not for) 99.65 600.62 P
-0.34 (esee any bene\336t to) 404.64 600.62 P
(br) 99.65 586.62 T
(eaking them out into yet another library) 109.88 586.62 T
(, at least for the curr) 303.42 586.62 T
(ent application.) 400.51 586.62 T
(Nevertheless, we have de\336ned separate interface and implementation modules) 99.65 572.62 T
(for positions, and we have br) 99.65 558.62 T
(oken out the position sour) 241.18 558.62 T
(ce r) 368.59 558.62 T
(ecor) 385.64 558.62 T
(ds into a separate) 405.94 558.62 T
(inter) 99.65 544.62 T
(change \336le.) 122.25 544.62 T
-0.26 (Like with the) 126.65 530.62 P
4 10 Q
-0.58 (time) 193.03 530.62 P
1 11 Q
-0.26 ( library) 217.03 530.62 P
-0.26 (, the) 251.09 530.62 P
4 10 Q
-0.58 (angle) 274.07 530.62 P
1 11 Q
-0.26 ( library \336le does not have to specify the) 304.07 530.62 P
(use of the) 99.65 516.62 T
4 10 Q
(format-out) 149.39 516.62 T
1 11 Q
( library) 209.39 516.62 T
(. It will be transitively included because it is) 243.71 516.62 T
(exported by the) 99.65 502.62 T
4 10 Q
(say) 178.84 502.62 T
1 11 Q
( library) 196.84 502.62 T
(. Similarly) 231.16 502.62 T
(, clients of the) 279.69 502.62 T
4 10 Q
(angle) 349.57 502.62 T
1 11 Q
( library do not need to) 379.57 502.62 T
(know anything about the) 99.65 488.62 T
4 10 Q
(say) 225.14 488.62 T
1 11 Q
( and) 243.14 488.62 T
4 10 Q
(sixty-unit) 267.26 488.62 T
1 11 Q
( libraries, since those libraries ar) 327.26 488.62 T
(e) 483.37 488.62 T
(imported and r) 99.65 474.62 T
(e-exported to clients of) 173.37 474.62 T
4 10 Q
(angle) 287.25 474.62 T
1 11 Q
(.) 317.25 474.62 T
(Note that the) 126.65 460.62 T
4 10 Q
(position-implementation) 193.23 460.62 T
1 11 Q
( module uses the) 331.23 460.62 T
4 10 Q
(angle) 416.26 460.62 T
1 11 Q
( module) 446.26 460.62 T
(\321 it is an internal client of the) 99.65 446.62 T
4 10 Q
(angle) 248.58 446.62 T
1 11 Q
( module. This str) 278.58 446.62 T
(uctur) 360.64 446.62 T
(e means that we can) 386.52 446.62 T
(easily br) 99.65 432.62 T
(eak out positions as a separate library) 140.58 432.62 T
(, should the need arise.) 322.51 432.62 T
(Also note that we have used the) 126.65 418.62 T
4 10 Q
(angle) 285.04 418.62 T
1 11 Q
( interface module to enfor) 315.04 418.62 T
(ce access) 440.78 418.62 T
(contr) 99.65 404.62 T
(ol on the) 124.67 404.62 T
4 10 Q
(internal-direction) 169.79 404.62 T
1 11 Q
( slot. It should be accessed only thr) 277.8 404.62 T
(ough the) 447.24 404.62 T
4 10 Q
(direction) 99.65 390.62 T
1 11 Q
( and) 153.65 390.62 T
4 10 Q
(direction-setter) 177.77 390.62 T
1 11 Q
( methods, which ensur) 273.77 390.62 T
(e that valid values ar) 384.31 390.62 T
(e) 485.62 390.62 T
(used for our) 99.65 376.62 T
4 10 Q
(<latitude>) 162.18 376.62 T
1 11 Q
( and) 222.18 376.62 T
4 10 Q
(<longitude>) 246.31 376.62 T
1 11 Q
( classes. Because only the appr) 312.31 376.62 T
(oved) 460.44 376.62 T
(generic functions ar) 99.65 362.62 T
(e cr) 195.72 362.62 T
(eated in the interface module, only they will be accessible) 212.77 362.62 T
(to clients of the) 99.65 348.62 T
4 10 Q
(angle) 176.37 348.62 T
1 11 Q
( library) 206.37 348.62 T
(. The) 240.69 348.62 T
4 10 Q
(internal-direction) 267.36 348.62 T
1 11 Q
( slot is tr) 375.36 348.62 T
(uly internal to) 416.77 348.62 T
(the) 99.65 334.62 T
4 10 Q
(angle) 117.65 334.62 T
1 11 Q
( library \321 no client library can even determine its existence.) 147.65 334.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 243
%%Page: "230" 244
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(230) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.4.1  The) 99.65 664.29 T
4 12 Q
(angle-library) 157.13 664.29 T
3 13 Q
( \336le) 250.73 664.29 T
8 10 Q
(The) 191.29 625.29 T
4 9 Q
(angle-library) 211.3 625.29 T
8 10 Q
( \336le:) 281.5 625.29 T
4 9 Q
(angle-library.dylan) 302.62 625.29 T
8 10 Q
(.) 405.22 625.29 T
4 9 Q
(Module: dylan-user) 105.65 605.95 T
5 F
(// Library definition) 105.65 586.95 T
4 F
(define library angle) 105.65 575.95 T
(// Interface module) 116.45 564.95 T
(export angle, position;) 116.45 553.95 T
(// Substrate libraries) 116.45 542.95 T
(use sixty-unit;) 116.45 531.95 T
(use say;) 116.45 520.95 T
(use dylan;) 116.45 509.95 T
(end library angle;) 105.65 498.95 T
5 F
(// Interface module) 105.65 479.95 T
4 F
(define module angle) 105.65 468.95 T
5 F
(// Classes) 116.45 457.95 T
4 F
(create <angle>, <directed-angle>, <latitude>, <longitude>;) 116.45 446.95 T
5 F
(// Generics) 116.45 435.95 T
4 F
(create direction, direction-setter;) 116.45 424.95 T
5 F
(// Shared protocol) 116.45 413.95 T
4 F
(use say, export: all;) 116.45 402.95 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 116.45 391.95 T
(end module angle;) 105.65 380.95 T
5 F
(// Interface module) 105.65 361.95 T
4 F
(define module position) 105.65 350.95 T
5 F
(// Classes) 116.45 339.95 T
4 F
(create <position>, <absolute-position>, <relative-position>;) 116.45 328.95 T
5 F
(// Generics) 116.45 317.95 T
4 F
(create distance, angle, latitude, longitude;) 116.45 306.95 T
5 F
(// Shared protocol) 116.45 295.95 T
4 F
(use say, export: all;) 116.45 284.95 T
(end module angle;) 105.65 273.95 T
5 F
(// Implementation module) 105.65 254.95 T
4 F
(define module angle-implementation) 105.65 243.95 T
5 F
(// External interface) 116.45 232.95 T
4 F
(use angle;) 116.45 221.95 T
5 F
(// Substrate modules) 116.45 210.95 T
4 F
(use sixty-unit;) 116.45 199.95 T
(use say-implementor;) 116.45 188.95 T
(use dylan;) 116.45 177.95 T
(end module angle-implementation;) 105.65 166.95 T
99.65 637.83 99.65 160.08 2 L
V
0.25 H
0 Z
N
513.65 637.83 513.65 160.08 2 L
V
N
99.52 637.95 513.77 637.95 2 L
V
N
99.52 617.95 513.77 617.95 2 L
V
N
99.52 159.95 513.77 159.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 244
%%Page: "231" 245
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.4 The) 415.36 702.62 T
5 F
(angle) 450.98 702.62 T
0 F
( library) 479.48 702.62 T
2 F
(231) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.4.2  The) 99.65 506.29 T
4 12 Q
(angle) 157.13 506.29 T
3 13 Q
( implementation \336le) 193.13 506.29 T
1 11 Q
-0.22 (The) 99.65 486.62 P
4 10 Q
-0.48 (angle) 120.59 486.62 P
1 11 Q
-0.22 ( implementation \336le is simply a collection of the sour) 150.59 486.62 P
-0.22 (ce r) 406.02 486.62 P
-0.22 (ecor) 422.85 486.62 P
-0.22 (ds that we) 443.16 486.62 P
(developed earlier for cr) 99.65 472.62 T
(eating and saying angles, latitudes, and longitudes.) 213.35 472.62 T
5 9 Q
(// Implementation module) 105.65 640.95 T
4 F
(define module position-implementation) 105.65 629.95 T
5 F
(// External interface) 116.45 618.95 T
4 F
(use position;) 116.45 607.95 T
5 F
(// Substrate modules) 116.45 596.95 T
4 F
(use angle;) 116.45 585.95 T
(use say-implementor;) 116.45 574.95 T
(use dylan;) 116.45 563.95 T
(end module angle-implementation;) 105.65 552.95 T
8 10 Q
(The) 199.2 439.29 T
4 9 Q
(angle) 219.21 439.29 T
8 10 Q
( implementation \336le:) 246.21 439.29 T
4 9 Q
(angle.dylan) 337.91 439.29 T
8 10 Q
(.) 397.31 439.29 T
4 9 Q
(Module: angle-implementation) 105.65 419.95 T
(define abstract class <angle> \050<sixty-unit>\051) 105.65 400.95 T
(end class <angle>;) 105.65 389.95 T
(define method say \050angle :: <angle>\051 => \050\051) 105.65 370.95 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 116.45 359.95 T
(format-out\050"%d degrees %d minutes %d seconds",) 116.45 348.95 T
(degrees, minutes, seconds\051;) 175.85 337.95 T
(end method say;) 105.65 326.95 T
(define class <relative-angle> \050<angle>\051) 105.65 307.95 T
(end class <relative-angle>;) 105.65 296.95 T
(define method say \050angle :: <relative-angle>\051 => \050\051) 105.65 277.95 T
(format-out\050" %d degrees", decode-total-seconds\050angle\051\051;) 116.45 266.95 T
(end method say;) 105.65 255.95 T
(define abstract class <directed-angle> \050<angle>\051) 105.65 236.95 T
(virtual slot direction :: <symbol>;) 116.45 225.95 T
(slot internal-direction :: <symbol>;) 116.45 214.95 T
(keyword direction:;) 116.45 203.95 T
(end class <directed-angle>;) 105.65 192.95 T
8 10 Q
(The) 164.94 660.29 T
4 9 Q
(angle-library) 184.95 660.29 T
8 10 Q
( \336le:) 255.15 660.29 T
4 9 Q
(angle-library.dylan) 276.27 660.29 T
8 10 Q
(.) 378.87 660.29 T
9 F
( \050contin) 381.65 660.29 T
(ued\051) 414.34 660.29 T
99.65 672.83 99.65 546.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 546.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 545.95 513.77 545.95 2 L
V
N
99.65 451.83 99.65 186.08 2 L
V
N
513.65 451.83 513.65 186.08 2 L
V
N
99.52 451.95 513.77 451.95 2 L
V
N
99.52 431.95 513.77 431.95 2 L
V
N
99.52 185.95 513.77 185.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 245
%%Page: "232" 246
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(232) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method initialize \050angle :: <directed-angle>, #key direction: dir\051) 105.65 640.95 T
(next-method\050\051;) 116.45 629.95 T
(angle.direction := dir;) 116.45 618.95 T
(end method initialize;) 105.65 607.95 T
(define method direction \050angle :: <directed-angle>\051 => \050dir :: <symbol>\051) 105.65 588.95 T
(angle.internal-direction;) 116.45 577.95 T
(end method direction;) 105.65 566.95 T
(define method direction-setter) 105.65 547.95 T
(\050dir :: <symbol>, angle :: <directed-angle>\051 => \050new-dir :: <symbol>\051) 127.25 536.95 T
(angle.internal-direction := dir;) 116.45 525.95 T
(end method direction-setter;) 105.65 514.95 T
(define method say \050angle :: <directed-angle>\051 => \050\051) 105.65 495.95 T
(next-method\050\051;) 116.45 484.95 T
(format-out\050" %s", angle.direction\051;) 116.45 473.95 T
(end method say;) 105.65 462.95 T
(define class <latitude> \050<directed-angle>\051) 105.65 443.95 T
(end class <latitude>;) 105.65 432.95 T
(define method say \050latitude :: <latitude>\051 => \050\051) 105.65 413.95 T
(next-method\050\051;) 116.45 402.95 T
(format-out\050" latitude\134n"\051;) 116.45 391.95 T
(end method say;) 105.65 380.95 T
(define method direction-setter) 105.65 361.95 T
(\050dir :: <symbol>, latitude :: <latitude>\051 => \050new-dir :: <symbol>\051) 127.25 350.95 T
(if \050dir == #"north" | dir == #"south"\051) 116.45 339.95 T
(next-method\050\051;) 127.25 328.95 T
(else) 116.45 317.95 T
(error\050"%= is not north or south", dir\051;) 127.25 306.95 T
(end if;) 116.45 295.95 T
(end method direction-setter;) 105.65 284.95 T
(define class <longitude> \050<directed-angle>\051) 105.65 265.95 T
(end class <longitude>;) 105.65 254.95 T
(define method say \050longitude :: <longitude>\051 => \050\051) 105.65 235.95 T
(next-method\050\051;) 116.45 224.95 T
(format-out\050" longitude\134n"\051;) 116.45 213.95 T
(end method say;) 105.65 202.95 T
8 10 Q
(The) 172.85 660.29 T
4 9 Q
(angle) 192.86 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(angle.dylan) 311.56 660.29 T
8 10 Q
(.) 370.96 660.29 T
9 F
( \050contin) 373.74 660.29 T
(ued\051) 406.43 660.29 T
99.65 672.83 99.65 196.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 196.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 195.95 513.77 195.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 246
%%Page: "233" 247
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14.4 The) 415.36 702.62 T
5 F
(angle) 450.98 702.62 T
0 F
( library) 479.48 702.62 T
2 F
(233) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.4.3  The) 99.65 517.29 T
4 12 Q
(position) 157.13 517.29 T
3 13 Q
( implementation \336le) 214.73 517.29 T
1 11 Q
-0.3 (The) 99.65 497.62 P
4 10 Q
-0.65 (position) 120.51 497.62 P
1 11 Q
-0.3 ( implementation \336le is simply a collection of the sour) 168.51 497.62 P
-0.3 (ce r) 423.23 497.62 P
-0.3 (ecor) 439.98 497.62 P
-0.3 (ds that) 460.29 497.62 P
(we developed earlier for cr) 99.65 483.62 T
(eating and saying absolute and r) 230.55 483.62 T
(elative positions.) 388.71 483.62 T
4 9 Q
(define method direction-setter) 105.65 640.95 T
(\050dir :: <symbol>, longitude :: <longitude>\051 => \050new-dir :: <symbol>\051) 127.25 629.95 T
(if \050dir == #"east" | dir == #"west"\051) 116.45 618.95 T
(next-method\050\051;) 127.25 607.95 T
(else) 116.45 596.95 T
(error\050"%= is not east or west", dir\051;) 127.25 585.95 T
(end if;) 116.45 574.95 T
(end method direction-setter;) 105.65 563.95 T
8 10 Q
(The) 183 450.29 T
4 9 Q
(position) 203.01 450.29 T
8 10 Q
( implementation \336le:) 246.21 450.29 T
4 9 Q
(position.dylan) 337.91 450.29 T
8 10 Q
(.) 413.51 450.29 T
4 9 Q
(Module: position-implementation) 105.65 430.95 T
(define abstract class <position> \050<object>\051) 105.65 411.95 T
(end class <position>;) 105.65 400.95 T
(define class <absolute-position> \050<position>\051) 105.65 381.95 T
(slot latitude :: <latitude>, required-init-keyword: latitude:;) 116.45 370.95 T
(slot longitude :: <longitude>, required-init-keyword: longitude:;) 116.45 359.95 T
(end class <absolute-position>;) 105.65 348.95 T
(define method say \050position :: <absolute-position>\051 => \050\051) 105.65 329.95 T
(say\050position.latitude\051;) 116.45 318.95 T
(say\050position.longitude\051;) 116.45 307.95 T
(end method say;) 105.65 296.95 T
(define class <relative-position> \050<position>\051) 105.65 277.95 T
5 F
(// Distance is in miles) 116.45 266.95 T
4 F
(slot distance :: <single-float>, required-init-keyword: distance:;) 116.45 255.95 T
5 F
(// Angle is in degrees) 116.45 244.95 T
4 F
(slot angle :: <angle>, required-init-keyword: angle:;) 116.45 233.95 T
(end class <relative-position>;) 105.65 222.95 T
(define method say \050position :: <relative-position>\051 => \050\051) 105.65 203.95 T
(format-out\050"%s miles away at heading ", position.distance\051;) 116.45 192.95 T
(say\050position.angle\051;) 116.45 181.95 T
(end method say;) 105.65 170.95 T
8 10 Q
(The) 172.85 660.29 T
4 9 Q
(angle) 192.86 660.29 T
8 10 Q
( implementation \336le:) 219.86 660.29 T
4 9 Q
(angle.dylan) 311.56 660.29 T
8 10 Q
(.) 370.96 660.29 T
9 F
( \050contin) 373.74 660.29 T
(ued\051) 406.43 660.29 T
99.65 672.83 99.65 557.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 557.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 556.95 513.77 556.95 2 L
V
N
99.65 462.83 99.65 164.08 2 L
V
N
513.65 462.83 513.65 164.08 2 L
V
N
99.52 462.95 513.77 462.95 2 L
V
N
99.52 442.95 513.77 442.95 2 L
V
N
99.52 163.95 513.77 163.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 247
%%Page: "234" 248
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(234) 63.65 702.62 T
0 F
(Chapter 14) 87.4 702.62 T
(Four Complete Libraries) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(14.4.4  The) 99.65 645.29 T
4 12 Q
(angle) 157.13 645.29 T
3 13 Q
( LID \336le) 193.13 645.29 T
1 11 Q
-0.19 (Because we have chosen to put the sour) 99.65 625.62 P
-0.19 (ce r) 291.08 625.62 P
-0.19 (ecor) 307.94 625.62 P
-0.19 (ds for positions in a separate inter-) 328.24 625.62 P
(change \336le, the LID \336le lists thr) 99.65 611.62 T
(ee Dylan \336les that make up the) 251.37 611.62 T
4 10 Q
(angle) 404.85 611.62 T
1 11 Q
( library) 434.85 611.62 T
(.) 469.17 611.62 T
3 15 Q
(14.5  Summar) 99.65 484.95 T
(y) 179.76 484.95 T
1 11 Q
(The str) 99.65 464.62 T
(uctur) 133.32 464.62 T
(e of pr) 159.2 464.62 T
(otocol and substrate libraries that we have cr) 190.4 464.62 T
(eated is per) 408.03 464.62 T
(haps) 463.77 464.62 T
(overly complex for the simple functionality that we have implemented her) 99.65 450.62 T
(e.) 461.65 450.62 T
(However) 99.65 436.62 T
(, the libraries illustrate the power of the Dylan module and library sys-) 144.26 436.62 T
(tem to modularize lar) 99.65 422.62 T
(ge pr) 204.99 422.62 T
(ojects into easily manageable sub-pr) 229.89 422.62 T
(ojects, and to) 405.37 422.62 T
(contr) 99.65 408.62 T
(ol the interfaces among those pr) 124.67 408.62 T
(ojects.) 280.09 408.62 T
8 10 Q
(The LID \336le:) 245.61 578.29 T
4 9 Q
(angle.lid) 302.3 578.29 T
8 10 Q
(.) 350.9 578.29 T
4 9 Q
(library:) 105.65 558.95 T
(angle) 154.25 558.95 T
(files:) 105.65 547.95 T
(angle-library) 154.25 547.95 T
(angle) 154.25 536.95 T
(position) 154.25 525.95 T
99.65 590.83 99.65 519.08 2 L
V
0.25 H
0 Z
N
513.65 590.83 513.65 519.08 2 L
V
N
99.52 590.95 513.77 590.95 2 L
V
N
99.52 570.95 513.77 570.95 2 L
V
N
99.52 518.95 513.77 518.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 248
%%Page: "235" 249
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(235) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 555.93 504.08 615.1 R
7 X
V
1 30 Q
0 X
(Part III.) 99.65 595.1 T
(Sample Application) 214.73 595.1 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(Chapter 15,) 99.65 449.62 T
0 F
(Design of the Airport Application) 161.16 449.62 T
1 F
(, describes the goals and overall) 311.08 449.62 T
(design of the airport example.) 99.65 435.62 T
(Chapter 16,) 126.65 421.62 T
0 F
(De\336nition of a New Collection) 188.16 421.62 T
1 F
(, shows you how to build a new) 323.12 421.62 T
(class of sequence, called a) 99.65 407.62 T
2 F
(sorted sequence) 227.56 407.62 T
1 F
(.) 307.9 407.62 T
(Chapter 17,) 126.65 393.62 T
0 F
(The Airport Application) 188.16 393.62 T
1 F
(, contains the complete, working code of) 295.9 393.62 T
(the airport example. This chapter illustrates many techniques described in the) 99.65 379.62 T
(pr) 99.65 365.62 T
(evious chapters, including collections, contr) 110.41 365.62 T
(ol-\337ow operators, initialization of) 323.24 365.62 T
(slots, and libraries and modules. The chapters in Part IV describe advanced tech-) 99.65 351.62 T
(niques that you can use to impr) 99.65 337.62 T
(ove the code pr) 252.92 337.62 T
(esented in Part III.) 327.56 337.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "235" 249
%%Page: "236" 250
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "236" 250
%%Page: "237" 251
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(237) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(15) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(15) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Design of the Airport) 101.65 591.4 T
(Application) 99.65 558.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.14 (In this chapter) 99.65 449.62 P
-0.14 (, we explor) 168.6 449.62 P
-0.14 (e the design of an airport application that uses the) 221.92 449.62 P
4 10 Q
-0.32 (time) 466.29 449.62 P
1 11 Q
-0.14 (,) 490.29 449.62 P
4 10 Q
(angle) 99.65 435.62 T
1 11 Q
(, and) 129.65 435.62 T
4 10 Q
(say) 156.52 435.62 T
1 11 Q
( libraries.) 174.52 435.62 T
3 15 Q
(15.1  Goals of the airpor) 99.65 395.95 T
(t application) 240.03 395.95 T
1 11 Q
-0.13 (Thr) 99.65 375.62 P
-0.13 (oughout this book, we have been developing components for an airport appli-) 116.94 375.62 P
(cation. This application deals with airports, air) 99.65 361.62 T
(craft, gates, and r) 325.76 361.62 T
(elated objects.) 409.4 361.62 T
(Figur) 99.65 347.62 T
(e 15.1 shows a diagram of a simple airport.) 125.86 347.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 170.68 495.65 178.67 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 15.1) 199.93 182 T
8 F
(Objects in a simple air) 258.29 182 T
(por) 356.95 182 T
(t.) 371.8 182 T
0 0 0 1 0 0 0 K
99.65 194.67 495.65 331.95 C
109.65 198.67 485.65 329.95 C
0 -364 93 0 212 364 119 115.65 204.67 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f15-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f15-1 .eps)%%CreationDate: (6/5/96) (10:44 AM)%%BoundingBox: -364 93 0 212%%HiResBoundingBox: -363.1583 93.0083 -0.745 211.4139%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -190.5 143 -190.5 143%AI3_TileBox: -465.5 -222 86.5 508%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI5_OpenToView: -406.5 323 2 1011 727 18 1 1 3 40%AI5_OpenViewLayers: 77%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4510.5 4463 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4510.5 4463 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4510.5 4463 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Foreground) Ln0 Au0 R0 G300 Ar0 J 0 j 0.5 w 3.8636 M []0 d%AI3_Note:0 D-41.9837 124.0722 m-45.1819 125.2446 -90.6441 141.3516 -93.8033 142.032 c-96.9626 142.7124 -98.7907 141.9503 -98.9956 141.1345 c-99.3733 139.6301 -97.1182 137.7469 -94.3355 136.6907 c-91.5528 135.6345 -47.8893 119.0378 -43.3437 118.5061 c-38.1529 117.8988 -35.4213 116.7216 -34.7669 118.2715 c-34.1635 119.7004 -38.0728 122.6387 -41.9837 124.0722 cs-38.4529 118.8772 m-37.8495 120.3061 L-49.2821 123.6283 L-49.433 123.177 L-38.4529 118.8772 Ls-78.6991 124.1853 mSu-38.8388 109.473 m-41.0196 110.4533 L-43.1935 118.205 LS-39.0558 117.8245 m-38.9889 109.7741 L-38.0113 109.3217 L-37.5511 117.823 LSUu-32.4706 128.1871 m-34.7825 128.7972 L-41.3492 124.1397 LS-37.8939 121.8321 m-32.7768 128.0475 L-31.7322 127.784 L-36.7233 120.8867 LSU-94.56 137.8947 m-94.483 139.6251 -93.7298 140.3767 v-92.9767 141.1283 -94.8576 141.1302 -95.3851 140.3031 c-95.9126 139.4761 -96.2892 139.1003 -94.56 137.8947 csu-65.23 125.8266 m-68.3889 126.8832 L-69.745 125.0789 -69.5968 122.8969 v-69.4486 120.7149 -68.3425 98.895 Y-66.9136 98.2916 L-65.23 125.8266 Ls-66.6114 99.5704 m-66.8408 95.884 L-68.6459 96.4877 -69.6235 96.9402 v-70.6011 97.3926 -71.203 97.4685 -71.8772 100.3282 c-72.5513 103.1878 -79.294 131.0325 Y-69.8178 127.4865 LSu-74.0495 109.5845 m-74.7988 112.5948 L-76.6034 113.5747 L-77.6596 110.792 L-74.0495 109.5845 Ls-77.6596 110.792 m-79.0885 111.3954 L-78.1829 114.103 L-76.6034 113.5747 LSUu-76.4475 118.9164 m-77.1967 121.9266 L-79.0014 122.9066 L-80.0576 120.1239 L-76.4475 118.9164 Ls-80.0576 120.1239 m-81.4864 120.7272 L-80.5808 123.4348 L-79.0014 122.9066 LSUUu-63.1344 131.7476 m-66.2544 132.9138 L-66.1733 135.1694 -64.6851 136.7723 v-63.197 138.375 -48.6091 154.6393 Y-47.1188 154.2093 L-63.1344 131.7476 Ls-47.6884 153.0251 m-45.5475 156.0349 L-47.3304 156.7013 -48.3748 156.9647 v-49.4194 157.2281 -49.9348 157.5479 -52.2581 155.7493 c-54.5813 153.9505 -77.3409 136.5496 Y-67.7446 133.3437 LSu-59.7704 149.9211 m-62.2466 148.0528 L-64.2659 148.4265 L-63.3361 151.254 L-59.7704 149.9211 Ls-63.3361 151.254 m-64.8263 151.6839 L-65.8258 149.0096 L-64.2659 148.4265 LSUu-67.5055 144.1764 m-69.9818 142.3079 L-72.001 142.6817 L-71.0711 145.5091 L-67.5055 144.1764 Ls-71.0711 145.5091 m-72.5614 145.9391 L-73.5611 143.2648 L-72.001 142.6817 LSUUU800 Ar0.65 w-56.5 141 m-1.1667 120.3333 l-10.8333 95.3333 l-66.1667 115 lS-76.4475 118.9164 m-240.8333 178 l-266.5 155.6667 l-266.5 98 l-283.5 98 l-283.5 179.3333 l-267.5 179.3333 l-267.5 169.3333 l-252.5 181.3333 l-263.5 186 l-254.1667 211 l-67.5 144.25 lS1 Ap-311.1667 93.3333 m-311.1667 173 L-362.8333 173 L-362.8333 93.3333 L-311.1667 93.3333 Ls0 Ap-311.1667 166 m-283.8333 166 lS-311.1667 147.6667 m-283.8333 147.6667 lS-311.1667 130.2708 m-283.8333 130.2708 lS-311.1667 111.9375 m-283.8333 111.9375 lS0 To1 0 0 1 -337.1667 139.3333 0 TpTP-15.9972 0 Td0 Tr0 O0 g1 w 4 M/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(terminal\r) Tx 12.9957 -11 Td(A) Tx (\r) TX TO0 To1 0 0 1 -296.8333 154 0 TpTP-5.503 0 Td0 Tr(A1) Tx (\r) TX TO0 To1 0 0 1 -296.8333 119 0 TpTP-5.503 0 Td0 Tr(A2) Tx (\r) TX TO0 To0 1 -1 0 -272.5 139.3333 0 TpTP-26.5056 0 Td0 Tr(taxiway Echo) Tx (\r) TX TO0 To0.9438 -0.3304 0.3304 0.9438 -145.4167 154.6667 0 TpTP-33.0051 0 Td0 Tr(runway 11R-29L) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 194.67 495.65 331.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 251
%%Page: "238" 252
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(238) 63.65 702.62 T
0 F
(Chapter 15) 87.4 702.62 T
(Design of the Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.25 (In Figur) 99.65 512.63 P
-0.25 (e 15.1, we see a single) 138.47 512.63 P
2 F
-0.25 (terminal) 244.71 512.63 P
1 F
-0.25 (, A. It has two) 287.48 512.63 P
2 F
-0.25 (gates) 356.64 512.63 P
1 F
-0.25 (, A1 and A2, a) 382.3 512.63 P
2 F
-0.25 (taxiway) 452.52 512.63 P
1 F
-0.25 (,) 490.4 512.63 P
(Echo, a) 99.65 498.63 T
2 F
(runway) 137.41 498.63 T
1 F
(, 1) 174.69 498.63 T
(1R-29L, and an) 185.09 498.63 T
2 F
(aircraft) 260.84 498.63 T
1 F
( appr) 296.89 498.63 T
(oaching the r) 322.51 498.63 T
(unway) 386.03 498.63 T
(.) 418.64 498.63 T
(When landing, an air) 126.65 484.63 T
(craft goes fr) 229.01 484.63 T
(om the sky to a r) 286.36 484.63 T
(unway to a taxiway to a) 367.33 484.63 T
(gate. Figur) 99.65 470.63 T
(e 15.2 is a state diagram showing these transitions for both inbound) 151.83 470.63 T
(and outbound air) 99.65 456.63 T
(craft.) 184.69 456.63 T
(Our \336rst goal for this application is as follows: given a set of incoming air-) 126.65 442.63 T
(craft at various positions in the sky) 99.65 428.63 T
(, we want to pr) 268.65 428.63 T
(edict which gate each air) 341.86 428.63 T
(craft) 461.95 428.63 T
-0.12 (will use when it arrives, and to estimate the arrival time of the air) 99.65 414.63 P
-0.12 (craft at the gate.) 415.59 414.63 P
(This information is displayed on the Arrivals monitors in an airport.) 99.65 400.63 T
-0.01 (Our second goal for the application is to pr) 126.65 386.63 P
-0.01 (ovide additional information for) 335.18 386.63 P
-0.21 (the gr) 99.65 372.63 P
-0.21 (ound cr) 127.71 372.63 P
-0.21 (ew) 165.04 372.63 P
-0.21 (. W) 178.47 372.63 P
-0.21 (e must state the entir) 193.75 372.63 P
-0.21 (e path that an incoming air) 294.24 372.63 P
-0.21 (craft will take,) 424.05 372.63 P
(including the r) 99.65 358.63 T
(unway) 171.42 358.63 T
(, the taxiway) 204.03 358.63 T
(, and the gate. W) 265.07 358.63 T
(e must also state the time that) 345.9 358.63 T
-0.4 (an air) 99.65 344.63 P
-0.4 (craft is expected to be at each point. For example, for an inbound air) 126.75 344.63 P
-0.4 (craft, we) 451.77 344.63 P
(want to display information like the following:) 99.65 330.63 T
6 9 Q
(12:30:) 99.65 309.96 T
(Aircraft Cardinal at Runway 11R-29L) 137.45 309.96 T
(12:43:) 99.65 298.96 T
(Aircraft Cardinal at Taxiway Echo) 137.45 298.96 T
(12:47:) 99.65 287.96 T
(Aircraft Cardinal at Gate A2) 137.45 287.96 T
1 11 Q
(The application considers departing air) 99.65 267.63 T
(craft as well as arriving air) 290.52 267.63 T
(craft.) 419.59 267.63 T
3 15 Q
(15.2  Objects that model an airpor) 99.65 227.96 T
(t) 297.45 227.96 T
1 11 Q
(W) 99.65 207.63 T
(e need to de\336ne classes that r) 109.64 207.63 T
(epr) 251.04 207.63 T
(esent the objects in Figur) 267.07 207.63 T
(es 15.1 and 15.2. Note) 387.4 207.63 T
-0.38 (that the application displays information about the path of an air) 99.65 193.63 P
-0.38 (craft fr) 410.62 193.63 P
-0.38 (om gate to) 442.77 193.63 P
(sky and sky to gate; the air) 99.65 179.63 T
(craft stops at the gate and does not enter the terminal) 229.48 179.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 537.96 495.65 545.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 15.2) 109.45 549.29 T
8 F
(T) 167.81 549.29 T
(r) 172.72 549.29 T
(ansitions betw) 175.95 549.29 T
(een sky and gate f) 239.21 549.29 T
(or outbound and inbound aircr) 320.63 549.29 T
(aft.) 453.94 549.29 T
0 0 0 1 0 0 0 K
99.65 561.95 495.65 672.95 C
149.65 565.95 445.65 670.95 C
0 -282 71 2 164 284 93 155.65 571.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f15-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f15-2 .eps)%%CreationDate: (6/5/96) (10:44 AM)%%BoundingBox: -282 71 2 164%%HiResBoundingBox: -280.6611 71.4763 0.9988 163.8782%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -114.5 119 -114.5 119%AI3_TileBox: -389 -246 163 484%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -226.5 247 3 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4434.5 4439 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4434.5 4439 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4434.5 4439 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D-282.5 4439 m-282.5 -4201 L(N) *0 To1 0 0 1 -255.5 114 0 TpTP-6.75 0 Td0 Tr0 O0 g/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(sky) Tx (\r) TX TO0 To1 0 0 1 -178 114 0 TpTP-14.5009 0 Td0 Tr(runway) Tx (\r) TX TO0 To1 0 0 1 -101.5 114 0 TpTP-15.0007 0 Td0 Tr(taxiway) Tx (\r) TX TO0 To1 0 0 1 -25 114 0 TpTP-8.755 0 Td0 Tr(gate) Tx (\r) TX TO0 To1 0 0 1 -52.25 155.5 0 TpTP-34.7574 0 Td0 Tr(Outbound aircraft) Tx (\r) TX TO0 To1 0 0 1 -229.5 73.5 0 TpTP-31.2572 0 Td0 Tr(Inbound aircraft) Tx (\r) TX TO1 Ap0 R0 G0.5 w-236.5001 107.5 m-232.2205 107.5 -228.7509 111.5295 -228.7509 116.5 C-228.7509 116.5 L-228.7509 121.4705 -232.2205 125.5 -236.5001 125.5 C-272.6621 125.5 L-276.9417 125.5 -280.4113 121.4705 -280.4113 116.5 C-280.4113 116.5 L-280.4113 111.5295 -276.9417 107.5 -272.6621 107.5 C-236.5001 107.5 Ls-160.0001 107.5 m-155.7205 107.5 -152.2509 111.5295 -152.2509 116.5 C-152.2509 116.5 L-152.2509 121.4705 -155.7205 125.5 -160.0001 125.5 C-196.1621 125.5 L-200.4417 125.5 -203.9113 121.4705 -203.9113 116.5 C-203.9113 116.5 L-203.9113 111.5295 -200.4417 107.5 -196.1621 107.5 C-160.0001 107.5 Ls-83.5001 107.5 m-79.2205 107.5 -75.7509 111.5295 -75.7509 116.5 C-75.7509 116.5 L-75.7509 121.4705 -79.2205 125.5 -83.5001 125.5 C-119.6621 125.5 L-123.9417 125.5 -127.4113 121.4705 -127.4113 116.5 C-127.4113 116.5 L-127.4113 111.5295 -123.9417 107.5 -119.6621 107.5 C-83.5001 107.5 Ls-7.0001 107.5 m-2.7205 107.5 0.749 111.5295 0.749 116.5 C0.749 116.5 L0.749 121.4705 -2.7205 125.5 -7.0001 125.5 C-43.1621 125.5 L-47.4417 125.5 -50.9113 121.4705 -50.9113 116.5 C-50.9113 116.5 L-50.9113 111.5295 -47.4417 107.5 -43.1621 107.5 C-7.0001 107.5 Lsu0 Ap0.65 w-90 158.5 m-112.5 158.5 lS0 O0 g1 w-110.9542 160.7379 m-119.41 158.4725 l-110.9542 156.2065 l-110.9542 160.7379 lfUu0 R0 G0.65 w-193.3892 75.9792 m-170.8892 75.9792 lS0 O0 g1 w-172.4349 78.2171 m-163.9792 75.9516 l-172.4349 73.6857 l-172.4349 78.2171 lfUu0 R0 G0.65 w-254.1398 107.325 m-248.6667 81.6667 -193.3333 84.6667 -184.1398 99.1584 cS0 O0 g1 w-182.0893 98.2402 m-180.4042 106.8305 l-186.1587 100.2335 l-182.0893 98.2402 lfUu0 R0 G0.65 w-181.9036 125.816 m-187.3768 151.4743 -242.7101 148.4743 -251.9036 133.9826 cS0 O0 g1 w-253.9541 134.9008 m-255.6392 126.3105 l-249.8847 132.9076 l-253.9541 134.9008 lfUu0 R0 G0.65 w-175.4523 107.325 m-169.9792 81.6667 -114.6458 84.6667 -105.4523 99.1584 cS0 O0 g1 w-103.4018 98.2402 m-101.7168 106.8305 l-107.4713 100.2335 l-103.4018 98.2402 lfUu0 R0 G0.65 w-103.2161 125.816 m-108.6893 151.4743 -164.0226 148.4743 -173.2161 133.9826 cS0 O0 g1 w-175.2666 134.9008 m-176.9517 126.3105 l-171.1972 132.9076 l-175.2666 134.9008 lfUu0 R0 G0.65 w-96.7648 107.325 m-91.2917 81.6667 -35.9584 84.6667 -26.7648 99.1584 cS0 O0 g1 w-24.7143 98.2402 m-23.0293 106.8305 l-28.7838 100.2335 l-24.7143 98.2402 lfUu0 R0 G0.65 w-24.5286 125.816 m-30.0018 151.4743 -85.3351 148.4743 -94.5286 133.9826 cS0 O0 g1 w-96.5792 134.9008 m-98.2642 126.3105 l-92.5097 132.9076 l-96.5792 134.9008 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 561.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 252
%%Page: "239" 253
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(15.2 Objects that model an airport) 376.67 702.62 T
2 F
(239) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(itself. Ther) 99.65 665.62 T
(efor) 151.29 665.62 T
(e, we do not need to de\336ne a terminal class. Our design includes) 170.38 665.62 T
(these airport classes:) 99.65 651.62 T
4 9 Q
(<airport>) 126.65 630.95 T
1 11 Q
(,) 175.25 630.95 T
4 9 Q
( <gate>) 178 630.95 T
1 11 Q
(,) 215.8 630.95 T
4 9 Q
( <taxiway>) 218.55 630.95 T
1 11 Q
(,) 272.55 630.95 T
4 9 Q
( <runway>) 275.3 630.95 T
1 11 Q
(,) 323.9 630.95 T
4 9 Q
( <sky>) 326.65 630.95 T
1 11 Q
(,) 359.05 630.95 T
4 9 Q
( <vehicle>) 361.8 630.95 T
1 11 Q
(,) 415.8 630.95 T
4 9 Q
( <aircraft>) 418.55 630.95 T
1 11 Q
(A vehicle is any object that is self-pr) 99.65 610.62 T
(opelled. Air) 274.34 610.62 T
(craft ar) 332.02 610.62 T
(e vehicles that ar) 366.4 610.62 T
(e capable) 447.74 610.62 T
(of \337ying. In our design, the sky ar) 99.65 596.62 T
(ound the airport, the gates, the taxiways, and) 263.86 596.62 T
(the r) 99.65 582.62 T
(unways each keep track of each air) 121.91 582.62 T
(craft as the latter moves fr) 291.22 582.62 T
(om the sky to) 417.54 582.62 T
(the gate and back to the sky again. One common attribute of the sky) 99.65 568.62 T
(, gates, taxi-) 428.98 568.62 T
-0.1 (ways, and r) 99.65 554.62 P
-0.1 (unways is that each of them can hold an air) 156.04 554.62 P
-0.1 (craft, or mor) 365.9 554.62 P
-0.1 (e than one air-) 426.15 554.62 P
-0.01 (craft. Because these objects can hold vehicles, we can think of them as containers.) 99.65 540.62 P
(Our design uses this class to r) 99.65 526.62 T
(epr) 243.88 526.62 T
(esent all types of containers:) 259.91 526.62 T
4 9 Q
(<vehicle-storage>) 126.65 505.95 T
1 11 Q
-0.37 (In our design, containers ar) 99.65 485.62 P
-0.37 (e connected to other containers. In the airport diagram) 231.28 485.62 P
(in Figur) 99.65 471.62 T
(e 15.1, gate A1 is connected to taxiway Echo, which is connected to r) 138.21 471.62 T
(un-) 469.36 471.62 T
(way 1) 99.65 457.62 T
(1R-29L. W) 128.08 457.62 T
(e can use a slot in the) 177.8 457.62 T
4 10 Q
(<vehicle-storage>) 283.49 457.62 T
1 11 Q
( class to model these) 385.49 457.62 T
(connections.) 99.65 443.62 T
(Since some containers can hold only one air) 126.65 429.62 T
(craft, wher) 338.71 429.62 T
(eas other containers) 391.18 429.62 T
(have mor) 99.65 415.62 T
(e complex behavior) 145.65 415.62 T
(, our design includes two subclasses of) 239.99 415.62 T
4 10 Q
(<vehicle-) 430.98 415.62 T
(storage>) 99.65 401.62 T
1 11 Q
(:) 147.65 401.62 T
4 9 Q
(<single-storage>) 126.65 380.95 T
1 11 Q
(,) 213.05 380.95 T
4 9 Q
( <multiple-storage>) 215.8 380.95 T
1 11 Q
-0.03 (Instances of) 99.65 360.62 P
4 10 Q
-0.07 (<single-storage>) 159.83 360.62 P
1 11 Q
-0.03 ( may hold a single air) 255.83 360.62 P
-0.03 (craft r) 360.29 360.62 P
-0.03 (egar) 389.13 360.62 P
-0.03 (dless of the dir) 410.16 360.62 P
-0.03 (ec-) 481.83 360.62 P
-0.45 (tion of travel. Instances of) 99.65 346.62 P
4 10 Q
-0.98 (<multiple-storage>) 225.62 346.62 P
1 11 Q
-0.45 ( may hold mor) 333.62 346.62 P
-0.45 (e than one air) 404.04 346.62 P
-0.45 (craft,) 468.62 346.62 P
(and each dir) 99.65 332.62 T
(ection is tr) 159.9 332.62 T
(eated separately) 210.34 332.62 T
(. For example,) 288.28 332.62 T
4 10 Q
(<gate>) 359.73 332.62 T
1 11 Q
( is a subclass of) 395.73 332.62 T
4 10 Q
(<single-storage>) 99.65 318.62 T
1 11 Q
(, and) 195.65 318.62 T
4 10 Q
(<sky>) 222.52 318.62 T
1 11 Q
( is a subclass of) 252.52 318.62 T
4 10 Q
(<multiple-storage>) 329.6 318.62 T
1 11 Q
(.) 437.6 318.62 T
-0.55 (All subclasses of) 126.65 304.62 P
4 10 Q
-1.2 (<vehicle-storage>) 208.11 304.62 P
1 11 Q
-0.55 ( must comply with the vehicle-storage) 310.11 304.62 P
(pr) 99.65 290.62 T
(otocol. In particular) 110.41 290.62 T
(, designers of) 205.45 290.62 T
4 10 Q
(<vehicle-storage>) 272.77 290.62 T
1 11 Q
( subclasses must ensur) 374.77 290.62 T
(e) 484.95 290.62 T
-0.01 (that the subclasses either inherit or de\336ne methods for all the key vehicle-storage) 99.65 276.62 P
(generic functions.) 99.65 262.62 T
(Certain classes \321 such as the time and position classes \321 r) 126.65 248.62 T
(epr) 412.91 248.62 T
(esent intangi-) 428.94 248.62 T
-0.21 (ble concepts. Other classes \321 such as airports, gates, r) 99.65 234.62 P
-0.21 (unways, and air) 360.11 234.62 P
-0.21 (craft \321 r) 437.9 234.62 P
-0.21 (ep-) 480.1 234.62 P
-0.07 (r) 99.65 220.62 P
-0.07 (esent physical objects. It may be useful to make that distinction in our classes, so) 103.79 220.62 P
(we de\336ne a class fr) 99.65 206.62 T
(om which all physical objects inherit:) 191.63 206.62 T
4 9 Q
(<physical-object>) 126.65 185.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "239" 253
%%Page: "240" 254
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(240) 63.65 702.62 T
0 F
(Chapter 15) 87.4 702.62 T
(Design of the Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Figur) 99.65 434.63 T
(e 15.3 shows the inheritance r) 125.86 434.63 T
(elationships among the classes that r) 268.9 434.63 T
(epr) 446.42 434.63 T
(esent) 462.45 434.63 T
(physical objects.) 99.65 420.63 T
3 15 Q
(15.3  Beha) 99.65 380.96 T
(vior) 160.34 380.96 T
(s of the objects) 182.73 380.96 T
1 11 Q
(The top-level function of our application is called) 99.65 360.63 T
4 10 Q
(process-aircraft) 341.86 360.63 T
1 11 Q
(. Given an) 437.86 360.63 T
(airport that has been pr) 99.65 346.63 T
(operly initialized,) 213.66 346.63 T
4 10 Q
(process-aircraft) 302.44 346.63 T
1 11 Q
( will simulate and) 398.44 346.63 T
(document the movement of all inbound air) 99.65 332.63 T
(craft thr) 308.66 332.63 T
(ough all the containers of the) 347.52 332.63 T
(airport, fr) 99.65 318.63 T
(om landing thr) 146.55 318.63 T
(ough takeof) 219.45 318.63 T
(f.) 277.3 318.63 T
(T) 126.65 304.63 T
(o pr) 132.38 304.63 T
(edict how long it will take for an air) 151.89 304.63 T
(craft to arrive at the airport, we) 325.66 304.63 T
-0.23 (need to compute the distance between the position of the air) 99.65 290.63 P
-0.23 (craft and the position) 390.04 290.63 P
(of the airport. Then, we must divide the distance by the speed to determine how) 99.65 276.63 T
(long it will take the air) 99.65 262.63 T
(craft to get fr) 209.26 262.63 T
(om one position to the other) 271.86 262.63 T
(. The) 408.33 262.63 T
4 10 Q
(flying-) 434.99 262.63 T
(time) 99.65 248.63 T
1 11 Q
( method will implement that computation in our design.) 123.65 248.63 T
(Once an air) 126.65 234.63 T
(craft appr) 182.1 234.63 T
(oaches the airport, it enters a series of containers. The) 229.7 234.63 T
(generic functions that constitute the vehicle-storage pr) 99.65 220.63 T
(otocol help us to generate) 363.57 220.63 T
(and simulate the transitions of the air) 99.65 206.63 T
(craft fr) 281.13 206.63 T
(om container to container) 313.66 206.63 T
(.) 437.6 206.63 T
-0.44 (W) 126.65 192.63 P
-0.44 (e summarize some of the operations in our design her) 136.64 192.63 P
-0.44 (e; we summarize the) 394.16 192.63 P
(vehicle-storage pr) 99.65 178.63 T
(otocol in Section 15.4.) 186.75 178.63 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 453.96 495.65 461.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 15.3) 100.38 465.29 T
8 F
(Inher) 158.74 465.29 T
(itance relationships among classes that represent ph) 181.68 465.29 T
(ysical objects) 414.82 465.29 T
(.) 474.13 465.29 T
0 0 0 1 0 0 0 K
99.65 477.95 495.65 672.95 C
128.65 481.95 466.65 670.95 C
0 139 307 465 484 326 177 134.65 487.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f15-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f15-3 .eps)%%CreationDate: (6/5/96) (10:45 AM)%%BoundingBox: 139 307 465 484%%HiResBoundingBox: 139.6553 307 464.7434 483.707%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 66 552 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 325.25 476.5 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 325.5 434.5 0 TpTP-45.8888 0 Td0 Tr(<physical-object>) Tx (\r) TX TO0 To1 0 0 1 325.25 385 0 TpTP-45.8888 0 Td0 Tr(<vehicle-storage>) Tx (\r) TX TO0 To1 0 0 1 325.25 339.5 0 TpTP-48.5881 0 Td0 Tr(<multiple-storage>) Tx (\r) TX TO0 To1 0 0 1 437.75 339.5 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 200.75 339.5 0 TpTP-43.1894 0 Td0 Tr(<single-storage>) Tx (\r) TX TO0 To1 0 0 1 218 385 0 TpTP-24.2941 0 Td0 Tr(<airport>) Tx (\r) TX TO0 To1 0 0 1 437.5 385 0 TpTP-24.2941 0 Td0 Tr(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 161.25 309.25 0 TpTP-21.5947 0 Td0 Tr(<runway>) Tx (\r) TX TO0 To1 0 0 1 226.5 309.25 0 TpTP-16.196 0 Td0 Tr(<gate>) Tx (\r) TX TO0 To1 0 0 1 291.75 309.25 0 TpTP-24.2941 0 Td0 Tr(<taxiway>) Tx (\r) TX TO0 To1 0 0 1 357 309.25 0 TpTP-13.4967 0 Td0 Tr(<sky>) Tx (\r) TX TO324.5 4716 m324.5 -3924 L(N) *u0 R0 G0.65 w324.5 471.25 m324.5 453 lS0 O0 g1 w322.2621 454.5458 m324.5275 446.09 l326.7935 454.5458 l322.2621 454.5458 lfUu0 R0 G0.65 w324.5 427.5 m324.5 407.5 lS0 O0 g1 w322.2621 409.0458 m324.5275 400.59 l326.7935 409.0458 l322.2621 409.0458 lfUu0 R0 G0.65 w324.5 377.5 m324.5 356 lS0 O0 g1 w322.2621 357.5458 m324.5275 349.09 l326.7935 357.5458 l322.2621 357.5458 lfUu0 R0 G0.65 w437 377.5 m437 356 lS0 O0 g1 w434.7621 357.5458 m437.0275 349.09 l439.2935 357.5458 l434.7621 357.5458 lfUu0 R0 G0.65 w340 425 m421.5 398.5 lS0 O0 g1 w419.3373 396.8534 m428.0792 396.3932 l420.7385 401.1627 l419.3373 396.8534 lfUu0 R0 G0.65 w311 425.5 m230.5 398.5 lS0 O0 g1 w231.2572 401.1156 m223.9609 396.2788 l232.6982 396.8194 l231.2572 401.1156 lfUu0 R0 G0.65 w297.5 376 m220 352.5 lS0 O0 g1 w220.8324 355.0926 m213.3979 350.4709 l222.1473 350.7562 l220.8324 355.0926 lfUuu0 R0 G0.65 w186.5 334.5 m168.5 322 lS0 O0 g1 w168.4897 324.72 m162.8366 318.036 l171.0744 320.998 l168.4897 324.72 lfUUuu0 R0 G0.65 w315.6875 334.5 m297.6875 322 lS0 O0 g1 w297.6772 324.72 m292.0241 318.036 l300.2619 320.998 l297.6772 324.72 lfUUuu0 R0 G0.65 w198.8912 334.207 m216.8912 321.707 lS0 O0 g1 w216.9015 324.427 m222.5546 317.743 l214.3168 320.705 l216.9015 324.427 lfUUuu0 R0 G0.65 w329.3912 334.207 m347.3912 321.707 lS0 O0 g1 w347.4015 324.427 m353.0546 317.743 l344.8168 320.705 l347.4015 324.427 lfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 477.95 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "240" 254
%%Page: "241" 255
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(15.4 The vehicle-container protocol) 373.86 702.62 T
2 F
(241) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(process-aircraft) 99.65 666.95 T
0 11 Q
(airport time) 191.45 666.95 T
(Generic Function) 435.92 665.62 T
1 F
(This generic function simulates and documents the movement of air) 126.65 643.62 T
(craft) 457.55 643.62 T
(thr) 126.65 629.62 T
(ough the airport, including the time of each transition \321 for example,) 140.78 629.62 T
6 9 Q
(12:30:) 126.65 608.95 T
(Aircraft Cardinal at Runway 11R-29L) 164.45 608.95 T
(12:43:) 126.65 597.95 T
(Aircraft Cardinal at Taxiway Echo) 164.45 597.95 T
(12:47:) 126.65 586.95 T
(Aircraft Cardinal at Gate A2) 164.45 586.95 T
1 11 Q
(The) 126.65 566.62 T
0 F
(airport) 147.81 566.62 T
1 F
( is an instance of) 178.36 566.62 T
4 10 Q
(<airport>) 261.45 566.62 T
1 11 Q
(. The) 315.45 566.62 T
0 F
(time) 342.12 566.62 T
1 F
( is an instance of) 361.67 566.62 T
4 10 Q
(<time-of-) 444.77 566.62 T
(day>) 126.65 552.62 T
1 11 Q
(.) 150.65 552.62 T
4 9 Q
(distance-3d) 99.65 523.95 T
0 11 Q
(air) 164.45 523.95 T
(craft airport) 176.47 523.95 T
(Generic Function) 435.92 522.62 T
1 F
(This generic function r) 126.65 500.62 T
(eturns the distance between its two ar) 236.32 500.62 T
(guments. The) 420.12 500.62 T
0 F
(air-) 489.16 500.62 T
(craft) 126.65 486.62 T
1 F
( is an instance of) 147.01 486.62 T
4 10 Q
(<aircraft>) 230.1 486.62 T
1 11 Q
(, and the) 290.1 486.62 T
0 F
(airport) 334.98 486.62 T
1 F
( is an instance of) 365.53 486.62 T
4 10 Q
(<airport>) 448.62 486.62 T
1 11 Q
(.) 502.62 486.62 T
4 9 Q
(flying-time) 99.65 457.95 T
0 11 Q
(air) 164.45 457.95 T
(craft airport) 176.47 457.95 T
(Generic Function) 435.92 456.62 T
1 F
(This generic function r) 126.65 434.62 T
(eturns the time that it would take for the) 236.32 434.62 T
0 F
(air) 436.33 434.62 T
(craft) 448.35 434.62 T
1 F
(to \337y to) 471.46 434.62 T
(the) 126.65 420.62 T
0 F
(airport) 144.65 420.62 T
1 F
(.) 175.2 420.62 T
3 15 Q
(15.4  The vehic) 99.65 380.95 T
(le-container pr) 186.95 380.95 T
(otocol) 272.16 380.95 T
1 11 Q
-0.15 (Once the air) 99.65 360.62 P
-0.15 (craft appr) 158.16 360.62 P
-0.15 (oaches the airport, it enters a set of connected containers on) 205.6 360.62 P
(its way inbound to a particular gate. The air) 99.65 346.62 T
(craft eventually turns ar) 312.72 346.62 T
(ound and) 429.61 346.62 T
-0.14 (heads outbound towar) 99.65 332.62 P
-0.14 (d the sky) 209.9 332.62 P
-0.14 (. The vehicle-container pr) 252.77 332.62 P
-0.14 (otocol manages the tran-) 376.22 332.62 P
(sition of air) 99.65 318.62 T
(craft fr) 154.73 318.62 T
(om one container to another) 187.26 318.62 T
(. The generic functions that make) 323.54 318.62 T
-0.41 (up this pr) 99.65 304.62 P
-0.41 (otocol ar) 146.18 304.62 P
-0.41 (e summarized next. For all the generic functions that follow) 187.85 304.62 P
-0.41 (, the) 472.97 304.62 P
(value of the) 99.65 290.62 T
0 F
(vehicle) 159.64 290.62 T
1 F
( parameter must be an instance of) 189.79 290.62 T
4 10 Q
(<vehicle>) 356.61 290.62 T
1 11 Q
(, the value of the) 410.61 290.62 T
0 F
-0.12 (container) 99.65 276.62 P
1 F
-0.12 ( parameter must be an instance of) 141.4 276.62 P
4 10 Q
-0.26 (<vehicle-storage>) 307.38 276.62 P
1 11 Q
-0.12 (, and the value of) 409.38 276.62 P
(the) 99.65 262.62 T
0 F
(dir) 117.65 262.62 T
(ection) 130.29 262.62 T
1 F
( parameter must be either the symbol) 156.77 262.62 T
4 10 Q
(#"inbound") 341.22 262.62 T
1 11 Q
( or) 401.22 262.62 T
4 10 Q
(#"outbound") 417.07 262.62 T
1 11 Q
(.) 483.07 262.62 T
4 9 Q
(available?) 99.65 233.95 T
0 11 Q
(vehicle container dir) 159.05 233.95 T
(ection) 249.09 233.95 T
(Generic Function) 435.92 232.62 T
1 F
-0.17 (This generic function r) 126.65 210.62 P
-0.17 (eturns tr) 235.79 210.62 P
-0.17 (ue if ther) 277.11 210.62 P
-0.17 (e is space in) 320.43 210.62 P
0 F
-0.17 (container) 380.39 210.62 P
1 F
-0.17 ( for) 422.15 210.62 P
0 F
-0.17 (vehicle) 441.31 210.62 P
1 F
-0.17 ( to enter) 471.46 210.62 P
(for traveling in) 126.65 196.62 T
0 F
(dir) 202.35 196.62 T
(ection) 214.99 196.62 T
1 F
(.) 241.47 196.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "241" 255
%%Page: "242" 256
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(242) 63.65 702.62 T
0 F
(Chapter 15) 87.4 702.62 T
(Design of the Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(move-in-vehicle) 99.65 666.95 T
0 11 Q
(vehicle container dir) 186.05 666.95 T
(ection) 276.09 666.95 T
(Generic Function) 435.92 665.62 T
1 F
(This generic function moves the) 126.65 643.62 T
0 F
(vehicle) 284.8 643.62 T
1 F
( into the) 314.95 643.62 T
0 F
(container) 357.65 643.62 T
1 F
( in the) 399.4 643.62 T
0 F
(dir) 432.51 643.62 T
(ection) 445.15 643.62 T
1 F
( given.) 471.63 643.62 T
4 9 Q
(move-out-vehicle) 99.65 614.95 T
0 11 Q
(vehicle container dir) 191.45 614.95 T
(ection) 281.49 614.95 T
(Generic Function) 435.92 613.62 T
1 F
-0.21 (This generic function moves the) 126.65 591.62 P
0 F
-0.21 (vehicle) 283.77 591.62 P
1 F
-0.21 ( out of the) 313.92 591.62 P
0 F
-0.21 (container) 365.24 591.62 P
1 F
-0.21 ( in the) 407 591.62 P
0 F
-0.21 (dir) 439.49 591.62 P
-0.21 (ection) 452.13 591.62 P
1 F
-0.21 ( given.) 478.61 591.62 P
4 9 Q
(next-out) 99.65 562.95 T
0 11 Q
(container dir) 148.25 562.95 T
(ection) 205.39 562.95 T
(Generic Function) 435.92 561.62 T
1 F
(This generic function determines what vehicle, if any) 126.65 539.62 T
(, could move to the next) 383.12 539.62 T
(container) 126.65 525.62 T
(. If ther) 171.43 525.62 T
(e is such a vehicle, then) 206.45 525.62 T
4 10 Q
(next-out) 323.02 525.62 T
1 11 Q
( r) 371.02 525.62 T
(eturns the vehicle, the next) 377.92 525.62 T
(container in the dir) 126.65 511.62 T
(ection of travel, and the time it would take to make that) 219.42 511.62 T
(transition.) 126.65 497.62 T
4 9 Q
(next-landing-step) 99.65 468.95 T
0 11 Q
(container vehicle) 196.85 468.95 T
(Generic Function) 435.92 467.62 T
1 F
(This generic function r) 126.65 445.62 T
(eturns two values. The \336rst value is the class of the next) 236.32 445.62 T
(container into which) 126.65 431.62 T
0 F
(vehicle) 229.75 431.62 T
1 F
( may move fr) 259.9 431.62 T
(om) 324.49 431.62 T
0 F
(container) 342.96 431.62 T
1 F
(. The second value is how) 383.9 431.62 T
(long it will take) 126.65 417.62 T
0 F
(vehicle) 205.41 417.62 T
1 F
( to move into the next container) 235.56 417.62 T
(. This generic function is) 389.02 417.62 T
(used by the) 126.65 403.62 T
4 10 Q
(next-out) 185.64 403.62 T
1 11 Q
( generic function to accomplish part of the latter) 233.64 403.62 T
(\325s work.) 467.83 403.62 T
3 15 Q
(15.5  Sor) 99.65 363.95 T
(ted sequences) 151.17 363.95 T
1 11 Q
-0.26 (Part of what) 99.65 343.62 P
4 10 Q
-0.56 (process-aircraft) 161.54 343.62 P
1 11 Q
-0.26 ( will do in our example is to generate a collection) 257.54 343.62 P
-0.09 (of possible transition steps for air) 99.65 329.62 P
-0.09 (craft in or ar) 260.87 329.62 P
-0.09 (ound the airport. For example, if an) 320.43 329.62 P
(air) 99.65 315.62 T
(craft is on the r) 112.5 315.62 T
(unway) 185.26 315.62 T
(, then one possible transition step would be to move the) 217.87 315.62 T
(air) 99.65 301.62 T
(craft to the taxiway) 112.5 301.62 T
(. If ther) 205.1 301.62 T
(e ar) 240.13 301.62 T
(e many air) 257.8 301.62 T
(craft in the airport, ther) 309.14 301.62 T
(e ar) 422.73 301.62 T
(e many) 440.39 301.62 T
-0.37 (possible transitions that might take place at various time. The) 99.65 287.62 P
4 10 Q
-0.82 (process-aircraft) 397.27 287.62 P
1 11 Q
(method needs to consider these transitions in or) 99.65 273.62 T
(der) 332.51 273.62 T
(. That is, if an air) 348.03 273.62 T
(craft is r) 428.99 273.62 T
(eady) 468.48 273.62 T
(to land on a r) 99.65 259.62 T
(unway in 5 minutes, but another one is r) 164.23 259.62 T
(eady to take of) 360.88 259.62 T
(f in 2 min-) 432.27 259.62 T
(utes,) 99.65 245.62 T
4 10 Q
(process-aircraft) 125.3 245.62 T
1 11 Q
( should attempt to complete the take-of) 221.3 245.62 T
(f transition) 412.27 245.62 T
(befor) 99.65 231.62 T
(e completing the landing transition. T) 124.82 231.62 T
(o keep these transitions in time or) 307 231.62 T
(der) 471.04 231.62 T
(,) 486.56 231.62 T
(we use a collection called a) 99.65 217.62 T
2 F
(sorted sequence) 233.57 217.62 T
1 F
(.) 313.92 217.62 T
(Dylan does not pr) 126.65 203.62 T
(ovide a sorted sequence class in its built-in collection) 214.04 203.62 T
(library) 99.65 189.62 T
(. However) 131.22 189.62 T
(, Dylan does pr) 181.33 189.62 T
(ovide an extensible collection framework that) 255.49 189.62 T
(permits us to de\336ne sorted sequences ourselves. In fact, Dylan alr) 99.65 175.62 T
(eady pr) 417.64 175.62 T
(ovides) 454.75 175.62 T
(all the generic functions that we need to interact with sorted sequences:) 99.65 161.62 T
4 10 Q
(size) 449.2 161.62 T
1 11 Q
(,) 473.2 161.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "242" 256
%%Page: "243" 257
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(15.7 Summary) 450.89 702.62 T
2 F
(243) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
(shallow-copy) 99.65 665.62 T
1 11 Q
(,) 170.43 665.62 T
4 10 Q
(element) 175.93 665.62 T
1 11 Q
(,) 217.93 665.62 T
4 10 Q
(add!) 223.43 665.62 T
1 11 Q
(,) 247.43 665.62 T
4 10 Q
(pop) 252.93 665.62 T
1 11 Q
(,) 270.93 665.62 T
4 10 Q
(remove!) 276.43 665.62 T
1 11 Q
(, and) 318.43 665.62 T
4 10 Q
(forward-iteration-) 345.3 665.62 T
(protocol) 99.65 651.62 T
1 11 Q
(. W) 147.65 651.62 T
(e just need to pr) 163.14 651.62 T
(ovide methods for each of these generic functions) 240.87 651.62 T
(that implement these operations for sorted sequences. By de\336ning a method for) 99.65 637.62 T
4 10 Q
(forward-iteration-protocol) 99.65 623.62 T
1 11 Q
(, we allow sorted sequences to work with the) 255.65 623.62 T
(standar) 99.65 609.62 T
(d Dylan collection iterators discussed in Chapter 1) 136.17 609.62 T
(1,) 380.45 609.62 T
0 F
(Collections and) 394.2 609.62 T
(Contr) 99.65 595.62 T
(ol Flow) 125.73 595.62 T
1 F
(. Because sorted sequences ar) 158.42 595.62 T
(e generally useful, we de\336ne them in) 300.56 595.62 T
(their own library) 99.65 581.62 T
(, in the same manner as we did the time and angle components.) 181.1 581.62 T
3 15 Q
(15.6  T) 99.65 541.95 T
(esting) 137.22 541.95 T
1 11 Q
(W) 99.65 521.62 T
(e include in the application a test library) 109.64 521.62 T
(, which cr) 304.2 521.62 T
(eates instances of the classes) 351.55 521.62 T
-0.17 (described in this chapter) 99.65 507.62 P
-0.17 (, initializes these instances to a r) 217.8 507.62 P
-0.17 (easonable state, and calls) 371.99 507.62 P
4 10 Q
(process-aircraft) 99.65 493.62 T
1 11 Q
(. Pr) 195.65 493.62 T
(oviding test cases \050in a separate library\051 is a good way to) 211.94 493.62 T
(check the design, interface, and implementation of an application library) 99.65 479.62 T
(.) 451.33 479.62 T
3 15 Q
(15.7  Summar) 99.65 439.95 T
(y) 179.76 439.95 T
1 11 Q
(In this chapter) 99.65 419.62 T
(, we cover) 168.89 419.62 T
(ed the following:) 218.11 419.62 T
(\245) 108.65 399.62 T
(W) 126.65 399.62 T
(e discussed the goals of the airport application: to pr) 136.64 399.62 T
(edict the arrival time) 391.14 399.62 T
(and gate of an incoming air) 126.65 385.62 T
(craft, and to describe the entir) 259.84 385.62 T
(e path that an) 404.83 385.62 T
(incoming air) 126.65 371.62 T
(craft will take, including the time it is expected to be at each) 188.17 371.62 T
(point.) 126.65 357.62 T
(\245) 108.65 337.62 T
(W) 126.65 337.62 T
(e discussed the design of the airport application classes, and the opera-) 136.64 337.62 T
(tions to be performed on instances of the classes, including the vehicle-) 126.65 323.62 T
(container pr) 126.65 309.62 T
(otocol.) 185.75 309.62 T
(\245) 108.65 289.62 T
(W) 126.65 289.62 T
(e discussed how the time, angle, sorted sequence, and testing libraries) 136.64 289.62 T
(interact with the main airport application library) 126.65 275.62 T
(.) 362.22 275.62 T
(In Chapter 16,) 99.65 255.62 T
0 F
(De\336nition of a New Collection) 174.02 255.62 T
1 F
(, we implement sorted sequences. In) 308.98 255.62 T
(Chapter 17,) 99.65 241.62 T
0 F
(The Airport Application) 161.16 241.62 T
1 F
(, we implement the airport application.) 268.9 241.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "243" 257
%%Page: "244" 258
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "244" 258
%%Page: "245" 259
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(245) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
V
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
7 X
V
1 H
0 X
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(16) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(16) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(De\336nition of a New) 101.65 591.4 T
(Collection) 99.65 561.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.05 (In this chapter) 99.65 449.62 P
-0.05 (, we implement a data str) 168.8 449.62 P
-0.05 (uctur) 291.8 449.62 P
-0.05 (e called a) 317.68 449.62 P
2 F
-0.05 (sorted sequence) 365.34 449.62 P
1 F
-0.05 (. A sorted) 445.64 449.62 P
-0.13 (sequence is a sequence that automatically keeps the elements of the sequence in a) 99.65 435.62 P
-0.21 (particular or) 99.65 421.62 P
-0.21 (der) 160.14 421.62 P
-0.21 (, based on some value computed fr) 175.66 421.62 P
-0.21 (om each element. Elements ar) 343.99 421.62 P
-0.21 (e) 487.84 421.62 P
(added and r) 99.65 407.62 T
(emoved fr) 158.85 407.62 T
(om sorted sequences; however) 208.6 407.62 T
(, the sorted sequence deter-) 356.99 407.62 T
(mines the key associated with the element. Thus, it does not make sense to stor) 99.65 393.62 T
(e) 482.72 393.62 T
-0.22 (an element in a sorted sequence at a speci\336c key) 99.65 379.62 P
-0.22 (, because the sorted sequence will) 330.27 379.62 P
(determine the corr) 99.65 365.62 T
(ect key to satisfy the automatic-or) 189.56 365.62 T
(dering constraint.) 353.22 365.62 T
(W) 126.65 351.62 T
(e use Dylan\325s) 136.64 351.62 T
2 F
(forward-iteration protocol) 204.18 351.62 T
1 F
(to implement the connection) 338 351.62 T
(between our new collection class and Dylan\325s standar) 99.65 337.62 T
(d collection generic func-) 359.93 337.62 T
-0.31 (tions. Dylan\325s forwar) 99.65 323.62 P
-0.31 (d-iteration pr) 201.43 323.62 P
-0.31 (otocol is a well-de\336ned interface that collection) 266.11 323.62 P
(implementors and collection-iterator implementors can use to enable iterators to) 99.65 309.62 T
-0.46 (operate over new collections, and to enable collections to work with new iterators.) 99.65 295.62 P
(Once the forwar) 99.65 281.62 T
(d iteration pr) 178.44 281.62 T
(otocol is de\336ned on) 242.52 281.62 T
4 10 Q
(<sorted-sequence>) 340.52 281.62 T
1 11 Q
(, many of) 442.52 281.62 T
(the standar) 99.65 267.62 T
(d Dylan collection generic functions that we cover) 154.18 267.62 T
(ed in Chapter 1) 397.48 267.62 T
(1,) 471.73 267.62 T
0 F
(Collections and Contr) 99.65 253.62 T
(ol Flow) 196.82 253.62 T
1 F
(, will work with instances of the new sequence.) 229.51 253.62 T
(The airport application uses a sorted sequence to keep track of air) 126.65 239.62 T
(craft tran-) 445.29 239.62 T
(sition in time or) 99.65 225.62 T
(der) 176.48 225.62 T
(. See Chapter 17,) 192 225.62 T
0 F
(The Airport Application) 278.08 225.62 T
1 F
(, for mor) 385.82 225.62 T
(e details.) 427.95 225.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "245" 259
%%Page: "246" 260
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(246) 63.65 702.62 T
0 F
(Chapter 16) 87.4 702.62 T
(Definition of a New Collection) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(16.1  The) 99.65 662.95 T
4 14 Q
(sorted-sequence.dylan) 155.72 662.95 T
3 15 Q
( \336le) 332.12 662.95 T
1 11 Q
(The) 99.65 642.62 T
4 10 Q
(sorted-sequence.dylan) 120.81 642.62 T
1 11 Q
( \336le contains the module constants, classes, and) 246.81 642.62 T
(methods that build on Dylan\325s collection framework to de\336ne the str) 99.65 628.62 T
(uctur) 432.73 628.62 T
(e and) 458.61 628.62 T
(behavior of the new) 99.65 614.62 T
4 10 Q
(<sorted-sequence>) 199.44 614.62 T
1 11 Q
( collection.) 301.44 614.62 T
3 13 Q
(16.1.1  A ne) 99.65 583.29 T
(w collection c) 158.17 583.29 T
(lass) 227.89 583.29 T
1 11 Q
-0.43 (Because is ther) 99.65 371.62 P
-0.43 (e is a well-de\336ned or) 170.49 371.62 P
-0.43 (dering of the elements of sorted sequences, we) 270.09 371.62 P
-0.16 (choose) 99.65 357.62 P
4 10 Q
-0.35 (<sequence>) 135.47 357.62 P
1 11 Q
-0.16 ( to be the super) 195.47 357.62 P
-0.16 (class of) 269.34 357.62 P
4 10 Q
-0.35 (<sorted-sequence>) 307.1 357.62 P
1 11 Q
-0.16 (. W) 409.1 357.62 P
-0.16 (e use the built-) 424.43 357.62 P
(in collection class called) 99.65 343.62 T
4 10 Q
(<stretchy-vector>) 218.58 343.62 T
1 11 Q
( to stor) 320.58 343.62 T
(e the elements of our sorted) 354.08 343.62 T
(sequence, because we want to be able to have the sorted sequence gr) 99.65 329.62 T
(ow to any) 431.99 329.62 T
(size in a convenient way) 99.65 315.62 T
(.) 217.59 315.62 T
(The slots) 126.65 301.62 T
4 10 Q
(comparison-function) 172.68 301.62 T
1 11 Q
( and) 286.68 301.62 T
4 10 Q
(value-function) 310.81 301.62 T
1 11 Q
( ar) 394.81 301.62 T
(e constant slots,) 407.2 301.62 T
(because we intend to have clients specify these functions only when they cr) 99.65 287.62 T
(eate) 465.57 287.62 T
(the sorted sequence. If we had decided to let clients change the value of these) 99.65 273.62 T
-0.25 (slots, we would have made the slots virtual, so that we could r) 99.65 259.62 P
-0.25 (eor) 399.81 259.62 P
-0.25 (der the data vec-) 415.23 259.62 P
(tor after either function had changed.) 99.65 245.62 T
(Now that we have cover) 126.65 231.62 T
(ed the str) 245.39 231.62 T
(uctur) 290.65 231.62 T
(e and initialization of the sorted) 316.53 231.62 T
(sequence data str) 99.65 217.62 T
(uctur) 183.51 217.62 T
(e, we can de\336ne basic collection methods.) 209.4 217.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 223.85 554.29 T
4 9 Q
(sorted-sequence.dylan) 243.86 554.29 T
8 10 Q
( \336le) 357.26 554.29 T
(.) 372.67 554.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: sorted-sequence) 105.65 534.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define class <sorted-sequence> \050<sequence>\051) 105.65 515.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The vector that stores the elements of the sorted sequence, in order) 116.45 504.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot data :: <stretchy-vector> = make\050<stretchy-vector>, size: 0\051;) 116.45 493.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The function used to extract the comparison value from an element) 116.45 482.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(constant slot value-function :: <function> = identity,) 116.45 471.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-keyword: value-function:;) 127.25 460.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The function used to determine whether one comparison value is) 116.45 449.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//) 116.45 438.95 T
(smaller than another comparison value) 132.65 438.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(constant slot comparison-function :: <function> = \134<,) 116.45 427.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-keyword: comparison-function:;) 127.25 416.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <sorted-sequence>;) 105.65 405.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 566.83 99.65 399.08 2 L
V
0.25 H
0 Z
N
513.65 566.83 513.65 399.08 2 L
V
N
99.52 566.95 513.77 566.95 2 L
V
N
99.52 546.95 513.77 546.95 2 L
V
N
99.52 398.95 513.77 398.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "246" 260
%%Page: "247" 261
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.1 The) 338.58 702.62 T
5 F
(sorted-sequence.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(247) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(16.1.2  Basic collection methods) 99.65 664.29 T
1 11 Q
(In the pr) 99.65 249.62 T
(eceding code, we de\336ne methods for determining the number of ele-) 141.27 249.62 T
(ments in the sorted sequence, for copying the sorted sequence \050but not the ele-) 99.65 235.62 T
(ments stor) 99.65 221.62 T
(ed in the sorted sequence\051, and for accessing a particular item in the) 150.43 221.62 T
(sorted sequence. Once we have de\336ned the) 99.65 207.62 T
4 10 Q
(element) 312.11 207.62 T
1 11 Q
( method for sorted) 354.11 207.62 T
(sequences, we can use the subscripting syntax to access particular items in the) 99.65 193.62 T
(sorted sequence. Our) 99.65 179.62 T
4 10 Q
(element) 205.41 179.62 T
1 11 Q
( method implements the standar) 247.41 179.62 T
(d Dylan pr) 405.52 179.62 T
(otocol,) 458.23 179.62 T
-0.36 (which allows the caller to specify a default value if the key is not contained within) 99.65 165.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 635.29 T
4 9 Q
(sorted-sequence.dylan) 217.51 635.29 T
8 10 Q
( \336le) 330.91 635.29 T
(.) 346.32 635.29 T
9 F
(\050contin) 351.88 635.29 T
(ued\051) 381.79 635.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define method size \050sorted-sequence :: <sorted-sequence>\051) 105.65 615.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sorted-sequence-size :: <integer>\051) 127.25 604.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence.data.size;) 116.45 593.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method size;) 105.65 582.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method shallow-copy \050sorted-sequence :: <sorted-sequence>\051) 105.65 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050copy :: <sorted-sequence>\051) 127.25 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let copy) 116.45 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<sorted-sequence>,) 127.25 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value-function: sorted-sequence.value-function,) 165.05 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(comparison-function: sorted-sequence.comparison-function\051;) 165.05 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The map-into function replaces the elements of the copy\325s data array) 116.45 497.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// to be the identical elements of the data array of sorted sequence) 116.45 486.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(copy.data.size := sorted-sequence.data.size;) 116.45 475.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(map-into\050copy.data, identity, sorted-sequence.data\051;) 116.45 464.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(copy;) 116.45 453.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method shallow-copy;) 105.65 442.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $unsupplied = list\050#f\051;) 105.65 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method element) 105.65 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>, key :: <integer>,) 127.25 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#key default = $unsupplied\051) 132.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050element :: <object>\051;) 111.05 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050key < sorted-sequence.data.size\051) 116.45 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence.data[key];) 127.25 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(elseif \050default = $unsupplied\051) 116.45 338.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Attempt to access key %= which is outside of %=.", key,) 127.25 327.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence\051;) 159.65 316.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(else default;) 116.45 305.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 116.45 294.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method element;) 105.65 283.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 647.83 99.65 277.08 2 L
V
0.25 H
0 Z
N
513.65 647.83 513.65 277.08 2 L
V
N
99.52 647.95 513.77 647.95 2 L
V
N
99.52 627.95 513.77 627.95 2 L
V
N
99.52 276.95 513.77 276.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "247" 261
%%Page: "248" 262
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(248) 63.65 702.62 T
0 F
(Chapter 16) 87.4 702.62 T
(Definition of a New Collection) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(the collection. If the key is not part of the collection, and no default value is speci-) 99.65 665.62 T
(\336ed, then an err) 99.65 651.62 T
(or is signaled. Since we do not export) 176.62 651.62 T
4 10 Q
($unsupplied) 360.84 651.62 T
1 11 Q
( fr) 426.84 651.62 T
(om our) 437.4 651.62 T
(library) 99.65 637.62 T
(, we can be certain that no one can supply that value as the) 131.22 637.62 T
4 10 Q
(default) 419.33 637.62 T
1 11 Q
(keywor) 99.65 623.62 T
(d parameter for our) 136.48 623.62 T
4 10 Q
(element) 235.33 623.62 T
1 11 Q
( method.) 277.33 623.62 T
(Note that the) 126.65 609.62 T
4 10 Q
(element-setter) 193.23 609.62 T
1 11 Q
( method is not de\336ned, because it does not) 277.23 609.62 T
(make sense to stor) 99.65 595.62 T
(e an element at a particular position within the sorted) 188.76 595.62 T
(sequence. The sorted sequence itself determines the corr) 99.65 581.62 T
(ect key for each item) 372.42 581.62 T
(added to the sorted sequence, based on the item being added and on the value) 99.65 567.62 T
(and comparison functions.) 99.65 553.62 T
(Next, we show methods for adding and r) 126.65 539.62 T
(emoving elements fr) 326.82 539.62 T
(om sorted) 426.42 539.62 T
(sequences.) 99.65 525.62 T
3 13 Q
(16.1.3  Ad) 99.65 494.29 T
(ding and remo) 149.33 494.29 T
(ving elements) 222.59 494.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 455.29 T
4 9 Q
(sorted-sequence.dylan) 217.51 455.29 T
8 10 Q
( \336le) 330.91 455.29 T
(.) 346.32 455.29 T
9 F
(\050contin) 351.88 455.29 T
(ued\051) 381.79 455.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// Add an element to the sorted sequence) 105.65 435.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method add!) 105.65 424.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>, new-element :: <object>\051) 127.25 413.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sorted-sequence :: <sorted-sequence>\051) 111.05 402.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let element-value = sorted-sequence.value-function;) 116.45 391.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let compare = sorted-sequence.comparison-function;) 116.45 380.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(add!\050sorted-sequence.data, new-element\051;) 116.45 369.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence.data) 116.45 358.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= sort!\050sorted-sequence.data,) 127.25 347.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(test: method \050e1, e2\051) 175.85 336.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compare\050element-value\050e1\051, element-value\050e2\051\051) 219.05 325.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end\051;) 208.25 314.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence;) 116.45 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method add!;) 105.65 292.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Remove the item at the top of the sorted sequence) 105.65 273.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method pop \050sorted-sequence :: <sorted-sequence>\051) 105.65 262.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050top-of-sorted-sequence :: <object>\051) 127.25 251.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let data-vector = sorted-sequence.data;) 116.45 240.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let top-of-sorted-sequence = data-vector[0];) 116.45 229.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sorted-sequence-size = data-vector.size;) 116.45 218.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050empty?\050sorted-sequence\051\051) 116.45 207.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Trying to pop empty sorted-sequence %=.", sorted-sequence\051;) 127.25 196.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 467.83 99.65 190.08 2 L
V
0.25 H
0 Z
N
513.65 467.83 513.65 190.08 2 L
V
N
99.52 467.95 513.77 467.95 2 L
V
N
99.52 447.95 513.77 447.95 2 L
V
N
99.52 189.95 513.77 189.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "248" 262
%%Page: "249" 263
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.1 The) 338.58 702.62 T
5 F
(sorted-sequence.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(249) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 99.65 188.62 T
4 10 Q
(remove!) 120.81 188.62 T
1 11 Q
( method uses a form of the) 162.81 188.62 T
4 10 Q
(for) 295.14 188.62 T
1 11 Q
( loop that includes an) 313.14 188.62 T
4 10 Q
(until:) 420.67 188.62 T
1 11 Q
( clause,) 456.67 188.62 T
(much like the) 99.65 174.62 T
4 10 Q
(my-copy-sequence) 168.57 174.62 T
1 11 Q
( method de\336ned in Section 1) 264.57 174.62 T
(1.3.3, page 144.) 402.68 174.62 T
(Note that all termination checks ar) 99.65 160.62 T
(e tested prior to the execution of the body) 267.45 160.62 T
(.) 468.73 160.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(else) 116.45 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Shuffle up existing data, removing the top element from the) 127.25 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence) 127.25 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(for \050i from 0 below sorted-sequence-size - 1\051) 127.25 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data-vector[i] := data-vector[i + 1];) 138.05 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 127.25 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Decrease the size of the data vector, and return the top element) 127.25 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(data-vector.size := sorted-sequence-size - 1;) 127.25 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(top-of-sorted-sequence;) 127.25 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 116.45 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method pop;) 105.65 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Remove a particular element from the sorted sequence) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method remove!) 105.65 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>, value :: <object>,) 127.25 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#key test = \134==, count = #f\051) 132.65 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050sorted-sequence :: <sorted-sequence>\051) 111.05 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let data-vector = sorted-sequence.data;) 116.45 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sorted-sequence-size = data-vector.size;) 116.45 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050deletion-point from 0,) 116.45 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If we have reached the end of the sequence, or we have reached) 148.85 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the user-specified limit, we are done) 148.85 412.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Note that specifying a bound in the preceding clause for) 148.85 401.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(//deletion-point does not work, because bounds are computed only) 148.85 390.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// once, and we change sorted-sequence-size in the body) 148.85 379.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(until: \050deletion-point >= sorted-sequence-size\051) 143.45 368.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(| \050count & count = 0\051\051) 181.25 357.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Otherwise, if we found a matching element, remove it from the) 127.25 346.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence.) 127.25 335.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(if \050test\050data-vector[deletion-point], value\051\051) 127.25 324.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050i from deletion-point below sorted-sequence-size - 1\051) 138.05 313.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(data-vector[i] := data-vector[i + 1]) 148.85 302.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 138.05 291.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence-size) 138.05 280.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( := \050data-vector.size := sorted-sequence-size - 1\051;) 148.85 269.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050count\051 count := count - 1 end;) 138.05 258.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 127.25 247.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 116.45 236.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence;) 116.45 225.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method remove!;) 105.65 214.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(sorted-sequence.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 208.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 208.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 207.95 513.77 207.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "249" 263
%%Page: "250" 264
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(250) 63.65 702.62 T
0 F
(Chapter 16) 87.4 702.62 T
(Definition of a New Collection) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Although the) 126.65 665.62 T
4 10 Q
(pop) 194.31 665.62 T
1 11 Q
( method is not used in the airport application, it is) 212.31 665.62 T
(included for completeness. W) 99.65 651.62 T
(e could make the) 243.22 651.62 T
4 10 Q
(pop) 328.79 651.62 T
1 11 Q
( method faster by storing the) 346.79 651.62 T
(data elements in r) 99.65 637.62 T
(everse or) 186.33 637.62 T
(der; however) 230.26 637.62 T
(, that would lead to either odd behavior) 293.96 637.62 T
(or odd implementation of the) 99.65 623.62 T
4 10 Q
(element) 245.78 623.62 T
1 11 Q
( function on sorted sequences.) 287.78 623.62 T
3 13 Q
(16.1.4  The f) 99.65 592.29 T
(orwar) 160.68 592.29 T
(d-iteration pr) 189.52 592.29 T
(otocol) 255.06 592.29 T
1 11 Q
(Dylan\325s forwar) 99.65 572.62 T
(d-iteration pr) 172.69 572.62 T
(otocol allows us to connect the usual collection itera-) 237.68 572.62 T
(tion functions to our new collection class. Connecting to the forwar) 99.65 558.62 T
(d-iteration) 425.26 558.62 T
(pr) 99.65 544.62 T
(otocol is as simple as de\336ning an appr) 110.41 544.62 T
(opriate method for the) 295.73 544.62 T
4 10 Q
(forward-) 408.22 544.62 T
-0.58 (iteration-protocol) 99.65 530.62 P
1 11 Q
-0.26 ( generic function. This method must r) 207.65 530.62 P
-0.26 (eturn two objects and) 389.02 530.62 P
(six functions.) 99.65 516.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 483.29 T
4 9 Q
(sorted-sequence.dylan) 217.51 483.29 T
8 10 Q
( \336le) 330.91 483.29 T
(.) 346.32 483.29 T
9 F
(\050contin) 351.88 483.29 T
(ued\051) 381.79 483.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// This method enables many standard and user-defined collection operations) 105.65 463.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method forward-iteration-protocol) 105.65 452.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050sorted-sequence :: <sorted-sequence>\051) 127.25 441.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050initial-state :: <integer>, limit :: <integer>,) 111.05 430.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-state :: <function>, finished-state? :: <function>,) 132.65 419.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current-key :: <function>, current-element :: <function>,) 132.65 408.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current-element-setter :: <function>, copy-state :: <function>\051) 132.65 397.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050) 116.45 386.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Initial state) 154.25 375.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(0,) 154.25 364.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Limit) 154.25 345.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(sorted-sequence.size,) 154.25 334.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Next state) 159.65 315.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(method \050collection :: <sorted-sequence>, state :: <integer>\051) 154.25 304.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state + 1) 165.05 293.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 154.25 282.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Finished state?) 154.25 263.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
( method \050collection :: <sorted-sequence>, state :: <integer>,) 148.85 252.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(limit :: <integer>\051) 197.45 241.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( state = limit;) 159.65 230.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 154.25 219.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Current key) 154.25 200.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(method \050collection :: <sorted-sequence>, state :: <integer>\051) 154.25 189.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state) 165.05 178.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 154.25 167.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 495.83 99.65 161.08 2 L
V
0.25 H
0 Z
N
513.65 495.83 513.65 161.08 2 L
V
N
99.52 495.95 513.77 495.95 2 L
V
N
99.52 475.95 513.77 475.95 2 L
V
N
99.52 160.95 513.77 160.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "250" 264
%%Page: "251" 265
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.1 The) 338.58 702.62 T
5 F
(sorted-sequence.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(251) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(If we ar) 99.65 476.62 T
(e to iterate over any collection, we must maintain some state to help the) 136.61 476.62 T
(iterator r) 99.65 462.62 T
(emember the curr) 142.38 462.62 T
(ent point of iteration. For the forwar) 228.81 462.62 T
(d-iteration pr) 404.45 462.62 T
(oto-) 469.43 462.62 T
(col, we maintain this state using any object suitable for a given collection. In this) 99.65 448.62 T
-0.21 (case, an integer is suf) 99.65 434.62 P
-0.21 (\336cient to maintain wher) 201.6 434.62 P
-0.21 (e we ar) 317.32 434.62 P
-0.21 (e in the iteration pr) 351.76 434.62 P
-0.21 (ocess. The) 443.91 434.62 P
(\336rst object r) 99.65 420.62 T
(eturned by) 156.95 420.62 T
4 10 Q
(forward-iteration-protocol) 212.87 420.62 T
1 11 Q
( is a state object that is) 368.87 420.62 T
(suitable for the start of an iteration. The second object r) 99.65 406.62 T
(eturned is a state object) 366.56 406.62 T
-0.01 (that r) 99.65 392.62 P
-0.01 (epr) 125.61 392.62 P
-0.01 (esents the ending state of the iteration. Since, in this case, the state object) 141.63 392.62 P
(is just the curr) 99.65 378.62 T
(ent key of the sorted sequence, the integer 0 is the corr) 168.49 378.62 T
(ect initial) 431.76 378.62 T
-0.24 (state, and the integer that r) 99.65 364.62 P
-0.24 (epr) 228.85 364.62 P
-0.24 (esents the size of the collection is the corr) 244.87 364.62 P
-0.24 (ect ending) 442.78 364.62 P
(state.) 99.65 350.62 T
(The thir) 126.65 336.62 T
(d value r) 165.15 336.62 T
(eturned is a function that takes the collection and the cur-) 208.33 336.62 T
(r) 99.65 322.62 T
(ent iteration state, and r) 103.79 322.62 T
(eturns a state that is the next step in the iteration. In this) 219.27 322.62 T
(case, we can determine the next state simply by adding 1 to the curr) 99.65 308.62 T
(ent state.) 428.99 308.62 T
(The fourth value r) 126.65 294.62 T
(eturned is a function that r) 214.91 294.62 T
(eceives the collection, the cur-) 344.25 294.62 T
(r) 99.65 280.62 T
(ent state, and the ending state, and that determines whether the iteration is com-) 103.79 280.62 T
(plete. In this case, we need only to check whether the curr) 99.65 266.62 T
(ent state is equal to the) 380.3 266.62 T
(ending state.) 99.65 252.62 T
(The \336fth value r) 126.65 238.62 T
(eturned is a function that generates the curr) 204.58 238.62 T
(ent key into the) 416.96 238.62 T
(collection, given a collection and a state. In this case, the key is the state object.) 99.65 224.62 T
(The sixth value r) 126.65 210.62 T
(eturned is a function that r) 207.81 210.62 T
(eceives a collection and a state,) 337.14 210.62 T
(and r) 99.65 196.62 T
(eturns the curr) 125.17 196.62 T
(ent element of the collection. In this case, the) 196.83 196.62 T
4 10 Q
(element) 416.15 196.62 T
1 11 Q
( func-) 458.15 196.62 T
(tion is the obvious choice, since our state is just the key) 99.65 182.62 T
(.) 365.29 182.62 T
(The seventh value r) 126.65 168.62 T
(eturned is a function that r) 222.08 168.62 T
(eceives a new value, a collec-) 351.42 168.62 T
-0.41 (tion, and a state, and changes the curr) 99.65 154.62 P
-0.41 (ent element to be the new value. In this case,) 280.6 154.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// Current element) 154.25 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(element,) 154.25 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Current element setter) 154.25 610.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(method \050value :: <object>, collection :: <sorted-sequence>,) 154.25 599.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(state :: <integer>\051) 197.45 588.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Setting an element of a sorted sequence) 165.05 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is not allowed."\051;) 197.45 566.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 154.25 555.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Copy state) 154.25 536.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(identity\051;) 154.25 525.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method forward-iteration-protocol;) 105.65 514.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(sorted-sequence.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 508.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 508.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 507.95 513.77 507.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "251" 265
%%Page: "252" 266
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(252) 63.65 702.62 T
0 F
(Chapter 16) 87.4 702.62 T
(Definition of a New Collection) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(such an operation is illegal, since the only rational way to add elements to sorted) 99.65 665.62 T
(sequences is with) 99.65 651.62 T
4 10 Q
(add!) 187.34 651.62 T
1 11 Q
(. Because this operation is illegal, an err) 211.34 651.62 T
(or is signaled.) 403.03 651.62 T
(The eighth and \336nal value r) 126.65 637.62 T
(eturned is a function that r) 261.13 637.62 T
(eceives a collection) 390.47 637.62 T
(and a state, and r) 99.65 623.62 T
(eturns a copy of the state. In this case, we just r) 182.9 623.62 T
(eturn the state,) 410.52 623.62 T
-0.38 (because it is an integer and thus has no slots that ar) 99.65 609.62 P
-0.38 (e modi\336ed during the iteration) 344.48 609.62 P
(pr) 99.65 595.62 T
(ocess. If we r) 110.41 595.62 T
(epr) 172.85 595.62 T
(esented the state with an object that had one or mor) 188.88 595.62 T
(e slots that) 439.68 595.62 T
(did change during iteration, we would have to make a new state instance and to) 99.65 581.62 T
(copy the signi\336cant information fr) 99.65 567.62 T
(om the old state instance to the new state) 265.97 567.62 T
(instance.) 99.65 553.62 T
(Once we have de\336ned a) 126.65 539.62 T
4 10 Q
(forward-iteration-protocol) 245.96 539.62 T
1 11 Q
( method for sorted) 401.96 539.62 T
(sequences, we can iterate over them using) 99.65 525.62 T
4 10 Q
(for) 306.67 525.62 T
1 11 Q
( loops, mapping functions, and) 324.67 525.62 T
(other collections iterators described in Chapter 1) 99.65 511.62 T
(1,) 334.73 511.62 T
0 F
(Collections and Contr) 348.48 511.62 T
(ol Flow) 445.65 511.62 T
1 F
(.) 478.35 511.62 T
(Also, if someone de\336nes a new iterator that uses the forwar) 99.65 497.62 T
(d-iteration pr) 388.08 497.62 T
(otocol,) 453.07 497.62 T
(then this new iterator will work with sorted sequences.) 99.65 483.62 T
(Dylan has several other r) 126.65 469.62 T
(elated pr) 248.16 469.62 T
(otocols for backwar) 291.22 469.62 T
(d iteration and for) 386.49 469.62 T
(tables. See the) 99.65 455.62 T
0 F
(The Dylan Refer) 170.52 455.62 T
(ence Manual) 243.67 455.62 T
1 F
( for details.) 301.01 455.62 T
3 15 Q
(16.2  The) 99.65 415.95 T
4 14 Q
(sorted-sequence-library.dylan) 155.72 415.95 T
3 15 Q
( \336le) 399.32 415.95 T
1 11 Q
(The de\336nitions for the sorted sequence library and module ar) 99.65 395.62 T
(e simple. The only) 397.93 395.62 T
(module variable that we need to export is for the sorted sequence class itself. All) 99.65 381.62 T
-0.35 (the generic functions that we want clients to use on sorted sequences ar) 99.65 367.62 P
-0.35 (e exported) 442.09 367.62 P
(by the) 99.65 353.62 T
4 10 Q
(dylan) 132.6 353.62 T
1 11 Q
( module.) 162.6 353.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 202.25 320.29 T
4 9 Q
(sorted-sequence-library.dylan) 222.26 320.29 T
8 10 Q
( \336le) 378.86 320.29 T
(.) 394.27 320.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 300.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library sorted-sequence) 105.65 281.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export sorted-sequence;) 116.45 270.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 259.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 116.45 248.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library sorted-sequence;) 105.65 237.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module sorted-sequence) 105.65 218.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <sorted-sequence>;) 116.45 207.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 196.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 116.45 185.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module sorted-sequence;) 105.65 174.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 332.83 99.65 168.08 2 L
V
0.25 H
0 Z
N
513.65 332.83 513.65 168.08 2 L
V
N
99.52 332.95 513.77 332.95 2 L
V
N
99.52 312.95 513.77 312.95 2 L
V
N
99.52 167.95 513.77 167.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "252" 266
%%Page: "253" 267
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(16.4 Summary) 450.89 702.62 T
2 F
(253) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 99.65 665.62 T
4 10 Q
(definitions) 120.81 665.62 T
1 11 Q
( library and module ar) 186.81 665.62 T
(e de\336ned in Chapter 17,) 296.42 665.62 T
0 F
(The Airport) 418.09 665.62 T
(Application) 99.65 651.62 T
1 F
(.) 151.79 651.62 T
3 15 Q
(16.3  The) 99.65 611.95 T
4 14 Q
(sorted-sequence.lid) 155.72 611.95 T
3 15 Q
( \336le) 315.32 611.95 T
1 11 Q
-0.07 (The LID \336le for sorted sequences is also straightforwar) 99.65 591.62 P
-0.07 (d. The entir) 364.87 591.62 P
-0.07 (e library is con-) 420.72 591.62 P
(tained within two \336les \050in addition to the LID \336le itself\051. The library and module) 99.65 577.62 T
(de\336nitions ar) 99.65 563.62 T
(e in the \336le) 164.15 563.62 T
4 10 Q
(sorted-sequence-library.dylan) 220.41 563.62 T
1 11 Q
(. The de\336nitions of) 394.41 563.62 T
(module constants, classes, and methods ar) 99.65 549.62 T
(e in the implementation \336le,) 305.61 549.62 T
4 10 Q
(sorted-) 445.03 549.62 T
(sequence.dylan) 99.65 535.62 T
1 11 Q
(.) 183.65 535.62 T
3 15 Q
(16.4  Summar) 99.65 419.95 T
(y) 179.76 419.95 T
1 11 Q
(In this chapter) 99.65 399.62 T
(, we cover) 168.89 399.62 T
(ed the following:) 218.11 399.62 T
(\245) 108.65 379.62 T
(W) 126.65 379.62 T
(e explor) 136.64 379.62 T
(ed how to de\336ne our own collection class.) 175.57 379.62 T
(\245) 108.65 359.62 T
(W) 126.65 359.62 T
(e showed how to integrate that class into Dylan\325s collection framework.) 136.64 359.62 T
(\245) 108.65 339.62 T
(W) 126.65 339.62 T
(e used several variations of the contr) 136.64 339.62 T
(ol str) 314.73 339.62 T
(uctur) 339.19 339.62 T
(es pr) 365.07 339.62 T
(esented in Chapter) 388.51 339.62 T
(1) 126.65 325.62 T
(1,) 131.54 325.62 T
0 F
(Collections and Contr) 145.29 325.62 T
(ol Flow) 242.47 325.62 T
1 F
(.) 275.16 325.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 229.25 502.29 T
4 9 Q
(sorted-sequence.lid) 249.26 502.29 T
8 10 Q
( \336le) 351.86 502.29 T
(.) 367.27 502.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 105.65 482.95 T
(sorted-sequence) 159.65 482.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 471.95 T
(sorted-sequence-library) 159.65 471.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sorted-sequence) 165.05 460.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 514.83 99.65 454.08 2 L
V
0.25 H
0 Z
N
513.65 514.83 513.65 454.08 2 L
V
N
99.52 514.95 513.77 514.95 2 L
V
N
99.52 494.95 513.77 494.95 2 L
V
N
99.52 453.95 513.77 453.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "253" 267
%%Page: "254" 268
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "254" 268
%%Page: "255" 269
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(255) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(17) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(17) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(The Airport Application) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
-0.32 (In this chapter) 99.65 449.62 P
-0.32 (, we pr) 168.25 449.62 P
-0.32 (esent the entir) 201.05 449.62 P
-0.32 (e \336rst draft of our airport example application.) 268.96 449.62 P
(The code in this chapter is complete, and, given the libraries de\336ned in Chapter) 99.65 435.62 T
-0.22 (14,) 99.65 421.62 P
0 F
-0.22 (Four Complete Libraries) 118.46 421.62 P
1 F
-0.22 (, and Chapter 16,) 225.8 421.62 P
0 F
-0.22 (De\336nition of a New Collection) 313.09 421.62 P
1 F
-0.22 (, the code) 447.17 421.62 P
(should r) 99.65 407.62 T
(un in a standar) 140.28 407.62 T
(d Dylan implementation. This example pulls together) 213.19 407.62 T
(many of the techniques pr) 99.65 393.62 T
(esented so far) 226.53 393.62 T
(.) 292.58 393.62 T
3 15 Q
(17.1  The) 99.65 353.95 T
4 14 Q
(definitions.dylan) 155.72 353.95 T
3 15 Q
( \336le) 298.52 353.95 T
1 11 Q
-0.44 (This \336le contains common de\336nitions that ar) 99.65 333.62 P
-0.44 (e used thr) 313.84 333.62 P
-0.44 (oughout several libraries in) 361.15 333.62 P
(the airport example.) 99.65 319.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 234.65 286.29 T
4 9 Q
(definitions.dylan) 254.66 286.29 T
8 10 Q
( \336le) 346.46 286.29 T
(.) 361.87 286.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: definitions) 105.65 266.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This file contains constants and other definitions used in common with) 105.65 247.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the other parts of the airport example) 105.65 236.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The capital letters of the alphabet) 105.65 217.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";) 105.65 206.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This type represents positive integers) 105.65 187.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant <positive-integer> = limited\050<integer>, min: 1\051;) 105.65 176.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $hours-per-day = 24;) 105.65 157.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 298.83 99.65 151.08 2 L
V
0.25 H
0 Z
N
513.65 298.83 513.65 151.08 2 L
V
N
99.52 298.95 513.77 298.95 2 L
V
N
99.52 278.95 513.77 278.95 2 L
V
N
99.52 150.95 513.77 150.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "255" 269
%%Page: "256" 270
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(256) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(17.2  The) 99.65 477.95 T
4 14 Q
(airport-classes.dylan) 155.72 477.95 T
3 15 Q
( \336le) 332.12 477.95 T
1 11 Q
(This \336le contains all the main classes speci\336c to the airport example. Several) 99.65 457.62 T
(methods that describe or initialize these objects ar) 99.65 443.62 T
(e included as well.) 341.29 443.62 T
3 13 Q
(17.2.1  Ph) 99.65 412.29 T
(ysical objects) 148.65 412.29 T
1 11 Q
(The classes that follow describe fundamental attributes of tangible objects.) 99.65 392.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define constant $minutes-per-hour = 60;) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $seconds-per-minute = 60;) 105.65 621.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $seconds-per-hour) 105.65 602.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= $minutes-per-hour * $seconds-per-minute;) 116.45 591.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This method returns the union of the false type and a type you specify,) 105.65 572.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// as a simple shorthand) 105.65 561.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This method may already be provided by your Dylan implementation) 105.65 550.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method false-or \050other-type :: <type>\051 => \050combined-type :: <type>\051) 105.65 539.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type-union\050singleton\050#f\051, other-type\051;) 116.45 528.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method false-or;) 105.65 517.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 223.85 359.29 T
4 9 Q
(airport-classes.dylan) 243.86 359.29 T
8 10 Q
( \336le) 357.26 359.29 T
(.) 372.67 359.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport) 105.65 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// PHYSICAL OBJECTS AND SIZE) 105.65 320.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Used to keep track of object dimensions and object capacities) 105.65 301.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// All dimensions are in feet) 105.65 290.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <size> \050<object>\051) 105.65 279.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot length :: <positive-integer>, init-keyword: length:;) 116.45 268.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot width :: <positive-integer>, init-keyword: width:;) 116.45 257.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot height :: <positive-integer>, init-keyword: height:;) 116.45 246.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <size>;) 105.65 235.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define abstract class <physical-object> \050<object>\051) 105.65 216.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot current-position :: <position>, init-keyword: current-position:;) 116.45 205.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot physical-size :: <size>, init-keyword: physical-size:;) 116.45 194.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <physical-object>;) 105.65 183.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 208.3 660.29 T
4 9 Q
(definitions.dylan) 228.31 660.29 T
8 10 Q
( \336le) 320.11 660.29 T
(.) 335.52 660.29 T
9 F
( \050contin) 338.3 660.29 T
(ued\051) 370.99 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 511.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 511.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 510.95 513.77 510.95 2 L
V
N
99.65 371.83 99.65 177.08 2 L
V
N
513.65 371.83 513.65 177.08 2 L
V
N
99.52 371.95 513.77 371.95 2 L
V
N
99.52 351.95 513.77 351.95 2 L
V
N
99.52 176.95 513.77 176.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "256" 270
%%Page: "257" 271
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 338.58 702.62 T
5 F
(airport-classes.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(257) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(In the pr) 99.65 581.62 T
(eceding portion of the) 141.27 581.62 T
4 10 Q
(airport-classes.dylan) 251.22 581.62 T
1 11 Q
( \336le, we de\336ne the class) 377.22 581.62 T
4 10 Q
-0.88 (<size>) 99.65 567.62 P
1 11 Q
-0.41 (, which allows us to specify the external dimensions and container volume) 135.65 567.62 P
(of various objects. For example, we might want to specify that certain gate ar) 99.65 553.62 T
(eas) 472.4 553.62 T
(might be too small to hold the lar) 99.65 539.62 T
(ge air) 261.17 539.62 T
(craft. W) 288.15 539.62 T
(e also de\336ne the base class for all) 325.62 539.62 T
(tangible objects,) 99.65 525.62 T
4 10 Q
(<physical-object>) 180.32 525.62 T
1 11 Q
(.) 282.32 525.62 T
(Next, we de\336ne the classes wher) 126.65 511.62 T
(e air) 284.67 511.62 T
(craft ar) 305.54 511.62 T
(e normally located.) 339.92 511.62 T
3 13 Q
(17.2.2  V) 99.65 480.29 T
(ehic) 141.81 480.29 T
(le container) 162.95 480.29 T
(s) 222.64 480.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define method say \050physical-object :: <physical-object>\051 => \050\051) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"object at "\051;) 116.45 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050physical-object.current-position\051;) 116.45 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 441.29 T
4 9 Q
(airport-classes.dylan) 217.51 441.29 T
8 10 Q
( \336le) 330.91 441.29 T
(.) 346.32 441.29 T
9 F
(\050contin) 351.88 441.29 T
(ued\051) 381.79 441.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// VEHICLE STORAGE) 105.65 421.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The default size for a vehicle container) 105.65 402.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $default-capacity) 105.65 391.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<size>, length: 350, width: 200, height: 100\051;) 116.45 380.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents a location where an aircraft could be stored) 105.65 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <vehicle-storage> \050<physical-object>\051) 105.65 350.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot storage-capacity :: <size> = $default-capacity,) 116.45 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-keyword: capacity:;) 127.25 328.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(each-subclass slot name-prefix :: <string> = "Storage", setter: #f;) 116.45 317.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot identifier :: <string>, required-init-keyword: id:;) 116.45 306.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot connected-to :: <simple-object-vector>;) 116.45 295.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <vehicle-storage>;) 105.65 284.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// By using the name-prefix each-subclass slot, we share one say method) 105.65 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// for all vehicle containers) 105.65 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method say \050storage :: <vehicle-storage>\051 => \050\051) 105.65 243.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"%s %s", storage.name-prefix, storage.identifier\051;) 116.45 232.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 221.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 223.85 660.29 T
4 9 Q
(airport-classes.dylan) 243.86 660.29 T
8 10 Q
( \336le) 357.26 660.29 T
(.) 372.67 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 601.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 601.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 600.95 513.77 600.95 2 L
V
N
99.65 453.83 99.65 215.08 2 L
V
N
513.65 453.83 513.65 215.08 2 L
V
N
99.52 453.95 513.77 453.95 2 L
V
N
99.52 433.95 513.77 433.95 2 L
V
N
99.52 214.95 513.77 214.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "257" 271
%%Page: "258" 272
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(258) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define method object-fits?) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050object :: <physical-object>, container :: <vehicle-storage>\051) 127.25 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050fits? :: <boolean>\051) 111.05 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let object-size = object.physical-size;) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let container-capacity = container.storage-capacity;) 116.45 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object-size.length < container-capacity.length) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& object-size.height < container-capacity.height) 127.25 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& object-size.width < container-capacity.width;) 127.25 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method object-fits?;) 105.65 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Vehicle storage that can hold only one aircraft regardless of direction) 105.65 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Direction in this context is either #"inbound" or #"outbound") 105.65 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <single-storage> \050<vehicle-storage>\051) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot vehicle-currently-occupying :: false-or\050<aircraft>\051 = #f;) 116.45 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <single-storage>;) 105.65 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Vehicle storage that can hold multiple aircraft, with distinct queues) 105.65 470.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// for each direction) 105.65 459.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <multiple-storage> \050<vehicle-storage>\051) 105.65 448.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot vehicles-by-direction :: <object-table> = make\050<object-table>\051;) 116.45 437.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot maxima-by-direction :: <object-table> = make\050<object-table>\051;) 116.45 426.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keyword directions:;) 116.45 415.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keyword maxima:;) 116.45 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <multiple-storage>;) 105.65 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// In a real airport, there would be many paths an aircraft could take) 105.65 374.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// For our simple airport example, we define only the #"inbound" and) 105.65 363.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// #"outbound" paths) 105.65 352.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The directions parameter is a sequence of these aircraft path names) 105.65 341.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Multiple storage containers can limit the number of aircraft that) 105.65 330.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// they can hold for each path; this is the maxima parameter) 105.65 319.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This initialize method creates a queue to hold aircraft for each) 105.65 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// direction, and stores the queue in a table indexed by direction) 105.65 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This method also stores the maximum number of aircaft for that) 105.65 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// direction in a different table) 105.65 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method initialize) 105.65 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050object :: <multiple-storage>, #key directions :: <sequence>,) 127.25 253.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maxima :: <sequence>\051) 132.65 242.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method \050\051;) 116.45 231.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050direction in directions,) 116.45 220.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maximum in maxima\051) 143.45 209.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object.vehicles-by-direction[direction] := make\050<deque>\051;) 127.25 198.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object.maxima-by-direction[direction] := maximum;) 127.25 187.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 116.45 176.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 105.65 165.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-classes.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 159.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 159.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 158.95 513.77 158.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "258" 272
%%Page: "259" 273
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 338.58 702.62 T
5 F
(airport-classes.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(259) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// From the preceding basic vehicle containers, we can build specific) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// containers for each aircraft-transition location) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <gate> \050<single-storage>\051) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Gate";) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <gate>;) 105.65 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Given a zero-based terminal number, and a one-based gate number, create) 105.65 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// an return a string with a gate letter and a terminal number in it) 105.65 566.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method generate-gate-id) 105.65 555.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050term :: <positive-integer>, gate :: <positive-integer>\051) 127.25 544.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050gate-id :: <string>\051) 111.05 533.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-to-string\050"%c%d", $letters[term], gate\051;) 116.45 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method generate-gate-id;) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Gates-per-terminal is a vector; each element of the vector is the) 105.65 492.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// number of gates to create for the terminal at that index) 105.65 481.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Returns a vector of all the gate instances) 105.65 470.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method generate-gates) 105.65 459.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050gates-per-terminal :: <vector>, default-gate-capacity :: <size>\051) 127.25 448.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050gates :: <vector>\051) 111.05 437.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let result = make\050<vector>, size: reduce1\050\134+, gates-per-terminal\051\051;) 116.45 426.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let result-index = 0;) 116.45 415.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050term from 0 below gates-per-terminal.size\051) 116.45 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050gate from 1 to gates-per-terminal[term]\051) 127.25 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result[result-index]) 138.05 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= make\050<gate>, id: generate-gate-id\050term, gate\051,) 148.85 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(capacity: default-gate-capacity\051;) 192.05 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result-index := result-index + 1;) 138.05 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 127.25 338.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 116.45 327.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(result;) 116.45 316.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method generate-gates;) 105.65 305.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents the part of the airspace over a given airport) 105.65 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <sky> \050<multiple-storage>\051) 105.65 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The airport over which this piece of sky is located) 116.45 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot airport-below :: <airport>, required-init-keyword: airport:;) 116.45 253.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Sky";) 116.45 242.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(required keyword inbound-aircraft:;) 116.45 231.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <sky>;) 105.65 220.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-classes.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 214.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 214.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 213.95 513.77 213.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "259" 273
%%Page: "260" 274
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(260) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.15 (In the pr) 99.65 317.62 P
-0.15 (eceding portion of the) 140.97 317.62 P
4 10 Q
-0.33 (airport-classes.dylan) 250.3 317.62 P
1 11 Q
-0.15 ( \336le, we de\336ne the tangi-) 376.3 317.62 P
(ble objects that r) 99.65 303.62 T
(epr) 178.74 303.62 T
(esent the various normal locations for air) 194.76 303.62 T
(craft in and ar) 393.76 303.62 T
(ound) 461.86 303.62 T
(an airport. These locations ar) 99.65 289.62 T
(e known as containers or vehicle storage. W) 240.34 289.62 T
(e can) 452.4 289.62 T
(connect vehicle-storage instances to one another to form an airport. Instances of) 99.65 275.62 T
4 10 Q
(<single-storage>) 99.65 261.62 T
1 11 Q
( can hold only one air) 195.65 261.62 T
(craft at a time, wher) 300.76 261.62 T
(eas instances of) 397.84 261.62 T
4 10 Q
-0.83 (<multiple-storage>) 99.65 247.62 P
1 11 Q
-0.38 ( can hold mor) 207.65 247.62 P
-0.38 (e than one air) 273.74 247.62 P
-0.38 (craft at a time. Also, instances of) 338.54 247.62 P
4 10 Q
(<multiple-storage>) 99.65 233.62 T
1 11 Q
( tr) 207.65 233.62 T
(eat inbound air) 218.13 233.62 T
(craft separately fr) 292.28 233.62 T
(om outbound air) 377.63 233.62 T
(craft.) 459.77 233.62 T
(W) 99.65 219.62 T
(e de\336ne the) 109.64 219.62 T
4 10 Q
(object-fits?) 168.73 219.62 T
1 11 Q
( method, which determines whether a physical) 240.73 219.62 T
(object can \336t into a container) 99.65 205.62 T
(. W) 238.3 205.62 T
(e also de\336ne methods for cr) 253.79 205.62 T
(eating, initializing,) 387.9 205.62 T
(and describing various containers. Note the use of the) 99.65 191.62 T
4 10 Q
(each-subclass) 364.23 191.62 T
1 11 Q
( slot) 442.23 191.62 T
4 10 Q
(name-) 465.19 191.62 T
-0.99 (prefix) 99.65 177.62 P
1 11 Q
-0.46 (, which permits one) 135.65 177.62 P
4 10 Q
-0.99 (say) 232.71 177.62 P
1 11 Q
-0.46 ( method on the) 250.71 177.62 P
4 10 Q
-0.99 (<vehicle-storage>) 325.25 177.62 P
1 11 Q
-0.46 ( class to cover) 427.25 177.62 P
-0.02 (all the vehicle-container classes. Each subclass of vehicle storage can override the) 99.65 163.62 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// When a sky instance is created, a sequence of inbound aircraft is) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// provided) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This method initializes the direction slot of the aircraft to) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// #"inbound", and places the aircraft in the inbound queue of the sky) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// instance) 105.65 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method initialize \050sky :: <sky>,) 105.65 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#key inbound-aircraft :: <sequence>\051) 246.05 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050sky, directions: #[#"inbound", #"outbound"],) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(maxima: vector\050inbound-aircraft.size,) 181.25 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inbound-aircraft.size\051\051;) 262.25 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let inbound-queue = sky.vehicles-by-direction [#"inbound"];) 116.45 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050vehicle in inbound-aircraft\051) 116.45 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle.direction := #"inbound";) 127.25 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(push-last\050inbound-queue, vehicle\051;) 127.25 497.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 116.45 486.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Connect the airport to the sky) 116.45 475.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(sky.airport-below.sky-above := sky;) 116.45 464.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 105.65 453.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents a strip of land where aircraft land and take off) 105.65 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <runway> \050<single-storage>\051) 105.65 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Runway";) 116.45 412.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <runway>;) 105.65 401.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Taxiways connect runways and gates) 105.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <taxiway> \050<multiple-storage>\051) 105.65 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot name-prefix, init-value: "Taxiway";) 116.45 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <taxiway>;) 105.65 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-classes.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 343.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 343.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 342.95 513.77 342.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "260" 274
%%Page: "261" 275
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 338.58 702.62 T
5 F
(airport-classes.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(261) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.37 (inherited value of this slot, to ensur) 99.65 665.62 P
-0.37 (e that the pr) 269.61 665.62 P
-0.37 (oper name of the vehicle storage is) 327.12 665.62 P
(used in the description of instances of that subclass.) 99.65 651.62 T
(The) 126.65 637.62 T
4 10 Q
(<vehicle-storage>) 147.81 637.62 T
1 11 Q
(,) 249.81 637.62 T
4 10 Q
(<multiple-storage>) 255.31 637.62 T
1 11 Q
(, and) 363.31 637.62 T
4 10 Q
(<single-storage>) 390.18 637.62 T
1 11 Q
(classes ar) 99.65 623.62 T
(e all abstract, because it is not sensible to instantiate them. They contain) 144.89 623.62 T
(partial implementations that they contribute to their subclasses.) 99.65 609.62 T
(In the) 126.65 595.62 T
4 10 Q
(generate-gates) 157.51 595.62 T
1 11 Q
( method, the) 241.51 595.62 T
4 10 Q
(gates-per-terminal) 305.47 595.62 T
1 11 Q
( parameter is a) 413.47 595.62 T
(vector that contains the count of gates for each terminal. By adding up all the ele-) 99.65 581.62 T
(ments of that vector with) 99.65 567.62 T
4 10 Q
(reduce1) 224.44 567.62 T
1 11 Q
(, we can compute the total number of gates at) 266.44 567.62 T
(the airport, and thus the size of the vector that can hold all the gates.) 99.65 553.62 T
(Next, we examine the classes, initialization methods, and) 126.65 539.62 T
4 10 Q
(say) 406.82 539.62 T
1 11 Q
( methods for) 424.82 539.62 T
(the vehicles in the application.) 99.65 525.62 T
3 13 Q
(17.2.3  V) 99.65 494.29 T
(ehic) 141.81 494.29 T
(les) 162.95 494.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 455.29 T
4 9 Q
(airport-classes.dylan) 217.51 455.29 T
8 10 Q
( \336le) 330.91 455.29 T
(.) 346.32 455.29 T
9 F
(\050contin) 351.88 455.29 T
(ued\051) 381.79 455.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// VEHICLES) 105.65 435.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The class that represents all self-propelled devices) 105.65 416.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <vehicle> \050<physical-object>\051) 105.65 405.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Every vehicle has a unique identification code) 116.45 394.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 116.45 383.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The normal operating speed of this class of vehicle in miles per hour) 116.45 372.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(each-subclass slot cruising-speed :: <positive-integer>;) 116.45 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Allow individual differences in the size of particular aircraft,) 116.45 350.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// while providing a suitable default for each class of aircraft) 116.45 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(each-subclass slot standard-size :: <size>;) 116.45 328.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <vehicle>;) 105.65 317.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method initialize \050vehicle :: <vehicle>, #key\051) 105.65 298.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unless \050slot-initialized?\050vehicle, physical-size\051\051) 116.45 276.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle.physical-size := vehicle.standard-size;) 127.25 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end unless;) 116.45 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 105.65 243.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <vehicle>\051 => \050\051) 105.65 224.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Vehicle %s", object.vehicle-id\051;) 116.45 213.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 202.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 467.83 99.65 196.08 2 L
V
0.25 H
0 Z
N
513.65 467.83 513.65 196.08 2 L
V
N
99.52 467.95 513.77 467.95 2 L
V
N
99.52 447.95 513.77 447.95 2 L
V
N
99.52 195.95 513.77 195.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "261" 275
%%Page: "262" 276
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(262) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// This class represents companies that fly commercial aircraft) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <airline> \050<object>\051) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot name :: <string>, required-init-keyword: name:;) 116.45 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot code :: <string>, required-init-keyword: code:;) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <airline>;) 105.65 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <airline>\051 => \050\051) 105.65 577.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Airline %s", object.name\051;) 116.45 566.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 555.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents a regularly scheduled trip for a commercial) 105.65 536.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// airline) 105.65 525.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <flight> \050<object>\051) 105.65 514.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot airline :: <airline>, required-init-keyword: airline:;) 116.45 503.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot number :: <nonnegative-integer>,) 116.45 492.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(required-init-keyword: number:;) 127.25 481.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <flight>;) 105.65 470.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <flight>\051 => \050\051) 105.65 451.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Flight %s %d", object.airline.code, object.number\051;) 116.45 440.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 429.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This class represents vehicles that normally fly for a portion of) 105.65 410.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// their trip) 105.65 399.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <aircraft> \050<vehicle>\051) 105.65 388.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot altitude :: <integer>, init-keyword: altitude:;) 116.45 377.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Direction here is either #"inbound" or #"outbound") 116.45 366.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot direction :: <symbol>;) 116.45 355.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The next step this aircraft might be able to make) 116.45 344.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot next-transition :: <aircraft-transition>,) 116.45 333.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(required-init-keyword: transition:, setter: #f;) 127.25 322.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <aircraft>;) 105.65 311.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method initialize \050vehicle :: <aircraft>, #key\051) 105.65 292.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 281.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// There is a one-to-one correspondance between aircraft instances and) 116.45 270.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transition instances) 116.45 259.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// An aircraft can only make one transition at a time) 116.45 248.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Connect the aircraft to its transition) 116.45 237.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(vehicle.next-transition.transition-aircraft := vehicle;) 116.45 226.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method initialize;) 105.65 215.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-classes.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 209.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 209.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 208.95 513.77 208.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "262" 276
%%Page: "263" 277
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.2 The) 338.58 702.62 T
5 F
(airport-classes.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(263) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// The next step an aircraft might be able to make) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <aircraft-transition> \050<object>\051) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot transition-aircraft :: <aircraft>, init-keyword: aircraft:;) 116.45 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot from-container :: <vehicle-storage>, init-keyword: from:;) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot to-container :: <vehicle-storage>, init-keyword: to:;) 116.45 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The earliest possible time that the transition could take place) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot earliest-arrival :: <time-of-day>, init-keyword: arrival:;) 116.45 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Has this transition already been entered in the sorted sequence?) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This flag saves searching the sorted sequence) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot pending? :: <boolean> = #f, init-keyword: pending?:;) 116.45 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <aircraft-transition>;) 105.65 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Describes one step of an aircraft\325s movements) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method say \050transition :: <aircraft-transition>\051 => \050\051) 105.65 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition.earliest-arrival\051;) 116.45 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050": "\051;) 116.45 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition.transition-aircraft\051;) 116.45 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050" at "\051;) 116.45 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition.to-container\051;) 116.45 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Commercial aircraft are aircraft that may have a flight) 105.65 415.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// assigned to them) 105.65 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define abstract class <commercial-aircraft> \050<aircraft>\051) 105.65 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot aircraft-flight :: false-or\050<flight>\051 = #f, init-keyword: flight:;) 116.45 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <commercial-aircraft>;) 105.65 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050object :: <commercial-aircraft>\051 => \050\051) 105.65 352.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let flight = object.aircraft-flight;) 116.45 341.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050flight\051) 116.45 330.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050flight\051;) 127.25 319.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(else) 116.45 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Unscheduled Aircraft %s", object.vehicle-id\051;) 127.25 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 116.45 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The class that represents all commericial Boeing 707 aircraft) 105.65 256.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <B707> \050<commercial-aircraft>\051) 105.65 245.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot cruising-speed, init-value: 368;) 116.45 234.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(inherited slot standard-size,) 116.45 223.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-value: make\050<size>, length: 153, width: 146, height: 42\051;) 127.25 212.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <B707>;) 105.65 201.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-classes.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 195.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 195.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 194.95 513.77 194.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "263" 277
%%Page: "264" 278
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(264) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.45 (In the pr) 99.65 548.62 P
-0.45 (eceding code, we model everything fr) 140.38 548.62 P
-0.45 (om the most general class of vehicle) 321.46 548.62 P
(down to the speci\336c class that r) 99.65 534.62 T
(epr) 251.6 534.62 T
(esents the Boeing 707. W) 267.63 534.62 T
(e also model the tran-) 386.69 534.62 T
(sition steps that an air) 99.65 520.62 T
(craft may take as it travels thr) 206.33 520.62 T
(oughout the airport, and the) 350.47 520.62 T
(airlines and \337ights associated with commer) 99.65 506.62 T
(cial air) 310.55 506.62 T
(craft.) 342.93 506.62 T
3 13 Q
(17.2.4  Airpor) 99.65 475.29 T
(ts) 167.4 475.29 T
1 11 Q
(Finally) 99.65 455.62 T
(, we pr) 132.16 455.62 T
(esent the class that r) 165.62 455.62 T
(epr) 263.2 455.62 T
(esents the entir) 279.22 455.62 T
(e airport and pr) 352.44 455.62 T
(ovide the) 428.93 455.62 T
(method that brie\337y describes the airport.) 99.65 441.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define method say \050aircraft :: <B707>\051 => \050\051) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050aircraft.aircraft-flight\051) 116.45 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 127.25 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(else) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Unscheduled B707 %s", aircraft.vehicle-id\051;) 127.25 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 408.29 T
4 9 Q
(airport-classes.dylan) 217.51 408.29 T
8 10 Q
( \336le) 330.91 408.29 T
(.) 346.32 408.29 T
9 F
(\050contin) 351.88 408.29 T
(ued\051) 381.79 408.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// AIRPORTS) 105.65 388.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The class that represents all places where people and aircraft meet) 105.65 369.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define class <airport> \050<physical-object>\051) 105.65 358.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The name of the airport, such as "San Fransisco International Airport") 116.45 347.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot name :: <string>, init-keyword: name:;) 116.45 336.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The three letter abbreviation, such as "SFO") 116.45 325.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot code :: <string>, init-keyword: code:;) 116.45 314.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The airspace above the airport) 116.45 303.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot sky-above :: <sky>;) 116.45 292.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end class <airport>;) 105.65 281.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method say \050airport :: <airport>\051 => \050\051) 105.65 262.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Airport %s", airport.code\051;) 116.45 251.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method say;) 105.65 240.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-classes.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
(\050contin) 351.88 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 568.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 568.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 567.95 513.77 567.95 2 L
V
N
99.65 420.83 99.65 234.08 2 L
V
N
513.65 420.83 513.65 234.08 2 L
V
N
99.52 420.95 513.77 420.95 2 L
V
N
99.52 400.95 513.77 400.95 2 L
V
N
99.52 233.95 513.77 233.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "264" 278
%%Page: "265" 279
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.3 The) 332.88 702.62 T
5 F
(vehicle-dynamics.dylan) 368.51 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(265) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(17.3  The) 99.65 662.95 T
4 14 Q
(vehicle-dynamics.dylan) 155.72 662.95 T
3 15 Q
( \336le) 340.52 662.95 T
1 11 Q
-0.37 (The) 99.65 642.62 P
4 10 Q
-0.82 (vehicle-dynamics.dylan) 120.44 642.62 P
1 11 Q
-0.37 ( \336le contains stubs for calculations that pr) 252.44 642.62 P
-0.37 (edict the) 451.98 642.62 P
(behavior of the air) 99.65 628.62 T
(craft involved in the example. T) 188.69 628.62 T
(r) 342.25 628.62 T
(ue aer) 346.51 628.62 T
(onautical calculations) 376.08 628.62 T
(ar) 99.65 614.62 T
(e beyond the scope of this book.) 109.29 614.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 221.15 581.29 T
4 9 Q
(vehicle-dynamics.dylan) 241.16 581.29 T
8 10 Q
( \336le) 359.96 581.29 T
(.) 375.37 581.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport) 105.65 561.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// We do not need to type these constants strongly, because the Dylan) 105.65 542.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// compiler will figure them out for us) 105.65 531.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $average-b707-brake-speed = 60.0;) 105.65 512.95 T
5 F
( // Miles per hour) 370.25 512.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $feet-per-mile = 5280.0;) 105.65 493.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $average-b707-takeoff-speed = 60.0;) 105.65 474.95 T
5 F
(// Miles per hour) 386.45 474.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $takeoff-pause-time = 120;) 105.65 455.95 T
5 F
(// Seconds) 337.85 455.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $average-b707-taxi-speed = 10.0;) 105.65 436.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $average-b707-gate-turnaround-time) 105.65 417.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= 34 * $seconds-per-minute;) 116.45 406.95 T
5 F
(// Seconds) 267.65 406.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Computes how long it will take an aircraft to reach an airport) 105.65 387.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method flying-time) 105.65 376.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <aircraft>, destination :: <airport>\051) 127.25 365.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 111.05 354.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A simplistic calculation that assumes that the aircraft will) 116.45 343.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// average a particular cruising speed for the trip) 116.45 332.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(make\050<time-offset>,) 116.45 321.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds:) 143.45 310.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ceiling/\050distance-3d\050aircraft, destination\051,) 154.25 299.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(aircraft.cruising-speed) 202.85 288.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(/ as\050<single-float>, $seconds-per-hour\051\051\051;) 213.65 277.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method flying-time;) 105.65 266.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 593.83 99.65 260.08 2 L
V
0.25 H
0 Z
N
513.65 593.83 513.65 260.08 2 L
V
N
99.52 593.95 513.77 593.95 2 L
V
N
99.52 573.95 513.77 573.95 2 L
V
N
99.52 259.95 513.77 259.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "265" 279
%%Page: "266" 280
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(266) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// Computes the distance between an aircraft and an airport,) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// taking into account the altitude of the aircraft) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Assumes the altitude of the aircraft is the height) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// above the ground level of the airport) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method distance-3d) 105.65 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <aircraft>, destination :: <airport>\051) 127.25 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050distance :: <single-float>\051) 111.05 574.95 T
5 F
(// Miles) 289.25 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Here, a squared plus b squared is equals to c squared, where c is the) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// hypotenuse, and a and b are the other sides of a right triangle) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(sqrt\050\050aircraft.altitude / $feet-per-mile\051 ^ 2) 116.45 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(+ distance-2d\050aircraft.current-position,) 143.45 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(destination.current-position\051 ^ 2\051;) 219.05 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method distance-3d;) 105.65 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The distance between two positions, ignoring altitude) 105.65 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method distance-2d) 105.65 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050position1 :: <relative-position>, position2 :: <absolute-position>\051) 127.25 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050distance :: <single-float>\051) 111.05 456.95 T
5 F
(// Miles) 283.85 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// When we have a relative position for the first argument \050the) 116.45 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// aircraft\051, we assume the relative position is relative to the second) 116.45 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// argument \050the airport\051) 116.45 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(position1.distance;) 116.45 412.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method distance-2d;) 105.65 401.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// It would be sensible to provide a distance-2d method that computed) 105.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the great-circle distance between two absolute positions) 105.65 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Our example does not need this computation, which is) 105.65 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// beyond the scope of this book) 105.65 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The time it takes to go from the point of touchdown to the entrance) 105.65 330.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// to the taxiway) 105.65 319.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method brake-time) 105.65 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, runway :: <runway>\051) 127.25 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 111.05 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>,) 116.45 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds:) 138.05 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( ceiling/\050runway.physical-size.length / $feet-per-mile,) 148.85 253.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($average-b707-brake-speed / $seconds-per-hour\051\051;) 202.85 242.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method brake-time;) 105.65 231.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 194.8 660.29 T
4 9 Q
(vehicle-dynamics.dylan) 214.81 660.29 T
8 10 Q
( \336le) 333.61 660.29 T
(.) 349.02 660.29 T
9 F
( \050contin) 351.8 660.29 T
(ued\051) 384.49 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 225.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 225.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 224.95 513.77 224.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "266" 280
%%Page: "267" 281
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 378.48 702.62 T
5 F
(schedule.dylan) 414.11 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(267) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(17.4  The) 99.65 224.95 T
4 14 Q
(schedule.dylan) 155.72 224.95 T
3 15 Q
( \336le) 273.32 224.95 T
1 11 Q
(This \336le contains the key generic functions and methods that compute the sched-) 99.65 204.62 T
(ule of air) 99.65 190.62 T
(craft transitions using the sorted sequence, time, and position libraries,) 142.77 190.62 T
(as well as the classes and methods described so far in this chapter) 99.65 176.62 T
(.) 417.48 176.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// The time it takes to go from the entrance of the taxiway to the point) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// of takeoff) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method takeoff-time) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, runway :: <runway>\051) 127.25 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 111.05 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>,) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds:) 138.05 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( ceiling/\050runway.physical-size.length / $feet-per-mile,) 148.85 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($average-b707-takeoff-speed / $seconds-per-hour\051) 202.85 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( + $takeoff-pause-time\051;) 159.65 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method takeoff-time;) 105.65 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time it takes to taxi from the runway entrance across the taxiway) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// to the gate) 105.65 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method gate-time) 105.65 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, taxiway :: <taxiway>\051) 127.25 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 111.05 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>,) 116.45 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds:) 138.05 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( ceiling/\050taxiway.physical-size.length / $feet-per-mile,) 148.85 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
($average-b707-taxi-speed / $seconds-per-hour\051\051;) 202.85 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method gate-time;) 105.65 412.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time it takes to taxi from the gate across the taxiway to the) 105.65 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// entrance of the runway) 105.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method runway-time) 105.65 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, taxiway :: <taxiway>\051) 127.25 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050duration :: <time-offset>\051) 111.05 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate-time\050aircraft, taxiway\051;) 116.45 338.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method runway-time;) 105.65 327.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The time it takes to unload, service, and load an aircraft.) 105.65 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method gate-turnaround) 105.65 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft :: <b707>, gate :: <gate>\051 => \050duration :: <time-offset>\051) 127.25 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<time-offset>, total-seconds: $average-b707-gate-turnaround-time\051;) 116.45 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method gate-turnaround;) 105.65 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 194.8 660.29 T
4 9 Q
(vehicle-dynamics.dylan) 214.81 660.29 T
8 10 Q
( \336le) 333.61 660.29 T
(.) 349.02 660.29 T
9 F
( \050contin) 351.8 660.29 T
(ued\051) 384.49 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 258.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 258.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 257.95 513.77 257.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "267" 281
%%Page: "268" 282
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(268) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(First, we pr) 126.65 665.62 T
(esent the \336ve key generic functions that make up our container) 182.01 665.62 T
-0.17 (pr) 99.65 651.62 P
-0.17 (otocol, followed by an implementation of that pr) 110.41 651.62 P
-0.17 (otocol for the container classes) 345.37 651.62 P
(de\336ned in Section 17.2.2, page 257.) 99.65 637.62 T
3 13 Q
(17.4.1  The container pr) 99.65 606.29 T
(otocol and implementation) 218.55 606.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 242.75 567.29 T
4 9 Q
(schedule.dylan) 262.76 567.29 T
8 10 Q
( \336le) 338.36 567.29 T
(.) 353.77 567.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport) 105.65 547.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// The following generic functions constitute the essential protocol for) 105.65 528.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// interaction between containers and vehicles) 105.65 517.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Returns true if container is available for aircraft in direction) 105.65 498.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic available? \050vehicle, container, direction\051;) 105.65 487.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Moves vehicle into container in the given direction) 105.65 468.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic move-in-vehicle \050vehicle, container, direction\051;) 105.65 457.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Moves vehicle out of container in the given direction) 105.65 438.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic move-out-vehicle \050vehicle, container, direction\051;) 105.65 427.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Returns the aircraft next in line to move out of container in direction) 105.65 408.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic next-out \050container, direction\051;) 105.65 397.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Returns the class of the next container to move vehicle into,) 105.65 378.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// and how long it will take to get there) 105.65 367.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define generic next-landing-step \050container, vehicle\051;) 105.65 356.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A single storage container is available if the aircraft fits into the) 105.65 337.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the container, and there is not already a vehicle in the container) 105.65 326.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method available?) 105.65 315.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <single-storage>,) 127.25 304.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 127.25 293.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050container-available? :: <boolean>\051) 111.05 282.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object-fits?\050vehicle, container\051) 116.45 271.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& ~ \050container.vehicle-currently-occupying\051;) 116.45 260.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method available?;) 105.65 249.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 579.83 99.65 243.08 2 L
V
0.25 H
0 Z
N
513.65 579.83 513.65 243.08 2 L
V
N
99.52 579.95 513.77 579.95 2 L
V
N
99.52 559.95 513.77 559.95 2 L
V
N
99.52 242.95 513.77 242.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "268" 282
%%Page: "269" 283
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 378.48 702.62 T
5 F
(schedule.dylan) 414.11 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(269) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// A multiple storage container is available if the aircraft fits into) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the container, and there are not too many aircraft already queued in) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the container for the specified direction) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method available?) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <multiple-storage>,) 127.25 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 127.25 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050container-available? :: <boolean>\051) 111.05 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(object-fits?\050vehicle, container\051) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& size\050container.vehicles-by-direction[direction]\051) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(< container.maxima-by-direction[direction];) 127.25 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method available?;) 105.65 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Avoids jamming the runway with inbound traffic, which would prevent) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// outbound aircraft from taking off) 105.65 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The runway is clear to inbound traffic only if there is space in the) 105.65 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// next container inbound from the runway) 105.65 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method available?) 105.65 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <runway>,) 127.25 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 127.25 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050container-available? :: <boolean>\051) 111.05 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051) 116.45 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& select \050direction\051) 127.25 412.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"outbound" => #t;) 148.85 401.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"inbound") 148.85 390.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> let \050class\051 = next-landing-step\050container, vehicle\051;) 159.65 379.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( if \050class\051) 170.45 368.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( find-available-connection\050container, class, vehicle\051;) 181.25 357.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( end if;) 170.45 346.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end select;) 138.05 335.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method available?;) 105.65 324.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// A slot is used to keep track of which aircraft is in a single) 105.65 305.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// storage container) 105.65 294.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method move-in-vehicle) 105.65 283.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <single-storage>,) 127.25 272.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 127.25 261.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 111.05 250.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(container.vehicle-currently-occupying := vehicle;) 116.45 239.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 116.45 228.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-in-vehicle;) 105.65 217.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 211.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 211.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 210.95 513.77 210.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "269" 283
%%Page: "270" 284
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(270) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// A deque is used to keep track of which aircraft are traveling in a) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// particular direction in a multiple storage container) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method move-in-vehicle) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <multiple-storage>,) 127.25 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 127.25 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 111.05 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicles = container.vehicles-by-direction[direction];) 116.45 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(push-last\050vehicles, vehicle\051;) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-in-vehicle;) 105.65 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// When an aircraft reaches the gate, it begins its outbound journey) 105.65 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method move-in-vehicle) 105.65 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <gate>,) 127.25 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction :: <symbol>\051) 132.65 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 111.05 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 116.45 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle.direction := #"outbound";) 116.45 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 116.45 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-in-vehicle;) 105.65 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method move-out-vehicle) 105.65 415.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle :: <aircraft>, container :: <single-storage>,) 127.25 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction :: <symbol>\051) 127.25 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 111.05 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(container.vehicle-currently-occupying := #f;) 116.45 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 116.45 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-out-vehicle;) 105.65 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method move-out-vehicle) 105.65 330.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050vehicle) 127.25 319.95 T
( :: <aircraft>,) 181.25 319.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( container :: <multiple-storage>, direction :: <symbol>\051) 127.25 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 111.05 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicles = container.vehicles-by-direction[direction];) 116.45 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Assumes that aircraft always exit container in order, and) 116.45 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// that this aircraft is next) 116.45 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(pop\050vehicles\051;) 116.45 253.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050\051;) 116.45 242.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method move-out-vehicle;) 105.65 231.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 225.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 225.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 224.95 513.77 224.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "270" 284
%%Page: "271" 285
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 378.48 702.62 T
5 F
(schedule.dylan) 414.11 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(271) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// Determines what vehicle, if any, could move to the next container) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// If there is such a vehicle, then this method returns the vehicle,) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// the next container in the direction of travel,) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// and the time that it would take to make that transition) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method next-out) 105.65 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <vehicle-storage>, direction :: <symbol>\051) 127.25 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-vehicle :: false-or\050<vehicle>\051,) 111.05 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-storage :: false-or\050<vehicle-storage>\051,) 132.65 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time-to-execute :: false-or\050<time-offset>\051\051;) 132.65 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let next-vehicle = next-out-internal\050container, direction\051;) 116.45 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050next-vehicle\051) 116.45 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050class, time\051 = next-landing-step\050container, next-vehicle\051;) 127.25 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050class\051) 127.25 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let next-container) 138.05 497.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= find-available-connection\050container, class, next-vehicle\051;) 148.85 486.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050next-container\051) 138.05 475.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050next-vehicle, next-container, time\051;) 148.85 464.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 138.05 453.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 127.25 442.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 116.45 431.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-out;) 105.65 420.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// This method is just a helper method for the next-out method) 105.65 401.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// We need different methods based on the class of container) 105.65 390.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method next-out-internal) 105.65 379.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <single-storage>, desired-direction :: <symbol>\051) 127.25 368.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050vehicle :: false-or\050<aircraft>\051\051) 111.05 357.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle = container.vehicle-currently-occupying;) 116.45 346.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050vehicle & vehicle.direction == desired-direction\051 vehicle; end;) 116.45 335.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-out-internal;) 105.65 324.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-out-internal) 105.65 305.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <multiple-storage>, desired-direction :: <symbol>\051) 127.25 294.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050vehicle :: false-or\050<aircraft>\051\051) 111.05 283.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle-queue = container.vehicles-by-direction[desired-direction];) 116.45 272.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050vehicle-queue.size > 0\051 vehicle-queue[0]; end;) 116.45 261.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-out-internal;) 105.65 250.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 244.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 244.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 243.95 513.77 243.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "271" 285
%%Page: "272" 286
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(272) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(17.4.2  The sc) 99.65 240.29 T
(heduling algorithm) 168.9 240.29 T
1 11 Q
(The next methods form the cor) 99.65 220.62 T
(e of the airport application.) 249.13 220.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// The following methods return the class of the next container to which a) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// vehicle can move from a particular container) 105.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// They also return an estimate of how long that transition will take) 105.65 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method next-landing-step) 105.65 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <sky>, aircraft :: <aircraft>\051) 127.25 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: false-or\050<class>\051, duration :: false-or\050<time-offset>\051\051) 111.05 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050aircraft.direction == #"inbound"\051) 116.45 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050<runway>, flying-time\050aircraft, storage.airport-below\051\051;) 127.25 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 105.65 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-landing-step) 105.65 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <runway>, aircraft :: <aircraft>\051) 127.25 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: <class>, duration :: <time-offset>\051) 111.05 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(select \050aircraft.direction\051) 116.45 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"inbound") 127.25 478.95 T
(=> values\050<taxiway>, brake-time\050aircraft, storage\051\051;) 192.05 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"outbound" => values\050<sky>, takeoff-time\050aircraft, storage\051\051;) 127.25 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end select;) 116.45 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 105.65 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-landing-step) 105.65 426.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <taxiway>, aircraft :: <aircraft>\051) 127.25 415.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: <class>, duration :: <time-offset>\051) 111.05 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(select \050aircraft.direction\051) 116.45 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"inbound") 127.25 382.95 T
(=> values\050<gate>, gate-time\050aircraft, storage\051\051;) 192.05 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(#"outbound" => values\050<runway>, runway-time\050aircraft, storage\051\051;) 127.25 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end select;) 116.45 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 105.65 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method next-landing-step) 105.65 330.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <gate>, aircraft :: <aircraft>\051) 127.25 319.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-class :: <class>, duration :: <time-offset>\051) 111.05 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values\050<taxiway>, gate-turnaround\050aircraft, storage\051\051;) 116.45 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method next-landing-step;) 105.65 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 280.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 280.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 279.95 513.77 279.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "272" 286
%%Page: "273" 287
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 378.48 702.62 T
5 F
(schedule.dylan) 414.11 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(273) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
0 X
(The) 216.4 646.29 T
4 9 Q
(schedule.dylan) 236.41 646.29 T
8 10 Q
( \336le) 312.01 646.29 T
(.) 327.42 646.29 T
9 F
( \050contin) 330.2 646.29 T
(ued\051) 362.89 646.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// Searches all of the vehicle storage of class class-of-next, which is) 105.65 626.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// connected to container and has room for aircraft) 105.65 615.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method find-available-connection) 105.65 604.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050storage :: <vehicle-storage>, class-of-next :: <class>,) 127.25 593.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( aircraft :: <aircraft>\051) 127.25 582.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050next-container :: <vehicle-storage>\051) 111.05 571.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(block \050return\051) 116.45 560.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050c in storage.connected-to\051) 127.25 549.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050instance?\050c, class-of-next\051) 138.05 538.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(& available?\050aircraft, c, aircraft.direction\051\051) 159.65 527.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(return\050c\051;) 148.85 516.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 138.05 505.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 127.25 494.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end block;) 116.45 483.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method find-available-connection;) 105.65 472.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Generate new transitions to be considered for the next move) 105.65 453.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The transitions will be placed in the sorted sequence, which will order) 105.65 442.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// them by earliest arrival time) 105.65 431.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method generate-new-transitions) 105.65 420.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050container :: <vehicle-storage>, active-transitions :: <sorted-) 127.25 409.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence>,) 105.65 398.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( containers-visited :: <object-table>\051) 127.25 387.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050\051) 111.05 376.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unless\050containers-visited[container]\051) 116.45 365.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Keep track of which containers we have searched for new possible) 127.25 354.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transitions) 127.25 343.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// We avoid looping forever by checking each container just once) 127.25 332.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(containers-visited[container] := #t;) 127.25 321.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(local method consider-transition \050direction\051) 127.25 302.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// See whether any vehicle is ready to transition out of a container) 138.05 291.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let \050vehicle, next-container, time\051) 138.05 280.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= next-out\050container, direction\051;) 148.85 269.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unless \050vehicle == #f | vehicle.next-transition.pending?\051) 138.05 258.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If there is a vehicle ready, and it is not already in the) 148.85 247.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence of pending transitions, then prepare the) 148.85 236.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transition instance associated with the vehicle) 148.85 225.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let transition = vehicle.next-transition;) 148.85 214.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.from-container := container;) 148.85 203.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.to-container := next-container;) 148.85 192.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 658.83 99.65 186.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 186.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 185.95 513.77 185.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "273" 287
%%Page: "274" 288
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(274) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// The vehicle may have been waiting) 148.85 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Take this situation into account when computing the earliest) 148.85 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// arrival into the next container) 148.85 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(transition.earliest-arrival := transition.earliest-arrival + time;) 148.85 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Flag the vehicle as pending, to save searching through the) 148.85 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// active-transitions sorted sequence later) 148.85 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(transition.pending? := #t;) 148.85 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Add the transition to the set to be considered) 148.85 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(add!\050active-transitions, transition\051;) 148.85 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end unless;) 138.05 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method consider-transition;) 127.25 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Consider both inbound and outbound traffic) 127.25 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(consider-transition\050#"outbound"\051;) 127.25 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(consider-transition\050#"inbound"\051;) 127.25 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Make sure that every container connected to this one is checked) 127.25 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(for \050c in container.connected-to\051) 127.25 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(generate-new-transitions\050c, active-transitions, containers-visited\051;) 138.05 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 127.25 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end unless;) 116.45 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method generate-new-transitions;) 105.65 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Main loop of the program) 105.65 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// See what possible transitions exist, then execute the earliest) 105.65 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// transitions that can be completed) 105.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Returns the time of the last transition) 105.65 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method process-aircraft) 105.65 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050airport :: <airport>, #key time = $midnight\051) 127.25 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050time :: <time-of-day>\051) 111.05 338.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"Detailed aircraft schedule for "\051;) 116.45 327.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050airport\051;) 116.45 316.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n\134n"\051;) 116.45 305.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let sky = airport.sky-above;) 116.45 294.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let containers-visited = make\050<object-table>\051;) 116.45 283.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let active-transitions = make\050<sorted-sequence>,) 116.45 272.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value-function: earliest-arrival\051;) 273.05 261.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 255.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 255.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 254.95 513.77 254.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "274" 288
%%Page: "275" 289
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.4 The) 378.48 702.62 T
5 F
(schedule.dylan) 414.11 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(275) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
0 X
(// We do not have to use return as the name of the exit procedure) 116.45 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(block \050done\051) 116.45 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(while \050#t\051) 127.25 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Each time through, start by considering every container) 138.05 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(fill!\050containers-visited, #f\051;) 138.05 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// For every container, see if any vehicles are ready to transition) 138.05 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// If any are, add transition instances to the active-transitions) 138.05 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// sorted sequence) 138.05 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(generate-new-transitions\050sky, active-transitions,) 138.05 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(containers-visited\051;) 273.05 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If there are no more transitions, we have completed our task) 138.05 522.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(if \050empty?\050active-transitions\051\051 done\050\051; end;) 138.05 511.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Find the earliest transition that can complete, because there is) 138.05 500.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// still room available in the destination container) 138.05 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let transition-index) 138.05 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= find-key\050active-transitions,) 148.85 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( method \050transition\051) 202.85 456.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( available?\050transition.transition-aircraft,) 213.65 445.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.to-container,) 278.45 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(transition.transition-aircraft.direction\051;) 278.45 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( end\051;) 202.85 412.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// If none can complete, there is a problem with the simulation) 138.05 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// This situation should never occur, but is useful for debugging) 138.05 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// incorrect container configurations) 138.05 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(if \050transition-index == #f\051) 138.05 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(error\050"Pending transitions but none can complete."\051;) 148.85 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end if;) 138.05 338.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Otherwise, the earliest transition that can complete has been) 138.05 319.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// found: Execute the transition) 138.05 308.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let transition = active-transitions[transition-index];) 138.05 297.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle = transition.transition-aircraft;) 138.05 286.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let vehicle-direction = vehicle.direction;) 138.05 275.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(move-out-vehicle\050vehicle, transition.from-container,) 138.05 264.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle-direction\051;) 229.85 253.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-1.47 (move-in-vehicle\050vehicle, transition.to-container, vehicle-direction\051;) 138.05 242.95 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 236.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 236.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 235.95 513.77 235.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "275" 289
%%Page: "276" 290
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(276) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 99.65 482.62 T
4 10 Q
(process-aircraft) 120.81 482.62 T
1 11 Q
( method uses components fr) 216.81 482.62 T
(om the time, space and) 354.09 482.62 T
(sorted sequence libraries, the container classes and pr) 99.65 468.62 T
(otocols, and the vehicle) 359.68 468.62 T
(classes and methods to schedule the air) 99.65 454.62 T
(craft arriving and departing fr) 290.72 454.62 T
(om an air-) 437.2 454.62 T
(port. The) 99.65 440.62 T
4 10 Q
(generate-new-transitions) 146.86 440.62 T
1 11 Q
( method assists by examining the curr) 290.86 440.62 T
(ent) 474.95 440.62 T
(state of all containers in the airport, and by noting any new steps that vehicles) 99.65 426.62 T
(could take.) 99.65 412.62 T
3 15 Q
(17.5  The) 99.65 372.95 T
4 14 Q
(airport-test.dylan) 155.72 372.95 T
3 15 Q
( \336le) 306.92 372.95 T
1 11 Q
(The) 99.65 352.62 T
4 10 Q
(airport-test.dylan) 120.81 352.62 T
1 11 Q
( \336le contains test data, and the code that constr) 228.81 352.62 T
(ucts a) 456.13 352.62 T
(model of the simple airport described in Section 15.1, page 237. The \336nal method) 99.65 338.62 T
-0.13 (is a top-level testing function that builds the airport model and executes the main) 99.65 324.62 P
(air) 99.65 310.62 T
(craft scheduling function. After de\336ning the test, we show the r) 112.5 310.62 T
(esults of r) 420.39 310.62 T
(un-) 467.83 310.62 T
(ning it.) 99.65 296.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(// This transition is complete; remove it from consideration) 138.05 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(transition.pending? := #f;) 138.05 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(remove!\050active-transitions, transition\051;) 138.05 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// Compute the actual time of arrival at the next container, and) 138.05 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// display the message) 138.05 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(time := \050transition.earliest-arrival) 138.05 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(:= max\050time, transition.earliest-arrival\051\051;) 192.05 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050transition\051;) 138.05 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format-out\050"\134n"\051;) 138.05 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end while;) 127.25 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end block;) 116.45 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(time;) 116.45 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method process-aircraft;) 105.65 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 231.95 263.29 T
4 9 Q
(airport-test.dylan) 251.96 263.29 T
8 10 Q
( \336le) 349.16 263.29 T
(.) 364.57 263.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: airport-test) 105.65 243.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(// To keep the example relatively simple, we will use variables to hold) 105.65 224.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// test data for the flights and aircraft) 105.65 213.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Ordinarily, this information would be read from a file or database) 105.65 202.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *flight-numbers* = #[62, 7, 29, 12, 18, 44];) 105.65 183.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 216.4 660.29 T
4 9 Q
(schedule.dylan) 236.41 660.29 T
8 10 Q
( \336le) 312.01 660.29 T
(.) 327.42 660.29 T
9 F
( \050contin) 330.2 660.29 T
(ued\051) 362.89 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 502.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 502.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 501.95 513.77 501.95 2 L
V
N
99.65 275.83 99.65 177.08 2 L
V
N
513.65 275.83 513.65 177.08 2 L
V
N
99.52 275.95 513.77 275.95 2 L
V
N
99.52 255.95 513.77 255.95 2 L
V
N
99.52 176.95 513.77 176.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "276" 290
%%Page: "277" 291
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.5 The) 355.68 702.62 T
5 F
(airport-test.dylan) 391.3 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(277) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(define variable *aircraft-distances*) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #[3, 10, 175, 450, 475, 477];) 116.45 629.95 T
5 F
(// Miles) 321.65 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *aircraft-headings*) 105.65 610.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #[82, 191, 49, 112, 27, 269];) 116.45 599.95 T
5 F
(// Degrees) 321.65 599.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *aircraft-altitudes*) 105.65 580.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #[7000, 15000, 22000, 22500, 22000, 21000];) 116.45 569.95 T
5 F
(// Feet) 381.05 569.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define variable *aircraft-ids*) 105.65 550.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= #["72914", "82290", "18317", "26630", "43651", "40819"];) 116.45 539.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define constant $default-runway-size) 105.65 520.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<size>, length: 10000, width: 200, height: 100\051;) 116.45 509.95 T
5 F
(// Feet) 435.05 509.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define constant $default-taxiway-size) 105.65 490.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<size>, length: 900, width: 200, height: 100\051;) 116.45 479.95 T
5 F
(// Feet) 424.25 479.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// Assumes that there is only one runway, and one taxiway) 105.65 460.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// The taxiway-count variable will determine how many aircraft can wait) 105.65 449.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(// in line for each direction of the taxiway) 105.65 438.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(define method build-simple-airport) 105.65 427.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050#key gates-per-terminal :: <vector> = #[2],) 127.25 416.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( capacity :: <size> = $default-capacity,) 127.25 405.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( runway-size :: <size> = $default-runway-size,) 127.25 394.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( taxiway-size :: <size> = $default-taxiway-size,) 127.25 383.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( taxiway-count :: <positive-integer> = 5,) 127.25 372.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( position-report-time :: <time-of-day>) 127.25 361.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( = make\050<time-of-day>,) 138.05 350.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\0506, 0, 0\051\051\051) 165.05 339.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(=> \050airport :: <airport>\051) 111.05 328.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let gates = generate-gates\050gates-per-terminal, capacity\051;) 116.45 309.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let taxiway) 116.45 298.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<taxiway>, id: "Echo", directions: #[#"inbound", #"outbound"],) 127.25 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( maxima: vector\050taxiway-count, taxiway-count\051,) 159.65 276.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( capacity: capacity, physical-size: taxiway-size\051;) 159.65 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let runway = make\050<runway>, id: "11R-29L", capacity: capacity,) 116.45 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(physical-size: runway-size\051;) 213.65 243.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let keystone-air = make\050<airline>, name: "Keystone Air", code: "KN"\051;) 116.45 232.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let flights) 116.45 221.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= map\050method \050fn\051) 127.25 210.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<flight>, airline: keystone-air, number: fn\051 end,) 159.65 199.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*flight-numbers*\051;) 159.65 188.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.6 660.29 T
4 9 Q
(airport-test.dylan) 225.61 660.29 T
8 10 Q
( \336le) 322.81 660.29 T
(.) 338.22 660.29 T
9 F
( \050contin) 341 660.29 T
(ued\051) 373.69 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 182.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 182.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 181.95 513.77 181.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "277" 291
%%Page: "278" 292
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(278) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
0 X
(let aircraft) 116.45 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= map\050method \050aircraft-flight, aircraft-distance, aircraft-heading,) 127.25 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(aircraft-altitude, aircraft-id\051) 202.85 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<b707>,) 170.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(flight: aircraft-flight,) 197.45 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( current-position:) 192.05 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( make\050<relative-position>,) 202.85 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(distance: aircraft-distance,) 235.25 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(angle:) 235.25 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<angle>,) 246.05 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds:) 273.05 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(encode-total-seconds) 283.85 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\050aircraft-heading, 0, 0\051\051\051,) 294.65 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( altitude: aircraft-altitude,) 192.05 497.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( id: aircraft-id,) 192.05 486.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( transition: make\050<aircraft-transition>,) 192.05 475.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(arrival: position-report-time\051\051;) 289.25 464.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end,) 159.65 453.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(flights, *aircraft-distances*, *aircraft-headings*,) 159.65 434.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*aircraft-altitudes*, *aircraft-ids*\051;) 159.65 423.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let airport) 116.45 404.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(= make\050<airport>,) 127.25 393.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( name: "Belefonte Airport",) 159.65 382.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( code: "BLA",) 159.65 371.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( current-position:) 159.65 360.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( make\050<absolute-position>,) 170.45 349.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(latitude:) 202.85 338.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<latitude>,) 213.65 327.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds: encode-total-seconds\05040, 57, 43\051,) 235.25 316.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction: #"north"\051,) 235.25 305.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(longitude:) 202.85 294.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<longitude>,) 213.65 283.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( total-seconds: encode-total-seconds\05077, 40, 24\051,) 235.25 272.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( direction: #"west"\051\051\051;) 235.25 261.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.6 660.29 T
4 9 Q
(airport-test.dylan) 225.61 660.29 T
8 10 Q
( \336le) 322.81 660.29 T
(.) 338.22 660.29 T
9 F
( \050contin) 341 660.29 T
(ued\051) 373.69 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 255.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 255.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 254.95 513.77 254.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "278" 292
%%Page: "279" 293
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.5 The) 355.68 702.62 T
5 F
(airport-test.dylan) 391.3 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(279) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Now) 99.65 441.62 T
(, we show the r) 122.96 441.62 T
(esult of r) 196.8 441.62 T
(unning) 239.58 441.62 T
4 10 Q
(test-airport) 277.48 441.62 T
1 11 Q
(:) 349.48 441.62 T
6 9 Q
(?) 99.65 420.95 T
4 F
(test-airport\050\051:) 110.45 420.95 T
6 F
(Detailed aircraft schedule for Airport BLA) 99.65 409.95 T
(6:00: Flight KN 62 at Runway 11R-29L) 99.65 398.95 T
(6:02: Flight KN 62 at Taxiway Echo) 99.65 387.95 T
(6:02: Flight KN 7 at Runway 11R-29L) 99.65 376.95 T
(6:03: Flight KN 62 at Gate A1) 99.65 365.95 T
(6:04: Flight KN 7 at Taxiway Echo) 99.65 354.95 T
(6:05: Flight KN 7 at Gate A2) 99.65 343.95 T
(6:28: Flight KN 29 at Runway 11R-29L) 99.65 332.95 T
(6:30: Flight KN 29 at Taxiway Echo) 99.65 321.95 T
(6:37: Flight KN 62 at Taxiway Echo) 99.65 310.95 T
(6:37: Flight KN 29 at Gate A1) 99.65 299.95 T
(6:38: Flight KN 62 at Runway 11R-29L) 99.65 288.95 T
(6:39: Flight KN 7 at Taxiway Echo) 99.65 277.95 T
(6:42: Flight KN 62 at Sky over BLA) 99.65 266.95 T
(6:42: Flight KN 7 at Runway 11R-29L) 99.65 255.95 T
(6:46: Flight KN 7 at Sky over BLA) 99.65 244.95 T
(7:11: Flight KN 29 at Taxiway Echo) 99.65 233.95 T
(7:12: Flight KN 29 at Runway 11R-29L) 99.65 222.95 T
(7:16: Flight KN 29 at Sky over BLA) 99.65 211.95 T
(7:16: Flight KN 12 at Runway 11R-29L) 99.65 200.95 T
(7:18: Flight KN 12 at Taxiway Echo) 99.65 189.95 T
(7:18: Flight KN 18 at Runway 11R-29L) 99.65 178.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(let sky = make\050<sky>, inbound-aircraft: aircraft, airport: airport,) 116.45 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
( id: concatenate\050"over ", airport.code\051\051;) 192.05 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport.sky-above := sky;) 116.45 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(runway.connected-to := vector\050taxiway, sky\051;) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let taxiway-vector = vector\050taxiway\051;) 116.45 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for \050gate in gates\051) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate.connected-to := taxiway-vector;) 127.25 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end for;) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let runway-vector = vector\050runway\051;) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(taxiway.connected-to := concatenate\050runway-vector, gates\051;) 116.45 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sky.connected-to := runway-vector;) 116.45 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport;) 116.45 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method build-simple-airport;) 105.65 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define method test-airport \050\051 => \050last-transition :: <time-of-day>\051) 105.65 489.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(process-aircraft\050build-simple-airport\050\051\051;) 116.45 478.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end method test-airport;) 105.65 467.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 205.6 660.29 T
4 9 Q
(airport-test.dylan) 225.61 660.29 T
8 10 Q
( \336le) 322.81 660.29 T
(.) 338.22 660.29 T
9 F
( \050contin) 341 660.29 T
(ued\051) 373.69 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 461.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 461.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 460.95 513.77 460.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "279" 293
%%Page: "280" 294
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(280) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(7:19: Flight KN 12 at Gate A1) 99.65 666.95 T
(7:20: Flight KN 18 at Taxiway Echo) 99.65 655.95 T
(7:20: Flight KN 44 at Runway 11R-29L) 99.65 644.95 T
(7:21: Flight KN 18 at Gate A2) 99.65 633.95 T
(7:22: Flight KN 44 at Taxiway Echo) 99.65 622.95 T
(7:53: Flight KN 12 at Taxiway Echo) 99.65 611.95 T
(7:53: Flight KN 44 at Gate A1) 99.65 600.95 T
(7:54: Flight KN 12 at Runway 11R-29L) 99.65 589.95 T
(7:55: Flight KN 18 at Taxiway Echo) 99.65 578.95 T
(7:58: Flight KN 12 at Sky over BLA) 99.65 567.95 T
(7:58: Flight KN 18 at Runway 11R-29L) 99.65 556.95 T
(8:02: Flight KN 18 at Sky over BLA) 99.65 545.95 T
(8:27: Flight KN 44 at Taxiway Echo) 99.65 534.95 T
(8:28: Flight KN 44 at Runway 11R-29L) 99.65 523.95 T
(8:32: Flight KN 44 at Sky over BLA) 99.65 512.95 T
({class <TIME-OF-DAY>}) 99.65 501.95 T
3 15 Q
(17.6  The) 99.65 463.95 T
4 14 Q
(definitions-library.dylan) 155.72 463.95 T
3 15 Q
( \336le) 365.72 463.95 T
1 11 Q
(The) 99.65 443.62 T
4 10 Q
(definitions-library.dylan) 120.81 443.62 T
1 11 Q
( \336le pr) 270.81 443.62 T
(ovides common de\336nitions for all the) 302.2 443.62 T
(libraries in the airport example.) 99.65 429.62 T
(Note that this library and module, and the other libraries and modules that) 126.65 415.62 T
(follow) 99.65 401.62 T
(, do not separate the library implementation module fr) 129.89 401.62 T
(om the library inter-) 395.16 401.62 T
(face module, as discussed in Section 13.4.1, page 196. Dylan allows several dif) 99.65 387.62 T
(fer-) 476.89 387.62 T
(ent appr) 99.65 373.62 T
(oaches to library and module ar) 140.52 373.62 T
(chitectur) 295.2 373.62 T
(e. Her) 337.79 373.62 T
(e, we pr) 367.12 373.62 T
(esent an) 405.84 373.62 T
(alternative or) 99.65 359.62 T
(ganization.) 164.62 359.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 213.05 326.29 T
4 9 Q
(definitions-library.dylan) 233.06 326.29 T
8 10 Q
( \336le) 368.06 326.29 T
(.) 383.47 326.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 306.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library definitions) 105.65 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export definitions;) 116.45 276.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library definitions;) 105.65 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module definitions) 105.65 235.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export $letters, <positive-integer>;) 116.45 224.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export $hours-per-day, $minutes-per-hour;) 116.45 213.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export $seconds-per-minute, $seconds-per-hour, false-or;) 116.45 202.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 191.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module definitions;) 105.65 180.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 338.83 99.65 174.08 2 L
V
0.25 H
0 Z
N
513.65 338.83 513.65 174.08 2 L
V
N
99.52 338.95 513.77 338.95 2 L
V
N
99.52 318.95 513.77 318.95 2 L
V
N
99.52 173.95 513.77 173.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "280" 294
%%Page: "281" 295
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.8 The) 338.58 702.62 T
5 F
(airport-library.dylan) 374.2 702.62 T
0 F
( file) 493.9 702.62 T
2 F
(281) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(17.7  The) 99.65 662.95 T
4 14 Q
(definitions.lid) 155.72 662.95 T
3 15 Q
( \336le) 281.72 662.95 T
(17.8  The) 99.65 540.95 T
4 14 Q
(airport-library.dylan) 155.72 540.95 T
3 15 Q
( \336le) 332.12 540.95 T
1 11 Q
(The airport library implements the main scheduling system for the airport exam-) 99.65 520.62 T
-0.44 (ple. This library assumes that your Dylan implementation pr) 99.65 506.62 P
-0.44 (ovides a) 391.15 506.62 P
4 10 Q
-0.97 (format-out) 433.34 506.62 P
1 11 Q
(library) 99.65 492.62 T
(, which supplies the) 131.22 492.62 T
4 10 Q
(format-out) 231.14 492.62 T
1 11 Q
( and) 291.14 492.62 T
4 10 Q
(format-to-string) 315.27 492.62 T
1 11 Q
( functions. This) 411.27 492.62 T
(library also assumes that ther) 99.65 478.62 T
(e is a) 242.4 478.62 T
4 10 Q
(transcendentals) 269.28 478.62 T
1 11 Q
( library) 359.28 478.62 T
(, which supplies the) 393.6 478.62 T
4 10 Q
(sqrt) 99.65 464.62 T
1 11 Q
( \050squar) 123.65 464.62 T
(e r) 157.16 464.62 T
(oot\051 function.) 169.33 464.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 240.05 623.29 T
4 9 Q
(definitions.lid) 260.06 623.29 T
8 10 Q
( \336le) 341.06 623.29 T
(.) 356.47 623.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 105.65 603.95 T
(definitions) 159.65 603.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 592.95 T
(definitions-library) 159.65 592.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(definitions) 159.65 581.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 223.85 436.29 T
4 9 Q
(airport-library.dylan) 243.86 436.29 T
8 10 Q
( \336le) 357.26 436.29 T
(.) 372.67 436.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 416.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library airport) 105.65 397.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export airport;) 116.45 386.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 375.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use transcendentals;) 116.45 356.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use say;) 116.45 345.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out;) 116.45 334.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 116.45 323.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use sorted-sequence;) 116.45 312.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle;) 116.45 301.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 116.45 290.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library airport;) 105.65 279.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 635.83 99.65 575.08 2 L
V
0.25 H
0 Z
N
513.65 635.83 513.65 575.08 2 L
V
N
99.52 635.95 513.77 635.95 2 L
V
N
99.52 615.95 513.77 615.95 2 L
V
N
99.52 574.95 513.77 574.95 2 L
V
N
99.65 448.83 99.65 273.08 2 L
V
N
513.65 448.83 513.65 273.08 2 L
V
N
99.52 448.95 513.77 448.95 2 L
V
N
99.52 428.95 513.77 428.95 2 L
V
N
99.52 272.95 513.77 272.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "281" 295
%%Page: "282" 296
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(282) 63.65 702.62 T
0 F
(Chapter 17) 87.4 702.62 T
(The Airport Application) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(17.9  The) 99.65 347.95 T
4 14 Q
(airport.lid) 155.72 347.95 T
3 15 Q
( \336le) 248.12 347.95 T
(17.10  The) 99.65 212.95 T
4 14 Q
(airport-test-library.dylan) 162.56 212.95 T
3 15 Q
( \336le) 380.96 212.95 T
1 11 Q
(The) 99.65 192.62 T
4 10 Q
(airport-test) 120.81 192.62 T
1 11 Q
( library implements a simple test case for the scheduling sys-) 192.81 192.62 T
(tem de\336ned in the) 99.65 178.62 T
4 10 Q
(airport) 191.11 178.62 T
1 11 Q
( library) 233.11 178.62 T
(.) 267.43 178.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(define module airport) 105.65 640.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <size>, length, height, width, current-position,) 116.45 629.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(current-position-setter;) 127.25 618.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export physical-size, physical-size-setter, $default-capacity;) 116.45 607.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export storage-capacity, storage-capacity-setter, indentifier;) 116.45 596.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export connected-to, connected-to-setter;) 116.45 585.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <gate>, generate-gates, <sky>, <runway>, <taxiway>;) 116.45 574.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <airline>, name, name-setter, code, code-setter, <flight>;) 116.45 563.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export flight, flight-setter, number, number-setter, altitude,) 116.45 552.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(altitude-setter;) 127.25 541.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export <aircraft-transition>, <b707>, <airport>, sky-above,) 116.45 530.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sky-above-setter;) 127.25 519.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export process-aircraft;) 116.45 508.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 497.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use transcendentals, import: {sqrt};) 116.45 486.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use say;) 116.45 475.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format-out, import: {format-out};) 116.45 464.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use format, import: {format-to-string};) 116.45 453.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use definitions;) 116.45 442.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use sorted-sequence;) 116.45 431.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 116.45 420.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle, export: {direction, direction-setter};) 116.45 409.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use position;) 116.45 398.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module airport;) 105.65 387.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 250.85 318.29 T
4 9 Q
(airport.lid) 270.86 318.29 T
8 10 Q
( \336le) 330.26 318.29 T
(.) 345.67 318.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 105.65 298.95 T
(airport) 159.65 298.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 287.95 T
(airport-library) 159.65 287.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport-classes) 159.65 276.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vehicle-dynamics) 159.65 265.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(schedule) 165.05 254.95 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 197.5 660.29 T
4 9 Q
(airport-library.dylan) 217.51 660.29 T
8 10 Q
( \336le) 330.91 660.29 T
(.) 346.32 660.29 T
9 F
( \050contin) 349.1 660.29 T
(ued\051) 381.79 660.29 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 672.83 99.65 381.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 381.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 380.95 513.77 380.95 2 L
V
N
99.65 330.83 99.65 248.08 2 L
V
N
513.65 330.83 513.65 248.08 2 L
V
N
99.52 330.95 513.77 330.95 2 L
V
N
99.52 310.95 513.77 310.95 2 L
V
N
99.52 247.95 513.77 247.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "282" 296
%%Page: "283" 297
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(17.12 Summary) 446.14 702.62 T
2 F
(283) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 685.81 R
V
3 15 Q
0 X
(17.11  The) 99.65 417.81 T
4 14 Q
(airport-test.lid) 162.56 417.81 T
3 15 Q
( \336le) 296.96 417.81 T
(17.12  Summar) 99.65 304.81 T
(y) 186.6 304.81 T
1 11 Q
(In this chapter) 99.65 284.48 T
(, we pr) 168.89 284.48 T
(esented a complete \336rst draft of the airport application,) 202.34 284.48 T
-0.08 (based on the techniques pr) 99.65 270.48 P
-0.08 (esented in pr) 229.47 270.48 P
-0.08 (evious chapters. Although the example is) 292.35 270.48 P
(complete and meets its stated design goals, we can still make a number of) 99.65 256.48 T
(impr) 99.65 242.48 T
(ovements. For example, we could take advantage of Dylan\325s multiple inher-) 123.32 242.48 T
(itance to eliminate certain r) 99.65 228.48 T
(epetitive slots. W) 231.76 228.48 T
(e could pr) 314.32 228.48 T
(ovide a container) 363.3 228.48 T
(-imple-) 447.11 228.48 T
-0.26 (mentor module interface, and open the classes and generic functions so that users) 99.65 214.48 P
-0.19 (could add their own classes of containers and extend the scope of the application.) 99.65 200.48 P
(W) 99.65 186.48 T
(e could take advantage of Dylan\325s exception handling to better deal with) 109.64 186.48 T
(unusual situations that might occur during the simulation. In the chapters that) 99.65 172.48 T
(follow) 99.65 158.48 T
(, we show the Dylan language featur) 129.89 158.48 T
(es that enable such impr) 308.35 158.48 T
(ovements.) 426.34 158.48 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 210.35 659.14 T
4 9 Q
(airport-test-library.dylan) 230.36 659.14 T
8 10 Q
( \336le) 370.76 659.14 T
(.) 386.17 659.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(module: dylan-user) 105.65 639.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define library airport-test) 105.65 620.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export airport-test;) 116.45 609.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 598.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 116.45 587.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle;) 116.45 576.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use airport;) 116.45 565.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end library airport-test;) 105.65 554.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(define module airport-test) 105.65 535.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(export test-airport;) 116.45 524.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use dylan;) 116.45 513.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use time;) 116.45 502.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use angle;) 116.45 491.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use position;) 116.45 480.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(use airport;) 116.45 469.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end module airport-test;) 105.65 458.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 10 Q
(The) 237.35 388.14 T
4 9 Q
(airport-test.lid) 257.36 388.14 T
8 10 Q
( \336le) 343.76 388.14 T
(.) 359.17 388.14 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(library:) 105.65 368.81 T
(airport-test) 159.65 368.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(files:) 105.65 357.81 T
(airport-test-library) 159.65 357.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(airport-test) 159.65 346.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 671.68 99.65 451.93 2 L
V
0.25 H
0 Z
N
513.65 671.68 513.65 451.93 2 L
V
N
99.52 671.81 513.77 671.81 2 L
V
N
99.52 651.81 513.77 651.81 2 L
V
N
99.52 451.81 513.77 451.81 2 L
V
N
99.65 400.68 99.65 339.93 2 L
V
N
513.65 400.68 513.65 339.93 2 L
V
N
99.52 400.81 513.77 400.81 2 L
V
N
99.52 380.81 513.77 380.81 2 L
V
N
99.52 339.81 513.77 339.81 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "283" 297
%%Page: "284" 298
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "284" 298
%%Page: "285" 299
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(285) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 555.93 504.08 615.1 R
7 X
V
1 30 Q
0 X
(Part IV) 99.65 595.1 T
(.) 189.8 595.1 T
(Advanced T) 212.3 595.1 T
(opics) 372.53 595.1 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(Chapter 18,) 99.65 449.62 T
0 F
(Multiple Inheritance) 161.16 449.62 T
1 F
(, describes how multiple inheritance works in) 253.34 449.62 T
(Dylan. It describes how method dispatch is af) 99.65 435.62 T
(fected by multiple inheritance. It) 321.45 435.62 T
(gives an example of using the mix-in style of designing classes with multiple) 99.65 421.62 T
(inheritance.) 99.65 407.62 T
(Chapter 19,) 126.65 393.62 T
0 F
(Performance and Flexibility) 188.16 393.62 T
1 F
(, describes the fundamental tradeof) 311.42 393.62 T
(f) 483 393.62 T
-0.03 (between performance and \337exibility) 99.65 379.62 P
-0.03 (. Y) 274.48 379.62 P
-0.03 (ou can take advantage of Dylan\325s dynamic) 286.27 379.62 P
(natur) 99.65 365.62 T
(e during the initial stages of development. Later on, when your application) 125.92 365.62 T
(is nearing completion, you can optimize the performance of the pr) 99.65 351.62 T
(ogram \050and) 421.45 351.62 T
(sacri\336ce \337exibility) 99.65 337.62 T
(, which pr) 186.8 337.62 T
(esumably is no longer needed\051.) 235.87 337.62 T
(Chapter 20,) 126.65 323.62 T
0 F
(Exceptions) 188.16 323.62 T
1 F
(, describes how to use Dylan facilities to help cr) 236.64 323.62 T
(eate) 467.19 323.62 T
(r) 99.65 309.62 T
(eliable pr) 103.79 309.62 T
(ograms in the face of exceptions \321 unexpected events that occur dur-) 149.03 309.62 T
(ing pr) 99.65 295.62 T
(ogram execution.) 128.88 295.62 T
-0.42 (Chapter 21,) 126.65 281.62 P
0 F
-0.42 (Macr) 186.91 281.62 P
-0.42 (os) 210.74 281.62 P
1 F
-0.42 (, describes how to de\336ne macr) 219.9 281.62 P
-0.42 (os in Dylan. Macr) 365.15 281.62 P
-0.42 (os can be) 449.84 281.62 P
(used for abbr) 99.65 267.62 T
(eviation, abstraction, simpli\336cation, or str) 164.26 267.62 T
(ucturing. They ar) 366.33 267.62 T
(e also) 450.56 267.62 T
(useful for delaying evaluation of ar) 99.65 253.62 T
(guments.) 270.83 253.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "285" 299
%%Page: "286" 300
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "286" 300
%%Page: "287" 301
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(287) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(18) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(18) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Multiple Inheritance) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In the class r) 99.65 449.62 T
(elationships that we have de\336ned so far) 160.32 449.62 T
(, each class has only one) 352.83 449.62 T
(dir) 99.65 435.62 T
(ect super) 113.72 435.62 T
(class. When a class has a single dir) 157.53 435.62 T
(ect super) 324.92 435.62 T
(class, the way in which) 368.73 435.62 T
-0.32 (that class inherits fr) 99.65 421.62 P
-0.32 (om its super) 193.79 421.62 P
-0.32 (class is called) 253.14 421.62 P
2 F
-0.32 (single inheritance) 319.97 421.62 P
1 F
-0.32 (. In Dylan, a class) 409.76 421.62 P
(can have mor) 99.65 407.62 T
(e than one dir) 165.19 407.62 T
(ect super) 232.34 407.62 T
(class. When a class has multiple dir) 276.15 407.62 T
(ect super-) 447.85 407.62 T
(classes, it inherits via) 99.65 393.62 T
2 F
(multiple inheritance) 205.02 393.62 T
1 F
(.) 307.95 393.62 T
(Why would we want to use multiple inheritance? Objects in the r) 126.65 379.62 T
(eal world) 442.89 379.62 T
(can have complicated behavior) 99.65 365.62 T
(. As we make our softwar) 249.85 365.62 T
(e models mor) 374.34 365.62 T
(e r) 440.55 365.62 T
(ealistic,) 452.71 365.62 T
(we often \336nd that the behavior of the objects becomes mor) 99.65 351.62 T
(e complicated as well.) 383.39 351.62 T
(Multiple inheritance is useful when we can br) 99.65 337.62 T
(eak down complicated behavior) 322.1 337.62 T
-0.35 (into sets of characteristics that do not interfer) 99.65 323.62 P
-0.35 (e with one another) 316.05 323.62 P
-0.35 (. W) 405.24 323.62 P
-0.35 (e might be able) 420.38 323.62 P
(to de\336ne a class to r) 99.65 309.62 T
(epr) 195.46 309.62 T
(esent each set of these characteristics. W) 211.49 309.62 T
(e can then de\336ne) 405.26 309.62 T
-0.43 (subclasses that combine sets of characteristics by inheriting fr) 99.65 295.62 P
-0.43 (om mor) 393.96 295.62 P
-0.43 (e than one of) 431.86 295.62 P
(our super) 99.65 281.62 T
(classes. W) 146.71 281.62 T
(e give examples in this chapter) 195.04 281.62 T
(.) 344 281.62 T
(Multiple inheritance does not change any of the r) 126.65 267.62 T
(ules of slot inheritance or) 365.64 267.62 T
(method dispatch that we have learned so far) 99.65 253.62 T
(. But it does r) 315.14 253.62 T
(equir) 379.42 253.62 T
(e extensions to) 404.83 253.62 T
-0.05 (those r) 99.65 239.62 P
-0.05 (ules. In this chapter) 132.53 239.62 P
-0.05 (, we explain how slot inheritance and method dispatch) 226.9 239.62 P
(work in Dylan in the pr) 99.65 225.62 T
(esence of multiple inheritance.) 213.99 225.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "287" 301
%%Page: "288" 302
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(288) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(18.1  Example of m) 99.65 662.95 T
(ultiple inheritance) 210.18 662.95 T
1 11 Q
-0.08 (In our airport example, we de\336ned a) 99.65 642.62 P
4 10 Q
-0.17 (<vehicle>) 280.01 642.62 P
1 11 Q
-0.08 ( class, and used it as a super) 334.01 642.62 P
-0.08 (class) 470.06 642.62 P
(for classes of air) 99.65 628.62 T
(craft. Figur) 177.27 628.62 T
(e 18.1 shows the hierar) 230.97 628.62 T
(chy of vehicle classes that we) 341.52 628.62 T
(de\336ned.) 99.65 614.62 T
(So far) 126.65 600.62 T
(, the only type of vehicle that we have de\336ned is air) 153.87 600.62 T
(craft. Of course,) 404.2 600.62 T
-0.33 (ther) 99.65 586.62 P
-0.33 (e ar) 119.05 586.62 P
-0.33 (e many other kinds of vehicle: automobiles, ships, and spacecraft, to name) 136.39 586.62 P
(a few) 99.65 572.62 T
(. W) 124.99 572.62 T
(e have not needed these kinds of vehicles in the airport example so far) 140.48 572.62 T
(,) 480.65 572.62 T
(but we can easily see how we would need mor) 99.65 558.62 T
(e vehicle classes if we made the) 326.37 558.62 T
(example mor) 99.65 544.62 T
(e r) 163.5 544.62 T
(ealistic.) 175.67 544.62 T
(For example, air) 126.65 530.62 T
(craft need fuel befor) 205.45 530.62 T
(e they can take of) 303.27 530.62 T
(f. An air) 387.64 530.62 T
(craft is typi-) 427.37 530.62 T
(cally fueled by a tr) 99.65 516.62 T
(uck at the gate. If fuel is unavailable or fueling is delayed, the) 189.85 516.62 T
-0.13 (air) 99.65 502.62 P
-0.13 (craft\325s departur) 112.5 502.62 P
-0.13 (e fr) 187.63 502.62 P
-0.13 (om the gate is delayed as well. If we want to model the take-) 203.33 502.62 P
(of) 99.65 488.62 T
(f pr) 109.12 488.62 T
(ocess mor) 126.29 488.62 T
(e accurately) 174.39 488.62 T
(, we should take account of the need for fuel, and spe-) 231.11 488.62 T
(ci\336cally the need to get fuel tr) 99.65 474.62 T
(ucks to air) 243.88 474.62 T
(craft pr) 294.12 474.62 T
(eparing for takeof) 329.6 474.62 T
(f.) 416.5 474.62 T
(W) 126.65 460.62 T
(e ar) 136.64 460.62 T
(e not going to handle the fuel-supply pr) 154.3 460.62 T
(oblem in this book. However) 348.02 460.62 T
(,) 488.33 460.62 T
(in this section, we ar) 99.65 446.62 T
(e going to modify the vehicle class hierar) 198.96 446.62 T
(chy as a \336rst step) 397.8 446.62 T
(towar) 99.65 432.62 T
(d handling fuel tr) 128.06 432.62 T
(ucks and other kinds of gr) 213.59 432.62 T
(ound vehicles. In the pr) 340.9 432.62 T
(ocess,) 455.64 432.62 T
(we will develop an opportunity for using multiple inheritance in air) 99.65 418.62 T
(craft classes.) 430.02 418.62 T
3 13 Q
(18.1.1  Modeling of gr) 99.65 387.29 T
(ound vehic) 208.46 387.29 T
(les) 264.54 387.29 T
1 11 Q
(An obvious early step in modeling the behavior of fuel tr) 99.65 367.62 T
(ucks would be to de\336ne) 376.27 367.62 T
(a) 99.65 353.62 T
4 10 Q
(<fuel-truck>) 107.9 353.62 T
1 11 Q
( class. Pr) 179.9 353.62 T
(esumably) 221.85 353.62 T
(, we would want that class to inherit fr) 267.81 353.62 T
(om) 455.2 353.62 T
99.65 156.96 495.65 164.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 18.1) 196.52 168.29 T
8 F
(Hier) 254.88 168.29 T
(arch) 273.11 168.29 T
(y of v) 292.26 168.29 T
(ehicle classes) 315.91 168.29 T
(.) 378 168.29 T
99.65 180.95 495.65 323.95 C
0 0 0 1 0 0 0 K
233.65 184.95 361.65 321.95 C
0 248 322 364 447 116 125 239.65 190.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f18-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f18-1 .eps)%%CreationDate: (6/5/96) (10:45 AM)%%BoundingBox: 248 322 364 447%%HiResBoundingBox: 249.3138 321.75 362.6862 446.957%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396.5 305.5 396.5%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -450.5 900.5 -1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 306 439.75 0 TpTP-24.2941 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 306 402.75 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 306 362.75 0 TpTP-56.6862 0 Td0 Tr(<commercial-aircraft>) Tx (\r) TX TO0 To1 0 0 1 306 324 0 TpTP-16.196 0 Td0 Tr(<B707>) Tx (\r) TX TOu0 R0 G0.65 w306 435.5 m306 418 lS0 O0 g1 w303.7621 419.5457 m306.0275 411.0899 l308.2935 419.5457 l303.7621 419.5457 lfUu0 R0 G0.65 w306 398 m306 380.5 lS0 O0 g1 w303.7621 382.0457 m306.0275 373.5899 l308.2935 382.0457 l303.7621 382.0457 lfUu0 R0 G0.65 w306 358 m306 340.5 lS0 O0 g1 w303.7621 342.0457 m306.0275 333.5899 l308.2935 342.0457 l303.7621 342.0457 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 180.95 495.65 323.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "288" 302
%%Page: "289" 303
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.1 Example of multiple inheritance) 366.53 702.62 T
2 F
(289) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
(<vehicle>) 99.65 665.62 T
1 11 Q
(. Let\325s look at our curr) 153.65 665.62 T
(ent de\336nitions of both the) 260.85 665.62 T
4 10 Q
(<vehicle>) 388.97 665.62 T
1 11 Q
( class and) 442.97 665.62 T
(its only dir) 99.65 651.62 T
(ect subclass,) 152.39 651.62 T
4 10 Q
(<aircraft>) 214.68 651.62 T
1 11 Q
(:) 274.67 651.62 T
5 9 Q
(// The class that represents all self-propelled devices) 99.65 630.95 T
4 F
(define abstract class <vehicle> \050<physical-object>\051) 99.65 619.95 T
5 F
(// Every vehicle has a unique identification code) 110.45 608.95 T
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 110.45 597.95 T
5 F
(// The normal operating speed of this class of vehicle in miles per hour) 110.45 586.95 T
4 F
(each-subclass slot cruising-speed :: <positive-integer>;) 110.45 575.95 T
5 F
(// Allow individual differences in the size of particular aircraft, while) 110.45 564.95 T
(// providing a suitable default for each class of aircraft) 110.45 553.95 T
4 F
(each-subclass slot standard-size :: <size>;) 110.45 542.95 T
(end class <vehicle>;) 99.65 531.95 T
5 F
(// This class represents vehicles that normally fly for a portion of) 99.65 512.95 T
(// their trip) 99.65 501.95 T
4 F
(define abstract class <aircraft> \050<vehicle>\051) 99.65 490.95 T
(slot altitude :: <integer>, init-keyword: altitude:;) 110.45 479.95 T
5 F
(// Direction here is either #\323inbound\323 or #\323outbound\323.) 110.45 468.95 T
4 F
(slot direction :: <symbol>;) 110.45 457.95 T
5 F
(// The next transition that this aircraft might be able to make.) 110.45 446.95 T
4 F
(slot next-transition :: <aircraft-transition>,) 110.45 435.95 T
(required-init-keyword: transition:, setter: #f;) 121.25 424.95 T
(end class <aircraft>;) 99.65 413.95 T
1 11 Q
(As a start, we can de\336ne a) 99.65 393.62 T
4 10 Q
(<fuel-truck>) 229.1 393.62 T
1 11 Q
( class as a subclass of) 301.1 393.62 T
4 10 Q
(<vehicle>) 406.14 393.62 T
1 11 Q
(. T) 460.14 393.62 T
(o) 471.37 393.62 T
(operate on instances of this class, we will no doubt need to know how much air-) 99.65 379.62 T
-0.26 (craft fuel they contain. W) 99.65 365.62 P
-0.26 (e de\336ne one initial slot,) 220.45 365.62 P
4 10 Q
-0.57 (aircraft-fuel-remaining) 334.66 365.62 P
1 11 Q
-0.26 (. W) 472.66 365.62 P
-0.26 (e) 487.89 365.62 P
(also need to pr) 99.65 351.62 T
(ovide initial values for the inherited slots) 171.28 351.62 T
4 10 Q
(cruising-speed) 373.5 351.62 T
1 11 Q
( and) 457.5 351.62 T
4 10 Q
(standard-size) 99.65 337.62 T
1 11 Q
(.) 177.65 337.62 T
4 9 Q
(define class <fuel-truck> \050<vehicle>\051) 99.65 316.95 T
5 F
(// Amount of aircraft fuel remaining in the tank) 110.45 305.95 T
4 F
(slot aircraft-fuel-remaining :: <integer>,) 110.45 294.95 T
(init-keyword: aircraft-fuel-remaining:, init-value: 0;) 121.25 283.95 T
(inherited slot cruising-speed, init-value: 25;) 110.45 272.95 T
(inherited slot standard-size,) 110.45 261.95 T
(init-value: make\050<size>, length: 30, width: 10, height: 10\051;) 121.25 250.95 T
(end class <fuel-truck>;) 99.65 239.95 T
1 11 Q
(This de\336nition serves our immediate purpose, but the class hierar) 99.65 219.62 T
(chy is not as) 418.66 219.62 T
-0.29 (modular as it might be. Suppose that we want to take account of other vehicles on) 99.65 205.62 P
(the gr) 99.65 191.62 T
(ound, such as baggage carriers or \336r) 127.92 191.62 T
(e tr) 304.08 191.62 T
(ucks? W) 319.95 191.62 T
(e can anticipate that all) 359.86 191.62 T
(gr) 99.65 177.62 T
(ound vehicles might have common featur) 109.91 177.62 T
(es, and we do not want each new) 312.45 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "289" 303
%%Page: "290" 304
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(290) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(class to be a dir) 99.65 665.62 T
(ect subclass of) 174.07 665.62 T
4 10 Q
(<vehicle>) 246.02 665.62 T
1 11 Q
(. As a r) 300.02 665.62 T
(e\336nement, we de\336ne two inter-) 333.89 665.62 T
(mediary classes,) 99.65 651.62 T
4 10 Q
(<ground-vehicle>) 181.61 651.62 T
1 11 Q
( and) 277.61 651.62 T
4 10 Q
(<flying-vehicle>) 301.73 651.62 T
1 11 Q
(:) 397.73 651.62 T
4 9 Q
(define abstract class <ground-vehicle> \050<vehicle>\051) 99.65 630.95 T
(end class <ground-vehicle>;) 99.65 619.95 T
(define abstract class <flying-vehicle> \050<vehicle>\051) 99.65 600.95 T
(end class <flying-vehicle>;) 99.65 589.95 T
(define class <fuel-truck> \050<ground-vehicle>\051) 99.65 570.95 T
5 F
(// How much aircraft fuel is left in the tank) 110.45 559.95 T
4 F
(slot aircraft-fuel-remaining :: <integer>,) 110.45 548.95 T
(init-keyword: aircraft-fuel-remaining:, init-value: 0;) 121.25 537.95 T
(inherited slot cruising-speed, init-value: 25;) 110.45 526.95 T
(inherited slot standard-size,) 110.45 515.95 T
(init-value: make\050<size>, length: 30, width: 10, height: 10\051;) 121.25 504.95 T
(end class <fuel-truck>;) 99.65 493.95 T
(define abstract class <aircraft> \050<flying-vehicle>\051) 99.65 474.95 T
(slot altitude :: <integer>, init-keyword: altitude:;) 110.45 463.95 T
(slot direction :: <symbol>;) 110.45 452.95 T
(slot next-transition :: <aircraft-transition>,) 110.45 441.95 T
(required-init-keyword: transition:, setter: #f;) 121.25 430.95 T
(end class <aircraft>;) 99.65 419.95 T
1 11 Q
(At this point, we ar) 99.65 399.62 T
(e going to leave the fuel-tr) 193.29 399.62 T
(uck simulation. W) 320.73 399.62 T
(e do not model) 408.7 399.62 T
-0.42 (the fuel-supply pr) 99.65 385.62 P
-0.42 (oblem further in this book. W) 186.58 385.62 P
-0.42 (e do want to explor) 327.14 385.62 P
-0.42 (e opportunities) 419.6 385.62 P
(that our new class hierar) 99.65 371.62 T
(chy pr) 219.33 371.62 T
(esents for r) 250.24 371.62 T
(estr) 303.75 371.62 T
(ucturing the air) 321.53 371.62 T
(craft classes.) 396.93 371.62 T
3 13 Q
(18.1.2  Air) 99.65 340.29 T
(craft c) 149.83 340.29 T
(lasses and m) 181.63 340.29 T
(ultiple inheritance) 248.39 340.29 T
1 11 Q
-0.02 (It is obvious that an air) 99.65 320.62 P
-0.02 (craft is a \337ying vehicle. In our airport model, however) 211.11 320.62 P
-0.02 (, we) 472.99 320.62 P
(have to take account of an air) 99.65 306.62 T
(craft\325s behavior on taxiways and r) 241.91 306.62 T
(unways and at) 407.09 306.62 T
(gates. In these situations, the air) 99.65 292.62 T
(craft is acting as a gr) 254.88 292.62 T
(ound vehicle. Per) 354.09 292.62 T
(haps it) 438.6 292.62 T
(makes sense to de\336ne our air) 99.65 278.62 T
(craft classes as subclasses of both) 240.67 278.62 T
4 10 Q
(<flying-) 404.13 278.62 T
(vehicle>) 99.65 264.62 T
1 11 Q
( and) 147.65 264.62 T
4 10 Q
(<ground-vehicle>) 171.77 264.62 T
1 11 Q
(.) 267.77 264.62 T
-0.26 (What could we gain by doing so? Consider cr) 126.65 250.62 P
-0.26 (uising speed. When an air) 345.9 250.62 P
-0.26 (craft) 471.18 250.62 P
(is in the air) 99.65 236.62 T
(, we need to take into account its \337ying cr) 152.85 236.62 T
(uising speed when estimat-) 354.73 236.62 T
(ing its time of arrival at its destination. When the air) 99.65 222.62 T
(craft is on the gr) 353.07 222.62 T
(ound, we) 431.84 222.62 T
(need to take into account the gr) 99.65 208.62 T
(ound cr) 252.48 208.62 T
(uising speed when estimating how much) 290.14 208.62 T
(time the air) 99.65 194.62 T
(craft will spend on a taxiway or r) 155.02 194.62 T
(unway) 315.96 194.62 T
(. It makes sense to have both) 348.57 194.62 T
-0.37 (\337ying and gr) 99.65 180.62 P
-0.37 (ound cr) 161.82 180.62 P
-0.37 (uising speeds. It also makes sense for \337ying cr) 199.1 180.62 P
-0.37 (uising speed to) 420.17 180.62 P
(be a pr) 99.65 166.62 T
(operty of \337ying vehicles \321 mor) 132.76 166.62 T
(e speci\336cally) 286.6 166.62 T
(, air) 347.59 166.62 T
(craft \321 and for gr) 365.94 166.62 T
(ound) 452.81 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "290" 304
%%Page: "291" 305
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.1 Example of multiple inheritance) 366.53 702.62 T
2 F
(291) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.39 (cr) 99.65 665.62 P
-0.39 (uising speed to be a pr) 108.79 665.62 P
-0.39 (operty of gr) 216.56 665.62 P
-0.39 (ound vehicles. After all, the notion of cr) 273.16 665.62 P
-0.39 (uising) 463.07 665.62 P
(speed can be useful in estimating how long a fuel tr) 99.65 651.62 T
(uck will take to arrive at a) 350.14 651.62 T
(given gate.) 99.65 637.62 T
(W) 126.65 623.62 T
(e now r) 136.64 623.62 T
(estr) 173.13 623.62 T
(uctur) 190.91 623.62 T
(e our vehicle classes again, this time to make the air) 216.79 623.62 T
(craft) 467.22 623.62 T
(classes be subclasses of both) 99.65 609.62 T
4 10 Q
(<flying-vehicle>) 239.57 609.62 T
1 11 Q
( and) 335.57 609.62 T
4 10 Q
(<ground-vehicle>) 359.69 609.62 T
1 11 Q
(. W) 455.69 609.62 T
(e) 471.18 609.62 T
(need to r) 99.65 595.62 T
(emove the) 142.55 595.62 T
4 10 Q
(cruising-speed) 195.78 595.62 T
1 11 Q
( slot fr) 279.78 595.62 T
(om the) 310.54 595.62 T
4 10 Q
(<vehicle>) 347.02 595.62 T
1 11 Q
( class, and to) 401.02 595.62 T
-0.32 (r) 99.65 581.62 P
-0.32 (eplace it by two slots:) 103.79 581.62 P
4 10 Q
-0.7 (ground-cruising-speed) 209.31 581.62 P
1 11 Q
-0.32 ( for the) 335.31 581.62 P
4 10 Q
-0.7 (<ground-vehicle>) 371.87 581.62 P
1 11 Q
-0.32 ( class) 467.87 581.62 P
(and) 99.65 567.62 T
4 10 Q
(flying-cruising-speed) 121.02 567.62 T
1 11 Q
( for the) 247.02 567.62 T
4 10 Q
(<flying-vehicle>) 284.54 567.62 T
1 11 Q
( class. W) 380.54 567.62 T
(e can also take) 421.69 567.62 T
(this opportunity to move the) 99.65 553.62 T
4 10 Q
(altitude) 242.41 553.62 T
1 11 Q
( slot fr) 290.41 553.62 T
(om the) 321.17 553.62 T
4 10 Q
(<aircraft>) 357.65 553.62 T
1 11 Q
( class to the) 417.65 553.62 T
4 10 Q
(<flying-vehicle>) 99.65 539.62 T
1 11 Q
( class, because any \337ying vehicle is likely to need to keep) 195.65 539.62 T
(track of its altitude. Finally) 99.65 525.62 T
(, we intr) 229.16 525.62 T
(oduce multiple inheritance by r) 269.19 525.62 T
(ede\336ning the) 421.93 525.62 T
4 10 Q
(<aircraft>) 99.65 511.62 T
1 11 Q
( class to be a dir) 159.65 511.62 T
(ect subclass of both) 236.82 511.62 T
4 10 Q
(<flying-vehicle>) 333.6 511.62 T
1 11 Q
( and) 429.6 511.62 T
4 10 Q
(<ground-vehicle>) 99.65 497.62 T
1 11 Q
(.) 195.65 497.62 T
4 9 Q
(define abstract class <vehicle> \050<physical-object>\051) 99.65 476.95 T
5 F
(// Every vehicle has a unique identification code) 110.45 465.95 T
4 F
(slot vehicle-id :: <string>, required-init-keyword: id:;) 110.45 454.95 T
5 F
(// The standard size of this class of vehicle) 110.45 443.95 T
4 F
(each-subclass slot standard-size :: <size>;) 110.45 432.95 T
(end class <vehicle>;) 99.65 421.95 T
(define abstract class <ground-vehicle> \050<vehicle>\051) 99.65 402.95 T
5 F
(// The normal operating speed of this class of vehicle) 110.45 391.95 T
4 F
(each-subclass slot ground-cruising-speed :: <positive-integer>;) 110.45 380.95 T
(end class <ground-vehicle>;) 99.65 369.95 T
(define abstract class <flying-vehicle> \050<vehicle>\051) 99.65 350.95 T
5 F
(// The normal operating speed of this class of vehicle) 110.45 339.95 T
4 F
(each-subclass slot flying-cruising-speed :: <positive-integer>;) 110.45 328.95 T
(slot altitude :: <integer>, init-keyword: altitude:;) 110.45 317.95 T
(end class <flying-vehicle>;) 99.65 306.95 T
(define abstract class <aircraft> \050<flying-vehicle>, <ground-vehicle>\051) 99.65 287.95 T
(slot direction :: <symbol>;) 110.45 276.95 T
(slot next-transition :: <aircraft-transition>,) 110.45 265.95 T
(required-init-keyword: transition:, setter: #f;) 121.25 254.95 T
(end class <aircraft>;) 99.65 243.95 T
1 11 Q
(Now) 99.65 223.62 T
(, all air) 122.96 223.62 T
(craft classes have two slots for cr) 155.96 223.62 T
(uising speed:) 314.71 223.62 T
4 10 Q
(ground-cruising-) 381.71 223.62 T
(speed) 99.65 209.62 T
1 11 Q
(, inherited fr) 129.65 209.62 T
(om the) 190.1 209.62 T
4 10 Q
(<ground-vehicle>) 226.58 209.62 T
1 11 Q
( class, and) 322.58 209.62 T
4 10 Q
(flying-cruising-) 375.12 209.62 T
(speed) 99.65 195.62 T
1 11 Q
(, inherited fr) 129.65 195.62 T
(om the) 190.1 195.62 T
4 10 Q
(<flying-vehicle>) 226.58 195.62 T
1 11 Q
( class. W) 322.58 195.62 T
(e have to modify our) 363.73 195.62 T
4 10 Q
(<B707>) 99.65 181.62 T
1 11 Q
( class to pr) 135.65 181.62 T
(ovide default initial values for these slots.) 187.16 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "291" 305
%%Page: "292" 306
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(292) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define class <B707> \050<commercial-aircraft>\051) 99.65 666.95 T
(inherited slot flying-cruising-speed, init-value: 368;) 110.45 655.95 T
(inherited slot ground-cruising-speed, init-value: 45;) 110.45 644.95 T
(inherited slot standard-size,) 110.45 633.95 T
(init-value: make\050<size>, length: 153, width: 146, height: 42\051;) 121.25 622.95 T
(end class <B707>;) 99.65 611.95 T
1 11 Q
(Finally) 99.65 591.62 T
(, to complete the example, we would change our) 132.16 591.62 T
4 10 Q
(<fuel-truck>) 370.78 591.62 T
1 11 Q
( class de\336-) 442.78 591.62 T
(nition to pr) 99.65 577.62 T
(ovide a default initial value for) 154.3 577.62 T
4 10 Q
(ground-cruising-speed) 307.4 577.62 T
1 11 Q
(, instead of) 433.4 577.62 T
4 10 Q
(cruising-speed) 99.65 563.62 T
1 11 Q
(.) 183.65 563.62 T
3 15 Q
(18.2  Multiple inheritance and slots) 99.65 523.95 T
1 11 Q
-0.34 (For the most part, using multiple inheritance does not pr) 99.65 503.62 P
-0.34 (esent special pr) 372.17 503.62 P
-0.34 (oblems in) 446.28 503.62 P
(using slots. Recall that a class inherits all the slots of its super) 99.65 489.62 T
(classes. A subclass) 396.22 489.62 T
-0.03 (can also add slots of its own, but it cannot r) 99.65 475.62 P
-0.03 (emove or r) 309.53 475.62 P
-0.03 (eplace any slots de\336ned by) 361.94 475.62 P
-0.15 (its super) 99.65 461.62 P
-0.15 (classes. A slot can appear only once in a class and in all that class\325s super-) 141.03 461.62 P
(classes. Thus, a class\325s slots ar) 99.65 447.62 T
(e the union of its slots and those of all its super-) 244.09 447.62 T
(classes, and duplicate slot de\336nitions ar) 99.65 433.62 T
(e not permitted. This r) 292.43 433.62 T
(ule holds,) 401.02 433.62 T
(r) 99.65 419.62 T
(egar) 103.79 419.62 T
(dless of whether a class has one dir) 124.83 419.62 T
(ect super) 295.44 419.62 T
(class or mor) 339.25 419.62 T
(e than one.) 397.88 419.62 T
(Ther) 99.65 225.62 T
(e ar) 122.21 225.62 T
(e ways, however) 139.88 225.62 T
(, in which subclasses and super) 220.71 225.62 T
(classes can have distinct) 373.05 225.62 T
-0.11 (ef) 99.65 211.62 P
-0.11 (fects on the same slot. One way is by pr) 108.38 211.62 P
-0.11 (oviding default values for the slot. Even) 299.16 211.62 P
-0.37 (though duplicate slots ar) 99.65 197.62 P
-0.37 (e not permitted, a class can pr) 219.32 197.62 P
-0.37 (ovide its own default value) 361.89 197.62 P
(for a slot that it inherits fr) 99.65 183.62 T
(om a super) 223.86 183.62 T
(class. The subclass can pr) 277.9 183.62 T
(ovide this default) 400.82 183.62 T
(by supplying in its class de\336nition an) 99.65 169.62 T
4 10 Q
(inherited slot) 283.96 169.62 T
1 11 Q
( option that includes an) 367.96 169.62 T
4 10 Q
(init-value:) 99.65 155.62 T
1 11 Q
( or) 165.65 155.62 T
4 10 Q
(init-function:) 181.5 155.62 T
1 11 Q
( speci\336cation, or an init expr) 265.5 155.62 T
(ession.) 403.21 155.62 T
2 F
-0.05 (Comparison with C++) 132.65 385.62 P
1 F
-0.05 (: In C++, a data member of the same name can) 244.26 385.62 P
-0.19 (appear in both a base class and a derived class. The name in the scope) 132.65 371.62 P
-0.43 (of the derived class hides the same name in the base class, but the base) 132.65 357.62 P
(class slot can be accessed by qualifying its name.) 132.65 343.62 T
(All access to Dylan class slots is thr) 159.65 329.62 T
(ough getter and setter) 330.08 329.62 T
(methods, which ar) 132.65 315.62 T
(e similar to C++ virtual functions. In Dylan,) 222.97 315.62 T
-0.14 (you can override access to an inherited slot by de\336ning a getter or) 132.65 301.62 P
(setter method specialized on the subclass \050derived class\051.) 132.65 287.62 T
-0.15 (For mor) 159.65 273.62 P
-0.15 (e information on inheritance in C++, see Section B.2,) 198.58 273.62 P
(page 386.) 132.65 259.62 T
126.65 398.83 126.65 252.08 2 L
V
0.25 H
0 Z
N
477.65 398.83 477.65 252.08 2 L
V
N
126.52 398.95 477.77 398.95 2 L
V
N
126.52 251.95 477.77 251.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "292" 306
%%Page: "293" 307
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.2 Multiple inheritance and slots) 373.4 702.62 T
2 F
(293) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Suppose that mor) 126.65 665.62 T
(e than one class de\336nes a default value for the same slot.) 212.66 665.62 T
(Which default takes pr) 99.65 651.62 T
(ecedence? When each class has only one dir) 210.25 651.62 T
(ect super) 422.43 651.62 T
(class,) 466.24 651.62 T
-0.26 (the answer is easy: the default value pr) 99.65 637.62 P
-0.26 (ovided by the) 287.23 637.62 P
2 F
-0.26 (most speci\336c) 356.27 637.62 P
1 F
-0.26 ( class takes pr) 420.45 637.62 P
-0.26 (e-) 486.72 637.62 P
(cedence. A default value for a subclass overrides a default value for a super) 99.65 623.62 T
(class.) 466.37 623.62 T
(But what if a class has mor) 126.65 609.62 T
(e than one dir) 256.46 609.62 T
(ect super) 323.61 609.62 T
(class, and each super) 367.43 609.62 T
(class) 469.34 609.62 T
(pr) 99.65 595.62 T
(ovides a dif) 110.41 595.62 T
(fer) 166.87 595.62 T
(ent default value for the same slot? Imagine, for example, that) 179.95 595.62 T
(our) 99.65 581.62 T
4 10 Q
(<vehicle>) 119.38 581.62 T
1 11 Q
( class had a slot named) 173.38 581.62 T
4 10 Q
(fuel-remaining) 287.98 581.62 T
1 11 Q
(, and our) 371.98 581.62 T
4 10 Q
(<ground-) 418.59 581.62 T
(vehicle>) 99.65 567.62 T
1 11 Q
( and) 147.65 567.62 T
4 10 Q
(<flying-vehicle>) 171.77 567.62 T
1 11 Q
( classes each had a dif) 267.77 567.62 T
(fer) 373.93 567.62 T
(ent default value for) 387.01 567.62 T
(the) 99.65 553.62 T
4 10 Q
(fuel-remaining) 117.65 553.62 T
1 11 Q
( slot, which they inherit fr) 201.65 553.62 T
(om the common super) 327.26 553.62 T
(class) 436.54 553.62 T
4 10 Q
(<vehicle>) 99.65 539.62 T
1 11 Q
(:) 153.65 539.62 T
4 9 Q
(define abstract class <vehicle> \050<physical-object>\051) 99.65 518.95 T
(slot fuel-remaining :: <integer>;) 110.45 507.95 T
(...) 110.45 496.95 T
(end class <vehicle>;) 99.65 485.95 T
(define abstract class <ground-vehicle> \050<vehicle>\051) 99.65 466.95 T
(inherited-slot fuel-remaining, init-value: 30;) 110.45 455.95 T
(...) 110.45 444.95 T
(end class <ground-vehicle>;) 99.65 433.95 T
(define abstract class <flying-vehicle> \050<vehicle>\051) 99.65 414.95 T
(inherited-slot fuel-remaining, init-value: 3000;) 110.45 403.95 T
(...) 110.45 392.95 T
(end class <flying-vehicle>;) 99.65 381.95 T
(define abstract class <aircraft> \050<flying-vehicle>, <ground-vehicle>\051) 99.65 362.95 T
(...) 110.45 351.95 T
(end class <aircraft>;) 99.65 340.95 T
1 11 Q
(Now neither the class) 99.65 320.62 T
4 10 Q
(<ground-vehicle>) 207.61 320.62 T
1 11 Q
( nor the class) 303.61 320.62 T
4 10 Q
(<flying-vehicle>) 369.54 320.62 T
1 11 Q
( is) 465.54 320.62 T
(mor) 99.65 306.62 T
(e speci\336c than the other with r) 119.51 306.62 T
(espect to) 266.72 306.62 T
4 10 Q
(<aircraft>) 312.09 306.62 T
1 11 Q
(. So when we cr) 372.09 306.62 T
(eate an) 448.34 306.62 T
(instance of) 99.65 292.62 T
4 10 Q
(<aircraft>) 154.73 292.62 T
1 11 Q
( that has both) 214.73 292.62 T
4 10 Q
(<ground-vehicle>) 283.44 292.62 T
1 11 Q
( and) 379.44 292.62 T
4 10 Q
(<flying-) 403.57 292.62 T
(vehicle>) 99.65 278.62 T
1 11 Q
( as dir) 147.65 278.62 T
(ect super) 177.38 278.62 T
(classes, what is the default initial value for the) 221.19 278.62 T
4 10 Q
(fuel-) 448.28 278.62 T
(remaining) 99.65 264.62 T
1 11 Q
( slot:) 153.65 264.62 T
4 10 Q
(30) 179.35 264.62 T
1 11 Q
( or) 191.35 264.62 T
4 10 Q
(3000) 207.21 264.62 T
1 11 Q
(?) 231.21 264.62 T
-0.16 (T) 126.65 250.62 P
-0.16 (o answer this question, Dylan needs an additional way of or) 132.38 250.62 P
-0.16 (dering classes,) 422.81 250.62 P
(called a) 99.65 236.62 T
2 F
(class precedence list) 139.42 236.62 T
1 F
(. In Section 18.3, we describe how Dylan constr) 240.82 236.62 T
(ucts) 468.8 236.62 T
(the class pr) 99.65 222.62 T
(ecedence list. The short answer to our question about default initial) 154.08 222.62 T
-0.1 (slot values is that Dylan uses the default value pr) 99.65 208.62 P
-0.1 (ovided by the class that appears) 337.7 208.62 P
(earlier in the class pr) 99.65 194.62 T
(ecedence list.) 200.31 194.62 T
(W) 126.65 180.62 T
(e shall see that the class pr) 136.64 180.62 T
(ecedence list is also important for method dis-) 264.58 180.62 T
(patch in the pr) 99.65 166.62 T
(esence of multiple inheritance. Suppose, for example, that we had) 170.5 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "293" 307
%%Page: "294" 308
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(294) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(de\336ned two getter or two setter methods for the) 99.65 665.62 T
4 10 Q
(fuel-remaining) 335.84 665.62 T
1 11 Q
( slot: one spe-) 419.84 665.62 T
(cialized on the) 99.65 651.62 T
4 10 Q
(<flying-vehicle>) 173.04 651.62 T
1 11 Q
( class, and the other specialized on the) 269.04 651.62 T
4 10 Q
(<ground-vehicle>) 99.65 637.62 T
1 11 Q
( class. Which method would be selected to get or set the slot) 195.65 637.62 T
(value of an instance of) 99.65 623.62 T
4 10 Q
(<aircraft>) 211.36 623.62 T
1 11 Q
(? W) 271.36 623.62 T
(e r) 288.99 623.62 T
(eturn to the issue of method dispatch) 301.15 623.62 T
(after we see how Dylan constr) 99.65 609.62 T
(ucts the class pr) 246.52 609.62 T
(ecedence list.) 323.46 609.62 T
3 15 Q
(18.3  The c) 99.65 569.95 T
(lass precedence list) 162.33 569.95 T
1 11 Q
(When each class has only one dir) 99.65 549.62 T
(ect super) 260.23 549.62 T
(class, the r) 304.04 549.62 T
(elations among super) 354.61 549.62 T
(classes) 459 549.62 T
(and subclasses form a) 99.65 535.62 T
2 F
(tree) 208.72 535.62 T
1 F
(. For every subclass in the tr) 227.67 535.62 T
(ee, ther) 363.48 535.62 T
(e is a well-de\336ned) 398.92 535.62 T
-0.17 (or) 99.65 521.62 P
-0.17 (dering in terms of) 109.8 521.62 P
2 F
-0.17 (speci\336city) 199.01 521.62 P
1 F
-0.17 ( for that class and all its super) 249.71 521.62 P
-0.17 (classes. A subclass is) 393.03 521.62 P
(always mor) 99.65 507.62 T
(e speci\336c than ar) 156.42 507.62 T
(e any of its super) 237.64 507.62 T
(classes. When each class has only) 320.37 507.62 T
(one super) 99.65 493.62 T
(class, we can or) 147.4 493.62 T
(der unambiguously any given class and all its super-) 222.69 493.62 T
(classes, fr) 99.65 479.62 T
(om) 145.8 479.62 T
2 F
(most speci\336c) 164.27 479.62 T
1 F
( to) 228.72 479.62 T
2 F
(least speci\336c) 243.81 479.62 T
1 F
(. Figur) 307.03 479.62 T
(e 18.1 illustrates part of such an) 338.74 479.62 T
(or) 99.65 465.62 T
(dering for our original, single-inheritance de\336nitions of) 109.8 465.62 T
4 10 Q
(<vehicle>) 381.58 465.62 T
1 11 Q
( and) 435.58 465.62 T
4 10 Q
(<vehicle>) 99.65 451.62 T
1 11 Q
(\325s subclasses.) 153.65 451.62 T
(W) 126.65 437.62 T
(ith multiple inheritance, the r) 137.04 437.62 T
(elations among super) 279.26 437.62 T
(classes and subclasses) 383.65 437.62 T
-0.25 (can form a) 99.65 423.62 P
2 F
-0.25 (graph) 153.16 423.62 P
1 F
-0.25 (, which may not be a tr) 182.5 423.62 P
-0.25 (ee. W) 292.23 423.62 P
-0.25 (e cannot always or) 318.01 423.62 P
-0.25 (der a class and all) 407.87 423.62 P
-0.24 (its super) 99.65 409.62 P
-0.24 (classes in terms of speci\336city) 140.93 409.62 P
-0.24 (. It is still tr) 278.51 409.62 P
-0.24 (ue that a subclass is mor) 332.15 409.62 P
-0.24 (e speci\336c) 449.19 409.62 P
(than ar) 99.65 395.62 T
(e any of its super) 133.93 395.62 T
(classes. But we cannot always or) 216.67 395.62 T
(der its super) 374.48 395.62 T
(classes in) 435.09 395.62 T
(terms of speci\336city) 99.65 381.62 T
(.) 190.24 381.62 T
(Figur) 126.65 367.62 T
(e 18.2 illustrates our curr) 152.86 367.62 T
(ent de\336nitions of) 273.22 367.62 T
4 10 Q
(<vehicle>) 358.51 367.62 T
1 11 Q
( and of) 412.51 367.62 T
4 10 Q
(<vehicle>) 99.65 353.62 T
1 11 Q
(\325s subclasses.) 153.65 353.62 T
(Consider) 126.65 339.62 T
4 10 Q
(<B707>) 173.8 339.62 T
1 11 Q
( and its super) 209.8 339.62 T
(classes. W) 275.45 339.62 T
(e can or) 323.79 339.62 T
(der) 361.49 339.62 T
4 10 Q
(<B707>) 380.58 339.62 T
1 11 Q
(,) 416.58 339.62 T
4 10 Q
(<commercial-) 422.08 339.62 T
(aircraft>) 99.65 325.62 T
1 11 Q
(, and) 153.65 325.62 T
4 10 Q
(<aircraft>) 180.52 325.62 T
1 11 Q
( fr) 240.52 325.62 T
(om mor) 251.08 325.62 T
(e speci\336c to less speci\336c. But we cannot) 289.42 325.62 T
(say that either) 99.65 311.62 T
4 10 Q
(<ground-vehicle>) 171.32 311.62 T
1 11 Q
( or) 267.32 311.62 T
4 10 Q
(<flying-vehicle>) 283.17 311.62 T
1 11 Q
( is mor) 379.17 311.62 T
(e speci\336c than) 412.41 311.62 T
(the other) 99.65 297.62 T
(, because neither class is a subclass of the other) 142.45 297.62 T
(. W) 369.02 297.62 T
(e could or) 384.5 297.62 T
(der) 432.87 297.62 T
4 10 Q
(<B707>) 451.96 297.62 T
1 11 Q
(and its super) 99.65 283.62 T
(classes in two ways, fr) 162.55 283.62 T
(om mor) 270.77 283.62 T
(e speci\336c to less speci\336c:) 309.11 283.62 T
4 9 Q
(<B707>, <commercial-aircraft>, <aircraft>,) 99.65 262.95 T
(<flying-vehicle>, <ground-vehicle>, <vehicle>, <physical-object>, <object>) 110.45 251.95 T
(<B707>, <commercial-aircraft>, <aircraft>,) 99.65 232.95 T
(<ground-vehicle>, <flying-vehicle>, <vehicle>, <physical-object>, <object>) 110.45 221.95 T
1 11 Q
(Dylan needs a way to determine which of these or) 99.65 201.62 T
(derings to use. It solves the) 343.19 201.62 T
(pr) 99.65 187.62 T
(oblem by constr) 110.41 187.62 T
(ucting a) 188.18 187.62 T
2 F
(class precedence list) 230 187.62 T
1 F
( for) 331.4 187.62 T
4 10 Q
(<B707>) 350.91 187.62 T
1 11 Q
( and its super) 386.91 187.62 T
(classes.) 452.56 187.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "294" 308
%%Page: "295" 309
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.3 The class precedence list) 396.27 702.62 T
2 F
(295) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(18.3.1  Construction of the c) 99.65 375.44 T
(lass precedence list) 242.22 375.44 T
1 11 Q
(T) 99.65 355.77 T
(o understand how Dylan determines the class pr) 105.38 355.77 T
(ecedence list, r) 341.56 355.77 T
(ecall that the) 412.58 355.77 T
4 10 Q
(define class) 99.65 341.77 T
1 11 Q
( form for a class includes a list of super) 171.65 341.77 T
(classes. Remember that we) 360.67 341.77 T
(de\336ned) 99.65 327.77 T
4 10 Q
(<aircraft>) 139.43 327.77 T
1 11 Q
( as follows:) 199.43 327.77 T
4 9 Q
(define abstract class <aircraft> \050<flying-vehicle>, <ground-vehicle>\051) 99.65 307.1 T
(...) 110.45 296.1 T
(end class <aircraft>;) 99.65 285.1 T
1 11 Q
(Her) 99.65 264.77 T
(e, we have listed the super) 118.22 264.77 T
(classes as) 247.04 264.77 T
4 10 Q
(<flying-vehicle>) 295.55 264.77 T
1 11 Q
( and) 391.55 264.77 T
4 10 Q
(<ground-) 415.67 264.77 T
(vehicle>) 99.65 250.77 T
1 11 Q
(, in that or) 147.65 250.77 T
(der) 197.48 250.77 T
(.) 213 250.77 T
(In cr) 126.65 236.77 T
(eating the class pr) 148.54 236.77 T
(ecedence list for a class, Dylan uses the or) 235.79 236.77 T
(dering of) 437.96 236.77 T
-0.3 (the list of dir) 99.65 222.77 P
-0.3 (ect super) 160.64 222.77 P
-0.3 (classes in the) 204.15 222.77 P
4 10 Q
-0.66 (define class) 269.2 222.77 P
1 11 Q
-0.3 ( form for that class. Dylan r) 340.55 222.77 P
-0.3 (elies) 471.6 222.77 P
(on the following r) 99.65 208.77 T
(ules:) 186.79 208.77 T
2 F
(1.) 108.65 188.77 T
1 F
(The class being de\336ned takes pr) 126.65 188.77 T
(ecedence over all its dir) 281.73 188.77 T
(ect super) 395.95 188.77 T
(classes.) 439.76 188.77 T
2 F
(2.) 108.65 168.77 T
1 F
(Each dir) 126.65 168.77 T
(ect super) 166.97 168.77 T
(class in the list takes pr) 210.79 168.77 T
(ecedence over all dir) 322.86 168.77 T
(ect super-) 422.88 168.77 T
(classes that appear later in the list.) 126.65 154.77 T
99.65 400.1 495.65 408.1 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 18.2) 140.2 411.43 T
8 F
(Gr) 198.56 411.43 T
(aph of v) 209.57 411.43 T
(ehicle classes that use m) 244.9 411.43 T
(ultiple inher) 356.51 411.43 T
(itance) 407.79 411.43 T
(.) 434.32 411.43 T
99.65 424.1 495.65 672.95 C
0 0 0 1 0 0 0 K
136.15 428.1 459.15 663.95 C
0 152 271 463 502 311 231 142.15 430.52 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f18-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f18-2 .eps)%%CreationDate: (6/5/96) (10:45 AM)%%BoundingBox: 152 271 463 502%%HiResBoundingBox: 152.6079 271.75 461.8562 501.207%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396 305.5 396%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 89.5 600 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 320 494 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 220 384.6667 0 TpTP-43.1894 0 Td0 Tr(<ground-vehicle>) Tx (\r) TX TO0 To1 0 0 1 418.6667 384.6667 0 TpTP-43.1894 0 Td0 Tr(<flying-vehicle>) Tx (\r) TX TO0 To1 0 0 1 320 423.1667 0 TpTP-24.2941 0 Td0 Tr(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 320 458.5 0 TpTP-45.8888 0 Td0 Tr(<physical-object>) Tx (\r) TX TO0 To1 0 0 1 334.6667 346 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 334.6667 310 0 TpTP-56.6862 0 Td0 Tr(<commercial-aircraft>) Tx (\r) TX TO0 To1 0 0 1 334.6667 274 0 TpTP-16.196 0 Td0 Tr(<B707>) Tx (\r) TX TOu0 R0 G0.65 w320.5 489 m320.5 476.75 lS0 O0 g1 w318.2621 478.2958 m320.5275 469.84 l322.7935 478.2958 l318.2621 478.2958 lfUu0 R0 G0.65 w320 454.25 m320 441.75 lS0 O0 g1 w317.7621 443.2958 m320.0275 434.84 l322.2935 443.2958 l317.7621 443.2958 lfUu0 R0 G0.65 w290.5 417.5 m260 403 lS0 O0 g1 w260.4337 405.6826 m253.7696 400.0059 l262.3794 401.5901 l260.4337 405.6826 lfUu0 R0 G0.65 w353.5 418.5 m383 403 lS0 O0 g1 w380.5905 401.7406 m389.1297 399.8131 l382.6982 405.752 l380.5905 401.7406 lfUu0 R0 G0.65 w216 376.5 m193 360 lS0 O0 g1 w192.9501 362.7196 m187.3999 355.9499 l195.5915 359.0377 l192.9501 362.7196 lfUu0 R0 G0.65 w415.5 376 m352 358 lS0 O0 g1 w352.8766 360.57 m345.3591 356.0843 l354.1124 356.2104 l352.8766 360.57 lfUu0 R0 G0.65 w246 376.5 m316 359 lS0 O0 g1 w313.9607 357.2055 m322.7136 357.3525 l315.0598 361.6017 l313.9607 357.2055 lfUu0 R0 G0.65 w335 341.5 m335 327.5 lS0 O0 g1 w332.7621 329.0458 m335.0275 320.59 l337.2935 329.0458 l332.7621 329.0458 lfUu0 R0 G0.65 w334 305 m334 290.5 lS0 O0 g1 w331.7621 292.0458 m334.0275 283.59 l336.2935 292.0458 l331.7621 292.0458 lfU0 To1 0 0 1 185 347.25 0 TpTP-32.3921 0 Td0 Tr(<fuel-truck>) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 424.1 495.65 672.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "295" 309
%%Page: "296" 310
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(296) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(These r) 99.65 665.62 T
(ules establish an or) 135 665.62 T
(dering of a class and its dir) 227.64 665.62 T
(ect super) 358.42 665.62 T
(classes, called the) 402.24 665.62 T
2 F
(local precedence order) 99.65 651.62 T
1 F
(.) 211.26 651.62 T
-0.05 (W) 126.65 637.62 P
-0.05 (e listed) 136.64 637.62 P
4 10 Q
-0.11 (<flying-vehicle>) 173.95 637.62 P
1 11 Q
-0.05 ( befor) 269.95 637.62 P
-0.05 (e) 297.81 637.62 P
4 10 Q
-0.11 (<ground-vehicle>) 305.78 637.62 P
1 11 Q
-0.05 ( in the list of super-) 401.78 637.62 P
(classes of) 99.65 623.62 T
4 10 Q
(<aircraft>) 147.66 623.62 T
1 11 Q
(, so, when we apply these r) 207.66 623.62 T
(ules, we see that, for the) 339.51 623.62 T
4 10 Q
(<air-) 459.27 623.62 T
(craft>) 99.65 609.62 T
1 11 Q
( class,) 135.65 609.62 T
4 10 Q
(<flying-vehicle>) 166.81 609.62 T
1 11 Q
( must have pr) 262.81 609.62 T
(ecedence higher than that of) 329.8 609.62 T
4 10 Q
(<ground-vehicle>) 99.65 595.62 T
1 11 Q
(. The local pr) 195.65 595.62 T
(ecedence or) 258.61 595.62 T
(der for) 315.48 595.62 T
4 10 Q
(<aircraft>) 351.33 595.62 T
1 11 Q
( is as follows:) 411.33 595.62 T
4 9 Q
(<aircraft>, <flying-vehicle>, <ground-vehicle>) 99.65 574.95 T
1 11 Q
(The local pr) 99.65 554.62 T
(ecedence or) 157.11 554.62 T
(der for a class establishes an or) 213.98 554.62 T
(dering of a class and its) 363.8 554.62 T
0 F
(dir) 99.65 540.62 T
(ect) 112.29 540.62 T
1 F
( super) 124.71 540.62 T
(classes. But our goal is to pr) 154.78 540.62 T
(oduce an overall class pr) 289.84 540.62 T
(ecedence list,) 409.66 540.62 T
(which establishes an or) 99.65 526.62 T
(dering of the class and) 212.52 526.62 T
0 F
(all) 324.79 526.62 T
1 F
( its super) 335.79 526.62 T
(classes, dir) 380.06 526.62 T
(ect and indi-) 432.48 526.62 T
(r) 99.65 512.62 T
(ect. In constr) 103.79 512.62 T
(ucting the class pr) 165.69 512.62 T
(ecedence list for a class, Dylan follows two steps:) 253.69 512.62 T
2 F
(1.) 108.65 492.62 T
1 F
-0.34 (Constr) 126.65 492.62 P
-0.34 (uct the local pr) 159.36 492.62 P
-0.34 (ecedence or) 230.51 492.62 P
-0.34 (der for the class and its dir) 287.04 492.62 P
-0.34 (ect super) 414.17 492.62 P
-0.34 (classes,) 457.64 492.62 P
(based on the or) 126.65 478.62 T
(der in which the dir) 200.95 478.62 T
(ect super) 297.28 478.62 T
(classes appear in the) 341.09 478.62 T
4 10 Q
(define) 443.64 478.62 T
(class) 126.65 464.62 T
1 11 Q
( form for the class.) 156.65 464.62 T
2 F
(2.) 108.65 444.62 T
1 F
(Constr) 126.65 444.62 T
(uct the overall class pr) 159.36 444.62 T
(ecedence list for the class by mer) 268.13 444.62 T
(ging the) 426.76 444.62 T
(class\325s local pr) 126.65 430.62 T
(ecedence or) 196.33 430.62 T
(der with the class pr) 253.2 430.62 T
(ecedence lists of the class\325s) 351.83 430.62 T
(dir) 126.65 416.62 T
(ect super) 140.72 416.62 T
(classes.) 184.53 416.62 T
(Notice that this pr) 99.65 396.62 T
(ocedur) 187.67 396.62 T
(e is r) 221.33 396.62 T
(ecursive! But it is guaranteed to terminate, because) 244.11 396.62 T
(no class can be its own super) 99.65 382.62 T
(class.) 239.96 382.62 T
(The r) 126.65 368.62 T
(esulting class pr) 151.96 368.62 T
(ecedence list must be consistent with the local pr) 230.2 368.62 T
(ece-) 466.6 368.62 T
(dence or) 99.65 354.62 T
(der of the class, and with the class pr) 141.1 354.62 T
(ecedence list of each dir) 319.93 354.62 T
(ect) 435.35 354.62 T
(super) 99.65 340.62 T
(class. If class) 126.97 340.62 T
4 10 Q
(<a>) 191.17 340.62 T
1 11 Q
( pr) 209.17 340.62 T
(ecedes class) 222.68 340.62 T
4 10 Q
(<b>) 283.17 340.62 T
1 11 Q
( in the class pr) 301.17 340.62 T
(ecedence list, then) 370.7 340.62 T
4 10 Q
(<b>) 461.97 340.62 T
1 11 Q
-0.45 (cannot pr) 99.65 326.62 P
-0.45 (ecede) 145.49 326.62 P
4 10 Q
-0.98 (<a>) 175.2 326.62 P
1 11 Q
-0.45 ( in either the local pr) 193.2 326.62 P
-0.45 (ecedence or) 291.19 326.62 P
-0.45 (der or the class pr) 347.61 326.62 P
-0.45 (ecedence list) 432.43 326.62 P
(for any dir) 99.65 312.62 T
(ect super) 151.25 312.62 T
(class. Because of the r) 195.06 312.62 T
(ecursive pr) 299.74 312.62 T
(ocedur) 353.73 312.62 T
(e for constr) 387.39 312.62 T
(ucting it,) 441.97 312.62 T
(the class pr) 99.65 298.62 T
(ecedence list must be consistent with the local pr) 154.08 298.62 T
(ecedence or) 390.48 298.62 T
(ders and) 447.35 298.62 T
(class pr) 99.65 284.62 T
(ecedence lists of) 136.07 284.62 T
0 F
(all) 217.27 284.62 T
1 F
( the class\325s super) 228.27 284.62 T
(classes, rather than just with those of) 309.74 284.62 T
(the dir) 99.65 270.62 T
(ect super) 131.72 270.62 T
(classes.) 175.54 270.62 T
(W) 126.65 256.62 T
(e can now see how Dylan computes the class pr) 136.64 256.62 T
(ecedence list for the) 367.83 256.62 T
4 10 Q
(<B707>) 99.65 242.62 T
1 11 Q
( class:) 135.65 242.62 T
2 F
(1.) 108.65 222.62 T
1 F
(Constr) 126.65 222.62 T
(uct the local pr) 159.36 222.62 T
(ecedence or) 231.52 222.62 T
(der for) 288.39 222.62 T
4 10 Q
(<B707>) 324.24 222.62 T
1 11 Q
( and its only dir) 360.24 222.62 T
(ect) 437.11 222.62 T
(super) 126.65 208.62 T
(class,) 153.97 208.62 T
4 10 Q
(<commercial-aircraft>) 182.38 208.62 T
1 11 Q
(. The r) 308.39 208.62 T
(esult is as follows:) 339.2 208.62 T
4 10 Q
(<B707>) 430.24 208.62 T
1 11 Q
(,) 466.24 208.62 T
4 10 Q
(<commercial-aircraft>) 126.65 194.62 T
1 11 Q
(.) 252.65 194.62 T
2 F
(2.) 108.65 174.62 T
1 F
(Mer) 126.65 174.62 T
(ge the local pr) 146.47 174.62 T
(ecedence or) 214.91 174.62 T
(der with the class pr) 271.78 174.62 T
(ecedence list of the only) 370.41 174.62 T
(dir) 126.65 160.62 T
(ect super) 140.72 160.62 T
(class,) 184.53 160.62 T
4 10 Q
(<commercial-aircraft>) 212.94 160.62 T
1 11 Q
(.) 338.94 160.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "296" 310
%%Page: "297" 311
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.3 The class precedence list) 396.27 702.62 T
2 F
(297) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Dylan must now use these r) 99.65 665.62 T
(ules, r) 235.32 665.62 T
(ecursively) 264.74 665.62 T
(, to compute the class pr) 313.31 665.62 T
(ecedence list) 431.03 665.62 T
(of) 99.65 651.62 T
4 10 Q
(<commercial-aircraft>) 112.07 651.62 T
1 11 Q
(. In doing so, Dylan must compute r) 238.07 651.62 T
(ecursively the) 413.22 651.62 T
(class pr) 99.65 637.62 T
(ecedence list of the only dir) 136.07 637.62 T
(ect super) 269.16 637.62 T
(class of) 312.97 637.62 T
4 10 Q
(<commercial-aircraft>) 351.05 637.62 T
1 11 Q
(:) 477.05 637.62 T
4 10 Q
(<aircraft>) 99.65 623.62 T
1 11 Q
(. This pr) 159.65 623.62 T
(ocess continues until Dylan has r) 199.67 623.62 T
(ecursively computed the) 359.42 623.62 T
(class pr) 99.65 609.62 T
(ecedence lists for all super) 136.07 609.62 T
(classes of) 263.59 609.62 T
4 10 Q
(<B707>) 311.61 609.62 T
1 11 Q
(. Finally) 347.61 609.62 T
(, Dylan \336nishes con-) 385.62 609.62 T
(str) 99.65 595.62 T
(ucting the class pr) 112.15 595.62 T
(ecedence list for) 200.15 595.62 T
4 10 Q
(<B707>) 281.04 595.62 T
1 11 Q
( itself. T) 317.04 595.62 T
(able 18.1 shows the r) 354.6 595.62 T
(esults.) 455.22 595.62 T
(One implication of this pr) 126.65 581.62 T
(ocedur) 251.75 581.62 T
(e is that, if a class inherits a super) 285.41 581.62 T
(class via) 447.54 581.62 T
(two dif) 99.65 567.62 T
(fer) 134.55 567.62 T
(ent paths, the super) 147.63 567.62 T
(class in common must have pr) 243.23 567.62 T
(ecedence lower than) 390.96 567.62 T
(that of any of its subclasses. For example, the) 99.65 553.62 T
4 10 Q
(<object>) 320.97 553.62 T
1 11 Q
( class is a super) 368.97 553.62 T
(class of) 443.57 553.62 T
8 F
(Class) 139.9 515.62 T
(Local precedence) 227.24 522.62 T
(order) 257.81 508.62 T
(Class precedence list) 371.38 515.62 T
4 9 Q
(<object>) 105.65 484.95 T
(<object>) 213.65 484.95 T
(<object>) 339.65 484.95 T
(<physical-object>) 105.65 463.95 T
(<physical-object>,) 213.65 463.95 T
(<object>) 213.65 452.95 T
(<physical-object>, <object>) 339.65 463.95 T
(<vehicle>) 105.65 431.95 T
(<vehicle>, <physical-) 213.65 431.95 T
(object>) 213.65 420.95 T
(<vehicle>, <physical-object>,) 339.65 431.95 T
(<object>) 339.65 420.95 T
(<ground-vehicle>) 105.65 399.95 T
(<ground-vehicle>,) 213.65 399.95 T
(<vehicle>) 213.65 388.95 T
(<ground-vehicle>, <vehicle>,) 339.65 399.95 T
(<physical-object>, <object>) 339.65 388.95 T
(<flying-vehicle>) 105.65 367.95 T
(<flying-vehicle>,) 213.65 367.95 T
(<vehicle>) 213.65 356.95 T
(<flying-vehicle>, <vehicle>,) 339.65 367.95 T
(<physical-object>, <object>) 339.65 356.95 T
(<aircraft>) 105.65 335.95 T
(<aircraft>, <flying-) 213.65 335.95 T
(vehicle>, <ground-) 213.65 324.95 T
(vehicle>) 213.65 313.95 T
(<aircraft>, <flying-vehicle>,) 339.65 335.95 T
(<ground-vehicle>, <vehicle>,) 339.65 324.95 T
(<physical-object>, <object>) 339.65 313.95 T
(<commercial-) 105.65 292.95 T
(aircraft>) 105.65 281.95 T
(<commercial-) 213.65 292.95 T
(aircraft>, <aircraft>) 213.65 281.95 T
(<commercial-aircraft>,) 339.65 292.95 T
(<aircraft>, <flying-vehicle>,) 339.65 281.95 T
(<ground-vehicle>, <vehicle>,) 339.65 270.95 T
(<physical-object>, <object>) 339.65 259.95 T
(<B707>) 105.65 238.95 T
(<B707>, <commercial-) 213.65 238.95 T
(aircraft>) 213.65 227.95 T
(<B707>, <commercial-aircraft>,) 339.65 238.95 T
(<aircraft>, <flying-vehicle>,) 339.65 227.95 T
(<ground-vehicle>, <vehicle>,) 339.65 216.95 T
(<physical-object>, <object>) 339.65 205.95 T
99.65 168.96 513.65 176.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 146.66 180.29 T
(ab) 151.97 180.29 T
(le 18.1) 163.54 180.29 T
8 F
(Class precedence lists f) 199.68 180.29 T
(or) 304.97 180.29 T
4 F
(<B707>) 316.64 180.29 T
8 F
( and its superclasses) 352.64 180.29 T
(.) 445.86 180.29 T
99.65 537.83 99.65 197.08 2 L
V
0.25 H
0 Z
N
513.65 537.83 513.65 197.08 2 L
V
N
99.52 537.95 513.77 537.95 2 L
V
N
99.52 496.95 513.77 496.95 2 L
V
N
99.52 196.95 513.77 196.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "297" 311
%%Page: "298" 312
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(298) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(every class \050except itself\051. This class must have lower pr) 99.65 665.62 T
(ecedence than any of its) 370.14 665.62 T
(subclasses, so it appears last in every class pr) 99.65 651.62 T
(ecedence list. The class pr) 318.02 651.62 T
(ecedence) 442.47 651.62 T
(list is consistent with the r) 99.65 637.62 T
(ule that a subclass is mor) 226.46 637.62 T
(e speci\336c than ar) 347.91 637.62 T
(e any of its) 429.13 637.62 T
(super) 99.65 623.62 T
(classes.) 126.97 623.62 T
3 13 Q
(18.3.2  More complicated c) 99.65 589.29 T
(lass precedence lists) 234.55 589.29 T
1 11 Q
(Sometimes, mor) 99.65 563.62 T
(e than one class pr) 178.21 563.62 T
(ecedence list is consistent with the pr) 267.72 563.62 T
(ocedur) 447.74 563.62 T
(e) 481.4 563.62 T
-0.19 (that we have outlined so far) 99.65 549.62 P
-0.19 (. Suppose, for example, that we had de\336ned two addi-) 233.75 549.62 P
(tional classes,) 99.65 535.62 T
4 10 Q
(<wheeled-vehicle>) 168.64 535.62 T
1 11 Q
( and) 270.64 535.62 T
4 10 Q
(<winged-vehicle>) 294.76 535.62 T
1 11 Q
(, with the class r) 390.76 535.62 T
(ela-) 469.19 535.62 T
(tions illustrated in Figur) 99.65 521.62 T
(e 18.3.) 217.48 521.62 T
99.65 185.96 495.65 193.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 18.3) 117.45 197.29 T
8 F
(Expanded g) 175.81 197.29 T
(r) 229.08 197.29 T
(aph of v) 232.31 197.29 T
(ehicle classes that use m) 267.64 197.29 T
(ultiple inher) 379.25 197.29 T
(itance) 430.53 197.29 T
(.) 457.06 197.29 T
99.65 209.95 495.65 505.95 C
0 0 0 1 0 0 0 K
146.65 213.95 448.65 496.95 C
0 158 262 448 533 290 271 152.65 219.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f18-3.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f18-3 .eps)%%CreationDate: (6/5/96) (10:46 AM)%%BoundingBox: 158 262 448 533%%HiResBoundingBox: 159.1112 261.5 446.8562 532.5403%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 305.5 396.5 305.5 396.5%AI3_TileBox: 31 31 583 761%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -30.5 668.5 1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-BoldAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014.5 4716.5 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 305 525.3333 0 TpTP-21.5947 0 Td0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Courier-Bold 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti1 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(<object>) Tx (\r) TX TO0 To1 0 0 1 205 416 0 TpTP-43.1894 0 Td0 Tr(<ground-vehicle>) Tx (\r) TX TO0 To1 0 0 1 403.6667 416 0 TpTP-43.1894 0 Td0 Tr(<flying-vehicle>) Tx (\r) TX TO0 To1 0 0 1 205 372 0 TpTP-45.8888 0 Td0 Tr(<wheeled-vehicle>) Tx (\r) TX TO0 To1 0 0 1 205 326 0 TpTP-32.3921 0 Td0 Tr(<fuel-truck>) Tx (\r) TX TO0 To1 0 0 1 403.6667 372 0 TpTP-43.1894 0 Td0 Tr(<winged-vehicle>) Tx (\r) TX TO0 To1 0 0 1 305 454.5 0 TpTP-24.2941 0 Td0 Tr(<vehicle>) Tx (\r) TX TO0 To1 0 0 1 305 489.8333 0 TpTP-45.8888 0 Td0 Tr(<physical-object>) Tx (\r) TX TO0 To1 0 0 1 319.6667 335.75 0 TpTP-26.9934 0 Td0 Tr(<aircraft>) Tx (\r) TX TO0 To1 0 0 1 319.6667 299.75 0 TpTP-56.6862 0 Td0 Tr(<commercial-aircraft>) Tx (\r) TX TO0 To1 0 0 1 319.6667 263.75 0 TpTP-16.196 0 Td0 Tr(<B707>) Tx (\r) TX TOu0 R0 G0.65 w305.5 520.3333 m305.5 508.0833 lS0 O0 g1 w303.2621 509.6291 m305.5275 501.1733 l307.7935 509.6291 l303.2621 509.6291 lfUu0 R0 G0.65 w305 485.5833 m305 473.0833 lS0 O0 g1 w302.7621 474.6291 m305.0275 466.1733 l307.2935 474.6291 l302.7621 474.6291 lfUu0 R0 G0.65 w275.5 448.8333 m245 434.3333 lS0 O0 g1 w245.4337 437.0159 m238.7696 431.3392 l247.3794 432.9234 l245.4337 437.0159 lfUu0 R0 G0.65 w338.5 449.8333 m368 434.3333 lS0 O0 g1 w365.5905 433.0739 m374.1297 431.1464 l367.6982 437.0853 l365.5905 433.0739 lfUu0 R0 G0.65 w320 331.25 m320 317.25 lS0 O0 g1 w317.7621 318.7958 m320.0275 310.34 l322.2935 318.7958 l317.7621 318.7958 lfUu0 R0 G0.65 w319 294.75 m319 280.25 lS0 O0 g1 w316.7621 281.7958 m319.0275 273.34 l321.2935 281.7958 l316.7621 281.7958 lfUu0 R0 G0.65 w204 411.375 m204 390.0417 lS0 O0 g1 w201.7621 391.5874 m204.0275 383.1316 l206.2935 391.5874 l201.7621 391.5874 lfUu0 R0 G0.65 w204 365.3333 m204 344 lS0 O0 g1 w201.7621 345.5457 m204.0275 337.0899 l206.2935 345.5457 l201.7621 345.5457 lfUu0 R0 G0.65 w402.75 411.375 m402.75 390.0417 lS0 O0 g1 w400.5121 391.5874 m402.7775 383.1316 l405.0435 391.5874 l400.5121 391.5874 lfUu0 R0 G0.65 w237.3333 364.6667 m307.3333 347.5 lS0 O0 g1 w305.3045 345.6949 m314.0567 345.8823 l306.3833 350.0961 l305.3045 345.6949 lfUuu0 R0 G0.65 w401.3333 366 m331.3718 347.7734 lS0 O0 g1 w332.303 350.3268 m324.6915 346.0027 l333.4454 345.9418 l332.303 350.3268 lfUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 209.95 495.65 505.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "298" 312
%%Page: "299" 313
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.3 The class precedence list) 396.27 702.62 T
2 F
(299) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Let\325s assume that the) 99.65 665.62 T
4 10 Q
(define class) 204.72 665.62 T
1 11 Q
( form for) 276.72 665.62 T
4 10 Q
(<aircraft>) 322.71 665.62 T
1 11 Q
( lists) 382.71 665.62 T
4 10 Q
(<winged-) 407.53 665.62 T
-0.3 (vehicle>) 99.65 651.62 P
1 11 Q
-0.14 ( befor) 147.65 651.62 P
-0.14 (e) 175.43 651.62 P
4 10 Q
-0.3 (<wheeled-vehicle>) 183.31 651.62 P
1 11 Q
-0.14 ( in its list of dir) 285.31 651.62 P
-0.14 (ect super) 357.81 651.62 P
-0.14 (classes. Now) 401.48 651.62 P
-0.14 (, thr) 463 651.62 P
-0.14 (ee) 482.5 651.62 P
(class pr) 99.65 637.62 T
(ecedence lists for) 136.07 637.62 T
4 10 Q
(<B707>) 221.62 637.62 T
1 11 Q
( ar) 257.62 637.62 T
(e consistent with the pr) 270.01 637.62 T
(ocedur) 383.32 637.62 T
(es that we have) 416.98 637.62 T
(discussed so far:) 99.65 623.62 T
4 9 Q
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 99.65 602.95 T
(<flying-vehicle>, <wheeled-vehicle>, <ground-vehicle>, <vehicle>,) 110.45 591.95 T
(<physical-object>, <object>) 110.45 580.95 T
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 99.65 561.95 T
(<wheeled-vehicle>, <flying-vehicle>, <ground-vehicle>, <vehicle>,) 110.45 550.95 T
(<physical-object>, <object>) 110.45 539.95 T
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 99.65 520.95 T
(<wheeled-vehicle>, <ground-vehicle>, <flying-vehicle>, <vehicle>,) 110.45 509.95 T
(<physical-object>, <object>) 110.45 498.95 T
1 11 Q
(In this case, Dylan uses an algorithm that tends to keep together) 99.65 478.62 T
(, in the class pr) 410.2 478.62 T
(e-) 482.48 478.62 T
(cedence list, nonoverlapping super) 99.65 464.62 T
(class-to-subclass chains.) 269.61 464.62 T
(Look at this situation another way: The algorithm Dylan uses to constr) 126.65 450.62 T
(uct) 469.35 450.62 T
-0.17 (the class pr) 99.65 436.62 P
-0.17 (ecedence list in ef) 153.73 436.62 P
-0.17 (fect builds the list one class at a time, fr) 238.43 436.62 P
-0.17 (om highest to) 426.96 436.62 P
(lowest pr) 99.65 422.62 T
(ecedence. The class pr) 145.06 422.62 T
(ecedence list under constr) 252.11 422.62 T
(uction for) 378.15 422.62 T
4 10 Q
(<B707>) 428.37 422.62 T
1 11 Q
( is) 464.37 422.62 T
(unambiguous fr) 99.65 408.62 T
(om) 177.79 408.62 T
4 10 Q
(<B707>) 196.26 408.62 T
1 11 Q
( thr) 232.26 408.62 T
(ough) 249.15 408.62 T
4 10 Q
(<winged-vehicle>) 277.05 408.62 T
1 11 Q
(. At that point, Dylan) 373.05 408.62 T
(could insert either) 99.65 394.62 T
4 10 Q
(<flying-vehicle>) 190.88 394.62 T
1 11 Q
( or) 286.88 394.62 T
4 10 Q
(<wheeled-vehicle>) 302.73 394.62 T
1 11 Q
( into the list. It) 404.73 394.62 T
(chooses the class that has a) 99.65 380.62 T
0 F
(dir) 233.35 380.62 T
(ect subclass rightmost) 245.99 380.62 T
1 F
( in the partial class pr) 343.76 380.62 T
(ecedence) 447.98 380.62 T
(list that it has alr) 99.65 366.62 T
(eady constr) 180.57 366.62 T
(ucted. In this case,) 236.73 366.62 T
4 10 Q
(<flying-vehicle>) 328.6 366.62 T
1 11 Q
( has a dir) 424.6 366.62 T
(ect) 468.99 366.62 T
(subclass) 99.65 352.62 T
4 10 Q
(<winged-vehicle>) 142.69 352.62 T
1 11 Q
(, and) 238.69 352.62 T
4 10 Q
(<wheeled-vehicle>) 265.56 352.62 T
1 11 Q
( has a dir) 367.56 352.62 T
(ect subclass) 411.95 352.62 T
4 10 Q
(<aircraft>) 99.65 338.62 T
1 11 Q
(. Because) 159.65 338.62 T
4 10 Q
(<winged-vehicle>) 206.84 338.62 T
1 11 Q
( is rightmost in the partial list alr) 302.84 338.62 T
(eady) 461.88 338.62 T
(constr) 99.65 324.62 T
(ucted, Dylan chooses) 129.45 324.62 T
4 10 Q
(<flying-vehicle>) 235.17 324.62 T
1 11 Q
( as the next entry in the list. Once) 331.17 324.62 T
-0.34 (that decision has been made, the r) 99.65 310.62 P
-0.34 (esulting class pr) 262.47 310.62 P
-0.34 (ecedence list must be the \336rst of) 340.04 310.62 P
(the thr) 99.65 296.62 T
(ee possible or) 131.79 296.62 T
(derings that we listed:) 197.68 296.62 T
4 9 Q
(<B707>, <commercial-aircraft>, <aircraft>, <winged-vehicle>,) 99.65 275.95 T
(<flying-vehicle>, <wheeled-vehicle>, <ground-vehicle>, <vehicle>,) 110.45 264.95 T
(<physical-object>, <object>) 110.45 253.95 T
1 11 Q
-0.35 (Note that it is not always possible to compute a class pr) 99.65 233.62 P
-0.35 (ecedence list. Consider the) 365.04 233.62 P
(thr) 99.65 219.62 T
(ee classes de\336ned as follows:) 113.78 219.62 T
4 9 Q
(define class <a> \050<object>\051) 99.65 198.95 T
(...) 110.45 187.95 T
(end class <a>;) 99.65 176.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "299" 313
%%Page: "300" 314
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(300) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define class <b> \050<a>\051) 99.65 666.95 T
(...) 110.45 655.95 T
(end class <b>;) 99.65 644.95 T
(define class <c> \050<a>, <b>\051) 99.65 625.95 T
(...) 110.45 614.95 T
(end class <c>;) 99.65 603.95 T
1 11 Q
(No class pr) 99.65 583.62 T
(ecedence list is possible for class) 153.97 583.62 T
4 10 Q
(<c>) 313.58 583.62 T
1 11 Q
( in this example, because the) 331.58 583.62 T
(or) 99.65 569.62 T
(dering of classes) 109.8 569.62 T
4 10 Q
(<a>) 192.62 569.62 T
1 11 Q
( and) 210.62 569.62 T
4 10 Q
(<b>) 234.74 569.62 T
1 11 Q
( con\337icts in the local pr) 252.74 569.62 T
(ecedence lists for classes) 365.22 569.62 T
4 10 Q
(<b>) 99.65 555.62 T
1 11 Q
( and) 117.65 555.62 T
4 10 Q
(<c>) 141.77 555.62 T
1 11 Q
(. Dylan signals an err) 159.77 555.62 T
(or when it tries to compute a class pr) 262.67 555.62 T
(ecedence) 441.58 555.62 T
(list and \336nds that it cannot do so.) 99.65 541.62 T
(T) 126.65 527.62 T
(o examine the class pr) 132.38 527.62 T
(ecedence list for a class, we use the) 239.34 527.62 T
4 10 Q
(all-super-) 411.4 527.62 T
(classes) 99.65 513.62 T
1 11 Q
( function, which r) 141.65 513.62 T
(eturns the class and its super) 227.63 513.62 T
(classes in the same or) 367.85 513.62 T
(der) 471.86 513.62 T
(as they appear in the class pr) 99.65 499.62 T
(ecedence list:) 240.05 499.62 T
6 9 Q
(?) 99.65 478.95 T
4 F
(all-superclasses \050<B707>\051) 110.45 478.95 T
6 F
(#[{class <B707>}, {class <commercial-aircraft>}, {class <aircraft>},) 99.65 467.95 T
({class <winged-vehicle>}, {class <flying-vehicle>},) 110.45 456.95 T
({class <wheeled-vehicle>},{class <ground-vehicle>}, {class <vehicle>},) 110.45 445.95 T
({class <physical-object>}, {class <object>}]) 110.45 434.95 T
1 11 Q
-0.17 (The details of the algorithm that Dylan uses to constr) 99.65 414.62 P
-0.17 (uct class pr) 355.8 414.62 P
-0.17 (ecedence lists ar) 409.72 414.62 P
-0.17 (e) 487.8 414.62 P
-0.28 (complicated, and ar) 99.65 400.62 P
-0.28 (e beyond the scope of this book. For most uncomplicated uses) 195.18 400.62 P
-0.02 (of simple inheritance, the most important points to r) 99.65 386.62 P
-0.02 (emember about the class pr) 353.4 386.62 P
-0.02 (e-) 486.72 386.62 P
(cedence list ar) 99.65 372.62 T
(e that the list of dir) 168.15 372.62 T
(ect super) 259.89 372.62 T
(classes in a) 303.7 372.62 T
4 10 Q
(define class) 359.9 372.62 T
1 11 Q
( form is) 431.9 372.62 T
(or) 99.65 358.62 T
(der) 109.8 358.62 T
(ed, and each dir) 125.94 358.62 T
(ect super) 203.68 358.62 T
(class in the list takes pr) 247.49 358.62 T
(ecedence over all dir) 359.56 358.62 T
(ect) 459.58 358.62 T
(super) 99.65 344.62 T
(classes that appear later in the list. In general, if mor) 126.97 344.62 T
(e than one super) 380.08 344.62 T
(class) 460.49 344.62 T
(de\336nes a behavior) 99.65 330.62 T
(, the subclass behaves most like the \336rst super) 187.84 330.62 T
(class in its class) 411.12 330.62 T
(pr) 99.65 316.62 T
(ecedence list that de\336nes that behavior) 110.41 316.62 T
(.) 298.11 316.62 T
3 15 Q
(18.4  Multiple inheritance and method dispatc) 99.65 276.95 T
(h) 365.45 276.95 T
1 11 Q
-0.09 (Now that we have seen how Dylan constr) 99.65 256.62 P
-0.09 (ucts the class pr) 302.17 256.62 P
-0.09 (ecedence list, we r) 378.83 256.62 P
-0.09 (eturn) 466.76 256.62 P
(to the issue of how multiple inheritance af) 99.65 242.62 T
(fects method dispatch. Recall that,) 304.27 242.62 T
(when a generic function is called, Dylan chooses the) 99.65 228.62 T
2 F
(most speci\336c applicable) 355.68 228.62 T
(method) 99.65 214.62 T
1 F
( to call. For simplicity) 138.15 214.62 T
(, let\325s consider a generic function that has one spe-) 241.9 214.62 T
-0.27 (cialized parameter) 99.65 200.62 P
-0.27 (. As we have seen, Dylan chooses which method to dispatch by) 188.93 200.62 P
(comparing the type of the r) 99.65 186.62 T
(equir) 232.09 186.62 T
(ed) 257.5 186.62 T
2 F
(argument) 272.24 186.62 T
1 F
( to the generic function with the) 320.52 186.62 T
(type of the corr) 99.65 172.62 T
(esponding specialized) 173.79 172.62 T
2 F
(parameter) 284.7 172.62 T
1 F
( for each method, using the fol-) 335.42 172.62 T
(lowing pr) 99.65 158.62 T
(ocedur) 147.26 158.62 T
(e:) 180.92 158.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "300" 314
%%Page: "301" 315
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.4 Multiple inheritance and method dispatch) 328.63 702.62 T
2 F
(301) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(1.) 108.65 665.62 T
1 F
-0.22 (Find all the applicable methods. A method is applicable if the r) 126.65 665.62 P
-0.22 (equir) 429.66 665.62 P
-0.22 (ed ar) 455.07 665.62 P
-0.22 (gu-) 479.24 665.62 P
(ment is an instance of the type of the specialized parameter) 126.65 651.62 T
(.) 413.57 651.62 T
2 F
(2.) 108.65 631.62 T
1 F
-0.46 (Sort the applicable methods in or) 126.65 631.62 P
-0.46 (der of speci\336city) 285.27 631.62 P
-0.46 (. A method is mor) 363.71 631.62 P
-0.46 (e speci\336c) 449.62 631.62 P
(than another if the type of its specialized parameter is a pr) 126.65 617.62 T
(oper subtype of) 409.4 617.62 T
(the type of the other method\325s specialized parameter) 126.65 603.62 T
(.) 382.04 603.62 T
2 F
(3.) 108.65 583.62 T
1 F
(Call the most speci\336c method.) 126.65 583.62 T
-0.36 (In the pr) 99.65 563.62 P
-0.36 (esence of multiple inheritance, it is possible to have two or mor) 140.56 563.62 P
-0.36 (e methods) 443.23 563.62 P
-0.27 (that ar) 99.65 549.62 P
-0.27 (e applicable, but that cannot be sorted by speci\336city because neither param-) 130.85 549.62 P
(eter type is a subtype of the other) 99.65 535.62 T
(. By following only the r) 261 535.62 T
(ules that we have seen) 378.54 535.62 T
(so far) 99.65 521.62 T
(, Dylan cannot choose either method to call.) 125.76 521.62 T
3 13 Q
(18.4.1  Class precedence and method dispatc) 99.65 490.29 T
(h) 329.45 490.29 T
1 11 Q
(T) 99.65 470.62 T
(o see how this pr) 105.38 470.62 T
(oblem for method dispatch can arise, we r) 187.78 470.62 T
(eturn to our airport) 391.69 470.62 T
(example. Recall that we now have two slots r) 99.65 456.62 T
(epr) 318.56 456.62 T
(esenting vehicle cr) 334.59 456.62 T
(uising speed:) 424.58 456.62 T
4 10 Q
(ground-cruising-speed) 99.65 442.62 T
1 11 Q
( for) 225.65 442.62 T
4 10 Q
(<ground-vehicle>) 245.16 442.62 T
1 11 Q
( and) 341.16 442.62 T
4 10 Q
(flying-cruising-speed) 365.29 442.62 T
1 11 Q
(for) 99.65 428.62 T
4 10 Q
(<flying-vehicle>) 116.41 428.62 T
1 11 Q
(. Let\325s de\336ne a generic function,) 212.41 428.62 T
4 10 Q
(say-cruising-speed) 369.79 428.62 T
1 11 Q
(, to) 477.79 428.62 T
(r) 99.65 414.62 T
(eport the applicable cr) 103.79 414.62 T
(uising speed for each class:) 212.32 414.62 T
4 9 Q
(define generic say-cruising-speed \050vehicle :: <vehicle>\051;) 99.65 393.95 T
5 F
(// Method 1) 99.65 374.95 T
4 F
(define method say-cruising-speed \050vehicle :: <flying-vehicle>\051) 99.65 363.95 T
(format-out\050"Flying cruising speed: %d\134n", vehicle.flying-cruising-speed\051;) 110.45 352.95 T
(end method say-cruising-speed;) 99.65 341.95 T
5 F
(// Method 2) 99.65 322.95 T
4 F
(define method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 99.65 311.95 T
(format-out\050"Ground cruising speed: %d\134n", vehicle.ground-cruising-speed\051;) 110.45 300.95 T
(end method say-cruising-speed;) 99.65 289.95 T
5 F
(// Method 3) 99.65 270.95 T
4 F
(define method say-cruising-speed \050vehicle :: <vehicle>\051) 99.65 259.95 T
(format-out\050"No cruising speed defined for type <vehicle>\134n"\051;) 110.45 248.95 T
(end method say-cruising-speed;) 99.65 237.95 T
1 11 Q
(Now) 99.65 217.62 T
(, suppose that we call) 122.96 217.62 T
4 10 Q
(say-cruising-speed) 230.22 217.62 T
1 11 Q
( on an instance of) 338.22 217.62 T
4 10 Q
(<B707>) 425.86 217.62 T
1 11 Q
(.) 461.86 217.62 T
(Which method does Dylan call? All thr) 99.65 203.62 T
(ee methods ar) 288.89 203.62 T
(e applicable. Both method 1) 356.94 203.62 T
(and method 2 ar) 99.65 189.62 T
(e mor) 179.37 189.62 T
(e speci\336c than is method 3. But Dylan cannot or) 207.25 189.62 T
(der meth-) 438.74 189.62 T
(ods 1 and 2 by speci\336city) 99.65 175.62 T
(.) 220.46 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "301" 315
%%Page: "302" 316
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(302) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.07 (In this case, Dylan consults the class pr) 126.65 665.62 P
-0.07 (ecedence list for the class of the ar) 315.12 665.62 P
-0.07 (gu-) 479.23 665.62 P
(ment. In our example, the class of the ar) 99.65 651.62 T
(gument is) 293.19 651.62 T
4 10 Q
(<B707>) 344.28 651.62 T
1 11 Q
(. The) 380.28 651.62 T
4 10 Q
(<flying-) 406.94 651.62 T
(vehicle>) 99.65 637.62 T
1 11 Q
( class takes pr) 147.65 637.62 T
(ecedence over the) 214.7 637.62 T
4 10 Q
(<ground-vehicle>) 304.01 637.62 T
1 11 Q
( class, because) 400.01 637.62 T
4 10 Q
-0.18 (<flying-vehicle>) 99.65 623.62 P
1 11 Q
-0.08 ( pr) 195.65 623.62 P
-0.08 (ecedes) 209.07 623.62 P
4 10 Q
-0.18 (<ground-vehicle>) 243.82 623.62 P
1 11 Q
-0.08 ( in the list of dir) 339.82 623.62 P
-0.08 (ect super) 416.4 623.62 P
-0.08 (classes) 460.13 623.62 P
(for) 99.65 609.62 T
4 10 Q
(<aircraft>) 116.41 609.62 T
1 11 Q
(. Dylan calls method 1, which pr) 176.41 609.62 T
(oduces the following output:) 333.61 609.62 T
6 9 Q
(Flying cruising speed: 368) 99.65 588.95 T
1 11 Q
(Note that, if we had happened to list) 99.65 568.62 T
4 10 Q
(<ground-vehicle>) 280.43 568.62 T
1 11 Q
( befor) 376.43 568.62 T
(e) 404.35 568.62 T
4 10 Q
(<flying-) 412.37 568.62 T
(vehicle>) 99.65 554.62 T
1 11 Q
( in the list of dir) 147.65 554.62 T
(ect super) 224.65 554.62 T
(classes for) 268.46 554.62 T
4 10 Q
(<aircraft>) 320.82 554.62 T
1 11 Q
(, Dylan would have) 380.82 554.62 T
(called method 2, and we would have seen the following output:) 99.65 540.62 T
6 9 Q
(Ground cruising speed: 45) 99.65 519.95 T
1 11 Q
-0.21 (In de\336ning classes of air) 99.65 499.62 P
-0.21 (craft, we did not intend for) 216.06 499.62 P
4 10 Q
-0.45 (<flying-vehicle>) 348.73 499.62 P
1 11 Q
-0.21 ( character-) 444.73 499.62 P
(istics to override) 99.65 485.62 T
4 10 Q
(<ground-vehicle>) 183.06 485.62 T
1 11 Q
( characteristics. But for method dispatch to) 279.06 485.62 T
(work in the pr) 99.65 471.62 T
(esence of multiple inheritance, Dylan must or) 169.16 471.62 T
(der subclasses and) 390.19 471.62 T
(super) 99.65 457.62 T
(classes whenever it can.) 126.97 457.62 T
-0.34 (How can we change our example to make) 126.65 443.62 P
4 10 Q
-0.75 (<flying-vehicle>) 330.46 443.62 P
1 11 Q
-0.34 ( behavior add) 426.46 443.62 P
(to, rather than override,) 99.65 429.62 T
4 10 Q
(<ground-vehicle>) 218.45 429.62 T
1 11 Q
( behavior? By using) 314.45 429.62 T
4 10 Q
(next-method) 413.21 429.62 T
1 11 Q
( in) 479.21 429.62 T
(our) 99.65 415.62 T
4 10 Q
(say-cruising-speed) 119.38 415.62 T
1 11 Q
( methods for) 227.38 415.62 T
4 10 Q
(<flying-vehicle>) 292.01 415.62 T
1 11 Q
( and) 388.01 415.62 T
4 10 Q
(<ground-) 412.13 415.62 T
(vehicle>) 99.65 401.62 T
1 11 Q
(, we can r) 147.65 401.62 T
(eport all applicable kinds of cr) 194.02 401.62 T
(uising speed for any combina-) 341.47 401.62 T
(tion of either or both of those classes) 99.65 387.62 T
4 10 Q
(.) 276.7 387.62 T
1 11 Q
( T) 282.7 387.62 T
(o make this behavior work, we also) 291.18 387.62 T
(change the) 99.65 373.62 T
4 10 Q
(say-cruising-speed) 154.98 373.62 T
1 11 Q
( method for) 262.98 373.62 T
4 10 Q
(<vehicle>) 322.94 373.62 T
1 11 Q
(, which will always be) 376.94 373.62 T
(called last, to have no ef) 99.65 359.62 T
(fect:) 215.99 359.62 T
5 9 Q
(// Method 1) 99.65 338.95 T
4 F
(define method say-cruising-speed \050vehicle :: <flying-vehicle>\051) 99.65 327.95 T
(format-out\050"Flying cruising speed: %d\134n", vehicle.flying-cruising-speed\051;) 110.45 316.95 T
(next-method\050\051;) 110.45 305.95 T
(end method say-cruising-speed;) 99.65 294.95 T
5 F
(// Method 2) 99.65 275.95 T
4 F
(define method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 99.65 264.95 T
(format-out\050"Ground cruising speed: %d\134n", vehicle.ground-cruising-speed\051;) 110.45 253.95 T
(next-method\050\051;) 110.45 242.95 T
(end method say-cruising-speed;) 99.65 231.95 T
5 F
(// Method 3) 99.65 212.95 T
4 F
(define method say-cruising-speed \050vehicle :: <vehicle>\051) 99.65 201.95 T
(end method say-cruising-speed;) 99.65 190.95 T
1 11 Q
(Recall that, when Dylan decides which method to call, the r) 99.65 170.62 T
(esult is a list of meth-) 388.38 170.62 T
(ods, sorted by speci\336city) 99.65 156.62 T
(. When) 218.68 156.62 T
4 10 Q
(say-cruising-speed) 256 156.62 T
1 11 Q
( is called on an instance of) 364 156.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "302" 316
%%Page: "303" 317
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.4 Multiple inheritance and method dispatch) 328.63 702.62 T
2 F
(303) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
(<B707>) 99.65 665.62 T
1 11 Q
(, the list of methods is sorted in the following or) 135.65 665.62 T
(der: method 1, method 2,) 368.28 665.62 T
(method 3. Dylan calls method 1. Then, as a r) 99.65 651.62 T
(esult of the call to) 314.85 651.62 T
4 10 Q
(next-method) 403.26 651.62 T
1 11 Q
( in) 469.26 651.62 T
(method 1, Dylan calls method 2. Finally) 99.65 637.62 T
(, as a r) 291.74 637.62 T
(esult of the call to) 322.55 637.62 T
4 10 Q
(next-method) 410.96 637.62 T
1 11 Q
( in) 476.96 637.62 T
(method 1, Dylan calls method 3. The output we see is as follows:) 99.65 623.62 T
6 9 Q
(Flying cruising speed: 368) 99.65 602.95 T
(Ground cruising speed: 45) 99.65 591.95 T
1 11 Q
-0.33 (Note that, if we called) 99.65 571.62 P
4 10 Q
-0.73 (say-cruising-speed) 207.65 571.62 P
1 11 Q
-0.33 ( on an instance of) 315.64 571.62 P
4 10 Q
-0.73 (<fuel-truck>) 401.62 571.62 P
1 11 Q
-0.33 (, we) 473.62 571.62 P
(would see the following output:) 99.65 557.62 T
6 9 Q
(Ground cruising speed: 25) 99.65 536.95 T
3 13 Q
(18.4.2  Re\336ned rules f) 99.65 507.29 T
(or method dispatc) 209.07 507.29 T
(h) 301.38 507.29 T
1 11 Q
(In summary) 99.65 487.62 T
(, the ef) 157.97 487.62 T
(fect of multiple inheritance on method dispatch is to r) 190.21 487.62 T
(e\336ne the) 451.19 487.62 T
(r) 99.65 473.62 T
(ule for sorting methods accor) 103.9 473.62 T
(ding to speci\336city:) 246.12 473.62 T
(A method is) 126.65 455.62 T
2 F
(more speci\336c) 189.02 455.62 T
1 F
( than another if the type of its specialized param-) 254.7 455.62 T
-0.18 (eter is a pr) 126.65 441.62 P
-0.18 (oper subtype of the type of the other method\325s specialized param-) 176.95 441.62 P
-0.37 (eter) 126.65 427.62 P
-0.37 (. \050For de\336nitions of pr) 144.3 427.62 P
-0.37 (oper subtype, see Section 9.3, page 1) 249.24 427.62 P
-0.37 (1) 422.69 427.62 P
-0.37 (1.\051 If one type) 427.58 427.62 P
(is not a pr) 126.65 413.62 T
(oper subtype of the other) 175.01 413.62 T
(, a method is mor) 296.93 413.62 T
(e speci\336c if the class of) 381.61 413.62 T
(its specialized parameter pr) 126.65 399.62 T
(ecedes the class of the other method\325s special-) 261.27 399.62 T
(ized parameter in the class pr) 126.65 385.62 T
(ecedence list of the ar) 269.76 385.62 T
(gument to the generic) 373.95 385.62 T
(function. Otherwise, the methods ar) 126.65 371.62 T
(e) 301.75 371.62 T
2 F
(unordered) 309.77 371.62 T
1 F
( for that parameter) 362.32 371.62 T
(.) 452.98 371.62 T
-0.18 (If the generic function has mor) 99.65 351.62 P
-0.18 (e than one r) 247.84 351.62 P
-0.18 (equir) 304.54 351.62 P
-0.18 (ed ar) 329.95 351.62 P
-0.18 (gument, Dylan uses this aug-) 354.16 351.62 P
(mented r) 99.65 337.62 T
(ule for determining speci\336city in the usual way for sorting applicable) 143.62 337.62 T
(methods with mor) 99.65 323.62 T
(e than one ar) 189.74 323.62 T
(gument. In essence, Dylan or) 252.47 323.62 T
(ders the applicable) 393.11 323.62 T
(methods separately for each r) 99.65 309.62 T
(equir) 243.29 309.62 T
(ed ar) 268.7 309.62 T
(gument, and then constr) 293.08 309.62 T
(ucts an overall) 411.88 309.62 T
-0.22 (or) 99.65 295.62 P
-0.22 (dering by comparing the separate sorted lists. In the overall method or) 109.8 295.62 P
-0.22 (dering, a) 450.28 295.62 P
(method is mor) 99.65 281.62 T
(e speci\336c than another if it satis\336es two constraints:) 170.58 281.62 T
2 F
(1.) 108.65 261.62 T
1 F
(The method is) 126.65 261.62 T
0 F
(no less speci\336c) 198.87 261.62 T
1 F
( than the other method for) 263.15 261.62 T
0 F
(all) 394.11 261.62 T
1 F
( r) 405.11 261.62 T
(equir) 412.01 261.62 T
(ed parame-) 437.42 261.62 T
(ters. \050The two methods might have the same types for some parameters.\051) 126.65 247.62 T
2 F
(2.) 108.65 227.62 T
1 F
(The method is) 126.65 227.62 T
0 F
(mor) 198.87 227.62 T
(e speci\336c) 216.4 227.62 T
1 F
( than the other method for) 255.3 227.62 T
0 F
(some) 386.27 227.62 T
1 F
( r) 408.27 227.62 T
(equir) 415.17 227.62 T
(ed) 440.58 227.62 T
(parameter) 126.65 213.62 T
(.) 175.97 213.62 T
-0.15 (Note that one method might be mor) 99.65 193.62 P
-0.15 (e speci\336c than another for one parameter) 273.94 193.62 P
-0.15 (, but) 471.39 193.62 P
(less speci\336c for another parameter) 99.65 179.62 T
(. These two methods ar) 265.46 179.62 T
(e) 378.33 179.62 T
2 F
(ambiguous) 386.35 179.62 T
1 F
( in) 442.57 179.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "303" 317
%%Page: "304" 318
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(304) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(speci\336city and cannot be or) 99.65 665.62 T
(der) 232.63 665.62 T
(ed. If the method-dispatch pr) 248.76 665.62 T
(ocedur) 390.82 665.62 T
(e cannot \336nd) 424.48 665.62 T
(any method that is mor) 99.65 651.62 T
(e speci\336c than all other methods, Dylan signals an err) 213.17 651.62 T
(or) 473.01 651.62 T
(.) 482.55 651.62 T
3 15 Q
(18.5  Use of m) 99.65 220.95 T
(ultiple inheritance) 182.15 220.95 T
1 11 Q
-0.02 (Multiple inheritance is likely to be most useful when you can separate the charac-) 99.65 200.62 P
(teristics of objects into) 99.65 186.62 T
2 F
(orthogonal) 209.98 186.62 T
1 F
( sets, in which the characteristics of one set do) 264.99 186.62 T
(not depend on the characteristics of other sets. If you can de\336ne a class to r) 99.65 172.62 T
(epr) 462.05 172.62 T
(e-) 478.08 172.62 T
-0.1 (sent each set of characteristics, you can use multiple inheritance to build complex) 99.65 158.62 P
2 F
(Comparison with C++:) 132.65 617.62 T
1 F
( Multiple inheritance in C++ is dif) 247.1 617.62 T
(fer) 412.16 617.62 T
(ent fr) 425.24 617.62 T
(om) 451.05 617.62 T
(multiple inheritance in Dylan. In C++, unless a base class is virtual, it) 132.65 603.62 T
(is inherited multiple times if ther) 132.65 589.62 T
(e is mor) 292.77 589.62 T
(e than one path to the base) 331.27 589.62 T
(class as a r) 132.65 575.62 T
(esult of multiple inheritance. In Dylan, all base classes ar) 183.62 575.62 T
(e) 458.52 575.62 T
(ef) 132.65 561.62 T
(fectively virtual.) 141.38 561.62 T
(C++ has nothing like Dylan\325s class pr) 159.65 547.62 T
(ecedence list for deter-) 340.87 547.62 T
(mining the pr) 132.65 533.62 T
(ecedence of two super) 199.2 533.62 T
(classes, neither of which is) 307.17 533.62 T
(derived fr) 132.65 519.62 T
(om the other) 180.95 519.62 T
(. Ther) 242.22 519.62 T
(e is no implicit or) 270.28 519.62 T
(dering of virtual) 354.57 519.62 T
(members de\336ned for such classes. C++ also has nothing like) 132.65 505.62 T
(Dylan\325s) 132.65 491.62 T
4 10 Q
(next-method) 172.85 491.62 T
1 11 Q
( for invoking the next most speci\336c virtual) 238.85 491.62 T
(function. A C++ pr) 132.65 477.62 T
(ogrammer must often explicitly pr) 224.87 477.62 T
(ovide the) 392.11 477.62 T
(sort of method dispatch and combination that Dylan implements) 132.65 463.62 T
(automatically) 132.65 449.62 T
(.) 198.05 449.62 T
(For examples of similar Dylan and C++ pr) 159.65 435.62 T
(ograms that use) 365.01 435.62 T
(multiple inheritance, see Section B.2, page 386.) 132.65 421.62 T
2 F
(Comparison with Java:) 132.65 388.62 T
1 F
( Java formalizes the concept of a) 247.22 388.62 T
2 F
(protocol) 406.48 388.62 T
1 F
-0.42 (with its) 132.65 374.62 P
2 F
-0.42 (interfaces) 171.11 374.62 P
1 F
-0.42 (. An interface is like an abstract class and a set of) 219.99 374.62 P
(r) 132.65 360.62 T
(equir) 136.79 360.62 T
(ed generic functions. A class that) 162.21 360.62 T
2 F
(implements) 324.92 360.62 T
1 F
( an interface) 384.79 360.62 T
-0.36 (must de\336ne methods for each of the generic functions speci\336ed by) 132.65 346.62 P
(that interface. In a sense, an interface is like a speci\336cation for) 132.65 332.62 T
(multiple inheritance, without the implementation. A class that) 132.65 318.62 T
(implements an interface is consider) 132.65 304.62 T
(ed to be of the interface type,) 304.46 304.62 T
-0.13 (but it must implement all the behaviors dir) 132.65 290.62 P
-0.13 (ectly) 340.57 290.62 P
-0.13 (, rather than inher-) 362.41 290.62 P
-0.04 (iting them fr) 132.65 276.62 P
-0.04 (om the interface \321 which may mean that code has to) 193.35 276.62 P
(be duplicated, rather than shar) 132.65 262.62 T
(ed and r) 282.13 262.62 T
(eused.) 322.39 262.62 T
126.65 630.83 126.65 414.08 2 L
V
0.25 H
0 Z
N
477.65 630.83 477.65 414.08 2 L
V
N
126.52 630.95 477.77 630.95 2 L
V
N
126.52 413.95 477.77 413.95 2 L
V
N
126.65 401.83 126.65 255.08 2 L
V
N
477.65 401.83 477.65 255.08 2 L
V
N
126.52 401.95 477.77 401.95 2 L
V
N
126.52 254.95 477.77 254.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "304" 318
%%Page: "305" 319
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.5 Use of multiple inheritance) 385 702.62 T
2 F
(305) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(classes with dif) 99.65 665.62 T
(fer) 173.74 665.62 T
(ent combinations of characteristics. W) 186.82 665.62 T
(e gave a glimpse of how) 370.05 665.62 T
(to cr) 99.65 651.62 T
(eate such a design by starting to segr) 121.02 651.62 T
(egate characteristics of \337ying and) 299.74 651.62 T
(gr) 99.65 637.62 T
(ound vehicles, and then noting that certain vehicles, like such as air) 109.91 637.62 T
(craft, can) 437.27 637.62 T
(combine both sets of characteristics.) 99.65 623.62 T
-0.31 (Another appr) 126.65 609.62 P
-0.31 (oach that can be useful for various applications is to cr) 192.53 609.62 P
-0.31 (eate one) 453.46 609.62 P
(or mor) 99.65 595.62 T
(e) 132.62 595.62 T
2 F
(base) 140.63 595.62 T
1 F
( super) 163.24 595.62 T
(classes, which de\336ne common characteristics of subclasses,) 193.31 595.62 T
(and a number of) 99.65 581.62 T
2 F
(mix-in) 182.88 581.62 T
1 F
( classes, each of which adds a set of orthogonal character-) 215.87 581.62 T
-0.41 (istics. A mix-in class is like an addition, such as chocolate chips or nuts, that might) 99.65 567.62 P
(be mixed into an ice-cr) 99.65 553.62 T
(eam base. Another way to think about this appr) 209.73 553.62 T
(oach is to) 441.66 553.62 T
(imagine the base class as a noun and the mix-in classes as adjectives that modify) 99.65 539.62 T
-0.03 (or specialize the noun. Y) 99.65 525.62 P
-0.03 (ou can then constr) 217.98 525.62 P
-0.03 (uct concr) 307.03 525.62 P
-0.03 (ete subclasses by using multi-) 351.18 525.62 P
(ple inheritance. For each concr) 99.65 511.62 T
(ete subclass, one or mor) 247.79 511.62 T
(e mix-in classes typically) 363.85 511.62 T
(pr) 99.65 497.62 T
(ecede a single base class in the list of super) 110.41 497.62 T
(classes.) 317.86 497.62 T
3 13 Q
(18.5.1  Use of a mix-in c) 99.65 466.29 T
(lass) 219.74 466.29 T
1 11 Q
(In our airport example, four classes now de\336ne slots that serve as names or) 99.65 446.62 T
(strings that r) 99.65 432.62 T
(epr) 161.35 432.62 T
(esent identi\336ers for objects:) 177.37 432.62 T
4 9 Q
(define abstract class <vehicle-storage> \050<physical-object>\051) 99.65 411.95 T
(slot identifier :: <string>, required-init-keyword: id:;) 110.45 400.95 T
(...) 110.45 389.95 T
(end class <vehicle-storage>;) 99.65 378.95 T
(define abstract class <vehicle> \050<physical-object>\051) 99.65 359.95 T
(slot vehicle-id :: <string>, required-init-keyword: id:;) 110.45 348.95 T
(...) 110.45 337.95 T
(end class <vehicle>;) 99.65 326.95 T
(define class <airport> \050<physical-object>\051) 99.65 307.95 T
(slot name :: <string>, init-keyword: name:;) 110.45 296.95 T
(...) 110.45 285.95 T
(end class <airport>;) 99.65 274.95 T
(define class <airline> \050<object>\051) 99.65 255.95 T
(slot name :: <string>, required-init-keyword: name:;) 110.45 244.95 T
(...) 110.45 233.95 T
(end class <airline>;) 99.65 222.95 T
1 11 Q
(Our example would be mor) 99.65 202.62 T
(e uni\336ed and maintainable if we had a single r) 234.46 202.62 T
(epr) 459.98 202.62 T
(e-) 476 202.62 T
(sentation for these identi\336ers.) 99.65 188.62 T
(Ther) 126.65 174.62 T
(e ar) 149.21 174.62 T
(e several ways that we could impr) 166.88 174.62 T
(ove the example using single) 333.2 174.62 T
(inheritance. One way to do that in principle would be to de\336ne a) 99.65 160.62 T
4 10 Q
(name) 416.93 160.62 T
1 11 Q
( slot in a) 440.93 160.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "305" 319
%%Page: "306" 320
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(306) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(common super) 99.65 665.62 T
(class. In this case, we cannot use this solution, because the only) 172.45 665.62 T
(common super) 99.65 651.62 T
(class is the built-in class) 172.45 651.62 T
4 10 Q
(<object>) 291.11 651.62 T
1 11 Q
(. This appr) 339.11 651.62 T
(oach would work if) 391.24 651.62 T
(all named classes inherited fr) 99.65 637.62 T
(om) 241.21 637.62 T
4 10 Q
(<physical-object>) 259.68 637.62 T
1 11 Q
( \321 we could add a) 361.68 637.62 T
4 10 Q
(name) 455.51 637.62 T
1 11 Q
(slot to) 99.65 623.62 T
4 10 Q
(<physical-object>) 132.2 623.62 T
1 11 Q
(. But then all subclasses of) 234.2 623.62 T
4 10 Q
(<physical-object>) 363.84 623.62 T
1 11 Q
(would inherit the) 99.65 609.62 T
4 10 Q
(name) 187.3 609.62 T
1 11 Q
( slot, whether or not those subclasses need names. Some) 211.3 609.62 T
-0.48 (objects might be inappr) 99.65 595.62 P
-0.48 (opriately named, and those instances would be lar) 212.36 595.62 P
-0.48 (ger than) 453.49 595.62 P
(they need to be.) 99.65 581.62 T
(Another appr) 126.65 567.62 T
(oach would be to de\336ne two new subclasses to contain the) 192.84 567.62 T
4 10 Q
(name) 99.65 553.62 T
1 11 Q
( slot: a) 123.65 553.62 T
4 10 Q
(<named-object>) 157.6 553.62 T
1 11 Q
( subclass of) 241.6 553.62 T
4 10 Q
(<object>) 299.82 553.62 T
1 11 Q
(, and a) 347.82 553.62 T
4 10 Q
(<named-physical-) 382.94 553.62 T
(object>) 99.65 539.62 T
1 11 Q
( subclass of) 141.65 539.62 T
4 10 Q
(<physical-object>) 199.86 539.62 T
1 11 Q
(. W) 301.86 539.62 T
(e would then use) 317.35 539.62 T
4 10 Q
(<named-physi-) 403.58 539.62 T
(cal-object>) 99.65 525.62 T
1 11 Q
( as the super) 165.65 525.62 T
(class for) 226.64 525.62 T
4 10 Q
(<vehicle-storage>) 269.07 525.62 T
1 11 Q
(,) 371.07 525.62 T
4 10 Q
(<vehicle>) 376.57 525.62 T
1 11 Q
(, and) 430.57 525.62 T
4 10 Q
(<air-) 457.44 525.62 T
-0.69 (port>) 99.65 511.62 P
1 11 Q
-0.31 (, and we would use) 129.65 511.62 P
4 10 Q
-0.69 (<named-object>) 225.94 511.62 P
1 11 Q
-0.31 ( as the super) 309.94 511.62 P
-0.31 (class for) 370 511.62 P
4 10 Q
-0.69 (<airline>) 411.8 511.62 P
1 11 Q
-0.31 (. That) 465.8 511.62 P
(would work, too, although the) 99.65 497.62 T
4 10 Q
(name) 250.98 497.62 T
1 11 Q
( slot would be de\336ned in two classes, rather) 274.98 497.62 T
(than in one.) 99.65 483.62 T
(Suppose, however) 126.65 469.62 T
(, that we later \336nd that some, but not all, subclasses need) 215.58 469.62 T
(another attribute, such as a unique identi\336er) 99.65 455.62 T
(. Per) 314.58 455.62 T
(haps) 336.14 455.62 T
4 10 Q
(<airport>,) 362.06 455.62 T
(<vehicle>) 424.81 455.62 T
1 11 Q
(,) 478.81 455.62 T
(and) 99.65 441.62 T
4 10 Q
(<airline>) 121.02 441.62 T
1 11 Q
( need unique identi\336ers, but) 175.02 441.62 T
4 10 Q
(<vehicle-storage>) 315.1 441.62 T
1 11 Q
( does not.) 417.1 441.62 T
(Extending this model, we might have to de\336ne new classes) 99.65 427.62 T
4 10 Q
(<unique-object>) 389.2 427.62 T
1 11 Q
(,) 479.2 427.62 T
4 10 Q
(<unique-named-object>) 99.65 413.62 T
1 11 Q
(,) 225.65 413.62 T
4 10 Q
(<unique-physical-object>) 231.15 413.62 T
1 11 Q
(, and) 375.15 413.62 T
4 10 Q
(<unique-named-) 402.02 413.62 T
(physical-object>) 99.65 399.62 T
1 11 Q
(. W) 195.65 399.62 T
(e now have eight base classes to r) 211.14 399.62 T
(epr) 373.3 399.62 T
(esent the possible) 389.33 399.62 T
(combinations of name and unique identi\336er) 99.65 385.62 T
(. If we add a thir) 312.36 385.62 T
(d attribute, we end) 392.45 385.62 T
-0.1 (up with many mor) 99.65 371.62 P
-0.1 (e classes. W) 190.79 371.62 P
-0.1 (e soon have an unmanageable pr) 246.93 371.62 P
-0.1 (oliferation of base) 406.14 371.62 P
(classes.) 99.65 357.62 T
(Multiple inheritance pr) 126.65 343.62 T
(ovides a solution to these pr) 239.48 343.62 T
(oblems. W) 376.04 343.62 T
(e can de\336ne a) 426.46 343.62 T
(mix-in class,) 99.65 329.62 T
4 10 Q
(name-mix-in) 162.67 329.62 T
1 11 Q
(, whose only purpose is to contain the) 228.67 329.62 T
4 10 Q
(name) 415.49 329.62 T
1 11 Q
( slot:) 439.49 329.62 T
4 9 Q
(define abstract class <name-mix-in> \050<object>\051) 99.65 308.95 T
(slot name :: <string>, init-keyword: name:;) 110.45 297.95 T
(end class <name-mix-in>;) 99.65 286.95 T
1 11 Q
(Now) 99.65 266.62 T
(, we r) 122.96 266.62 T
(ede\336ne our) 149.8 266.62 T
4 10 Q
(<vehicle-storage>) 207.87 266.62 T
1 11 Q
(,) 309.87 266.62 T
4 10 Q
(<vehicle>) 315.37 266.62 T
1 11 Q
(,) 369.37 266.62 T
4 10 Q
(<airport>) 374.87 266.62 T
1 11 Q
(, and) 428.87 266.62 T
4 10 Q
(<air-) 455.74 266.62 T
(line>) 99.65 252.62 T
1 11 Q
( classes to have two dir) 129.65 252.62 T
(ect super) 242.06 252.62 T
(classes:) 285.87 252.62 T
4 10 Q
(<name-mix-in>) 324.22 252.62 T
1 11 Q
(, and either) 402.22 252.62 T
4 10 Q
(<object>) 99.65 238.62 T
1 11 Q
( or) 147.65 238.62 T
4 10 Q
(<physical-object>) 163.5 238.62 T
1 11 Q
(:) 265.5 238.62 T
4 9 Q
(define abstract class <vehicle-storage> \050<name-mix-in>, <physical-object>\051) 99.65 217.95 T
5 F
(// identifier slot removed) 110.45 206.95 T
4 F
(required keyword name:;) 110.45 195.95 T
(...) 110.45 184.95 T
(end class <vehicle-storage>;) 99.65 173.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "306" 320
%%Page: "307" 321
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(18.5 Use of multiple inheritance) 385 702.62 T
2 F
(307) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define abstract class <vehicle> \050<name-mix-in>, <physical-object>\051) 99.65 666.95 T
5 F
(// vehicle-id slot removed) 110.45 655.95 T
4 F
(required keyword name:;) 110.45 644.95 T
(...) 110.45 633.95 T
(end class <vehicle>;) 99.65 622.95 T
(define class <airport> \050<name-mix-in>, <physical-object>\051) 99.65 603.95 T
5 F
(// name slot removed) 110.45 592.95 T
4 F
(keyword name:, init-value: "Anonymous Airport";) 110.45 581.95 T
(...) 110.45 570.95 T
(end class <airport>;) 99.65 559.95 T
(define class <airline> \050<name-mix-in>, <object>\051) 99.65 540.95 T
5 F
(// name slot removed) 110.45 529.95 T
4 F
(required keyword name:;) 110.45 518.95 T
(...) 110.45 507.95 T
(end class <airline>;) 99.65 496.95 T
1 11 Q
-0.4 (W) 99.65 476.62 P
-0.4 (e use the) 109.64 476.62 P
4 10 Q
-0.87 (required keyword) 153.78 476.62 P
1 11 Q
-0.4 ( option to make the) 248.9 476.62 P
4 10 Q
-0.87 (name:) 343.91 476.62 P
1 11 Q
-0.4 ( keywor) 373.91 476.62 P
-0.4 (d r) 413.08 476.62 P
-0.4 (equir) 426.3 476.62 P
-0.4 (ed when) 451.71 476.62 P
(we cr) 99.65 462.62 T
(eate an instance of) 125.87 462.62 T
4 10 Q
(<vehicle-storage>) 217.98 462.62 T
1 11 Q
(,) 319.98 462.62 T
4 10 Q
(<vehicle>) 325.48 462.62 T
1 11 Q
(, or) 379.48 462.62 T
4 10 Q
(<airline>) 398.08 462.62 T
1 11 Q
(. If we) 452.08 462.62 T
(pr) 99.65 448.62 T
(ovided an) 110.41 448.62 T
4 10 Q
(init-value:) 161.94 448.62 T
1 11 Q
( or) 227.94 448.62 T
4 10 Q
(init-function:) 243.79 448.62 T
1 11 Q
( for the) 327.79 448.62 T
4 10 Q
(name) 365.31 448.62 T
1 11 Q
( slot in the de\336nition) 389.31 448.62 T
(of) 99.65 434.62 T
4 10 Q
(<name-mix-in>) 112.07 434.62 T
1 11 Q
(, Dylan would ignor) 190.07 434.62 T
(e that option when we cr) 288.41 434.62 T
(eated an instance) 409.03 434.62 T
(of any of these subclasses.) 99.65 420.62 T
(W) 126.65 406.62 T
(e also use the) 136.64 406.62 T
4 10 Q
(keyword) 204.1 406.62 T
1 11 Q
( option with an) 246.1 406.62 T
4 10 Q
(init-value:) 323.18 406.62 T
1 11 Q
( to pr) 389.18 406.62 T
(ovide a default) 415.03 406.62 T
(initial value for the) 99.65 392.62 T
4 10 Q
(name:) 195.03 392.62 T
1 11 Q
( initialization ar) 225.03 392.62 T
(gument and for the) 301.86 392.62 T
4 10 Q
(name) 398.48 392.62 T
1 11 Q
( slot for) 422.48 392.62 T
(instances of) 99.65 378.62 T
4 10 Q
(<airport>) 159.39 378.62 T
1 11 Q
(.) 213.39 378.62 T
(Of course, we also have to change other code in our example to use the) 126.65 364.62 T
(name) 99.65 350.62 T
4 10 Q
(name) 129.28 350.62 T
1 11 Q
( and the init keywor) 153.28 350.62 T
(d) 251.38 350.62 T
4 10 Q
(name:) 260.85 350.62 T
1 11 Q
( when r) 290.85 350.62 T
(eferring to the slot.) 327.74 350.62 T
(Multiple inheritance pr) 126.65 336.62 T
(ovides several advantages in solving the name) 239.48 336.62 T
(pr) 99.65 322.62 T
(oblem:) 110.41 322.62 T
2 F
(1.) 108.65 302.62 T
1 F
(W) 126.65 302.62 T
(e localize in a single class the characteristic of having a name.) 136.64 302.62 T
2 F
(2.) 108.65 282.62 T
1 F
(Subclasses can still customize aspects of the name attribute, such as what) 126.65 282.62 T
(that attribute\325s initial value is, and whether or not it is r) 126.65 268.62 T
(equir) 395.42 268.62 T
(ed.) 420.83 268.62 T
2 F
(3.) 108.65 248.62 T
1 F
(W) 126.65 248.62 T
(e can give a subclass a name attribute without r) 136.64 248.62 T
(ede\336ning any of its) 366.94 248.62 T
(super) 126.65 234.62 T
(classes.) 153.97 234.62 T
2 F
(4.) 108.65 214.62 T
1 F
(The only subclasses that have a name attribute ar) 126.65 214.62 T
(e those for which that is) 365.29 214.62 T
(appr) 126.65 200.62 T
(opriate.) 149.52 200.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "307" 321
%%Page: "308" 322
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(308) 63.65 702.62 T
0 F
(Chapter 18) 87.4 702.62 T
(Multiple Inheritance) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(18.5.2  Pr) 99.65 664.29 T
(os and cons of m) 146.28 664.29 T
(ultiple inheritance) 233.76 664.29 T
1 11 Q
(Ther) 99.65 644.62 T
(e is debate about the value of using multiple inheritance in object-oriented) 122.21 644.62 T
(pr) 99.65 630.62 T
(ograms. Some people think that multiple inheritance in appr) 110.41 630.62 T
(opriate applica-) 404.36 630.62 T
(tions can impr) 99.65 616.62 T
(ove modularity and can make it easier to r) 169.46 616.62 T
(euse code. Other people) 374.76 616.62 T
(think that the complications and pitfalls of multiple inheritance make pr) 99.65 602.62 T
(ogram) 450.2 602.62 T
(maintenance dif) 99.65 588.62 T
(\336cult, and thus outweigh the possible advantages.) 177.91 588.62 T
(W) 126.65 574.62 T
(e have pr) 136.64 574.62 T
(esented examples of multiple inheritance that show that it can) 181.55 574.62 T
(have advantages when you can separate object characteristics into nonoverlap-) 99.65 560.62 T
-0.28 (ping sets. Multiple inheritance then lets you cr) 99.65 546.62 P
-0.28 (eate complex classes using only the) 322.97 546.62 P
(characteristics that you need, without a pr) 99.65 532.62 T
(oliferation of base classes.) 304.15 532.62 T
(Multiple inheritance does complicate method dispatch and impose addi-) 126.65 518.62 T
(tional r) 99.65 504.62 T
(equir) 134.44 504.62 T
(ements on an application. It is essential to be awar) 159.85 504.62 T
(e of dependencies) 403.45 504.62 T
(on subclass\320super) 99.65 490.62 T
(class or) 187.92 490.62 T
(dering, particularly in method selection and slot initial-) 223.74 490.62 T
(ization. In general, classes that ar) 99.65 476.62 T
(e intended to be multiple dir) 260.07 476.62 T
(ect super) 399.09 476.62 T
(classes of) 442.9 476.62 T
(the same subclass should depend on one another as little as possible. Pr) 99.65 462.62 T
(otocols) 447.17 462.62 T
(involving multiple inheritance may need mor) 99.65 448.62 T
(e documentation than do those) 321.09 448.62 T
(involving single inheritance.) 99.65 434.62 T
3 15 Q
(18.6  Summar) 99.65 394.95 T
(y) 179.76 394.95 T
1 11 Q
(In this chapter) 99.65 374.62 T
(, we cover) 168.89 374.62 T
(ed the following:) 218.11 374.62 T
(\245) 108.65 354.62 T
(W) 126.65 354.62 T
(e intr) 136.64 354.62 T
(oduced the concept of multiple inheritance: inheritance fr) 161.99 354.62 T
(om mor) 440.94 354.62 T
(e) 479.27 354.62 T
(than one dir) 126.65 340.62 T
(ect super) 185.78 340.62 T
(class.) 229.6 340.62 T
(\245) 108.65 320.62 T
(W) 126.65 320.62 T
(e discussed the implications of multiple inheritance for slot initialization.) 136.64 320.62 T
(\245) 108.65 300.62 T
-0.09 (W) 126.65 300.62 P
-0.09 (e described how Dylan constr) 136.64 300.62 P
-0.09 (ucts the class pr) 280.81 300.62 P
-0.09 (ecedence list for a class. The) 357.48 300.62 P
(class pr) 126.65 286.62 T
(ecedence list is an or) 163.07 286.62 T
(dering of a class and all its super) 262.61 286.62 T
(classes.) 421.29 286.62 T
(\245) 108.65 266.62 T
(W) 126.65 266.62 T
(e showed how Dylan uses class pr) 136.64 266.62 T
(ecedence lists in sorting methods by) 302.86 266.62 T
(speci\336city when a generic function is called.) 126.65 252.62 T
(\245) 108.65 232.62 T
(W) 126.65 232.62 T
(e developed extensions of the airport example using multiple inheritance.) 136.64 232.62 T
(\245) 108.65 212.62 T
(W) 126.65 212.62 T
(e discussed advantages and disadvantages of using multiple inheritance.) 136.64 212.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "308" 322
%%Page: "309" 323
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(309) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(19) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(19) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Performance and Flexibility) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(This chapter covers the advanced topic of balancing performance and \337exibility) 99.65 449.62 T
-0.45 (in a Dylan pr) 99.65 435.62 P
-0.45 (ogram. If you ar) 162.15 435.62 P
-0.45 (e writing a stand-alone pr) 239.27 435.62 P
-0.45 (ogram and ar) 362.95 435.62 P
-0.45 (e comfortable) 427.51 435.62 P
-0.1 (with using type constraints as you would in a static language, you do not need to) 99.65 421.62 P
-0.25 (r) 99.65 407.62 P
-0.25 (ead this chapter car) 103.79 407.62 P
-0.25 (efully) 197.76 407.62 P
-0.25 (. Y) 224.62 407.62 P
-0.25 (ou may want to skim the chapter) 236.19 407.62 P
-0.25 (, so that you have an) 394.13 407.62 P
-0.04 (idea of what options ar) 99.65 393.62 P
-0.04 (e available to you in the futur) 211.63 393.62 P
-0.04 (e for lar) 354.69 393.62 P
-0.04 (ger or mor) 392.24 393.62 P
-0.04 (e complex) 443.6 393.62 P
(pr) 99.65 379.62 T
(ojects.) 110.41 379.62 T
(W) 126.65 365.62 T
(e start out by describing what Dylan\325s execution model is, and what we) 136.64 365.62 T
(mean by an) 99.65 351.62 T
0 F
(ef\336ciency model) 158.88 351.62 T
1 F
(. The ef) 228.96 351.62 T
(\336ciency model can help a pr) 264.36 351.62 T
(ogrammer to) 400.96 351.62 T
(choose the appr) 99.65 337.62 T
(opriate language featur) 176.51 337.62 T
(es for a particular pr) 290.06 337.62 T
(oblem. W) 389.07 337.62 T
(e also) 434.83 337.62 T
(explor) 99.65 323.62 T
(e advanced featur) 130.56 323.62 T
(es of Dylan that will let the pr) 217.34 323.62 T
(ogrammer negotiate with) 361.84 323.62 T
(the compiler to trade away part of the \337exibility of the execution model for) 99.65 309.62 T
(enhanced performance.) 99.65 295.62 T
3 15 Q
(19.1  Ex) 99.65 255.95 T
(ecution model) 145.37 255.95 T
1 11 Q
(Dylan is a dynamic language \321 everything in Dylan is de\336ned in terms of a) 99.65 235.62 T
(dynamic) 99.65 221.62 T
2 F
(execution model) 144.93 221.62 T
1 F
(. As we saw in Section 5.5, page 63, the execution) 227.73 221.62 T
(model of how a method is chosen when a generic function is called with a partic-) 99.65 207.62 T
-0.43 (ular set of ar) 99.65 193.62 P
-0.43 (guments is highly dynamic: the ar) 159.12 193.62 P
-0.43 (guments ar) 322.61 193.62 P
-0.43 (e evaluated; the types of) 376.96 193.62 P
(the ar) 99.65 179.62 T
(guments ar) 127.3 179.62 T
(e determined; the applicable methods ar) 182.08 179.62 T
(e found and sorted) 377.67 179.62 T
-0.46 (accor) 99.65 165.62 P
-0.46 (ding to speci\336city; and, \336nally) 125.07 165.62 P
-0.46 (, the most speci\336c, applicable method is called.) 269.3 165.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "309" 323
%%Page: "310" 324
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(310) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(This model implies that values and types can change, and that methods can be) 99.65 665.62 T
(added right up until the generic function is called, and any of these changes still) 99.65 651.62 T
(have an ef) 99.65 637.62 T
(fect on which method is ultimately chosen. This dynamism \321 the) 149.17 637.62 T
(model that value, number) 99.65 623.62 T
(, and type of ar) 225.08 623.62 T
(guments; r) 298.35 623.62 T
(eturn values; applicable) 350.38 623.62 T
(method; and method choice and execution ar) 99.65 609.62 T
(e all determined at the last possible) 318.76 609.62 T
(moment \321 is what gives the Dylan language its power) 99.65 595.62 T
(.) 365.85 595.62 T
(Y) 126.65 581.62 T
(ou might think that this dynamism also means that Dylan must perform) 132.97 581.62 T
(poorly) 99.65 567.62 T
(, because the only way to obey its execution model is to do a lot of extra) 130.71 567.62 T
(computation at r) 99.65 553.62 T
(un time. But not every pr) 180.62 553.62 T
(ogram makes use of dynamic featur) 302.83 553.62 T
(es.) 477.09 553.62 T
-0.27 (Most functions accept and r) 99.65 539.62 P
-0.27 (eturn a \336xed number of values \050often they r) 233.16 539.62 P
-0.27 (eturn only) 442.73 539.62 P
(one\051, and those values ar) 99.65 525.62 T
(e often of a \336xed or constrained type. Even pr) 220.42 525.62 T
(ograms) 441.88 525.62 T
(that do use dynamism will not r) 99.65 511.62 T
(equir) 255.46 511.62 T
(e it everywher) 280.87 511.62 T
(e. So, a good Dylan compiler) 350.64 511.62 T
-0.4 (will identify the static parts of a pr) 99.65 497.62 P
-0.4 (ogram, and will compile them statically \050that is,) 264.36 497.62 P
-0.06 (in a manner that is competitive with what a compiler of any good static language) 99.65 483.62 P
(would do\051. T) 99.65 469.62 T
(o do that, the compiler uses a technique called) 161.75 469.62 T
2 F
(partial evaluation) 388.86 469.62 T
1 F
( \321) 477.76 469.62 T
(operations that can be evaluated at compile time \050that the compiler knows can) 99.65 455.62 T
-0.14 (have only one outcome\051, will be done at compile time. Thus, even though the pr) 99.65 441.62 P
-0.14 (o-) 485.98 441.62 P
(grammer can continue to think and pr) 99.65 427.62 T
(ogram in terms of Dylan\325s dynamic execu-) 285 427.62 T
(tion model, the compiler will generate ef) 99.65 413.62 T
(\336cient code when it can show that it can) 296.76 413.62 T
(obtain the same r) 99.65 399.62 T
(eturn value without carrying out the full pr) 183.23 399.62 T
(ocess at r) 393.96 399.62 T
(un time.) 438.29 399.62 T
(For small pr) 126.65 385.62 T
(ojects \321 pr) 185.65 385.62 T
(ojects that can \336t in a single library \321 the compiler) 239.89 385.62 T
(can analyze the entir) 99.65 371.62 T
(e pr) 200.03 371.62 T
(oject and generate code that is competitive with any) 218.81 371.62 T
-0.06 (static language. If type constraints ar) 99.65 357.62 P
-0.06 (e used for all module variables, slots, param-) 277.86 357.62 P
(eters, and r) 99.65 343.62 T
(eturn values \050as they would be in a static language\051, the compiler can) 153.8 343.62 T
(generate code equivalent to that generated by compilers for static languages. In) 99.65 329.62 T
(the r) 99.65 315.62 T
(emainder of this chapter) 121.8 315.62 T
(, we examine how we can use type constraints,) 239.78 315.62 T
(limited types, open classes, open generic functions, domain sealing, and primary) 99.65 301.62 T
(classes to balance performance and \337exibility in Dylan pr) 99.65 287.62 T
(ograms.) 377.87 287.62 T
3 15 Q
(19.2  Ef\336cienc) 99.65 247.95 T
(y model) 181.59 247.95 T
1 11 Q
(Dylan is a powerful language: Many of the built-in, or primitive, language opera-) 99.65 227.62 T
(tions ar) 99.65 213.62 T
(e high-level operations, such as the method-dispatch mechanism, the col-) 135.9 213.62 T
(lection facility) 99.65 199.62 T
(, and the exception mechanism. Because of Dylan\325s powerful) 167.08 199.62 T
(featur) 99.65 185.62 T
(es, it can be har) 128.45 185.62 T
(d for the pr) 203.1 185.62 T
(ogrammer to develop an) 258.1 185.62 T
2 F
(ef) 380.9 185.62 T
(\336ciency model) 390.48 185.62 T
1 F
( \321 a) 463.49 185.62 T
(model of the absolute or r) 99.65 171.62 T
(elative cost of dif) 224.67 171.62 T
(fer) 307.36 171.62 T
(ent appr) 320.44 171.62 T
(oaches to a pr) 361.32 171.62 T
(oblem.) 428.14 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "310" 324
%%Page: "311" 325
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.3 Type constraints) 424.95 702.62 T
2 F
(31) 517.75 702.62 T
(1) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(In contrast, in other languages, such as C, every language constr) 126.65 665.62 T
(uct can be) 438.39 665.62 T
(explained dir) 99.65 651.62 T
(ectly in terms of a small number of machine instr) 164.32 651.62 T
(uctions. Although) 402.35 651.62 T
-0.31 (it may be easy to understand the performance of a C pr) 99.65 637.62 P
-0.31 (ogram in terms of a simple) 364.32 637.62 P
(model, pr) 99.65 623.62 T
(ogramming in C is mor) 146.82 623.62 T
(e work for the pr) 260.06 623.62 T
(ogrammer \321 the higher) 342 623.62 T
(-level) 459.05 623.62 T
(abstractions ar) 99.65 609.62 T
(e not pr) 170.47 609.62 T
(ovided, and must often be built fr) 207.99 609.62 T
(om scratch.) 371.38 609.62 T
(For example, a C pr) 126.65 595.62 T
(ogrammer expects that the r) 222.16 595.62 T
(un-time cost of calling a) 358.71 595.62 T
-0.12 (function is the cost of possibly saving r) 99.65 581.62 P
-0.12 (egisters on a stack, passing the ar) 287.54 581.62 P
-0.12 (guments,) 447.89 581.62 P
-0.39 (executing a machine instr) 99.65 567.62 P
-0.39 (uction for jumping to a subr) 222.76 567.62 P
-0.39 (outine, and then executing a) 357.17 567.62 P
(r) 99.65 553.62 T
(eturn instr) 103.79 553.62 T
(uction at the end of the function; if it is a call thr) 154.89 553.62 T
(ough a function) 387.73 553.62 T
(pointer) 99.65 539.62 T
(, or a C++ virtual function, the cost of an indir) 134.25 539.62 T
(ect jump must be added. In) 357.33 539.62 T
(Dylan, the story is mor) 99.65 525.62 T
(e complicated, because Dylan has a mor) 210.84 525.62 T
(e sophisticated) 404.9 525.62 T
(execution model: A call to a generic function might be much mor) 99.65 511.62 T
(e expensive in a) 415.05 511.62 T
-0.22 (dynamic situation, because computing the most speci\336c method could take much) 99.65 497.62 P
(longer than would execution of the method itself.) 99.65 483.62 T
(T) 126.65 469.62 T
(o write ef) 132.38 469.62 T
(\336cient pr) 178.19 469.62 T
(ograms in Dylan, you have to understand what con-) 221.7 469.62 T
-0.42 (str) 99.65 455.62 P
-0.42 (ucts in the language can be expensive in time or space, and how you can r) 112.15 455.62 P
-0.42 (educe) 464.54 455.62 P
-0.21 (those costs in common cases. This understanding is based on an) 99.65 441.62 P
2 F
-0.21 (ef) 410.73 441.62 P
-0.21 (\336ciency model) 420.31 441.62 P
1 F
(\321 a conceptual model of how a pr) 99.65 427.62 T
(ogram in Dylan r) 266.79 427.62 T
(uns at a low level.) 350.32 427.62 T
(One pr) 126.65 413.62 T
(oblem with developing an ef) 160.47 413.62 T
(\336ciency model is that ther) 299.76 413.62 T
(e is no single) 425.42 413.62 T
(way to implement many Dylan operations. Dif) 99.65 399.62 T
(fer) 326.48 399.62 T
(ent compilers do things in dif-) 339.56 399.62 T
(fer) 99.65 385.62 T
(ent ways, and certain compilers have multiple techniques for compiling the) 112.73 385.62 T
(same piece of code, depending on cir) 99.65 371.62 T
(cumstances. Nonetheless, we shall try to) 279.18 371.62 T
(give an intuitive feel for which featur) 99.65 357.62 T
(es of Dylan ar) 280.42 357.62 T
(e costly) 347.65 357.62 T
(, and which featur) 382.91 357.62 T
(es) 471.39 357.62 T
(enable the compiler to make optimizations.) 99.65 343.62 T
3 15 Q
(19.3  T) 99.65 303.95 T
(ype constraints) 137.22 303.95 T
1 11 Q
(In Dylan, variables, parameters, r) 99.65 283.62 T
(eturn values, and slots can all have type con-) 261.67 283.62 T
-0.22 (straints. Dylan\325s dynamic natur) 99.65 269.62 P
-0.22 (e means that type constraints can be looser than is) 252.21 269.62 P
-0.32 (typical of a static language, or can even be deferr) 99.65 255.62 P
-0.32 (ed altogether) 333.75 255.62 P
-0.32 (, in support of rapid) 396.64 255.62 P
(pr) 99.65 241.62 T
(ototyping or evolutionary development. T) 110.41 241.62 T
(ype constraints in a dynamic lan-) 314.63 241.62 T
(guage serve thr) 99.65 227.62 T
(ee primary purposes:) 174.68 227.62 T
2 F
(1.) 108.65 207.62 T
1 F
-0.15 (T) 126.65 207.62 P
-0.15 (ype constraints ar) 132.4 207.62 P
-0.15 (e r) 218.49 207.62 P
-0.15 (equir) 230.51 207.62 P
-0.15 (ed for method dispatch: the methods of a generic) 255.92 207.62 P
(function ar) 126.65 193.62 T
(e distinguished by the types of their r) 179.82 193.62 T
(equir) 361.44 193.62 T
(ed ar) 386.85 193.62 T
(guments. The) 411.24 193.62 T
(generic function chooses the applicable methods by sorting them accor) 126.65 179.62 T
(ding) 470.14 179.62 T
(to the type constraints of their parameters.) 126.65 165.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "311" 325
%%Page: "312" 326
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(312) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(2.) 108.65 665.62 T
1 F
-0.21 (T) 126.65 665.62 P
-0.21 (ype constraints can be used optionally to enfor) 132.4 665.62 P
-0.21 (ce pr) 357.77 665.62 P
-0.21 (ogram r) 381.22 665.62 P
-0.21 (estrictions. The) 419.59 665.62 P
(compiler ensur) 126.65 651.62 T
(es that a variable, parameter) 199.74 651.62 T
(, r) 336.64 651.62 T
(eturn value, or slot will never) 346.29 651.62 T
(take on a value that is incompatible with the type constraint of the parame-) 126.65 637.62 T
(ter) 126.65 623.62 T
(, r) 139.03 623.62 T
(eturn value, or slot. \050If the compiler cannot pr) 148.68 623.62 T
(ove at compile time that) 370.1 623.62 T
-0.41 (an incorr) 126.65 609.62 P
-0.41 (ect type is impossible, it inserts a r) 169.88 609.62 P
-0.41 (un-time check to enfor) 333.5 609.62 P
-0.41 (ce the type) 441.63 609.62 P
(constraint.\051) 126.65 595.62 T
2 F
(3.) 108.65 575.62 T
1 F
(T) 126.65 575.62 T
(ype constraints allow the compiler to generate better code, because they) 132.4 575.62 T
(ar) 126.65 561.62 T
(e a contract between the pr) 136.29 561.62 T
(ogrammer and the compiler that the variable,) 267.07 561.62 T
-0.14 (parameter) 126.65 547.62 P
-0.14 (, r) 175.97 547.62 P
-0.14 (eturn value, or slot in question will never take on a value that is) 185.48 547.62 P
-0.2 (incompatible with its type constraint; hence, the compiler needs only to gen-) 126.65 533.62 P
(erate code for dealing with the declar) 126.65 519.62 T
(ed type.) 307.76 519.62 T
(Many Dylan compilers use) 99.65 499.62 T
2 F
(type inferencing) 233.26 499.62 T
1 F
( to determine the possible types of) 316.06 499.62 T
(variables, parameters, and slots that do not have explicit type constraints. W) 99.65 485.62 T
(ithin) 469.7 485.62 T
(a library) 99.65 471.62 T
(, the compiler essentially knows everything about the variables and func-) 139.47 471.62 T
-0.15 (tions that ar) 99.65 457.62 P
-0.15 (e not exported at the library interface \321 it can analyze all uses of vari-) 157.43 457.62 P
(ables, and all callers and callees of functions. Thr) 99.65 443.62 T
(ough this analysis, the compiler) 336.47 443.62 T
-0.09 (can develop a worst-case scenario of the possible types of every variable, parame-) 99.65 429.62 P
-0.36 (ter) 99.65 415.62 P
-0.36 (, r) 112.03 415.62 P
-0.36 (eturn value, and slot. As a r) 121.32 415.62 P
-0.36 (esult, these compilers generate ef) 253.19 415.62 P
-0.36 (\336cient code even) 412.44 415.62 P
(if the pr) 99.65 401.62 T
(ogrammer does not fully declar) 138.03 401.62 T
(e all types \050as would be r) 291.22 401.62 T
(equir) 412.2 401.62 T
(ed in most) 437.61 401.62 T
(static languages\051.) 99.65 387.62 T
2 F
(Comparison with C:) 132.65 353.62 T
1 F
( Static languages such as C have little need for) 233.77 353.62 T
(type infer) 132.65 339.62 T
(encing, because the type of every value must be declar) 179.66 339.62 T
(ed,) 443.95 339.62 T
(and the types can be checked easily at compile time. On the other) 132.65 325.62 T
(hand, when a pr) 132.65 311.62 T
(oblem domain is ill-speci\336ed, the pr) 212.18 311.62 T
(ogram is evolv-) 386.91 311.62 T
(ing thr) 132.65 297.62 T
(ough development, or a value may take on one of several) 165.25 297.62 T
(types, the pr) 132.65 283.62 T
(ogrammer must constr) 193.16 283.62 T
(uct union types, and must use) 304.06 283.62 T
(variant r) 132.65 269.62 T
(ecor) 174.29 269.62 T
(ds or other bookkeeping to track the actual type of the) 194.6 269.62 T
(value manually) 132.65 255.62 T
(.) 207.26 255.62 T
(Dylan automatically handles this bookkeeping and uses) 159.65 241.62 T
-0.49 (type infer) 132.65 227.62 P
-0.49 (encing to minimize the associated over) 179.17 227.62 P
-0.49 (head. At the same) 365.42 227.62 P
(time, when the type of a variable can change at r) 132.65 213.62 T
(un time, Dylan) 367.94 213.62 T
(also automatically tracks the changing type.) 132.65 199.62 T
126.65 366.83 126.65 192.08 2 L
V
0.25 H
0 Z
N
477.65 366.83 477.65 192.08 2 L
V
N
126.52 366.95 477.77 366.95 2 L
V
N
126.52 191.95 477.77 191.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "312" 326
%%Page: "313" 327
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.3 Type constraints) 424.6 702.62 T
2 F
(313) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Some compilers have a facility for generating) 99.65 665.62 T
2 F
(performance warnings) 322.01 665.62 T
1 F
(, which) 435.37 665.62 T
(inform you when type infer) 99.65 651.62 T
(encing is not able to determine types suf) 234.24 651.62 T
(\336ciently to) 430.05 651.62 T
-0.17 (generate optimal code. Some compilers have a facility for generating) 99.65 637.62 P
2 F
-0.17 (safety warn-) 433.8 637.62 P
(ings) 99.65 623.62 T
1 F
(, informing you when type infer) 121.03 623.62 T
(encing is not able to determine types suf) 276.85 623.62 T
(\336-) 472.66 623.62 T
(ciently to omit r) 99.65 609.62 T
(un-time type checking. As an example, consider these de\336nitions) 176.91 609.62 T
-0.09 (\050which ar) 99.65 595.62 P
-0.09 (e similar to, but not exactly the same as, the de\336nitions on which we set-) 145.68 595.62 P
(tled in Chapter 14,) 99.65 581.62 T
0 F
(Four Complete Libraries) 195.04 581.62 T
1 F
(\051:) 302.82 581.62 T
4 9 Q
(define abstract open class <sixty-unit> \050<object>\051) 99.65 560.95 T
(slot total-seconds :: <integer> = 0, init-keyword: total-seconds:;) 110.45 549.95 T
(end class <sixty-unit>;) 99.65 538.95 T
(define method decode-total-seconds) 99.65 519.95 T
(\050sixty-unit :: <sixty-unit>\051) 121.25 508.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 105.05 497.95 T
(let total-seconds = abs\050sixty-unit.total-seconds\051;) 110.45 486.95 T
(let \050total-minutes, seconds\051 = truncate/\050total-seconds, 60\051;) 110.45 475.95 T
(let \050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 110.45 464.95 T
(values \050max-unit, minutes, seconds\051;) 110.45 453.95 T
(end method decode-total-seconds;) 99.65 442.95 T
1 11 Q
(Because we made the choice to stor) 99.65 422.62 T
(e) 270.63 422.62 T
4 10 Q
(total-seconds) 278.65 422.62 T
1 11 Q
( as an integer) 356.65 422.62 T
(, and because) 420.34 422.62 T
4 10 Q
-0.89 (60) 99.65 408.62 P
1 11 Q
-0.41 ( is an integer constant, the compiler can infer that the) 111.65 408.62 P
4 10 Q
-0.89 (truncate/) 367.65 408.62 P
1 11 Q
-0.41 ( calls ar) 421.65 408.62 P
-0.41 (e for an) 457.43 408.62 P
(integer divided by integer) 99.65 394.62 T
(. Ther) 225.71 394.62 T
(e is no need to consider whether to use \337oating-) 253.77 394.62 T
(point or integer division.) 99.65 380.62 T
(If we wer) 126.65 366.62 T
(e mor) 172.55 366.62 T
(e concerned with testing out ideas, we might have left) 200.44 366.62 T
-0.24 (unspeci\336ed the type of the) 99.65 352.62 P
4 10 Q
-0.53 (total-seconds) 230.25 352.62 P
1 11 Q
-0.24 ( slot \050implicitly) 308.25 352.62 P
-0.24 (, its type would then be) 380.08 352.62 P
4 10 Q
(<object>) 99.65 338.62 T
1 11 Q
(\051, or) 147.65 338.62 T
(, if we wanted to keep the option of having times mor) 166.35 338.62 T
(e accurate) 427.04 338.62 T
-0.02 (than just seconds, we might have speci\336ed that its type was) 99.65 324.62 P
4 10 Q
-0.05 (<real>) 391.9 324.62 P
1 11 Q
-0.02 (, allowing for) 427.9 324.62 P
(the possibility of using \337oating-point numbers, which can expr) 99.65 310.62 T
(ess fractional) 405.5 310.62 T
(seconds.) 99.65 296.62 T
(If we left the type of the) 126.65 282.62 T
4 10 Q
(total-seconds) 245.2 282.62 T
1 11 Q
( slot unspeci\336ed, the compiler) 323.2 282.62 T
(would need to check the ar) 99.65 268.62 T
(guments to) 230.85 268.62 T
4 10 Q
(truncate/) 288.32 268.62 T
1 11 Q
(, on the of) 342.32 268.62 T
(f chance that an ar) 390.46 268.62 T
(gu-) 479.08 268.62 T
(ment was not numeric at all. In some compilers, you would be able to get a) 99.65 254.62 T
-0.11 (compile-time safety warning stating that a r) 99.65 240.62 P
-0.11 (un-time type err) 311.62 240.62 P
-0.11 (or is possible \050which,) 390.7 240.62 P
(if unhandled, will r) 99.65 226.62 T
(esult in pr) 193.69 226.62 T
(ogram failur) 242.9 226.62 T
(e\051, and that the check, and the possibil-) 303.68 226.62 T
(ity of a r) 99.65 212.62 T
(un-time err) 140.23 212.62 T
(or) 195.21 212.62 T
(, could be avoided if the compiler knew that) 204.74 212.62 T
4 10 Q
(total-) 422.06 212.62 T
(seconds) 99.65 198.62 T
1 11 Q
( was a) 141.65 198.62 T
4 10 Q
(<real>) 174.74 198.62 T
1 11 Q
(.) 210.74 198.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "313" 327
%%Page: "314" 328
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(314) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.28 (If we speci\336ed the type of the) 99.65 312.62 P
4 10 Q
-0.62 (total-seconds) 243.78 312.62 P
1 11 Q
-0.28 ( slot as) 321.78 312.62 P
4 10 Q
-0.62 (<real>) 356.8 312.62 P
1 11 Q
-0.28 (, the compiler would) 392.8 312.62 P
(have to dispatch on the type of) 99.65 298.62 T
4 10 Q
(total-seconds) 252.36 298.62 T
1 11 Q
(, using either \337oating-point or) 330.36 298.62 T
(integer division as necessary) 99.65 284.62 T
(. In some compilers, we would be able to get a) 237.75 284.62 T
(compile-time performance warning stating that this dispatch could be omitted if) 99.65 270.62 T
(the compiler knew that) 99.65 256.62 T
4 10 Q
(total-seconds) 215.17 256.62 T
1 11 Q
( was of a mor) 293.17 256.62 T
(e r) 358.54 256.62 T
(estricted type.) 370.71 256.62 T
(Note that the type of the r) 126.65 242.62 T
(eturn value of) 252.14 242.62 T
4 10 Q
(decode-total-seconds) 323.11 242.62 T
1 11 Q
( can be) 443.11 242.62 T
-0.32 (inferr) 99.65 228.62 P
-0.32 (ed:) 126.68 228.62 P
4 10 Q
-0.69 (max-unit) 143.85 228.62 P
1 11 Q
-0.32 ( and) 191.85 228.62 P
4 10 Q
-0.69 (minutes) 215.33 228.62 P
1 11 Q
-0.32 ( must be) 257.33 228.62 P
4 10 Q
-0.69 (<integer>) 300.58 228.62 P
1 11 Q
-0.32 ( \050inferr) 354.58 228.62 P
-0.32 (ed fr) 387.7 228.62 P
-0.32 (om the de\336nition) 409.93 228.62 P
(of) 99.65 214.62 T
4 10 Q
(truncate/) 112.07 214.62 T
1 11 Q
(\051, and) 166.07 214.62 T
4 10 Q
(seconds) 196.6 214.62 T
1 11 Q
( must have the same type as) 238.6 214.62 T
4 10 Q
(total-seconds) 377.98 214.62 T
1 11 Q
(\050) 99.65 200.62 T
4 10 Q
(<integer>) 103.31 200.62 T
1 11 Q
(, in our example\051; thus, the compiler does not have to insert any type) 157.31 200.62 T
(checks on the r) 99.65 186.62 T
(eturn values of) 171.93 186.62 T
4 10 Q
(decode-total-seconds) 247.57 186.62 T
1 11 Q
(. Dylan enfor) 367.57 186.62 T
(ces declar) 431.04 186.62 T
(ed) 478.32 186.62 T
(r) 99.65 172.62 T
(eturn types in the same way as it enfor) 103.79 172.62 T
(ces parameter types, by eliminating the) 291.51 172.62 T
2 F
(What is a safe program?) 132.65 645.62 T
1 F
( Dylan is always safe in that a pr) 252.42 645.62 T
(ogramming) 410.2 645.62 T
-0.45 (err) 132.65 631.62 P
-0.45 (or cannot cause a corr) 146.41 631.62 P
-0.45 (uption of the pr) 250.67 631.62 P
-0.45 (ogram \050or of other pr) 325.68 631.62 P
-0.45 (ograms\051.) 426.59 631.62 P
-0.07 (For example, an out-of-bound array access or passing an ar) 132.65 617.62 P
-0.07 (gument of) 418.9 617.62 P
(incompatible type simply cannot happen. The compiler will either) 132.65 603.62 T
(pr) 132.65 589.62 T
(ove that the r) 143.41 589.62 T
(equested action is impossible, or will insert code to) 207.62 589.62 T
(verify bounds or type at r) 132.65 575.62 T
(un time, and will signal an err) 256.99 575.62 T
(or if the) 403.19 575.62 T
(bounds or type is incorr) 132.65 561.62 T
(ect.) 248.94 561.62 T
(When we discuss safety in this section, we ar) 159.65 547.62 T
(e r) 377.7 547.62 T
(eferring to) 389.87 547.62 T
(whether or not such err) 132.65 533.62 T
(ors will be visible to the user) 246.78 533.62 T
(. If we have) 385.21 533.62 T
(not pr) 132.65 519.62 T
(ovided for a r) 162.15 519.62 T
(ecovery action, signaling of an err) 228.19 519.62 T
(or will halt) 392.51 519.62 T
(the pr) 132.65 505.62 T
(ogram. See Chapter 20,) 161.41 505.62 T
0 F
(Exceptions) 279.17 505.62 T
1 F
(, for an example of how) 327.64 505.62 T
(r) 132.65 491.62 T
(un-time err) 136.9 491.62 T
(ors can be handled by the pr) 191.88 491.62 T
(ogram.) 329.97 491.62 T
2 F
(Comparison with Java:) 132.65 458.62 T
1 F
( Java r) 247.22 458.62 T
(ecognizes the need for safe operations,) 277.75 458.62 T
(and has eliminated many of the unsafe practices of C and C++, add-) 132.65 444.62 T
(ing such checks as array-bounds checks and type-cast checks at r) 132.65 430.62 T
(un) 447.09 430.62 T
(time. However) 132.65 416.62 T
(, Java r) 204.53 416.62 T
(etains the C mathematical model that trades) 237.81 416.62 T
-0.23 (performance for corr) 132.65 402.62 P
-0.23 (ectness. Java integers ar) 233.09 402.62 P
-0.23 (e of a \336xed size, and com-) 347.51 402.62 P
(putations that cannot be r) 132.65 388.62 T
(epr) 257.19 388.62 T
(esented in that size silently over\337ow) 273.22 388.62 T
(. In) 449.79 388.62 T
(contrast, Dylan r) 132.65 374.62 T
(equir) 213.75 374.62 T
(es numeric operations to complete corr) 239.16 374.62 T
(ectly or) 428.39 374.62 T
-0.24 (to signal an err) 132.65 360.62 P
-0.24 (or) 204.51 360.62 P
-0.24 (. Several Dylan implementations ar) 214.05 360.62 P
-0.24 (e also expected to) 384.1 360.62 P
(pr) 132.65 346.62 T
(ovide libraries for in\336nite-pr) 143.41 346.62 T
(ecision numerical operations.) 282.03 346.62 T
126.65 658.83 126.65 484.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 484.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
126.65 471.83 126.65 339.08 2 L
V
N
477.65 471.83 477.65 339.08 2 L
V
N
126.52 471.95 477.77 471.95 2 L
V
N
126.52 338.95 477.77 338.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "314" 328
%%Page: "315" 329
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.4 Limited types) 436.9 702.62 T
2 F
(315) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(check wher) 99.65 665.62 T
(e type infer) 154.95 665.62 T
(encing can show it is not needed, and using the enfor) 209.98 665.62 T
(ced) 468.21 665.62 T
(types to make further infer) 99.65 651.62 T
(ences.) 230.01 651.62 T
(Fr) 126.65 637.62 T
(om this example, you can see how the compiler can get a lot of mileage) 136.91 637.62 T
-0.06 (fr) 99.65 623.62 P
-0.06 (om a small number of constraints, and how it can point you to the places wher) 107.46 623.62 P
-0.06 (e) 487.69 623.62 P
-0.37 (further clari\336cation will pr) 99.65 609.62 P
-0.37 (oduce the most performance and safety bene\336ts. At the) 227.94 609.62 P
(same time, Dylan does not r) 99.65 595.62 T
(equir) 235.6 595.62 T
(e that you have all your types thought out in) 261.01 595.62 T
(advance of compiling the pr) 99.65 581.62 T
(ogram; the dynamic natur) 236.16 581.62 T
(e of the language allows) 362.9 581.62 T
(Dylan to defer considering type information until the pr) 99.65 567.62 T
(ogram is actually r) 372.1 567.62 T
(un-) 462.77 567.62 T
(ning. In good Dylan development envir) 99.65 553.62 T
(onments, ther) 292.46 553.62 T
(e is support for r) 359.4 553.62 T
(esolving) 440.15 553.62 T
(and continuing fr) 99.65 539.62 T
(om r) 184.41 539.62 T
(un-time type err) 207.14 539.62 T
(ors during pr) 286.45 539.62 T
(ogram development \050rather) 351.14 539.62 T
(than r) 99.65 525.62 T
(equiring editing of the code and r) 128.43 525.62 T
(ecompilation\051.) 291.33 525.62 T
(Remember that your code is mor) 126.65 511.62 T
(e suited to r) 286.19 511.62 T
(euse when it has fewer and) 343.52 511.62 T
(mor) 99.65 497.62 T
(e general type constraints. If you have a compiler that can issue safety and) 119.51 497.62 T
(performance notes, try to generalize and minimize your type constraints, being) 99.65 483.62 T
(guided by your safety and performance r) 99.65 469.62 T
(equir) 299.68 469.62 T
(ements. Often, just the constraints) 325.09 469.62 T
-0.18 (r) 99.65 455.62 P
-0.18 (equir) 103.79 455.62 P
-0.18 (ed to specify method applicability will be suf) 129.21 455.62 P
-0.18 (\336cient for good safety and per-) 346.64 455.62 P
(formance. Declaring the types of module variables, slots, and r) 99.65 441.62 T
(eturn values of) 403.45 441.62 T
-0.01 (functions is also useful and can help to document your pr) 99.65 427.62 P
-0.01 (ogram. Declaring types) 379.33 427.62 P
(for constants and local variables can be useful for enfor) 99.65 413.62 T
(cing pr) 367.2 413.62 T
(ogram corr) 401.31 413.62 T
(ectness,) 455.12 413.62 T
(but is unlikely to cr) 99.65 399.62 T
(eate optimization opportunities, and might actually r) 193.58 399.62 T
(educe) 451.49 399.62 T
(performance, because the compiler will insert type checks to enfor) 99.65 385.62 T
(ce such con-) 421.07 385.62 T
(straints if they ar) 99.65 371.62 T
(e overly r) 181.73 371.62 T
(estrictive.) 227.8 371.62 T
3 15 Q
(19.4  Limited types) 99.65 331.95 T
1 11 Q
(Some of Dylan\325s built-in types ar) 99.65 311.62 T
(e extr) 259.15 311.62 T
(emely general. When these types ar) 285.85 311.62 T
(e used,) 458.17 311.62 T
(the compiler) 99.65 297.62 T
(\325s type infer) 161.7 297.62 T
(encing is thwarted, and less ef) 219.18 297.62 T
(\336cient code will be gener-) 365.56 297.62 T
-0.39 (ated. The place wher) 99.65 283.62 P
-0.39 (e this situation is most obvious is in the) 199.43 283.62 P
4 10 Q
-0.85 (<collection>) 389.93 283.62 P
1 11 Q
-0.39 ( types,) 461.93 283.62 P
(wher) 99.65 269.62 T
(e the elements of a collection ar) 124.64 269.62 T
(e essentially like multiple slots, all with the) 276.49 269.62 T
(same type constraint. For the built-in collections, elements typically have a gen-) 99.65 255.62 T
(eral default type \050often simply) 99.65 241.62 T
4 10 Q
(<object>) 249.96 241.62 T
1 11 Q
(\051, and ther) 297.96 241.62 T
(e can be an arbitrary number) 347.9 241.62 T
(of them. The) 99.65 227.62 T
4 10 Q
(limited) 163.7 227.62 T
1 11 Q
( mechanism is a way to specify that you expect to stor) 205.7 227.62 T
(e) 466.97 227.62 T
(objects of a particular type in the collection, and to specify how many elements) 99.65 213.62 T
(will be in the collection.) 99.65 199.62 T
(As an example, in Section 17.2, page 259, the) 126.65 185.62 T
4 10 Q
(generate-gates) 345.24 185.62 T
1 11 Q
( method) 429.24 185.62 T
(r) 99.65 171.62 T
(eturns a) 103.79 171.62 T
4 10 Q
(<vector>) 145.69 171.62 T
1 11 Q
(. W) 193.69 171.62 T
(ithout further information, the compiler must assume that) 209.59 171.62 T
(that vector might contain objects of any types. As a r) 99.65 157.62 T
(esult, the following code in) 354.14 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "315" 329
%%Page: "316" 330
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(316) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(the) 99.65 665.62 T
4 10 Q
(build-simple-airport) 117.65 665.62 T
1 11 Q
( method fr) 237.65 665.62 T
(om Section 17.5, page 277, will be) 288.66 665.62 T
(inef) 99.65 651.62 T
(\336cient:) 117.99 651.62 T
4 9 Q
(let gates = generate-gates\050gates-per-terminal, capacity\051;) 110.45 630.95 T
(...) 110.45 619.95 T
(for \050gate in gates\051) 110.45 608.95 T
(gate.connected-to := taxiway-vector;) 121.25 597.95 T
(end for;) 110.45 586.95 T
1 11 Q
(Because the compiler can infer only that) 99.65 566.62 T
4 10 Q
(gates) 296.79 566.62 T
1 11 Q
( is a) 326.79 566.62 T
4 10 Q
(<vector>) 348.4 566.62 T
1 11 Q
(, it must generate) 396.4 566.62 T
-0.33 (extra code to determine whether each) 99.65 552.62 P
4 10 Q
-0.71 (gate) 283.31 552.62 P
1 11 Q
-0.33 ( has a) 307.31 552.62 P
4 10 Q
-0.71 (connected-to) 336.64 552.62 P
1 11 Q
-0.33 ( method on it. W) 408.64 552.62 P
-0.33 (e) 487.96 552.62 P
(can use limited types to constrain) 99.65 538.62 T
4 10 Q
(gate-instances) 265.22 538.62 T
1 11 Q
( as follows:) 349.22 538.62 T
4 9 Q
(define constant <gate-vector> = limited\050<vector>, of: <gate>\051;) 99.65 517.95 T
(define method generate-gates) 99.65 498.95 T
(\050gates-per-terminal :: <vector>, default-gate-capacity :: <size>\051) 121.25 487.95 T
(=> \050gates :: <gate-vector>\051) 105.05 476.95 T
(let result = make\050<gate-vector>, size: reduce1\050\134+, gates-per-terminal\051\051;) 110.45 465.95 T
(...) 110.45 454.95 T
(values\050result\051;) 110.45 443.95 T
(end method generate-gates;) 99.65 432.95 T
1 11 Q
(W) 99.65 412.62 T
(ith the limited constraint of the r) 110.04 412.62 T
(eturn value of) 267.53 412.62 T
4 10 Q
(generate-gates) 338.5 412.62 T
1 11 Q
(, the compiler) 422.5 412.62 T
(can ensur) 99.65 398.62 T
(e that only gate objects will ever be stor) 146.3 398.62 T
(ed in the vector; hence, it can be) 337.53 398.62 T
(sur) 99.65 384.62 T
(e that each) 115.09 384.62 T
4 10 Q
(gate) 169.74 384.62 T
1 11 Q
( will be a) 193.74 384.62 T
4 10 Q
(<gate>) 240.37 384.62 T
1 11 Q
( and will have a) 276.37 384.62 T
4 10 Q
(connected-to) 356.4 384.62 T
1 11 Q
( method.) 428.4 384.62 T
(Note that limited-collection types ar) 126.65 370.62 T
(e instantiable types; that is, you can) 301.81 370.62 T
(make an object of a limited type. This capability is dif) 99.65 356.62 T
(fer) 358.59 356.62 T
(ent fr) 371.67 356.62 T
(om similar con-) 397.48 356.62 T
(str) 99.65 342.62 T
(ucts in certain other languages, in which those constr) 112.15 342.62 T
(ucts ar) 369.86 342.62 T
(e only an assertion) 402.03 342.62 T
(about the range or type of values to be stor) 99.65 328.62 T
(ed in the collection. Having declar) 307.53 328.62 T
(ed) 473.82 328.62 T
-0.12 (the r) 99.65 314.62 P
-0.12 (eturn value of) 121.68 314.62 P
4 10 Q
-0.27 (generate-gates) 192.29 314.62 P
1 11 Q
-0.12 ( to be a) 276.29 314.62 P
4 10 Q
-0.27 (<gate-vector>) 313.24 314.62 P
1 11 Q
-0.12 (, it would be an err) 391.24 314.62 P
-0.12 (or) 482.67 314.62 P
-0.19 (to r) 99.65 300.62 P
-0.19 (eturn a) 115.95 300.62 P
4 10 Q
-0.41 (<vector>) 152.81 300.62 P
1 11 Q
-0.19 ( instead; hence, we changed the ar) 200.81 300.62 P
-0.19 (gument to) 365.89 300.62 P
4 10 Q
-0.41 (make) 418.32 300.62 P
1 11 Q
-0.19 ( when con-) 442.32 300.62 P
(str) 99.65 286.62 T
(ucting) 112.15 286.62 T
4 10 Q
(result) 145.73 286.62 T
1 11 Q
( to be) 181.73 286.62 T
4 10 Q
(<gate-vector>) 210.92 286.62 T
1 11 Q
( instead of the original) 288.92 286.62 T
4 10 Q
(<vector>) 400.91 286.62 T
1 11 Q
(.) 448.91 286.62 T
-0.02 (If) 126.65 272.62 P
4 10 Q
-0.05 (<gate>) 136.74 272.62 P
1 11 Q
-0.02 ( and) 172.74 272.62 P
4 10 Q
-0.05 (connected-to) 196.82 272.62 P
1 11 Q
-0.02 ( ar) 268.82 272.62 P
-0.02 (e not) 281.2 272.62 P
2 F
-0.02 (open) 307.92 272.62 P
1 F
-0.02 ( \050as described in Section 19.9 and) 332.97 272.62 P
(Section 19.10\051, the compiler can infer that) 99.65 258.62 T
4 10 Q
(connected-to) 302.41 258.62 T
1 11 Q
( is used her) 374.41 258.62 T
(e to set a slot) 429.63 258.62 T
(in the gate instance and to further optimize the code generated. W) 99.65 244.62 T
(e do not delve) 420.03 244.62 T
-0.18 (into the exact details of what the compiler has to know to make this optimization,) 99.65 230.62 P
-0.35 (but it is worth noting that, if either the class or the generic function wer) 99.65 216.62 P
-0.35 (e open, the) 440.87 216.62 P
(optimization could not be made.) 99.65 202.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "316" 330
%%Page: "317" 331
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.4 Limited types) 436.9 702.62 T
2 F
(317) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Another use of limited types is to allow compact r) 99.65 513.62 T
(epr) 342.21 513.62 T
(esentations. W) 358.24 513.62 T
(e can use) 428.27 513.62 T
4 10 Q
(limited) 99.65 499.62 T
1 11 Q
( with the built-in type) 141.65 499.62 T
4 10 Q
(<integer>) 250.57 499.62 T
1 11 Q
( to specify numbers with a limited) 304.57 499.62 T
(range that can be stor) 99.65 485.62 T
(ed mor) 203.9 485.62 T
(e compactly than integers. It is especially useful to) 238.5 485.62 T
(use a limited range in combination with a limited collection; for example,) 99.65 471.62 T
4 9 Q
(define constant <signed-byte-vector>) 99.65 450.95 T
(= limited\050<simple-vector>,) 110.45 439.95 T
(of: limited\050<integer>, min: -128, max 127\051\051;) 164.45 428.95 T
1 11 Q
(In the pr) 99.65 408.62 T
(eceding example, we de\336ne a type that can be r) 141.27 408.62 T
(epr) 371.07 408.62 T
(esented as a one-) 387.1 408.62 T
(dimensional array of 8-bit bytes.) 99.65 394.62 T
2 F
(Comparison with C++:) 132.65 645.62 T
1 F
( The Dylan limited-collection types pr) 247.1 645.62 T
(ovide a) 431.2 645.62 T
(capability similar to that of) 132.65 631.62 T
(fer) 263.49 631.62 T
(ed by the C++ template classes. Unlike) 276.57 631.62 T
(in C++, the base type of a limited-collection type \050the equivalent of a) 132.65 617.62 T
-0.13 (C++ class template \321 in the example above,) 132.65 603.62 P
4 10 Q
-0.28 (<vector>) 349.31 603.62 P
1 11 Q
-0.13 (\051 is also a valid) 397.31 603.62 P
(type. Dylan\325s dynamic capabilities mean that Dylan can defer deter-) 132.65 589.62 T
(mining the element type of a collection until r) 132.65 575.62 T
(un time, in ef) 354.32 575.62 T
(fect adapt-) 418.46 575.62 T
(ing the class template as it goes along. By using a limited type, the) 132.65 561.62 T
(compiler can generate mor) 132.65 547.62 T
(e ef) 262.54 547.62 T
(\336cient code.) 279.29 547.62 T
2 F
(Comparison with C:) 132.65 360.62 T
1 F
( C pr) 233.77 360.62 T
(ovides ef) 257.83 360.62 T
(\336cient data r) 301.39 360.62 T
(epr) 362.34 360.62 T
(esentations,) 378.37 360.62 T
(because its data types typically map dir) 132.65 346.62 T
(ectly to underlying har) 324.76 346.62 T
(dwar) 436.12 346.62 T
(e) 461.66 346.62 T
(r) 132.65 332.62 T
(epr) 136.79 332.62 T
(esentations. A drawback of C is that its ef) 152.82 332.62 T
(\336cient data r) 353.59 332.62 T
(epr) 414.55 332.62 T
(esenta-) 430.57 332.62 T
(tions ar) 132.65 318.62 T
(e often not portable: The size of a) 168.9 318.62 T
4 10 Q
(short int) 332.66 318.62 T
1 11 Q
( may vary acr) 386.66 318.62 T
(oss) 452.95 318.62 T
(platforms, for instance. Dylan takes the mor) 132.65 304.62 T
(e abstract appr) 345.85 304.62 T
(oach of) 417.64 304.62 T
(describing the r) 132.65 290.62 T
(equir) 208.44 290.62 T
(ements of a data type, and letting the compiler) 233.85 290.62 T
(choose the most ef) 132.65 276.62 T
(\336cient underlying r) 222.09 276.62 T
(epr) 316.14 276.62 T
(esentation. A drawback of) 332.17 276.62 T
(the Dylan appr) 132.65 262.62 T
(oach is that it cannot easily be used for low-level sys-) 206.01 262.62 T
(tems pr) 132.65 248.62 T
(ogramming, wher) 169.39 248.62 T
(e data str) 256.99 248.62 T
(uctur) 301.58 248.62 T
(es must map r) 327.46 248.62 T
(eliably to the) 396.21 248.62 T
-0.38 (underlying har) 132.65 234.62 P
-0.38 (dwar) 205.48 234.62 P
-0.38 (e. Most Dylan systems pr) 231.02 234.62 P
-0.38 (ovide a for) 352.37 234.62 P
-0.38 (eign-function) 403.85 234.62 P
(interface to allow calling out to C or some other language mor) 132.65 220.62 T
(e suit-) 434.03 220.62 T
(able to these low-level tasks. Some Dylan systems augment the lan-) 132.65 206.62 T
(guage with machine-level constr) 132.65 192.62 T
(ucts that pr) 290.88 192.62 T
(ovide the level of contr) 345.98 192.62 T
(ol) 457.5 192.62 T
(necessary while staying within the object model as much as possible.) 132.65 178.62 T
126.65 658.83 126.65 540.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 540.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 539.95 477.77 539.95 2 L
V
N
126.65 373.83 126.65 171.08 2 L
V
N
477.65 373.83 477.65 171.08 2 L
V
N
126.52 373.95 477.77 373.95 2 L
V
N
126.52 170.95 477.77 170.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "317" 331
%%Page: "318" 332
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(318) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(19.5  En) 99.65 463.95 T
(umerations) 146.04 463.95 T
1 11 Q
(Many languages pr) 99.65 443.62 T
(ovide enumeration types both to enfor) 193.73 443.62 T
(ce pr) 380.62 443.62 T
(ogram corr) 404.28 443.62 T
(ectness) 458.09 443.62 T
(and to pr) 99.65 429.62 T
(ovide mor) 144.12 429.62 T
(e compact r) 194.15 429.62 T
(epr) 250.25 429.62 T
(esentation of multiple-choice values. Dylan) 266.28 429.62 T
(does not have a built-in enumeration type, but you can easily constr) 99.65 415.62 T
(uct enumera-) 429.66 415.62 T
(tions using the) 99.65 401.62 T
4 10 Q
(type-union) 174.03 401.62 T
1 11 Q
( and) 234.03 401.62 T
4 10 Q
(singleton) 258.15 401.62 T
1 11 Q
( type constr) 312.15 401.62 T
(uctors.) 369.03 401.62 T
(For example, consider the) 126.65 387.62 T
4 10 Q
(<latitude>) 254.85 387.62 T
1 11 Q
( and) 314.85 387.62 T
4 10 Q
(<longitude>) 338.98 387.62 T
1 11 Q
( classes, wher) 404.98 387.62 T
(e) 471.06 387.62 T
(ther) 99.65 373.62 T
(e ar) 119.05 373.62 T
(e only two valid values for the) 136.72 373.62 T
4 10 Q
(direction) 287.32 373.62 T
1 11 Q
( slot in each class. Rather than) 341.32 373.62 T
(enfor) 99.65 359.62 T
(cing the r) 125.14 359.62 T
(estrictions pr) 170.64 359.62 T
(ogrammatically) 233.96 359.62 T
(, as we did in Section 10.6, page 128,) 309.32 359.62 T
(we can cr) 99.65 345.62 T
(eate types that do the job for us:) 145.41 345.62 T
4 9 Q
(define abstract class <directed-angle> \050<sixty-unit>\051) 99.65 324.95 T
(slot direction :: <symbol>, required-init-keyword: direction:;) 110.45 313.95 T
(end class <directed-angle>;) 99.65 302.95 T
(define constant <latitude-direction>) 99.65 283.95 T
(= type-union\050singleton\050#"north"\051, singleton\050#"south"\051\051;) 110.45 272.95 T
(define class <latitude> \050<directed-angle>\051) 99.65 253.95 T
(keyword direction:, type: <latitude-direction>;) 110.45 242.95 T
(end class <latitude>;) 99.65 231.95 T
(define constant <longitude-direction>) 99.65 212.95 T
(= type-union\050singleton\050#"east"\051, singleton\050#"west"\051\051;) 110.45 201.95 T
(define class <longitude> \050<directed-angle>\051) 99.65 182.95 T
(keyword direction:, type: <longitude-direction>;) 110.45 171.95 T
(end class <longitude>;) 99.65 160.95 T
2 11 Q
(Comparison with Java:) 132.65 645.62 T
1 F
( Java r) 247.22 645.62 T
(ecognizes that portable pr) 277.75 645.62 T
(ograms need) 403.74 645.62 T
(well-de\336ned data types, rather than types that map to the particular) 132.65 631.62 T
(underlying har) 132.65 617.62 T
(dwar) 205.85 617.62 T
(e dif) 231.4 617.62 T
(fer) 252.8 617.62 T
(ently in each implementation. However) 265.88 617.62 T
(,) 458.14 617.62 T
(Java r) 132.65 603.62 T
(etains some of C\325s concr) 160.42 603.62 T
(eteness in simply specifying four dis-) 277.21 603.62 T
(tinct sizes of integer \050in terms of how many binary digits they hold\051,) 132.65 589.62 T
(and for) 132.65 575.62 T
(cing the pr) 167.84 575.62 T
(ogrammer to convert integer types to objects manu-) 219.96 575.62 T
-0.21 (ally) 132.65 561.62 P
-0.21 (, when object-oriented operations ar) 149.45 561.62 P
-0.21 (e to be performed. In contrast,) 323.69 561.62 P
(Dylan\325s limited-integer types specify) 132.65 547.62 T
(, at the pr) 310.53 547.62 T
(ogram level, the) 356.63 547.62 T
-0.46 (abstract r) 132.65 533.62 P
-0.46 (equir) 177.23 533.62 P
-0.46 (ements of the type, giving the compiler fr) 202.64 533.62 P
-0.46 (eedom to map) 400.38 533.62 P
(the pr) 132.65 519.62 T
(ogram r) 161.41 519.62 T
(equir) 199.99 519.62 T
(ements as ef) 225.4 519.62 T
(\336ciently as possible to the underlying) 284.7 519.62 T
(ar) 132.65 505.62 T
(chitectur) 142.29 505.62 T
(e.) 184.89 505.62 T
126.65 658.83 126.65 498.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 498.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 497.95 477.77 497.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "318" 332
%%Page: "319" 333
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.6 Direct methods) 430.41 702.62 T
2 F
(319) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.42 (Her) 99.65 665.62 P
-0.42 (e, the abstract super) 118.22 665.62 P
-0.42 (class speci\336es that the r) 213.96 665.62 P
-0.42 (ead-only slot) 325.88 665.62 P
4 10 Q
-0.92 (direction) 390.88 665.62 P
1 11 Q
-0.42 ( must be a) 444.88 665.62 P
4 10 Q
(<symbol>) 99.65 651.62 T
1 11 Q
(, and that it must be initialized when an instance is cr) 147.65 651.62 T
(eated with the) 406.02 651.62 T
(keywor) 99.65 637.62 T
(d) 136.48 637.62 T
4 10 Q
(direction:) 145.95 637.62 T
1 11 Q
(. The constant) 205.95 637.62 T
4 10 Q
(<latitude-direction>) 276.39 637.62 T
1 11 Q
( is a type speci\336ca-) 396.39 637.62 T
(tion that permits only the symbol) 99.65 623.62 T
4 10 Q
(#"north") 264.57 623.62 T
1 11 Q
( or the symbol) 312.57 623.62 T
4 10 Q
(#"south") 384.96 623.62 T
1 11 Q
(. The class) 432.96 623.62 T
4 10 Q
(<latitude>) 99.65 609.62 T
1 11 Q
( speci\336es that, when an instance of) 159.65 609.62 T
4 10 Q
(<latitude>) 330.67 609.62 T
1 11 Q
( is made, the initial) 390.67 609.62 T
(value must be of the) 99.65 595.62 T
4 10 Q
(<latitude-direction>) 201.09 595.62 T
1 11 Q
( type. W) 321.09 595.62 T
(e handled the longitude) 360.91 595.62 T
(case similarly) 99.65 581.62 T
(.) 164.64 581.62 T
(The use of) 126.65 567.62 T
4 10 Q
(type-union) 179.55 567.62 T
1 11 Q
( and) 239.55 567.62 T
4 10 Q
(singleton) 263.67 567.62 T
1 11 Q
( to cr) 317.67 567.62 T
(eate enumeration types in this) 341.79 567.62 T
(fashion is common enough that the function) 99.65 553.62 T
4 10 Q
(one-of) 317.26 553.62 T
1 11 Q
( is usually available in a util-) 353.26 553.62 T
(ity library as a shorthand:) 99.65 539.62 T
4 9 Q
(define constant one-of) 99.65 518.95 T
(= method \050#rest objects\051) 110.45 507.95 T
(apply\050type-union, map\050singleton, objects\051\051) 126.65 496.95 T
(end method;) 121.25 485.95 T
1 11 Q
(W) 99.65 465.62 T
(ith this abbr) 110.04 465.62 T
(eviation, the dir) 168.4 465.62 T
(ection types can be written mor) 245.35 465.62 T
(e compactly:) 398.27 465.62 T
4 9 Q
(define constant <latitude-direction> = one-of\050#"north", #"south"\051;) 99.65 444.95 T
(define constant <longitude-direction> = one-of\050#"east", #"west"\051;) 99.65 425.95 T
1 11 Q
(Some Dylan compilers will r) 99.65 405.62 T
(ecognize the idiomatic use of) 237.96 405.62 T
4 10 Q
(type-union) 381.86 405.62 T
1 11 Q
( and) 441.86 405.62 T
4 10 Q
(singleton) 99.65 391.62 T
1 11 Q
( to r) 153.65 391.62 T
(epr) 172.89 391.62 T
(esent such enumerations mor) 188.91 391.62 T
(e compactly) 331.79 391.62 T
(. For instance, a com-) 389.09 391.62 T
(piler could r) 99.65 377.62 T
(epr) 159.37 377.62 T
(esent the dir) 175.39 377.62 T
(ection slot of a latitude or longitude as a single bit,) 235.41 377.62 T
-0.2 (using the getter and setter functions to translate back and forth to the appr) 99.65 363.62 P
-0.2 (opriate) 458.58 363.62 P
(symbol.) 99.65 349.62 T
3 15 Q
(19.6  Direct methods) 99.65 309.95 T
1 11 Q
(The de\336nition of the) 99.65 289.62 T
4 10 Q
(one-of) 201.43 289.62 T
1 11 Q
( constant is a method called a) 237.43 289.62 T
2 F
(direct method) 383.05 289.62 T
1 F
(or) 455.76 289.62 T
2 F
(bare) 468.86 289.62 T
-0.1 (method) 99.65 275.62 P
1 F
-0.1 (. It is the equivalent of a function in other languages. A bar) 138.15 275.62 P
-0.1 (e method does) 422.09 275.62 P
(not cr) 99.65 261.62 T
(eate an implicit generic function, and invoking a bar) 127.42 261.62 T
(e method does not use) 381.07 261.62 T
(method-dispatch pr) 99.65 247.62 T
(ocedur) 196.09 247.62 T
(e, but rather calls the method dir) 229.74 247.62 T
(ectly) 388.49 247.62 T
(. W) 410.32 247.62 T
(e choose to) 425.81 247.62 T
(use a bar) 99.65 233.62 T
(e method her) 142.94 233.62 T
(e because we ar) 207.23 233.62 T
(e sur) 283.14 233.62 T
(e that) 306.6 233.62 T
4 10 Q
(one-of) 336.45 233.62 T
1 11 Q
( will never need method) 372.45 233.62 T
(dispatch: it performs the same operation independent of the types of its ar) 99.65 219.62 T
(gu-) 459.49 219.62 T
(ments. The bar) 99.65 205.62 T
(e method serves to document this intent. If ther) 171.68 205.62 T
(e wer) 401.7 205.62 T
(e some possi-) 428.31 205.62 T
(bility of additional methods, it would be mor) 99.65 191.62 T
(e perspicuous to use a generic) 318.85 191.62 T
(function, even if ther) 99.65 177.62 T
(e is initially only one method. Most Dylan compilers will) 200.85 177.62 T
(generate equally ef) 99.65 163.62 T
(\336cient code for a bar) 191.72 163.62 T
(e method and for a generic function with) 290.84 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "319" 333
%%Page: "320" 334
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(320) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.32 (only one method, so the choice of which to use should be based on whether or not) 99.65 665.62 P
-0.2 (it would ever make sense to have additional methods that discriminate on param-) 99.65 651.62 P
(eter types.) 99.65 637.62 T
3 15 Q
(19.7  T) 99.65 597.95 T
(ail calls) 136.97 597.95 T
1 11 Q
(The most important constr) 99.65 577.62 T
(uct in the Dylan execution model is the function call,) 229.03 577.62 T
(because function calls ar) 99.65 563.62 T
(e the most common operation in the language. Remem-) 218.07 563.62 T
(ber that all slot accesses and assignments, arithmetic operations, and collection) 99.65 549.62 T
(accesses obey the execution model of function calls, even if the syntax for them) 99.65 535.62 T
(does not look like that of function calls.) 99.65 521.62 T
(W) 126.65 507.62 T
(e have alr) 136.64 507.62 T
(eady discussed how Dylan compilers can optimize away r) 183.64 507.62 T
(un-) 466.3 507.62 T
(time checking of ar) 99.65 493.62 T
(gument types and the over) 192.26 493.62 T
(head of method dispatch, and that) 322.74 493.62 T
(good compilers will generate equally ef) 99.65 479.62 T
(\336cient code for calls to single-method) 291.49 479.62 T
(generic functions or dir) 99.65 465.62 T
(ect methods.) 213.24 465.62 T
(Ther) 126.65 451.62 T
(e is one additional optimization that good Dylan compilers will make,) 149.21 451.62 T
(which is enabled by a particular style of pr) 99.65 437.62 T
(ogramming. If the \336nal operation in a) 306.79 437.62 T
-0.41 (method is a call to another function \050called a) 99.65 423.62 P
2 F
-0.41 (tail call) 314.4 423.62 P
1 F
-0.41 (\051 then the calling function can) 350.94 423.62 P
-0.09 (jump dir) 99.65 409.62 P
-0.09 (ectly to the called function, rather than using a call-and-r) 141.91 409.62 P
-0.09 (eturn sequence.) 416.79 409.62 P
(Thus, the r) 99.65 395.62 T
(eturn fr) 151.74 395.62 T
(om the called function r) 188.54 395.62 T
(eturns to its caller) 304.21 395.62 T
(\325s caller) 391.62 395.62 T
(.) 427.68 395.62 T
(As an example, consider this) 126.65 381.62 T
4 10 Q
(decode-total-seconds) 268.86 381.62 T
1 11 Q
( method:) 388.86 381.62 T
4 9 Q
(define method decode-total-seconds) 99.65 360.95 T
(\050sixty-unit :: <sixty-unit>\051) 121.25 349.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 105.05 338.95 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 110.45 327.95 T
(end method decode-total-seconds;) 99.65 316.95 T
1 11 Q
(The inner call to) 99.65 296.62 T
4 10 Q
(decode-total-seconds) 181.06 296.62 T
1 11 Q
( can be a dir) 301.06 296.62 T
(ect jump rather than a func-) 359.77 296.62 T
(tion call, because the compiler can infer which method should be called and that) 99.65 282.62 T
(the r) 99.65 268.62 T
(eturn values alr) 121.8 268.62 T
(eady have the corr) 197.87 268.62 T
(ect constraints.) 287.75 268.62 T
3 15 Q
(19.8  T) 99.65 228.95 T
(yped g) 137.22 228.95 T
(eneric functions) 176.99 228.95 T
1 11 Q
(In addition to specifying the types of the parameters and r) 99.65 208.62 T
(eturn values of meth-) 382.32 208.62 T
(ods, you can specify the types of the parameters and r) 99.65 194.62 T
(eturn values of a generic) 361.24 194.62 T
(function. Y) 99.65 180.62 T
(ou usually r) 152.25 180.62 T
(estrict the parameter types of a generic function to estab-) 210.48 180.62 T
(lish the) 99.65 166.62 T
2 F
(contract) 137.87 166.62 T
1 F
( of the generic function \321 that is, to de\336ne the domain of ar) 177.58 166.62 T
(gu-) 467.23 166.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "320" 334
%%Page: "321" 335
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.8 Typed generic functions) 396.7 702.62 T
2 F
(321) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(ments that the generic function is intended to handle, and the domain of the) 99.65 665.62 T
(values that it will r) 99.65 651.62 T
(eturn.) 190.91 651.62 T
(If we de\336ne a method without also de\336ning a generic function, Dylan cr) 126.65 637.62 T
(e-) 476.98 637.62 T
(ates an implicit generic function with the most general types for each parameter) 99.65 623.62 T
(and r) 99.65 609.62 T
(eturn value that ar) 125.17 609.62 T
(e compatible with the method. For example, assume that) 215.19 609.62 T
(we de\336ned a method for) 99.65 595.62 T
4 10 Q
(next-landing-step) 222.09 595.62 T
1 11 Q
(, and did not explicitly cr) 324.09 595.62 T
(eate a) 445.83 595.62 T
(generic function for it. The method is as follows:) 99.65 581.62 T
4 9 Q
(define method next-landing-step) 99.65 560.95 T
(\050storage :: <sky>, aircraft :: <aircraft>\051) 121.25 549.95 T
(=> \050next-class :: false-or\050<class>\051, duration :: false-or\050<time-offset>\051\051) 105.05 538.95 T
(...) 110.45 527.95 T
(end if;) 110.45 516.95 T
(end method next-landing-step;) 99.65 505.95 T
1 11 Q
(When we de\336ne a method without also de\336ning a generic function, the compiler) 99.65 485.62 T
(will generate an implicit generic function for us, which, in this case, will be as) 99.65 471.62 T
(though we had de\336ned the generic function like this:) 99.65 457.62 T
6 9 Q
(define generic next-landing-step \050o1 :: <object>, o2 :: <object>\051) 99.65 436.95 T
(=> \050#rest r :: <object>\051;) 105.05 425.95 T
1 11 Q
(In Section 17.4, page 267, wher) 99.65 405.62 T
(e we did de\336ne a generic function, we used a sim-) 248.37 405.62 T
(ple de\336nition, just documenting the number of ar) 99.65 391.62 T
(guments, and giving them mne-) 339.58 391.62 T
(monic names:) 99.65 377.62 T
4 9 Q
(define generic next-landing-step \050container, vehicle\051;) 99.65 356.95 T
1 11 Q
(Because we did not specify types of the ar) 99.65 336.62 T
(guments or r) 302.89 336.62 T
(eturn values, they default) 365.28 336.62 T
(to) 99.65 322.62 T
4 10 Q
(<object>) 111.99 322.62 T
1 11 Q
(, just as they did in the pr) 159.99 322.62 T
(eceding implicit generic function.) 283.24 322.62 T
(Although the generic function that we wr) 126.65 308.62 T
(ote does pr) 328.41 308.62 T
(event us fr) 382.19 308.62 T
(om de\336ning) 433.54 308.62 T
(methods with the wr) 99.65 294.62 T
(ong number of ar) 201.2 294.62 T
(guments, it does not constrain the types of) 285.73 294.62 T
(those ar) 99.65 280.62 T
(guments or the format or type of r) 137.97 280.62 T
(eturn values in any way) 303.77 280.62 T
(. A sophisti-) 419.68 280.62 T
(cated compiler may be able to make infer) 99.65 266.62 T
(ences based on the methods that we) 299.69 266.62 T
(de\336ne, but we could both aid the compiler and mor) 99.65 252.62 T
(e clearly document the pr) 350.13 252.62 T
(oto-) 474.14 252.62 T
(col of) 99.65 238.62 T
4 10 Q
(next-landing-step) 128.91 238.62 T
1 11 Q
( by specifying the types of the parameters and r) 230.91 238.62 T
(eturn) 461.98 238.62 T
(values in the de\336nition of the generic function:) 99.65 224.62 T
4 9 Q
(define generic next-landing-step) 99.65 203.95 T
(\050storage :: <vehicle-storage>, aircraft :: <aircraft>\051) 121.25 192.95 T
(=> \050next-storage :: <vehicle-storage>, elapsed-time :: <time-offset>\051;) 105.05 181.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "321" 335
%%Page: "322" 336
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(322) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.01 (Now) 99.65 665.62 P
-0.01 (, the compiler can help us. If we de\336ne a method whose ar) 122.96 665.62 P
-0.01 (guments ar) 405.89 665.62 P
-0.01 (e not a) 460.66 665.62 P
(subclass of) 99.65 651.62 T
4 10 Q
(<vehicle-storage>) 155.11 651.62 T
1 11 Q
( and a subclass of) 257.11 651.62 T
4 10 Q
(<aircraft>) 344.95 651.62 T
1 11 Q
( \050for example, if) 404.95 651.62 T
(we pr) 99.65 637.62 T
(ovided the ar) 127.6 637.62 T
(guments in the wr) 192.14 637.62 T
(ong or) 280.95 637.62 T
(der\051, the compiler will r) 312.38 637.62 T
(eport the) 427.54 637.62 T
(err) 99.65 623.62 T
(or) 113.41 623.62 T
(. Furthermor) 122.95 623.62 T
(e, the compiler can use the value declaration to detect err) 185.01 623.62 T
(ors in) 461.72 623.62 T
(the r) 99.65 609.62 T
(eturn values \050for example, if we r) 121.8 609.62 T
(eturned only a single value or r) 283.14 609.62 T
(eturned a) 435.26 609.62 T
(value of the wr) 99.65 595.62 T
(ong type\051. Finally) 172.96 595.62 T
(, the compiler can be asked to issue a warning if) 257.5 595.62 T
(ther) 99.65 581.62 T
(e is a subclass of the ar) 119.05 581.62 T
(gument types for which no method is applicable.) 229.05 581.62 T
-0.18 (In addition to establishing a contract, specifying the types of the parameters) 126.65 567.62 P
(and r) 99.65 553.62 T
(eturn values of generic functions can allow the compiler to make additional) 125.17 553.62 T
(infer) 99.65 539.62 T
(ences, as described in Section 19.3 with r) 122.33 539.62 T
(egar) 318.62 539.62 T
(d to) 339.66 539.62 T
4 10 Q
(truncate/) 361.47 539.62 T
1 11 Q
(. In the absence) 415.47 539.62 T
-0.08 (of other information, the compiler is limited in the optimizations that it can make) 99.65 525.62 P
-0.01 (based solely on the parameter types in the generic function, so it is generally best) 99.65 511.62 P
(not to r) 99.65 497.62 T
(estrict arti\336cially the types of a generic function, but rather to use the) 134.88 497.62 T
(r) 99.65 483.62 T
(estricted types to document the generic function\325s pr) 103.79 483.62 T
(otocol.) 359.62 483.62 T
3 15 Q
(19.9  Open g) 99.65 443.95 T
(eneric functions) 172.92 443.95 T
1 11 Q
(By default, generic functions ar) 99.65 423.62 T
(e) 251.38 423.62 T
2 F
(sealed) 259.4 423.62 T
1 F
(. When you use) 291.17 423.62 T
4 10 Q
(define generic) 369.31 423.62 T
1 11 Q
(, that is) 453.31 423.62 T
-0.28 (the same as using) 99.65 409.62 P
4 10 Q
-0.61 (define sealed generic) 187.12 409.62 P
1 11 Q
-0.28 (. No other library can add methods to) 311.9 409.62 P
(a sealed generic function \321 not even on new classes that they may intr) 99.65 395.62 T
(oduce.) 443.14 395.62 T
(Methods cannot be added to, or r) 99.65 381.62 T
(emoved fr) 261.11 381.62 T
(om, the generic function at r) 310.86 381.62 T
(un time.) 447.94 381.62 T
-0.38 (The only methods on a sealed generic function ar) 99.65 367.62 P
-0.38 (e the methods that ar) 335.55 367.62 P
-0.38 (e de\336ned in) 436.63 367.62 P
(the library wher) 99.65 353.62 T
(e the generic function itself is de\336ned. Because of the r) 178.19 353.62 T
(estrictions) 441.73 353.62 T
(on a sealed generic function, the compiler) 99.65 339.62 T
(, using type-infer) 301.37 339.62 T
(ence information, can) 384.56 339.62 T
(usually narr) 99.65 325.62 T
(ow the choice of applicable methods for any particular call to the) 158.74 325.62 T
(generic function, eliminating most or all of the over) 99.65 311.62 T
(head of r) 349.24 311.62 T
(un-time dispatching) 392.56 311.62 T
(that would normally be expected of a dynamic language.) 99.65 297.62 T
(W) 126.65 283.62 T
(e saw in Chapter 13,) 136.64 283.62 T
0 F
(Libraries and Modules) 240.61 283.62 T
1 F
(, that we must de\336ne a generic) 340.43 283.62 T
(function that is part of a shar) 99.65 269.62 T
(ed pr) 239.79 269.62 T
(otocol using) 265.29 269.62 T
4 10 Q
(define open generic) 327.49 269.62 T
1 11 Q
(, so that) 441.49 269.62 T
(libraries sharing the pr) 99.65 255.62 T
(otocol can implement the pr) 210.35 255.62 T
(otocol for the classes that they) 346.81 255.62 T
(de\336ne, by adding methods. If we do not de\336ne the generic function to be open,) 99.65 241.62 T
-0.25 (other libraries ar) 99.65 227.62 P
-0.25 (e pr) 179.71 227.62 P
-0.25 (ohibited fr) 198.23 227.62 P
-0.25 (om adding methods to the generic function, which) 249.01 227.62 P
-0.33 (would make it useless as a pr) 99.65 213.62 P
-0.33 (otocol. Unfortunately) 240.07 213.62 P
-0.33 (, a generic function that is open) 342.97 213.62 P
-0.26 (cannot be optimized. Even when the compiler may be able to infer the exact types) 99.65 199.62 P
(of the ar) 99.65 185.62 T
(guments to the generic function in a particular call, because an open) 139.72 185.62 T
(generic function may have methods added or r) 99.65 171.62 T
(emoved, even at r) 327.67 171.62 T
(un time, the) 414.36 171.62 T
(compiler must pr) 99.65 157.62 T
(oduce code to handle all these possibilities.) 183.73 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "322" 336
%%Page: "323" 337
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.10 Open classes) 435.15 702.62 T
2 F
(323) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Because open generic functions cannot be optimized, you should use them) 126.65 665.62 T
(only when necessary) 99.65 651.62 T
(. Y) 200.01 651.62 T
(ou need to balance the division of your pr) 211.84 651.62 T
(ogram into) 414.96 651.62 T
(libraries against the need to export and open mor) 99.65 637.62 T
(e generic functions if the pr) 339.21 637.62 T
(o-) 472.03 637.62 T
(gram is too \336nely divided. This balance is illustrated by the considerations we) 99.65 623.62 T
-0.32 (made in designing a pr) 99.65 609.62 P
-0.32 (otocol in Section 13.9, page 214. When we chose to split the) 210.51 609.62 P
4 10 Q
(time) 99.65 595.62 T
1 11 Q
( and) 123.65 595.62 T
4 10 Q
(angle) 147.77 595.62 T
1 11 Q
( libraries, we wer) 177.77 595.62 T
(e for) 261.61 595.62 T
(ced to cr) 283.45 595.62 T
(eate the) 324.45 595.62 T
4 10 Q
(say) 364.83 595.62 T
1 11 Q
( pr) 382.83 595.62 T
(otocol library and) 396.33 595.62 T
(open the generic function) 99.65 581.62 T
4 10 Q
(say) 226.46 581.62 T
1 11 Q
(. In Section 19.1) 243.24 581.62 T
(1, we show how to r) 318.11 581.62 T
(egain certain) 416.12 581.62 T
(optimizations when you decide that opening a generic function is r) 99.65 567.62 T
(equir) 425.25 567.62 T
(ed.) 450.66 567.62 T
-0.22 (Note that generic functions that ar) 126.65 553.62 P
-0.22 (e de\336ned implicitly in a library \321 such as) 292.02 553.62 P
(those that ar) 99.65 539.62 T
(e de\336ned when you de\336ne only a single method, or those that ar) 159.8 539.62 T
(e) 472.94 539.62 T
(de\336ned for slot accessors \321 ar) 99.65 525.62 T
(e sealed by default. If you expect other libraries to) 247.43 525.62 T
(add methods to one of these implicit generic functions, you must de\336ne the) 99.65 511.62 T
(generic function explicitly to be open using) 99.65 497.62 T
4 10 Q
(define open generic) 312.36 497.62 T
1 11 Q
(.) 426.36 497.62 T
3 15 Q
(19.10  Open c) 99.65 457.95 T
(lasses) 178.74 457.95 T
1 11 Q
(By default, classes ar) 99.65 437.62 T
(e) 200.55 437.62 T
2 F
(sealed) 208.57 437.62 T
1 F
(. When you use) 240.34 437.62 T
4 10 Q
(define class) 318.48 437.62 T
1 11 Q
(, that is the same as) 390.48 437.62 T
(using) 99.65 423.62 T
4 10 Q
(define sealed class) 129.41 423.62 T
1 11 Q
(. Other libraries cannot dir) 243.41 423.62 T
(ectly subclass a sealed) 372.07 423.62 T
(class \321 they cannot de\336ne new classes that have your sealed class as a dir) 99.65 409.62 T
(ect) 459.05 409.62 T
(super) 99.65 395.62 T
(class. The only dir) 126.97 395.62 T
(ect subclasses of the class ar) 215.09 395.62 T
(e those subclasses that ar) 350.29 395.62 T
(e) 471.44 395.62 T
(de\336ned in the library wher) 99.65 381.62 T
(e the class itself is de\336ned. Extensive optimization) 230.33 381.62 T
-0.48 (opportunities occur when the methods of a sealed generic function ar) 99.65 367.62 P
-0.48 (e specialized) 431.81 367.62 P
-0.19 (on sealed classes. In this case, the compiler can usually choose the corr) 99.65 353.62 P
-0.19 (ect method) 439.1 353.62 P
-0.14 (of the generic function to call at compile time, eliminating any r) 99.65 339.62 P
-0.14 (un-time over) 406.44 339.62 P
-0.14 (head) 469.15 339.62 P
(for using a generic function.) 99.65 325.62 T
-0.34 (W) 126.65 311.62 P
-0.34 (e saw in Chapter 13,) 136.64 311.62 P
0 F
-0.34 (Libraries and Modules) 238.56 311.62 P
1 F
-0.34 (, that we must de\336ne a class that) 337.71 311.62 P
(is a shar) 99.65 297.62 T
(ed substrate, such as) 139.23 297.62 T
4 10 Q
(<sixty-unit>) 242.04 297.62 T
1 11 Q
(, using) 314.04 297.62 T
4 10 Q
(define open class) 349.31 297.62 T
1 11 Q
(, if the) 451.31 297.62 T
(libraries sharing the substrate ar) 99.65 283.62 T
(e expected to subclass the class. If we did not) 256.32 283.62 T
-0.23 (de\336ne the class to be open, other libraries would be pr) 99.65 269.62 P
-0.23 (evented fr) 360.53 269.62 P
-0.23 (om subclassing it) 409.58 269.62 P
(\321 which might be r) 99.65 255.62 T
(easonable if the substrate wer) 196.23 255.62 T
(e not intended to be extended) 340.16 255.62 T
(by subclassing.) 99.65 241.62 T
(Unlike an open generic function, an open class does not pr) 126.65 227.62 T
(event all optimi-) 410.61 227.62 T
(zation. If a generic function has a method applicable to an open class, but the) 99.65 213.62 T
(generic function is sealed, then the compiler might still be able to optimize) 99.65 199.62 T
(method dispatch if that compiler can infer the types of the ar) 99.65 185.62 T
(guments to the) 394.07 185.62 T
-0.02 (generic function at a particular call. Sometimes, the dispatch code will be slightly) 99.65 171.62 P
-0.17 (less optimal, because it must allow for arbitrary subclasses, rather than a \336xed set) 99.65 157.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "323" 337
%%Page: "324" 338
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(324) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(of subclasses; in general, however) 99.65 665.62 T
(, opening a class is less costly than is opening a) 263.61 665.62 T
(generic function.) 99.65 651.62 T
-0.22 (Note that, although you cannot dir) 126.65 637.62 P
-0.22 (ectly subclass a sealed class fr) 294.55 637.62 P
-0.22 (om another) 437.37 637.62 P
(library) 99.65 623.62 T
(, you can subclass a sealed class in the library that de\336nes the sealed class.) 131.22 623.62 T
(It may not be obvious, but a cor) 99.65 609.62 T
(ollary of this r) 253.26 609.62 T
(ule of sealing is that you can de\336ne) 321.66 609.62 T
(an) 99.65 595.62 T
2 F
(open subclass) 114.3 595.62 T
1 F
( of a sealed class in the library that de\336nes the sealed class.) 184.25 595.62 T
-0.42 (Using a sealed class with an open subclass is one simple way to get both \337exibility) 99.65 581.62 P
(and ef) 99.65 567.62 T
(\336ciency \321 the classes in the sealed branch will be optimized by the com-) 129.76 567.62 T
(piler) 99.65 553.62 T
(, while the open subclass can be exported for other libraries to build on and) 121.46 553.62 T
(extend.) 99.65 539.62 T
3 15 Q
(19.11  Sealed domains) 99.65 499.95 T
1 11 Q
(When you de\336ne a pr) 99.65 479.62 T
(otocol that is meant to be extended by many libraries, both) 205.05 479.62 T
(the base classes and the generic functions that make up the pr) 99.65 465.62 T
(otocol must be) 399.26 465.62 T
(open. This simple exigency might make it seem that ther) 99.65 451.62 T
(e is no hope of optimiz-) 373.83 451.62 T
(ing such a pr) 99.65 437.62 T
(otocol \321 however) 162.46 437.62 T
(, ther) 250.51 437.62 T
(e is hope. Y) 275.42 437.62 T
(ou use the) 330.16 437.62 T
4 10 Q
(define sealed) 382.88 437.62 T
-0.86 (domain) 99.65 423.62 P
1 11 Q
-0.39 ( form to seal selectively subsets or) 135.65 423.62 P
2 F
-0.39 (branches) 300.89 423.62 P
1 F
-0.39 ( of the pr) 346.1 423.62 P
-0.39 (otocol, permitting the) 388.85 423.62 P
(compiler to make all the optimizations that would be possible if the classes and) 99.65 409.62 T
(generic functions wer) 99.65 395.62 T
(e sealed, but only for the particular subset or branch in) 204.66 395.62 T
(question.) 99.65 381.62 T
-0.03 (As an example, consider the) 99.65 257.62 P
4 10 Q
-0.06 (say) 239.13 257.62 P
1 11 Q
-0.03 ( pr) 257.13 257.62 P
-0.03 (otocol as used in the) 270.61 257.62 P
4 10 Q
-0.06 (time) 372.23 257.62 P
1 11 Q
-0.03 ( library) 396.23 257.62 P
-0.03 (. Because the) 430.53 257.62 P
4 10 Q
(say) 99.65 243.62 T
1 11 Q
( generic function is de\336ned to be open, even if the compiler can infer that the) 117.65 243.62 T
-0.03 (ar) 99.65 229.62 P
-0.03 (gument to) 109.29 229.62 P
4 10 Q
-0.07 (say) 162.04 229.62 P
1 11 Q
-0.03 ( is a) 180.04 229.62 P
4 10 Q
-0.07 (<time>) 201.56 229.62 P
1 11 Q
-0.03 ( or) 237.56 229.62 P
4 10 Q
-0.07 (<time-offset>) 253.35 229.62 P
1 11 Q
-0.03 (, it must insert code to choose the) 331.35 229.62 P
(appr) 99.65 215.62 T
(opriate method to call at r) 122.52 215.62 T
(un time on the of) 248.2 215.62 T
(f chance that some other library) 331.14 215.62 T
(has added or r) 99.65 201.62 T
(emoved methods for) 169.89 201.62 T
4 10 Q
(say) 273.71 201.62 T
1 11 Q
(. The solution is to add the following de\336-) 290.49 201.62 T
(nition to the) 99.65 187.62 T
4 10 Q
(time) 161.54 187.62 T
1 11 Q
( library:) 185.54 187.62 T
5 9 Q
(// Declare the say generic function sealed, for all time classes) 99.65 166.95 T
4 F
(define sealed domain say \050<time>\051;) 99.65 155.95 T
2 11 Q
(Advanced topic:) 132.65 347.62 T
1 F
( Sealed domains ar) 213.92 347.62 T
(e one of the most dif) 305.76 347.62 T
(\336cult con-) 404.73 347.62 T
(cepts of the Dylan language to understand fully) 132.65 333.62 T
(. It is r) 363.74 333.62 T
(easonable to) 394.04 333.62 T
(defer car) 132.65 319.62 T
(eful r) 175.2 319.62 T
(eading of this section until you ar) 200.86 319.62 T
(e faced with a situa-) 363.53 319.62 T
(tion similar to the example \321 an imported open class and generic) 132.65 305.62 T
(function that will be specialized by your library) 132.65 291.62 T
(.) 362.77 291.62 T
126.65 360.83 126.65 284.08 2 L
V
0.25 H
0 Z
N
477.65 360.83 477.65 284.08 2 L
V
N
126.52 360.95 477.77 360.95 2 L
V
N
126.52 283.95 477.77 283.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "324" 338
%%Page: "325" 339
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.11 Sealed domains) 425.3 702.62 T
2 F
(325) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.22 (This statement is essentially a guarantee to the compiler that the only methods on) 99.65 665.62 P
4 10 Q
-0.29 (say) 99.65 651.62 P
1 11 Q
-0.13 ( that ar) 117.65 651.62 P
-0.13 (e applicable to) 151.6 651.62 P
4 10 Q
-0.29 (<time>) 224.38 651.62 P
1 11 Q
-0.13 ( objects \050and also to) 260.38 651.62 P
4 10 Q
-0.29 (<time-of-day>) 357.79 651.62 P
1 11 Q
-0.13 ( and) 435.79 651.62 P
4 10 Q
-0.29 (<time-) 459.65 651.62 P
(offset>) 99.65 637.62 T
1 11 Q
( objects, because) 141.65 637.62 T
4 10 Q
(<time-of-day>) 224.02 637.62 T
1 11 Q
( and) 302.02 637.62 T
4 10 Q
(<time-offset>) 326.14 637.62 T
1 11 Q
( ar) 404.14 637.62 T
(e subclasses of) 416.54 637.62 T
4 10 Q
-0.14 (<time>) 99.65 623.62 P
1 11 Q
-0.06 (\051 ar) 135.65 623.62 P
-0.06 (e those that ar) 151.65 623.62 P
-0.06 (e de\336ned explicitly in the) 219.62 623.62 P
4 10 Q
-0.14 (time) 345.17 623.62 P
1 11 Q
-0.06 ( library \050and in any librar-) 369.17 623.62 P
(ies fr) 99.65 609.62 T
(om which that one imports\051. Thus, when the compiler can pr) 123.34 609.62 T
(ove that the) 418.38 609.62 T
(ar) 99.65 595.62 T
(gument to) 109.29 595.62 T
4 10 Q
(say) 162.11 595.62 T
1 11 Q
( is a) 180.11 595.62 T
4 10 Q
(<time-offset>) 201.72 595.62 T
1 11 Q
(, it can call the corr) 279.72 595.62 T
(ect method dir) 371.22 595.62 T
(ectly) 442.22 595.62 T
(, with-) 464.06 595.62 T
(out any r) 99.65 581.62 T
(un-time dispatch over) 143.65 581.62 T
(head.) 250.82 581.62 T
(Another way to get the same ef) 126.65 567.62 T
(fect as a sealed domain, which is also self-) 278.21 567.62 T
(documenting, is to use) 99.65 553.62 T
4 10 Q
(define sealed method) 212.35 553.62 T
1 11 Q
( when de\336ning individual meth-) 332.35 553.62 T
-0.32 (ods on the pr) 99.65 539.62 P
-0.32 (otocol. So, for instance, in the case of the) 162.75 539.62 P
4 10 Q
-0.7 (time) 358.34 539.62 P
1 11 Q
-0.32 ( library) 382.34 539.62 P
-0.32 (, we might have) 416.34 539.62 P
(de\336ned the two methods on) 99.65 525.62 T
4 10 Q
(say) 239.23 525.62 T
1 11 Q
( as follows:) 257.23 525.62 T
4 9 Q
(define sealed method say \050time :: <time>\051) 99.65 504.95 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 110.45 493.95 T
(format-out\050"%d:%s%d", hours, if \050minutes < 10\051 "0" else " " end, minutes\051;) 110.45 482.95 T
(end method say;) 99.65 471.95 T
(define sealed method say \050time :: <time-offset>\051 => \050\051) 99.65 452.95 T
(format-out\050"%s ", if \050time.past?\051 "minus" else "plus" end\051;) 110.45 441.95 T
(next-method\050\051;) 110.45 430.95 T
(end method say;) 99.65 419.95 T
1 11 Q
-0.26 (De\336ning a sealed method is the same as de\336ning the generic function to be sealed) 99.65 399.62 P
(over the domain of the method\325s specializers. In ef) 99.65 385.62 T
(fect, this technique says that) 344.53 385.62 T
(you do not intend anyone to add mor) 99.65 371.62 T
(e speci\336c methods in that domain, or to cr) 282.05 371.62 T
(e-) 485.79 371.62 T
(ate classes that would change the applicability of the sealed methods.) 99.65 357.62 T
-0.33 (W) 126.65 343.62 P
-0.33 (ith either the) 137.04 343.62 P
4 10 Q
-0.72 (define sealed domain) 200.82 343.62 P
1 11 Q
-0.33 ( form or the sealed methods, the use) 319.39 343.62 P
(of) 99.65 329.62 T
4 10 Q
(say) 112.07 329.62 T
1 11 Q
( on) 130.07 329.62 T
4 10 Q
(<time>) 147.98 329.62 T
1 11 Q
( objects will be as ef) 183.98 329.62 T
(\336cient as it would be wer) 279.82 329.62 T
(e) 402.19 329.62 T
4 10 Q
(say) 410.21 329.62 T
1 11 Q
( not an open) 428.21 329.62 T
(generic function after all. At the same time, other libraries that cr) 99.65 315.62 T
(eate new classes) 413.76 315.62 T
(can still extend the) 99.65 301.62 T
4 10 Q
(say) 193.47 301.62 T
1 11 Q
( pr) 211.47 301.62 T
(otocol to cover those classes.) 224.98 301.62 T
(Sealed domains impose r) 126.65 287.62 T
(estrictions on the ability of other libraries to cr) 248.45 287.62 T
(eate) 472.52 287.62 T
(new methods, to r) 99.65 273.62 T
(emove new methods, and to cr) 187.59 273.62 T
(eate new classes:) 337.02 273.62 T
-0.47 (Y) 126.65 259.62 P
-0.47 (ou cannot add methods to an open generic function imported fr) 132.97 259.62 P
-0.47 (om another) 437.85 259.62 P
(library that would fall into the sealed domain of) 99.65 245.62 T
0 F
(any) 335.85 245.62 T
1 F
( other library) 352.35 245.62 T
(. Y) 415.03 245.62 T
(ou can avoid) 426.85 245.62 T
-0.22 (this r) 99.65 231.62 P
-0.22 (estriction by ensuring that at least one of the specializers of your method is a) 124.18 231.62 P
(subtype of a type de\336ned in your library) 99.65 217.62 T
(.) 295.92 217.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "325" 339
%%Page: "326" 340
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(326) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.22 (When you seal a domain of a generic function imported fr) 99.65 345.62 P
-0.22 (om another library) 379.2 345.62 P
-0.22 (, you) 469.07 345.62 P
-0.14 (will not cause con\337icts with other libraries, as long as both of the following condi-) 99.65 331.62 P
(tions hold:) 99.65 317.62 T
2 F
(1.) 108.65 297.62 T
1 F
-0.08 (At least one of the types in the sealed domain is a subtype of a class de\336ned) 126.65 297.62 P
(in your library) 126.65 283.62 T
2 F
(2.) 108.65 263.62 T
1 F
(No additional subtypes can be de\336ned for any of the types in the sealed) 126.65 263.62 T
(domain) 126.65 249.62 T
(In the case of a type that is a class, the \336rst condition means that you must have) 99.65 229.62 T
(de\336ned either the class or one of its super) 99.65 215.62 T
(classes in your library) 301.4 215.62 T
(. The second con-) 406.77 215.62 T
-0.08 (dition means that the classes in the domain must not have any open subclasses \050a) 99.65 201.62 P
(degenerate case of which is a leaf class \321 a class with no subclasses at all\051.) 99.65 187.62 T
2 F
(Comparison with C++:) 132.65 645.62 T
1 F
( A C++ compiler could optimize out the dis-) 247.1 645.62 T
(patching of a virtual function by analyzing the entir) 132.65 631.62 T
(e scope of the) 383.98 631.62 T
(ar) 132.65 617.62 T
(gument on which the virtual function dispatches, and pr) 142.29 617.62 T
(oving that) 416.83 617.62 T
(ar) 132.65 603.62 T
(gument\325s exact class. Unfortunately) 142.29 603.62 T
(, that scope is often the entir) 314.61 603.62 T
(e) 451.02 603.62 T
-0.43 (pr) 132.65 589.62 P
-0.43 (ogram, so this optimization often can be performed only by a linker) 143.41 589.62 P
-0.43 (.) 466.58 589.62 P
(Even a linker cannot make this optimization when a library is com-) 132.65 575.62 T
(piled, because the classes of a library can be subclassed by a client.) 132.65 561.62 T
(The complexity is compounded for dynamic-link libraries, wher) 132.65 547.62 T
(e) 444.09 547.62 T
(ther) 132.65 533.62 T
(e may be multiple clients at once. As a r) 152.05 533.62 T
(esult, this optimization is) 344.64 533.62 T
(rar) 132.65 519.62 T
(ely achieved in C++.) 146.64 519.62 T
-0.35 (In Dylan, sealed classes, sealed generic functions, and sealed) 159.65 505.62 P
(domains explicitly state which generic functions and classes may) 132.65 491.62 T
(be extended, and, mor) 132.65 477.62 T
(e important, which cannot. The library) 241.15 477.62 T
(designer plans in advance exactly what extensibility the library) 132.65 463.62 T
(will have. The Dylan compiler can then optimize dispatching on) 132.65 449.62 T
(sealed generic functions and classes and within sealed domains) 132.65 435.62 T
(with the assurance that no client will violate the assumptions of) 132.65 421.62 T
(the optimization. The sealing r) 132.65 407.62 T
(estrictions against subclassing or) 281.08 407.62 T
-0.37 (changing method applicability ar) 132.65 393.62 P
-0.37 (e automatically enfor) 293.04 393.62 P
-0.37 (ced on each) 395.18 393.62 P
(client of a Dylan library) 132.65 379.62 T
(.) 246.66 379.62 T
126.65 658.83 126.65 372.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 372.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 371.95 477.77 371.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "326" 340
%%Page: "327" 341
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.11 Sealed domains) 425.3 702.62 T
2 F
(327) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(If you need to seal a domain over a class that has open subclasses, you will) 126.65 665.62 T
(need a thor) 99.65 651.62 T
(ough understanding of the sealing constraints detailed in) 154.45 651.62 T
0 F
(The Dylan) 435.16 651.62 T
(Refer) 99.65 637.62 T
(ence Manual) 122.68 637.62 T
1 F
(, but these two simple r) 180.02 637.62 T
(ules should handle many common cases.) 293.7 637.62 T
-0.19 (In our example, we obeyed both r) 126.65 623.62 P
-0.19 (ules of thumb: our methods for) 289.33 623.62 P
4 10 Q
-0.42 (say) 442.65 623.62 P
1 11 Q
-0.19 ( ar) 460.65 623.62 P
-0.19 (e on) 472.85 623.62 P
(classes we de\336ned, and our sealing was over classes that will not be further sub-) 99.65 609.62 T
(classed. The r) 99.65 595.62 T
(ules of thumb not only keep you fr) 165.47 595.62 T
(om violating sealing constraints,) 334.12 595.62 T
(they make for good pr) 99.65 581.62 T
(otocol design: a library that extends a pr) 208.24 581.62 T
(otocol r) 403.51 581.62 T
(eally) 440.1 581.62 T
-0.41 (should extend it only for classes it fully understands, which usually means classes) 99.65 567.62 P
(it cr) 99.65 553.62 T
(eates.) 118.22 553.62 T
(As an example of the r) 126.65 539.62 T
(estriction on subclassing open classes involved in a) 235.83 539.62 T
(sealed domain, if the) 99.65 525.62 T
4 10 Q
(<time>) 203.69 525.62 T
1 11 Q
( class wer) 239.69 525.62 T
(e an open class, we still could not add the) 286.69 525.62 T
(following class in a library that used the) 99.65 511.62 T
4 10 Q
(time) 297.04 511.62 T
1 11 Q
( library:) 321.04 511.62 T
4 9 Q
(define class <place-and-time> \050<position>, <time>\051) 99.65 487.95 T
(end class <place-and-time>;) 99.65 476.95 T
1 11 Q
(As far as the compiler is concerned, it \322knows\323 that the only) 99.65 450.62 T
4 10 Q
(say) 395.03 450.62 T
1 11 Q
( method applica-) 413.03 450.62 T
(ble to a) 99.65 436.62 T
4 10 Q
(<time>) 137.54 436.62 T
1 11 Q
( is the one in the) 173.54 436.62 T
4 10 Q
(time) 255.7 436.62 T
1 11 Q
( library) 279.7 436.62 T
(. \050That is what we have told it with) 314.02 436.62 T
(our) 99.65 422.62 T
4 10 Q
(sealed domain) 119.38 422.62 T
1 11 Q
( de\336nition.\051 It would be valid to pass a) 197.38 422.62 T
4 10 Q
(<place-and-time>) 387.74 422.62 T
1 11 Q
(object as an ar) 99.65 408.62 T
(gument to a function that accepted) 168.01 408.62 T
4 10 Q
(<time>) 339.9 408.62 T
1 11 Q
( objects, but within that) 375.9 408.62 T
(function the compiler might have alr) 99.65 394.62 T
(eady optimized a call to) 277.91 394.62 T
4 10 Q
(say) 396.96 394.62 T
1 11 Q
( to the method) 414.96 394.62 T
-0.29 (for) 99.65 380.62 P
4 10 Q
-0.64 (<time>) 116.12 380.62 P
1 11 Q
-0.29 ( objects \050based on) 152.12 380.62 P
4 10 Q
-0.64 (<time>) 239.31 380.62 P
1 11 Q
-0.29 ( being in the sealed domain of) 275.31 380.62 P
4 10 Q
-0.64 (say) 422.26 380.62 P
1 11 Q
-0.29 (\051. But ther) 440.26 380.62 P
-0.29 (e) 487.92 380.62 P
(is also a method for) 99.65 366.62 T
4 10 Q
(say) 197.85 366.62 T
1 11 Q
( on) 215.85 366.62 T
4 10 Q
(<position>) 233.75 366.62 T
1 11 Q
(, and, mor) 293.75 366.62 T
(e important, we pr) 343.24 366.62 T
(obably will) 433.66 366.62 T
(want to de\336ne a method speci\336cally for) 99.65 352.62 T
4 10 Q
(<place-and-time>) 294.86 352.62 T
1 11 Q
(. Because of this) 390.86 352.62 T
(ambiguity) 99.65 338.62 T
(, the class) 148.58 338.62 T
4 10 Q
(<place-and-time>) 197.75 338.62 T
1 11 Q
( cannot be de\336ned in a separate library) 293.75 338.62 T
(,) 481.58 338.62 T
(and the compiler will signal an err) 99.65 324.62 T
(or) 266.78 324.62 T
(.) 276.32 324.62 T
-0.02 (Note that the class) 126.65 310.62 P
4 10 Q
-0.05 (<place-and-time>) 218.81 310.62 P
1 11 Q
-0.02 ( could be de\336ned in the) 314.81 310.62 P
4 10 Q
-0.05 (time) 431.87 310.62 P
1 11 Q
-0.02 ( library) 455.87 310.62 P
-0.02 (.) 490.17 310.62 P
-0.21 (The compiler can deal corr) 99.65 296.62 P
-0.21 (ectly with classes that may straddle a sealed domain, if) 228.3 296.62 P
(they ar) 99.65 282.62 T
(e known in the library wher) 133.42 282.62 T
(e the sealed domain is de\336ned. It would also) 269.18 282.62 T
(be valid to subclass) 99.65 268.62 T
4 10 Q
(<time>) 196.72 268.62 T
1 11 Q
( in any way that did not change the applicability of) 232.72 268.62 T
(methods in any sealed generic-function domains that include) 99.65 254.62 T
4 10 Q
(<time>) 399.77 254.62 T
1 11 Q
(. The actual) 435.77 254.62 T
(r) 99.65 240.62 T
(ule involved depends on an analysis of the exact methods of the generic func-) 103.9 240.62 T
(tion, and the r) 99.65 226.62 T
(ule is complicated enough that you should just r) 167.98 226.62 T
(ely on your com-) 402.41 226.62 T
(piler to detect illegal situations.) 99.65 212.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "327" 341
%%Page: "328" 342
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(328) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(19.12  Slot accessor) 99.65 662.95 T
(s) 217.1 662.95 T
1 11 Q
(Dylan does allow you to omit de\336nition of a generic function. As we mentioned) 99.65 642.62 T
(earlier) 99.65 628.62 T
(, if you de\336ne a method without also de\336ning a generic function, Dylan) 129.96 628.62 T
(implicitly cr) 99.65 614.62 T
(eates a generic function with the most general types for the parame-) 158.34 614.62 T
(ters and r) 99.65 600.62 T
(eturn values that ar) 145.78 600.62 T
(e compatible with the method. The most common) 240.47 600.62 T
(case of implicit generic functions is for the slot-accessor methods that ar) 99.65 586.62 T
(e cr) 447.96 586.62 T
(eated) 465.01 586.62 T
-0.34 (when a new class is de\336ned. Because these generic functions typically have only a) 99.65 572.62 P
-0.19 (single method and ar) 99.65 558.62 P
-0.19 (e) 202.15 558.62 P
2 F
-0.19 (sealed) 209.98 558.62 P
1 F
-0.19 ( by default \050see Section 19.9\051, the compiler can make) 241.75 558.62 P
(extensive optimizations for slot accessors, ideally making slot access no mor) 99.65 544.62 T
(e) 468.83 544.62 T
(expensive than an array r) 99.65 530.62 T
(efer) 222.97 530.62 T
(ence or str) 241.32 530.62 T
(uctur) 291.5 530.62 T
(e-member access in other languages.) 317.38 530.62 T
-0.44 (Even when a slot is inherited by subclassing, a good Dylan compiler will use) 126.65 516.62 P
(a) 99.65 502.62 T
2 F
(coloring algorithm) 107.9 502.62 T
1 F
( to assign slots to the same of) 201.71 502.62 T
(fset in each subclass, keeping) 342.68 502.62 T
(the cost of slot access to a minimum. Y) 99.65 488.62 T
(ou can use primary classes \050see Section) 285.78 488.62 T
(19.13\051 to guarantee ef) 99.65 474.62 T
(\336cient slot access.When a pr) 203.26 474.62 T
(ogram de\336nes explicit methods) 339.66 474.62 T
(for a slot getter or setter generic function, of course, the over) 99.65 460.62 T
(head is gr) 392.24 460.62 T
(eater) 439.76 460.62 T
(.) 462.91 460.62 T
(In the) 99.65 336.62 T
4 10 Q
(<sixty-unit>) 130.51 336.62 T
1 11 Q
( class, we speci\336ed an initial value for) 202.51 336.62 T
4 10 Q
(total-seconds) 388.92 336.62 T
1 11 Q
(;) 466.92 336.62 T
(hence, ther) 99.65 322.62 T
(e is no need to check that the slot has been initialized befor) 152.78 322.62 T
(e it is) 437.66 322.62 T
-0.43 (accessed. In some situations, it may not be feasible to give a default or initial value) 99.65 308.62 P
(for a slot. Dylan permits this omission and will ensur) 99.65 294.62 T
(e that the slot is initialized) 357.47 294.62 T
(befor) 99.65 280.62 T
(e that slot is used; of course, this check does not come for fr) 124.82 280.62 T
(ee, so it is pr) 412.25 280.62 T
(efer-) 472.61 280.62 T
-0.08 (able to pr) 99.65 266.62 P
-0.08 (ovide initial values wher) 145.4 266.62 P
-0.08 (e possible. In fact, because we always expect to) 265.59 266.62 P
(initialize the) 99.65 252.62 T
4 10 Q
(total-seconds) 162.67 252.62 T
1 11 Q
( slot when we make a new) 240.67 252.62 T
4 10 Q
(<sixty-unit>) 372.01 252.62 T
1 11 Q
(, it would) 444.01 252.62 T
(be mor) 99.65 238.62 T
(e accurate to specify) 133.62 238.62 T
4 10 Q
(<sixty-unit>) 234.49 238.62 T
1 11 Q
( as follows:) 306.49 238.62 T
4 9 Q
(define open abstract class <sixty-unit> \050<object>\051) 99.65 217.95 T
(slot total-seconds :: <integer>,) 110.45 206.95 T
(required-init-keyword: total-seconds:,) 121.25 195.95 T
(end class <sixty-unit>;) 99.65 184.95 T
2 11 Q
(Comparison with C++:) 132.65 426.62 T
1 F
( Dylan classes ar) 247.1 426.62 T
(e similar to virtual base) 327.58 426.62 T
(classes with virtual data members in that the of) 132.65 412.62 T
(fsets of their data) 362.31 412.62 T
(members ar) 132.65 398.62 T
(e not \336xed, and access to the data members can be over-) 190.1 398.62 T
(ridden. See Appendix B.2,) 132.65 384.62 T
0 F
(The concept of classes) 264.89 384.62 T
1 F
(, for a mor) 360.51 384.62 T
(e detailed) 410.89 384.62 T
(analogy) 132.65 370.62 T
(.) 170.27 370.62 T
126.65 439.83 126.65 363.08 2 L
V
0.25 H
0 Z
N
477.65 439.83 477.65 363.08 2 L
V
N
126.52 439.95 477.77 439.95 2 L
V
N
126.52 362.95 477.77 362.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "328" 342
%%Page: "329" 343
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.12 Slot accessors) 431.82 702.62 T
2 F
(329) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(That is, rather than giving the slot an initial value of) 99.65 665.62 T
4 10 Q
(0) 354.73 665.62 T
1 11 Q
( and an optional) 360.73 665.62 T
4 10 Q
(init-keyword:) 99.65 651.62 T
1 11 Q
(, we simply r) 177.65 651.62 T
(equir) 240.74 651.62 T
(e that the slot be initialized when we make a) 266.15 651.62 T
4 10 Q
-0.55 (<sixty-unit>) 99.65 637.62 P
1 11 Q
-0.25 ( object. Of course, the initial value must obey the type constraint of) 171.65 637.62 P
4 10 Q
(<integer>) 99.65 623.62 T
1 11 Q
(. The compiler can still make the infer) 153.65 623.62 T
(ence that the slot will always be) 336.47 623.62 T
(initialized and will always have an integer value.) 99.65 609.62 T
(Always initializing slots, either with a default value or r) 99.65 457.62 T
(equir) 371.02 457.62 T
(ed init-keywor) 396.43 457.62 T
(d,) 468.05 457.62 T
(will make slot access ef) 99.65 443.62 T
(\336cient.) 212.08 443.62 T
(Finally) 126.65 429.62 T
(, in many cases, slots hold values that will not change over the life-) 159.16 429.62 T
-0.23 (time of each instance \050although they may be dif) 99.65 415.62 P
-0.23 (fer) 328.19 415.62 P
-0.23 (ent values for each instance\051. In) 341.27 415.62 P
(the case of the) 99.65 401.62 T
4 10 Q
(<sixty-unit>) 171.15 401.62 T
1 11 Q
( class, we never change the value of) 243.15 401.62 T
4 10 Q
(total-) 419.07 401.62 T
-0.66 (seconds) 99.65 387.62 P
1 11 Q
-0.3 (. When adding two instances, we cr) 141.65 387.62 P
-0.3 (eate a new one to hold the new value,) 312.38 387.62 P
(rather than changing one of the ar) 99.65 373.62 T
(gument instances \050that way) 264.76 373.62 T
(, we do not have to) 397.61 373.62 T
(worry about changing an instance that may still be in use by some other part of) 99.65 359.62 T
(the pr) 99.65 345.62 T
(ogram\051. In such cases, declaring the slot to be) 128.41 345.62 T
4 10 Q
(constant) 350.98 345.62 T
1 11 Q
( both documents) 398.98 345.62 T
(and enfor) 99.65 331.62 T
(ces this intent. Furthermor) 146.51 331.62 T
(e, the compiler can often make additional) 275.19 331.62 T
(optimizations for slots that ar) 99.65 317.62 T
(e known never to be modi\336ed. The \336nal de\336nition) 242.68 317.62 T
(of) 99.65 303.62 T
4 10 Q
(<sixty-unit>) 112.07 303.62 T
1 11 Q
( is as follows:) 184.07 303.62 T
4 9 Q
(define open abstract class <sixty-unit> \050<object>\051) 99.65 282.95 T
(constant slot total-seconds :: <integer>,) 110.45 271.95 T
(required-init-keyword: total-seconds:,) 121.25 260.95 T
(end class <sixty-unit>;) 99.65 249.95 T
1 11 Q
(\050The) 99.65 229.62 T
4 10 Q
(constant) 124.47 229.62 T
1 11 Q
( declaration is simply shorthand for the slot option) 172.48 229.62 T
4 10 Q
(setter: #f) 421.78 229.62 T
1 11 Q
(,) 481.78 229.62 T
(meaning that ther) 99.65 215.62 T
(e is no way to set the slot.\051) 186.23 215.62 T
2 F
(Comparison with C:) 132.65 575.62 T
1 F
( Dylan always ensur) 233.77 575.62 T
(es that a slot is initialized) 333.02 575.62 T
(befor) 132.65 561.62 T
(e that slot is accessed, automatically inserting a r) 157.82 561.62 T
(un-time check) 393.66 561.62 T
(when it cannot pr) 132.65 547.62 T
(ove at compile time that the slot is always pr) 218.47 547.62 T
(operly) 435.02 547.62 T
(initialized. C puts this bur) 132.65 533.62 T
(den of safety on the pr) 259.39 533.62 T
(ogrammer) 368.42 533.62 T
(, and that) 418.61 533.62 T
-0.33 (can be the sour) 132.65 519.62 P
-0.33 (ce of subtle bugs. A number of debugging and analysis) 204.75 519.62 P
(tools ar) 132.65 505.62 T
(e available as addons to C, to help the pr) 168.51 505.62 T
(ogrammer with this) 365.61 505.62 T
(task.) 132.65 491.62 T
126.65 588.83 126.65 484.08 2 L
V
0.25 H
0 Z
N
477.65 588.83 477.65 484.08 2 L
V
N
126.52 588.95 477.77 588.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "329" 343
%%Page: "330" 344
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(330) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(19.13  Prim) 99.65 662.95 T
(ar) 164.61 662.95 T
(y c) 176.36 662.95 T
(lasses) 193.23 662.95 T
1 11 Q
(Classes have one additional variation that you can use to optimize performance.) 99.65 642.62 T
(A class that is de\336ned as) 99.65 628.62 T
4 10 Q
(primary) 221.76 628.62 T
1 11 Q
( allows the compiler to generate the most ef) 263.76 628.62 T
(\336-) 475.3 628.62 T
(cient code for accessing the slots de\336ned in the primary class \050whether the acces-) 99.65 614.62 T
-0.13 (sor is applied to the primary class or to one of that class\325s subclasses\051. However) 99.65 600.62 P
-0.13 (, a) 482.16 600.62 P
(primary class cannot be combined with any other primary class \050unless one is a) 99.65 586.62 T
(subclass of the other\051. This r) 99.65 572.62 T
(estriction implies that you should delay declaring a) 235.79 572.62 T
(class to be primary until you ar) 99.65 558.62 T
(e sur) 251.26 558.62 T
(e of your inheritance design. Also, because) 274.72 558.62 T
(sealed classes ar) 99.65 544.62 T
(e alr) 178.26 544.62 T
(eady highly optimized, the) 199.13 544.62 T
4 10 Q
(primary) 332.99 544.62 T
1 11 Q
( declaration is of most) 374.99 544.62 T
(use for open classes.) 99.65 530.62 T
(As an example, consider the class) 126.65 516.62 T
4 10 Q
(<sixty-unit>) 291.92 516.62 T
1 11 Q
(, and its slot) 363.92 516.62 T
4 10 Q
(total-) 425.2 516.62 T
(seconds) 99.65 502.62 T
1 11 Q
(, as used in this method for) 141.65 502.62 T
4 10 Q
(decode-total-seconds) 276.27 502.62 T
1 11 Q
(:) 396.27 502.62 T
4 9 Q
(define method decode-total-seconds) 99.65 481.95 T
(\050sixty-unit :: <sixty-unit>\051) 121.25 470.95 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 105.05 459.95 T
(decode-total-seconds\050sixty-unit.total-seconds\051;) 110.45 448.95 T
(end method decode-total-seconds;) 99.65 437.95 T
1 11 Q
-0.02 (Although the generic function for the slot accessor) 99.65 417.62 P
4 10 Q
-0.04 (total-seconds) 346.86 417.62 P
1 11 Q
-0.02 ( is sealed, and) 424.86 417.62 P
-0.27 (it is trivial for the compiler to infer that its ar) 99.65 403.62 P
-0.27 (gument is a) 313.53 403.62 P
4 10 Q
-0.58 (<sixty-unit>) 372.07 403.62 P
1 11 Q
-0.27 ( in the call) 444.07 403.62 P
4 10 Q
(sixty-unit.total-seconds) 99.65 389.62 T
1 11 Q
(, because) 243.65 389.62 T
4 10 Q
(<sixty-unit>) 290.2 389.62 T
1 11 Q
( is declar) 362.2 389.62 T
(ed open, the) 405.29 389.62 T
(compiler cannot emit the most ef) 99.65 375.62 T
(\336cient code for that call. Because an open class) 259.14 375.62 T
(could be mixed with any number of other classes, ther) 99.65 361.62 T
(e is no guarantee that the) 362.88 361.62 T
(slots of every object that is a) 99.65 347.62 T
4 10 Q
(<sixty-unit>) 238.74 347.62 T
1 11 Q
( will always be stor) 310.74 347.62 T
(ed in the same) 404.43 347.62 T
(or) 99.65 333.62 T
(der \321ther) 109.8 333.62 T
(e is no guarantee that) 159.29 333.62 T
4 10 Q
(total-seconds) 266.28 333.62 T
1 11 Q
( will always be the \336rst slot in) 344.28 333.62 T
(an object that is an indir) 99.65 319.62 T
(ect instance of) 216.21 319.62 T
4 10 Q
(<sixty-unit>) 287.78 319.62 T
1 11 Q
(, for instance.) 359.78 319.62 T
(Declaring a class) 126.65 305.62 T
4 10 Q
(primary) 210.74 305.62 T
1 11 Q
( is essentially making a guarantee that the com-) 252.74 305.62 T
(piler can always put the primary class\325s slots in the same place in an instance,) 99.65 291.62 T
(and that any other super) 99.65 277.62 T
(classes will have to adjust:) 219.29 277.62 T
4 9 Q
(define abstract open primary class <sixty-unit> \050<object>\051) 99.65 256.95 T
(constant slot total-seconds :: <integer>,) 110.45 245.95 T
(required-init-keyword: total-seconds:;) 121.25 234.95 T
(end class <sixty-unit>;) 99.65 223.95 T
1 11 Q
(By adding the) 99.65 203.62 T
4 10 Q
(primary) 170.65 203.62 T
1 11 Q
( declaration to the de\336nition, any library that subclasses) 212.65 203.62 T
4 10 Q
-0.82 (<sixty-unit>) 99.65 189.62 P
1 11 Q
-0.38 ( is guaranteed to put) 171.65 189.62 P
4 10 Q
-0.82 (total-seconds) 273.15 189.62 P
1 11 Q
-0.38 ( at the same of) 351.15 189.62 P
-0.38 (fset. Hence, the) 419.61 189.62 P
(compiler can turn the call) 99.65 175.62 T
4 10 Q
(sixty-unit.total-seconds) 226.42 175.62 T
1 11 Q
( into a single machine) 370.42 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "330" 344
%%Page: "331" 345
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.14 Additional efficiency information) 357.12 702.62 T
2 F
(331) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(instr) 99.65 665.62 T
(uction \050load with constant of) 121.76 665.62 T
(fset\051, without concern over which subclass of) 261.42 665.62 T
4 10 Q
(<sixty-unit>) 99.65 651.62 T
1 11 Q
( was passed as an ar) 171.65 651.62 T
(gument.) 269.88 651.62 T
(It is permissible to make subclasses of a primary class also primary) 99.65 527.62 T
(, essentially) 423.59 527.62 T
-0.31 (fr) 99.65 513.62 P
-0.31 (eezing the assignment of all the slots in the subclass too. What is not permissible) 107.46 513.62 P
(is to multiply inherit fr) 99.65 499.62 T
(om mor) 210.58 499.62 T
(e than one primary class; as you can see, such) 248.92 499.62 T
(behavior would lead to a con\337ict between the \336xed slot assignments.) 99.65 485.62 T
(Because primary classes r) 126.65 471.62 T
(estrict extension in this way) 250.66 471.62 T
(, you should use them) 384.7 471.62 T
(sparingly in libraries intended to be softwar) 99.65 457.62 T
(e components. Primary classes ar) 312.97 457.62 T
(e of) 473.89 457.62 T
-0.06 (most bene\336t in lar) 99.65 443.62 P
-0.06 (ge, modular pr) 187.4 443.62 P
-0.06 (ograms, wher) 259.8 443.62 P
-0.06 (e all the clients of each component) 326.57 443.62 P
-0.39 (ar) 99.65 429.62 P
-0.39 (e known, and the need for extensibility is bounded; typically that occurs towar) 109.29 429.62 P
-0.39 (d) 486.56 429.62 P
(the end of a pr) 99.65 415.62 T
(oject, when you ar) 170.22 415.62 T
(e tuning for performance.) 259.19 415.62 T
3 15 Q
(19.14  Ad) 99.65 375.95 T
(ditional ef\336cienc) 153.56 375.95 T
(y inf) 250.52 375.95 T
(ormation) 275.58 375.95 T
1 11 Q
(In this section, we r) 99.65 355.62 T
(eview additional techniques that compilers can use to gener-) 193.96 355.62 T
(ate code that obeys the Dylan execution model, but is mor) 99.65 341.62 T
(e ef) 381.2 341.62 T
(\336cient than a) 397.96 341.62 T
(straightforwar) 99.65 327.62 T
(d implementation of that model might suggest. Knowing about) 169.88 327.62 T
(these techniques can help you to evaluate dif) 99.65 313.62 T
(fer) 317.73 313.62 T
(ent vendors\325 compilers. Y) 330.81 313.62 T
(ou will) 453.97 313.62 T
-0.08 (have to consult the documentation of your particular implementation to discover) 99.65 299.62 P
(whether or not these techniques ar) 99.65 285.62 T
(e used.) 267.5 285.62 T
3 13 Q
(19.14.1  Ef\336cienc) 99.65 254.29 T
(y of g) 185.49 254.29 T
(eneric function calls) 214.02 254.29 T
1 11 Q
(In addition to using type infer) 99.65 234.62 T
(encing and sealed domains, another way to speed) 245.72 234.62 T
(up generic function calls when they must dispatch at r) 99.65 220.62 T
(un time is to cache the) 363.48 220.62 T
(r) 99.65 206.62 T
(eturn values of pr) 103.79 206.62 T
(evious calls. So, for example, the \336rst time that a given generic) 190.19 206.62 T
(function is called with certain classes of ar) 99.65 192.62 T
(guments, the full sorted sequence of) 304.03 192.62 T
-0.11 (applicable methods is computed; after that, however) 99.65 178.62 P
-0.11 (, it only to be only looked up) 354.02 178.62 P
(in a table. Thus, if the generic function is called often with the same type of) 99.65 164.62 T
2 F
(Comparison with C++:) 132.65 617.62 T
1 F
(A primary class is like an or) 249.85 617.62 T
(dinary base class) 385.36 617.62 T
(in C++. Because only one primary class is allowed as a base class, its) 132.65 603.62 T
(data members can be assigned the same \336xed of) 132.65 589.62 T
(fset for all derived) 365.88 589.62 T
(classes. See Appendix B.2,) 132.65 575.62 T
0 F
(The concept of classes) 265.08 575.62 T
1 F
(, for a mor) 360.7 575.62 T
(e detailed) 411.08 575.62 T
(analogy) 132.65 561.62 T
(.) 170.27 561.62 T
126.65 630.83 126.65 554.08 2 L
V
0.25 H
0 Z
N
477.65 630.83 477.65 554.08 2 L
V
N
126.52 630.95 477.77 630.95 2 L
V
N
126.52 553.95 477.77 553.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "331" 345
%%Page: "332" 346
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(332) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(ar) 99.65 665.62 T
(guments, most calls will be fast. This technique is used in other object-oriented) 109.29 665.62 T
-0.21 (languages, such as Smalltalk and CLOS, and is useful for speeding up completely) 99.65 651.62 P
(dynamic situations. Most good Dylan compilers will use some form of cached) 99.65 637.62 T
(dispatching.) 99.65 623.62 T
-0.02 (A second form of cached dispatching is called) 126.65 609.62 P
2 F
-0.02 (call-site caching) 351.99 609.62 P
1 F
-0.02 (. Although a) 432.3 609.62 P
(generic function may have many calls thr) 99.65 595.62 T
(oughout a pr) 300.44 595.62 T
(ogram, often the types of) 363.58 595.62 T
-0.24 (ar) 99.65 581.62 P
-0.24 (guments passed ar) 109.29 581.62 P
-0.24 (e dir) 199.77 581.62 P
-0.24 (ectly r) 221.62 581.62 P
-0.24 (elated to wher) 251.33 581.62 P
-0.24 (e \050that is, in what other method\051 the) 320.47 581.62 P
-0.06 (call is made. Some Dylan compilers will cache the types and methods of each call) 99.65 567.62 P
(at the point of call, and will use this cache to avoid dispatch if the same types ar) 99.65 553.62 T
(e) 486.47 553.62 T
(passed as ar) 99.65 539.62 T
(guments in a subsequent call fr) 158.39 539.62 T
(om the same place.) 309.58 539.62 T
3 13 Q
(19.14.2  Ef\336cienc) 99.65 508.29 T
(y of ke) 185.49 508.29 T
(yw) 219.12 508.29 T
(or) 233.15 508.29 T
(d ar) 243.61 508.29 T
(guments and of m) 263.02 508.29 T
(ultiple v) 354.63 508.29 T
(alues) 394.72 508.29 T
1 11 Q
(Keywor) 99.65 488.62 T
(d ar) 138.35 488.62 T
(guments ar) 157.46 488.62 T
(e a powerful and \337exible, but potentially expensive, fea-) 212.24 488.62 T
(tur) 99.65 474.62 T
(e of Dylan. The pr) 114.01 474.62 T
(ocessing of keywor) 201.61 474.62 T
(ds and values at r) 294.81 474.62 T
(un time can be an) 380.64 474.62 T
-0.44 (expensive operation, especially if many keywor) 99.65 460.62 P
-0.44 (ds ar) 328.81 460.62 P
-0.44 (e used. A Dylan compiler can) 352.15 460.62 P
(pass keywor) 99.65 446.62 T
(d ar) 160.66 446.62 T
(guments as ef) 179.78 446.62 T
(\336ciently as it can r) 246.56 446.62 T
(equir) 334.76 446.62 T
(ed ar) 360.17 446.62 T
(guments, if the called) 384.56 446.62 T
(function is known at compilation time.) 99.65 432.62 T
(Returning multiple values again raises performance issues. In some imple-) 126.65 418.62 T
(mentations of Dylan, ther) 99.65 404.62 T
(e is an extra cost for r) 223.78 404.62 T
(eturning mor) 327 404.62 T
(e than one value; in) 391.57 404.62 T
(others, the cost is associated with calling a function that does not declar) 99.65 390.62 T
(e how) 446.52 390.62 T
(many values it r) 99.65 376.62 T
(eturns. When the compiler knows what function is being called,) 178.04 376.62 T
-0.01 (these costs usually can be eliminated, but certain costs may still exist \321 for exam-) 99.65 362.62 P
(ple, certain implementations may not optimize tail calls between functions that) 99.65 348.62 T
(r) 99.65 334.62 T
(eturn dif) 103.79 334.62 T
(fer) 146.17 334.62 T
(ent numbers of ar) 159.25 334.62 T
(guments.) 245.18 334.62 T
3 13 Q
(19.14.3  Memor) 99.65 303.29 T
(y usa) 176.19 303.29 T
(g) 203.36 303.29 T
(e) 209.98 303.29 T
1 11 Q
-0.44 (Dylan uses automatic storage-management; thus, pr) 99.65 283.62 P
-0.44 (ogrammers explicitly allocate) 350.95 283.62 P
(objects, and hence memory) 99.65 269.62 T
(, but deallocation is automatic and occurs after all r) 230.5 269.62 T
(ef-) 478.71 269.62 T
-0.15 (er) 99.65 255.62 P
-0.15 (ences to an object ar) 109.06 255.62 P
-0.15 (e gone. The pr) 205.49 255.62 P
-0.15 (ocess of r) 274.27 255.62 P
-0.15 (eclaiming memory when objects ar) 318.77 255.62 P
-0.15 (e) 487.78 255.62 P
(no longer in use is known as) 99.65 241.62 T
2 F
(garbage collection) 240.94 241.62 T
1 F
(.) 332.3 241.62 T
(Ther) 126.65 227.62 T
(e ar) 149.21 227.62 T
(e str) 166.88 227.62 T
(ong advantages to automatic storage-management. W) 187.29 227.62 T
(ith man-) 449 227.62 T
(ual storage-management, small pr) 99.65 213.62 T
(ogram bugs, such as fr) 265.64 213.62 T
(eeing of an object that is) 375.12 213.62 T
-0.27 (still in use, can cause subtle bugs that lead to crashes in parts of the pr) 99.65 199.62 P
-0.27 (ogram unr) 435.37 199.62 P
-0.27 (e-) 486.72 199.62 P
(lated to wher) 99.65 185.62 T
(e the r) 164.01 185.62 T
(eal pr) 194.18 185.62 T
(oblem lies. Dylan is able to guarantee that all pr) 221.66 185.62 T
(ograms) 453.36 185.62 T
(fail in disciplined ways, usually with exceptions, because the type system and) 99.65 171.62 T
(memory management ar) 99.65 157.62 T
(e safe.) 219.43 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "332" 346
%%Page: "333" 347
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.14 Additional efficiency information) 357.12 702.62 T
2 F
(333) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(But automatic storage-management may cr) 126.65 665.62 T
(eate performance concerns.) 336.18 665.62 T
(Although early implementations of garbage collection wer) 99.65 651.62 T
(e infamously slow) 383.64 651.62 T
(,) 471.54 651.62 T
-0.36 (modern garbage collectors ar) 99.65 637.62 P
-0.36 (e usually fast enough that using one should not raise) 239.9 637.62 P
-0.13 (concerns for most pr) 99.65 623.62 P
-0.13 (ograms. But some pr) 199.1 623.62 P
-0.13 (ograms with specialized or tuned use of) 299.4 623.62 P
(memory may r) 99.65 609.62 T
(un slower with automatic management.) 171.9 609.62 T
(Whether storage management is automatic or manual, the use of memory) 126.65 595.62 T
(raises performance issues. Every allocation of memory takes time, including the) 99.65 581.62 T
(time to r) 99.65 567.62 T
(eclaim unused memory; either the pr) 140.66 567.62 T
(ogrammer must fr) 320.49 567.62 T
(ee it explicitly) 409.41 567.62 T
(, or) 475.96 567.62 T
(the garbage collector has to do mor) 99.65 553.62 T
(e work.) 270.47 553.62 T
(It is obvious that calling a function such as) 126.65 539.62 T
4 10 Q
(make) 335.97 539.62 T
1 11 Q
(,) 359.97 539.62 T
4 10 Q
(vector) 365.47 539.62 T
1 11 Q
(, or) 400.65 539.62 T
4 10 Q
(pair) 419.25 539.62 T
1 11 Q
( in Dylan) 443.25 539.62 T
(allocates memory) 99.65 525.62 T
(, but ther) 184.15 525.62 T
(e ar) 228.11 525.62 T
(e operations that implicitly use memory) 245.77 525.62 T
(. For exam-) 438.88 525.62 T
(ple, cr) 99.65 511.62 T
(eating a closur) 129.26 511.62 T
(e \050see Section 12.3.6, page 183\051 will usually cause Dylan to) 199.87 511.62 T
(allocate memory for the closur) 99.65 497.62 T
(e.) 247.76 497.62 T
(On the other hand, sometimes the compiler is able to pr) 126.65 483.62 T
(ove that an object is) 396.68 483.62 T
(never used after the function that cr) 99.65 469.62 T
(eates it r) 273.44 469.62 T
(eturns. In a good compiler) 314.16 469.62 T
(, such) 441.68 469.62 T
(objects ar) 99.65 455.62 T
(e allocated on the stack, and ar) 145.11 455.62 T
(e r) 294.18 455.62 T
(eclaimed automatically when the func-) 306.35 455.62 T
(tion exits.) 99.65 441.62 T
(A good Dylan development envir) 126.65 427.62 T
(onment will have tools that help you to) 290.28 427.62 T
(meter and pr) 99.65 413.62 T
(o\336le memory usage, so that you can adjust your pr) 162.71 413.62 T
(ogram to utilize) 409.51 413.62 T
(memory ef) 99.65 399.62 T
(\336ciently) 152.29 399.62 T
(.) 190.39 399.62 T
3 13 Q
(19.14.4  Inlining, constant f) 99.65 368.29 T
(olding, and par) 235.72 368.29 T
(tial e) 312.34 368.29 T
(v) 336.49 368.29 T
(aluation) 342.23 368.29 T
1 11 Q
(One optimization that is common in many computer languages is) 99.65 348.62 T
2 F
(inlining) 421.29 348.62 T
1 F
(. Inlin-) 462.22 348.62 T
(ing r) 99.65 334.62 T
(eplaces a call to a known function with the body of the function. Inlining is) 122.26 334.62 T
(an important optimization in Dylan, because almost all Dylan operations \321 slot) 99.65 320.62 T
(access, array indexing, and collection iteration \321 involve function calls.) 99.65 306.62 T
(All good Dylan compilers, when compiling for speed, can be aggr) 126.65 292.62 T
(essive) 446.23 292.62 T
(about inlining any computations, as long as doing so would not make a pr) 99.65 278.62 T
(ogram) 460.65 278.62 T
(gr) 99.65 264.62 T
(ow too lar) 109.91 264.62 T
(ge. Constant folding \050evaluating expr) 159.04 264.62 T
(essions involving constant val-) 340.42 264.62 T
-0.37 (ues at compile time\051 and inlining ar) 99.65 250.62 P
-0.37 (e just two of the) 270.29 250.62 P
2 F
-0.37 (partial-evaluation) 348.6 250.62 P
1 F
-0.37 ( techniques) 438.42 250.62 P
(that you should expect to \336nd in any good Dylan compiler) 99.65 236.62 T
(.) 383.89 236.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "333" 347
%%Page: "334" 348
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(334) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(19.14.5  T) 99.65 499.29 T
(ype inf) 147.03 499.29 T
(erence) 181.3 499.29 T
1 11 Q
-0.24 (The quality of type infer) 99.65 479.62 P
-0.24 (ence can vary gr) 216.43 479.62 P
-0.24 (eatly among Dylan compilers. T) 295.02 479.62 P
-0.24 (ype infer-) 448.6 479.62 P
(ence \321 like most forms of pr) 99.65 465.62 T
(ogram analysis \321 works best with simple, straight-) 239.55 465.62 T
(forwar) 99.65 451.62 T
(d code. Some constr) 132.48 451.62 T
(ucts that ar) 229.65 451.62 T
(e typically dif) 283.63 451.62 T
(\336cult for type infer) 350.21 451.62 T
(ence ar) 441.69 451.62 T
(e) 475.91 451.62 T
(assignment and calling of block exit functions outside of the method that de\336nes) 99.65 437.62 T
(the block exit functions.) 99.65 423.62 T
(One other way in which type constraints can be helpful is that they permit) 126.65 409.62 T
(the compiler to choose ef) 99.65 395.62 T
(\336cient r) 220.69 395.62 T
(epr) 257.59 395.62 T
(esentations for objects. Most Dylan objects) 273.61 395.62 T
(contain enough information for Dylan to determine their class \321 this one is an) 99.65 381.62 T
-0.01 (important featur) 99.65 367.62 P
-0.01 (e for the dynamic aspects of the language. But, suppose we have) 180.13 367.62 P
-0.07 (a 1000) 99.65 353.62 P
-0.07 (x) 130.74 353.62 P
-0.07 (1000) 137.33 353.62 P
4 10 Q
-0.16 (limited\050<array>, of: <single-float>\051) 162 353.62 P
1 11 Q
-0.07 (. Ther) 377.68 353.62 P
-0.07 (e is no r) 405.67 353.62 P
-0.07 (eason that) 443.38 353.62 P
(each of the numbers in that array should also contain a r) 99.65 339.62 T
(efer) 373.1 339.62 T
(ence to the) 391.45 339.62 T
4 10 Q
(<single-) 446.37 339.62 T
(float>) 99.65 325.62 T
1 11 Q
( class; the one r) 135.65 325.62 T
(efer) 209.39 325.62 T
(ence in the limited type is suf) 227.74 325.62 T
(\336cient. \050Note that, if we) 370.02 325.62 T
-0.42 (had used) 99.65 311.62 P
4 10 Q
-0.91 (of: <real>) 146.23 311.62 P
1 11 Q
-0.42 ( or) 205.32 311.62 P
4 10 Q
-0.91 (of: <float>) 220.34 311.62 P
1 11 Q
-0.42 (, we would have needed mor) 285.43 311.62 P
-0.42 (e information,) 424.93 311.62 P
(since multiple classes would have been possible.\051) 99.65 297.62 T
(When an object is r) 126.65 283.62 T
(epr) 219.04 283.62 T
(esented in such a way) 235.06 283.62 T
(, often many of the operations) 340.5 283.62 T
-0.06 (on it can be optimized. For example, the conventional r) 99.65 269.62 P
-0.06 (epr) 366.69 269.62 P
-0.06 (esentation of) 382.71 269.62 P
4 10 Q
-0.13 (<double-) 447.65 269.62 P
-0.05 (float>) 99.65 255.62 P
1 11 Q
-0.02 ( will usually r) 135.65 255.62 P
-0.02 (equir) 202.7 255.62 P
-0.02 (e an indir) 228.11 255.62 P
-0.02 (ect-memory-r) 274.41 255.62 P
-0.02 (efer) 340.78 255.62 P
-0.02 (ence machine instr) 359.13 255.62 P
-0.02 (uction to) 449.89 255.62 P
-0.37 (get at the actual number) 99.65 241.62 P
-0.37 (, so adding two such objects is one \337oating-point machine) 215.43 241.62 P
(instr) 99.65 227.62 T
(uction and two load-fr) 121.76 227.62 T
(om-memory machine instr) 231.01 227.62 T
(uctions; if a dir) 360.54 227.62 T
(ect r) 433.34 227.62 T
(epr) 453.98 227.62 T
(esen-) 470.01 227.62 T
(tation is used, just the add machine instr) 99.65 213.62 T
(uction is needed. Further) 296.22 213.62 T
(, if the r) 417.33 213.62 T
(eturn) 454.6 213.62 T
(value is saved in a variable for which type information is not available, it may be) 99.65 199.62 T
(necessary to allocate memory dynamically to stor) 99.65 185.62 T
(e the r) 339.71 185.62 T
(eturn value.) 369.89 185.62 T
(T) 126.65 171.62 T
(ypes that may have mor) 132.4 171.62 T
(e ef) 249.72 171.62 T
(\336cient r) 266.47 171.62 T
(epr) 303.36 171.62 T
(esentations include certain integer) 319.39 171.62 T
(classes, the \337oating-point classes, characters, and Booleans. Pr) 99.65 157.62 T
(ecise declarations) 400.38 157.62 T
2 F
(Comparison with C:) 132.65 645.62 T
1 F
( A pr) 233.77 645.62 T
(ogrammer familiar with the optimizations) 258.59 645.62 T
(done in C compilers can think of partial evaluation as an extr) 132.65 631.62 T
(eme) 428.95 631.62 T
(combination of inlining and constant folding. One way in which) 132.65 617.62 T
-0.44 (Dylan has an advantage over C for partial evaluation is that it har) 132.65 603.62 P
-0.44 (d for) 446.29 603.62 P
(a compiler to evaluate expr) 132.65 589.62 T
(essions that involve der) 264.85 589.62 T
(efer) 379.69 589.62 T
(encing point-) 398.03 589.62 T
(ers. For example, in C, it is dif) 132.65 575.62 T
(\336cult to evaluate partially a call to) 277.57 575.62 T
4 10 Q
(malloc) 132.65 561.62 T
1 11 Q
(, but Dylan compilers can often evaluate a call to) 168.65 561.62 T
4 10 Q
(make) 407.59 561.62 T
1 11 Q
( at com-) 431.59 561.62 T
(pile time.) 132.65 547.62 T
126.65 658.83 126.65 540.08 2 L
V
0.25 H
0 Z
N
477.65 658.83 477.65 540.08 2 L
V
N
126.52 658.95 477.77 658.95 2 L
V
N
126.52 539.95 477.77 539.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "334" 348
%%Page: "335" 349
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.15 Summary) 446.14 702.62 T
2 F
(335) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(about these types, especially in slots and limited collections, can lead to signi\336-) 99.65 665.62 T
(cant impr) 99.65 651.62 T
(ovements in both the time and memory needed to r) 146.44 651.62 T
(un a pr) 396.31 651.62 T
(ogram.) 431.1 651.62 T
3 15 Q
(19.15  Summar) 99.65 611.95 T
(y) 186.6 611.95 T
1 11 Q
(The most important point about performance is that it is important to pay atten-) 99.65 591.62 T
(tion to ef) 99.65 577.62 T
(\336ciency during the entir) 142.67 577.62 T
(e design and development cycle of a pr) 259.61 577.62 T
(oject.) 449.67 577.62 T
(During the design phase, try to ensur) 99.65 563.62 T
(e that the algorithms chosen have the right) 280.94 563.62 T
-0.12 (asymptotic behavior and constant factors, and that it is possible to implement the) 99.65 549.62 P
-0.42 (needed operations ef) 99.65 535.62 P
-0.42 (\336ciently) 200.28 535.62 P
-0.42 (. During the implementation phase, use the language) 238.38 535.62 P
-0.42 (constr) 99.65 521.62 P
-0.42 (ucts that most clearly expr) 129.45 521.62 P
-0.42 (ess what the pr) 255.79 521.62 P
-0.42 (ogram is doing. Once the pr) 328.04 521.62 P
-0.42 (ogram) 461.64 521.62 P
(is working corr) 99.65 507.62 T
(ectly) 173.76 507.62 T
(, it is then time to add type and sealing declarations, and to) 195.59 507.62 T
(use metering and pr) 99.65 493.62 T
(o\336ling tools to \336nd and r) 197.75 493.62 T
(ewrite heavily used, slow parts of) 318.68 493.62 T
(the pr) 99.65 479.62 T
(ogram, in or) 128.41 479.62 T
(der to impr) 188.1 479.62 T
(ove the performance.) 243.2 479.62 T
(One of the most important considerations when pr) 126.65 465.62 T
(ogramming is not to) 372.92 465.62 T
(worry about performance too soon. It is always mor) 99.65 451.62 T
(e important that your design) 352.05 451.62 T
(and implementation be clear and corr) 99.65 437.62 T
(ect, \336rst. Ther) 282.24 437.62 T
(e is no value in arriving at an) 348.79 437.62 T
(answer with lightning speed, if it turns out to be the wr) 99.65 423.62 T
(ong answer) 368.55 423.62 T
(.) 424.37 423.62 T
(In this chapter) 126.65 409.62 T
(, we cover) 195.89 409.62 T
(ed the following:) 245.11 409.62 T
(\245) 108.65 389.62 T
(W) 126.65 389.62 T
(e showed how Dylan can balance performance and \337exibility to support) 136.64 389.62 T
(a range of pr) 126.65 375.62 T
(ogramming r) 188.46 375.62 T
(equir) 252.47 375.62 T
(ements.) 277.88 375.62 T
(\245) 108.65 355.62 T
(W) 126.65 355.62 T
(e showed how type constraints af) 136.64 355.62 T
(fect performance.) 299.26 355.62 T
(\245) 108.65 335.62 T
(W) 126.65 335.62 T
(e showed how limited types can impr) 136.64 335.62 T
(ove performance.) 319.82 335.62 T
(\245) 108.65 315.62 T
(W) 126.65 315.62 T
(e showed how open generic functions pr) 136.64 315.62 T
(ovide modularity and \337exibility) 334.2 315.62 T
(.) 488.5 315.62 T
(\245) 108.65 295.62 T
(W) 126.65 295.62 T
(e showed how open classes pr) 136.64 295.62 T
(ovide modularity and \337exibility) 283.36 295.62 T
(.) 437.67 295.62 T
(\245) 108.65 275.62 T
-0.01 (W) 126.65 275.62 P
-0.01 (e showed how sealed generic function domains mitigate the performance) 136.64 275.62 P
(penalty of open classes and generic functions.) 126.65 261.62 T
(\245) 108.65 241.62 T
(W) 126.65 241.62 T
(e showed how primary classes permit ef) 136.64 241.62 T
(\336cient slot access.) 332.36 241.62 T
(\245) 108.65 221.62 T
(W) 126.65 221.62 T
(e pr) 136.64 221.62 T
(esented both an execution and ef) 155.41 221.62 T
(\336ciency model that pr) 314.61 221.62 T
(ovides a con-) 421.01 221.62 T
(ceptual model of how a pr) 126.65 207.62 T
(ogram in Dylan r) 254.5 207.62 T
(uns, and what the r) 338.02 207.62 T
(elative cost) 432.16 207.62 T
(of dif) 126.65 193.62 T
(fer) 152.45 193.62 T
(ent pr) 165.53 193.62 T
(ogram elements ar) 194.3 193.62 T
(e.) 284.5 193.62 T
(\245) 108.65 173.62 T
(W) 126.65 173.62 T
(e examined the method constr) 136.64 173.62 T
(ucts for \337exibility and performance avail-) 283.41 173.62 T
(able in Dylan; see T) 126.65 159.62 T
(able 19.1.) 220.72 159.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "335" 349
%%Page: "336" 350
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(336) 63.65 702.62 T
0 F
(Chapter 19) 87.4 702.62 T
(Performance and Flexibility) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(\245) 108.65 356.63 T
(W) 126.65 356.63 T
(e discussed the constr) 136.64 356.63 T
(ucts that can have type constraints, and the in\337u-) 242.63 356.63 T
(ence on performance or \337exibility of using such a declaration; see T) 126.65 342.63 T
(able) 452.78 342.63 T
(19.1.) 126.65 328.63 T
8 F
(Constr) 179.66 643.62 T
(uct) 212.22 643.62 T
(Eff) 352 643.62 T
(ects) 365.12 643.62 T
(direct method) 147.27 618.62 T
(highly optimizab) 271.27 618.62 T
(le) 349.91 618.62 T
(no method dispatch) 271.27 602.62 T
(sealed gener) 147.27 579.62 T
(ic func-) 211.03 579.62 T
(tion on a sealed class) 147.27 563.62 T
(highly optimizab) 271.27 579.62 T
(le) 349.91 579.62 T
(not e) 271.27 563.62 T
(xtensib) 295.41 563.62 T
(le b) 330.04 563.62 T
(y other libr) 347.55 563.62 T
(ar) 398.79 563.62 T
(ies) 408.73 563.62 T
(sealed gener) 147.27 540.62 T
(ic func-) 211.03 540.62 T
(tion on an open class) 147.27 524.62 T
(optimizab) 271.27 540.62 T
(le) 318.12 540.62 T
(other libr) 271.27 524.62 T
(ar) 313.95 524.62 T
(ies can subclass) 323.9 524.62 T
(open gener) 147.27 501.62 T
(ic function) 203.09 501.62 T
(on an open class) 147.27 485.62 T
(in a sealed domain) 147.27 469.62 T
(highly optimizab) 271.27 501.62 T
(le) 349.91 501.62 T
(other libr) 271.27 485.62 T
(ar) 313.95 485.62 T
(ies can add methods) 323.9 485.62 T
(other libr) 271.27 469.62 T
(ar) 313.95 469.62 T
(ies can subclass) 323.9 469.62 T
(open gener) 147.27 446.62 T
(ic function) 203.09 446.62 T
(on an open class) 147.27 430.62 T
(not optimizab) 271.27 446.62 T
(le) 336.47 446.62 T
(methods can be added at r) 271.27 430.62 T
(un time) 402.29 430.62 T
(subclasses can be created at r) 271.27 414.62 T
(un time) 420.62 414.62 T
99.65 376.96 513.65 384.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 183.71 388.29 T
(ab) 189.02 388.29 T
(le 19.1) 200.59 388.29 T
8 F
(Methods: \337e) 236.73 388.29 T
(xibility v) 290.9 388.29 T
(ersus perf) 325.65 388.29 T
(or) 369.81 388.29 T
(mance) 378.95 388.29 T
(.) 408.81 388.29 T
8 11 Q
(Constr) 180.47 297.63 T
(uct) 213.03 297.63 T
(Eff) 353.08 297.63 T
(ects) 366.2 297.63 T
(module constants) 147 272.63 T
(enf) 273.17 272.63 T
(orce prog) 288.13 272.63 T
(r) 334.48 272.63 T
(am correctness) 338.03 272.63 T
(module v) 147 249.63 T
(ar) 191.35 249.63 T
(iab) 201.3 249.63 T
(les) 215.75 249.63 T
(per) 273.17 249.63 T
(mit type inf) 289.34 249.63 T
(erencing) 342.19 249.63 T
(required par) 147 226.63 T
(ameters) 206.19 226.63 T
(required f) 273.17 226.63 T
(or method dispatch) 319.3 226.63 T
(per) 273.17 210.63 T
(mit type inf) 289.34 210.63 T
(erencing) 342.19 210.63 T
99.65 172.97 513.65 180.96 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 169.35 184.29 T
(ab) 174.66 184.29 T
(le 19.2) 186.23 184.29 T
8 F
(T) 222.37 184.29 T
(ype constr) 227.28 184.29 T
(aint: \337e) 273.31 184.29 T
(xibility v) 305.25 184.29 T
(ersus perf) 340 184.29 T
(or) 384.16 184.29 T
(mance) 393.3 184.29 T
(.) 423.16 184.29 T
141.27 658.83 141.27 405.08 2 L
V
0.25 H
0 Z
N
472.02 658.83 472.02 405.08 2 L
V
N
141.15 658.95 472.15 658.95 2 L
V
N
141.15 631.95 472.15 631.95 2 L
V
N
141.15 404.95 472.15 404.95 2 L
V
N
141 312.84 141 201.09 2 L
V
N
472.29 312.84 472.29 201.09 2 L
V
N
140.88 312.96 472.42 312.96 2 L
V
N
140.88 285.96 472.42 285.96 2 L
V
N
140.88 200.96 472.42 200.96 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "336" 350
%%Page: "337" 351
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(19.15 Summary) 446.14 702.62 T
2 F
(337) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
8 11 Q
0 X
(optional par) 147 632.62 T
(ameters) 204.37 632.62 T
(per) 273.17 632.62 T
(mit type inf) 289.34 632.62 T
(erencing) 342.19 632.62 T
(retur) 147 609.62 T
(n v) 169.89 609.62 T
(alues) 184.29 609.62 T
(enf) 273.17 609.62 T
(orce prog) 288.13 609.62 T
(r) 334.48 609.62 T
(am correctness) 338.03 609.62 T
(per) 273.17 593.62 T
(mit type inf) 289.34 593.62 T
(erencing) 342.19 593.62 T
(limited types) 147 570.62 T
(per) 273.17 570.62 T
(mit type inf) 289.34 570.62 T
(erencing) 342.19 570.62 T
(per) 273.17 554.62 T
(mit compact data representation) 289.34 554.62 T
( slots) 147 531.62 T
(per) 273.17 531.62 T
(mit type inf) 289.34 531.62 T
(erencing) 342.19 531.62 T
(Constr) 180.47 657.62 T
(uct) 213.03 657.62 T
(Eff) 353.08 657.62 T
(ects) 366.2 657.62 T
99.65 493.96 513.65 501.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 143 505.29 T
(ab) 148.31 505.29 T
(le 19.2) 159.88 505.29 T
8 F
(T) 196.02 505.29 T
(ype constr) 200.93 505.29 T
(aint: \337e) 246.96 505.29 T
(xibility v) 278.9 505.29 T
(ersus perf) 313.65 505.29 T
(or) 357.81 505.29 T
(mance) 366.95 505.29 T
(.) 396.81 505.29 T
9 F
( \050contin) 399.59 505.29 T
(ued\051) 432.28 505.29 T
141 672.83 141 522.08 2 L
V
0.25 H
0 Z
N
472.29 672.83 472.29 522.08 2 L
V
N
140.88 672.95 472.42 672.95 2 L
V
N
140.88 645.95 472.42 645.95 2 L
V
N
140.88 521.95 472.42 521.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "337" 351
%%Page: "338" 352
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "338" 352
%%Page: "339" 353
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(339) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(20) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(20) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Exceptions) 101.65 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(An) 99.65 449.62 T
2 F
(exception) 117.36 449.62 T
1 F
( is an unexpected event that occurs during pr) 165.63 449.62 T
(ogram execution \050as) 385.12 449.62 T
(opposed to pr) 99.65 435.62 T
(oblems detected during pr) 167.39 435.62 T
(ogram compilation\051. One common type) 296.05 435.62 T
(of exception is a violation of the contract of a function, such as attempting to) 99.65 421.62 T
(divide a number by zer) 99.65 407.62 T
(o. Another example is an attempt to access an uninitial-) 213.04 407.62 T
(ized slot, or certain cases of an attempt to violate the type constraint on a slot or) 99.65 393.62 T
(variable \050those that cannot be detected at compile time\051. Dylan detects all these) 99.65 379.62 T
-0.25 (exceptions itself. Sometimes, an application detects a violation of a contract that it) 99.65 365.62 P
-0.12 (de\336nes. For example, in Section 10.6, page 128, we de\336ned methods that detected) 99.65 351.62 P
(attempts to specify a longitude dir) 99.65 337.62 T
(ection of anything other than east or west. \050In) 266.62 337.62 T
(Section 19.5, page 318, we changed the application such that this particular appli-) 99.65 323.62 T
(cation-detected exception was transformed into one that is detected by Dylan.\051) 99.65 309.62 T
-0.02 (When an an unusual event occurs in an application, ther) 126.65 295.62 P
-0.02 (e ar) 400.32 295.62 P
-0.02 (e many options) 417.97 295.62 P
-0.05 (available for r) 99.65 281.62 P
-0.05 (esponding to that event. The application can try to handle the situa-) 166.88 281.62 P
(tion in its own particular way) 99.65 267.62 T
(, or it can use the) 242.6 267.62 T
2 F
(exception protocol) 327.6 267.62 T
1 F
( de\336ned by) 420.18 267.62 T
(Dylan. In this chapter) 99.65 253.62 T
(, we explor) 204.13 253.62 T
(e several appr) 257.73 253.62 T
(oaches to pr) 325.83 253.62 T
(oviding an exception) 384.4 253.62 T
(pr) 99.65 239.62 T
(otocol between parts of an application.) 110.41 239.62 T
3 15 Q
(20.1  An inf) 99.65 199.95 T
(ormal e) 165.05 199.95 T
(xception pr) 208.64 199.95 T
(otocol) 274.71 199.95 T
1 11 Q
(Our goal is to modify the method that adds a) 99.65 179.62 T
4 10 Q
(<time-offset>) 321.61 179.62 T
1 11 Q
( instance to a) 399.61 179.62 T
4 10 Q
-0.22 (<time-of-day>) 99.65 165.62 P
1 11 Q
-0.1 ( instance. W) 177.65 165.62 P
-0.1 (e r) 235.59 165.62 P
-0.1 (ede\336ne that method to detect over\337ow beyond the) 247.65 165.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "339" 353
%%Page: "340" 354
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(340) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.11 (24-hour period cover) 99.65 665.62 P
-0.11 (ed by a time of day) 201.65 665.62 P
-0.11 (, and to take special action in that case. In) 293.08 665.62 P
(this section, we show a simple way to indicate and handle exceptions, without) 99.65 651.62 T
(using the Dylan exception pr) 99.65 637.62 T
(otocol. W) 240.32 637.62 T
(e then discuss the pr) 285.49 637.62 T
(oblems with this infor-) 384.87 637.62 T
(mal appr) 99.65 623.62 T
(oach. In Section 20.2, we achieve the same goal using Dylan conditions,) 143.68 623.62 T
(and discuss the advantages of that appr) 99.65 609.62 T
(oach.) 292.54 609.62 T
3 13 Q
(20.1.1  The) 99.65 575.29 T
4 14 Q
(+) 157.13 575.29 T
3 13 Q
( method using inf) 165.53 575.29 T
(ormal e) 254.18 575.29 T
(xceptions) 291.96 575.29 T
1 11 Q
(First, we r) 99.65 549.62 T
(ede\336ne the method for adding) 148.4 549.62 T
4 10 Q
(<time-offset>) 299.36 549.62 T
1 11 Q
( and) 377.36 549.62 T
4 10 Q
(<time-of-day>) 401.49 549.62 T
1 11 Q
(\050this method was last de\336ned in Section 14.3.2, page 228\051. The method now) 99.65 535.62 T
(r) 99.65 521.62 T
(eturns an err) 103.79 521.62 T
(or string in the event that the computed sum is beyond the permit-) 165.86 521.62 T
(ted 24-hour range:) 99.65 507.62 T
4 9 Q
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 99.65 483.95 T
(=> \050sum :: type-union\050<time-of-day>, <string>\051\051) 105.05 472.95 T
(let sum) 110.45 461.95 T
(= make\050<time-of-day>,) 121.25 450.95 T
(total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 159.05 439.95 T
(if \050sum >= $midnight & sum < $tomorrow\051) 110.45 428.95 T
(sum;) 121.25 417.95 T
(else) 110.45 406.95 T
("time boundary violated";) 115.85 395.95 T
(end if;) 110.45 384.95 T
(end method \134+;) 99.65 373.95 T
1 11 Q
-0.29 (W) 99.65 347.62 P
-0.29 (e have alter) 109.64 347.62 P
-0.29 (ed the) 164.91 347.62 P
4 10 Q
-0.64 (+) 197.07 347.62 P
1 11 Q
-0.29 (method in two important ways. First, we have modi\336ed the) 205.82 347.62 P
(original values declaration,) 99.65 333.62 T
4 10 Q
(\050sum :: <time-of-day>\051) 234.72 333.62 T
1 11 Q
(, to allow the r) 366.72 333.62 T
(eturn of) 436.55 333.62 T
(either a) 99.65 319.62 T
4 10 Q
(<time-of-day>) 138.72 319.62 T
1 11 Q
( instance or a string describing a pr) 216.72 319.62 T
(oblem. Second, we) 387.19 319.62 T
(have added code that checks the computed time of day) 99.65 305.62 T
(, and r) 366.12 305.62 T
(eturns an err) 397.14 305.62 T
(or) 459.2 305.62 T
(string if the sum is out of bounds.) 99.65 291.62 T
(T) 126.65 277.62 T
(o illustrate further how the informal exceptions work, we de\336ne a method) 132.38 277.62 T
(that calls the) 99.65 263.62 T
4 10 Q
(+) 163.68 263.62 T
1 11 Q
(method de\336ned in this section. W) 172.43 263.62 T
(e de\336ne a method,) 335.12 263.62 T
4 10 Q
(correct-) 427.65 263.62 T
(arrival-time) 99.65 249.62 T
1 11 Q
(, that adds pr) 171.65 249.62 T
(edicted weather and traf) 236.09 249.62 T
(\336c delays to an arrival time;) 355.05 249.62 T
(and we de\336ne) 99.65 235.62 T
4 10 Q
(say-corrected-time) 171.28 235.62 T
1 11 Q
(, which calls) 279.28 235.62 T
4 10 Q
(correct-arrival-time) 341.79 235.62 T
1 11 Q
( and) 461.79 235.62 T
(displays the r) 99.65 221.62 T
(esults:) 165.23 221.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "340" 354
%%Page: "341" 355
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.1 An informal exception protocol) 370.07 702.62 T
2 F
(341) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method correct-arrival-time) 99.65 666.95 T
(\050arrival-time :: <time-of-day>, weather-delay :: <time-offset>,) 121.25 655.95 T
(traffic-delay :: <time-offset>\051) 126.65 644.95 T
(=> \050sum :: type-union\050<time-of-day>, <string>\051\051) 105.05 633.95 T
(let sum1 = weather-delay + arrival-time;) 110.45 622.95 T
5 F
(// Check whether the result of + was a string representing an error) 110.45 611.95 T
4 F
(if \050instance?\050sum1, <string>\051\051) 110.45 600.95 T
(sum1;) 121.25 589.95 T
(else) 110.45 578.95 T
5 F
(// Otherwise, if there is no error, compute the second part of the sum) 121.25 567.95 T
4 F
(traffic-delay + sum1;) 121.25 556.95 T
(end if;) 110.45 545.95 T
(end method correct-arrival-time;) 99.65 534.95 T
(define constant $no-time = make\050<time-offset>, total-seconds: 0\051;) 99.65 515.95 T
(define method say-corrected-time) 99.65 496.95 T
(\050arrival-time :: <time-of-day>,) 121.25 485.95 T
(#key weather-delay :: <time-offset> = $no-time,) 126.65 474.95 T
(traffic-delay :: <time-offset> = $no-time\051) 126.65 463.95 T
(=> \050\051) 105.05 452.95 T
(let result = correct-arrival-time\050arrival-time, weather-delay,) 110.45 441.95 T
(traffic-delay\051;) 294.05 430.95 T
5 F
(// Check whether the result of + was a string representing an error) 110.45 419.95 T
4 F
(if \050instance?\050result, <string>\051\051) 110.45 408.95 T
(format-out\050"Error during time correction: %s", result\051;) 121.25 397.95 T
(else) 110.45 386.95 T
5 F
(// Otherwise, if there is no error, display the result) 121.25 375.95 T
4 F
(say\050result\051;) 121.25 364.95 T
(end if;) 110.45 353.95 T
(end method say-corrected-time;) 99.65 342.95 T
3 13 Q
(20.1.2  Pr) 99.65 313.29 T
(ob) 146.28 313.29 T
(lems with the inf) 159.21 313.29 T
(ormal e) 242.54 313.29 T
(xception pr) 280.32 313.29 T
(otocol) 337.59 313.29 T
1 11 Q
(Ther) 99.65 293.62 T
(e ar) 122.21 293.62 T
(e several signi\336cant pr) 139.88 293.62 T
(oblems with the appr) 249.23 293.62 T
(oach used in Section 20.1.1:) 352.9 293.62 T
(\245) 108.65 273.62 T
(As we saw in the) 126.65 273.62 T
4 10 Q
(correct-arrival-time) 212.26 273.62 T
1 11 Q
( method, most callers of the) 332.26 273.62 T
4 10 Q
(+) 469.17 273.62 T
1 11 Q
(function must check the type of the value r) 126.65 259.62 T
(eturned. This type checking) 334.31 259.62 T
(br) 126.65 245.62 T
(eaks up the normal \337ow of contr) 136.88 245.62 T
(ol, and gives as much weight to the) 295.16 245.62 T
(unusual case \050the exception\051 as it does to the usual case. If a caller fails to) 126.65 231.62 T
(check the r) 126.65 217.62 T
(eturn value to see whether that value is a string, then a dif) 179.11 217.62 T
(fer) 461.27 217.62 T
(ent) 474.35 217.62 T
(err) 126.65 203.62 T
(or will occur later in the pr) 140.41 203.62 T
(ogram \050such as adding a string and time) 270.31 203.62 T
(together\051, when it might be har) 126.65 189.62 T
(d to trace back the pr) 277.84 189.62 T
(oblem to the original) 380.09 189.62 T
(point of failur) 126.65 175.62 T
(e. Note that both dir) 193.97 175.62 T
(ect callers of) 292.21 175.62 T
4 10 Q
(+) 354.93 175.62 T
1 11 Q
( \050) 360.93 175.62 T
4 10 Q
(correct-arrival-time) 367.34 175.62 T
1 11 Q
(\051) 487.34 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "341" 355
%%Page: "342" 356
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(342) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(and indir) 126.65 665.62 T
(ect callers of) 171.69 665.62 T
4 10 Q
(+) 234.41 665.62 T
1 11 Q
( \050) 240.41 665.62 T
4 10 Q
(say-corrected-time) 246.83 665.62 T
1 11 Q
(\051 must understand and use) 354.83 665.62 T
(this err) 126.65 651.62 T
(or pr) 161.01 651.62 T
(otocol corr) 184.87 651.62 T
(ectly) 236.69 651.62 T
(.) 258.53 651.62 T
(\245) 108.65 631.62 T
(For other methods that might r) 126.65 631.62 T
(eturn any object \050including strings, for) 277.07 631.62 T
-0.03 (example\051, an additional r) 126.65 617.62 P
-0.03 (eturn value would have to be used to indicate that) 248.56 617.62 P
(an exception occurr) 126.65 603.62 T
(ed. It would be easy to for) 221.85 603.62 T
(get to check the extra r) 348.43 603.62 T
(eturn) 458.08 603.62 T
(value and such failur) 126.65 589.62 T
(e could easily go undetected, causing unpr) 229.27 589.62 T
(edictable) 436.84 589.62 T
(pr) 126.65 575.62 T
(ogram behavior) 137.41 575.62 T
(. If the method is being added to a generic function in) 214.04 575.62 T
(another library) 126.65 561.62 T
(, it might be impossible to add a second r) 198.48 561.62 T
(eturn value indicat-) 397.88 561.62 T
(ing failur) 126.65 547.62 T
(e, because the generic function might limit the number of r) 171.46 547.62 T
(eturn) 456.24 547.62 T
(values.) 126.65 533.62 T
(\245) 108.65 513.62 T
(A casual r) 126.65 513.62 T
(eader of the code could become easily confused about this ad hoc) 175.24 513.62 T
(err) 126.65 499.62 T
(or pr) 140.41 499.62 T
(otocol. Someone might inadvertently write code that did not obey) 164.27 499.62 T
-0.05 (this ad hoc pr) 126.65 485.62 P
-0.05 (otocol. Also, if all pr) 192.88 485.62 P
-0.05 (ogrammers use their own err) 290.83 485.62 P
-0.05 (or pr) 432.03 485.62 P
-0.05 (otocols,) 455.84 485.62 P
(it will be har) 126.65 471.62 T
(d to r) 187.86 471.62 T
(emember which convention to obey at the call site; pr) 213.82 471.62 T
(o-) 473.09 471.62 T
(grammers will have to check the convention in the sour) 126.65 457.62 T
(ce code or pr) 396.31 457.62 T
(ogram-) 458.7 457.62 T
(mer documentation.) 126.65 443.62 T
(\245) 108.65 423.62 T
(In this example, the ability to r) 126.65 423.62 T
(estrict the r) 274.98 423.62 T
(eturn value to only) 329.42 423.62 T
4 10 Q
(<time-of-) 424.79 423.62 T
-0.06 (day>) 126.65 409.62 P
1 11 Q
-0.03 ( is lost. This loss might pr) 150.65 409.62 P
-0.03 (event compile-time err) 274.36 409.62 P
-0.03 (or checking that could) 384.62 409.62 P
(catch err) 126.65 395.62 T
(ors that would be dif) 168.41 395.62 T
(\336cult or inconvenient to catch at r) 269.98 395.62 T
(un time. It) 433.22 395.62 T
(might also pr) 126.65 381.62 T
(event the compiler fr) 191.29 381.62 T
(om optimizing code that uses the r) 292.58 381.62 T
(esults) 460.93 381.62 T
(of this function, thus decr) 126.65 367.62 T
(easing performance of the application.) 251 367.62 T
(\245) 108.65 347.62 T
-0.12 (W) 126.65 347.62 P
-0.12 (e ar) 136.64 347.62 P
-0.12 (e limited in how we can r) 154.18 347.62 P
-0.12 (espond to the err) 276.67 347.62 P
-0.12 (or) 358.84 347.62 P
-0.12 (. The context in which the) 368.38 347.62 P
-0.04 (err) 126.65 333.62 P
-0.04 (or was detected has been lost. Ther) 140.41 333.62 P
-0.04 (e is no state we can examine to gather) 310.03 333.62 P
(mor) 126.65 319.62 T
(e details about the err) 146.51 319.62 T
(or) 251.75 319.62 T
(, and to determine why the err) 261.29 319.62 T
(or occurr) 409.24 319.62 T
(ed. W) 453.24 319.62 T
(e) 480.72 319.62 T
(also cannot corr) 126.65 305.62 T
(ect whatever caused the pr) 203.68 305.62 T
(oblem, then continue fr) 333.87 305.62 T
(om the) 446.99 305.62 T
(point wher) 126.65 291.62 T
(e the err) 180.2 291.62 T
(or occurr) 219.98 291.62 T
(ed.) 263.98 291.62 T
3 15 Q
(20.2  A simple Dylan e) 99.65 251.95 T
(xception pr) 228.71 251.95 T
(otocol) 294.78 251.95 T
1 11 Q
(In Sections 20.2.1 thr) 99.65 231.62 T
(ough 20.2.4, we show how to modify the thr) 199.43 231.62 T
(ee methods in) 413.51 231.62 T
(Section 20.1.1 to use the basic tools that Dylan pr) 99.65 217.62 T
(ovides for indicating and) 335.8 217.62 T
(r) 99.65 203.62 T
(esponding to exceptional situations.) 103.79 203.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "342" 356
%%Page: "343" 357
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(343) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 13 Q
0 X
(20.2.1  Signaling conditions) 99.65 664.29 T
1 11 Q
(Dylan pr) 99.65 644.62 T
(ovides a str) 142.89 644.62 T
(uctur) 198.47 644.62 T
(ed mechanism for indicating that an unusual event or) 224.35 644.62 T
(exceptional situation has occurr) 99.65 630.62 T
(ed during the execution of a pr) 253.75 630.62 T
(ogram. Using this) 403.77 630.62 T
(mechanism is called) 99.65 616.62 T
2 F
(signaling a condition) 200.29 616.62 T
1 F
(. A) 306.6 616.62 T
2 F
(condition) 323.41 616.62 T
1 F
( is an instance of the) 371.68 616.62 T
4 10 Q
-0.69 (<condition>) 99.65 602.62 P
1 11 Q
-0.32 ( class, which r) 165.65 602.62 P
-0.32 (epr) 232.82 602.62 P
-0.32 (esents a pr) 248.85 602.62 P
-0.32 (oblem or unusual situation encounter) 299.83 602.62 P
-0.32 (ed) 481.23 602.62 P
(during pr) 99.65 588.62 T
(ogram execution.) 146.57 588.62 T
(T) 126.65 574.62 T
(o signal a condition, we need to take these steps:) 132.38 574.62 T
2 F
(1.) 108.65 554.62 T
1 F
-0.27 (De\336ne a condition class, which must be a subclass of) 126.65 554.62 P
4 10 Q
-0.6 (<condition>) 382.57 554.62 P
1 11 Q
-0.27 (. The con-) 448.57 554.62 P
-0.31 (dition class should have slots that ar) 126.65 540.62 P
-0.31 (e appr) 301.2 540.62 P
-0.31 (opriate for the application. In this) 331.78 540.62 P
(example, we de\336ne a condition class named) 126.65 526.62 T
4 10 Q
(<time-error>) 343.07 526.62 T
1 11 Q
( to be a dir) 415.07 526.62 T
(ect) 466.59 526.62 T
(subclass of) 126.65 512.62 T
4 10 Q
(<error>) 182.11 512.62 T
1 11 Q
(. Note that) 224.11 512.62 T
4 10 Q
(<error>) 278.19 512.62 T
1 11 Q
( is a subclass of) 320.19 512.62 T
4 10 Q
(<condition>) 397.26 512.62 T
1 11 Q
(. W) 463.26 512.62 T
(e) 478.75 512.62 T
-0.22 (de\336ned) 126.65 498.62 P
4 10 Q
-0.48 (<time-error>) 166.22 498.62 P
1 11 Q
-0.22 ( to inherit fr) 238.22 498.62 P
-0.22 (om) 295.62 498.62 P
4 10 Q
-0.48 (<error>) 313.87 498.62 P
1 11 Q
-0.22 (, because in case our applica-) 355.87 498.62 P
(tion does not handle the exception, we want Dylan always to take some) 126.65 484.62 T
(action, such as entering a debugger) 126.65 470.62 T
(. If) 297.3 470.62 T
4 10 Q
(<time-error>) 312.92 470.62 T
1 11 Q
( inherited fr) 384.92 470.62 T
(om) 442.63 470.62 T
4 10 Q
(<con-) 461.1 470.62 T
(dition>) 126.65 456.62 T
1 11 Q
( and the application failed to handle the exception, then the excep-) 168.65 456.62 T
(tion might simply be ignor) 126.65 442.62 T
(ed.) 256.59 442.62 T
2 F
(2.) 108.65 422.62 T
1 F
(Modify the functions that might detect the exception. These functions must) 126.65 422.62 T
-0.07 (make an instance of the condition class, and must use an appr) 126.65 408.62 P
-0.07 (opriate Dylan) 426.05 408.62 P
(function to initiate the signaling pr) 126.65 394.62 T
(ocess. In this example, we r) 295.53 394.62 T
(ede\336ne the) 428.06 394.62 T
4 10 Q
(+) 126.65 380.62 T
1 11 Q
(method to signal the condition with the) 138.65 380.62 T
4 10 Q
(error) 333.56 380.62 T
1 11 Q
( function.) 363.56 380.62 T
(In the following code, we de\336ne a condition named) 99.65 360.62 T
4 10 Q
(<time-error>) 352.64 360.62 T
1 11 Q
( to r) 424.64 360.62 T
(epr) 443.88 360.62 T
(esent) 459.9 360.62 T
(any kind of time err) 99.65 346.62 T
(or) 196.3 346.62 T
(, and we de\336ne a condition named) 205.84 346.62 T
4 10 Q
(<time-boundary-) 376.74 346.62 T
(error>) 99.65 332.62 T
1 11 Q
( to r) 135.65 332.62 T
(epr) 154.89 332.62 T
(esent violations of time-of-day bounds.) 170.91 332.62 T
4 9 Q
(define abstract class <time-error> \050<error>\051) 99.65 308.95 T
(constant slot invalid-time :: <time>, required-init-keyword: invalid-time:;) 110.45 297.95 T
(end class <time-error>;) 99.65 286.95 T
(define method say \050condition :: <time-error>\051 => \050\051) 99.65 267.95 T
(format-out\050"The time "\051;) 110.45 256.95 T
(say\050condition.invalid-time\051;) 110.45 245.95 T
(format-out\050" is invalid."\051;) 110.45 234.95 T
(end method say;) 99.65 223.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "343" 357
%%Page: "344" 358
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(344) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define class <time-boundary-error> \050<time-error>\051) 99.65 666.95 T
5 F
(// Inclusive bound) 110.45 655.95 T
4 F
(constant slot min-valid-time) 110.45 644.95 T
(:: <time>, required-init-keyword: min-time:;) 121.25 633.95 T
5 F
(// Exclusive bound) 110.45 622.95 T
4 F
(constant slot valid-time-limit) 110.45 611.95 T
(:: <time>, required-init-keyword: time-limit:;) 121.25 600.95 T
(end class <time-boundary-error>;) 99.65 589.95 T
(define method say \050condition :: <time-boundary-error>\051 => \050\051) 99.65 570.95 T
(next-method\050\051;) 110.45 559.95 T
(format-out\050"\134nIt must not be less than "\051;) 110.45 548.95 T
(say\050condition.min-valid-time\051;) 110.45 537.95 T
(format-out\050" and must be less than "\051;) 110.45 526.95 T
(say\050condition.valid-time-limit\051;) 110.45 515.95 T
(format-out\050"."\051;) 110.45 504.95 T
(end method say;) 99.65 493.95 T
1 11 Q
(W) 99.65 473.62 T
(e r) 109.64 473.62 T
(ede\336ne the) 121.8 473.62 T
4 10 Q
(+) 178.14 473.62 T
1 11 Q
(method to signal the) 186.89 473.62 T
4 10 Q
(<time-boundary-error>) 289.52 473.62 T
1 11 Q
( condition) 415.52 473.62 T
(\050instead of r) 99.65 459.62 T
(eturning an err) 157.97 459.62 T
(or string\051 to indicate that this pr) 231.09 459.62 T
(oblem has occurr) 385.96 459.62 T
(ed:) 469.19 459.62 T
4 9 Q
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 99.65 438.95 T
(=> \050sum :: <time-of-day>\051) 110.45 427.95 T
(let sum) 110.45 416.95 T
(= make\050<time-of-day>,) 121.25 405.95 T
(total-seconds:) 159.05 394.95 T
(offset.total-seconds + time-of-day.total-seconds\051;) 169.85 383.95 T
(if \050sum >= $midnight & sum < $tomorrow\051) 110.45 372.95 T
(sum;) 121.25 361.95 T
(else) 110.45 350.95 T
(error\050make\050<time-boundary-error>, invalid-time: sum,) 121.25 339.95 T
(min-time: $midnight, time-limit: $tomorrow\051\051;) 180.65 328.95 T
(end if;) 110.45 317.95 T
(end method \134+;) 99.65 306.95 T
1 11 Q
-0.09 (W) 99.65 286.62 P
-0.09 (e cr) 109.64 286.62 P
-0.09 (eate the condition with) 126.6 286.62 P
4 10 Q
-0.2 (make) 240.88 286.62 P
1 11 Q
-0.09 (, just as we cr) 264.89 286.62 P
-0.09 (eate instances of other classes. W) 329.37 286.62 P
-0.09 (e) 487.72 286.62 P
(call the) 99.65 272.62 T
4 10 Q
(error) 137.19 272.62 T
1 11 Q
( function to signal the condition. The) 167.19 272.62 T
4 10 Q
(error) 348.72 272.62 T
1 11 Q
( function is guaranteed) 378.72 272.62 T
(never to r) 99.65 258.62 T
(eturn to its caller) 146.39 258.62 T
(.) 227.5 258.62 T
(Now we can specify an exact r) 126.65 244.62 T
(eturn value for the) 274.07 244.62 T
4 10 Q
(+) 367.39 244.62 T
1 11 Q
(method, because we ar) 376.14 244.62 T
(e) 487.23 244.62 T
(no longer r) 99.65 230.62 T
(eturning an err) 153.04 230.62 T
(or string to indicate a pr) 226.16 230.62 T
(oblem with the addition.) 343.19 230.62 T
(In pr) 126.65 216.62 T
(evious chapters \050for example, in Section 6.1.3, page 78\051, we called the) 150.26 216.62 T
4 10 Q
(error) 99.65 202.62 T
1 11 Q
( function with a string. Given a string as its \336rst ar) 129.65 202.62 T
(gument, the) 373.41 202.62 T
4 10 Q
(error) 434.63 202.62 T
1 11 Q
( func-) 464.63 202.62 T
(tion cr) 99.65 188.62 T
(eates a general-purpose condition named) 130.62 188.62 T
4 10 Q
(<simple-error>) 334.08 188.62 T
1 11 Q
( and stor) 418.08 188.62 T
(es its) 460.61 188.62 T
(ar) 99.65 174.62 T
(guments in the condition instance. In the pr) 109.29 174.62 T
(eceding example, however) 320.98 174.62 T
(, we cr) 450.2 174.62 T
(e-) 481.92 174.62 T
(ated an instance of a condition that is customized for our pr) 99.65 160.62 T
(ogram \050) 389.23 160.62 T
4 10 Q
(<time-) 427.33 160.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "344" 358
%%Page: "345" 359
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(345) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
(boundary-error>) 99.65 665.62 T
1 11 Q
(\051, and then supplied that condition to the) 189.65 665.62 T
4 10 Q
(error) 391.59 665.62 T
1 11 Q
( function. This) 421.59 665.62 T
-0.44 (appr) 99.65 651.62 P
-0.44 (oach pr) 122.52 651.62 P
-0.44 (ovides information that is mor) 158.38 651.62 P
-0.44 (e r) 304.53 651.62 P
-0.44 (eadily accessible to the code that will) 316.26 651.62 P
(handle the condition. Conditions, like any other Dylan class, can use inheritance,) 99.65 637.62 T
(and can participate in generic function dispatch. For example, we de\336ne) 99.65 623.62 T
4 10 Q
(say) 453 623.62 T
1 11 Q
(methods for our err) 99.65 609.62 T
(ors, so that our handlers can pr) 195.02 609.62 T
(ovide a r) 346.06 609.62 T
(easonable err) 388.62 609.62 T
(or mes-) 453.02 609.62 T
-0.27 (sage to the user) 99.65 595.62 P
-0.27 (. \050Unfortunately) 173.59 595.62 P
-0.27 (, Dylan debuggers do not yet have a standar) 250.53 595.62 P
-0.27 (d way) 463.17 595.62 P
(to know about our) 99.65 581.62 T
4 10 Q
(say) 192.73 581.62 T
1 11 Q
( generic function. W) 210.73 581.62 T
(e expect that Dylan will eventually) 307.98 581.62 T
(support such a mechanism.\051) 99.65 567.62 T
-0.38 (Supplying a speci\336c condition to the) 126.65 553.62 P
4 10 Q
-0.83 (error) 304.45 553.62 P
1 11 Q
-0.38 ( function brings the full power of) 334.45 553.62 P
(Dylan\325s object-oriented pr) 99.65 539.62 T
(ogramming capabilities to the task of signaling and) 226.23 539.62 T
(handling exceptional situations.) 99.65 525.62 T
-0.18 (Once the) 126.65 511.62 P
4 10 Q
-0.39 (error) 172.25 511.62 P
1 11 Q
-0.18 ( function r) 202.25 511.62 P
-0.18 (eceives a condition instance, or makes an instance) 252.32 511.62 P
(of) 99.65 497.62 T
4 10 Q
(<simple-error>) 112.07 497.62 T
1 11 Q
( itself, Dylan begins a pr) 196.07 497.62 T
(ocess of attempting to r) 313.88 497.62 T
(esolve the sit-) 427.34 497.62 T
(uation r) 99.65 483.62 T
(epr) 137.87 483.62 T
(esented by the condition. W) 153.9 483.62 T
(e pr) 288.68 483.62 T
(esent the details of condition r) 307.46 483.62 T
(esolu-) 454.02 483.62 T
(tion in the next section.) 99.65 469.62 T
3 13 Q
(20.2.2  Simple condition handling) 99.65 438.29 T
1 11 Q
(A) 99.65 418.62 T
2 F
(handler) 110.96 418.62 T
1 F
( can potentially r) 150.06 418.62 T
(esolve an exceptional situation, although a handler) 231.92 418.62 T
(can decline to r) 99.65 404.62 T
(esolve a particular exception. If an application pr) 173.37 404.62 T
(ovides no han-) 410.94 404.62 T
(dlers, then the generic function) 99.65 390.62 T
4 10 Q
(default-handler) 253.53 390.62 T
1 11 Q
( is called on the condition.) 343.53 390.62 T
(Ther) 99.65 376.62 T
(e is a method on) 122.21 376.62 T
4 10 Q
(<condition>) 204.7 376.62 T
1 11 Q
( that just r) 270.7 376.62 T
(eturns false, and ther) 319.63 376.62 T
(e is a method) 421.85 376.62 T
(on) 99.65 362.62 T
4 10 Q
(<serious-condition>) 114.81 362.62 T
1 11 Q
( \050a super) 228.81 362.62 T
(class of) 270.79 362.62 T
4 10 Q
(<error>) 308.88 362.62 T
1 11 Q
(\051 that causes some kind of) 350.88 362.62 T
(implementation-speci\336c r) 99.65 348.62 T
(esponse to be invoked. Most development envir) 224.04 348.62 T
(on-) 457.2 348.62 T
(ments pr) 99.65 334.62 T
(ovide a debugger that deals with any serious conditions not handled by) 142.79 334.62 T
(the application. T) 99.65 320.62 T
(ypically) 183.61 320.62 T
(, the debugger describes the serious condition being sig-) 221.22 320.62 T
(naled, and might pr) 99.65 306.62 T
(ovide any number of options for r) 196.14 306.62 T
(ecovery \050or might pr) 360.82 306.62 T
(ovide) 460.96 306.62 T
(no r) 99.65 292.62 T
(ecovery options\051. In a sense, the debugger is the handler of \336nal r) 118.95 292.62 T
(esort.) 435.92 292.62 T
(In the following example, we establish a handler for the condition that we) 126.65 278.62 T
(want to r) 99.65 264.62 T
(esolve, befor) 143.55 264.62 T
(e calling the code that might signal that condition. W) 204.84 264.62 T
(e r) 460.9 264.62 T
(ede-) 473.07 264.62 T
(\336ne the) 99.65 250.62 T
4 10 Q
(correct-arrival-time) 138.73 250.62 T
1 11 Q
( and) 258.73 250.62 T
4 10 Q
(say-corrected-time) 282.85 250.62 T
1 11 Q
( methods to take) 390.85 250.62 T
(advantage of the Dylan exception pr) 99.65 236.62 T
(otocol.) 276.53 236.62 T
4 9 Q
(define method correct-arrival-time) 99.65 215.95 T
(\050arrival-time :: <time-of-day>, weather-delay :: <time-offset>,) 121.25 204.95 T
(traffic-delay :: <time-offset>\051) 126.65 193.95 T
(=> \050sum :: <time-of-day>\051) 105.05 182.95 T
(traffic-delay + \050weather-delay + arrival-time\051;) 110.45 171.95 T
(end method correct-arrival-time;) 99.65 160.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "345" 359
%%Page: "346" 360
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(346) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method say-corrected-time) 99.65 666.95 T
(\050arrival-time :: <time-of-day>,) 121.25 655.95 T
(#key weather-delay :: <time-offset> = $no-time,) 126.65 644.95 T
(traffic-delay :: <time-offset> = $no-time\051) 126.65 633.95 T
(=> \050\051) 105.05 622.95 T
(block \050\051) 110.45 611.95 T
(say\050correct-arrival-time\050arrival-time, weather-delay, traffic-delay\051\051;) 121.25 600.95 T
5 F
(// We establish the handler in the following two lines) 110.45 589.95 T
4 F
(exception \050condition :: <time-error>\051) 110.45 578.95 T
(say\050condition\051;) 121.25 567.95 T
(end block;) 110.45 556.95 T
(end method say-corrected-time;) 99.65 545.95 T
1 11 Q
(The) 99.65 525.62 T
4 10 Q
(exception) 120.81 525.62 T
1 11 Q
( clause of) 174.81 525.62 T
4 10 Q
(block) 222.88 525.62 T
1 11 Q
( establishes a handler for a condition, and all that) 252.88 525.62 T
-0.21 (condition\325s subclasses, for any code in the) 99.65 511.62 P
4 10 Q
-0.45 (block) 304.33 511.62 P
1 11 Q
-0.21 ( body) 334.33 511.62 P
-0.21 (, and for any code called by) 360.58 511.62 P
(the) 99.65 497.62 T
4 10 Q
(block) 117.65 497.62 T
1 11 Q
( body) 147.65 497.62 T
(. W) 174.11 497.62 T
(e say that the handler is established within the) 189.6 497.62 T
2 F
(dynamic scope) 417.72 497.62 T
1 F
-0.38 (of the) 99.65 483.62 P
4 10 Q
-0.82 (block) 129.32 483.62 P
1 11 Q
-0.38 ( body) 159.32 483.62 P
-0.38 (. When an exception is signaled, Dylan starts a sear) 185.4 483.62 P
-0.38 (ch to \336nd the) 430.24 483.62 P
(near) 99.65 469.62 T
(est handler available that matches the condition signaled, and that accepts) 120.97 469.62 T
(the exception. The) 99.65 455.62 T
2 F
(nearest handler) 191.22 455.62 T
1 F
( is the one that was most r) 269.12 455.62 T
(ecently established) 395.7 455.62 T
(in the dynamic scope of the signaler) 99.65 441.62 T
(. The handler matches the condition if the) 273.79 441.62 T
(class associated with the handler \050the handler class\051 is the same as the condition,) 99.65 427.62 T
-0.33 (or if the handler class is a super) 99.65 413.62 P
-0.33 (class of the condition. Y) 250.48 413.62 P
-0.33 (ou can associate a test with) 363.48 413.62 P
(the handler so that the handler can selectively accept the condition. By default, a) 99.65 399.62 T
(matching handler always accepts. If a handler established by the) 99.65 385.62 T
4 10 Q
(exception) 415.82 385.62 T
1 11 Q
(clause of) 99.65 371.62 T
4 10 Q
(block) 144.97 371.62 T
1 11 Q
( matches and accepts, then a nonlocal exit fr) 174.97 371.62 T
(om the signaler) 388.06 371.62 T
(occurs, with execution continuing in the body of the exception clause, which is) 99.65 357.62 T
(executed in the context of the very beginning of the block. All the locals de\336ned) 99.65 343.62 T
(by the block ar) 99.65 329.62 T
(e gone, but the exit pr) 171.29 329.62 T
(ocedur) 276.9 329.62 T
(e \050if ther) 310.56 329.62 T
(e is one\051 is still available. If) 351.26 329.62 T
(ther) 99.65 315.62 T
(e is r) 119.05 315.62 T
(elevant local state, it may be captur) 141.83 315.62 T
(ed in slots of the condition prior to) 312.75 315.62 T
-0.23 (signaling of the condition. The code within the exception clause body is executed,) 99.65 301.62 P
-0.35 (and the value of the last statement in that body is then r) 99.65 287.62 P
-0.35 (eturned as the value of the) 365.86 287.62 P
(block.) 99.65 273.62 T
(In this example, the) 126.65 259.62 T
4 10 Q
(+) 224.86 259.62 T
1 11 Q
(method \050called by) 233.61 259.62 T
4 10 Q
(correct-arrival-time) 324.19 259.62 T
1 11 Q
(\051 may sig-) 444.19 259.62 T
(nal a) 99.65 245.62 T
4 10 Q
(<time-boundary-error>) 125.75 245.62 T
1 11 Q
( condition using the) 251.75 245.62 T
4 10 Q
(error) 351.43 245.62 T
1 11 Q
( function during the) 381.43 245.62 T
(execution of) 99.65 231.62 T
4 10 Q
(say-corrected-time) 161.74 231.62 T
1 11 Q
(. If this err) 269.74 231.62 T
(or is signaled, then the handler) 319.73 231.62 T
(established by the) 99.65 217.62 T
4 10 Q
(block) 189.91 217.62 T
1 11 Q
( for) 219.91 217.62 T
4 10 Q
(<time-error>) 239.43 217.62 T
1 11 Q
( will match the) 311.43 217.62 T
4 10 Q
(<time-boundary-) 386.55 217.62 T
(error>) 99.65 203.62 T
1 11 Q
( condition. This) 135.65 203.62 T
4 10 Q
(exception) 214.07 203.62 T
1 11 Q
( clause will always accept the condition, so a) 268.07 203.62 T
(nonlocal exit will occur) 99.65 189.62 T
(, and will terminate execution of the) 211.95 189.62 T
4 10 Q
(error) 390.07 189.62 T
1 11 Q
( function, the) 420.07 189.62 T
4 10 Q
(+) 99.65 175.62 T
1 11 Q
(method, and the) 108.4 175.62 T
4 10 Q
(correct-arrival-time) 190.98 175.62 T
1 11 Q
( method. W) 310.98 175.62 T
(ithin the context of the) 367.32 175.62 T
(beginning of the) 99.65 161.62 T
4 10 Q
(block) 182.02 161.62 T
1 11 Q
(, the variable) 212.02 161.62 T
4 10 Q
(condition) 277.59 161.62 T
1 11 Q
( is bound to the condition) 331.59 161.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "346" 360
%%Page: "347" 361
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(347) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.16 (instance being signaled \050the instance supplied to) 99.65 665.62 P
4 10 Q
-0.34 (error) 337.17 665.62 P
1 11 Q
-0.16 (\051; then, execution r) 367.17 665.62 P
-0.16 (esumes) 456.84 665.62 P
(with the code inside the body of the) 99.65 651.62 T
4 10 Q
(exception) 276.71 651.62 T
1 11 Q
( clause. The body calls the) 330.71 651.62 T
4 10 Q
(say) 460.16 651.62 T
1 11 Q
(generic function on the condition instance, which causes an appr) 99.65 637.62 T
(opriate err) 413.84 637.62 T
(or) 464.87 637.62 T
(message \050instead of the time\051 to be displayed to the user) 99.65 623.62 T
(. Execution then contin-) 371.6 623.62 T
-0.08 (ues normally after the end of the block; in this case, that r) 99.65 609.62 P
-0.08 (esults in the normal exit) 376.5 609.62 P
(fr) 99.65 595.62 T
(om the) 107.46 595.62 T
4 10 Q
(say-corrected-time) 143.93 595.62 T
1 11 Q
( method. Figur) 251.93 595.62 T
(e 20.1 shows the state of execution) 324.09 595.62 T
(when) 99.65 581.62 T
4 10 Q
(error) 129.65 581.62 T
1 11 Q
( is called, and after the execution of the) 159.65 581.62 T
4 10 Q
(exception) 351.88 581.62 T
1 11 Q
( clause body for) 405.88 581.62 T
4 10 Q
(<time-error>) 99.65 567.62 T
1 11 Q
( begins. Figur) 171.65 567.62 T
(e 20.1 is a simpli\336ed diagram of the internal calling) 237.85 567.62 T
(stack of a hypothetical Dylan implementation. It is similar to what a debugger) 99.65 553.62 T
(might pr) 99.65 539.62 T
(oduce when asked to print a backtrace at these two points in the execu-) 142.17 539.62 T
(tion of the example. The) 99.65 525.62 T
4 10 Q
(error) 219.92 525.62 T
1 11 Q
( function called within the) 249.92 525.62 T
4 10 Q
(+) 380.45 525.62 T
1 11 Q
(method signals the) 389.2 525.62 T
4 10 Q
(<time-boundary-error>) 99.65 511.62 T
1 11 Q
( err) 225.65 511.62 T
(or) 242.16 511.62 T
(, and the) 251.7 511.62 T
4 10 Q
(exception) 296.58 511.62 T
1 11 Q
( clause of) 350.58 511.62 T
4 10 Q
(block) 398.65 511.62 T
1 11 Q
( in the) 428.65 511.62 T
4 10 Q
(say-) 461.76 511.62 T
-1.01 (corrected-time) 99.65 497.62 P
1 11 Q
-0.46 ( method establishes the handler for that err) 183.65 497.62 P
-0.46 (or) 389.81 497.62 P
-0.46 (. Once the handling) 399.34 497.62 P
(of the exception is in pr) 99.65 483.62 T
(ogr) 213.45 483.62 T
(ess, the handler selected is no longer established. If) 229.72 483.62 T
(ther) 99.65 469.62 T
(e is r) 119.05 469.62 T
(elevant local state, it may be captur) 141.83 469.62 T
(ed in slots of the condition being) 312.75 469.62 T
(signaled.) 99.65 455.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 169.96 495.65 177.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 20.1) 165.71 181.29 T
8 F
(Conte) 224.07 181.29 T
(xt tr) 250.45 181.29 T
(ansition from signaler to handler) 267.02 181.29 T
(.) 408.8 181.29 T
99.65 193.95 495.65 434.95 C
0 0 0 1 0 0 0 K
99.65 197.95 495.65 432.95 C
0 -392 15 1 238 393 223 101.15 203.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f20-1.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f20-1 .eps)%%CreationDate: (6/6/96) (3:43 PM)%%BoundingBox: -392 15 1 238%%HiResBoundingBox: -391.9917 15.0083 0.6583 237.8782%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: -191 123 -191 123%AI3_TileBox: -466 -243 86 487%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -419 339 2 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4511 4443 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4511 4443 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4511 4443 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A1 Ap0 R0 G800 Ar0 J 0 j 0.65 w 4 M []0 d%AI3_Note:0 D-227.6667 15.3333 m-227.6667 205.3333 L-391.6667 205.3333 L-391.6667 15.3333 L-227.6667 15.3333 Ls0 Ap-391.5 178.75 m-228 178.75 lS-391.5 151.5 m-228 151.5 lS-391.5 124.25 m-228 124.25 lS-391.5 97 m-228 97 lS-391.5 69.75 m-228 69.75 lS-391.5 42.5 m-228 42.5 lS0 To1 0 0 1 -380 229.5 0 TpTP0 Tr0 O0 g1 w/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(State of execution during\r) Tx 0 -11 Td(the signaling of the error.) Tx (\r) TX TO-380 4442.5 m-380 -4197.5 L(N) *0 To1 0 0 1 -379.5 188 0 TpTP0 Tr0 O0 g(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 -379.5 161.5 0 TpTP0 Tr/_Helvetica 9 Tf(Block) Tx (\r) TX TO0 To1 0 0 1 -379.5 134.5 0 TpTP0 Tr(Handler for ) Tx /_Courier-Bold 9 Tf(<time-error>) Tx (\r) TX TO0 To1 0 0 1 -379.5 107.5 0 TpTP0 Tr/_Helvetica 9 Tf(Block body) Tx (\r) TX TO0 To1 0 0 1 -379.5 80.5 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(correct-arrival-time) Tx (\r) TX TO0 To1 0 0 1 -379.5 53.5 0 TpTP0 Tr/_Helvetica 9 Tf(Call to +) Tx (\r) TX TO0 To1 0 0 1 -379.5 26.5 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(error) Tx (\r) TX TO1 Ap0 R0 G0.65 w0.3333 15.3333 m0.3333 205.3333 L-163.6667 205.3333 L-163.6667 15.3333 L0.3333 15.3333 Ls0 Ap-163.5 178.75 m0 178.75 lS-163.5 151.5 m0 151.5 lS-163.5 124.25 m0 124.25 lS-163.5 97 m0 97 lS-163.5 69.75 m0 69.75 lS-163.5 42.5 m0 42.5 lS0 To1 0 0 1 -152 229.5 0 TpTP0 Tr0 O0 g1 w/_Helvetica 9 Tf(State of execution during\r) Tx 0 -11 Td(the handling of the error.) Tx (\r) TX TO0 To1 0 0 1 -151.5 188 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 -151.5 161.5 0 TpTP0 Tr/_Helvetica 9 Tf(Block) Tx (\r) TX TO0 To1 0 0 1 -151.5 134.5 0 TpTP0 Tr(Exception-clause body\003) Tx 0 -11 Td(\r) Tx TOu0 R0 G0.65 w-214 223 m-191 223 lS0 O0 g1 w-192.5458 220.7621 m-184.09 223.0275 l-192.5458 225.2935 l-192.5458 220.7621 lfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 193.95 495.65 434.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "347" 361
%%Page: "348" 362
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(348) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(is in pr) 99.65 665.62 T
(ogr) 133.37 665.62 T
(ess, the handler selected is no longer established. If ther) 149.64 665.62 T
(e is r) 419.4 665.62 T
(elevant) 442.18 665.62 T
(local state, it may be captur) 99.65 651.62 T
(ed in slots of the condition being signaled.) 232.37 651.62 T
(The advantages of this str) 126.65 637.62 T
(uctur) 251.56 637.62 T
(ed appr) 277.45 637.62 T
(oach to signaling and handling con-) 315.06 637.62 T
(ditions ar) 99.65 623.62 T
(e signi\336cant:) 145.83 623.62 T
(\245) 108.65 603.62 T
-0.1 (The method focuses on the normal \337ow of contr) 126.65 603.62 P
-0.1 (ol, and the exceptional \337ow) 359.11 603.62 P
(of contr) 126.65 589.62 T
(ol appears only wher) 164.09 589.62 T
(e necessary) 266.77 589.62 T
(. For example, the) 320.68 589.62 T
4 10 Q
(correct-) 410.14 589.62 T
(arrival-time) 126.65 575.62 T
1 11 Q
( method does not need to be awar) 198.65 575.62 T
(e of the potential excep-) 363.17 575.62 T
(tions at all. The Dylan condition system makes it easier to r) 126.65 561.62 T
(euse code that) 413.1 561.62 T
(might not know about, or car) 126.65 547.62 T
(e to participate in, your application-speci\336c) 268.55 547.62 T
(exception r) 126.65 533.62 T
(ecovery code.) 180.45 533.62 T
(\245) 108.65 513.62 T
(Because) 126.65 513.62 T
4 10 Q
(correct-arrival-time) 168.34 513.62 T
1 11 Q
( does not need to participate in the) 288.34 513.62 T
(exception-r) 126.65 499.62 T
(ecovery pr) 181.36 499.62 T
(otocol, it can also have a speci\336c r) 232.97 499.62 T
(eturn value; thus,) 396.81 499.62 T
(like the) 126.65 485.62 T
4 10 Q
(+) 165.19 485.62 T
1 11 Q
(method, it might allow better compiler optimizations and better) 173.94 485.62 T
(compile-time err) 126.65 471.62 T
(or checking.) 207.48 471.62 T
(\245) 108.65 451.62 T
(W) 126.65 451.62 T
(e allow r) 136.64 451.62 T
(oom for expansion in the code. For example, at some point,) 178.63 451.62 T
4 10 Q
(correct-arrival-time) 126.65 437.62 T
1 11 Q
( might do mor) 246.65 437.62 T
(e sophisticated computations with) 316.51 437.62 T
(time, which might signal other kinds of time err) 126.65 423.62 T
(ors. As long as these new) 359.24 423.62 T
(time err) 126.65 409.62 T
(ors inherit fr) 164.93 409.62 T
(om) 225.66 409.62 T
4 10 Q
(<time-error>) 244.13 409.62 T
1 11 Q
(, they can be r) 316.13 409.62 T
(esolved by the same) 383.54 409.62 T
(handler established by) 126.65 395.62 T
4 10 Q
(say-corrected-time) 239.5 395.62 T
1 11 Q
(. As the application evolves,) 347.5 395.62 T
(we can build various families of err) 126.65 381.62 T
(or conditions, and can pr) 298.62 381.62 T
(ovide applica-) 419.96 381.62 T
(tion-speci\336c handlers that perform the corr) 126.65 367.62 T
(ect r) 335.59 367.62 T
(ecovery actions for those) 356.23 367.62 T
(families.) 126.65 353.62 T
(\245) 108.65 333.62 T
(Because we ar) 126.65 333.62 T
(e using the signaling and handling pr) 195.18 333.62 T
(otocol de\336ned by) 377.35 333.62 T
(Dylan, casual r) 126.65 319.62 T
(eaders of the code should be able to understand our intent.) 199.16 319.62 T
(\245) 108.65 299.62 T
(Because the handler has access to the condition object, the handler can per-) 126.65 299.62 T
(form intelligent r) 126.65 285.62 T
(ecovery actions based on the information captur) 209.46 285.62 T
(ed in the) 443.59 285.62 T
(condition object when the exception occurr) 126.65 271.62 T
(ed. For example, the handler) 335.52 271.62 T
(may examine various slots of the condition object, and perform dif) 126.65 257.62 T
(fer) 449.64 257.62 T
(ent) 462.72 257.62 T
(actions based on information stor) 126.65 243.62 T
(ed in those slots.) 288.96 243.62 T
-0.3 (Dylan supports two models of handler execution. The) 99.65 223.62 P
4 10 Q
-0.66 (exception) 362.03 223.62 P
1 11 Q
-0.3 ( clause of) 416.03 223.62 P
4 10 Q
-0.66 (block) 463.2 223.62 P
1 11 Q
(implements the exit model. When you establish handlers by the) 99.65 209.62 T
4 10 Q
(exception) 411.78 209.62 T
1 11 Q
-0.38 (clause of) 99.65 195.62 P
4 10 Q
-0.84 (block) 144.2 195.62 P
1 11 Q
-0.38 (, you do not have the ability to r) 174.2 195.62 P
-0.38 (estart a computation in the context) 326.61 195.62 P
(of the signaler) 99.65 181.62 T
(, or in a context closer to the signaler than the handler) 167.96 181.62 T
(. In Section) 427.91 181.62 T
(20.2.3, we explor) 99.65 167.62 T
(e the calling model of handler execution, which allows you to) 180.75 167.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "348" 362
%%Page: "349" 363
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(349) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(r) 99.65 665.62 T
(ecover fr) 103.79 665.62 T
(om an exception without a nonlocal exit back to the point wher) 146.34 665.62 T
(e the) 452.77 665.62 T
(handler was established.) 99.65 651.62 T
3 13 Q
(20.2.3  De\336nition of a reco) 99.65 620.29 T
(ver) 231.57 620.29 T
(y pr) 247.68 620.29 T
(otocol) 267.04 620.29 T
1 11 Q
-0.39 (W) 99.65 600.62 P
-0.39 (ith the new de\336nition of our) 110.04 600.62 P
4 10 Q
-0.85 (+) 247.61 600.62 P
1 11 Q
-0.39 (method on) 256.36 600.62 P
4 10 Q
-0.85 (<time-offset>) 311.19 600.62 P
1 11 Q
-0.39 ( and) 389.19 600.62 P
4 10 Q
-0.85 (<time-of-day>) 412.54 600.62 P
1 11 Q
-0.39 (,) 490.54 600.62 P
(if we add 5 hours to 10:00 P) 99.65 586.62 T
(.M., a condition instance is signaled. The) 232.26 586.62 T
4 10 Q
(say-cor-) 432.09 586.62 T
-0.69 (rected-time) 99.65 572.62 P
1 11 Q
-0.31 ( method handles that condition, and prints a suitable err) 165.65 572.62 P
-0.31 (or message.) 436.48 572.62 P
(By the time the handler in) 99.65 558.62 T
4 10 Q
(say-corrected-time) 228.71 558.62 T
1 11 Q
( takes contr) 336.71 558.62 T
(ol, the addition that) 392.37 558.62 T
(we wer) 99.65 544.62 T
(e performing has been aborted. In fact, we ar) 135.43 544.62 T
(e no longer even executing) 352.8 544.62 T
(within the) 99.65 530.62 T
4 10 Q
(correct-arrival-time) 152.37 530.62 T
1 11 Q
( method. W) 272.37 530.62 T
(e have ceased executing ther) 328.31 530.62 T
(e) 466.71 530.62 T
(because handlers established using the) 99.65 516.62 T
4 10 Q
(exception) 291.04 516.62 T
1 11 Q
( clause of) 345.04 516.62 T
4 10 Q
(block) 393.11 516.62 T
1 11 Q
( perform) 423.11 516.62 T
-0.15 (nonlocal exits out of the curr) 99.65 502.62 P
-0.15 (ent computation back to the block wher) 237.8 502.62 P
-0.15 (e the handler) 429.49 502.62 P
(was established. Suppose that we, instead of aborting the addition, wanted to) 99.65 488.62 T
(continue with the addition, per) 99.65 474.62 T
(haps modifying the value r) 250.77 474.62 T
(eturned by the) 382.3 474.62 T
4 10 Q
(+) 99.65 460.62 T
1 11 Q
(method such that it would still be within the corr) 108.4 460.62 T
(ect 24-hour range for) 346.83 460.62 T
4 10 Q
(<time-) 451.27 460.62 T
(of-day>) 99.65 446.62 T
1 11 Q
( instances. In this section, we modify) 141.65 446.62 T
4 10 Q
(say-corrected-time) 322.81 446.62 T
1 11 Q
( to use a dif-) 430.81 446.62 T
-0.14 (fer) 99.65 432.62 P
-0.14 (ent technique for establishing a handler that does not abort the computation in) 112.73 432.62 P
(pr) 99.65 418.62 T
(ogr) 110.41 418.62 T
(ess, and we modify the) 126.68 418.62 T
4 10 Q
(+) 241.51 418.62 T
1 11 Q
(method for) 250.26 418.62 T
4 10 Q
(<time-offset>) 307.48 418.62 T
1 11 Q
( and) 385.48 418.62 T
4 10 Q
(<time-of-day>) 409.6 418.62 T
1 11 Q
(to of) 99.65 404.62 T
(fer and implement a way to modify the value r) 121.46 404.62 T
(eturned to be a legal time of) 348.6 404.62 T
(day) 99.65 390.62 T
(.) 116.76 390.62 T
-0.01 (First, we must \336nd a way to execute a handler in the context of the signaler) 126.65 376.62 P
-0.01 (,) 490.15 376.62 P
(instead of at the point wher) 99.65 362.62 T
(e the handler was established. Then, we must \336nd a) 233.55 362.62 T
(way to activate special code in the) 99.65 348.62 T
4 10 Q
(+) 268.09 348.62 T
1 11 Q
(method to r) 276.84 348.62 T
(eturn a legal) 333.78 348.62 T
4 10 Q
(<time-of-day>) 397.05 348.62 T
1 11 Q
(instance as a way of r) 99.65 334.62 T
(ecovering fr) 203.58 334.62 T
(om the time-boundary exception.) 261.84 334.62 T
(\245) 108.65 314.62 T
(The) 126.65 314.62 T
4 10 Q
(let) 147.81 314.62 T
(handler) 168.56 314.62 T
1 11 Q
( local declaration pr) 210.56 314.62 T
(ovides a way to establish a handler) 306.98 314.62 T
(that will execute in the context of the signaler) 126.65 300.62 T
(, just as though the handler) 346.16 300.62 T
(was invoked with a normal function call by the signaler) 126.65 286.62 T
(.) 396.6 286.62 T
(\245) 108.65 266.62 T
(The r) 126.65 266.62 T
(estart pr) 151.96 266.62 T
(otocol pr) 192.42 266.62 T
(ovides a str) 235.61 266.62 T
(uctur) 291.2 266.62 T
(ed way for a handler to r) 317.08 266.62 T
(ecover) 437.45 266.62 T
(fr) 126.65 252.62 T
(om the exception, and to continue with the computation in pr) 134.46 252.62 T
(ogr) 433.3 252.62 T
(ess.) 449.56 252.62 T
-0.37 (In this case, continuing with the computation means that the) 99.65 232.62 P
4 10 Q
-0.81 (+) 392.91 232.62 P
1 11 Q
-0.37 (method will r) 401.66 232.62 P
-0.37 (eturn) 467.04 232.62 P
(a legal) 99.65 218.62 T
4 10 Q
(<time-of-day>) 133.93 218.62 T
1 11 Q
( instance to) 211.93 218.62 T
4 10 Q
(correct-arrival-time) 269.68 218.62 T
1 11 Q
(, and) 389.68 218.62 T
4 10 Q
(correct-) 416.56 218.62 T
(arrival-time) 99.65 204.62 T
1 11 Q
( will \336nish any additional pr) 171.65 204.62 T
(ocessing and r) 310.31 204.62 T
(eturn normally to its) 379.79 204.62 T
(caller) 99.65 190.62 T
(.) 125.23 190.62 T
-0.12 (T) 126.65 176.62 P
-0.12 (o r) 132.38 176.62 P
-0.12 (ecover fr) 145.16 176.62 P
-0.12 (om an exception, we use a signaling and handling technique as) 187.59 176.62 P
(similar to that we used to indicate the exception in the \336rst place. This time, we) 99.65 162.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "349" 363
%%Page: "350" 364
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(350) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(signal a particular condition that is a subclass of) 99.65 665.62 T
4 10 Q
(<restart>) 335.6 665.62 T
1 11 Q
(, to indicate how the) 389.6 665.62 T
(exception handler wishes to r) 99.65 651.62 T
(ecover) 242.51 651.62 T
(. W) 273.68 651.62 T
(e use a) 289.17 651.62 T
2 F
(restart handler) 324.75 651.62 T
1 F
( to implement the) 398.38 651.62 T
(particular r) 99.65 637.62 T
(ecovery action. Y) 154.35 637.62 T
(ou can think of a r) 236.61 637.62 T
(estart as a special condition that) 324.81 637.62 T
(r) 99.65 623.62 T
(epr) 103.79 623.62 T
(esents an opportunity to r) 119.82 623.62 T
(ecover fr) 245.42 623.62 T
(om an exception. Establishing a r) 287.97 623.62 T
(estart) 448.38 623.62 T
-0.27 (handler is a way to of) 99.65 609.62 P
-0.27 (fer such an opportunity to other handlers, and to specify the) 203.13 609.62 P
-0.29 (implementation of the r) 99.65 595.62 P
-0.29 (estart. Any handler) 213.77 595.62 P
-0.29 (, when activated, might signal a r) 306.5 595.62 P
-0.29 (estart) 466.23 595.62 P
(to r) 99.65 581.62 T
(equest that a particular r) 116.14 581.62 T
(ecovery action take place. Restart signaling and han-) 235.24 581.62 T
(dling connects r) 99.65 567.62 T
(ecovery r) 177.03 567.62 T
(equests with r) 222.03 567.62 T
(ecovery actions.) 290.29 567.62 T
(For example, adding 5 hours to 10:00 P) 126.65 553.62 T
(.M. is an err) 314.13 553.62 T
(or for) 371.82 553.62 T
4 10 Q
(<time-offset>) 401.68 553.62 T
1 11 Q
(and) 99.65 539.62 T
4 10 Q
(<time-of-day>) 121.02 539.62 T
1 11 Q
( instances. One way to r) 199.02 539.62 T
(ecover fr) 314.94 539.62 T
(om this err) 357.49 539.62 T
(or would be to) 410.32 539.62 T
(wrap ar) 99.65 525.62 T
(ound the r) 137.68 525.62 T
(esult to 3:00 A.M. Her) 188.34 525.62 T
(e, we de\336ne the r) 294.57 525.62 T
(estart class) 377.75 525.62 T
4 10 Q
(<return-) 433.11 525.62 T
(modulus-restart>) 99.65 511.62 T
1 11 Q
(, which r) 195.65 511.62 T
(epr) 238.11 511.62 T
(esents an of) 254.13 511.62 T
(fer to r) 310.86 511.62 T
(eturn fr) 343.38 511.62 T
(om a time-of-day com-) 380.17 511.62 T
(putation by wrapping the r) 99.65 497.62 T
(esult:) 231.74 497.62 T
4 9 Q
(define class <return-modulus-restart> \050<restart>\051) 99.65 476.95 T
(end class <return-modulus-restart>;) 99.65 465.95 T
1 11 Q
(Using the) 99.65 445.62 T
4 10 Q
(exception) 149.35 445.62 T
1 11 Q
( clause of) 203.35 445.62 T
4 10 Q
(block) 251.42 445.62 T
1 11 Q
(, we r) 281.42 445.62 T
(ede\336ne the) 308.26 445.62 T
4 10 Q
(+) 364.6 445.62 T
1 11 Q
(method to establish and) 373.35 445.62 T
(implement the r) 99.65 431.62 T
(estart handler:) 177.52 431.62 T
4 9 Q
(define constant $seconds-per-day = $hours-per-day * $seconds-per-hour;) 99.65 410.95 T
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 99.65 391.95 T
(=> \050sum :: <time-of-day>\051) 105.05 380.95 T
(let sum) 110.45 369.95 T
(= make\050<time-of-day>,) 121.25 358.95 T
( total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 153.65 347.95 T
(block \050\051) 110.45 336.95 T
(if \050sum >= $midnight & sum < $tomorrow\051) 121.25 325.95 T
(sum;) 132.05 314.95 T
(else) 121.25 303.95 T
(error\050make\050<time-boundary-error>, invalid-time: sum,) 132.05 292.95 T
(min-time: $midnight, time-limit: $tomorrow\051\051;) 191.45 281.95 T
(end if;) 121.25 270.95 T
5 F
(// Establish restart handler) 110.45 259.95 T
4 F
(exception \050restart :: <return-modulus-restart>\051) 110.45 248.95 T
(make\050<time-of-day>,) 121.25 237.95 T
(total-seconds: modulo\050sum.total-seconds, $seconds-per-day\051\051;) 148.25 226.95 T
(end block;) 110.45 215.95 T
(end method \134+;) 99.65 204.95 T
1 11 Q
(If a handler \050established with) 99.65 184.62 T
4 10 Q
(let handler) 244.69 184.62 T
1 11 Q
(\051 signals a) 310.69 184.62 T
4 10 Q
(<return-modulus-) 361.86 184.62 T
(restart>) 99.65 170.62 T
1 11 Q
( during the handling of the) 147.65 170.62 T
4 10 Q
(<time-boundary-error>) 281.69 170.62 T
1 11 Q
( exception, then) 407.69 170.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "350" 364
%%Page: "351" 365
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(351) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.21 (the sum will be wrapped ar) 99.65 665.62 P
-0.21 (ound so that it will stay within the bounds of the time-) 232.64 665.62 P
(of-day speci\336cation, and the r) 99.65 651.62 T
(esult will be r) 243.96 651.62 T
(eturned fr) 309.84 651.62 T
(om the) 358.62 651.62 T
4 10 Q
(+) 395.1 651.62 T
1 11 Q
(method.) 403.85 651.62 T
(Next, we want to write a handler using) 126.65 637.62 T
4 10 Q
(let handler) 319.7 637.62 T
1 11 Q
( that will invoke the) 385.7 637.62 T
-0.22 (r) 99.65 623.62 P
-0.22 (estart. However) 103.79 623.62 P
-0.22 (, befor) 180.64 623.62 P
-0.22 (e we invoke the r) 211.1 623.62 P
-0.22 (estart, we want to con\336rm that the r) 293.55 623.62 P
-0.22 (estart) 466.17 623.62 P
(is curr) 99.65 609.62 T
(ently established. Signaling a r) 130.27 609.62 T
(estart that is not curr) 278.72 609.62 T
(ently established is an) 379.61 609.62 T
(err) 99.65 595.62 T
(or) 113.41 595.62 T
(. The) 122.95 595.62 T
4 10 Q
(available-restart) 149.61 595.62 T
1 11 Q
( method that follows r) 251.61 595.62 T
(eturns an instance of a a) 359.44 595.62 T
(given r) 99.65 581.62 T
(estart, if that r) 133.75 581.62 T
(estart is curr) 201.78 581.62 T
(ently established; otherwise,) 262.11 581.62 T
4 10 Q
(available-) 402.91 581.62 T
(restart) 99.65 567.62 T
1 11 Q
( r) 141.65 567.62 T
(eturns false:) 148.54 567.62 T
4 9 Q
(define method available-restart) 99.65 546.95 T
(\050restart-class :: <class>, exception-instance :: <condition>\051) 121.25 535.95 T
(=> \050result :: false-or\050<restart>\051\051) 105.05 524.95 T
(block \050return\051) 110.45 513.95 T
(local method check-restart \050type, test, function, initargs\051) 121.25 502.95 T
5 F
(// Make an instance of the restart, so we can see whether it matches) 132.05 491.95 T
(// our search criteria) 132.05 480.95 T
4 F
(if \050subtype?\050type, restart-class\051\051) 132.05 469.95 T
(let instance = apply\050make, type, condition:, exception-instance,) 142.85 458.95 T
(initargs | #[]\051;) 256.25 447.95 T
(if \050test\050instance\051\051 return\050instance\051; end;) 142.85 436.95 T
(end if;) 132.05 425.95 T
(end method;) 121.25 414.95 T
5 F
(// The built-in Dylan function do-handlers will call check-restart) 121.25 403.95 T
(// for every handler currently established, in order \050first is nearest) 121.25 392.95 T
(// to the signaler\051) 121.25 381.95 T
4 F
(do-handlers\050check-restart\051;) 121.25 370.95 T
(#f;) 121.25 359.95 T
(end block;) 110.45 348.95 T
(end method available-restart;) 99.65 337.95 T
1 11 Q
(Dylan pr) 99.65 317.62 T
(ovides the) 142.89 317.62 T
4 10 Q
(do-handlers) 195.72 317.62 T
1 11 Q
( function, which iterates over all the curr) 261.72 317.62 T
(ently) 458.98 317.62 T
-0.06 (established handlers, calling its ar) 99.65 303.62 P
-0.06 (gument \050a function\051 on all the r) 263.83 303.62 P
-0.06 (elevant informa-) 415.02 303.62 P
(tion about the handler) 99.65 289.62 T
(, including all the information necessary to instantiate a) 207.18 289.62 T
(r) 99.65 275.62 T
(estart instance for r) 103.79 275.62 T
(estart handlers. The) 197.06 275.62 T
4 10 Q
(check-restart) 295.93 275.62 T
1 11 Q
( local method r) 373.93 275.62 T
(eturns) 446.82 275.62 T
(fr) 99.65 261.62 T
(om) 107.46 261.62 T
4 10 Q
(available-restart) 125.93 261.62 T
1 11 Q
( with a r) 227.93 261.62 T
(estart instance only when a matching r) 268.19 261.62 T
(estart) 455.97 261.62 T
(that accepts is found. All r) 99.65 247.62 T
(estarts take a) 227.02 247.62 T
4 10 Q
(condition) 292.85 247.62 T
1 11 Q
( init-keywor) 346.85 247.62 T
(d ar) 406.48 247.62 T
(gument,) 425.6 247.62 T
(which, if supplied, should be the original exception that occurr) 99.65 233.62 T
(ed. If the handler) 404.82 233.62 T
(that cr) 99.65 219.62 T
(eated the r) 130.5 219.62 T
(estart pr) 181.75 219.62 T
(ovided the original exception condition as an init-) 222.21 219.62 T
(keywor) 99.65 205.62 T
(d ar) 136.48 205.62 T
(gument, then r) 155.59 205.62 T
(estart handlers can handle r) 227.37 205.62 T
(estart conditions for only) 362.25 205.62 T
(particular exceptions. If none of the established handlers match and accept the) 99.65 191.62 T
-0.41 (r) 99.65 177.62 P
-0.41 (estart that we seek, then) 103.79 177.62 P
4 10 Q
-0.89 (available-restart) 221.7 177.62 P
1 11 Q
-0.41 ( r) 323.7 177.62 P
-0.41 (eturns false. Note that you should) 330.19 177.62 P
(establish r) 99.65 163.62 T
(estart handlers for instantiable r) 149.12 163.62 T
(estart classes only) 304.33 163.62 T
(, because the r) 390.12 163.62 T
(estart) 458.83 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "351" 365
%%Page: "352" 366
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(352) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(classes will be instantiated by r) 99.65 665.62 T
(estart-savvy handlers. If the r) 250.34 665.62 T
(estart classes cannot) 392.69 665.62 T
(be instantiated, then the r) 99.65 651.62 T
(ecovery pr) 223.43 651.62 T
(ocess will not operate corr) 275.04 651.62 T
(ectly) 402.27 651.62 T
(.) 424.1 651.62 T
(Next, we need to de\336ne a method to be called by the exception handler to) 126.65 637.62 T
-0.22 (invoke the r) 99.65 623.62 P
-0.22 (estart whether it is available. If the r) 157.32 623.62 P
-0.22 (estart is not available, the method) 330.28 623.62 P
(will call the) 99.65 609.62 T
4 10 Q
(next-handler) 158.72 609.62 T
1 11 Q
( method, which will allow another handler the oppor-) 230.72 609.62 T
(tunity to decide if it will handle the exception. In other wor) 99.65 595.62 T
(ds, if the) 386.96 595.62 T
4 10 Q
(<return-) 431.46 595.62 T
(modulus-restart>) 99.65 581.62 T
1 11 Q
( r) 195.65 581.62 T
(estart is not established, the handler for) 202.54 581.62 T
4 10 Q
(<time-error>) 397.02 581.62 T
1 11 Q
(established by) 99.65 567.62 T
4 10 Q
(say-corrected-time) 171.91 567.62 T
1 11 Q
( will) 279.91 567.62 T
2 F
(decline) 304.18 567.62 T
1 F
( to handle the) 340.84 567.62 T
4 10 Q
(<time-) 410.18 567.62 T
(boundary-error>) 99.65 553.62 T
1 11 Q
( condition being signaled.) 189.65 553.62 T
4 9 Q
(define method invoke-modulus-restart-if-available) 99.65 532.95 T
(\050condition :: <time-error>, next-handler :: <function>\051) 121.25 521.95 T
(let restart = available-restart\050<return-modulus-restart>, condition\051;) 110.45 510.95 T
(if \050restart\051 error\050restart\051; else next-handler\050\051; end;) 110.45 499.95 T
(end method invoke-modulus-restart-if-available;) 99.65 488.95 T
1 11 Q
(No r) 99.65 468.62 T
(eturn values ar) 121.69 468.62 T
(e declar) 194.56 468.62 T
(ed for) 232.3 468.62 T
4 10 Q
(invoke-modulus-restart-if-available) 263.8 468.62 T
1 11 Q
(,) 473.8 468.62 T
(because we cannot be certain what) 99.65 454.62 T
4 10 Q
(next-handler) 270.87 454.62 T
1 11 Q
( might r) 342.87 454.62 T
(eturn. Our handler) 381.54 454.62 T
(method must be pr) 99.65 440.62 T
(epar) 192.3 440.62 T
(ed to r) 213.83 440.62 T
(eturn any number of objects of any types. Next, we) 245.06 440.62 T
(establish a handler using the) 99.65 426.62 T
4 10 Q
(let handler) 241.58 426.62 T
1 11 Q
( local declaration:) 307.58 426.62 T
4 9 Q
(define method say-corrected-time) 99.65 405.95 T
(\050arrival-time :: <time-of-day>,) 121.25 394.95 T
(#key weather-delay :: <time-offset> = $no-time,) 126.65 383.95 T
(traffic-delay :: <time-offset> = $no-time\051) 126.65 372.95 T
(=> \050\051) 105.05 361.95 T
(let handler \050<time-error>\051 = invoke-modulus-restart-if-available;) 110.45 350.95 T
(say\050correct-arrival-time\050arrival-time, weather-delay, traffic-delay\051\051;) 110.45 339.95 T
(end method say-corrected-time;) 99.65 328.95 T
1 11 Q
(The) 99.65 308.62 T
4 10 Q
(let handler) 120.81 308.62 T
1 11 Q
( local declaration establishes a handler for the) 186.81 308.62 T
4 10 Q
(<time-error>) 411.33 308.62 T
1 11 Q
(condition and for all that condition\325s subclasses. When the) 99.65 294.62 T
4 10 Q
(error) 385.86 294.62 T
1 11 Q
( function inside) 415.86 294.62 T
(the) 99.65 280.62 T
4 10 Q
(+) 117.65 280.62 T
1 11 Q
(method signals the) 126.4 280.62 T
4 10 Q
(<time-boundary-error>) 221.36 280.62 T
1 11 Q
( condition instance, Dylan) 347.36 280.62 T
(conducts a sear) 99.65 266.62 T
(ch for the near) 174.01 266.62 T
(est matching handler that accepts. In this case, the) 244.13 266.62 T
(near) 99.65 252.62 T
(est matching handler that accepts is the handler established by) 120.97 252.62 T
4 10 Q
(say-) 427.82 252.62 T
(corrected-time) 99.65 238.62 T
1 11 Q
(. Because this handler was established by a) 183.65 238.62 T
4 10 Q
(let handler) 394.63 238.62 T
1 11 Q
( local) 460.63 238.62 T
(declaration, instead of by the) 99.65 224.62 T
4 10 Q
(exception) 243.23 224.62 T
1 11 Q
( clause of) 297.23 224.62 T
4 10 Q
(block) 345.3 224.62 T
1 11 Q
(, no nonlocal exit takes) 375.3 224.62 T
(place. Instead, the function speci\336ed in the) 99.65 210.62 T
4 10 Q
(let handler) 309.88 210.62 T
1 11 Q
( local declaration is) 375.88 210.62 T
(invoked in the context of the signaler) 99.65 196.62 T
(. The) 279.16 196.62 T
4 10 Q
(error) 305.82 196.62 T
1 11 Q
( function essentially performs a) 335.82 196.62 T
(r) 99.65 182.62 T
(egular function call on the function associated with the near) 103.79 182.62 T
(est matching han-) 394.55 182.62 T
(dler) 99.65 168.62 T
(. The function is passed the condition instance being signaled, and the) 118.37 168.62 T
4 10 Q
(next-) 460.95 168.62 T
(handler) 99.65 154.62 T
1 11 Q
( function that might be used to decline handling this condition. In our) 141.65 154.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "352" 366
%%Page: "353" 367
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(353) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(example, the) 99.65 665.62 T
4 10 Q
(invoke-modulus-restart-if-available) 164.39 665.62 T
1 11 Q
( function will be called) 374.39 665.62 T
-0.18 (fr) 99.65 651.62 P
-0.18 (om) 107.46 651.62 P
4 10 Q
-0.39 (error) 125.75 651.62 P
1 11 Q
-0.18 (. Once called,) 154.93 651.62 P
4 10 Q
-0.39 (invoke-modulus-restart-if-available) 222.13 651.62 P
1 11 Q
-0.18 ( will \336rst see) 432.13 651.62 P
(whether the) 99.65 637.62 T
4 10 Q
(<return-modulus-restart>) 160.85 637.62 T
1 11 Q
( r) 304.85 637.62 T
(estart is established. If the r) 311.75 637.62 T
(estart is) 444.4 637.62 T
(established, we will invoke it by signaling an instance of the r) 99.65 623.62 T
(estart. If the r) 398.31 623.62 T
(estart) 463.03 623.62 T
(is not established, we decline to pr) 99.65 609.62 T
(ocess the) 267.06 609.62 T
4 10 Q
(<time-boundary-error>) 313.3 609.62 T
1 11 Q
( condition) 439.3 609.62 T
(in this handler) 99.65 595.62 T
(. Assuming that no other handlers exist, the debugger will be) 169.63 595.62 T
(invoked.) 99.65 581.62 T
(If the r) 126.65 567.62 T
(estart is signaled, a nonlocal exit to the r) 158.92 567.62 T
(estart exception clause in) 353.39 567.62 T
4 10 Q
(+) 99.65 553.62 T
1 11 Q
(method is initiated, which r) 108.4 553.62 T
(eturns the sum suitably wrapped such that it lies) 242.59 553.62 T
(within the 24-hour boundary) 99.65 539.62 T
(.) 239.76 539.62 T
(Figur) 126.65 525.62 T
(e 20.2 shows the state of execution after the handler function for) 152.86 525.62 T
4 10 Q
(<time-error>) 99.65 511.62 T
1 11 Q
( is invoked, and the state after the r) 171.65 511.62 T
(estart handler function for) 342.45 511.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 167.96 513.15 175.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure 20.2) 159.53 179.29 T
8 F
(Conte) 217.89 179.29 T
(xt tr) 244.27 179.29 T
(ansition from handler to restar) 260.84 179.29 T
(t handler) 394.07 179.29 T
(.) 432.48 179.29 T
99.65 191.95 513.15 495.95 C
0 0 0 1 0 0 0 K
99.65 195.95 513.15 493.95 C
0 0 -14 553 272 553 286 100.52 201.95 FMBEGINEPSF
%%BeginDocument: /u/ldisk2/skeene/dylan-book/fig/f20-2.eps
%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.5%%For: (George Nichols) (Me)%%Title: (f20-2 .eps)%%CreationDate: (6/6/96) (3:54 PM)%%BoundingBox: 0 -14 553 272%%HiResBoundingBox: 0.175 -13.4917 552.6667 271.5449%%DocumentProcessColors: Black%%DocumentFonts: Courier-Bold%%+ Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_IllustratorA_AI5 1.0 0%AI5_FileFormat 1.2%AI3_ColorUsage: Black&White%AI3_TemplateBox: 198 126 198 126%AI3_TileBox: -76.5 -239.5 475.5 490.5%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -106 414 1.5 1018 725 18 1 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.0 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.0 %%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 21 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}		def	} if		/gt38? mark {version cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put	level2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Abbreviated Prolog)%%Version: 1.1 %%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI5_vars 70 dict dup beginput/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_IllustratorA_AI5 74 dict dup beginput/initialize{	Adobe_IllustratorA_AI5 dup begin	Adobe_IllustratorA_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_IllustratorA_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			clip /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore clip newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore clip newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		fill	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	}	{	stop	} ifelse} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef clip		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			/clipForward? true def						/Tx /pop load def			/Tj /pop load def			currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin						/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendcurrentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Courier-Bold%%IncludeFont: HelveticaAdobe_level2_AI5 /initialize get execAdobe_IllustratorA_AI5_vars Adobe_IllustratorA_AI5 Adobe_typography_AI5 /initialize get execAdobe_IllustratorA_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Courier-Bold Courier-Bold[/_Courier-Bold/Courier-Bold 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 2 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4122 4446 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4122 4446 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4122 4446 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 4.5 263 0 TpTP0 Tr0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D/_Helvetica 9 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 0 2 2 3 Th0 Tq0 0 Tl0 Tc0 Tw(State of execution during the handling\r) Tx 0 -11 Td(of the ) Tx /_Courier-Bold 9 Tf(<time-boundary-error>) Tx /_Helvetica 9 Tf( error) Tx (\r) TX TO0 To1 0 0 1 214.75 263.1667 0 TpTP0 Tr(State of execution during the handling \r) Tx 0 -11 Td(of the ) Tx /_Courier-Bold 9 Tf(<return-modulus-restart> ) Tx 0 320 Tk /_Helvetica 9 Tf(restart) Tx (\r) TX TO1 Ap0 R0 G0.65 w203.8333 -13.1667 m203.8333 234.8333 L0.5 234.8333 L0.5 -13.1667 L203.8333 -13.1667 Ls396.6667 72.1667 m396.6667 234.8333 L213.4583 234.8333 L213.4583 72.1667 L396.6667 72.1667 Ls0 Ap1.1667 206.8333 m203.8333 206.8333 lS1.1667 178.8333 m203.8333 178.8333 lS1.1667 152.1667 m203.8333 152.1667 lS1.1667 125.5 m203.8333 125.5 lS1.1667 98.8334 m203.8333 98.8334 lS213.4583 206.8333 m396.7501 206.8333 lS213.4583 178.8333 m396.7501 178.8333 lS213.4583 152.1667 m396.7501 152.1667 lS213.4583 125.5 m396.7501 125.5 lS213.4583 98.8334 m396.7501 98.8334 lS1.1667 72.1667 m203.8333 72.1667 lS1.1667 45.5 m203.8333 45.5 lS1.1667 18.8334 m203.8333 18.8334 lS203.8333 -7.8333 mS1.1667 -7.8333 mSu175.3333 255.3125 m202 255.3125 lS0 O0 g1 w200.4542 253.0746 m208.91 255.34 l200.4542 257.606 l200.4542 253.0746 lfU0 To1 0 0 1 8.5 217.5833 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 8.5 190.2083 0 TpTP0 Tr/_Helvetica 9 Tf(Handler for ) Tx /_Courier-Bold 9 Tf(<time-error>) Tx (\r) TX TO0 To1 0 0 1 8.5 162.8333 0 TpTP0 Tr/_Helvetica 9 Tf(Call to ) Tx /_Courier-Bold 9 Tf(correct-arrival-time) Tx (\r) TX TO0 To1 0 0 1 8.5 135.4583 0 TpTP0 Tr/_Helvetica 9 Tf(Call to + ) Tx (\r) TX TO0 To1 0 0 1 8.5 109.3333 0 TpTP0 Tr(Block ) Tx (\r) TX TO0 To1 0 0 1 8.5 83.4583 0 TpTP0 Tr(Handler for ) Tx /_Courier-Bold 9 Tf(<return-modulus-restart>) Tx (\r) TX TO0 To1 0 0 1 222.0833 217.5833 0 TpTP0 Tr/_Helvetica 9 Tf(Call to ) Tx /_Courier-Bold 9 Tf(say-corrected-time) Tx (\r) TX TO0 To1 0 0 1 222.0833 190.2083 0 TpTP0 Tr/_Helvetica 9 Tf(Handler for ) Tx /_Courier-Bold 9 Tf(<time-error>) Tx (\r) TX TO0 To1 0 0 1 222.0833 162.8333 0 TpTP0 Tr/_Helvetica 9 Tf(Call to ) Tx /_Courier-Bold 9 Tf(correct-arrival-time) Tx (\r) TX TO0 To1 0 0 1 222.0833 135.4583 0 TpTP0 Tr/_Helvetica 9 Tf(Call to + ) Tx (\r) TX TO0 To1 0 0 1 222.0833 109.3333 0 TpTP0 Tr(Block ) Tx (\r) TX TO0 To1 0 0 1 222.0833 83.4583 0 TpTP0 Tr(Exception clause of block) Tx (\r) TX TO0 To1 0 0 1 8.5 57.0833 0 TpTP0 Tr(Block body) Tx (\r) TX TO0 To1 0 0 1 8.5 29.7083 0 TpTP0 Tr(Call to ) Tx /_Courier-Bold 9 Tf(error) Tx (\r) TX TO0 To1 0 0 1 8.5 5.9167 0 TpTP0 Tr/_Helvetica 9 Tf(Call to \r) Tx 0 -11 Td/_Courier-Bold 9 Tf(invoke-modulus-restart-if-available) Tx (\r) TX TO1 To1 0 0 1 428.6667 22 0 Tp1 Ap428.6667 22 m428.6667 6 L552.6667 6 L552.6667 22 L428.6667 22 LnTP0 -8.25 Td0 Tr0 O0 g/_Helvetica 9 Tf(\r) Tx TO0 Ap414 4446 m414 -4194 L(N) *396.6667 4446 m396.6667 -4194 L(N) *LB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF
%%EndDocument
FMENDEPSF
99.65 191.95 513.15 495.95 C
27.65 96.95 567.65 744.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "353" 367
%%Page: "354" 368
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(354) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 10 Q
0 X
-0.09 (<return-modulus-restart>) 99.65 665.62 P
1 11 Q
-0.04 ( is invoked. As you can see, although establishing a) 243.65 665.62 P
(handler with) 99.65 651.62 T
4 10 Q
(let handler) 165.35 651.62 T
1 11 Q
( can be far r) 231.35 651.62 T
(emoved fr) 288.14 651.62 T
(om the signaler) 337.9 651.62 T
(, the handler) 412.26 651.62 T
(function itself is executed in the context of the signaler) 99.65 637.62 T
(.) 363.01 637.62 T
3 13 Q
(20.2.4  Contin) 99.65 603.29 T
(uation fr) 168.87 603.29 T
(om err) 211.32 603.29 T
(or) 244.3 603.29 T
(s) 254.82 603.29 T
1 11 Q
(The r) 99.65 577.62 T
(estart mechanism just described is exceedingly general, and may pr) 124.96 577.62 T
(ovide) 452.57 577.62 T
(several dif) 99.65 563.62 T
(fer) 150.25 563.62 T
(ent ways to r) 163.33 563.62 T
(ecover fr) 226.03 563.62 T
(om exceptional situations. Sometimes, how-) 268.58 563.62 T
(ever) 99.65 549.62 T
(, ther) 119.93 549.62 T
(e is just one main way to r) 144.84 549.62 T
(ecover) 271.7 549.62 T
(. Under certain cir) 302.87 549.62 T
(cumstances, Dylan) 390.59 549.62 T
(pr) 99.65 535.62 T
(ovides a way for handlers simply to r) 110.41 535.62 T
(eturn to their callers, allowing execution) 291.79 535.62 T
(to continue after the signaler) 99.65 521.62 T
(. Her) 238.13 521.62 T
(e, we pr) 262.2 521.62 T
(esent a simpler \050but less \337exible\051 imple-) 300.92 521.62 T
(mentation for r) 99.65 507.62 T
(ecovering fr) 172.97 507.62 T
(om the time-of-day over\337ow exception:) 231.24 507.62 T
4 9 Q
(define method return-24-hour-modulus) 99.65 483.95 T
(\050condition :: <time-error>, next-handler :: <function>\051) 121.25 472.95 T
(=> \050corrected-time :: <time>\051) 105.05 461.95 T
(make\050type-for-copy\050condition.invalid-time\051,) 110.45 450.95 T
(total-seconds: modulo\050condition.invalid-time.total-seconds,) 137.45 439.95 T
($seconds-per-day\051\051;) 256.25 428.95 T
(end method return-24-hour-modulus;) 99.65 417.95 T
(define method return-allowed? \050condition :: <time-error>\051) 99.65 387.95 T
(#t;) 110.45 376.95 T
(end method return-allowed?;) 99.65 365.95 T
(define method return-description \050condition :: <time-error>\051) 99.65 335.95 T
("Returns the invalid time modulo 24 hours.";) 110.45 324.95 T
(end;) 99.65 313.95 T
(define method say-corrected-time) 99.65 283.95 T
(\050arrival-time :: <time-of-day>,) 121.25 272.95 T
(#key weather-delay :: <time-offset> = $no-time,) 126.65 261.95 T
(traffic-delay :: <time-offset> = $no-time\051) 126.65 250.95 T
(=> \050\051) 105.05 239.95 T
(let handler \050<time-error>\051 = return-24-hour-modulus;) 110.45 228.95 T
(say\050correct-arrival-time\050arrival-time, weather-delay, traffic-delay\051\051;) 110.45 217.95 T
(end method say-corrected-time;) 99.65 206.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "354" 368
%%Page: "355" 369
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.2 A simple Dylan exception protocol) 356.61 702.62 T
2 F
(355) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 99.65 666.95 T
(=> \050sum :: <time-of-day>\051) 105.05 655.95 T
(let sum) 110.45 644.95 T
(= make\050<time-of-day>,) 121.25 633.95 T
( total-seconds: offset.total-seconds + time-of-day.total-seconds\051;) 153.65 622.95 T
(block \050\051) 110.45 611.95 T
(if \050sum >= $midnight & sum < $tomorrow\051) 121.25 600.95 T
(sum;) 132.05 589.95 T
(else) 121.25 578.95 T
5 F
(// If a handler returns, it must return a valid <time-offset>) 132.05 567.95 T
4 F
(signal\050make\050<time-boundary-error>, invalid-time: sum,) 132.05 556.95 T
(min-time: $midnight, time-limit: $tomorrow\051\051;) 191.45 545.95 T
(end if;) 121.25 534.95 T
(end block;) 110.45 523.95 T
(end method \134+;) 99.65 512.95 T
1 11 Q
-0.22 (The) 99.65 492.62 P
4 10 Q
-0.48 (return-allowed?) 120.59 492.62 P
1 11 Q
-0.22 ( and) 210.59 492.62 P
4 10 Q
-0.48 (return-description) 234.27 492.62 P
1 11 Q
-0.22 ( generic functions ar) 342.27 492.62 P
-0.22 (e pr) 440.43 492.62 P
-0.22 (ovided) 458.99 492.62 P
(by Dylan. When the generic function) 99.65 478.62 T
4 10 Q
(return-allowed?) 281.42 478.62 T
1 11 Q
( r) 371.42 478.62 T
(eturns tr) 378.32 478.62 T
(ue for a given) 419.81 478.62 T
(condition, intr) 99.65 464.62 T
(ospective handlers know that they can r) 168.89 464.62 T
(eturn successfully back to) 362.68 464.62 T
(the signaler) 99.65 450.62 T
(. When r) 155.54 450.62 T
(eturning is allowed, such intr) 197.01 450.62 T
(ospective handlers may call the) 339.57 450.62 T
4 10 Q
(return-description) 99.65 436.62 T
1 11 Q
( generic function to \336nd out what values to r) 207.65 436.62 T
(eturn, if ther) 424.14 436.62 T
(e) 484.89 436.62 T
(ar) 99.65 422.62 T
(e any) 109.29 422.62 T
(. This description can be especially useful for interactive handlers, such as) 134.11 422.62 T
(debuggers.) 99.65 408.62 T
(The) 126.65 394.62 T
4 10 Q
(return-24-hour-modulus) 147.81 394.62 T
1 11 Q
( method has been generalized compar) 279.81 394.62 T
(ed to) 464.5 394.62 T
(the exception-speci\336c r) 99.65 380.62 T
(estart de\336ned in Section 20.2.3. This method may r) 211.29 380.62 T
(eturn) 456.43 380.62 T
(either an instance of) 99.65 366.62 T
4 10 Q
(<time-of-day>) 200.2 366.62 T
1 11 Q
( or) 278.2 366.62 T
4 10 Q
(<time-offset>) 294.05 366.62 T
1 11 Q
(, depending on the class) 372.05 366.62 T
(of time that over\337owed. Thus, it could be r) 99.65 352.62 T
(eused for exception handling in other) 307.53 352.62 T
(parts of the application.) 99.65 338.62 T
(In this implementation appr) 126.65 324.62 T
(oach, ther) 263.39 324.62 T
(e is an implicit contract between the) 311.08 324.62 T
(signaler in the) 99.65 310.62 T
4 10 Q
(\134+) 171.46 310.62 T
1 11 Q
(method and any handler that matches and accepts) 186.21 310.62 T
4 10 Q
(<time-) 433.5 310.62 T
(boundary-errors>) 99.65 296.62 T
1 11 Q
(. The contract is that the handler will always r) 195.65 296.62 T
(eturn a valid) 417.87 296.62 T
4 10 Q
(<time>) 99.65 282.62 T
1 11 Q
( value, or will never r) 135.65 282.62 T
(eturn at all. If any handler violates this implicit con-) 239.74 282.62 T
(tract, then the r) 99.65 268.62 T
(eliability of the pr) 173.61 268.62 T
(ogram will be placed at risk. It is important to) 260.11 268.62 T
(document these err) 99.65 254.62 T
(or) 193.31 254.62 T
(-handling contracts.) 203.47 254.62 T
(Note that, in the) 126.65 240.62 T
4 10 Q
(\134+) 208.33 240.62 T
1 11 Q
(method, we must use the) 223.08 240.62 T
4 10 Q
(signal) 348.14 240.62 T
1 11 Q
( function to signal the) 384.14 240.62 T
(exception, because it is illegal for a handler to r) 99.65 226.62 T
(eturn fr) 327.79 226.62 T
(om exceptions signaled) 364.58 226.62 T
(with the) 99.65 212.62 T
4 10 Q
(error) 142.77 212.62 T
1 11 Q
( function.) 172.77 212.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "355" 369
%%Page: "356" 370
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(356) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(20.3  Ad) 99.65 662.95 T
(ditional e) 146.72 662.95 T
(xception mec) 200.55 662.95 T
(hanisms) 279.06 662.95 T
1 11 Q
(W) 99.65 642.62 T
(e do not cover the entir) 109.64 642.62 T
(e Dylan exception pr) 221.96 642.62 T
(otocol in this book. Her) 322.87 642.62 T
(e, we men-) 436.55 642.62 T
(tion brie\337y certain other techniques that we do not discuss further in this book:) 99.65 628.62 T
(\245) 108.65 608.62 T
(Y) 126.65 608.62 T
(ou can signal conditions with) 132.97 608.62 T
4 10 Q
(cerror) 278.67 608.62 T
1 11 Q
(, and) 313.85 608.62 T
4 10 Q
(break) 340.73 608.62 T
1 11 Q
(, in addition to with the) 370.73 608.62 T
4 10 Q
(error) 126.65 594.62 T
1 11 Q
( and) 156.65 594.62 T
4 10 Q
(signal) 180.77 594.62 T
1 11 Q
( functions. The) 216.77 594.62 T
4 10 Q
(cerror) 291.63 594.62 T
1 11 Q
( function establishes a simple) 327.63 594.62 T
(r) 126.65 580.62 T
(estart, then signals an err) 130.79 580.62 T
(or in a manner similar to) 252.57 580.62 T
4 10 Q
(error) 375.57 580.62 T
1 11 Q
(. The) 404.75 580.62 T
4 10 Q
(break) 431.42 580.62 T
1 11 Q
( func-) 461.42 580.62 T
(tion dir) 126.65 566.62 T
(ectly invokes the debugger without signaling.) 162.66 566.62 T
(\245) 108.65 546.62 T
(The) 126.65 546.62 T
4 10 Q
(exception) 147.81 546.62 T
1 11 Q
( clause of) 201.81 546.62 T
4 10 Q
(block) 249.88 546.62 T
1 11 Q
( and) 279.88 546.62 T
4 10 Q
(let handler) 304.01 546.62 T
1 11 Q
( takes several options) 370.01 546.62 T
(that, among other things, can facilitate r) 126.65 532.62 T
(estart signaling and handling.) 319.96 532.62 T
(\245) 108.65 512.62 T
(Ther) 126.65 512.62 T
(e ar) 149.21 512.62 T
(e additional pr) 166.88 512.62 T
(otocols for attaching a user interface to r) 238.44 512.62 T
(eturning or) 433.5 512.62 T
(r) 126.65 498.62 T
(estarting \050) 130.79 498.62 T
4 10 Q
(return-query) 179.88 498.62 T
1 11 Q
(,) 250.66 498.62 T
4 10 Q
(restart-query) 256.16 498.62 T
1 11 Q
(\051, which could be used with han-) 334.16 498.62 T
(dlers that act like interactive debuggers.) 126.65 484.62 T
(See) 99.65 464.62 T
0 F
(The Dylan Refer) 118.71 464.62 T
(ence Manual) 191.86 464.62 T
1 F
( for mor) 249.2 464.62 T
(e information.) 288.58 464.62 T
3 15 Q
(20.4  Pr) 99.65 424.95 T
(otected operations and the) 143.19 424.95 T
4 14 Q
(block) 303.81 424.95 T
3 15 Q
( construct) 345.81 424.95 T
1 11 Q
(In this section, we describe how to use) 99.65 404.62 T
4 10 Q
(block) 288.99 404.62 T
1 11 Q
( to pr) 318.99 404.62 T
(otect sections of Dylan code) 344.84 404.62 T
(fr) 99.65 390.62 T
(om unexpected nonlocal exits. Dylan pr) 107.46 390.62 T
(ovides powerful ways to execute) 300.49 390.62 T
(nonlocal exits fr) 99.65 376.62 T
(om a given execution context. An application might signal a con-) 176.96 376.62 T
(dition that might cause a handler to execute a nonlocal exit, or an application) 99.65 362.62 T
-0.03 (might call an exit pr) 99.65 348.62 P
-0.03 (ocedur) 196.74 348.62 P
-0.03 (e named by the \336rst ar) 230.4 348.62 P
-0.03 (gument to) 339.24 348.62 P
4 10 Q
-0.06 (block) 391.99 348.62 P
1 11 Q
-0.03 (. Sometimes, it) 421.99 348.62 P
(is necessary to add behavior to the nonlocal exit, to keep the application\325s execu-) 99.65 334.62 T
(tion envir) 99.65 320.62 T
(onment in good shape.) 146.83 320.62 T
3 13 Q
(20.4.1  Pr) 99.65 289.29 T
(otected objects) 146.28 289.29 T
1 11 Q
(Suppose that you want to design a class of objects that could be accessed only) 99.65 269.62 T
(when a lock for that object is granted. Y) 99.65 255.62 T
(ou might use instances of such a class to) 290.97 255.62 T
(avoid con\337icting concurr) 99.65 241.62 T
(ent access in a multithr) 221.46 241.62 T
(eaded implementation of Dylan,) 333.16 241.62 T
(or you might use instances of such a class to r) 99.65 227.62 T
(epr) 320.81 227.62 T
(esent \336les or other operating-) 336.84 227.62 T
-0.04 (system objects that might be accessed r) 99.65 213.62 P
-0.04 (eliably by only one pr) 288.43 213.62 P
-0.04 (ocess at a time. Let\325s) 394.21 213.62 P
(assume that the) 99.65 199.62 T
4 10 Q
(<lock>) 178.67 199.62 T
1 11 Q
( class and the) 214.67 199.62 T
4 10 Q
(get-lock) 282.46 199.62 T
1 11 Q
( and) 330.46 199.62 T
4 10 Q
(release-lock) 354.59 199.62 T
1 11 Q
( functions ar) 426.59 199.62 T
(e) 487.18 199.62 T
(supplied by an external library) 99.65 185.62 T
(. The) 248.48 185.62 T
4 10 Q
(get-lock) 275.14 185.62 T
1 11 Q
( function atomically obtains the) 323.14 185.62 T
(lock if that lock is available; otherwise, it waits until the lock becomes fr) 99.65 171.62 T
(ee, and) 447.8 171.62 T
(then obtains the lock. The) 99.65 157.62 T
4 10 Q
(release-lock) 227.13 157.62 T
1 11 Q
( function fr) 299.13 157.62 T
(ees the lock so that some) 353.21 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "356" 370
%%Page: "357" 371
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(20.4 Protected operations and the) 310.8 702.62 T
5 F
(block) 440.79 702.62 T
0 F
( construct) 469.29 702.62 T
2 F
(357) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(other pr) 99.65 665.62 T
(ocess can acquir) 138.76 665.62 T
(e the lock. Given this locking library) 217.06 665.62 T
(, how would we) 391.87 665.62 T
(de\336ne the following?) 99.65 651.62 T
(\245) 108.65 631.62 T
(A class that r) 126.65 631.62 T
(epr) 189.59 631.62 T
(esents a pr) 205.62 631.62 T
(otected object) 257.23 631.62 T
(\245) 108.65 611.62 T
(A) 126.65 611.62 T
4 10 Q
(call-using-lock) 137.96 611.62 T
1 11 Q
( function, which acquir) 227.96 611.62 T
(es a lock associated with a pr) 340.32 611.62 T
(o-) 481.08 611.62 T
(tected object, calls an arbitrary function, and then r) 126.65 597.62 T
(eleases the lock) 373.44 597.62 T
(W) 99.65 577.62 T
(e could de\336ne the class as follows:) 109.64 577.62 T
4 9 Q
(define abstract class <protected-object> \050<object>\051) 99.65 556.95 T
(slot object-lock :: <lock> = make\050<lock>\051;) 110.45 545.95 T
(end class <protected-object>;) 99.65 534.95 T
1 11 Q
(Each subclass of) 99.65 514.62 T
4 10 Q
(<protected-object>) 181.37 514.62 T
1 11 Q
( would inherit an) 289.37 514.62 T
4 10 Q
(object-lock) 376.41 514.62 T
1 11 Q
( slot. The) 442.41 514.62 T
(lock instance stor) 99.65 500.62 T
(ed in this slot must be acquir) 183.67 500.62 T
(ed prior to any operation on the) 323.54 500.62 T
(pr) 99.65 486.62 T
(otected object, and r) 110.41 486.62 T
(eleased when the operation is complete. One naive way to) 207.9 486.62 T
(implement) 99.65 472.62 T
4 10 Q
(call-using-lock) 155.36 472.62 T
1 11 Q
( would be as follows:) 245.36 472.62 T
4 9 Q
(define method call-using-lock) 99.65 451.95 T
(\050object :: <protected-object>, function :: <function>, #rest args\051) 121.25 440.95 T
(=> \050#rest results\051) 105.05 429.95 T
(get-lock\050object.object-lock\051;) 110.45 418.95 T
(apply\050function, object, args\051;) 110.45 407.95 T
(release-lock\050object.object-lock\051;) 110.45 396.95 T
(end method call-using-lock;) 99.65 385.95 T
1 11 Q
(The appr) 99.65 365.62 T
(oach in the pr) 143.68 365.62 T
(eceding example has two serious pr) 210.34 365.62 T
(oblems. First,) 384.06 365.62 T
4 10 Q
(call-) 451.91 365.62 T
(using-lock) 99.65 351.62 T
1 11 Q
( does not r) 159.65 351.62 T
(eturn the values r) 210.7 351.62 T
(eturned by calling) 296.07 351.62 T
4 10 Q
(function) 387.25 351.62 T
1 11 Q
(. Second, if) 435.25 351.62 T
4 10 Q
(function) 99.65 337.62 T
1 11 Q
(executes a nonlocal exit past) 153.65 337.62 T
4 10 Q
(call-using-lock) 293.84 337.62 T
1 11 Q
(, the) 383.84 337.62 T
4 10 Q
(release-lock) 407.35 337.62 T
1 11 Q
(call will never be executed, and after that point no pr) 99.65 323.62 T
(ocess will be able to acquir) 356.65 323.62 T
(e) 486.19 323.62 T
(the lock for the pr) 99.65 309.62 T
(otected object. Thus, subsequent attempts to use the pr) 186.14 309.62 T
(otected) 451.86 309.62 T
-0.27 (object will wait for) 99.65 295.62 P
-0.27 (ever) 189.53 295.62 P
-0.27 (, because the lock was not pr) 209.82 295.62 P
-0.27 (operly r) 347.28 295.62 P
-0.27 (eleased. W) 385.45 295.62 P
-0.27 (e could add) 436.56 295.62 P
(a handler that would r) 99.65 281.62 T
(elease the lock if any condition is signaled, but that might) 208.94 281.62 T
(be incorr) 99.65 267.62 T
(ect, because certain conditions might be handled within the dynamic) 142.74 267.62 T
(scope of) 99.65 253.62 T
4 10 Q
(function) 142.25 253.62 T
1 11 Q
(, and might never perform a nonlocal exit past) 190.25 253.62 T
4 10 Q
(call-using-) 418.04 253.62 T
-0.65 (lock) 99.65 239.62 P
1 11 Q
-0.3 (. Thus, the lock might be r) 123.65 239.62 P
-0.3 (eleased pr) 248.29 239.62 P
-0.3 (ematur) 297.39 239.62 P
-0.3 (ely) 332.24 239.62 P
-0.3 (, possibly causing the integrity) 345.61 239.62 P
(of the pr) 99.65 225.62 T
(otected object to be violated. Also, calling an exit pr) 140.83 225.62 T
(ocedur) 390.77 225.62 T
(e performs a) 424.43 225.62 T
(nonlocal exit without signaling a condition at all.) 99.65 211.62 T
(T) 126.65 197.62 T
(o solve exactly this sort of pr) 132.38 197.62 T
(oblem, Dylan pr) 271.35 197.62 T
(ovides the) 350.37 197.62 T
4 10 Q
(cleanup) 403.2 197.62 T
1 11 Q
( clause of) 445.2 197.62 T
4 10 Q
(block) 99.65 183.62 T
1 11 Q
(. Code within the body of a) 129.65 183.62 T
4 10 Q
(cleanup) 264.76 183.62 T
1 11 Q
( clause is guaranteed to be executed) 306.76 183.62 T
(befor) 99.65 169.62 T
(e the) 124.82 169.62 T
4 10 Q
(block) 150.84 169.62 T
1 11 Q
( is exited, even if it is a nonlocal exit that causes the) 180.84 169.62 T
4 10 Q
(block) 432.38 169.62 T
1 11 Q
( to) 462.38 169.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "357" 371
%%Page: "358" 372
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(358) 63.65 702.62 T
0 F
(Chapter 20) 87.4 702.62 T
(Exceptions) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(terminate. The value of this) 99.65 665.62 T
4 10 Q
(block) 235.77 665.62 T
1 11 Q
( will be the r) 265.77 665.62 T
(esult of calling) 326.31 665.62 T
4 10 Q
(function) 400.08 665.62 T
1 11 Q
(. The) 448.08 665.62 T
4 10 Q
(cleanup) 99.65 651.62 T
1 11 Q
( clause does not af) 141.65 651.62 T
(fect what the) 230.42 651.62 T
4 10 Q
(block) 295.99 651.62 T
1 11 Q
( r) 325.99 651.62 T
(eturns.) 332.89 651.62 T
4 9 Q
(define method call-using-lock) 99.65 630.95 T
(\050object :: <protected-object>, function :: <function>, #rest args\051) 121.25 619.95 T
(=> \050#rest results\051) 105.05 608.95 T
(block \050\051) 110.45 597.95 T
(get-lock\050object.object-lock\051;) 121.25 586.95 T
(apply\050function, object, args\051;) 121.25 575.95 T
(cleanup) 110.45 564.95 T
(release-lock\050object.object-lock\051;) 121.25 553.95 T
(end block;) 110.45 542.95 T
(end method call-using-lock;) 99.65 531.95 T
1 11 Q
(The) 99.65 511.62 T
4 10 Q
(cleanup) 120.81 511.62 T
1 11 Q
( clause of) 162.81 511.62 T
4 10 Q
(block) 210.88 511.62 T
1 11 Q
( pr) 240.88 511.62 T
(ovides a powerful tool for ensuring the integrity) 254.39 511.62 T
(of applications that use nonlocal exits.) 99.65 497.62 T
3 15 Q
(20.5  Summar) 99.65 457.95 T
(y) 179.76 457.95 T
1 11 Q
(In this chapter) 99.65 437.62 T
(, we cover) 168.89 437.62 T
(ed the following:) 218.11 437.62 T
(\245) 108.65 417.62 T
(W) 126.65 417.62 T
(e described how to de\336ne condition classes, and to signal them.) 136.64 417.62 T
(\245) 108.65 397.62 T
-0.06 (W) 126.65 397.62 P
-0.06 (e explor) 136.64 397.62 P
-0.06 (ed establishing simple err) 175.5 397.62 P
-0.06 (or handlers using the) 300.26 397.62 P
4 10 Q
-0.14 (exception) 406.13 397.62 P
1 11 Q
-0.06 ( clause) 460.13 397.62 P
(of) 126.65 383.62 T
4 10 Q
(block) 139.07 383.62 T
1 11 Q
(.) 169.07 383.62 T
(\245) 108.65 363.62 T
-0.1 (W) 126.65 363.62 P
-0.1 (e showed how to design and implement a intr) 136.64 363.62 P
-0.1 (ospective r) 359.3 363.62 P
-0.1 (ecovery pr) 411.8 363.62 P
-0.1 (otocol) 463.31 363.62 P
(using) 126.65 349.62 T
4 10 Q
(let handler) 156.41 349.62 T
1 11 Q
(,) 221.6 349.62 T
4 10 Q
(do-handler) 227.1 349.62 T
1 11 Q
(, and r) 286.29 349.62 T
(estarts.) 317.31 349.62 T
(\245) 108.65 329.62 T
(W) 126.65 329.62 T
(e demonstrated how a handler can simply r) 136.64 329.62 T
(eturn to the signaler with) 348.3 329.62 T
(cooperation fr) 126.65 315.62 T
(om that signaler) 195.02 315.62 T
(.) 273.2 315.62 T
(\245) 108.65 295.62 T
(W) 126.65 295.62 T
(e showed how we can pr) 136.64 295.62 T
(otect sections of code fr) 257.46 295.62 T
(om unexpected nonlocal) 370.83 295.62 T
(exits by using the) 126.65 281.62 T
4 10 Q
(cleanup) 214.52 281.62 T
1 11 Q
( clause pr) 256.52 281.62 T
(ovided by) 302.92 281.62 T
4 10 Q
(block) 354.76 281.62 T
1 11 Q
(.) 384.76 281.62 T
(Y) 99.65 261.62 T
(ou can use these techniques to contr) 105.97 261.62 T
(ol the handling of exceptional situations) 280.74 261.62 T
-0.48 (when they arise. By designing your condition classes car) 99.65 247.62 P
-0.48 (efully and handling those) 369.98 247.62 P
(conditions corr) 99.65 233.62 T
(ectly) 172.85 233.62 T
(, you make your pr) 194.69 233.62 T
(ogram signi\336cantly mor) 287.65 233.62 T
(e r) 404.62 233.62 T
(obust, without) 416.79 233.62 T
(interr) 99.65 219.62 T
(upting the normal \337ow of contr) 126.71 219.62 T
(ol. By pr) 279.99 219.62 T
(oviding r) 321.05 219.62 T
(ecovery pr) 365.8 219.62 T
(otocols, you) 417.42 219.62 T
-0.19 (make it possible to continue cleanly after a pr) 99.65 205.62 P
-0.19 (oblem has been detected. By pr) 318.36 205.62 P
-0.19 (otect-) 468.65 205.62 P
(ing critical code against unexpected nonlocal exits, you enhance the r) 99.65 191.62 T
(eliability of) 434.87 191.62 T
(your applications.) 99.65 177.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "358" 372
%%Page: "359" 373
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(359) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(21) 171.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(21) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Macr) 101.65 591.4 T
(os) 169.66 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(The term) 99.65 449.62 T
2 F
(macro) 146.48 449.62 T
1 F
(, as used in computer pr) 177.03 449.62 T
(ogramming, originally stood for) 294.39 449.62 T
2 F
-0.14 (macro-instruction) 99.65 435.62 P
1 F
-0.14 (, meaning an instr) 188.85 435.62 P
-0.14 (uction that r) 276.05 435.62 P
-0.14 (epr) 335.2 435.62 P
-0.14 (esented a sequence of several) 351.23 435.62 P
(machine \050or micr) 99.65 421.62 T
(o\051 instr) 182.48 421.62 T
(uctions. Over time, the term has evolved to mean any) 217.01 421.62 T
-0.37 (wor) 99.65 407.62 P
-0.37 (d or phrase that stands for another phrase \050usually longer) 118.97 407.62 P
-0.37 (, but built of simpler) 395.32 407.62 P
(components\051. Macr) 99.65 393.62 T
(os can be used for abbr) 193.29 393.62 T
(eviation, abstraction, simpli\336cation, or) 304.96 393.62 T
(str) 99.65 379.62 T
(ucturing. Many application pr) 112.15 379.62 T
(ograms, such as wor) 258.84 379.62 T
(d pr) 358.26 379.62 T
(ocessors or spr) 378.49 379.62 T
(ead-) 450.26 379.62 T
(sheets, of) 99.65 365.62 T
(fer a macr) 144.47 365.62 T
(o language for writing scripts or subr) 192.99 365.62 T
(outines that bundle a) 374.11 365.62 T
(number of simpler actions into one command.) 99.65 351.62 T
(Many computer languages support a macr) 126.65 337.62 T
(o facility for cr) 333.47 337.62 T
(eating shorthand) 404.12 337.62 T
-0.4 (notations for commonly used, longer phrases. They range fr) 99.65 323.62 P
-0.4 (om simple, text-based) 387.44 323.62 P
(abbr) 99.65 309.62 T
(eviations to full languages, permitting computed r) 121.46 309.62 T
(eplacements. Macr) 366.05 309.62 T
(os ar) 456.85 309.62 T
(e) 479.92 309.62 T
(pr) 99.65 295.62 T
(ocessed befor) 110.41 295.62 T
(e the pr) 175.8 295.62 T
(ogram is compiled by) 212.59 295.62 T
2 F
(expanding) 320.93 295.62 T
1 F
( each macr) 374.1 295.62 T
(o into its) 425.9 295.62 T
(r) 99.65 281.62 T
(eplacement phrase as that macr) 103.79 281.62 T
(o is encounter) 256.77 281.62 T
(ed until ther) 324.74 281.62 T
(e ar) 384.66 281.62 T
(e no mor) 402.32 281.62 T
(e macr) 445.37 281.62 T
(os.) 477.63 281.62 T
(Y) 99.65 267.62 T
(ou can use macr) 105.97 267.62 T
(os to extend the base language by de\336ning mor) 184.46 267.62 T
(e sophisticated) 413.98 267.62 T
(phrases in terms of simpler) 99.65 253.62 T
(, built-in phrases.) 231.14 253.62 T
-0.13 (The primary use of macr) 126.65 239.62 P
-0.13 (os in pr) 245.86 239.62 P
-0.13 (ogramming languages is to extend or adapt) 282.13 239.62 P
-0.37 (the language to allow a mor) 99.65 225.62 P
-0.37 (e concise or r) 233.57 225.62 P
-0.37 (eadable solution for a particular pr) 295.79 225.62 P
-0.37 (oblem) 463 225.62 P
(domain. A simple pr) 99.65 211.62 T
(ogram rar) 200.17 211.62 T
(ely needs macr) 248.59 211.62 T
(os. Mor) 321.24 211.62 T
(e complicated pr) 357.97 211.62 T
(ograms,) 439.08 211.62 T
(including the implementation of a Dylan compiler and r) 99.65 197.62 T
(un-time system, will use) 372.34 197.62 T
(macr) 99.65 183.62 T
(os often. Macr) 123.89 183.62 T
(os have no visible r) 192.68 183.62 T
(un-time cost or ef) 286.23 183.62 T
(fect \321 they ar) 371.17 183.62 T
(e transfor-) 438.84 183.62 T
(mations that take place during the compilation of a pr) 99.65 169.62 T
(ogram \050hence, they) 361.39 169.62 T
0 F
(can) 457.33 169.62 T
1 F
-0.01 (incr) 99.65 155.62 P
-0.01 (ease compilation time\051. Although macr) 118.28 155.62 P
-0.01 (os may take the form of function calls,) 307.6 155.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "359" 373
%%Page: "360" 374
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(360) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.33 (they ar) 99.65 665.62 P
-0.33 (e not functions \321 they cannot be passed as functional ar) 133.09 665.62 P
-0.33 (guments, and they) 403.25 665.62 P
(cannot be invoked in a r) 99.65 651.62 T
(un-time image as a function can. Although macr) 216.82 651.62 T
(os may) 451.46 651.62 T
(have parameters, they do not take ar) 99.65 637.62 T
(guments the way functions do. The ar) 277.3 637.62 T
(gu-) 461.21 637.62 T
(ments to a macr) 99.65 623.62 T
(o ar) 176.87 623.62 T
(e not evaluated; they ar) 195.27 623.62 T
(e simply pr) 309.2 623.62 T
(ogram phrases that can be) 364.23 623.62 T
(substituted in the r) 99.65 609.62 T
(eplacement phrase.) 191.53 609.62 T
(Dylan pr) 126.65 595.62 T
(ovides a macr) 169.89 595.62 T
(o facility that is based on pattern matching and tem-) 237.21 595.62 T
(plate substitution. This facility is mor) 99.65 581.62 T
(e powerful than is a simple textual substitu-) 280.65 581.62 T
(tion facility) 99.65 567.62 T
(, but is simpler than a) 153.72 567.62 T
0 F
(pr) 261.54 567.62 T
(ocedural-macr) 271.12 567.62 T
(o) 334.26 567.62 T
1 F
( facility) 339.14 567.62 T
(, which allows arbitrary) 374.02 567.62 T
(computations to constr) 99.65 553.62 T
(uct r) 211.33 553.62 T
(eplacement phrases. Dylan\325s macr) 233.33 553.62 T
(o facility is closely) 399.19 553.62 T
(integrated with the Dylan language syntax, and permits most macr) 99.65 539.62 T
(o needs to be) 425.4 539.62 T
(satis\336ed. Dylan designers have also planned for a full pr) 99.65 525.62 T
(ocedural macr) 373.62 525.62 T
(o capabil-) 443.18 525.62 T
(ity) 99.65 511.62 T
(, so that it can be added compatibly at a later time if ther) 111.33 511.62 T
(e is suf) 384.86 511.62 T
(\336cient demand.) 418.25 511.62 T
3 15 Q
(21.1  P) 99.65 309.95 T
(atterns and templates) 138.27 309.95 T
1 11 Q
(A Dylan macr) 99.65 289.62 T
(o consists of a set of) 167.68 289.62 T
2 F
(rules) 266.62 289.62 T
1 F
(. Each r) 291.66 289.62 T
(ule has two basic parts: a) 327.68 289.62 T
2 F
(pattern) 451.9 289.62 T
1 F
(that is matched against a fragment of code, and a) 99.65 275.62 T
2 F
(template) 340.65 275.62 T
1 F
( that is substituted for) 384.64 275.62 T
-0.2 (the matched fragment, per) 99.65 261.62 P
-0.2 (haps including pieces of the original fragment. When a) 228.01 261.62 P
(macr) 99.65 247.62 T
(o is invoked, each r) 123.89 247.62 T
(ule is tried in or) 217.76 247.62 T
(der until a matching pattern is found.) 294.6 247.62 T
(When a match is found, the macr) 99.65 233.62 T
(o is r) 260.35 233.62 T
(eplaced by the matching template. If no) 283.86 233.62 T
(match can be found, an err) 99.65 219.62 T
(or occurs.) 229.46 219.62 T
(Dylan macr) 126.65 205.62 T
(os ar) 183.38 205.62 T
(e r) 206.44 205.62 T
(ecognized by the compiler because they \336t one of thr) 218.61 205.62 T
(ee) 474.81 205.62 T
(possible formats: the function macr) 99.65 191.62 T
(o, the statement macr) 270.85 191.62 T
(o, and the de\336ning) 374.93 191.62 T
-0.29 (macr) 99.65 177.62 P
-0.29 (o. The macr) 123.89 177.62 P
-0.29 (o format determines the overall fragment that is matched against) 180.23 177.62 P
(the macr) 99.65 163.62 T
(o\325s r) 141.9 163.62 T
(ules at each macr) 162.63 163.62 T
(o invocation.) 246.04 163.62 T
2 F
(Comparison with C and C++:) 132.65 477.62 T
1 F
( C and C++ macr) 279.49 477.62 T
(os ar) 362.28 477.62 T
(e text substitu-) 385.35 477.62 T
(tions, performed by a pr) 132.65 463.62 T
(epr) 250.66 463.62 T
(ocessor) 266.68 463.62 T
(. The pr) 301.71 463.62 T
(epr) 339.13 463.62 T
(ocessor has no under-) 355.16 463.62 T
(standing of the language; it simply splices together text fragments to) 132.65 449.62 T
(cr) 132.65 435.62 T
(eate r) 141.68 435.62 T
(eplacement phrases.) 168.2 435.62 T
(Dylan macr) 159.65 421.62 T
(os ar) 216.38 421.62 T
(e written in terms of Dylan language ele-) 239.44 421.62 T
(ments; the macr) 132.65 407.62 T
(os choose their transformation by pattern match-) 210.03 407.62 T
(ing, and they substitute pr) 132.65 393.62 T
(ogram fragments.) 260.78 393.62 T
(Language-based macr) 159.65 379.62 T
(os ar) 266.8 379.62 T
(e mor) 289.87 379.62 T
(e powerful than \321 and) 317.75 379.62 T
-0.25 (avoid a number of common pitfalls of \321 text-substitution macr) 132.65 365.62 P
-0.25 (os.) 437.72 365.62 P
(These pitfalls ar) 132.65 351.62 T
(e described in later comparisons in this chapter) 209.77 351.62 T
(.) 438.18 351.62 T
126.65 490.83 126.65 344.08 2 L
V
0.25 H
0 Z
N
477.65 490.83 477.65 344.08 2 L
V
N
126.52 490.95 477.77 490.95 2 L
V
N
126.52 343.95 477.77 343.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "360" 374
%%Page: "361" 375
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.1 Patterns and templates) 400.77 702.62 T
2 F
(361) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The simplest macr) 126.65 665.62 T
(o format that the compiler can match is that of a function) 215.71 665.62 T
(call. A) 99.65 651.62 T
2 F
(function macro) 133.24 651.62 T
1 F
( is invoked in exactly the same way that a function is) 209.32 651.62 T
-0.35 (invoked. The name of the macr) 99.65 637.62 P
-0.35 (o is a module variable that can be used anywher) 248.78 637.62 P
-0.35 (e a) 480.09 637.62 P
(function call can occur) 99.65 623.62 T
(. T) 208.18 623.62 T
(ypically) 219.44 623.62 T
(, it is simply the name followed by a par) 257.05 623.62 T
(enthe-) 452.04 623.62 T
(sized list of ar) 99.65 609.62 T
(guments, but r) 167.22 609.62 T
(ecall that slot-style abbr) 238.3 609.62 T
(eviations and unary and) 353.45 609.62 T
(binary operators ar) 99.65 595.62 T
(e also function calls.) 192.77 595.62 T
(The most important use of function macr) 126.65 581.62 T
(os is to r) 325.74 581.62 T
(earrange or delay evalua-) 366.26 581.62 T
(tion of ar) 99.65 567.62 T
(guments. The fragment that is matched against the function macr) 143.66 567.62 T
(o\325s) 460.81 567.62 T
-0.29 (r) 99.65 553.62 P
-0.29 (ules is the phrase that r) 103.9 553.62 P
-0.29 (epr) 215.1 553.62 P
-0.29 (esents a function\325s ar) 231.12 553.62 P
-0.29 (guments. The function macr) 332 553.62 P
-0.29 (o can) 467.94 553.62 P
-0.08 (then r) 99.65 539.62 P
-0.08 (earrange the function ar) 128.13 539.62 P
-0.08 (guments, per) 244.57 539.62 P
-0.08 (haps adding code. When a macr) 308.4 539.62 P
-0.08 (o r) 464.05 539.62 P
-0.08 (ear-) 476.87 539.62 P
(ranges its ar) 99.65 525.62 T
(guments, its action has the ef) 158.54 525.62 T
(fect of delaying the evaluation of the) 299.01 525.62 T
(ar) 99.65 511.62 T
(guments \050as opposed to a function call, wher) 109.29 511.62 T
(e the ar) 327.04 511.62 T
(gument expr) 362.71 511.62 T
(essions ar) 424.89 511.62 T
(e) 472.15 511.62 T
(evaluated and then passed to the function\051.) 99.65 497.62 T
(One simple use of delaying evaluation is to write a functionlike constr) 126.65 483.62 T
(uct) 467.04 483.62 T
(similar in spirit to C\325s) 99.65 469.62 T
4 10 Q
(?:) 207.55 469.62 T
1 11 Q
( operator:) 219.55 469.62 T
4 9 Q
(define macro if-else) 99.65 448.95 T
({ if-else \050?test:expression, ?true:expression, ?false:expression\051 }) 110.45 437.95 T
(=> { if \050?test\051 ?true else ?false end }) 105.05 426.95 T
(end macro if-else;) 99.65 415.95 T
1 11 Q
(W) 99.65 395.62 T
(e could not write) 109.64 395.62 T
4 10 Q
(if-else) 194.92 395.62 T
1 11 Q
( as a function, because both the tr) 236.92 395.62 T
(ue and false expr) 398.84 395.62 T
(es-) 481.61 395.62 T
(sions would be evaluated befor) 99.65 381.62 T
(e the function was even called:) 251.73 381.62 T
6 9 Q
(?) 99.65 360.95 T
4 F
(define variable *x* = 0;) 110.45 360.95 T
6 F
(?) 99.65 341.95 T
4 F
(define variable *y* = 0;) 110.45 341.95 T
6 F
(?) 99.65 322.95 T
4 F
(*y* := if-else\050*y* == 0, *x* := 1, *x* := -1\051;) 110.45 322.95 T
6 F
(1) 99.65 311.95 T
(?) 99.65 292.95 T
4 F
(*y*;) 110.45 292.95 T
6 F
(1) 99.65 281.95 T
(?) 99.65 262.95 T
4 F
(*x*;) 110.45 262.95 T
6 F
(1) 99.65 251.95 T
1 11 Q
(If we had de\336ned) 99.65 231.62 T
4 10 Q
(if-else) 188.12 231.62 T
1 11 Q
( as a function,) 230.12 231.62 T
4 9 Q
(*x*) 300.31 231.62 T
1 11 Q
( would have been) 316.51 231.62 T
4 10 Q
(-1) 405.66 231.62 T
1 11 Q
(, rather than) 417.66 231.62 T
4 10 Q
(1) 479.99 231.62 T
1 11 Q
(,) 485.99 231.62 T
-0.33 (because both assignments to) 99.65 217.62 P
4 9 Q
-0.64 (*x*) 239.49 217.62 P
1 11 Q
-0.33 ( would have been evaluated, befor) 255.7 217.62 P
-0.33 (e) 421.77 217.62 P
4 10 Q
-0.71 (if-else) 429.46 217.62 P
1 11 Q
-0.33 ( was) 471.46 217.62 P
(called. When a macr) 99.65 203.62 T
(o is used, the assignments ar) 198.24 203.62 T
(e just substituted into the tem-) 336.98 203.62 T
(plate) 99.65 189.62 T
4 10 Q
(if) 126.57 189.62 T
1 11 Q
(, which evaluates the \336rst clause only when the condition is tr) 138.57 189.62 T
(ue.) 438.47 189.62 T
(Looking at the macr) 126.65 175.62 T
(o de\336nition of) 224.05 175.62 T
4 10 Q
(if-else) 295.42 175.62 T
1 11 Q
(, we can infer basic ideas about) 337.42 175.62 T
-0.29 (macr) 99.65 161.62 P
-0.29 (os. A macr) 123.89 161.62 P
-0.29 (o is intr) 175.04 161.62 P
-0.29 (oduced by) 211.17 161.62 P
4 10 Q
-0.63 (define macro) 264.53 161.62 P
1 11 Q
-0.29 (, followed by the) 335.9 161.62 P
2 F
-0.29 (macro name) 419.2 161.62 P
1 F
-0.29 ( \321) 479.72 161.62 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "361" 375
%%Page: "362" 376
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(362) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(in this case,) 99.65 665.62 T
4 10 Q
(if-else) 158.42 665.62 T
1 11 Q
(. The de\336nition of the macr) 200.42 665.62 T
(o is a) 331.95 665.62 T
2 F
(rule) 359.57 665.62 T
1 F
( that has two parts: a) 379.73 665.62 T
2 F
(pattern) 99.65 651.62 T
1 F
( enclosed in braces,) 135.7 651.62 T
4 10 Q
({}) 232.21 651.62 T
1 11 Q
(, that mimics the fragment that it is to match, and a) 244.21 651.62 T
2 F
(replacement) 99.65 637.62 T
1 F
(. Macr) 161.36 637.62 T
(o parameters, called) 191.79 637.62 T
2 F
(pattern variables) 292.38 637.62 T
1 F
(, ar) 377 637.62 T
(e intr) 392.15 637.62 T
(oduced in the) 417.5 637.62 T
(pattern by) 99.65 623.62 T
4 10 Q
(?) 152.65 623.62 T
1 11 Q
(. They match fragments with particular) 158.65 623.62 T
2 F
(constraints) 351.94 623.62 T
1 F
( \321 in this case,) 406.92 623.62 T
4 10 Q
(:expression) 99.65 609.62 T
1 11 Q
(. They ar) 165.65 609.62 T
(e delimited by punctuation \321 in this case, the open and) 208.07 609.62 T
(close par) 99.65 595.62 T
(entheses,) 142.68 595.62 T
4 10 Q
(\050\051) 189.71 595.62 T
1 11 Q
(, and the comma,) 201.71 595.62 T
4 10 Q
(,) 287.9 595.62 T
1 11 Q
(.) 293.9 595.62 T
(The r) 126.65 581.62 T
(eplacement part of the r) 151.96 581.62 T
(ule, the) 267.89 581.62 T
2 F
(expansion) 306.5 581.62 T
1 F
(, is indicated by) 357.82 581.62 T
4 10 Q
(=>) 437.12 581.62 T
1 11 Q
( and is) 449.12 581.62 T
(de\336ned by a) 99.65 567.62 T
2 F
(template) 162.63 567.62 T
1 F
(, also enclosed in braces. The template is in the form of a) 206.62 567.62 T
(code fragment, wher) 99.65 553.62 T
(e pattern variables ar) 200.36 553.62 T
(e used to substitute in the fragments) 302.81 553.62 T
(they matched in the pattern. Note that matching and r) 99.65 539.62 T
(eplacement ar) 362.4 539.62 T
(e language) 430.51 539.62 T
(based, so r) 99.65 525.62 T
(equir) 150.95 525.62 T
(ed and optional whitespace is tr) 176.36 525.62 T
(eated exactly as in Dylan. W) 331.4 525.62 T
(e) 467.96 525.62 T
(have used optional whitespace to impr) 99.65 511.62 T
(ove the legibility of the macr) 288.41 511.62 T
(o de\336nitions) 427.25 511.62 T
(pr) 99.65 497.62 T
(esented her) 110.41 497.62 T
(e.) 166.15 497.62 T
-0.42 (Most Dylan development envir) 126.65 483.62 P
-0.42 (onments pr) 277.54 483.62 P
-0.42 (ovide a way to view code after all) 332.68 483.62 P
(macr) 99.65 469.62 T
(os have been expanded. This view can be helpful in debugging macr) 123.89 469.62 T
(os that) 456.63 469.62 T
(you write. For example, showing the expanded view of an expr) 99.65 455.62 T
(ession like) 407.21 455.62 T
4 9 Q
(*y* := if-else\050*y* == 0, *x* := 1, *x* := -1\051;;) 99.65 434.95 T
1 11 Q
(might yield) 99.65 414.62 T
4 9 Q
(*y*) 99.65 393.95 T
4 10 Q
( :=) 115.85 393.95 T
161.45 393.05 139.85 393.05 2 L
V
0.45 H
0 Z
N
6 9 Q
(if \050) 139.85 393.95 T
4 F
(*y* == 0) 161.45 393.95 T
210.05 393.05 204.65 393.05 2 L
V
N
6 F
(\051) 204.65 393.95 T
4 F
(*x*) 216.05 393.95 T
4 10 Q
( := 1) 232.25 393.95 T
289.85 393.05 268.25 393.05 2 L
V
N
6 9 Q
(else) 268.25 393.95 T
4 F
(*x*) 295.85 393.95 T
4 10 Q
( := -1) 312.05 393.95 T
370.25 393.05 354.05 393.05 2 L
V
N
6 9 Q
(end) 354.05 393.95 T
4 10 Q
(;) 370.25 393.95 T
1 11 Q
(The exact format of the expanded view of the macr) 99.65 373.62 T
(o depends on the particular) 346.66 373.62 T
(development envir) 99.65 359.62 T
(onment. Her) 191.89 359.62 T
(e, we show the code that comes fr) 253.34 359.62 T
(om the macr) 416.86 359.62 T
(o) 477.58 359.62 T
(template in) 99.65 345.62 T
249.29 344.72 157.49 344.72 2 L
V
N
6 9 Q
(underlined italic) 157.49 345.62 T
1 11 Q
(, wher) 249.29 345.62 T
(eas the fragments matched by the pattern) 279.78 345.62 T
(variables and substituted into the template ar) 99.65 331.62 T
(e pr) 320.21 331.62 T
(esented in our conventional) 338.99 331.62 T
4 10 Q
(code font) 99.65 317.62 T
1 11 Q
(. Note that the) 153.65 317.62 T
4 10 Q
(if-else) 225.73 317.62 T
1 11 Q
( macr) 267.73 317.62 T
(o we have de\336ned is just syntactic sugar) 294.73 317.62 T
(\321 Dylan\325s built-in) 99.65 303.62 T
4 10 Q
(if) 192.32 303.62 T
1 11 Q
( statement is perfectly suf) 204.32 303.62 T
(\336cient for the job.) 328.47 303.62 T
-0.29 (Another r) 126.65 289.62 P
-0.29 (eason to delay evaluation is to change the value of an ar) 173.83 289.62 P
-0.29 (gument \321) 442 289.62 P
-0.18 (for example, to implement an operator similar in spirit to C\325s) 99.65 275.62 P
4 10 Q
-0.39 (++) 396.23 275.62 P
1 11 Q
-0.18 ( and) 408.23 275.62 P
4 10 Q
-0.39 (+=) 431.99 275.62 P
1 11 Q
-0.18 ( operators:) 443.99 275.62 P
4 9 Q
(define macro inc!) 99.65 254.95 T
({ inc! \050?place:expression, ?by:expression\051 }) 110.45 243.95 T
(=> { ?place := ?place + ?by; }) 105.05 232.95 T
({ inc! \050?place:expression\051 }) 110.45 221.95 T
(=> { ?place := ?place + 1; }) 105.05 210.95 T
(end macro inc!;) 99.65 199.95 T
1 11 Q
(This macr) 99.65 179.62 T
(o might be used as follows:) 147.65 179.62 T
6 9 Q
(?) 99.65 158.95 T
4 F
( define variable *x* = 0;) 105.05 158.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "362" 376
%%Page: "363" 377
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.2 Macro hygiene) 431.99 702.62 T
2 F
(363) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
6 9 Q
0 X
(?) 99.65 666.95 T
4 F
( inc!\050*x*, 3\051;) 105.05 666.95 T
6 10 Q
(3) 99.65 655.95 T
6 9 Q
(?) 99.65 636.95 T
4 F
( *x*;) 105.05 636.95 T
6 10 Q
(3) 99.65 625.95 T
6 9 Q
(?) 99.65 606.95 T
4 F
( inc!\050*x*\051;) 105.05 606.95 T
6 10 Q
(4) 99.65 595.95 T
6 9 Q
(?) 99.65 576.95 T
4 F
( *x*;) 105.05 576.95 T
6 10 Q
(4) 99.65 565.95 T
1 11 Q
-0.19 (In this macr) 99.65 545.62 P
-0.19 (o, it is important to delay the evaluation of the \336rst ar) 156.98 545.62 P
-0.19 (gument because) 414.5 545.62 P
(we want to be able to assign to the variable or slot it is stor) 99.65 531.62 T
(ed in, rather than sim-) 383.42 531.62 T
(ply to manipulate the value of the variable or slot.) 99.65 517.62 T
-0.17 (The) 126.65 503.62 P
4 10 Q
-0.37 (inc!) 147.64 503.62 P
1 11 Q
-0.17 ( macr) 171.64 503.62 P
-0.17 (o demonstrates the use of multiple r) 198.47 503.62 P
-0.17 (ules in a macr) 372.85 503.62 P
-0.17 (o. They ar) 439.7 503.62 P
-0.17 (e) 487.8 503.62 P
(tried in or) 99.65 489.62 T
(der until an appr) 148.03 489.62 T
(opriate match is found. This allows the) 230.4 489.62 T
4 10 Q
(inc!) 422.31 489.62 T
1 11 Q
( macr) 446.31 489.62 T
(o to) 473.3 489.62 T
(have two forms. The one-ar) 99.65 475.62 T
(gument form incr) 233.34 475.62 T
(ements the ar) 318.92 475.62 T
(gument by 1. The two-) 384.23 475.62 T
(ar) 99.65 461.62 T
(gument form allows the incr) 109.29 461.62 T
(ement amount to be speci\336ed.) 247.38 461.62 T
3 15 Q
(21.2  Macr) 99.65 421.95 T
(o h) 158.91 421.95 T
(ygiene) 177.14 421.95 T
1 11 Q
-0.09 (Displaying the code fragments inserted by the macr) 99.65 401.62 P
-0.09 (o in) 350.32 401.62 P
468.26 400.72 371.24 400.72 2 L
V
0.45 H
0 Z
N
6 9 Q
-0.18 (underlined italics) 371.24 401.62 P
1 11 Q
-0.09 ( both) 468.26 401.62 P
(helps to show exactly what the macr) 99.65 387.62 T
(o has done to our code, and draws attention) 276.53 387.62 T
(to an important featur) 99.65 373.62 T
(e of Dylan macr) 207.14 373.62 T
(os \321 they ar) 284.3 373.62 T
(e hygienic macr) 345.24 373.62 T
(os. A) 421.85 373.62 T
2 F
(hygienic) 449.33 373.62 T
1 F
(or) 99.65 359.62 T
2 F
(referentially transparent) 112.75 359.62 T
1 F
( macr) 235.26 359.62 T
(o system is one that pr) 262.25 359.62 T
(events accidental colli-) 371.39 359.62 T
(sions of macr) 99.65 345.62 T
(o variables with pr) 164 345.62 T
(ogram variables of the same name. Consider the) 255.35 345.62 T
(following macr) 99.65 331.62 T
(o, which is used to exchange the values of two variables:) 173.61 331.62 T
4 9 Q
(define macro swap!) 99.65 310.95 T
({) 110.45 299.95 T
(swap! \050?place1:expression, ?place2:expression\051 }) 121.25 299.95 T
(=> { let value = ?place1;) 105.05 288.95 T
(?place1 := ?place2;) 132.05 277.95 T
(?place2 := value) 132.05 266.95 T
(}) 126.65 255.95 T
(end macro swap!;) 99.65 244.95 T
1 11 Q
(The local variable) 99.65 224.62 T
4 10 Q
(value) 188.42 224.62 T
1 11 Q
( is cr) 218.42 224.62 T
(eated by the macr) 240.81 224.62 T
(o. Ther) 327.11 224.62 T
(e is a possibility that this) 361.18 224.62 T
(variable could con\337ict with another variable in the surr) 99.65 210.62 T
(ounding code. Consider) 367.89 210.62 T
(what might happen if we wer) 99.65 196.62 T
(e to expand) 243.77 196.62 T
4 9 Q
(swap!\050value, x\051) 303.06 196.62 T
1 11 Q
(:) 384.06 196.62 T
159.05 175.05 99.65 175.05 2 L
V
N
6 9 Q
(let value =) 99.65 175.95 T
4 10 Q
( value) 159.05 175.95 T
200.45 175.05 195.05 175.05 2 L
V
N
6 9 Q
(;) 195.05 175.95 T
4 10 Q
(value) 99.65 164.95 T
146.45 164.05 135.65 164.05 2 L
V
N
6 9 Q
(:=) 135.65 164.95 T
4 F
( x) 146.45 164.95 T
162.65 164.05 157.25 164.05 2 L
V
N
6 F
(;) 157.25 164.95 T
4 10 Q
(x) 99.65 153.95 T
154.85 153.05 111.65 153.05 2 L
V
N
6 9 Q
(:= value) 111.65 153.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "363" 377
%%Page: "364" 378
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(364) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(ith simple textual substitutions,) 110.04 665.62 T
4 10 Q
(swap!) 266 665.62 T
1 11 Q
( would have no ef) 296 665.62 T
(fect in this case.) 383.26 665.62 T
-0.03 (Dylan\325s hygienic macr) 99.65 651.62 P
-0.03 (os solve this pr) 208.38 651.62 P
-0.03 (oblem by dif) 281.18 651.62 P
-0.03 (fer) 342.49 651.62 P
-0.03 (entiating between the) 355.57 651.62 P
490.3 650.72 463.3 650.72 2 L
V
0.45 H
0 Z
N
6 9 Q
-0.05 (value) 463.3 651.62 P
1 11 Q
(intr) 99.65 637.62 T
(oduced by the macr) 116.98 637.62 T
(o and any other) 213.17 637.62 T
4 10 Q
(value) 292.42 637.62 T
1 11 Q
( that might appear in the original) 322.42 637.62 T
(code.) 99.65 623.62 T
3 15 Q
(21.3  Ev) 99.65 449.95 T
(aluation in macr) 145.25 449.95 T
(os) 239.36 449.95 T
1 11 Q
-0.29 (Dylan\325s template macr) 99.65 429.62 P
-0.29 (os do no evaluation. In particular) 209 429.62 P
-0.29 (, the pattern variables of a) 368.45 429.62 P
(macr) 99.65 415.62 T
(o ar) 123.89 415.62 T
(e unlike function parameters. They name fragments of code, rather than) 142.29 415.62 T
(naming the r) 99.65 401.62 T
(esult of the evaluation of a fragment of code.) 161.89 401.62 T
-0.02 (If we wer) 126.65 387.62 P
-0.02 (e trying to write an operation like C\325s) 172.51 387.62 P
4 10 Q
-0.05 (||) 356.68 387.62 P
1 11 Q
-0.02 ( \050one that would evaluate) 368.68 387.62 P
(expr) 99.65 373.62 T
(essions and would r) 121.35 373.62 T
(eturn the value of the \336rst nonzer) 218.98 373.62 T
(o expr) 381.69 373.62 T
(ession without) 412.15 373.62 T
(evaluating any subsequent expr) 99.65 359.62 T
(essions\051, we could not write it as a function:) 254.6 359.62 T
4 9 Q
(define method or-int \050arg1, arg2\051 if \050arg1 ~= 0\051 arg1 else arg2 end end;) 99.65 338.95 T
1 11 Q
(When a function is invoked, all its ar) 99.65 318.62 T
(guments ar) 277.79 318.62 T
(e evaluated \336rst, which defeats) 332.57 318.62 T
(our purpose. If we model our macr) 99.65 304.62 T
(o on our function idea, however) 269.97 304.62 T
(, we will not) 425.2 304.62 T
(get the ideal r) 99.65 290.62 T
(esult either:) 166.16 290.62 T
4 9 Q
(define macro or-int) 99.65 269.95 T
({ or-int \050?arg1:expression, ?arg2:expression\051 } =>) 110.45 258.95 T
({ if \050?arg1 ~= 0\051 ?arg1 else ?arg2 end }) 121.25 247.95 T
(end macro or-int;) 99.65 236.95 T
1 11 Q
(The expansion of) 99.65 216.62 T
4 10 Q
(or-int \050x := x + 1, y := y - 1\051) 185.71 216.62 T
1 11 Q
( is pr) 371.71 216.62 T
(obably not what we) 395.83 216.62 T
(want:) 99.65 202.62 T
121.25 181.05 99.65 181.05 2 L
V
N
6 9 Q
(if \050) 99.65 181.95 T
4 10 Q
(x := x + 1) 121.25 181.95 T
214.25 181.05 187.25 181.05 2 L
V
N
6 9 Q
(~= 0\051) 187.25 181.95 T
4 10 Q
( x := x + 1) 214.25 181.95 T
307.85 181.05 286.25 181.05 2 L
V
N
6 9 Q
(else) 286.25 181.95 T
4 10 Q
( y := y - 1) 307.85 181.95 T
396.05 181.05 379.85 181.05 2 L
V
N
6 9 Q
(end) 379.85 181.95 T
2 11 Q
(Comparison with C:) 132.65 589.62 T
1 F
( Because C \050and C++\051 macr) 233.77 589.62 T
(os ar) 365.58 589.62 T
(e simply text) 388.65 589.62 T
-0.1 (substitutions performed by a pr) 132.65 575.62 P
-0.1 (epr) 286.54 575.62 P
-0.1 (ocessor that has no understanding) 302.57 575.62 P
(of the C language, they ar) 132.65 561.62 T
(e inher) 257.63 561.62 T
(ently unhygienic. C macr) 291.07 561.62 T
(o writers) 413.31 561.62 T
(r) 132.65 547.62 T
(educe this pr) 136.79 547.62 T
(oblem by choosing unusual or unlikely names for local) 199.68 547.62 T
(variables in their macr) 132.65 533.62 T
(os \050such as) 241.53 533.62 T
4 10 Q
(_swap_temp_value) 296.86 533.62 T
1 11 Q
(\051, but even this) 392.86 533.62 T
(workar) 132.65 519.62 T
(ound can be insuf) 167.94 519.62 T
(\336cient in complex macr) 254.45 519.62 T
(os. Dylan macr) 367.9 519.62 T
(os in) 440.8 519.62 T
(ef) 132.65 505.62 T
(fect automatically r) 141.38 505.62 T
(ename macr) 235.06 505.62 T
(o variables on each expansion to) 294.2 505.62 T
(guarantee unique names.) 132.65 491.62 T
126.65 602.83 126.65 484.08 2 L
V
0.25 H
N
477.65 602.83 477.65 484.08 2 L
V
N
126.52 602.95 477.77 602.95 2 L
V
N
126.52 483.95 477.77 483.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "364" 378
%%Page: "365" 379
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.4 Constraints) 443.51 702.62 T
2 F
(365) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(W) 99.65 665.62 T
(e see a common macr) 109.64 665.62 T
(o err) 213.57 665.62 T
(or \321 the expr) 236.09 665.62 T
(ession) 302.65 665.62 T
4 10 Q
(x := x + 1) 335.61 665.62 T
1 11 Q
( will be evaluated) 395.61 665.62 T
-0.1 (twice when the r) 99.65 651.62 P
-0.1 (esulting substitution is evaluated, leaving) 180.38 651.62 P
4 10 Q
-0.21 (x) 385.38 651.62 P
1 11 Q
-0.1 ( with an incorr) 391.38 651.62 P
-0.1 (ect \050or) 462.59 651.62 P
(at least unexpected\051 value. Ther) 99.65 637.62 T
(e is no magic technique for avoiding this err) 254.07 637.62 T
(or \321) 467.82 637.62 T
(you just have to be car) 99.65 623.62 T
(eful about r) 208.47 623.62 T
(epeating a pattern variable in a template. Most) 264.69 623.62 T
-0.05 (often, if you ar) 99.65 609.62 P
-0.05 (e r) 170.68 609.62 P
-0.05 (epeating a pattern variable, you should be using a local variable) 182.8 609.62 P
(instead, so that the fragment that the pattern r) 99.65 595.62 T
(epr) 323.11 595.62 T
(esents is evaluated only once:) 339.14 595.62 T
4 9 Q
(define macro or-int) 99.65 574.95 T
({ or-int \050?arg1:expression, ?arg2:expression\051 }) 110.45 563.95 T
(=> {) 105.05 552.95 T
(let arg1 = ?arg1;) 132.05 541.95 T
(if\050arg1 ~= 0\051 arg1 else ?arg2 end) 132.05 530.95 T
(}) 121.25 519.95 T
(end macro or-int;) 99.65 508.95 T
1 11 Q
(Another potential pitfall arises if the pattern variables appear in an or) 99.65 488.62 T
(der in the) 437.33 488.62 T
(template dif) 99.65 474.62 T
(fer) 158.52 474.62 T
(ent fr) 171.6 474.62 T
(om the one in which they appear in the pattern. In this case,) 197.42 474.62 T
-0.4 (unexpected r) 99.65 460.62 P
-0.4 (esults can occur if a side ef) 162.46 460.62 P
-0.4 (fect in one fragment af) 289.04 460.62 P
-0.4 (fects the meaning of) 396.67 460.62 P
(other fragments. In this case, you would again want to use local variables to) 99.65 446.62 T
(ensur) 99.65 432.62 T
(e that the fragments wer) 126.76 432.62 T
(e evaluated in their natural or) 245.21 432.62 T
(der) 389.85 432.62 T
(.) 405.37 432.62 T
-0.17 (These r) 126.65 418.62 P
-0.17 (ules ar) 161.83 418.62 P
-0.17 (e not har) 193.83 418.62 P
-0.17 (d and fast: The power of macr) 236.31 418.62 P
-0.17 (os is due in a lar) 381.04 418.62 P
-0.17 (ge part) 459.06 418.62 P
(to the ability of macr) 99.65 404.62 T
(os to manipulate code fragments without evaluating those) 200.3 404.62 T
(fragments, but that power must be used judiciously) 99.65 390.62 T
(. If you ar) 349.54 390.62 T
(e designing macr) 396.31 390.62 T
(os) 479.41 390.62 T
(for use by other people, those people may expect functionlike behavior) 99.65 376.62 T
(, and may) 443.54 376.62 T
(be surprised if ther) 99.65 362.62 T
(e ar) 191.97 362.62 T
(e multiple or out-of-or) 209.64 362.62 T
(der evaluations of macr) 318.3 362.62 T
(o parame-) 432.97 362.62 T
(ters.) 99.65 348.62 T
3 15 Q
(21.4  Constraints) 99.65 202.95 T
1 11 Q
(So far) 99.65 182.62 T
(, in our macr) 126.87 182.62 T
(os, we have seen the constraint) 188.7 182.62 T
4 10 Q
(expression) 341.89 182.62 T
1 11 Q
( used for the pat-) 401.89 182.62 T
-0.4 (tern variables. Except for a few unusual cases, pattern variables must always have) 99.65 168.62 P
(a constraint associated with them. Constraints serve two purposes: they limit the) 99.65 154.62 T
2 F
(Comparison with C:) 132.65 314.62 T
1 F
( Because it is mor) 233.77 314.62 T
(e dif) 318.23 314.62 T
(\336cult to intr) 339.64 314.62 T
(oduce local) 397.02 314.62 T
-0.37 (variables in C macr) 132.65 300.62 P
-0.37 (os than it is in Dylan macr) 225.42 300.62 P
-0.37 (os, most C pr) 350.5 300.62 P
-0.37 (ogrammers) 413.6 300.62 P
(simply adopt the discipline of never using an expr) 132.65 286.62 T
(ession with side) 376.98 286.62 T
(ef) 132.65 272.62 T
(fects as an ar) 141.38 272.62 T
(gument to a macr) 203.41 272.62 T
(o. The pr) 288.72 272.62 T
(oblem of multiple or out-of-) 332.14 272.62 T
(or) 132.65 258.62 T
(der evaluations of macr) 142.8 258.62 T
(o parameters is inher) 257.48 258.62 T
(ent in all macr) 359.82 258.62 T
(o sys-) 429.08 258.62 T
(tems, although some macr) 132.65 244.62 T
(o systems make it easier to handle.) 260.62 244.62 T
126.65 327.83 126.65 237.08 2 L
V
0.25 H
0 Z
N
477.65 327.83 477.65 237.08 2 L
V
N
126.52 327.95 477.77 327.95 2 L
V
N
126.52 236.95 477.77 236.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "365" 379
%%Page: "366" 380
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(366) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.05 (fragment that the pattern variable will match, and they de\336ne the meaning of the) 99.65 665.62 P
(pattern variable when it is substituted. As an example, consider the following) 99.65 651.62 T
2 F
-0.35 (statement macro) 99.65 637.62 P
1 F
-0.35 (, which we might \336nd useful for manipulating the decoded parts) 181.48 637.62 P
(of seconds:) 99.65 623.62 T
4 9 Q
(define macro with-decoded-seconds) 99.65 602.95 T
({) 110.45 591.95 T
(with-decoded-seconds) 121.25 580.95 T
(\050?max:variable, ?min:variable, ?sec:variable = ?time:expression\051) 142.85 569.95 T
(?:body) 132.05 558.95 T
(end) 121.25 547.95 T
(}) 110.45 536.95 T
(=> {) 105.05 525.95 T
(let \050?max, ?min, ?sec\051 = decode-total-seconds\050?time\051;) 137.45 514.95 T
(?body) 137.45 503.95 T
(}) 121.25 492.95 T
(end macro;) 99.65 481.95 T
1 11 Q
(The pr) 99.65 461.62 T
(eceding macr) 131.57 461.62 T
(o might be used as follows:) 196.43 461.62 T
4 9 Q
(define method say \050time :: <time>\051) 99.65 440.95 T
(with-decoded-seconds\050hours, minutes, seconds = time\051) 110.45 429.95 T
(format-out\050"%d:%s%d",) 121.25 418.95 T
(hours, if \050minutes < 10\051 "0" else "" end, minutes\051;) 180.65 407.95 T
(end;) 110.45 396.95 T
(end method say;) 99.65 385.95 T
1 11 Q
(A statement macr) 99.65 365.62 T
(o can appear anywher) 185.52 365.62 T
(e that a) 293.41 365.62 T
4 10 Q
(begin) 331.51 365.62 T
1 11 Q
(/) 361.51 365.62 T
4 10 Q
(end;) 368.17 365.62 T
1 11 Q
( block can appear) 392.17 365.62 T
(. A) 476.52 365.62 T
(statement macr) 99.65 351.62 T
(o intr) 174.22 351.62 T
(oduces a new) 200.31 351.62 T
2 F
(begin word) 269.08 351.62 T
1 F
( \321 in this case,) 326.83 351.62 T
4 10 Q
(with-decoded-) 402.1 351.62 T
(seconds) 99.65 337.62 T
1 11 Q
( \321 and is matched against a fragment that extends up to the matching) 141.65 337.62 T
4 10 Q
(end) 99.65 323.62 T
1 11 Q
(.) 117.65 323.62 T
(The pattern and the constraints on the pattern variables limit what the) 126.65 309.62 T
(macr) 99.65 295.62 T
(o will match; they de\336ne the syntax of this particular statement. In the case) 123.89 295.62 T
(of) 99.65 281.62 T
4 10 Q
(with-decoded-seconds) 112.07 281.62 T
1 11 Q
(, the syntax of this statement begins with a par) 232.07 281.62 T
(enthe-) 457.72 281.62 T
(sized list of) 99.65 267.62 T
(\245) 108.65 247.62 T
(Thr) 126.65 247.62 T
(ee) 143.94 247.62 T
4 10 Q
(variable) 157.23 247.62 T
1 11 Q
( expr) 205.23 247.62 T
(essions \050that is,) 229.68 247.62 T
4 10 Q
(name :: <type>) 306.15 247.62 T
1 11 Q
(, wher) 390.15 247.62 T
(e the type is) 420.64 247.62 T
(optional\051) 126.65 233.62 T
(\245) 108.65 213.62 T
(The literal token) 126.65 213.62 T
4 10 Q
(=) 208.99 213.62 T
1 11 Q
(\245) 108.65 193.62 T
(An) 126.65 193.62 T
4 10 Q
(expression) 144.36 193.62 T
1 11 Q
( \050any Dylan expr) 204.36 193.62 T
(ession yielding a value\051) 285.73 193.62 T
-0.07 (After the par) 99.65 173.62 P
-0.07 (enthesized list comes a) 161.94 173.62 P
4 10 Q
-0.15 (body) 275.63 173.62 P
1 11 Q
-0.07 ( \050any sequence of expr) 299.63 173.62 P
-0.07 (essions separated) 407.95 173.62 P
(by) 99.65 159.62 T
4 10 Q
(;) 114.6 159.62 T
1 11 Q
(, just as would be valid in a) 120.6 159.62 T
4 10 Q
(begin) 256 159.62 T
1 11 Q
(/) 286 159.62 T
4 10 Q
(end;) 292.66 159.62 T
1 11 Q
( block\051. Note the use of the abbr) 316.66 159.62 T
(evia-) 471.18 159.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "366" 380
%%Page: "367" 381
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.4 Constraints) 443.51 702.62 T
2 F
(367) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(tion) 99.65 665.62 T
4 10 Q
(?:body) 121.59 665.62 T
1 11 Q
(, to mean) 156.37 665.62 T
4 10 Q
(?body:body) 203.85 665.62 T
1 11 Q
( \050a pattern variable,) 263.85 665.62 T
4 10 Q
(body) 361.37 665.62 T
1 11 Q
(, with the constraint) 384.15 665.62 T
4 10 Q
(body) 99.65 651.62 T
1 11 Q
(\051.) 123.65 651.62 T
(The constraints ar) 126.65 637.62 T
(e similar to type declarations on variables: They limit the) 213.45 637.62 T
(acceptable values of the pattern variables, and they help to document the inter-) 99.65 623.62 T
-0.18 (face of the macr) 99.65 609.62 P
-0.18 (o. The constraints also serve a second purpose: Once the compiler) 175.84 609.62 P
-0.02 (has r) 99.65 595.62 P
-0.02 (ecognized a fragment under a particular constraint, it will ensur) 123.09 595.62 P
-0.02 (e the corr) 433.81 595.62 P
-0.02 (ect) 479.18 595.62 P
(behavior of that fragment when that fragment is substituted in a template. For) 99.65 581.62 T
(example, suppose that we de\336ne a function macr) 99.65 567.62 T
(o:) 337.7 567.62 T
4 9 Q
(define macro times) 99.65 546.95 T
({ times \050?arg1:expression, ?arg2:expression \051 } =>) 110.45 535.95 T
({ ?arg1 * ?arg2 }) 121.25 524.95 T
(end macro times;) 99.65 513.95 T
1 11 Q
(W) 99.65 493.62 T
(e might use the macr) 109.64 493.62 T
(o as follows:) 210.99 493.62 T
4 9 Q
(times\0501 + 3, 2 + 5\051;) 99.65 472.95 T
1 11 Q
(Her) 99.65 452.62 T
(e is the expanded macr) 118.22 452.62 T
(o:) 230.02 452.62 T
4 9 Q
(1 + 3) 99.65 431.95 T
142.85 431.05 126.65 431.05 2 L
V
0.45 H
0 Z
N
6 F
( *) 126.65 431.95 T
4 F
(2 + 5) 142.85 431.95 T
1 11 Q
(W) 99.65 411.62 T
(e can see that, if the macr) 109.64 411.62 T
(o wer) 231.58 411.62 T
(e a simple text-substitution macr) 258.93 411.62 T
(o, the r) 417.62 411.62 T
(esult) 451.29 411.62 T
-0.27 (would be 12, rather than the 28 we wer) 99.65 397.62 P
-0.27 (e expecting. But because, in Dylan, the con-) 286.96 397.62 P
-0.37 (straint is maintained when a pattern variable is substituted \050that is, the expr) 99.65 383.62 P
-0.37 (ession) 463.06 383.62 P
(that makes up each of the pattern variables r) 99.65 369.62 T
(emains a single expr) 315.63 369.62 T
(ession\051, the) 414.69 369.62 T
(r) 99.65 355.62 T
(esult is as though the macr) 103.79 355.62 T
(o automatically inserted par) 233.57 355.62 T
(entheses, and the expan-) 370.17 355.62 T
(sion wer) 99.65 341.62 T
(e) 141.26 341.62 T
105.05 320.05 99.65 320.05 2 L
V
N
6 9 Q
(\050) 99.65 320.95 T
4 F
(1 + 3) 105.05 320.95 T
159.05 320.05 132.05 320.05 2 L
V
N
6 F
(\051 * \050) 132.05 320.95 T
4 F
(2 + 5) 159.05 320.95 T
191.45 320.05 186.05 320.05 2 L
V
N
6 F
(\051) 186.05 320.95 T
1 11 Q
(Some development envir) 99.65 300.62 T
(onments may display the implicit par) 221.41 300.62 T
(entheses of an) 403.65 300.62 T
(expr) 99.65 286.62 T
(ession constraint. Thus, the macr) 121.35 286.62 T
(o will yield the expected r) 280.58 286.62 T
(esult of 28.) 406.31 286.62 T
2 F
(Comparison with C:) 132.65 252.62 T
1 F
( Because C macr) 233.77 252.62 T
(os ar) 313 252.62 T
(e simple textual substitu-) 336.07 252.62 T
(tions, the macr) 132.65 238.62 T
(o writer must be sur) 204.26 238.62 T
(e to insert par) 302.58 238.62 T
(entheses ar) 369.41 238.62 T
(ound) 423.33 238.62 T
(every macr) 132.65 224.62 T
(o variable when it is substituted, and ar) 186.86 224.62 T
(ound the macr) 378.97 224.62 T
(o) 449.73 224.62 T
(expansion itself, to pr) 132.65 210.62 T
(event the r) 237.31 210.62 T
(esulting expansion fr) 288.96 210.62 T
(om taking on) 391.07 210.62 T
(new meanings.) 132.65 196.62 T
126.65 265.83 126.65 189.08 2 L
V
0.25 H
N
477.65 265.83 477.65 189.08 2 L
V
N
126.52 265.95 477.77 265.95 2 L
V
N
126.52 188.95 477.77 188.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "367" 381
%%Page: "368" 382
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(368) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(21.5  More comple) 99.65 662.95 T
(x rules) 206.13 662.95 T
1 11 Q
-0.25 (The macr) 99.65 642.62 P
-0.25 (os shown so far have all been simple: a single pattern transformed into a) 144.81 642.62 P
(single template. T) 99.65 628.62 T
(o get a \337avor of the full power of the Dylan macr) 185.22 628.62 T
(o system, con-) 422.63 628.62 T
(sider this) 99.65 614.62 T
2 F
(de\336ning macro) 147.2 614.62 T
1 F
(:) 222.67 614.62 T
4 9 Q
(define macro aircraft-definer) 99.65 593.95 T
({ define aircraft ?identifier:name \050?type:name\051 ?flights end }) 110.45 582.95 T
(=> { register-aircraft\050make\050"<" ## ?type ## ">", id: ?#"identifier"\051\051;) 115.85 571.95 T
(register-flights\050?#"identifier", ?flights\051 }) 142.85 560.95 T
(flights:) 99.65 549.95 T
({ }) 110.45 538.95 T
(=> { }) 115.85 527.95 T
({ ?flight; ... }) 110.45 516.95 T
(=> { ?flight, ... }) 115.85 505.95 T
(flight:) 99.65 494.95 T
({ flight ?id:name, #rest ?options:expression }) 110.45 483.95 T
(=> { make\050<flight>, id: ?#"id", ?options\051 }) 115.85 472.95 T
(end macro aircraft-definer;) 99.65 461.95 T
1 11 Q
(W) 99.65 441.62 T
(e might use the macr) 109.64 441.62 T
(o) 210.99 441.62 T
4 10 Q
(define aircraft) 219.75 441.62 T
1 11 Q
( as follows:) 309.75 441.62 T
4 9 Q
(define aircraft UA4906H \050DC10\051) 99.65 420.95 T
(flight UA11, from: #"BOS", to: #"SFO";) 110.45 409.95 T
(flight UA12, from: #"SFO", to: #"BOS";) 110.45 398.95 T
(end aircraft UA4906H;) 99.65 387.95 T
1 11 Q
(This macr) 99.65 367.62 T
(o shows a number of the mor) 147.65 367.62 T
(e esoteric featur) 289.8 367.62 T
(es of Dylan macr) 366.6 367.62 T
(os. First,) 448.42 367.62 T
-0.19 (notice the pattern variable) 99.65 353.62 P
4 10 Q
-0.41 (?flights) 229.1 353.62 P
1 11 Q
-0.19 (, which has no constraint, but rather is called) 277.11 353.62 P
-0.22 (out as an) 99.65 339.62 P
2 F
-0.22 (auxiliary rule) 145.52 339.62 P
1 F
-0.22 (. When the compiler matches this macr) 212.81 339.62 P
-0.22 (o, it will try each of) 400.4 339.62 P
(the auxiliary r) 99.65 325.62 T
(ule\325s patterns listed under) 168.04 325.62 T
4 10 Q
(flights:) 297.83 325.62 T
1 11 Q
( for a match. When it \336nds a) 345.83 325.62 T
-0.21 (match, it will assign the pattern variable) 99.65 311.62 P
4 10 Q
-0.46 (?flights) 296.23 311.62 P
1 11 Q
-0.21 ( to the fragment r) 344.23 311.62 P
-0.21 (esulting fr) 427.97 311.62 P
-0.21 (om) 477.39 311.62 P
(the matching pattern\325s template substitution. In ef) 99.65 297.62 T
(fect, auxiliary r) 342.8 297.62 T
(ules give a way) 416.08 297.62 T
-0.15 (of writing new constraints, combined with the ef) 99.65 283.62 P
-0.15 (fect of a subr) 335.02 283.62 P
-0.15 (outine for matching) 396.93 283.62 P
(and substitution.) 99.65 269.62 T
-0.33 (In this particular case, we use the auxiliary r) 126.65 255.62 P
-0.33 (ule to map yet another auxiliary) 338.75 255.62 P
(r) 99.65 241.62 T
(ule,) 103.9 241.62 T
4 10 Q
(flight) 124.51 241.62 T
1 11 Q
(, over a sequence of \337ight descriptions that look similar to the slot) 160.51 241.62 T
(descriptions in a class. The mapping is signaled by the points of ellipsis \050) 99.65 227.62 T
4 10 Q
(...) 452.49 227.62 T
1 11 Q
(\051) 470.49 227.62 T
(which means that the r) 99.65 213.62 T
(ule should be applied r) 210.85 213.62 T
(ecursively \050that is, the curr) 323.19 213.62 T
(ent r) 452.61 213.62 T
(ule) 474.87 213.62 T
-0.37 (is matched again to the fragment that matches) 99.65 199.62 P
4 10 Q
-0.81 (...) 323.89 199.62 P
1 11 Q
-0.37 (\051. Note that) 341.89 199.62 P
4 10 Q
-0.81 (flights) 398.52 199.62 P
1 11 Q
-0.37 ( must have) 440.52 199.62 P
(a r) 99.65 185.62 T
(ule to cover the case of ther) 112.15 185.62 T
(e being no \337ight; that r) 244.72 185.62 T
(ule also handles the end of) 355.29 185.62 T
(the r) 99.65 171.62 T
(ecursion when the \336nal \337ight has been matched.) 121.8 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "368" 382
%%Page: "369" 383
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.6 More hygiene) 436.38 702.62 T
2 F
(369) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The) 126.65 665.62 T
4 10 Q
(flight) 147.81 665.62 T
1 11 Q
( r) 183.81 665.62 T
(ule simply converts each \337ight name and its options into the) 190.82 665.62 T
(appr) 99.65 651.62 T
(opriate call to) 122.52 651.62 T
4 10 Q
(make) 191.66 651.62 T
1 11 Q
(, to cr) 215.66 651.62 T
(eate the \337ight. W) 242.54 651.62 T
(e could extend this r) 324.4 651.62 T
(ule to allow a) 423.14 651.62 T
(mor) 99.65 637.62 T
(e natural speci\336cation for \337ight origin, destination, and time.) 119.51 637.62 T
(W) 126.65 623.62 T
(e do the work of de\336ning an air) 136.64 623.62 T
(craft by calling the helper functions) 289.96 623.62 T
4 10 Q
(register-aircraft) 99.65 609.62 T
1 11 Q
( and) 201.65 609.62 T
4 10 Q
(register-flights) 225.77 609.62 T
1 11 Q
( \050which ar) 321.77 609.62 T
(e not given her) 370.64 609.62 T
(e\051, but the) 443.18 609.62 T
(macr) 99.65 595.62 T
(o takes car) 123.89 595.62 T
(e of getting the ar) 175.06 595.62 T
(guments in or) 260.18 595.62 T
(der) 327.82 595.62 T
(. The substitution) 343.34 595.62 T
4 9 Q
("<") 431 595.62 T
4 10 Q
(##) 452.6 595.62 T
(?type ## ">") 99.65 581.62 T
1 11 Q
( turns the name) 171.65 581.62 T
4 10 Q
(DC10) 250.42 581.62 T
1 11 Q
( into the name) 274.42 581.62 T
4 10 Q
(<DC10>) 346.76 581.62 T
1 11 Q
( by using) 382.76 581.62 T
2 F
-0.03 (concatenation) 99.65 567.62 P
1 F
-0.03 (, allowing a mor) 169.3 567.62 P
-0.03 (e concise format for our de\336ner while maintaining) 248.37 567.62 P
(our convention for naming types. The substitution) 99.65 553.62 T
4 10 Q
(?#"identifier") 347.26 553.62 T
1 11 Q
( turns the) 431.26 553.62 T
-0.16 (name) 99.65 539.62 P
4 10 Q
-0.34 (UA1306) 129.12 539.62 P
1 11 Q
-0.16 ( into the symbol) 165.12 539.62 P
4 10 Q
-0.34 (#"UA1306") 245.73 539.62 P
1 11 Q
-0.16 ( by using) 299.73 539.62 P
2 F
-0.16 (coercion) 346.72 539.62 P
1 F
-0.16 (; the pr) 388.89 539.62 P
-0.16 (ogram can use) 422.84 539.62 P
-0.43 (the symbol) 99.65 525.62 P
4 10 Q
-0.94 (#"UA1306") 155.32 525.62 P
1 11 Q
-0.43 ( to look up an air) 209.32 525.62 P
-0.43 (craft in the r) 289.83 525.62 P
-0.43 (egistry by name. The template) 347.77 525.62 P
(for) 99.65 511.62 T
4 10 Q
(flights) 116.41 511.62 T
1 11 Q
( collects all the individual \337ights into a comma-separated list that is) 158.41 511.62 T
(passed to) 99.65 497.62 T
4 10 Q
(register-flights) 148.17 497.62 T
1 11 Q
( as a) 244.17 497.62 T
4 10 Q
(#rest) 268.08 497.62 T
1 11 Q
( ar) 298.08 497.62 T
(gument.) 310.48 497.62 T
3 15 Q
(21.6  More h) 99.65 457.95 T
(ygiene) 170.52 457.95 T
1 11 Q
-0.41 (W) 99.65 437.62 P
-0.41 (e shall make one mor) 109.64 437.62 P
-0.41 (e note about hygiene: In a textual substitution macr) 211.38 437.62 P
-0.41 (o, ther) 457.53 437.62 P
-0.41 (e) 488.04 437.62 P
(is a chance that the global variables that the macr) 99.65 423.62 T
(o uses \050in this case, the helper) 338.1 423.62 T
-0.02 (function) 99.65 409.62 P
4 10 Q
-0.05 (define-aircraft) 143.15 409.62 P
1 11 Q
-0.02 (\051 could be confused with a surr) 233.15 409.62 P
-0.02 (ounding local variable) 383.88 409.62 P
(of the same name wher) 99.65 395.62 T
(e the macr) 212.6 395.62 T
(o is called. This confusion does not happen in a) 262.87 395.62 T
(Dylan macr) 99.65 381.62 T
(o. The global variables used in a Dylan macr) 156.38 381.62 T
(o always denote what) 372 381.62 T
(they denoted at the time that the macr) 99.65 367.62 T
(o was de\336ned, rather than at the time that) 284.93 367.62 T
(the macr) 99.65 353.62 T
(o is called. It is as though the variables wer) 141.9 353.62 T
(e automatically r) 350.34 353.62 T
(enamed so) 431.88 353.62 T
(that con\337icts will be avoided.) 99.65 339.62 T
(Y) 126.65 325.62 T
(ou will also notice this featur) 132.97 325.62 T
(e if you export a macr) 273.51 325.62 T
(o fr) 379.38 325.62 T
(om a module. Only) 395.95 325.62 T
-0.19 (the macr) 99.65 311.62 P
-0.19 (o needs to be exported. Its global r) 141.71 311.62 P
-0.19 (efer) 307.32 311.62 P
-0.19 (ences still r) 325.67 311.62 P
-0.19 (efer to the pr) 379.27 311.62 P
-0.19 (oper \050mod-) 441.09 311.62 P
-0.18 (ule-private\051 values that they had at the time the macr) 99.65 297.62 P
-0.18 (o was de\336ned, just as occurs) 356.08 297.62 P
(when a function exported fr) 99.65 283.62 T
(om a module calls module-private subr) 235.46 283.62 T
(outines.) 426.89 283.62 T
-0.06 (Occasionally) 126.65 269.62 P
-0.06 (, you will want to cir) 187.63 269.62 P
-0.06 (cumvent macr) 287.83 269.62 P
-0.06 (o hygiene. Y) 357.46 269.62 P
-0.06 (ou may want to) 416.68 269.62 P
(de\336ne a macr) 99.65 255.62 T
(o that cr) 165.21 255.62 T
(eates a variable that) 204.82 255.62 T
0 F
(is) 303.99 255.62 T
1 F
(visible at the macr) 314.08 255.62 T
(o call. Her) 402.75 255.62 T
(e is a) 452.36 255.62 T
(simple statement macr) 99.65 241.62 T
(o that r) 209.63 241.62 T
(epeats its body until you ask it to) 244.35 241.62 T
4 10 Q
(stop!) 408.07 241.62 T
1 11 Q
(:) 438.07 241.62 T
4 9 Q
(define macro repeat) 99.65 220.95 T
({ repeat ?:body end }) 110.45 209.95 T
(=>) 105.05 198.95 T
({ block \050?=stop!\051) 121.25 198.95 T
(local method again\050\051 ?body; again\050\051 end;) 142.85 187.95 T
(again\050\051;) 142.85 176.95 T
(end }) 132.05 165.95 T
(end macro repeat;) 99.65 154.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "369" 383
%%Page: "370" 384
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(370) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The term) 99.65 665.62 T
4 10 Q
(?=stop!) 146.48 665.62 T
1 11 Q
( says that the local variable) 188.48 665.62 T
4 10 Q
(stop!) 322.36 665.62 T
1 11 Q
(, which is the block exit vari-) 352.36 665.62 T
(able, will be visible when the macr) 99.65 651.62 T
(o is called exactly as) 267.66 651.62 T
4 10 Q
(stop!) 368.45 651.62 T
1 11 Q
(; ther) 398.45 651.62 T
(e will be no) 423.36 651.62 T
(hygienic r) 99.65 637.62 T
(enaming. Her) 148.14 637.62 T
(e is an example that uses the macr) 214.81 637.62 T
(o to count to 100:) 380.14 637.62 T
4 9 Q
(begin) 99.65 616.95 T
(let i = 0;) 110.45 605.95 T
(repeat) 110.45 594.95 T
(if \050i == 100\051 stop!\050\051 end;) 121.25 583.95 T
(i := i + 1;) 121.25 572.95 T
(end;) 110.45 561.95 T
(end;) 99.65 550.95 T
1 11 Q
(Note that the) 99.65 530.62 T
4 10 Q
(body) 166.23 530.62 T
1 11 Q
( constraint invokes the Dylan parser to match the code pr) 190.23 530.62 T
(op-) 468.48 530.62 T
-0.18 (erly between the) 99.65 516.62 P
4 10 Q
-0.4 (repeat) 182.59 516.62 P
1 11 Q
-0.18 ( and the corr) 218.59 516.62 P
-0.18 (esponding) 279.55 516.62 P
4 10 Q
-0.4 (end) 333.51 516.62 P
1 11 Q
-0.18 (. It is not confused by the) 351.51 516.62 P
4 10 Q
-0.4 (end) 475.08 516.62 P
1 11 Q
(of the) 99.65 502.62 T
4 10 Q
(if) 130.07 502.62 T
1 11 Q
( statement, as a text-based macr) 142.07 502.62 T
(o might be. The expanded view of the) 296.07 502.62 T
(pr) 99.65 488.62 T
(eceding code might look like this:) 110.41 488.62 T
4 9 Q
(begin) 99.65 467.95 T
(let i = 0;) 110.45 456.95 T
148.25 445.05 110.45 445.05 2 L
V
0.45 H
0 Z
N
6 F
(block \050) 110.45 445.95 T
4 10 Q
(stop!) 148.25 445.95 T
183.65 445.05 178.25 445.05 2 L
V
N
6 9 Q
(\051) 178.25 445.95 T
229.25 434.05 121.25 434.05 2 L
V
N
(local method again\050\051) 121.25 434.95 T
4 F
(if \050i == 100\051 stop!\050\051 end;) 132.05 423.95 T
(i := i + 1;) 132.05 412.95 T
175.25 401.05 137.45 401.05 2 L
V
N
6 F
(again\050\051) 137.45 401.95 T
142.85 390.05 121.25 390.05 2 L
V
N
(end;) 121.25 390.95 T
164.45 379.05 121.25 379.05 2 L
V
N
(again\050\051;) 121.25 379.95 T
126.65 368.05 110.45 368.05 2 L
V
N
(end) 110.45 368.95 T
4 F
(;) 126.65 368.95 T
(end;) 99.65 357.95 T
1 11 Q
-0.34 (Note that we have shown the local variable) 99.65 337.62 P
4 10 Q
-0.73 (stop!) 309.88 337.62 P
1 11 Q
-0.34 ( intr) 339.88 337.62 P
-0.34 (oduced by the macr) 359.63 337.62 P
-0.34 (o) 454.81 337.62 P
4 10 Q
-0.73 (block) 463.23 337.62 P
1 11 Q
(in) 99.65 323.62 T
4 10 Q
(code font) 112 323.62 T
1 11 Q
( rather than in) 166 323.62 T
324.34 322.72 237.94 322.72 2 L
V
N
6 9 Q
(underline italic) 237.94 323.62 T
1 11 Q
(, because it is visible to the body) 324.34 323.62 T
(and is exactly the) 99.65 309.62 T
4 10 Q
(stop!) 186.62 309.62 T
1 11 Q
( called in the) 216.62 309.62 T
4 10 Q
(if) 281.26 309.62 T
1 11 Q
( to stop the r) 293.26 309.62 T
(epetition. The local variable) 354.12 309.62 T
126.65 294.72 99.65 294.72 2 L
V
N
6 9 Q
(again) 99.65 295.62 T
1 11 Q
(, on the other hand, is not visible to the body code. W) 126.65 295.62 T
(e could use) 384.53 295.62 T
4 10 Q
(again) 442.06 295.62 T
1 11 Q
(instead of) 99.65 281.62 T
4 10 Q
(i) 150.16 281.62 T
1 11 Q
( as our r) 156.16 281.62 T
(epetition count without a pr) 195.71 281.62 T
(oblem.) 332.19 281.62 T
2 F
(Comparison with C:) 132.65 247.62 T
1 F
( All C macr) 233.77 247.62 T
(os have the syntax of function calls,) 289.02 247.62 T
-0.28 (making it impossible to write language extensions such as) 132.65 233.62 P
4 10 Q
-0.61 (repeat) 415.12 233.62 P
1 11 Q
-0.28 (. By) 451.12 233.62 P
(using language-based constraints, such as the) 132.65 219.62 T
4 10 Q
(body) 356.8 219.62 T
1 11 Q
( constraint used) 380.8 219.62 T
(her) 132.65 205.62 T
(e, Dylan macr) 148.47 205.62 T
(os can match language forms, and thus can cr) 215.96 205.62 T
(eate) 437.11 205.62 T
(extensions that ar) 132.65 191.62 T
(e consistent with the base language.) 218.01 191.62 T
126.65 260.83 126.65 184.08 2 L
V
0.25 H
N
477.65 260.83 477.65 184.08 2 L
V
N
126.52 260.95 477.77 260.95 2 L
V
N
126.52 183.95 477.77 183.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "370" 384
%%Page: "371" 385
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.7 Auxiliary macros) 421.96 702.62 T
2 F
(371) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.28 (Note that we would have to document how) 99.65 665.62 P
4 10 Q
-0.62 (repeat) 312.41 665.62 P
1 11 Q
-0.28 ( works for other users, or they) 348.41 665.62 P
(might be surprised if they tried to use) 99.65 651.62 T
4 10 Q
(stop!) 285.99 651.62 T
1 11 Q
( instead of) 315.99 651.62 T
4 10 Q
(i) 369.25 651.62 T
1 11 Q
( in the example.) 375.25 651.62 T
3 15 Q
(21.7  A) 99.65 611.95 T
(uxiliar) 138.95 611.95 T
(y macr) 175.31 611.95 T
(os) 214.74 611.95 T
1 11 Q
(One dif) 99.65 591.62 T
(\336culty with the air) 136.1 591.62 T
(craft macr) 225.9 591.62 T
(o that we de\336ned in Section 21.5 is this: sup-) 274.87 591.62 T
(pose that we want each \337ight object to know the type of equipment used, rather) 99.65 577.62 T
(than our having to look up the type in the air) 99.65 563.62 T
(craft r) 318.57 563.62 T
(egistry) 347.45 563.62 T
(. What looks like the) 379.52 563.62 T
(obvious appr) 99.65 549.62 T
(oach does not work:) 164.07 549.62 T
4 9 Q
(define macro aircraft-definer) 99.65 528.95 T
({ define aircraft ?identifier:name \050?type:name\051 ?flights end }) 110.45 517.95 T
(=> { register-aircraft\050make\050"<" ## ?type ## ">", id: ?#"identifier"\051\051;) 115.85 506.95 T
(register-flights\050?#"identifier", ?flights\051 }) 142.85 495.95 T
(flights:) 99.65 484.95 T
({ }) 110.45 473.95 T
(=> { }) 115.85 462.95 T
({ ?flight; ... }) 110.45 451.95 T
(=> { ?flight, ... }) 115.85 440.95 T
(flight:) 99.65 429.95 T
({ }) 110.45 418.95 T
(=> { }) 115.85 407.95 T
({ flight ?id:name, #rest ?options:expression }) 110.45 396.95 T
(=> { make\050<flight>, equipment: ?"type", id: ?#"id", ?options\051 }) 115.85 385.95 T
(end macro aircraft-definer;) 99.65 374.95 T
1 11 Q
(When we ar) 99.65 354.62 T
(e pr) 158.31 354.62 T
(ocessing the) 177.09 354.62 T
4 10 Q
(flight) 239.05 354.62 T
1 11 Q
( auxiliary r) 275.05 354.62 T
(ules, we would like to be able to) 328.18 354.62 T
(r) 99.65 340.62 T
(efer) 103.79 340.62 T
(ence the pattern variable) 122.14 340.62 T
4 10 Q
(?type) 244.84 340.62 T
1 11 Q
( \050coer) 274.84 340.62 T
(cing it to a string\051 fr) 301.56 340.62 T
(om the main r) 397.58 340.62 T
(ules,) 465.87 340.62 T
(but it is not) 99.65 326.62 T
2 F
(in scope) 157.6 326.62 T
1 F
( \321 it is inaccessible to the auxiliary r) 198.84 326.62 T
(ules. W) 376.19 326.62 T
(e could have) 411.44 326.62 T
4 10 Q
(register-flights) 99.65 312.62 T
1 11 Q
( set the) 195.65 312.62 T
4 10 Q
(equipment) 232.67 312.62 T
1 11 Q
( slot after the \337ight is cr) 286.67 312.62 T
(eated, but we) 401.14 312.62 T
-0.15 (would pr) 99.65 298.62 P
-0.15 (efer to initialize the slot at the time we cr) 144.74 298.62 P
-0.15 (eate the) 340.8 298.62 P
4 10 Q
-0.34 (<flight>) 380.88 298.62 P
1 11 Q
-0.15 ( object. Ther) 428.88 298.62 P
-0.15 (e) 487.78 298.62 P
(is a workar) 99.65 284.62 T
(ound, an) 153.8 284.62 T
2 F
(auxiliary macro) 199.71 284.62 T
1 F
(:) 277.63 284.62 T
4 9 Q
(define macro aircraft-definer) 99.65 263.95 T
({ define aircraft ?identifier:name \050?type:name\051 ?flights:* end }) 110.45 252.95 T
(=> { register-aircraft \050make\050"<" ## ?type ## ">", id: ?#"identifier"\051\051;) 115.85 241.95 T
(define flights \050?#"identifier", ?"type"\051) 142.85 230.95 T
(?flights) 153.65 219.95 T
(end }) 142.85 208.95 T
(end macro aircraft-definer;) 99.65 197.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "371" 385
%%Page: "372" 386
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(372) 63.65 702.62 T
0 F
(Chapter 21) 87.4 702.62 T
(Macros) 139.38 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(define macro flights-definer) 99.65 666.95 T
({ define flights \050?craft:name, ?equipment:name\051 end }) 110.45 655.95 T
(=> { }) 115.85 644.95 T
({ define flights \050?craft:name, ?equipment:name\051 ?flight ; ?more:* end }) 110.45 633.95 T
(=> { register-flights) 115.85 622.95 T
(\050?craft, make\050<flight>, equipment: ?equipment, ?flight\051\051 ;) 153.65 611.95 T
(define flights \050?craft, ?equipment\051 ?more end }) 142.85 600.95 T
(flight:) 99.65 589.95 T
({ }) 110.45 578.95 T
(=> { }) 115.85 567.95 T
({ flight ?id:name, #rest ?options:expression }) 110.45 556.95 T
(=> { id: ?#"id", ?options }) 115.85 545.95 T
(end macro flights-definer;) 99.65 534.95 T
1 11 Q
(Her) 99.65 514.62 T
(e, we have essentially br) 118.22 514.62 T
(oken out the work that used to be done by the auxil-) 236.37 514.62 T
-0.28 (iary r) 99.65 500.62 P
-0.28 (ule) 125.54 500.62 P
4 10 Q
-0.62 (flights) 143.11 500.62 P
1 11 Q
-0.28 ( into a separate de\336nition macr) 185.11 500.62 P
-0.28 (o. Wher) 334.57 500.62 P
-0.28 (e) 372.61 500.62 P
4 10 Q
-0.62 (flights) 380.35 500.62 P
1 11 Q
-0.28 ( used points of) 422.35 500.62 P
(ellipsis to walk over each \337ight, the de\336nition macr) 99.65 486.62 T
(o uses a) 348.82 486.62 T
2 F
(wildcard) 389.81 486.62 T
1 F
( constraint) 434.4 486.62 T
4 10 Q
(?more:*) 99.65 472.62 T
1 11 Q
(, explicitly calling itself again \050that is, the macr) 141.65 472.62 T
(o appears in the substitu-) 367.01 472.62 T
(tion, and will be expanded again\051, as long as ther) 99.65 458.62 T
(e ar) 337.85 458.62 T
(e mor) 355.52 458.62 T
(e \337ights to be) 383.4 458.62 T
(pr) 99.65 444.62 T
(ocessed.) 110.41 444.62 T
(Her) 126.65 430.62 T
(e is an example use of the) 145.22 430.62 T
4 10 Q
(flights-definer) 272.23 430.62 T
1 11 Q
( macr) 362.23 430.62 T
(o:) 389.23 430.62 T
4 9 Q
(define aircraft UA4906H \050DC10\051) 99.65 409.95 T
(flight UA11 from: #"BOS", to: #"SFO";) 110.45 398.95 T
(flight UA12 from: #"SFO", to: #"BOS";) 110.45 387.95 T
(end aircraft UA4906H;) 99.65 376.95 T
1 11 Q
(Expanding that code would r) 99.65 356.62 T
(esult in the following:) 241.83 356.62 T
229.25 335.05 99.65 335.05 2 L
V
0.45 H
0 Z
N
6 9 Q
(register-aircraft \050make\050) 99.65 335.95 T
4 F
(<DC10>) 229.25 335.95 T
272.45 335.05 261.65 335.05 2 L
V
N
6 F
(,) 261.65 335.95 T
4 F
(#"UA4096H") 272.45 335.95 T
342.65 335.05 326.45 335.05 2 L
V
N
6 F
(\051\051;) 326.45 335.95 T
196.85 324.05 99.65 324.05 2 L
V
N
(register-flights \050) 99.65 324.95 T
4 F
(#"UA4096H") 196.85 324.95 T
256.25 324.05 250.85 324.05 2 L
V
N
6 F
(,) 250.85 324.95 T
337.25 313.05 196.85 313.05 2 L
V
N
(make\050<flight>, equipment:) 196.85 313.95 T
4 F
("DC10") 337.25 313.95 T
375.05 313.05 369.65 313.05 2 L
V
N
6 F
(,) 369.65 313.95 T
245.45 302.05 223.85 302.05 2 L
V
N
(id:) 223.85 302.95 T
4 F
(#"UA11") 245.45 302.95 T
288.65 302.05 283.25 302.05 2 L
V
N
(from: #"BOS", to: #"SFO") 288.65 302.95 T
429.05 302.05 418.25 302.05 2 L
V
N
6 F
(\051;) 418.25 302.95 T
196.85 291.05 99.65 291.05 2 L
V
N
(register-flights \050) 99.65 291.95 T
4 F
(#"UA4096H") 196.85 291.95 T
256.25 291.05 250.85 291.05 2 L
V
N
6 F
(,) 250.85 291.95 T
337.25 280.05 196.85 280.05 2 L
V
N
(make\050<flight>, equipment:) 196.85 280.95 T
4 F
("DC10") 337.25 280.95 T
375.05 280.05 369.65 280.05 2 L
V
N
6 F
(,) 369.65 280.95 T
245.45 269.05 223.85 269.05 2 L
V
N
(id:) 223.85 269.95 T
4 F
(#"UA12") 245.45 269.95 T
288.65 269.05 283.25 269.05 2 L
V
N
(from: #"SFO", to: #"BOS") 288.65 269.95 T
429.05 269.05 418.25 269.05 2 L
V
N
6 F
(\051;) 418.25 269.95 T
1 11 Q
(\050Note that this example is a hypothetical one used to illustrate macr) 99.65 249.62 T
(o expansion.) 427.84 249.62 T
(The) 99.65 235.62 T
4 10 Q
(define aircraft) 120.81 235.62 T
1 11 Q
( statement cannot be compiled in the airport example.\051) 210.81 235.62 T
3 15 Q
(21.8  Summar) 99.65 195.95 T
(y) 179.76 195.95 T
1 11 Q
(In this chapter) 99.65 175.62 T
(, we intr) 168.89 175.62 T
(oduced macr) 208.92 175.62 T
(os by explaining their purpose as a language-) 272.15 175.62 T
(extension tool, and by showing a range of Dylan macr) 99.65 161.62 T
(os. Macr) 361.99 161.62 T
(os can be useful) 403.09 161.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "372" 386
%%Page: "373" 387
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(21.8 Summary) 450.89 702.62 T
2 F
(373) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(when you want to tailor the language to expr) 99.65 665.62 T
(ess a particular pr) 319.03 665.62 T
(oblem domain) 405.94 665.62 T
(mor) 99.65 651.62 T
(e concisely) 119.51 651.62 T
(.) 170.94 651.62 T
(T) 126.65 637.62 T
(able 21.1 summarizes how constraints contr) 132.38 637.62 T
(ol pattern-variable matches.) 344.48 637.62 T
8 F
(Constr) 109.4 606.62 T
(aint) 141.68 606.62 T
(Matches) 321.86 606.62 T
4 10 Q
(token) 104.41 581.62 T
8 11 Q
(a le) 176.41 581.62 T
(x) 193.81 581.62 T
(eme \050a Dylan w) 198.98 581.62 T
(ord\051, including liter) 275.27 581.62 T
(al str) 365.02 581.62 T
(ings) 389.03 581.62 T
(, symbols) 409.04 581.62 T
(, and n) 455.32 581.62 T
(um-) 488.85 581.62 T
(bers and punctuation) 176.41 565.62 T
4 10 Q
(name) 104.41 542.62 T
8 11 Q
(a Dylan identi\336er) 176.41 542.62 T
(, including reser) 257.77 542.62 T
(v) 335.74 542.62 T
(ed identi\336ers) 340.97 542.62 T
(, such as) 403.16 542.62 T
4 10 Q
(define) 450.24 542.62 T
8 11 Q
(,) 486.08 542.62 T
4 10 Q
(end) 176.41 526.62 T
8 11 Q
(, and oper) 194.41 526.62 T
(ators such as) 243.83 526.62 T
4 10 Q
(+) 312.3 526.62 T
8 11 Q
(, or) 318.3 526.62 T
4 10 Q
(*) 337.26 526.62 T
(variable) 104.41 503.62 T
8 11 Q
(either) 176.41 503.62 T
4 10 Q
(variable) 206.98 503.62 T
8 11 Q
( or) 254.98 503.62 T
4 10 Q
(variable :: <type>) 270.87 503.62 T
8 11 Q
(, useful f) 378.87 503.62 T
(or macros that) 420.12 503.62 T
(mimic v) 176.41 487.62 T
(ar) 213.4 487.62 T
(iab) 223.34 487.62 T
(le binding \050automatically drops the) 237.8 487.62 T
4 10 Q
(:: <type>) 407.76 487.62 T
8 11 Q
(, as) 461.76 487.62 T
(appropr) 176.41 471.62 T
(iate on substitution\051) 214.48 471.62 T
4 10 Q
(expression) 104.41 448.62 T
8 11 Q
-0.47 (a w) 176.41 448.62 P
-0.47 (ell-f) 192.95 448.62 P
-0.47 (or) 210.34 448.62 P
-0.47 (med Dylan e) 220.39 448.62 P
-0.47 (xpression \320- a constant, such as) 280.87 448.62 P
4 10 Q
-0.92 (37) 438.87 448.62 P
8 11 Q
-0.47 (; a v) 450.87 448.62 P
-0.47 (ar) 470.45 448.62 P
-0.47 (iab) 480.39 448.62 P
-0.47 (le) 494.85 448.62 P
-0.47 (,) 503.24 448.62 P
(such as) 176.41 432.62 T
4 10 Q
(*my-position*) 217.37 432.62 T
8 11 Q
(; a function call, such as) 295.37 432.62 T
4 10 Q
(get-current-) 415.82 432.62 T
-0.48 (time\050\051) 176.41 416.62 P
8 11 Q
-0.24 (; a statement, such as) 212.41 416.62 P
4 10 Q
-0.48 (if \050test\051 12 else try\050\051 end) 321.87 416.62 P
8 11 Q
-0.24 (; or a) 481.49 416.62 P
(binar) 176.41 400.62 T
(y oper) 201.19 400.62 T
(and ser) 231.65 400.62 T
(ies) 268.5 400.62 T
(, such as) 282.39 400.62 T
4 10 Q
(x + y * z) 329.47 400.62 T
(body) 104.41 377.62 T
8 11 Q
(a w) 176.41 377.62 T
(ell-f) 193.41 377.62 T
(or) 210.8 377.62 T
(med Dylan body \321 a sequence of semicolon-separ) 220.86 377.62 T
(ated) 470.18 377.62 T
-0.06 (constituents) 176.41 361.62 P
-0.06 (, each constituent being either a de\336nition, local declar) 234.94 361.62 P
-0.06 (a-) 499.11 361.62 P
(tion, or e) 176.41 345.62 T
(xpression) 218.88 345.62 T
4 10 Q
(case-body) 104.41 322.62 T
8 11 Q
(a Dylan) 176.41 322.62 T
4 10 Q
(case) 216.76 322.62 T
8 11 Q
( statement body) 240.76 322.62 T
4 10 Q
(*) 104.41 299.62 T
8 11 Q
(an) 176.41 299.62 T
(y sequence of Dylan tok) 188.47 299.62 T
(ens and parsed f) 305.65 299.62 T
(or) 387.26 299.62 T
(ms) 397.31 299.62 T
98.41 261.96 514.89 269.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
27.65 96.95 567.65 744.95 C
7 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 228.26 273.29 T
(ab) 233.57 273.29 T
(le 21.1) 245.14 273.29 T
8 F
(P) 281.28 273.29 T
(atter) 287.55 273.29 T
(n constr) 307.81 273.29 T
(aints) 343.28 273.29 T
(.) 364.25 273.29 T
98.41 621.83 98.41 290.08 2 L
V
0.25 H
0 Z
N
514.89 621.83 514.89 290.08 2 L
V
N
98.28 621.95 515.01 621.95 2 L
V
N
98.28 594.95 515.01 594.95 2 L
V
N
98.28 289.95 515.01 289.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "373" 387
%%Page: "374" 388
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "374" 388
%%Page: "375" 389
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(375) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix A) 99.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(A) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Resour) 101.2 591.4 T
(ces on Dylan) 194.11 591.4 T
99.65 150.95 513.65 456.95 R
7 X
V
3 15 Q
0 X
(A.1  W) 99.65 446.95 T
(orld Wide Web pa) 136.52 446.95 T
(g) 239.61 446.95 T
(es f) 247.25 446.95 T
(or this book and its e) 268.22 446.95 T
(xamples) 391.77 446.95 T
1 11 Q
(Both Addison-W) 99.65 427.62 T
(esley and Harlequin maintain W) 181.04 427.62 T
(eb pages about this book,) 338.54 427.62 T
(including the sour) 99.65 413.62 T
(ce code of the pr) 188.62 413.62 T
(ogram examples, and excerpts fr) 268.33 413.62 T
(om the book.) 426.4 413.62 T
-0.07 (The addr) 99.65 399.62 P
-0.07 (ess of the Addison-W) 143.83 399.62 P
-0.07 (esley W) 247.33 399.62 P
-0.07 (eb page for computer science and engineer-) 284.52 399.62 P
(ing is) 99.65 385.62 T
4 9 Q
(http://www.aw.com/cseng/) 126.65 367.95 T
1 11 Q
(The addr) 99.65 348.62 T
(ess of Harlequin\325s Dylan W) 143.9 348.62 T
(eb page is) 276.47 348.62 T
4 9 Q
(http://www.harlequin.com/full/dylan.html) 126.65 330.95 T
3 15 Q
(A.2  Ne) 99.65 293.95 T
(wsgroup) 141.18 293.95 T
1 11 Q
(The name of the newsgr) 99.65 274.62 T
(oup about Dylan is) 216.64 274.62 T
4 9 Q
(comp.lang.dylan) 126.65 256.95 T
1 11 Q
(The newsgr) 99.65 237.62 T
(oup is also available as an Internet mailing list) 156.58 237.62 T
4 9 Q
(info-dylan@cambridge.apple.com) 126.65 219.95 T
1 11 Q
(T) 99.65 200.62 T
(o subscribe to) 105.38 200.62 T
4 10 Q
(info-dylan) 175.05 200.62 T
1 11 Q
(, send a message to) 235.05 200.62 T
4 9 Q
(info-dylan-request@cambridge.apple.com) 126.65 182.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "375" 389
%%Page: "376" 390
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(376) 63.65 702.62 T
0 F
(Appendix A) 87.4 702.62 T
(Resources on Dylan) 143.61 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(A.3  Harlequin) 99.65 662.95 T
1 11 Q
-0.18 (Harlequin\325s initial Dylan pr) 99.65 643.62 P
-0.18 (oduct is a Dylan implementation for W) 233.73 643.62 P
-0.18 (indows 95 and) 422.15 643.62 P
(W) 99.65 629.62 T
(indows/NT) 110.04 629.62 T
(. Harlequin will of) 167.95 629.62 T
(fer Dylan implementations on the thr) 257.06 629.62 T
(ee major) 437.94 629.62 T
(platforms: W) 99.65 615.62 T
(indows, UNIX, and the Macintosh. Harlequin will pr) 162.83 615.62 T
(ovide a native) 419.57 615.62 T
(Dylan development envir) 99.65 601.62 T
(onment and technical support.) 224.38 601.62 T
(Harlequin\325s Dylan W) 126.65 587.62 T
(eb site contains a gr) 229.45 587.62 T
(eat deal of useful information) 324.93 587.62 T
(about Dylan, including the F) 99.65 573.62 T
(AQ,) 238.26 573.62 T
0 F
(The Dylan Refer) 260.96 573.62 T
(ence Manual) 334.11 573.62 T
1 F
(, and pointers to) 391.46 573.62 T
(public-domain implementations of Dylan and to the) 99.65 559.62 T
4 10 Q
(comp.lang.dylan) 355.92 559.62 T
1 11 Q
( news-) 445.92 559.62 T
(gr) 99.65 545.62 T
(oup. The addr) 109.91 545.62 T
(ess of Harlequin\325s Dylan W) 178.91 545.62 T
(eb page is) 311.49 545.62 T
4 9 Q
(http://www.harlequin.com/full/dylan.html) 126.65 527.95 T
1 11 Q
(Harlequin\325s main W) 99.65 508.62 T
(eb site is located at) 197.54 508.62 T
4 9 Q
(http://www.harlequin.com/) 126.65 490.95 T
1 11 Q
(Harlequin\325s main telephone numbers ar) 99.65 471.62 T
(e) 293.82 471.62 T
(United States.: 617-374-2400) 126.65 457.62 T
(United Kingdom: 44 \0500\051 1223 873800) 126.65 443.62 T
(Harlequin\325s main addr) 99.65 423.62 T
(esses ar) 210.64 423.62 T
(e:) 247.57 423.62 T
(Harlequin Incorporated) 126.65 409.62 T
(One Cambridge Center) 126.65 395.62 T
(Cambridge, MA 02142) 126.65 381.62 T
(USA) 241.61 381.62 T
(Harlequin Limited) 126.65 361.62 T
(Barrington Hall) 126.65 347.62 T
(Barrington) 126.65 333.62 T
(Cambridge) 126.65 319.62 T
(United Kingdom) 126.65 305.62 T
(CB2 5RG) 126.65 291.62 T
3 15 Q
(A.4  Carnegie Mellon Univer) 99.65 252.95 T
(sity) 262.17 252.95 T
1 11 Q
(Carnegie Mellon pr) 99.65 233.62 T
(ovides a public-domain implementation called) 194.29 233.62 T
2 F
(Mindy) 423.87 233.62 T
1 F
(, which) 456.87 233.62 T
(stands for \322Mindy Is Not Dylan Y) 99.65 219.62 T
(et.\323 Mindy is an experimental byte-compiler) 263.21 219.62 T
(and interpr) 99.65 205.62 T
(eter written in C. Mindy implementations ar) 154.58 205.62 T
(e available for UNIX,) 370.08 205.62 T
(W) 99.65 191.62 T
(indowsNT) 110.04 191.62 T
(, OS/2, and the Macintosh \050both 68000 and PowerPC\051.) 161.28 191.62 T
(Carnegie Mellon\325s Gwydion and Dylan W) 126.65 177.62 T
(eb site contains a gr) 330.86 177.62 T
(eat deal of) 426.34 177.62 T
(useful information about Dylan, including the F) 99.65 163.62 T
(AQ,) 331.85 163.62 T
0 F
(The Dylan Refer) 354.55 163.62 T
(ence Manual) 427.7 163.62 T
1 F
(,) 485.04 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "376" 390
%%Page: "377" 391
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(A.5 Apple Computer, Inc.) 408.5 702.62 T
2 F
(377) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.26 (the) 99.65 665.62 P
4 10 Q
-0.57 (comp.lang.dylan) 117.39 665.62 P
1 11 Q
-0.26 ( newsgr) 207.39 665.62 P
-0.26 (oup, and r) 245.65 665.62 P
-0.26 (eleases of Mindy) 295.4 665.62 P
-0.26 (. Carnegie Mellon\325s W) 375.5 665.62 P
-0.26 (eb) 481.81 665.62 P
(site about Gwydion and Dylan is located at) 99.65 651.62 T
4 9 Q
(http://www.cmu.edu/gwydion/gwydion/) 126.65 633.95 T
1 11 Q
(The addr) 99.65 614.62 T
(ess of Carnegie Mellon\325s Gwydion and Dylan ftp site is) 143.9 614.62 T
4 9 Q
(ftp://legend.gwydion.cs.cmu.edu/usr/gwydion/ftp/) 126.65 596.95 T
1 11 Q
(Carnegie Mellon\325s main W) 99.65 577.62 T
(eb site is located at) 228.81 577.62 T
4 9 Q
(http://www.cmu.edu/) 126.65 559.95 T
1 11 Q
(Carnegie Mellon\325s electr) 99.65 540.62 T
(onic mail addr) 217.61 540.62 T
(ess for Gwydion is:) 288.31 540.62 T
4 9 Q
(gwydion-group@cs.cmu.edu) 126.65 522.95 T
3 15 Q
(A.5  Apple Computer) 99.65 485.95 T
(, Inc.) 220.58 485.95 T
1 11 Q
(Apple Computer sells the Apple Dylan T) 99.65 466.62 T
(echnology Release. That r) 298.33 466.62 T
(elease is a low-) 422.63 466.62 T
(cost pr) 99.65 452.62 T
(oduct, which pr) 132.3 452.62 T
(ovides the opportunity for pr) 209.2 452.62 T
(ogrammers to become famil-) 351.4 452.62 T
-0.34 (iar with the Dylan language and the Apple Dylan development envir) 99.65 438.62 P
-0.34 (onment. The) 432.28 438.62 P
(softwar) 99.65 424.62 T
(e is un\336nished, and will not be supported or updated by Apple.) 136.39 424.62 T
(Apple\325s Dylan W) 126.65 410.62 T
(eb page contains much useful information about Dylan,) 209.84 410.62 T
(including the F) 99.65 396.62 T
(AQ,) 172.47 396.62 T
0 F
(The Dylan Refer) 195.17 396.62 T
(ence Manual) 268.32 396.62 T
1 F
(, mail ar) 325.67 396.62 T
(chives, newsgr) 365.18 396.62 T
(oup) 437.08 396.62 T
-0.16 (ar) 99.65 382.62 P
-0.16 (chives, articles about Dylan, and pointers to public-domain implementations of) 109.29 382.62 P
(Dylan:) 99.65 368.62 T
4 9 Q
(http://www.cambridge.apple.com/) 126.65 350.95 T
1 11 Q
(Apple\325s Dylan ftp site is located at) 99.65 331.62 T
4 9 Q
(ftp://ftp.cambridge.apple.com/pub/dylan/) 126.65 313.95 T
1 11 Q
(Y) 99.65 294.62 T
(ou can or) 105.97 294.62 T
(der the Apple Dylan T) 151.05 294.62 T
(echnology Release fr) 259.36 294.62 T
(om the Apple Developer) 359.59 294.62 T
(Catalog Online, located at) 99.65 280.62 T
4 9 Q
(http://www.devcatalog.apple.com/) 126.65 262.95 T
1 11 Q
(The telephone numbers for the Apple Developer Catalog Online ar) 99.65 243.62 T
(e:) 424.63 243.62 T
(U.S.: 1-800-282-2732) 126.65 229.62 T
(Canada: 1-800-637-0029) 126.65 215.62 T
(International: 1-716-871-6555) 126.65 201.62 T
(Apple\325s main W) 99.65 181.62 T
(eb site is located at) 177.92 181.62 T
4 9 Q
(http://www.apple.com/) 126.65 163.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "377" 391
%%Page: "378" 392
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(378) 63.65 702.62 T
0 F
(Appendix A) 87.4 702.62 T
(Resources on Dylan) 143.61 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(Apple\325s main addr) 99.65 665.62 T
(ess is:) 191.02 665.62 T
(Apple Computer) 126.65 651.62 T
(, Inc.) 208.8 651.62 T
(1 In\336nite Loop) 126.65 637.62 T
(Cupertino, CA) 126.65 623.62 T
(95014) 203.86 623.62 T
3 15 Q
(A.6  Digitool, Inc.) 99.65 584.95 T
1 11 Q
-0.42 (Digitool ported the Apple Dylan T) 99.65 565.62 P
-0.42 (echnology Release to r) 264.63 565.62 P
-0.42 (un natively on the Power) 372.38 565.62 P
(Macintosh. Y) 99.65 551.62 T
(ou can obtain this version fr) 162.52 551.62 T
(om Apple Computer dir) 298.24 551.62 T
(ectly) 416.49 551.62 T
(.) 438.33 551.62 T
(Digitool\325s main W) 99.65 531.62 T
(eb site is located at) 187.51 531.62 T
4 9 Q
(http://www.digitool.com/) 126.65 513.95 T
1 11 Q
(Digitool\325s telephone number is) 99.65 494.62 T
(617-441-5000) 126.65 480.62 T
(Digitool\325s addr) 99.65 460.62 T
(ess is) 173.04 460.62 T
(Digitool, Inc.) 126.65 446.62 T
(One Main Str) 126.65 432.62 T
(eet \321 7th Floor) 191.48 432.62 T
(Cambridge, MA) 126.65 418.62 T
(02142) 211.36 418.62 T
3 15 Q
(A.7  Marlais) 99.65 379.95 T
1 11 Q
-0.41 (Marlais is an experimental Dylan interpr) 99.65 360.62 P
-0.41 (eter in the public domain as \322copylefted\323) 295.28 360.62 P
-0.08 (softwar) 99.65 346.62 P
-0.08 (e. Marlais is available on UNIX, the Macintosh, and W) 136.39 346.62 P
-0.08 (indows. It was orig-) 398.76 346.62 P
-0.28 (inally developed by Br) 99.65 332.62 P
-0.28 (ent Benson of Harris Computer Systems, and new versions) 209.04 332.62 P
(wer) 99.65 318.62 T
(e developed by Joseph N. W) 118.24 318.62 T
(ilson, at the University of Florida. Patrick Bear) 255.64 318.62 T
(d) 480.43 318.62 T
(developed the Macintosh implementation of Marlais.) 99.65 304.62 T
(The addr) 99.65 284.62 T
(ess of the W) 143.9 284.62 T
(eb site for Marlais is) 201.66 284.62 T
4 9 Q
(http://www.cise.ufl.edu:/~jnw/Marlais/) 126.65 266.95 T
1 11 Q
(The W) 99.65 247.62 T
(eb site for the Computer and Information Science and Engineering Depart-) 130.8 247.62 T
(ment of the University of Florida is located at) 99.65 233.62 T
4 9 Q
(http://www.cise.ufl.edu/) 126.65 215.95 T
1 11 Q
(The telephone number of the department wher) 99.65 196.62 T
(e Marlais is being developed is) 327.94 196.62 T
(904-392-1200) 126.65 182.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "378" 392
%%Page: "379" 393
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(A.7 Marlais) 461.46 702.62 T
2 F
(379) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The addr) 99.65 665.62 T
(ess of the department wher) 143.9 665.62 T
(e Marlais is being developed is) 276.42 665.62 T
(Computer & Information Science & Engineering) 126.65 651.62 T
(Room E301 CSE Building) 126.65 637.62 T
(PO Box 1) 126.65 623.62 T
(16120) 170.74 623.62 T
(University of Florida) 126.65 609.62 T
(Gainesville, FLA) 126.65 595.62 T
(3261) 213.56 595.62 T
(1-6120) 234.95 595.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "379" 393
%%Page: "380" 394
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "380" 394
%%Page: "381" 395
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(381) 290.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 543.79 477.65 672.95 R
7 X
V
99.65 615.4 477.65 642.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 615.4 477.65 642.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 636.1 261.65 636.1 2 L
3 H
2 Z
0 X
N
99.65 627.1 261.65 627.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix B) 99.65 652.95 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(B) 99.65 591.4 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Dylan Object Model for C) 100.87 591.4 T
(and C++ Pr) 99.65 561.4 T
(ogrammers) 252.5 561.4 T
99.65 150.95 513.65 456.95 R
7 X
V
1 11 Q
0 X
(In this appendix, we discuss certain ar) 99.65 449.62 T
(eas wher) 285.56 449.62 T
(e Dylan\325s object model dif) 328.73 449.62 T
(fers sig-) 455.16 449.62 T
(ni\336cantly fr) 99.65 435.62 T
(om the object model of C and C++.) 156.15 435.62 T
3 15 Q
(B.1  The concept of pointer) 99.65 396.95 T
(s) 258.05 396.95 T
1 11 Q
(If you ar) 99.65 377.62 T
(e familiar with a language with explicit pointers, such as C, you may be) 140.92 377.62 T
(confused initially by Dylan\325s object model. Although ther) 99.65 363.62 T
(e is no \322pointer) 378.77 363.62 T
(-to\323) 453.29 363.62 T
(operation in Dylan, ther) 99.65 349.62 T
(e ar) 216.31 349.62 T
(e pointers in the implementation. If you ar) 233.98 349.62 T
(e trying to) 439.62 349.62 T
(imagine how Dylan objects ar) 99.65 335.62 T
(e implemented, it is better to think in terms of) 244.08 335.62 T
(always manipulating a pointer to the object: A Dylan variable \050or slot\051 stor) 99.65 321.62 T
(es a) 460.93 321.62 T
-0.07 (pointer to an object, rather than a copy of the object\325s slots. Similarly) 99.65 307.62 P
-0.07 (, assignment,) 429.27 307.62 P
(ar) 99.65 293.62 T
(gument passing, and identity comparison ar) 109.29 293.62 T
(e in terms of pointers to objects.) 324.36 293.62 T
-0.13 (Even characters and numbers can be) 126.65 279.62 P
0 F
-0.13 (consider) 306.23 279.62 P
-0.13 (ed) 342.91 279.62 P
1 F
-0.13 ( as objects that ar) 352.69 279.62 P
-0.13 (e pointed to) 435.12 279.62 P
(\050objects with an unmodi\336able value slot\051, making the object model uniform. But) 99.65 265.62 T
(compilers optimize away the indir) 99.65 251.62 T
(ection for these built-in classes.) 266.85 251.62 T
(Note that) 126.65 237.62 T
4 10 Q
(=) 175.22 237.62 T
1 11 Q
( comparison defaults to pointer comparison, but can be custom-) 181.22 237.62 T
(ized by class. Ther) 99.65 223.62 T
(e ar) 189.01 223.62 T
(e sensible customizations built-in for characters, numbers,) 206.68 223.62 T
-0.29 (collections, sequences, and lists. Y) 99.65 209.62 P
-0.29 (ou can add your own customizations for classes) 262.52 209.62 P
(that you cr) 99.65 195.62 T
(eate.) 152.01 195.62 T
(Consider this Dylan code:) 126.65 181.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "381" 395
%%Page: "382" 396
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(382) 63.65 702.62 T
0 F
(Appendix B) 87.4 702.62 T
(Dylan Object Model for C and C++ Programmers) 142.55 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The equivalent C code is as follows:) 99.65 410.62 T
8 10 Q
(Dylan object e) 250.69 646.29 T
(xample) 313.75 646.29 T
(.) 345.83 646.29 T
4 9 Q
(define class <color> \050<object>\051) 105.65 626.95 T
(slot red :: <integer> = 0, init-keyword: red:;) 116.45 615.95 T
(slot green :: <integer> = 0, init-keyword: green:;) 116.45 604.95 T
(slot blue :: <integer> = 0, init-keyword: blue:;) 116.45 593.95 T
(end class <color>;) 105.65 582.95 T
(define constant black = make\050<color>\051;) 105.65 563.95 T
(define constant white) 105.65 544.95 T
(= make\050<color>, red: 2 ^ 24 - 1, green: 2 ^ 24 - 1, blue: 2 ^ 24 - 1\051;) 116.45 533.95 T
(define method whiteness-test\050color :: <color>\051) 105.65 514.95 T
(if \050color = white\051 format-out\050"It\325s white!\134n"\051 end;) 116.45 503.95 T
(end method whiteness-test;) 105.65 492.95 T
(define variable color = black;) 105.65 473.95 T
(color := white;) 105.65 454.95 T
(whiteness-test\050color\051;) 105.65 443.95 T
8 10 Q
(C equiv) 216.07 377.29 T
(alent of Dylan object e) 249.72 377.29 T
(xample) 348.36 377.29 T
(.) 380.44 377.29 T
4 9 Q
(typedef struct _color) 105.65 357.95 T
({ int red, green, blue; }) 116.45 346.95 T
(Color;) 105.65 335.95 T
(static Color _black = {0, 0, 0};) 105.65 316.95 T
(Color* const black = &_black;) 105.65 305.95 T
(static Color _white = {16777215, 16777215, 16777215};) 105.65 286.95 T
(Color* const white = &_white;) 105.65 275.95 T
(void whitenessTest\050Color* const color\051 {) 105.65 256.95 T
(if \050color == white\051 { printf\050"It\325s white!\134n"\051; }) 116.45 245.95 T
(}) 105.65 234.95 T
(void main \050\051 {) 105.65 215.95 T
(Color* color = black;) 116.45 204.95 T
(color = white;) 116.45 182.95 T
(whitenessTest\050color\051;) 116.45 171.95 T
(}) 105.65 160.95 T
99.65 658.83 99.65 437.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 437.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 436.95 513.77 436.95 2 L
V
N
99.65 389.83 99.65 154.08 2 L
V
N
513.65 389.83 513.65 154.08 2 L
V
N
99.52 389.95 513.77 389.95 2 L
V
N
99.52 369.95 513.77 369.95 2 L
V
N
99.52 153.95 513.77 153.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "382" 396
%%Page: "383" 397
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.1 The concept of pointers) 404.38 702.62 T
2 F
(383) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.31 (The bene\336t of the Dylan model is that the \336nal two statements ar) 99.65 659.62 P
-0.31 (e a single pointer) 410.83 659.62 P
(assignment and a passing of a single pointer as a parameter) 99.65 645.62 T
(. The comparison in) 388.38 645.62 T
4 9 Q
-1.01 (whitenessTest) 99.65 631.62 P
1 11 Q
-0.51 ( is a single pointer comparison. Another possible C implementation) 169.85 631.62 P
-0.06 (\321 one mor) 99.65 617.62 P
-0.06 (e typical of C style, but) 153.58 617.62 P
0 F
-0.06 (not) 267.46 617.62 P
1 F
-0.06 ( equivalent to the Dylan implementation \321) 282.12 617.62 P
(is as follows:) 99.65 603.62 T
-0.05 (In the C-style example, without pointers, the \336nal two statements consist of thr) 99.65 326.62 P
-0.05 (ee) 482.4 326.62 P
(integer assignments \050as the) 99.65 312.62 T
4 10 Q
(Color) 234.1 312.62 T
1 11 Q
( str) 264.1 312.62 T
(uctur) 279.36 312.62 T
(e is copied\051, and a passing of a thr) 305.24 312.62 T
(ee-) 470.07 312.62 T
(slot str) 99.65 298.62 T
(uctur) 132.36 298.62 T
(e \050the equivalent of thr) 158.24 298.62 T
(ee ar) 268.67 298.62 T
(guments\051 as an ar) 291.61 298.62 T
(gument. The compari-) 377.62 298.62 T
(son in) 99.65 284.62 T
4 9 Q
(whitenessTest) 131.82 284.62 T
1 11 Q
( is thr) 202.02 284.62 T
(ee integer comparisons \050as the two) 229.52 284.62 T
4 10 Q
(Color) 400.6 284.62 T
1 11 Q
( str) 430.6 284.62 T
(uctur) 445.85 284.62 T
(es) 471.73 284.62 T
(ar) 99.65 270.62 T
(e compar) 109.29 270.62 T
(ed, slot by slot\051.) 154.18 270.62 T
(The drawback of the Dylan object example is shown her) 126.65 256.62 T
(e:) 398.77 256.62 T
4 9 Q
(color.blue := 0;) 99.65 235.95 T
1 11 Q
-0.26 (The pr) 99.65 215.62 P
-0.26 (eceding call makes) 131.3 215.62 P
4 10 Q
-0.58 (white) 224.67 215.62 P
1 11 Q
-0.26 ( yellow! In the C-style example, without pointers,) 254.67 215.62 P
(you would make only) 99.65 201.62 T
4 10 Q
(color) 209.46 201.62 T
1 11 Q
( yellow) 239.46 201.62 T
(. Y) 274.17 201.62 T
(ou can pr) 285.99 201.62 T
(event people fr) 331.67 201.62 T
(om changing) 404.69 201.62 T
(de\336ned colors to other colors in Dylan by not allowing the slots of) 99.65 187.62 T
4 10 Q
(<color>) 423.22 187.62 T
1 11 Q
(objects to be modi\336ed once they ar) 99.65 173.62 T
(e initialized \321 in other wor) 268.02 173.62 T
(ds, by making) 401.57 173.62 T
4 10 Q
(<color>) 99.65 159.62 T
1 11 Q
( objects) 141.65 159.62 T
0 F
(immutable) 180.21 159.62 T
1 F
(:) 227.48 159.62 T
8 10 Q
(C-style e) 224.92 575.29 T
(xample) 264.07 575.29 T
(, without pointers) 296.15 575.29 T
(.) 371.59 575.29 T
4 9 Q
(typedef struct _color) 105.65 555.95 T
({ int red, green, blue; }) 116.45 544.95 T
(Color;) 105.65 533.95 T
(Color const black = {0, 0, 0};) 105.65 514.95 T
(Color const white = {16777215, 16777215, 16777215};) 105.65 503.95 T
(void whitenessTest\050Color const color\051 {) 105.65 484.95 T
(if \050color.red == white.red &&) 116.45 473.95 T
(color.green == white.green &&) 138.05 462.95 T
(color.blue == white.blue\051) 138.05 451.95 T
({ printf\050"It\325s white!\134n"\051; }) 116.45 440.95 T
(}) 105.65 429.95 T
(void main \050\051 {) 105.65 410.95 T
(Color color = black;) 116.45 399.95 T
(color = white;) 116.45 377.95 T
(whitenessTest\050color\051;) 116.45 366.95 T
(}) 105.65 355.95 T
99.65 587.83 99.65 349.08 2 L
V
0.25 H
0 Z
N
513.65 587.83 513.65 349.08 2 L
V
N
99.52 587.95 513.77 587.95 2 L
V
N
99.52 567.95 513.77 567.95 2 L
V
N
99.52 348.95 513.77 348.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "383" 397
%%Page: "384" 398
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(384) 63.65 702.62 T
0 F
(Appendix B) 87.4 702.62 T
(Dylan Object Model for C and C++ Programmers) 142.55 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.08 (Y) 99.65 410.62 P
-0.08 (ou can consider Dylan as always using pointers, even to objects such as integers) 105.97 410.62 P
(and characters. Integers and characters ar) 99.65 396.62 T
(e, by de\336nition, immutable objects:) 301.16 396.62 T
(Ther) 99.65 382.62 T
(e ar) 122.21 382.62 T
(e no slots that you can change in an integer or character object. Thus,) 139.88 382.62 T
(ther) 99.65 368.62 T
(e is no danger of setting 6 to 9. Built-in immutable objects can have their) 119.05 368.62 T
(pointers optimized away by the compiler: The compiler just has to arrange that) 99.65 354.62 T
(6 = 6 and 9 = 9, whether ther) 99.65 340.62 T
(e is only one 6 object pointed to by all the variables) 238.2 340.62 T
(with the value 6, or copies of 6 ar) 99.65 326.62 T
(e stor) 260.14 326.62 T
(ed in each of those variables \050saving the) 286.56 326.62 T
(need for a pointer\051.) 99.65 312.62 T
(Another dif) 126.65 298.62 T
(\336culty in the Dylan model is this potentially embarrassing) 183.35 298.62 T
(situation:) 99.65 284.62 T
4 9 Q
(color := make\050<color>, red: 2 ^ 24 - 1, green: 2 ^ 24 - 1, blue: 2 ^ 24 - 1\051;) 99.65 263.95 T
(if \050color = white\051 format-out\050"It\325s white!\134n"\051 end;) 99.65 252.95 T
1 11 Q
(The pr) 99.65 232.62 T
(eceding expr) 131.57 232.62 T
(ession might not say \322It\325s white!\323, because) 193.88 232.62 T
4 10 Q
(make) 402.39 232.62 T
1 11 Q
( might r) 426.39 232.62 T
(eturn) 465.05 232.62 T
(a new object with white RGB values, and that object would not be) 99.65 218.62 T
4 10 Q
(=) 422.01 218.62 T
1 11 Q
( to the object) 428.01 218.62 T
(named) 99.65 204.62 T
4 10 Q
(white) 136 204.62 T
1 11 Q
(. The equivalent C code would be:) 166 204.62 T
4 9 Q
(Color* make_color\050int r, int g, int b\051 {) 99.65 183.95 T
(Color* c = \050Color*\051malloc\050sizeof\050Color\051\051;) 110.45 172.95 T
(c->red = r; c->green = g; c->blue = b;) 110.45 161.95 T
8 10 Q
(Dylan object e) 197.56 646.29 T
(xample) 260.62 646.29 T
(, with imm) 292.7 646.29 T
(utab) 337.6 646.29 T
(le objects) 356.86 646.29 T
(.) 398.95 646.29 T
4 9 Q
(define class <color> \050<object>\051) 105.65 626.95 T
(constant slot red :: <integer> = 0, init-keyword: red:;) 116.45 615.95 T
(constant slot green :: <integer> = 0, init-keyword: green:;) 116.45 604.95 T
(constant slot blue :: <integer> = 0, init-keyword: blue:;) 116.45 593.95 T
(end class <color>;) 105.65 582.95 T
(define constant black = make\050<color>\051;) 105.65 563.95 T
(define constant white) 105.65 544.95 T
(= make\050<color>, red: 2 ^ 24 - 1, green: 2 ^ 24 - 1, blue: 2 ^ 24 - 1\051;) 116.45 533.95 T
(define variable color = black;) 105.65 514.95 T
(define method whiteness-test\050color :: <color>\051) 105.65 495.95 T
(if \050color = white\051 format-out\050"It\325s white!\134n"\051 end;) 116.45 484.95 T
(end method whiteness-test;) 105.65 473.95 T
(color := white;) 105.65 454.95 T
(whiteness-test\050color\051;) 105.65 443.95 T
99.65 658.83 99.65 437.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 437.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 436.95 513.77 436.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "384" 398
%%Page: "385" 399
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.1 The concept of pointers) 404.38 702.62 T
2 F
(385) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
4 9 Q
0 X
(return c;) 110.45 666.95 T
(}) 99.65 655.95 T
(static Color _white = {16777215, 16777215, 16777215};) 99.65 636.95 T
(Color* const white = &_white;) 99.65 625.95 T
(Color* color = make_color\05016777215, 16777215, 16777215\051;) 99.65 606.95 T
(if \050color == white\051 { printf\050"It\325s white!\134n"\051; };) 99.65 595.95 T
1 11 Q
(Because the pr) 99.65 575.62 T
(eceding code is comparing the pointer stor) 170.1 575.62 T
(ed in) 377.07 575.62 T
4 10 Q
(white) 404.16 575.62 T
1 11 Q
( to the) 434.16 575.62 T
-0.23 (pointer stor) 99.65 561.62 P
-0.23 (ed in) 155.99 561.62 P
4 10 Q
-0.49 (color) 182.63 561.62 P
1 11 Q
-0.23 (, it will clearly not say \322It\325s white!\323. The default implemen-) 211.82 561.62 P
(tation of) 99.65 547.62 T
4 10 Q
(=) 143.1 547.62 T
1 11 Q
( in Dylan is to compar) 149.1 547.62 T
(e pointers.) 256.5 547.62 T
(Ther) 126.65 533.62 T
(e ar) 149.21 533.62 T
(e several solutions to this dif) 166.88 533.62 T
(\336culty in Dylan. One is to customize) 305.55 533.62 T
(the) 99.65 519.62 T
4 10 Q
(=) 117.65 519.62 T
1 11 Q
( comparison operator for our class to do a comparison mor) 123.65 519.62 T
(e thor) 409.08 519.62 T
(ough than) 437.24 519.62 T
(the default comparison:) 99.65 505.62 T
4 9 Q
(define met) 99.65 484.95 T
4 10 Q
(h) 153.65 484.95 T
4 9 Q
(od \134= \050o1 :: <color>, o2 :: <color>\051) 159.65 484.95 T
(o1.red = o2.red & o1.green = o2.green & o1.blue = o2.blue;) 110.45 473.95 T
(end met) 99.65 462.95 T
4 10 Q
(h) 137.45 462.95 T
4 9 Q
(od \134=;) 143.45 462.95 T
1 11 Q
-0.01 (Now) 99.65 442.62 P
-0.01 (, using) 122.96 442.62 P
4 10 Q
-0.02 (=) 158.2 442.62 P
1 11 Q
-0.01 ( will compar) 164.2 442.62 P
-0.01 (e colors by checking their individual RGB components,) 225.32 442.62 P
(and our whiteness test will work.) 99.65 428.62 T
(Note that Dylan also pr) 126.65 414.62 T
(ovides the) 240.59 414.62 T
4 10 Q
(==) 293.42 414.62 T
1 11 Q
( comparison operator) 305.42 414.62 T
(, which always) 409.11 414.62 T
(compar) 99.65 400.62 T
(es pointers. This comparison is useful when you want to check object) 136.51 400.62 T
-0.06 (identity) 99.65 386.62 P
-0.06 (. But, as we have seen, it is not always the appr) 136.51 386.62 P
-0.06 (opriate default for compar-) 363.76 386.62 P
(ison of equality of objects. The compiler can avoid calling our) 99.65 372.62 T
4 10 Q
(\134=) 400.55 372.62 T
1 11 Q
( method alto-) 412.55 372.62 T
(gether if the same object is compar) 99.65 358.62 T
(ed to itself. It can do so because, with the) 267.53 358.62 T
(exception of IEEE NaNs \050nonnumbers\051, values that ar) 99.65 344.62 T
(e) 359.98 344.62 T
4 10 Q
(==) 368 344.62 T
1 11 Q
( must also be) 380 344.62 T
4 10 Q
(=) 446.32 344.62 T
1 11 Q
(.) 452.32 344.62 T
-0.13 (Another appr) 126.65 330.62 P
-0.13 (oach that you can use if your objects ar) 192.71 330.62 P
-0.13 (e immutable is to make) 380.32 330.62 P
-0.28 (sur) 99.65 316.62 P
-0.28 (e that they ar) 115.09 316.62 P
-0.28 (e unique. The) 177.87 316.62 P
4 10 Q
-0.61 (make) 246.02 316.62 P
1 11 Q
-0.28 ( function is not r) 270.02 316.62 P
-0.28 (equir) 348.69 316.62 P
-0.28 (ed to r) 374.1 316.62 P
-0.28 (eturn a new object) 404.78 316.62 P
-0.12 (each time, as shown in the Dylan object example, with unique, immutable objects.) 99.65 302.62 P
(This advanced use of) 126.65 288.62 T
4 10 Q
(make) 232.1 288.62 T
1 11 Q
( and tables ensur) 256.11 288.62 T
(es that ther) 338.4 288.62 T
(e is always only one) 392.31 288.62 T
(instance of each color) 99.65 274.62 T
(. Thus, when we make another white, it will always be) 203.16 274.62 T
0 F
(the) 470.6 274.62 T
1 F
-0.43 (white, and our whiteness test will work with the default) 99.65 260.62 P
4 10 Q
-0.93 (=) 371.21 260.62 P
1 11 Q
-0.43 ( comparison. The choice) 377.21 260.62 P
(of solution depends on whether you will be doing mor) 99.65 246.62 T
(e making or comparing.) 365.47 246.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "385" 399
%%Page: "386" 400
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(386) 63.65 702.62 T
0 F
(Appendix B) 87.4 702.62 T
(Dylan Object Model for C and C++ Programmers) 142.55 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
3 15 Q
0 X
(B.2  The concept of c) 99.65 309.95 T
(lasses) 223.14 309.95 T
1 11 Q
(If you ar) 99.65 290.62 T
(e familiar with the class concepts of C++, you may be confused by) 140.92 290.62 T
(Dylan\325s class model. In Dylan, all base classes ar) 99.65 276.62 T
(e ef) 334.18 276.62 T
(fectively virtual base classes,) 350.93 276.62 T
(with \322virtual\323 data members. When a class inherits another class mor) 99.65 262.62 T
(e than once) 437.15 262.62 T
-0.21 (\050because of multiple inheritance\051, only a single copy of that base class is included.) 99.65 248.62 P
(Each of the multiple-inheritance paths can contribute to the implementation of) 99.65 234.62 T
-0.07 (the derived class. The Dylan class model favors this mix-in style of pr) 99.65 220.62 P
-0.07 (ogramming.) 435.79 220.62 P
(Her) 126.65 206.62 T
(e is an example of such a pr) 145.22 206.62 T
(ogram, followed by the equivalent C++:) 279.25 206.62 T
8 10 Q
(Dylan object e) 179.85 646.29 T
(xample) 242.91 646.29 T
(, with unique) 274.99 646.29 T
(, imm) 330.98 646.29 T
(utab) 355.32 646.29 T
(le objects) 374.58 646.29 T
(.) 416.67 646.29 T
4 9 Q
(define class <color-table> \050<table>\051) 105.65 626.95 T
(end class <color-table>;) 105.65 615.95 T
(define method table-protocol\050<color-table>\051) 105.65 596.95 T
(local method color-hash\050color :: <color>\051) 116.45 585.95 T
(let \050red-id, red-state\051 = object-hash\050color.red\051;) 127.25 574.95 T
(let \050grn-id, grn-state\051 = object-hash\050color.green\051;) 127.25 563.95 T
(let \050blu-id, blu-state\051 = object-hash\050color.blue\051;) 127.25 552.95 T
(let \050merge-id, merge-state\051 =) 127.25 541.95 T
(merge-hash-codes\050red-id, red-state,) 138.05 530.95 T
(grn-id, grn-state, ordered: #t\051;) 229.85 519.95 T
(merge-hash-codes\050merge-id, merge-state,) 127.25 508.95 T
(blu-id, blu-state, ordered: #t\051;) 219.05 497.95 T
(end;) 116.45 486.95 T
(local method color-test\050o1 :: <color>, o2 :: <color>\051) 116.45 475.95 T
(o1.red = o2.red & o1.green = o2.green & o1.blue = o2.blue;) 127.25 464.95 T
(end;) 116.45 453.95 T
(values\050color-test, color-hash\051) 116.45 442.95 T
(end method table-protocol;) 105.65 431.95 T
(define variable color-table = make\050<color-table>\051;) 105.65 412.95 T
(define method make\050class == <color>, #key red, green, blue\051) 105.65 393.95 T
(let prototype = next-method\050\051;) 116.45 382.95 T
(element\050color-table, prototype, default: #f\051 |) 116.45 371.95 T
(\050color-table[prototype] := prototype\051;) 127.25 360.95 T
(end method make;) 105.65 349.95 T
99.65 658.83 99.65 343.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 343.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 342.95 513.77 342.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "386" 400
%%Page: "387" 401
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.2 The concept of classes) 410.01 702.62 T
2 F
(387) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(The example is a gr) 99.65 309.62 T
(eatly simpli\336ed sketch of a computer) 193.93 309.62 T
(-display windowing sys-) 373.53 309.62 T
(tem, wher) 99.65 295.62 T
(e a window may have a bor) 148.71 295.62 T
(der \050outline decoration\051, or a title \050such as) 283.11 295.62 T
(the title bar of a window\051, or both. \050W) 99.65 281.62 T
(e omit any further detail, such as scr) 282.77 281.62 T
(oll) 458.72 281.62 T
(bars.\051 One chor) 99.65 267.62 T
(e in such a system is to compute the available display ar) 173.91 267.62 T
(ea of a) 445.87 267.62 T
(window fr) 99.65 253.62 T
(om that window\325s overall size and fr) 150.89 253.62 T
(om the sizes of the window\325s) 329.38 253.62 T
(components.) 99.65 239.62 T
(Note that calling) 126.65 225.62 T
4 10 Q
(height) 210.48 225.62 T
1 11 Q
( on an instance of) 246.48 225.62 T
4 10 Q
(<border-label-window>) 334.12 225.62 T
1 11 Q
( will) 460.12 225.62 T
(automatically perform the actions appr) 99.65 211.62 T
(opriate for a window with a bor) 289.6 211.62 T
(der and a) 444.9 211.62 T
(label. First, the method for) 99.65 197.62 T
4 10 Q
(<border-window>) 231.03 197.62 T
1 11 Q
( will be called, subtracting out the) 321.03 197.62 T
(bor) 99.65 183.62 T
(der width; when it calls) 115.88 183.62 T
4 10 Q
(next-method) 233.29 183.62 T
1 11 Q
(, to get the underlying window width,) 299.29 183.62 T
(the method for) 99.65 169.62 T
4 10 Q
(<label-window>) 174.87 169.62 T
1 11 Q
( will be called, subtracting out the label height;) 258.87 169.62 T
8 10 Q
(Mix-in e) 245.34 646.29 T
(xample in Dylan.) 280.04 646.29 T
4 9 Q
(define class <window> \050<object>\051) 105.65 626.95 T
(slot width :: <integer>;) 116.45 615.95 T
(slot height :: <integer>;) 116.45 604.95 T
(end class <window>;) 105.65 593.95 T
(define class <border-window> \050<window>\051) 105.65 574.95 T
(slot border-width :: <integer>;) 116.45 563.95 T
(end class <border-window>;) 105.65 552.95 T
(define method width\050window :: <border-window>\051) 105.65 533.95 T
(next-method\050\051 - 2 * window.border-width;) 116.45 522.95 T
(end method width;) 105.65 511.95 T
(define method height\050window :: <border-window>\051) 105.65 492.95 T
(next-method\050\051 - 2 * window.border-width;) 116.45 481.95 T
(end method height;) 105.65 470.95 T
(define class <label-window> \050<window>\051) 105.65 451.95 T
(slot label-height :: <integer>;) 116.45 440.95 T
(slot label-text :: <string>;) 116.45 429.95 T
(end class <label-window>;) 105.65 418.95 T
(define method height\050window :: <label-window>\051) 105.65 399.95 T
(next-method\050\051 - window.label-height;) 116.45 388.95 T
(end method height;) 105.65 377.95 T
(define class <border-label-window>) 105.65 358.95 T
(\050<border-window>, <label-window>, <window>\051) 127.25 347.95 T
(end class <border-label-window>;) 105.65 336.95 T
99.65 658.83 99.65 330.08 2 L
V
0.25 H
0 Z
N
513.65 658.83 513.65 330.08 2 L
V
N
99.52 658.95 513.77 658.95 2 L
V
N
99.52 638.95 513.77 638.95 2 L
V
N
99.52 329.95 513.77 329.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "387" 401
%%Page: "388" 402
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(388) 63.65 702.62 T
0 F
(Appendix B) 87.4 702.62 T
(Dylan Object Model for C and C++ Programmers) 142.55 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
-0.26 (\336nally) 99.65 665.62 P
-0.26 (, when it calls) 129.5 665.62 P
4 10 Q
-0.56 (next-method) 197.71 665.62 P
1 11 Q
-0.26 (, the method for getting the value of the) 263.71 665.62 P
4 10 Q
-0.56 (height) 457.15 665.62 P
1 11 Q
(slot in the underlying window will be called.) 99.65 651.62 T
(This example is a classic one of the mix-in style \321 the full functionality of) 126.65 637.62 T
(the) 99.65 623.62 T
4 10 Q
(<border-label-window>) 117.65 623.62 T
1 11 Q
( class is the r) 243.65 623.62 T
(esult of the combination of the individ-) 304.84 623.62 T
(ual pieces of) 99.65 609.62 T
4 10 Q
(<border-window>) 162.8 609.62 T
1 11 Q
( and) 252.8 609.62 T
4 10 Q
(<label-window>) 276.92 609.62 T
1 11 Q
( functionality) 360.92 609.62 T
(.) 424.83 609.62 T
8 10 Q
(C++ equiv) 216.07 581.29 T
(alent of the mix-in e) 261.4 581.29 T
(xample) 348.36 581.29 T
(.) 380.44 581.29 T
4 9 Q
(class Window {) 105.65 561.95 T
(private:) 105.65 550.95 T
(int _width;) 116.45 539.95 T
(int _height;) 116.45 528.95 T
(public:) 105.65 517.95 T
(virtual int width\050\051 { return _width; }) 116.45 506.95 T
(virtual int height\050\051 { return _height; }) 116.45 495.95 T
(};) 105.65 484.95 T
(class BorderWindow : public virtual Window {) 105.65 465.95 T
(private:) 105.65 454.95 T
(int _border_width;) 116.45 443.95 T
(public:) 105.65 432.95 T
(virtual int border_width\050\051 { return _border_width; }) 116.45 421.95 T
(virtual int width\050\051;) 116.45 410.95 T
(virtual int height\050\051;) 116.45 399.95 T
(};) 105.65 388.95 T
(int BorderWindow::width\050\051 {) 105.65 369.95 T
(return Window::width\050\051 - 2 * border_width\050\051;) 116.45 358.95 T
(}) 105.65 347.95 T
(int BorderWindow::height\050\051 {) 105.65 328.95 T
(return Window::height\050\051 - 2 * border_width\050\051;) 116.45 317.95 T
(}) 105.65 306.95 T
(class LabelWindow : public virtual Window {) 105.65 287.95 T
(private:) 105.65 276.95 T
(int _label_height;) 116.45 265.95 T
(char *_label_text;) 116.45 254.95 T
(public:) 105.65 243.95 T
(virtual int label_height\050\051 { return _label_height; }) 116.45 232.95 T
(virtual char* label_text\050\051 { return _label_text; }) 116.45 221.95 T
(virtual int height\050\051;) 116.45 210.95 T
(};) 105.65 199.95 T
(int LabelWindow::height\050\051 {) 105.65 180.95 T
(return Window::height\050\051 - label_height\050\051;) 116.45 169.95 T
(}) 105.65 158.95 T
99.65 593.83 99.65 152.08 2 L
V
0.25 H
0 Z
N
513.65 593.83 513.65 152.08 2 L
V
N
99.52 593.95 513.77 593.95 2 L
V
N
99.52 573.95 513.77 573.95 2 L
V
N
99.52 151.95 513.77 151.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "388" 402
%%Page: "389" 403
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(B.2 The concept of classes) 410.01 702.62 T
2 F
(389) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(It may be helpful for C++ pr) 99.65 496.62 T
(ogrammers to consider that:) 237.01 496.62 T
(\245) 108.65 476.62 T
(Dylan base classes ar) 126.65 476.62 T
(e always virtual.) 228.64 476.62 T
(\245) 108.65 456.62 T
(In Dylan, data members ar) 126.65 456.62 T
(e accessed thr) 256.25 456.62 T
(ough virtual functions, so it is) 323.01 456.62 T
(always possible to override access to a data member in a derived class, and) 126.65 442.62 T
(to modify the r) 126.65 428.62 T
(eturned value \050or) 199.31 428.62 T
(, by overriding the setter) 283.06 428.62 T
(, to modify the) 401.99 428.62 T
(value to be stor) 126.65 414.62 T
(ed\051.) 201.06 414.62 T
(\245) 108.65 394.62 T
(Dylan\325s) 126.65 394.62 T
4 10 Q
(next-method) 166.85 394.62 T
1 11 Q
( allows you to use automatic method combination) 232.85 394.62 T
(when you ar) 126.65 380.62 T
(e pr) 187.8 380.62 T
(ogramming in a mix-in style.) 206.57 380.62 T
(Note that the C++ equivalent of the mix-in example is incomplete. It is intended) 99.65 360.62 T
(only as a guide to how you can think of Dylan classes. In particular) 99.65 346.62 T
(, we have not) 425.25 346.62 T
(modeled the slot setter virtual functions that Dylan classes de\336ne automatically) 99.65 332.62 T
(,) 484.98 332.62 T
-0.12 (and we have not gone into how instances of the classes ar) 99.65 318.62 P
-0.12 (e constr) 377.61 318.62 P
-0.12 (ucted. In Dylan,) 415.32 318.62 P
(we would simply give init-keywor) 99.65 304.62 T
(ds for each of the slots, and the automatically) 268.01 304.62 T
(generated constr) 99.65 290.62 T
(uctor would \336ll them in for any of the derived classes. In con-) 180.67 290.62 T
-0.39 (trast, constr) 99.65 276.62 P
-0.39 (uctors for virtual base classes ar) 156.24 276.62 P
-0.39 (e a particularly dif) 308.84 276.62 P
-0.39 (\336cult aspect of C++:) 397.2 276.62 P
-0.04 (They make it har) 99.65 262.62 P
-0.04 (d to model what is done in Dylan accurately) 181.74 262.62 P
-0.04 (. In general, the mix-) 395.59 262.62 P
(in style of pr) 99.65 248.62 T
(ogramming is mor) 160.76 248.62 T
(e dif) 251.11 248.62 T
(\336cult to do in C++, because that language\325s) 272.51 248.62 T
(support for it is quite limited.) 99.65 234.62 T
-0.27 (Note also that the C++ code is pr) 126.65 220.62 P
-0.27 (ovided only as a model of Dylan execution,) 284.32 220.62 P
(so that you can understand the semantics of Dylan classes in C++ terms. Good) 99.65 206.62 T
-0.09 (Dylan compilers use library compilation, type infer) 99.65 192.62 P
-0.09 (encing, and partial evaluation) 347.91 192.62 P
-0.03 (to optimize out the over) 99.65 178.62 P
-0.03 (head normally associated with virtual classes and virtual) 216.32 178.62 P
(functions, while pr) 99.65 164.62 T
(eserving the dynamic execution semantics.) 191.34 164.62 T
4 9 Q
(class BorderLabelWindow :) 105.65 640.95 T
(public virtual BorderWindow,) 116.45 629.95 T
(public virtual LabelWindow,) 116.45 618.95 T
(public virtual Window {) 116.45 607.95 T
(public:) 105.65 596.95 T
(virtual int height\050\051;) 116.45 585.95 T
(};) 105.65 574.95 T
5 F
(// Have to generate "combined" method by hand in C++) 116.45 555.95 T
4 F
(int BorderLabelWindow::height\050\051 {) 105.65 544.95 T
(return Window::height\050\051 - 2 * border_width\050\051 - label_height\050\051;) 116.45 533.95 T
(}) 105.65 522.95 T
8 10 Q
(C++ equiv) 187.5 660.29 T
(alent of the mix-in e) 232.83 660.29 T
(xample) 319.79 660.29 T
(.) 351.87 660.29 T
0 11 Q
( \050Continued\051) 354.65 660.29 T
99.65 672.83 99.65 516.08 2 L
V
0.25 H
0 Z
N
513.65 672.83 513.65 516.08 2 L
V
N
99.52 672.95 513.77 672.95 2 L
V
N
99.52 652.95 513.77 652.95 2 L
V
N
99.52 515.95 513.77 515.95 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "389" 403
%%Page: "390" 404
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
7 X
0 0 0 1 0 0 0 K
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "390" 404
%%Page: "391" 405
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 105.95 495.65 141.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(391) 317.52 135.62 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 590.45 493.98 644.45 R
7 X
V
97.98 616.9 493.98 644.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.98 616.9 493.98 644.45 R
7 X
0 0 0 1 0 0 0 K
V
97.98 637.6 259.98 637.6 2 L
3 H
2 Z
0 X
N
97.98 628.6 259.98 628.6 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Glossary) 97.98 596.9 T
99.65 150.95 513.65 456.95 R
7 X
V
2 11 Q
0 X
(abstract class) 99.65 449.62 T
1 F
(A class that cannot have dir) 126.65 431.62 T
(ect instances. T) 261.18 431.62 T
(o de\336ne an abstract class, you) 333.47 431.62 T
(pr) 126.65 417.62 T
(ovide the) 137.41 417.62 T
4 10 Q
(abstract) 185.57 417.62 T
1 11 Q
( class adjective in the) 233.57 417.62 T
4 10 Q
(define class) 338.32 417.62 T
1 11 Q
( form. All super-) 410.32 417.62 T
(classes of an abstract class must also be abstract.) 126.65 403.62 T
2 F
(allocation) 99.65 377.62 T
1 F
(The allocation of a slot determines wher) 126.65 359.62 T
(e the storage for the slot\325s value is) 321.11 359.62 T
(allocated, and determines which instances shar) 126.65 345.62 T
(e the value of the slot. Ther) 355.43 345.62 T
(e) 486.96 345.62 T
(ar) 126.65 331.62 T
(e four kinds of allocation: instance, class, each-subclass, and virtual.) 136.29 331.62 T
2 F
(ambiguous methods) 99.65 305.62 T
1 F
(Methods that cannot be or) 126.65 287.62 T
(der) 254.06 287.62 T
(ed as mor) 270.2 287.62 T
(e speci\336c or less speci\336c than one) 317.72 287.62 T
(another) 126.65 273.62 T
(, in the method dispatch.) 163.34 273.62 T
2 F
(assignment) 99.65 247.62 T
1 F
-0.23 (The act of setting the value of an existing variable or slot, or of setting an ele-) 126.65 229.62 P
(ment of a collection. The assignment operator is) 126.65 215.62 T
4 10 Q
(:=) 361.64 215.62 T
1 11 Q
(.) 373.64 215.62 T
2 F
(binding) 99.65 189.62 T
1 F
(An association between a name and an object. For example, ther) 126.65 171.62 T
(e is a bind-) 437.7 171.62 T
(ing that associates the name of a constant and the object that is the value of) 126.65 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "391" 405
%%Page: "392" 406
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(392) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(the constant. The names of functions, module variables, and local variables) 126.65 665.62 T
(ar) 126.65 651.62 T
(e also bindings.) 136.29 651.62 T
2 F
(body) 99.65 625.62 T
1 F
(A r) 126.65 607.62 T
(egion of pr) 142.1 607.62 T
(ogram code that delimits the scope of all local variables) 195.02 607.62 T
(declar) 126.65 593.62 T
(ed inside it. Bodies can be nested. An body is begun implicitly with) 156.37 593.62 T
4 10 Q
(define method) 126.65 579.62 T
1 11 Q
(, and is ended by the corr) 204.65 579.62 T
(esponding) 327.61 579.62 T
4 10 Q
(end) 381.75 579.62 T
1 11 Q
(. Y) 399.75 579.62 T
(ou can de\336ne a) 411.57 579.62 T
-0.37 (body explicitly by using) 126.65 565.62 P
4 10 Q
-0.8 (begin) 245.26 565.62 P
1 11 Q
-0.37 ( to start it and) 275.26 565.62 P
4 10 Q
-0.8 (end) 343.86 565.62 P
1 11 Q
-0.37 ( to \336nish it. A local variable) 361.86 565.62 P
-0.26 (has scope extending fr) 126.65 551.62 P
-0.26 (om its declaration to the end of the smallest body that) 234.56 551.62 P
(surr) 126.65 537.62 T
(ounds it.) 146.44 537.62 T
2 F
(built-in class) 99.65 511.62 T
1 F
(A class pr) 126.65 493.62 T
(ovided by Dylan, such as) 174.38 493.62 T
4 10 Q
(<object>) 299.69 493.62 T
1 11 Q
(,) 347.69 493.62 T
4 10 Q
(<integer>) 353.19 493.62 T
1 11 Q
(, or) 407.19 493.62 T
4 10 Q
(<string>) 425.79 493.62 T
1 11 Q
(.) 473.79 493.62 T
2 F
(class) 99.65 467.62 T
1 F
-0.01 (A de\336nition of a type of other objects, which ar) 126.65 449.62 P
-0.01 (e called its instances. A class) 354.9 449.62 P
(de\336nes the slots of its instances. Dylan pr) 126.65 435.62 T
(ovides built-in classes, and users) 327.19 435.62 T
(can de\336ne new classes. When you de\336ne a class, you specify its name, its) 126.65 421.62 T
(dir) 126.65 407.62 T
(ect super) 140.72 407.62 T
(classes, and its slots.) 184.53 407.62 T
2 F
(class precedence list) 99.65 381.62 T
1 F
-0.16 (For a particular class, a list of the class and all its super) 126.65 363.62 P
-0.16 (classes, or) 390.47 363.62 P
-0.16 (der) 438.81 363.62 P
-0.16 (ed fr) 454.95 363.62 P
-0.16 (om) 477.34 363.62 P
(most speci\336c \050the class itself\051 to least speci\336c \050the) 126.65 349.62 T
4 10 Q
(<object>) 367.52 349.62 T
1 11 Q
( class\051.) 415.52 349.62 T
2 F
(closure) 99.65 323.62 T
1 F
(A method that closes over some local variables. The closur) 126.65 305.62 T
(e can access the) 410.37 305.62 T
(local variables which existed when the closur) 126.65 291.62 T
(e was cr) 346.41 291.62 T
(eated. The ability to) 385.54 291.62 T
(dynamically cr) 126.65 277.62 T
(eate and r) 198.98 277.62 T
(eturn closur) 246.88 277.62 T
(es that can access lexical state is one of) 305.4 277.62 T
(the important dynamic aspects of Dylan.) 126.65 263.62 T
2 F
(collection) 99.65 237.62 T
1 F
(A kind of container that can hold zer) 126.65 219.62 T
(o or mor) 305.27 219.62 T
(e objects. Dylan pr) 346.99 219.62 T
(ovides the) 436.82 219.62 T
(usual kinds of collections, including arrays, vectors, strings, singly linked) 126.65 205.62 T
-0.16 (lists, queues, hash tables, and so on. In Dylan, a collection is an instance of a) 126.65 191.62 P
(class. For example, the) 126.65 177.62 T
4 10 Q
(<array>) 239.02 177.62 T
1 11 Q
( class r) 281.02 177.62 T
(epr) 313.58 177.62 T
(esents arrays, and the) 329.61 177.62 T
4 10 Q
(<vector>) 437.57 177.62 T
1 11 Q
(class r) 126.65 163.62 T
(epr) 156.46 163.62 T
(esents vectors.) 172.49 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "392" 406
%%Page: "393" 407
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 474.13 702.62 T
2 F
(393) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(concrete class) 99.65 665.62 T
1 F
(A class that can have dir) 126.65 647.62 T
(ect instances. By default, a class is concr) 245.18 647.62 T
(ete.) 438.26 647.62 T
2 F
(condition) 99.65 621.62 T
1 F
(An instance \050dir) 126.65 603.62 T
(ect or indir) 204.75 603.62 T
(ect\051 of the) 258.01 603.62 T
4 10 Q
(<condition>) 308.59 603.62 T
1 11 Q
( class, that r) 374.59 603.62 T
(epr) 431.72 603.62 T
(esents a) 447.75 603.62 T
(pr) 126.65 589.62 T
(oblem or unusual situation encounter) 137.41 589.62 T
(ed during pr) 320.07 589.62 T
(ogram execution.) 381.74 589.62 T
2 F
(constant) 99.65 563.62 T
1 F
( \050also called) 141.8 563.62 T
2 F
(module constant) 201.86 563.62 T
1 F
(\051) 285.26 563.62 T
(An unchanging binding whose scope is its module. Y) 126.65 545.62 T
(ou de\336ne a constant) 384.67 545.62 T
(explicitly with) 126.65 531.62 T
4 10 Q
(define constant) 199.46 531.62 T
1 11 Q
(, and implicitly with) 289.46 531.62 T
4 10 Q
(define class) 391.11 531.62 T
1 11 Q
(,) 463.11 531.62 T
4 10 Q
-0.55 (define generic) 126.65 517.62 P
1 11 Q
-0.25 (,) 210.1 517.62 P
4 10 Q
-0.55 (define macro) 215.34 517.62 P
1 11 Q
-0.25 (, or possibly) 286.79 517.62 P
4 10 Q
-0.55 (define method) 347.93 517.62 P
1 11 Q
-0.25 (. Y) 425.38 517.62 P
-0.25 (ou must ini-) 436.95 517.62 P
-0.08 (tialize the value of a constant, and you cannot assign another value to a con-) 126.65 503.62 P
(stant during the execution of a Dylan pr) 126.65 489.62 T
(ogram.) 320.9 489.62 T
2 F
(constituent) 99.65 463.62 T
1 F
(A de\336nition, a local declaration, or an expr) 126.65 445.62 T
(ession.) 334.26 445.62 T
2 F
(constructor) 99.65 419.62 T
1 F
(A function that cr) 126.65 401.62 T
(eates an instance. A constr) 212.34 401.62 T
(uctor pr) 340.54 401.62 T
(ovides a shorthand) 379.51 401.62 T
(means for calling) 126.65 387.62 T
4 10 Q
(make) 212.96 387.62 T
1 11 Q
(. For example, you can call the constr) 236.96 387.62 T
(uctor function) 416.8 387.62 T
4 10 Q
(vector) 126.65 373.62 T
1 11 Q
( to cr) 162.65 373.62 T
(eate a vector) 186.77 373.62 T
(, and to initialize that vector with data.) 246.89 373.62 T
2 F
(contract) 99.65 347.62 T
1 F
(An agr) 126.65 329.62 T
(eement between a generic function and its methods. The generic) 160.12 329.62 T
(function de\336nes the terms of the contract, and the methods must obey the) 126.65 315.62 T
-0.13 (contract; particularly) 126.65 301.62 P
-0.13 (, the methods\325 parameters and value declarations must) 227.12 301.62 P
-0.06 (be congr) 126.65 287.62 P
-0.06 (uent with the generic function\325s parameters and value declarations.) 168.36 287.62 P
2 F
(de\336nition) 99.65 261.62 T
1 F
(A declaration of a piece of pr) 126.65 243.62 T
(ogram str) 267.15 243.62 T
(uctur) 314.09 243.62 T
(e, such as a library) 339.97 243.62 T
(, module,) 428.81 243.62 T
-0.38 (class, generic function, or method. A de\336nition usually establishes a module) 126.65 229.62 P
-0.12 (variable or constant. De\336nitions include) 126.65 215.62 P
4 10 Q
-0.27 (define variable) 323.43 215.62 P
1 11 Q
-0.12 (,) 413.17 215.62 P
4 10 Q
-0.27 (define class) 418.54 215.62 P
1 11 Q
-0.12 (,) 490.27 215.62 P
(and) 126.65 201.62 T
4 10 Q
(define method) 148.02 201.62 T
1 11 Q
(.) 226.02 201.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "393" 407
%%Page: "394" 408
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(394) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(development environment) 99.65 665.62 T
1 F
(A collection of tools for Dylan pr) 126.65 647.62 T
(ogrammers that can include an editor cus-) 285.98 647.62 T
(tom-tailor) 126.65 633.62 T
(ed for Dylan code, a br) 175.26 633.62 T
(owser) 286.1 633.62 T
(, a compiler) 314.75 633.62 T
(, a debugger) 370.91 633.62 T
(, and a lis-) 430.4 633.62 T
(tener that enables you to enter expr) 126.65 619.62 T
(essions and to see their values. The) 298.4 619.62 T
(featur) 126.65 605.62 T
(es of any development envir) 155.45 605.62 T
(onment ar) 293.56 605.62 T
(e de\336ned by the implementa-) 343.34 605.62 T
(tion, rather than by Dylan itself.) 126.65 591.62 T
2 F
(direct instance) 99.65 565.62 T
1 F
-0.28 (An object is a dir) 126.65 547.62 P
-0.28 (ect instance of class A if the object\325s class is class A. Y) 207.32 547.62 P
-0.28 (ou can) 461.29 547.62 P
(use) 126.65 533.62 T
4 10 Q
(object-class) 145.96 533.62 T
1 11 Q
( to \336nd out the class of which an object is a dir) 217.96 533.62 T
(ect) 442.2 533.62 T
(instance.) 126.65 519.62 T
2 F
(direct subclass) 99.65 493.62 T
1 F
(A class is the dir) 126.65 475.62 T
(ect subclass of all its dir) 206.31 475.62 T
(ect super) 321.18 475.62 T
(classes. \322Dir) 365 475.62 T
(ect\323 means) 424.7 475.62 T
-0.12 (ther) 126.65 461.62 P
-0.12 (e is no class intervening between the class and its subclass in the inherit-) 146.05 461.62 P
(ance graph.) 126.65 447.62 T
2 F
(direct superclass) 99.65 421.62 T
1 F
(The dir) 126.65 403.62 T
(ect super) 161.88 403.62 T
(classes of a class appear in the) 205.69 403.62 T
4 10 Q
(define class) 354.57 403.62 T
1 11 Q
( form for that) 426.57 403.62 T
(class. Dir) 126.65 389.62 T
(ect means that ther) 170.92 389.62 T
(e is no class intervening between the class and) 262.94 389.62 T
(its super) 126.65 375.62 T
(class in the inheritance graph.) 168.17 375.62 T
4 10 Q
(dylan) 99.65 349.62 T
2 11 Q
( library) 129.65 349.62 T
1 F
(A library that contains modules that contain the elements of the cor) 126.65 331.62 T
(e Dylan) 453.82 331.62 T
(language.) 126.65 317.62 T
4 10 Q
(dylan) 99.65 291.62 T
2 11 Q
( module) 129.65 291.62 T
1 F
(A module that contains the elements of the cor) 126.65 273.62 T
(e Dylan language.) 353.06 273.62 T
4 10 Q
(dylan-user) 99.65 247.62 T
2 11 Q
( module) 159.65 247.62 T
1 F
(The special bootstrapping module in which you de\336ne the modules and) 126.65 229.62 T
(libraries that make up your pr) 126.65 215.62 T
(ogram.) 272.98 215.62 T
2 F
(exception) 99.65 189.62 T
1 F
(An unexpected event that occurs during pr) 126.65 171.62 T
(ogram execution.) 335.83 171.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "394" 408
%%Page: "395" 409
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 474.13 702.62 T
2 F
(395) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(expression) 99.65 665.62 T
1 F
(A piece of code that, when executed, can r) 126.65 647.62 T
(eturn \050zer) 331.05 647.62 T
(o or mor) 378.61 647.62 T
(e\051 values and) 420.34 647.62 T
-0.25 (can have side ef) 126.65 633.62 P
-0.25 (fects. Expr) 202.93 633.62 P
-0.25 (essions include \050among others\051 literals, r) 253.4 633.62 P
-0.25 (efer) 448.31 633.62 P
-0.25 (ences) 466.65 633.62 P
(to variables or constants, function calls, and statements \050such as) 126.65 619.62 T
4 10 Q
(if) 438.76 619.62 T
1 11 Q
(,) 450.76 619.62 T
4 10 Q
(while) 456.26 619.62 T
1 11 Q
(,) 486.26 619.62 T
(and) 126.65 605.62 T
4 10 Q
(case) 148.02 605.62 T
1 11 Q
(\051.) 172.02 605.62 T
4 10 Q
(#f) 99.65 581.29 T
1 11 Q
(The canonical false value. This object is the only object that r) 126.65 563.62 T
(epr) 419.04 563.62 T
(esents false) 435.07 563.62 T
(in Dylan.) 126.65 549.62 T
2 F
(general instance) 99.65 523.62 T
1 F
(A member of a class. An object is a general instance of a class if it is either a) 126.65 505.62 T
(dir) 126.65 491.62 T
(ect or an indir) 140.72 491.62 T
(ect instance of that class. The term) 208.63 491.62 T
0 F
(instance) 377.26 491.62 T
1 F
( is equivalent to) 414.13 491.62 T
(the term) 126.65 477.62 T
0 F
(general instance) 170.32 477.62 T
1 F
(.) 242.34 477.62 T
2 F
(generic function) 99.65 451.62 T
1 F
(A kind of function. A generic function de\336nes an interface, and contains) 126.65 433.62 T
(methods that implement that generic function. When a generic function is) 126.65 419.62 T
(called, it chooses the method to call based on the types of its r) 126.65 405.62 T
(equir) 425.35 405.62 T
(ed) 450.76 405.62 T
(ar) 126.65 391.62 T
(guments.) 136.29 391.62 T
2 F
(getter) 99.65 365.62 T
1 F
-0.22 (A method that r) 126.65 347.62 P
-0.22 (etrieves the curr) 203.71 347.62 P
-0.22 (ent value of a slot in an object. Each slot in a) 281.86 347.62 P
-0.01 (class automatically has a getter de\336ned for it. The getter) 126.65 333.62 P
-0.01 (\325s name is the same) 399.07 333.62 P
(as the name of the slot.) 126.65 319.62 T
2 F
(handler) 99.65 293.62 T
1 F
(A function that can potentially r) 126.65 275.62 T
(esolve an exceptional situation.) 282.42 275.62 T
2 F
(implicit generic function) 99.65 249.62 T
1 F
(A generic function cr) 126.65 231.62 T
(eated by Dylan if a method is de\336ned by) 228.75 231.62 T
4 10 Q
(define) 428.94 231.62 T
(method) 126.65 217.62 T
1 11 Q
( or \050for a slot getter or setter\051 by) 162.65 217.62 T
4 10 Q
(define class) 319.49 217.62 T
1 11 Q
( and if no generic) 391.49 217.62 T
(function of the same name exists. An implicit generic function has the most) 126.65 203.62 T
(general parameter and r) 126.65 189.62 T
(esult types that ar) 243.91 189.62 T
(e compatible with the method.) 330.48 189.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "395" 409
%%Page: "396" 410
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(396) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(indirect instance) 99.65 665.62 T
1 F
(An object is an indir) 126.65 647.62 T
(ect instance of class A if the object\325s class has class A as) 224.45 647.62 T
(a super) 126.65 633.62 T
(class.) 162.22 633.62 T
2 F
(in\336x function) 99.65 607.62 T
1 F
(A function whose calling syntax has the function appearing between the) 126.65 589.62 T
(ar) 126.65 575.62 T
(guments. The arithmetic functions) 136.29 575.62 T
4 10 Q
(+) 305.97 575.62 T
1 11 Q
(,) 311.97 575.62 T
4 10 Q
(-) 317.47 575.62 T
1 11 Q
(,) 323.47 575.62 T
4 10 Q
(*) 328.97 575.62 T
1 11 Q
(,) 334.97 575.62 T
4 10 Q
(/) 340.47 575.62 T
1 11 Q
(,) 346.47 575.62 T
4 10 Q
(<) 351.97 575.62 T
1 11 Q
(,) 357.97 575.62 T
4 10 Q
(>) 363.47 575.62 T
1 11 Q
(, and so on ar) 369.47 575.62 T
(e in\336x func-) 434.57 575.62 T
(tions, as is the assignment operator) 126.65 561.62 T
(,) 296.66 561.62 T
4 10 Q
(:=) 302.16 561.62 T
1 11 Q
(. An example of the calling syntax is:) 314.16 561.62 T
4 10 Q
(3 + 2) 126.65 547.62 T
1 11 Q
(.) 156.65 547.62 T
2 F
(information hiding) 99.65 521.62 T
1 F
(A principle of minimizing the information that is passed among compo-) 126.65 503.62 T
(nents in a system; it r) 126.65 489.62 T
(educes the inter) 229.52 489.62 T
(dependencies of components.) 306.32 489.62 T
2 F
(inheritance) 99.65 463.62 T
1 F
(The ability to arrange for classes that ar) 126.65 445.62 T
(e logically r) 317.85 445.62 T
(elated to one another to) 374.19 445.62 T
(shar) 126.65 431.62 T
(e the behaviors and data attributes that they have in common. Each) 147.36 431.62 T
(class inherits fr) 126.65 417.62 T
(om one or mor) 199.94 417.62 T
(e other classes, called its super) 271.8 417.62 T
(classes. If no) 419.58 417.62 T
(other class is an appr) 126.65 403.62 T
(opriate super) 228.8 403.62 T
(class, the class inherits fr) 293.4 403.62 T
(om the class) 413.11 403.62 T
4 10 Q
(<object>) 126.65 389.62 T
1 11 Q
(.) 174.65 389.62 T
2 F
(init expression) 99.65 363.62 T
1 F
(A technique for initializing slots. An init expr) 126.65 345.62 T
(ession pr) 346.91 345.62 T
(ovides an expr) 390.63 345.62 T
(ession) 461.81 345.62 T
(that yields a default value. Every time that an instance is made and the slot) 126.65 331.62 T
(needs a default value, this expr) 126.65 317.62 T
(ession is evaluated, and its value is used as) 277.92 317.62 T
-0.39 (the default. The slot r) 126.65 303.62 P
-0.39 (eceives its default initial value when no init keywor) 228.68 303.62 P
-0.39 (d is) 476.34 303.62 P
(de\336ned, or when the caller does not supply the init-keywor) 126.65 289.62 T
(d ar) 415.07 289.62 T
(gument to) 434.19 289.62 T
4 10 Q
(make) 126.65 275.62 T
1 11 Q
(.) 150.65 275.62 T
2 F
(init function) 99.65 249.62 T
1 F
(A function of zer) 126.65 231.62 T
(o ar) 208.82 231.62 T
(guments that is to be called to r) 227.22 231.62 T
(eturn a default initial) 379.25 231.62 T
(value for the slot. The function is called every time that an instance is cr) 126.65 217.62 T
(e-) 474.04 217.62 T
(ated if no init keywor) 126.65 203.62 T
(d is de\336ned, or if the caller does not supply the init) 231.21 203.62 T
(keywor) 126.65 189.62 T
(d ar) 163.48 189.62 T
(gument to) 182.59 189.62 T
4 10 Q
(make) 235.4 189.62 T
1 11 Q
(. T) 259.4 189.62 T
(o de\336ne an init function for a slot, use the) 270.64 189.62 T
4 10 Q
(init-function:) 126.65 175.62 T
1 11 Q
( slot option in the class de\336nition.) 210.65 175.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "396" 410
%%Page: "397" 411
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 474.13 702.62 T
2 F
(397) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(init keyword) 99.65 665.62 T
1 F
-0.24 (A keywor) 126.65 647.62 P
-0.24 (d that can be given to) 174.54 647.62 P
4 10 Q
-0.53 (make) 280.33 647.62 P
1 11 Q
-0.24 ( to pr) 304.33 647.62 P
-0.24 (ovide an initial value for a slot. T) 329.69 647.62 P
-0.24 (o) 487.13 647.62 P
(de\336ne an init keywor) 126.65 633.62 T
(d for a slot, you use the) 230.33 633.62 T
4 10 Q
(init-keyword:) 346.6 633.62 T
1 11 Q
( or) 424.6 633.62 T
4 10 Q
(required-) 440.45 633.62 T
(init-keyword:) 126.65 619.62 T
1 11 Q
( slot option in the class de\336nition.) 204.65 619.62 T
2 F
(init value) 99.65 593.62 T
1 F
-0.03 (A default initial value for a slot, obtained by evaluating an expr) 126.65 575.62 P
-0.03 (ession once,) 434.7 575.62 P
-0.3 (befor) 126.65 561.62 P
-0.3 (e the \336rst instance of the class is made. T) 151.82 561.62 P
-0.3 (o de\336ne an init value for a slot,) 344.92 561.62 P
(use the) 126.65 547.62 T
4 10 Q
(init-value:) 163.97 547.62 T
1 11 Q
( slot option in the class de\336nition.) 229.97 547.62 T
2 F
(initialize) 99.65 521.62 T
1 F
-0.32 (T) 126.65 503.62 P
-0.32 (o pr) 132.38 503.62 P
-0.32 (ovide an initial value for something that you ar) 151.57 503.62 P
-0.32 (e cr) 378.26 503.62 P
-0.32 (eating, such as a slot) 394.98 503.62 P
(or a variable.) 126.65 489.62 T
2 F
(initialize method) 99.65 463.62 T
1 F
(A method for the) 126.65 445.62 T
4 10 Q
(initialize) 213.17 445.62 T
1 11 Q
( generic function. The purpose of initialize) 273.17 445.62 T
(methods is to initialize an instance befor) 126.65 431.62 T
(e that instance is r) 322.21 431.62 T
(eturned by) 409.47 431.62 T
4 10 Q
(make) 465.39 431.62 T
1 11 Q
(.) 489.39 431.62 T
2 F
(instance) 99.65 405.62 T
1 F
(A member of a class. An object is an instance of a class if it is either a dir) 126.65 387.62 T
(ect) 476.21 387.62 T
(or an indir) 126.65 373.62 T
(ect instance of that class. The term) 178.07 373.62 T
0 F
(instance) 346.7 373.62 T
1 F
( is equivalent to the) 383.58 373.62 T
(term) 126.65 359.62 T
0 F
(general instance) 152.31 359.62 T
1 F
(.) 224.33 359.62 T
2 F
(instantiable class) 99.65 333.62 T
1 F
(A class that can be used as the \336rst ar) 126.65 315.62 T
(gument to) 307.69 315.62 T
4 10 Q
(make) 360.5 315.62 T
1 11 Q
(. All concr) 384.5 315.62 T
(ete classes) 434.03 315.62 T
-0.21 (ar) 126.65 301.62 P
-0.21 (e instantiable. Y) 136.29 301.62 P
-0.21 (ou can make an abstract class be instantiable by de\336ning a) 212.31 301.62 P
4 10 Q
(make) 126.65 287.62 T
1 11 Q
( method for the class; the) 150.65 287.62 T
4 10 Q
(make) 275.04 287.62 T
1 11 Q
( method must r) 299.04 287.62 T
(eturn an instance of a) 373.73 287.62 T
(concr) 126.65 273.62 T
(ete subclass of the abstract class.) 152.97 273.62 T
2 F
(interchange format) 99.65 247.62 T
1 F
-0.27 (A format that all Dylan implementations accept for publishing and exchang-) 126.65 229.62 P
(ing sour) 126.65 215.62 T
(ce code by means of \336les. In this format, each \336le contains a single) 166.57 215.62 T
-0.13 (sour) 126.65 201.62 P
-0.13 (ce r) 148.1 201.62 P
-0.13 (ecor) 165.02 201.62 P
-0.13 (d. The \336le must have a header at the fr) 185.32 201.62 P
-0.13 (ont, consisting of pairs of) 371.03 201.62 P
(keywor) 126.65 187.62 T
(ds and values. One r) 163.48 187.62 T
(equir) 263.18 187.62 T
(ed keywor) 288.59 187.62 T
(d is) 340.16 187.62 T
4 10 Q
(module:) 360.24 187.62 T
1 11 Q
(; its value is the) 402.24 187.62 T
(name of the module in which the sour) 126.65 173.62 T
(ce r) 311.62 173.62 T
(ecor) 328.67 173.62 T
(d of the \336le r) 348.98 173.62 T
(esides.) 410.9 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "397" 411
%%Page: "398" 412
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(398) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(keyword) 99.65 665.62 T
1 F
(A symbol name followed by a colon, such as) 126.65 647.62 T
4 10 Q
(total-seconds:) 345.56 647.62 T
1 11 Q
(.) 429.56 647.62 T
2 F
(keyword argument) 99.65 621.62 T
1 F
(An optional ar) 126.65 603.62 T
(gument to a function consisting of a keywor) 197.27 603.62 T
(d followed by) 411.23 603.62 T
(that keywor) 126.65 589.62 T
(d\325s value. Y) 185.3 589.62 T
(ou can give keywor) 241.14 589.62 T
(d ar) 336.44 589.62 T
(guments in any or) 355.56 589.62 T
(der) 443.96 589.62 T
(.) 459.49 589.62 T
(Keywor) 126.65 575.62 T
(d ar) 165.35 575.62 T
(guments can be useful for functions that take many ar) 184.46 575.62 T
(guments) 446.18 575.62 T
-0.3 (\321 when you call the function, you do not need to r) 126.65 561.62 P
-0.3 (emember the or) 371.06 561.62 P
-0.3 (der of the) 447.03 561.62 P
(ar) 126.65 547.62 T
(guments. Keywor) 136.29 547.62 T
(d parameters enable a method to accept optional ar) 222.88 547.62 T
(gu-) 471.81 547.62 T
(ments that ar) 126.65 533.62 T
(e keyed to a name. Keywor) 190.5 533.62 T
(d parameters appear after) 322.44 533.62 T
4 10 Q
(#key) 451.16 533.62 T
1 11 Q
( in) 475.16 533.62 T
(the parameter list.) 126.65 519.62 T
2 F
(library) 99.65 493.62 T
1 F
(A Dylan library de\336nes a softwar) 126.65 475.62 T
(e component, which is a separately com-) 288.7 475.62 T
(pilable unit that can be either a stand-alone pr) 126.65 461.62 T
(ogram or a component) 349.99 461.62 T
(\050library\051 of a lar) 126.65 447.62 T
(ger pr) 203.03 447.62 T
(ogram. A library contains modules.) 232.27 447.62 T
2 F
(library-interchange de\336nition \050LID\051 \336le) 99.65 421.62 T
1 F
-0.05 (A \336le that enumerates all the \336les that make up a library) 126.65 403.62 P
-0.05 (. Most Dylan imple-) 398.73 403.62 P
(mentations support LID \336les, but these \336les ar) 126.65 389.62 T
(e not r) 351.09 389.62 T
(equir) 382 389.62 T
(ed to by the cor) 407.41 389.62 T
(e) 482.49 389.62 T
(language.) 126.65 375.62 T
2 F
(limited type) 99.65 349.62 T
1 F
(A type that is a mor) 126.65 331.62 T
(e r) 222.84 331.62 T
(estricted version of its base type. For example, a) 235.01 331.62 T
(limited-integer type is based on) 126.65 317.62 T
4 10 Q
(<integer>) 283.23 317.62 T
1 11 Q
(, but has a given minimum or) 337.23 317.62 T
(maximum value. Another example of a limited type is a limited-collection) 126.65 303.62 T
(type, which is a collection type that speci\336es the type of elements, and/or) 126.65 289.62 T
(the size of the collection. Limited types ar) 126.65 275.62 T
(e cr) 328.41 275.62 T
(eated via) 345.46 275.62 T
4 10 Q
(limited) 392.22 275.62 T
1 11 Q
(.) 434.22 275.62 T
2 F
(listener) 99.65 249.62 T
1 F
-0.41 (A tool that enables you to enter Dylan expr) 126.65 231.62 P
-0.41 (essions, executes the expr) 332.84 231.62 P
-0.41 (essions,) 455.69 231.62 P
(and displays any values and output pr) 126.65 217.62 T
(oduced by them.) 314.39 217.62 T
2 F
(literal constant) 99.65 191.62 T
1 F
(An object whose contents ar) 126.65 173.62 T
(e known completely at compile time.) 262.97 173.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "398" 412
%%Page: "399" 413
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 474.13 702.62 T
2 F
(399) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(local declaration) 99.65 665.62 T
1 F
(A declaration that establishes a local variable, local method, or local condi-) 126.65 647.62 T
(tion handler) 126.65 633.62 T
(. Local declarations include) 185.62 633.62 T
4 10 Q
(let) 321.27 633.62 T
1 11 Q
(,) 339.27 633.62 T
4 10 Q
(local) 344.77 633.62 T
1 11 Q
(, and) 374.77 633.62 T
4 10 Q
(let handler) 401.64 633.62 T
1 11 Q
(.) 466.83 633.62 T
2 F
(local variable) 99.65 607.62 T
1 F
-0.22 (A binding whose scope extends fr) 126.65 589.62 P
-0.22 (om its de\336nition to the end of the smallest) 290.32 589.62 P
(body that surr) 126.65 575.62 T
(ounds it. Y) 195.94 575.62 T
(ou establish and use local variables within a body) 247.73 575.62 T
(.) 488.06 575.62 T
(Once the pr) 126.65 561.62 T
(ogram exits the body) 183.36 561.62 T
(, the local variables ar) 284.65 561.62 T
(e no longer de\336ned,) 390.08 561.62 T
(and an attempt to access them is an err) 126.65 547.62 T
(or) 314.98 547.62 T
(.) 324.52 547.62 T
2 F
(macro) 99.65 521.62 T
1 F
-0.27 (A wor) 126.65 503.62 P
-0.27 (d or phrase that stands for another phrase \050usually longer) 157.02 503.62 P
-0.27 (, but built of) 434.29 503.62 P
-0.16 (simpler components\051. Macr) 126.65 489.62 P
-0.16 (os can be used for abbr) 259.72 489.62 P
-0.16 (eviation, abstraction, sim-) 370.59 489.62 P
(pli\336cation, or str) 126.65 475.62 T
(ucturing. The primary use of macr) 207 475.62 T
(os in pr) 374.03 475.62 T
(ogramming is to) 410.56 475.62 T
(extend or adapt the language to allow a mor) 126.65 461.62 T
(e concise or r) 341.87 461.62 T
(eadable solution) 405.2 461.62 T
(for a particular pr) 126.65 447.62 T
(oblem domain.) 212.98 447.62 T
2 F
(method) 99.65 421.62 T
1 F
-0.04 (A kind of function that can belong to a generic function. Although methods) 126.65 403.62 P
(ar) 126.65 389.62 T
(e independent of classes, they operate on instances of classes. A method) 136.29 389.62 T
(states the kinds of objects that it handles by the types of its r) 126.65 375.62 T
(equir) 417.75 375.62 T
(ed) 443.16 375.62 T
(ar) 126.65 361.62 T
(guments.) 136.29 361.62 T
2 F
(module) 99.65 335.62 T
1 F
(A unit that contains a portion of the de\336nitions of a library) 126.65 317.62 T
(. Each module) 410.43 317.62 T
-0.07 (speci\336es an independent namespace for Dylan constants and variables, and) 126.65 303.62 P
(contr) 126.65 289.62 T
(ols the visibility of the names within a module fr) 151.67 289.62 T
(om outside the mod-) 387.51 289.62 T
(ule. Y) 126.65 275.62 T
(ou can use modules both to do information hiding and to pr) 153.58 275.62 T
(event) 445.46 275.62 T
(name clashes between constants and variables.) 126.65 261.62 T
2 F
(module constant) 99.65 235.62 T
1 F
( \050see) 183.05 235.62 T
2 F
(constant) 207.41 235.62 T
1 F
(\051) 249.57 235.62 T
2 F
(module variable) 99.65 209.62 T
1 F
(A binding whose scope is its module. A module variable is much like a glo-) 126.65 191.62 T
(bal variable in other languages. Y) 126.65 177.62 T
(ou de\336ne a module variable with) 288.18 177.62 T
4 10 Q
(define) 452.36 177.62 T
(variable) 126.65 163.62 T
1 11 Q
(. When you de\336ne a module variable, you must initialize it \050that) 174.65 163.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "399" 413
%%Page: "400" 414
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(400) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
1 11 Q
0 X
(is, pr) 126.65 665.62 T
(ovide an initial value for it\051. If a module variable is not exported fr) 150.77 665.62 T
(om) 473.04 665.62 T
-0.3 (the module that de\336nes it, then it is accessible only within the module. If the) 126.65 651.62 P
(module variable is exported by the module that de\336nes it, and is imported) 126.65 637.62 T
-0.1 (or used by another module, then it is accessible within that other module as) 126.65 623.62 P
(well.) 126.65 609.62 T
2 F
(multiple inheritance) 99.65 583.62 T
1 F
(Inheritance of a class fr) 126.65 565.62 T
(om mor) 238.51 565.62 T
(e than one dir) 276.84 565.62 T
(ect super) 344 565.62 T
(class.) 387.81 565.62 T
4 10 Q
(<object>) 99.65 539.62 T
2 11 Q
( class) 147.65 539.62 T
1 F
(The class fr) 126.65 521.62 T
(om which all classes inherit, either dir) 181.29 521.62 T
(ectly or indir) 365.61 521.62 T
(ectly) 428.19 521.62 T
(.) 450.03 521.62 T
2 F
(object) 99.65 495.62 T
1 F
(An individual datum. Also called an) 126.65 477.62 T
0 F
(instance) 307.11 477.62 T
1 F
(.) 343.99 477.62 T
2 F
(parameter list) 99.65 451.62 T
1 F
(A list of speci\336cations for the ar) 126.65 433.62 T
(guments to a function. A parameter list can) 280.47 433.62 T
(specify r) 126.65 419.62 T
(equir) 167.95 419.62 T
(ed and optional ar) 193.36 419.62 T
(guments. The optional ar) 282.39 419.62 T
(guments can be) 404.34 419.62 T
(keywor) 126.65 405.62 T
(d ar) 163.48 405.62 T
(guments, each of which is passed to the function as a keywor) 182.59 405.62 T
(d) 479.18 405.62 T
(followed by a value. Each parameter has a name, which is bound to the cor-) 126.65 391.62 T
(r) 126.65 377.62 T
(esponding ar) 130.79 377.62 T
(gument within the function\325s body when the function is) 194.58 377.62 T
(called. Requir) 126.65 363.62 T
(ed parameters and a method\325s keywor) 193.68 363.62 T
(d parameters can) 380.59 363.62 T
-0.15 (include type constraints. The parameter lists of a generic function and all its) 126.65 349.62 P
(methods must be congr) 126.65 335.62 T
(uent.) 240.87 335.62 T
2 F
(parameter specializer) 99.65 309.62 T
1 F
(The type of a r) 126.65 291.62 T
(equir) 196.96 291.62 T
(ed parameter of a method.) 222.37 291.62 T
2 F
(predicate) 99.65 265.62 T
1 F
(A function that r) 126.65 247.62 T
(eturns tr) 207.45 247.62 T
(ue or false. False is always r) 248.95 247.62 T
(epr) 383.66 247.62 T
(esented as) 399.69 247.62 T
4 10 Q
(#f) 452.53 247.62 T
1 11 Q
(. T) 464.53 247.62 T
(r) 475.79 247.62 T
(ue) 480.04 247.62 T
(is r) 126.65 233.62 T
(epr) 141.41 233.62 T
(esented by the canonical tr) 157.44 233.62 T
(ue value,) 286.9 233.62 T
4 10 Q
(#t) 333.87 233.62 T
1 11 Q
(, and by any value other than) 345.87 233.62 T
4 10 Q
(#f) 126.65 219.62 T
1 11 Q
(.) 138.65 219.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "400" 414
%%Page: "401" 415
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 474.13 702.62 T
2 F
(401) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(protocol) 99.65 665.62 T
1 F
(The interface de\336nition of a softwar) 126.65 647.62 T
(e component. The purpose of establish-) 300.28 647.62 T
-0.01 (ing pr) 126.65 633.62 P
-0.01 (otocols is to de\336ne a uniform interface that clients can use, even if the) 155.87 633.62 P
(implementation of a component is enhanced or modi\336ed.) 126.65 619.62 T
2 F
(recursion) 99.65 593.62 T
1 F
(A technique in which a function calls itself.) 126.65 575.62 T
2 F
(required parameter) 99.65 549.62 T
1 F
(A parameter corr) 126.65 531.62 T
(esponding to an ar) 210.23 531.62 T
(gument that must be pr) 301.01 531.62 T
(ovided in the) 415.51 531.62 T
-0.21 (call to the function. Requir) 126.65 517.62 P
-0.21 (ed parameters appear befor) 254.71 517.62 P
-0.21 (e any r) 388.11 517.62 P
-0.21 (est or keywor) 420.62 517.62 P
-0.21 (d) 486.39 517.62 P
(parameters in a parameter list. Requir) 126.65 503.62 T
(ed parameters ar) 310.6 503.62 T
(e or) 392.54 503.62 T
(der) 410.71 503.62 T
(ed, and the) 426.85 503.62 T
(r) 126.65 489.62 T
(equir) 130.79 489.62 T
(ed ar) 156.21 489.62 T
(guments must be given in the same or) 180.59 489.62 T
(der) 365.54 489.62 T
(.) 381.06 489.62 T
2 F
(rest parameter) 99.65 463.62 T
1 F
(Parameters that enable a method to accept any number of optional ar) 126.65 445.62 T
(gu-) 462.35 445.62 T
-0.18 (ments. Any ar) 126.65 431.62 P
-0.18 (guments pr) 194.9 431.62 P
-0.18 (ovided in the call after the r) 250.61 431.62 P
-0.18 (equir) 383.59 431.62 P
-0.18 (ed ar) 409 431.62 P
-0.18 (guments ar) 433.2 431.62 P
-0.18 (e) 487.81 431.62 P
(collected in a sequence, which is the value of the r) 126.65 417.62 T
(est parameter) 368.65 417.62 T
(. A r) 434.24 417.62 T
(est) 455.2 417.62 T
(parameter) 126.65 403.62 T
(, if one exists, appears after) 175.97 403.62 T
4 10 Q
(#rest) 310.44 403.62 T
1 11 Q
( in the parameter list.) 340.44 403.62 T
2 F
(restart) 99.65 377.62 T
1 F
(A special condition that r) 126.65 359.62 T
(epr) 249.17 359.62 T
(esents an opportunity to r) 265.19 359.62 T
(ecover fr) 390.79 359.62 T
(om an) 433.34 359.62 T
(exception.) 126.65 345.62 T
2 F
(restart handler) 99.65 319.62 T
1 F
(A function used to implement the particular r) 126.65 301.62 T
(ecovery action for a r) 348.29 301.62 T
(estart) 450.63 301.62 T
(condition.) 126.65 287.62 T
2 F
(value declaration) 99.65 261.62 T
1 F
(A list of the values r) 126.65 243.62 T
(eturned by a function, and of the types of the values.) 224.16 243.62 T
(The name of a r) 126.65 229.62 T
(eturn value is used pur) 202.26 229.62 T
(ely for documentation purposes.) 314.86 229.62 T
-0.17 (When you pr) 126.65 215.62 P
-0.17 (ovide a value declaration for a function, Dylan signals an err) 190.39 215.62 P
-0.17 (or) 482.72 215.62 P
(if the function tries to r) 126.65 201.62 T
(eturn a value of the wr) 238.1 201.62 T
(ong type. The compiler can) 348.65 201.62 T
-0.2 (check r) 126.65 187.62 P
-0.2 (eceivers of the r) 160.9 187.62 P
-0.2 (esults of the method for corr) 236.72 187.62 P
-0.2 (ect type, and can usually) 373.49 187.62 P
(pr) 126.65 173.62 T
(oduce mor) 137.41 173.62 T
(e ef) 189.54 173.62 T
(\336cient code. The value declarations of a generic function) 206.29 173.62 T
(and all that function\325s methods must be congr) 126.65 159.62 T
(uent.) 349.97 159.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "401" 415
%%Page: "402" 416
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(402) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(root) 99.65 665.62 T
1 F
(The starting point of Dylan class inheritance \321 the class) 126.65 647.62 T
4 10 Q
(<object>) 401.71 647.62 T
1 11 Q
(, fr) 449.71 647.62 T
(om) 463.02 647.62 T
(which all Dylan classes inherit, either dir) 126.65 633.62 T
(ectly or indir) 324.99 633.62 T
(ectly) 387.57 633.62 T
(.) 409.4 633.62 T
2 F
(setter) 99.65 607.62 T
1 F
(A method that stor) 126.65 589.62 T
(es a value in a slot. By default, each slot in a class has a) 218.63 589.62 T
(setter de\336ned for it automatically) 126.65 575.62 T
(.) 287.61 575.62 T
2 F
(signature) 99.65 549.62 T
1 F
(The parameter list and the values declaration of a function.) 126.65 531.62 T
2 F
(singleton type) 99.65 505.62 T
1 F
(A type whose only member is one particular instance. Singleton types ar) 126.65 487.62 T
(e) 478.53 487.62 T
(cr) 126.65 473.62 T
(eated via) 135.68 473.62 T
4 10 Q
(singleton) 182.44 473.62 T
1 11 Q
(.) 236.44 473.62 T
2 F
(single inheritance) 99.65 447.62 T
1 F
(Inheritance in a class that has only one dir) 126.65 429.62 T
(ect super) 330.74 429.62 T
(class.) 374.55 429.62 T
2 F
(slot) 99.65 403.62 T
1 F
(A unit of data associated with an instance. A slot is like a str) 126.65 385.62 T
(uctur) 418.35 385.62 T
(e member) 444.23 385.62 T
(or a \336eld in other languages. Information about a slot is speci\336ed in the def-) 126.65 371.62 T
(inition of the instance\325s class. The location of storage for the slot is deter-) 126.65 357.62 T
(mined by the slot\325s allocation. A pr) 126.65 343.62 T
(ogram r) 296.64 343.62 T
(etrieves the value of a slot by) 335.22 343.62 T
(calling that slot\325s getter generic function, and, unless the slot is constant, it) 126.65 329.62 T
(sets the value by calling the slot\325s setter generic function.) 126.65 315.62 T
2 F
(slot option) 99.65 289.62 T
1 F
(An option that speci\336es a characteristic of a slot, such as the default initial) 126.65 271.62 T
(value or the init keywor) 126.65 257.62 T
(d. Slot options appear in the) 243.29 257.62 T
4 10 Q
(define class) 383 257.62 T
1 11 Q
( form.) 455 257.62 T
2 F
(source record) 99.65 231.62 T
1 F
(A unit that or) 126.65 213.62 T
(ganizes a portion of the Dylan sour) 192.51 213.62 T
(ce code for a pr) 363.42 213.62 T
(ogram. Dif-) 437.73 213.62 T
(fer) 126.65 199.62 T
(ent Dylan implementations divide code into sour) 139.73 199.62 T
(ce r) 378.39 199.62 T
(ecor) 395.44 199.62 T
(ds dif) 415.75 199.62 T
(fer) 443.27 199.62 T
(ently) 456.35 199.62 T
(,) 479.7 199.62 T
(and stor) 126.65 185.62 T
(e the sour) 166.42 185.62 T
(ce r) 213.9 185.62 T
(ecor) 230.95 185.62 T
(ds dif) 251.26 185.62 T
(fer) 278.78 185.62 T
(ently) 291.86 185.62 T
(. For example, an implementation) 315.21 185.62 T
(might stor) 126.65 171.62 T
(e sour) 176.82 171.62 T
(ce r) 206.29 171.62 T
(ecor) 223.34 171.62 T
(ds in a database. Many implementations stor) 243.64 171.62 T
(e) 461.36 171.62 T
(sour) 126.65 157.62 T
(ce r) 148.1 157.62 T
(ecor) 165.15 157.62 T
(ds in \336les, and typically each \336le contains one sour) 185.45 157.62 T
(ce r) 431.72 157.62 T
(ecor) 448.77 157.62 T
(d.) 469.08 157.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "402" 416
%%Page: "403" 417
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 474.13 702.62 T
2 F
(403) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(subclass) 99.65 665.62 T
1 F
(The subclasses of a class include the class itself, and all classes that inherit) 126.65 647.62 T
-0.37 (fr) 126.65 633.62 P
-0.37 (om the class \050all the class\325s dir) 134.46 633.62 P
-0.37 (ect subclasses, and all their dir) 278.16 633.62 P
-0.37 (ect subclasses,) 424.17 633.62 P
(and so on\051.) 126.65 619.62 T
2 F
(subtype) 99.65 593.62 T
1 F
-0.15 (The subtypes of a type include the type itself, and all types that inherit fr) 126.65 575.62 P
-0.15 (om) 477.33 575.62 P
(the type, dir) 126.65 561.62 T
(ectly or indir) 185.81 561.62 T
(ectly) 248.38 561.62 T
(.) 270.22 561.62 T
2 F
(superclass) 99.65 535.62 T
1 F
-0.2 (The super) 126.65 517.62 P
-0.2 (classes of a class include all that class\325s dir) 174.94 517.62 P
-0.2 (ect super) 378.26 517.62 P
-0.2 (classes, and all) 421.88 517.62 P
(their dir) 126.65 503.62 T
(ect super) 166.27 503.62 T
(classes, and so on, all the way to the r) 210.08 503.62 T
(oot of class inherit-) 391.83 503.62 T
(ance, which is the) 126.65 489.62 T
4 10 Q
(<object>) 215.64 489.62 T
1 11 Q
( class. Y) 263.64 489.62 T
(ou can use) 301.13 489.62 T
4 10 Q
(all-superclasses) 355.37 489.62 T
1 11 Q
( to \336nd) 451.37 489.62 T
(all the super) 126.65 475.62 T
(classes of a class.) 186.63 475.62 T
2 F
(supertype) 99.65 449.62 T
1 F
(The supertypes of a type include all the types fr) 126.65 431.62 T
(om which the type inherits,) 357.86 431.62 T
(dir) 126.65 417.62 T
(ectly or indir) 140.72 417.62 T
(ectly) 203.3 417.62 T
(.) 225.13 417.62 T
2 F
(symbol) 99.65 391.62 T
1 F
(An instance of the) 126.65 373.62 T
4 10 Q
(<symbol>) 217.44 373.62 T
1 11 Q
( type. Symbols ar) 265.44 373.62 T
(e much like strings. Ther) 349.23 373.62 T
(e ar) 469.21 373.62 T
(e) 486.87 373.62 T
(two r) 126.65 359.62 T
(easons to use symbols in certain cases wher) 152.31 359.62 T
(e you might consider) 363.43 359.62 T
(strings. First, symbol comparison is not case sensitive. Second, comparison) 126.65 345.62 T
(of two symbols is much faster than is comparison of two strings, because) 126.65 331.62 T
(symbols ar) 126.65 317.62 T
(e compar) 179.49 317.62 T
(ed by identity) 224.37 317.62 T
(, and strings ar) 290.92 317.62 T
(e usually compar) 363.17 317.62 T
(ed ele-) 446.75 317.62 T
(ment by element., Ther) 126.65 303.62 T
(e ar) 238.84 303.62 T
(e two equivalent syntaxes for r) 256.5 303.62 T
(eferring to sym-) 405.76 303.62 T
(bols:) 126.65 289.62 T
4 10 Q
(north:) 152.1 289.62 T
1 11 Q
( is an example of the keywor) 188.1 289.62 T
(d syntax, wher) 327.36 289.62 T
(eas) 399.27 289.62 T
4 10 Q
(#"north") 417.45 289.62 T
1 11 Q
( is an) 465.45 289.62 T
(example of the hash syntax.) 126.65 275.62 T
4 10 Q
(#t) 99.65 249.62 T
1 11 Q
-0.1 (The canonical value of tr) 126.65 231.62 P
-0.1 (ue. Note that any value other than) 245.96 231.62 P
4 10 Q
-0.22 (#f) 414.56 231.62 P
1 11 Q
-0.1 ( is consider) 426.56 231.62 P
-0.1 (ed) 481.01 231.62 P
(a value of tr) 126.65 217.62 T
(ue.) 184.73 217.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "403" 417
%%Page: "404" 418
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(404) 63.65 702.62 T
0 F
(Glossary) 87.4 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 513.65 672.95 R
V
2 11 Q
0 X
(type) 99.65 665.62 T
1 F
(An object that describes the str) 126.65 647.62 T
(uctur) 275.7 647.62 T
(e and behavior of its members. All) 301.58 647.62 T
(classes ar) 126.65 633.62 T
(e types, but not all types ar) 171.89 633.62 T
(e classes. Y) 302.75 633.62 T
(ou can de\336ne new nonclass) 355.44 633.62 T
(types with) 126.65 619.62 T
4 10 Q
(limited) 180.76 619.62 T
1 11 Q
(,) 222.76 619.62 T
4 10 Q
(singleton) 228.26 619.62 T
1 11 Q
(, and) 282.26 619.62 T
4 10 Q
(type-union) 309.13 619.62 T
1 11 Q
(.) 369.13 619.62 T
2 F
(type constraint) 99.65 593.62 T
1 F
(A type associated with a binding or slot that ensur) 126.65 575.62 T
(es that the value of that) 371.52 575.62 T
(binding or slot can hold only objects of that type.) 126.65 561.62 T
2 F
(union type) 99.65 535.62 T
1 F
(A type whose members include all the members of one or mor) 126.65 517.62 T
(e base types.) 429.7 517.62 T
(Union types ar) 126.65 503.62 T
(e cr) 198.61 503.62 T
(eated via) 215.66 503.62 T
4 10 Q
(type-union) 262.42 503.62 T
1 11 Q
(.) 322.42 503.62 T
2 F
(user) 99.65 477.62 T
(-de\336ned class) 120.83 477.62 T
1 F
(A class de\336ned by a Dylan user) 126.65 459.62 T
(, and not pr) 279.18 459.62 T
(ovided by Dylan itself.) 335.56 459.62 T
2 F
(virtual slot) 99.65 433.62 T
1 F
(A slot that does not occupy storage; instead, its value is computed. When) 126.65 415.62 T
(you de\336ne a virtual slot, you need to de\336ne a getter method to r) 126.65 401.62 T
(eturn the) 437.29 401.62 T
-0.28 (value of the virtual slot, and you can optionally de\336ne a setter method to set) 126.65 387.62 P
(the value of the virtual slot.) 126.65 373.62 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "404" 418
%%Page: "405" 419
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 150.95 270.65 510.95 R
7 X
0 0 0 1 0 0 0 K
V
99.65 105.95 531.65 141.95 R
V
2 9.5 Q
0 X
(405) 280.52 124.62 T
306.65 150.95 477.65 510.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 510.95 R
V
2 11 Q
0 X
(Symbols) 99.65 503.62 T
10 8.5 Q
(!) 99.65 491.95 T
1 9 Q
(155) 109.25 491.95 T
10 8.5 Q
(-) 99.65 481.95 T
1 9 Q
(12, 54, 165) 109.25 481.95 T
10 8.5 Q
(#all-keys) 99.65 471.95 T
1 9 Q
(175, 176, 178, 179) 150.05 471.95 T
10 8.5 Q
(#f) 99.65 461.95 T
1 9 Q
(13) 114.35 461.95 T
10 8.5 Q
(#key) 99.65 451.95 T
1 9 Q
(173, 175, 176, 179) 124.55 451.95 T
10 8.5 Q
(#rest) 99.65 441.95 T
1 9 Q
(173, 175, 176, 177) 129.65 441.95 T
10 8.5 Q
(#t) 99.65 431.95 T
1 9 Q
(13) 114.35 431.95 T
10 8.5 Q
(&) 99.65 421.95 T
1 9 Q
(155, 165, 166) 109.25 421.95 T
10 8.5 Q
(*) 99.65 411.95 T
1 9 Q
(12, 165) 109.25 411.95 T
10 8.5 Q
(+) 99.65 401.95 T
1 9 Q
(11, 165) 109.25 401.95 T
(methods for) 108.65 391.95 T
10 8.5 Q
(+) 159.27 391.95 T
1 9 Q
(75\32079) 168.87 391.95 T
10 8.5 Q
(/) 99.65 381.95 T
1 9 Q
(48, 165) 109.25 381.95 T
10 8.5 Q
(:=) 99.65 371.95 T
1 9 Q
(15, 16, 165, 166) 114.35 371.95 T
10 8.5 Q
(<) 99.65 361.95 T
1 9 Q
(13, 165) 109.25 361.95 T
10 8.5 Q
(<=) 99.65 351.95 T
1 9 Q
(165) 114.35 351.95 T
10 8.5 Q
(<condition>) 99.65 341.95 T
1 9 Q
(343) 160.25 341.95 T
10 8.5 Q
(<error>) 99.65 331.95 T
1 9 Q
(343) 139.85 331.95 T
10 8.5 Q
(<function>) 99.65 321.95 T
1 9 Q
(180) 155.15 321.95 T
10 8.5 Q
(<generic-function>) 99.65 311.95 T
1 9 Q
(180) 195.95 311.95 T
10 8.5 Q
(<method>) 99.65 301.95 T
1 9 Q
(180) 144.95 301.95 T
10 8.5 Q
(<object>) 99.65 291.95 T
1 9 Q
(31) 144.95 291.95 T
10 8.5 Q
(<restart>) 99.65 281.95 T
1 9 Q
(350) 150.05 281.95 T
10 8.5 Q
(<simple-error>) 99.65 271.95 T
1 9 Q
(344) 175.55 271.95 T
10 8.5 Q
(<simple-object-vector>) 99.65 261.95 T
1 9 Q
(141) 216.35 261.95 T
10 8.5 Q
(<sorted-sequence>) 99.65 251.95 T
1 9 Q
(245) 190.85 251.95 T
10 8.5 Q
(<stretchy-vector>) 99.65 241.95 T
1 9 Q
(141) 190.85 241.95 T
10 8.5 Q
(=) 99.65 231.95 T
1 9 Q
(35, 126, 165) 109.25 231.95 T
(methods for) 108.65 221.95 T
(81) 161.52 221.95 T
10 8.5 Q
(==) 99.65 211.95 T
1 9 Q
(35, 165) 114.35 211.95 T
10 8.5 Q
(>) 99.65 201.95 T
1 9 Q
(165) 109.25 201.95 T
10 8.5 Q
(>=) 99.65 191.95 T
1 9 Q
(165) 114.35 191.95 T
10 8.5 Q
(\134) 99.65 181.95 T
1 9 Q
(165) 109.25 181.95 T
(for quotation of infix functions) 108.65 171.95 T
(76) 235.34 171.95 T
(methods for) 108.65 161.95 T
(81) 161.52 161.95 T
10 8.5 Q
(^) 306.65 504.95 T
1 9 Q
(165) 316.25 504.95 T
10 8.5 Q
(|) 306.65 494.95 T
1 9 Q
(165, 166) 316.25 494.95 T
10 8.5 Q
(~) 306.65 484.95 T
1 9 Q
(165) 316.25 484.95 T
10 8.5 Q
(~=) 306.65 474.95 T
1 9 Q
(165) 321.35 474.95 T
10 8.5 Q
(~==) 306.65 464.95 T
1 9 Q
(165) 326.45 464.95 T
2 11 Q
(A) 306.65 443.62 T
10 8.5 Q
(abs) 306.65 431.95 T
1 9 Q
(56) 326.45 431.95 T
(abstract classes) 306.65 421.95 T
(95) 371.48 421.95 T
(airport application) 306.65 411.95 T
(255\320283) 385.64 411.95 T
(design) 315.65 401.95 T
(237\320243) 346.64 401.95 T
(goals) 315.65 391.95 T
(237) 341 391.95 T
10 8.5 Q
(#all-keys) 306.65 381.95 T
1 9 Q
(175, 176, 178, 179) 357.05 381.95 T
(allocation of slots) 306.65 371.95 T
(127) 380.51 371.95 T
10 8.5 Q
(all-superclasses) 306.65 361.95 T
1 9 Q
(32, 300) 392.75 361.95 T
(ambiguous methods) 306.65 351.95 T
(79, 303) 392.69 351.95 T
1 7.2 Q
(AND) 306.65 341.95 T
1 9 Q
( logical operation) 323.8 341.95 T
(155, 165) 397.47 341.95 T
(Apple Computer, Inc.) 306.65 331.95 T
(377) 398.04 331.95 T
(applicable methods) 306.65 321.95 T
(63, 178) 389.02 321.95 T
10 8.5 Q
(apply) 306.65 311.95 T
1 9 Q
(182) 336.65 311.95 T
10 8.5 Q
(aref) 306.65 301.95 T
1 9 Q
(158, 164) 331.55 301.95 T
10 8.5 Q
(aref-setter) 306.65 291.95 T
1 9 Q
(167) 367.25 291.95 T
(arguments) 306.65 281.95 T
(168) 353.88 281.95 T
(keywords) 315.65 271.95 T
(178) 359.76 271.95 T
(arithmetic operations) 306.65 261.95 T
(12, 165) 396.26 261.95 T
(spaces needed) 315.65 251.95 T
(12) 377.42 251.95 T
(arrays) 306.65 241.95 T
(indices) 315.65 231.95 T
(164) 348.25 231.95 T
(assignment operator) 306.65 221.95 T
(16, 165, 166) 392.91 221.95 T
(automatic storage-management) 306.65 211.95 T
(44, 332) 437.13 211.95 T
(auxiliary macros) 306.65 201.95 T
(371) 377.61 201.95 T
2 11 Q
(B) 306.65 180.62 T
1 9 Q
(backslash) 306.65 168.95 T
(for quotation of infix functions) 315.65 158.95 T
(76) 442.34 158.95 T
98.82 587.95 296.82 645.95 R
7 X
V
98.82 618.4 296.82 645.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
98.82 618.4 296.82 645.95 R
7 X
0 0 0 1 0 0 0 K
V
98.82 639.1 260.82 639.1 2 L
3 H
2 Z
0 X
N
98.82 630.1 260.82 630.1 2 L
1 H
N
27.65 96.95 567.65 744.95 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Index) 98.82 598.4 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "405" 419
%%Page: "406" 420
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(406) 63.65 702.62 T
0 9 Q
(Index) 86.9 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 279.65 672.95 R
V
1 F
0 X
(bare methods) 117.65 666.95 T
(319) 176.4 666.95 T
(Beard, Patrick) 117.65 656.95 T
(378) 178.06 656.95 T
(Benson, Brent) 117.65 646.95 T
(378) 177.2 646.95 T
(binary operators) 117.65 636.95 T
(165) 188.2 636.95 T
(bindings) 117.65 626.95 T
(36, 121, 184) 157.16 626.95 T
(parameters) 126.65 616.95 T
(169) 175.99 616.95 T
10 8.5 Q
(block) 117.65 606.95 T
1 9 Q
(158, 356) 147.65 606.95 T
10 8.5 Q
(cleanup) 126.65 596.95 T
1 9 Q
( clause) 162.35 596.95 T
(357) 193.77 596.95 T
10 8.5 Q
(exception) 126.65 586.95 T
1 9 Q
( clause) 172.55 586.95 T
(346, 348) 203.97 586.95 T
(body) 117.65 576.95 T
(18, 168) 142.54 576.95 T
(defined by) 126.65 566.95 T
10 8.5 Q
(begin) 171.6 566.95 T
1 9 Q
( and) 197.1 566.95 T
10 8.5 Q
(end) 216.84 566.95 T
1 9 Q
(18) 236.64 566.95 T
(within a) 126.65 556.95 T
10 8.5 Q
(define method) 161.8 556.95 T
1 9 Q
(48) 232.6 556.95 T
10 8.5 Q
(break) 117.65 546.95 T
1 9 Q
(356) 147.65 546.95 T
2 11 Q
(C) 117.65 525.62 T
1 9 Q
(C and C++ comparisons) 117.65 513.95 T
(arrays) 126.65 503.95 T
(171) 156.08 503.95 T
(class concepts) 126.65 493.95 T
(31) 186.76 493.95 T
(compiler optimizations for method) 126.65 483.95 T
(dispatch) 144.65 473.95 T
(326) 183.16 473.95 T
(definition of methods on built-in) 126.65 463.95 T
(classes) 144.65 453.95 T
(33) 176.02 453.95 T
(division functions) 126.65 443.95 T
(48) 202.99 443.95 T
(Dylan library files and C header) 126.65 433.95 T
(files) 144.65 423.95 T
(22) 165.51 423.95 T
-0.08 (Dylan LID files and) 126.65 413.95 P
10 8.5 Q
-0.17 (makefile) 206.76 413.95 P
1 9 Q
-0.08 ( in C) 247.56 413.95 P
-0.08 (22) 270.65 413.95 P
(Dylan program files and) 126.65 403.95 T
10 8.5 Q
(.c) 226.46 403.95 T
1 9 Q
( files in) 236.66 403.95 T
(C) 144.65 393.95 T
(22) 155.53 393.95 T
(elements of programs) 126.65 383.95 T
(22) 217.75 383.95 T
10 8.5 Q
(format-out) 126.65 373.95 T
1 9 Q
( and) 177.65 373.95 T
10 8.5 Q
(printf) 197.38 373.95 T
1 9 Q
(20) 232.49 373.95 T
10 8.5 Q
(if) 126.65 363.95 T
1 9 Q
(51) 141.35 363.95 T
(library definition versus header and) 126.65 353.95 T
(includes) 144.65 343.95 T
(203) 182.67 343.95 T
(library-use relationships versus C++) 126.65 333.95 T
(namespaces) 144.65 323.95 T
(216) 196.99 323.95 T
(limited collection types and template) 126.65 313.95 T
(classes) 144.65 303.95 T
(317) 176.02 303.95 T
(macros) 126.65 293.95 T
(360, 364, 365, 367, 370) 159.88 293.95 T
(modules and) 126.65 283.95 T
10 8.5 Q
(private:) 180.92 283.95 T
1 9 Q
(,) 221.72 283.95 T
10 8.5 Q
(public:) 226.22 283.95 T
1 9 Q
(,) 261.92 283.95 T
10 8.5 Q
(protected:) 144.65 273.95 T
1 9 Q
(201) 200.15 273.95 T
(multimethods) 126.65 263.95 T
(79) 187.35 263.95 T
(multiple inheritance) 126.65 253.95 T
(304) 211.84 253.95 T
(multiple inheritance and slots) 126.65 243.95 T
(292) 249.68 243.95 T
(namespace of setters and getters) 126.65 233.95 T
(123) 259.87 233.95 T
(operator overloading) 126.65 223.95 T
(76) 215.75 223.95 T
(parameters) 126.65 213.95 T
(171) 175.99 213.95 T
(partial evaluation as inlining and con-) 126.65 203.95 T
(stant folding) 144.65 193.95 T
(334) 199.71 193.95 T
(pointers) 126.65 183.95 T
(86, 171) 163.94 183.95 T
(primary classes) 126.65 173.95 T
(331) 192.86 173.95 T
(references) 126.65 163.95 T
(171) 171.55 163.95 T
(relationship between classes and) 126.65 153.95 T
324.65 150.95 495.65 672.95 R
7 X
V
0 X
(methods) 351.65 666.95 T
(33) 390.81 666.95 T
(representation of data types) 333.65 656.95 T
(317) 449.36 656.95 T
(representation of primitive values) 333.65 646.95 T
(34) 473.31 646.95 T
(true and false values) 333.65 636.95 T
(13) 420.36 636.95 T
(type inference) 333.65 626.95 T
(312) 394.63 626.95 T
(uninitialized slots) 333.65 616.95 T
(329) 409.24 616.95 T
(virtual base classes) 333.65 606.95 T
(328) 413.86 606.95 T
(call-site caching) 324.65 596.95 T
(332) 392.4 596.95 T
(Carnegie Mellon University) 324.65 586.95 T
(376) 439.96 586.95 T
10 8.5 Q
(case) 324.65 576.95 T
1 9 Q
(156) 349.55 576.95 T
(case insensitivity) 324.65 566.95 T
(14) 396.87 566.95 T
10 8.5 Q
(ceiling) 324.65 556.95 T
1 9 Q
(48) 364.85 556.95 T
10 8.5 Q
(ceiling/) 324.65 546.95 T
1 9 Q
(48) 369.95 546.95 T
10 8.5 Q
(cerror) 324.65 536.95 T
1 9 Q
(356) 359.75 536.95 T
(class inheritance) 324.65 526.95 T
(53\32074) 394.7 526.95 T
(class precedence list) 324.65 516.95 T
(294) 409.32 516.95 T
10 8.5 Q
(class) 324.65 506.95 T
1 9 Q
( slot allocation) 350.15 506.95 T
(127) 412.28 506.95 T
(classes) 324.65 496.95 T
(abstract and concrete) 333.65 486.95 T
(95) 422.35 486.95 T
(comparison of Dylan and C++) 333.65 476.95 T
(386) 458.82 476.95 T
(inheritance) 333.65 466.95 T
(30) 382.71 466.95 T
(instantiable) 333.65 456.95 T
(95) 384.45 456.95 T
(naming convention) 333.65 446.95 T
(17) 415.43 446.95 T
(open or sealed) 333.65 436.95 T
(323) 396.05 436.95 T
(relationship to methods) 333.65 426.95 T
(33) 432.93 426.95 T
(user-defined) 333.65 416.95 T
(40) 388.73 416.95 T
10 8.5 Q
(cleanup) 324.65 406.95 T
1 9 Q
( clause of) 360.35 406.95 T
10 8.5 Q
(block) 399.68 406.95 T
1 9 Q
(357) 429.68 406.95 T
(client modules) 324.65 396.95 T
(196) 387.65 396.95 T
(CLOS) 324.65 386.95 T
(332) 352.83 386.95 T
(closures) 324.65 376.95 T
(183, 184) 361.6 376.95 T
(collections) 324.65 366.95 T
(137\320160) 371.12 366.95 T
(definition of a new collection) 333.65 356.95 T
(245\320253) 453.76 356.95 T
(element-reference syntax) 333.65 346.95 T
(164) 437.79 346.95 T
(limited) 333.65 336.95 T
(115) 366.7 336.95 T
(coloring algorithm for optimization of slot) 324.65 326.95 T
(accessors) 360.65 316.95 T
(328) 401.87 316.95 T
(comments) 324.65 306.95 T
(40) 370.25 306.95 T
(comparison operations) 324.65 296.95 T
(165) 420.52 296.95 T
10 8.5 Q
(complement) 324.65 286.95 T
1 9 Q
(183) 380.15 286.95 T
(concrete classes) 324.65 276.95 T
(95) 391.53 276.95 T
10 8.5 Q
(<condition>) 324.65 266.95 T
1 9 Q
(343) 385.25 266.95 T
(conditions) 324.65 256.95 T
(343) 370.93 256.95 T
(handlers) 333.65 246.95 T
(345) 372.92 246.95 T
(signal of) 333.65 236.95 T
(343) 372.11 236.95 T
(congruence) 324.65 226.95 T
(parameter lists) 333.65 216.95 T
(176) 397.22 216.95 T
(value declarations) 333.65 206.95 T
(177) 410.84 206.95 T
(constant slots) 324.65 196.95 T
(329) 383.07 196.95 T
(constants) 324.65 186.95 T
(module constants) 333.65 176.95 T
(17) 408.5 176.95 T
(naming convention) 333.65 166.95 T
(17) 415.43 166.95 T
(constructors) 324.65 156.95 T
(140) 378.24 156.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "406" 420
%%Page: "407" 421
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Index) 486.26 702.62 T
2 F
(407) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
V
1 9 Q
0 X
(contract) 99.65 666.95 T
(67) 136.21 666.95 T
(control-flow functions) 99.65 656.95 T
(137\320160) 192.78 656.95 T
10 8.5 Q
(copy-sequence) 99.65 646.95 T
1 9 Q
(139, 142, 149) 170.45 646.95 T
10 8.5 Q
-0.44 (create) 99.65 636.95 P
1 9 Q
-0.2 ( clause of) 130.25 636.95 P
10 8.5 Q
-0.44 (define module) 168.99 636.95 P
1 9 Q
-0.2 (198, 200) 239.34 636.95 P
10 8.5 Q
(curry) 99.65 626.95 T
1 9 Q
(148, 183) 129.65 626.95 T
2 11 Q
(D) 99.65 605.62 T
10 8.5 Q
(define class) 99.65 593.95 T
1 9 Q
(41, 180, 181, 323) 165.35 593.95 T
10 8.5 Q
(define constant) 99.65 583.95 T
1 9 Q
(17, 172) 180.65 583.95 T
10 8.5 Q
(define generic) 99.65 573.95 T
1 9 Q
(67, 180, 322) 175.55 573.95 T
10 8.5 Q
(define macro) 99.65 563.95 T
1 9 Q
(361) 165.35 563.95 T
10 8.5 Q
(define method) 99.65 553.95 T
1 9 Q
(27, 45, 180, 181, 325) 170.45 553.95 T
10 8.5 Q
(define module) 99.65 543.95 T
1 9 Q
(198) 170.45 543.95 T
10 8.5 Q
(define sealed domain) 99.65 533.95 T
1 9 Q
(324) 206.15 533.95 T
10 8.5 Q
(define variable) 99.65 523.95 T
1 9 Q
(14, 172) 180.65 523.95 T
(defining macros) 99.65 513.95 T
(368) 168.65 513.95 T
(definitions) 99.65 503.95 T
(189) 146.95 503.95 T
(delivery of applications) 99.65 493.95 T
(9) 198.13 493.95 T
(design of the airport application) 99.65 483.95 T
(237\320243) 232.27 483.95 T
(development environments) 99.65 473.95 T
(11) 214.18 473.95 T
(Digitool, Inc.) 99.65 463.95 T
(378) 155.75 463.95 T
(direct instances) 99.65 453.95 T
(59) 165.78 453.95 T
(direct methods) 99.65 443.95 T
(319) 163.97 443.95 T
(direct subclasses) 99.65 433.95 T
(59) 170.41 433.95 T
(direct superclasses) 99.65 423.95 T
(59) 178.7 423.95 T
(division functions) 99.65 413.95 T
(48) 175.99 413.95 T
10 8.5 Q
(do) 99.65 403.95 T
1 9 Q
(146) 114.35 403.95 T
10 8.5 Q
(do-handlers) 99.65 393.95 T
1 9 Q
(351) 160.25 393.95 T
(domains) 99.65 383.95 T
(324) 138.68 383.95 T
(dot syntax) 99.65 373.95 T
(117) 145.88 373.95 T
(Dylan) 99.65 363.95 T
(implementations) 108.65 353.95 T
(375\320379) 180.5 353.95 T
(introduction) 108.65 343.95 T
(3\32010) 163.04 343.95 T
10 8.5 Q
(dylan) 99.65 333.95 T
1 9 Q
( library) 125.15 333.95 T
(23, 188) 158.73 333.95 T
10 8.5 Q
(dylan) 99.65 323.95 T
1 9 Q
( module) 125.15 323.95 T
(23, 205) 162.62 323.95 T
0 F
(Dylan Refer) 99.65 313.95 T
(ence Manual, The) 143.75 313.95 T
1 F
(xi) 213.16 313.95 T
10 8.5 Q
(dylan-user) 99.65 303.95 T
1 9 Q
( module) 150.65 303.95 T
(23, 188, 192, 205) 188.12 303.95 T
(dynamic aspects of Dylan) 99.65 293.95 T
(compilation of portions of a program) 108.65 283.95 T
(58) 260.71 283.95 T
(dynamic scope) 99.65 273.95 T
(346) 163.65 273.95 T
2 11 Q
(E) 99.65 252.62 T
10 8.5 Q
(each-subclass) 99.65 240.95 T
1 9 Q
( slot allocation) 165.95 240.95 T
(128) 228.08 240.95 T
(efficiency model) 99.65 230.95 T
(310) 169.78 230.95 T
10 8.5 Q
(element) 99.65 220.95 T
1 9 Q
(139, 159, 164) 139.85 220.95 T
(element references) 99.65 210.95 T
(164) 178.47 210.95 T
10 8.5 Q
(element-setter) 99.65 200.95 T
1 9 Q
(167) 175.55 200.95 T
(enumerations) 99.65 190.95 T
(318) 158.96 190.95 T
(equality predicates) 99.65 180.95 T
(35) 179.8 180.95 T
10 8.5 Q
(<error>) 99.65 170.95 T
1 9 Q
(343) 139.85 170.95 T
10 8.5 Q
(error) 99.65 160.95 T
1 9 Q
(344) 129.65 160.95 T
(errors) 306.65 666.95 T
(no applicable method) 315.65 656.95 T
(55) 406.6 656.95 T
(evaluation) 306.65 646.95 T
(order of) 315.65 636.95 T
(162) 352.14 636.95 T
10 8.5 Q
(even?) 306.65 626.95 T
1 9 Q
(14) 336.65 626.95 T
(examples) 306.65 616.95 T
(airport application) 315.65 606.95 T
(255\320283) 394.64 606.95 T
(available on World Wide Web) 315.65 596.95 T
(375) 440.33 596.95 T
(complete libraries for) 315.65 586.95 T
10 8.5 Q
(say) 402.88 586.95 T
1 9 Q
(,) 418.18 586.95 T
10 8.5 Q
(time) 422.68 586.95 T
1 9 Q
(,) 443.08 586.95 T
10 8.5 Q
(angle) 447.58 586.95 T
1 9 Q
(,) 473.08 586.95 T
(and) 333.65 576.95 T
10 8.5 Q
(sixty-unit) 351.14 576.95 T
1 9 Q
(221\320234) 406.64 576.95 T
(Hello, world) 315.65 566.95 T
(20\32024) 370.69 566.95 T
(simple, complete library) 315.65 556.95 T
(99\320106) 416.89 556.95 T
(user-defined collection type) 315.65 546.95 T
(245\320253) 431.05 546.95 T
10 8.5 Q
(exception) 306.65 536.95 T
1 9 Q
( clause of) 352.55 536.95 T
10 8.5 Q
(block) 391.88 536.95 T
1 9 Q
(346, 348) 421.88 536.95 T
(exceptions) 306.65 526.95 T
(339\320358) 353.34 526.95 T
(condition handlers) 315.65 516.95 T
(345) 395.14 516.95 T
(informal protocol) 315.65 506.95 T
(339) 390.04 506.95 T
(signal of conditions) 315.65 496.95 T
(343) 398.14 496.95 T
(use of) 315.65 486.95 T
10 8.5 Q
(block) 341.61 486.95 T
1 9 Q
( for protected) 367.11 486.95 T
(operations) 333.65 476.95 T
(356) 380.36 476.95 T
(execution model) 306.65 466.95 T
(309) 377.08 466.95 T
(explicit function calls) 306.65 456.95 T
(162) 395.71 456.95 T
(export of modules by libraries) 306.65 446.95 T
(191) 430.91 446.95 T
(export of names by modules) 306.65 436.95 T
(190) 424.15 436.95 T
2 11 Q
(F) 306.65 415.62 T
10 8.5 Q
(#f) 306.65 403.95 T
1 9 Q
(13) 321.35 403.95 T
(false value) 306.65 393.95 T
(13) 353.58 393.95 T
10 8.5 Q
(find-key) 306.65 383.95 T
1 9 Q
(159) 351.95 383.95 T
(flexibility) 306.65 373.95 T
(and performance) 315.65 363.95 T
(309\320336) 388.37 363.95 T
10 8.5 Q
(floor) 306.65 353.95 T
1 9 Q
(48) 336.65 353.95 T
10 8.5 Q
(floor/) 306.65 343.95 T
1 9 Q
(48) 341.75 343.95 T
10 8.5 Q
(for) 306.65 333.95 T
1 9 Q
(143, 158) 326.45 333.95 T
10 8.5 Q
(format-out) 306.65 323.95 T
1 9 Q
(19) 362.15 323.95 T
(unsupported in Apple Technology) 315.65 313.95 T
(Release) 333.65 303.95 T
(20) 368.03 303.95 T
(forward-iteration protocol) 306.65 293.95 T
(245, 250\320252) 415.8 293.95 T
10 8.5 Q
(<function>) 306.65 283.95 T
1 9 Q
(180) 362.15 283.95 T
(function macros) 306.65 273.95 T
(361) 375.49 273.95 T
(function-call protocol) 306.65 263.95 T
(167) 396.75 263.95 T
(function-call syntax) 306.65 253.95 T
(13, 162) 389.63 253.95 T
(binary operator calls) 315.65 243.95 T
(165) 402.18 243.95 T
(element references) 315.65 233.95 T
(164) 394.47 233.95 T
(explicit function calls) 315.65 223.95 T
(162) 404.71 223.95 T
(slot references) 315.65 213.95 T
(163) 377.08 213.95 T
(unary operator calls) 315.65 203.95 T
(165) 400.01 203.95 T
(functions) 306.65 193.95 T
(161\320185) 348.33 193.95 T
(application) 315.65 183.95 T
(182) 364.9 183.95 T
(closures) 315.65 173.95 T
(183, 184) 352.6 173.95 T
(operations on) 315.65 163.95 T
(183) 374.76 163.95 T
(types) 315.65 153.95 T
(180) 341.62 153.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "407" 421
%%Page: "408" 422
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(408) 63.65 702.62 T
0 9 Q
(Index) 86.9 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 279.65 672.95 R
V
2 11 Q
0 X
(G) 117.65 665.62 T
1 9 Q
(garbage collection) 117.65 653.95 T
(44) 194.41 653.95 T
(performance) 126.65 643.95 T
(332) 181.88 643.95 T
10 8.5 Q
(<generic function>) 117.65 633.95 T
1 9 Q
(180) 213.95 633.95 T
(generic functions) 117.65 623.95 T
(contract of) 126.65 613.95 T
(67) 173.38 613.95 T
(creation) 126.65 603.95 T
(180) 163.21 603.95 T
10 8.5 Q
(define generic) 126.65 593.95 T
1 9 Q
(67) 202.55 593.95 T
(implicit definition) 126.65 583.95 T
(181, 321, 323) 203.15 583.95 T
(introduction) 126.65 573.95 T
(29, 67) 181.04 573.95 T
(open or sealed) 126.65 563.95 T
(322) 189.04 563.95 T
(signatures) 126.65 553.95 T
(150) 172.37 553.95 T
(typed parameters) 126.65 543.95 T
(320) 201.39 543.95 T
(getters) 117.65 533.95 T
(42, 118) 149.01 533.95 T
(naming considerations) 126.65 523.95 T
(121) 221.91 523.95 T
(performance) 126.65 513.95 T
(118, 328) 181.88 513.95 T
(slot-reference syntax) 126.65 503.95 T
(163) 213.4 503.95 T
(graph) 117.65 493.95 T
(294) 145.85 493.95 T
(Gwydion) 117.65 483.95 T
(376) 159.79 483.95 T
2 11 Q
(H) 117.65 462.62 T
1 9 Q
(handlers) 117.65 450.95 T
(345) 156.92 450.95 T
(Harlequin) 117.65 440.95 T
(376) 162.95 440.95 T
(has-a relationship) 117.65 430.95 T
(93) 193.22 430.95 T
10 8.5 Q
(head) 117.65 420.95 T
1 9 Q
(141) 142.55 420.95 T
2 11 Q
(I) 117.65 399.62 T
10 8.5 Q
(identity) 117.65 387.95 T
1 9 Q
(148) 162.95 387.95 T
10 8.5 Q
(if) 117.65 377.95 T
1 9 Q
(154) 132.35 377.95 T
(immutable objects) 117.65 367.95 T
(170) 194.73 367.95 T
(implementation modules) 117.65 357.95 T
(196, 198) 222.47 357.95 T
(import of modules by libraries) 117.65 347.95 T
(191) 243.52 347.95 T
(import of names from other) 117.65 337.95 T
(modules) 153.65 327.95 T
(190) 192.68 327.95 T
10 8.5 Q
(import:) 117.65 317.95 T
1 9 Q
( clause of) 153.35 317.95 T
10 8.5 Q
(define module) 192.68 317.95 T
(export:) 126.65 307.95 T
1 9 Q
( option) 162.35 307.95 T
(211) 195.13 307.95 T
(indirect instances) 117.65 297.95 T
(60) 191.64 297.95 T
(infix functions) 117.65 287.95 T
(backslash for quotation of) 126.65 277.95 T
(76) 234.26 277.95 T
(infix syntax) 117.65 267.95 T
(13) 168.65 267.95 T
(information hiding) 117.65 257.95 T
(187) 198.09 257.95 T
(inheritance) 117.65 247.95 T
(30) 166.71 247.95 T
(multiple) 126.65 237.95 T
(287\320308) 165.03 237.95 T
(single) 126.65 227.95 T
(287) 154.76 227.95 T
(slots) 126.65 217.95 T
(58) 149.25 217.95 T
10 8.5 Q
(inherited slot) 117.65 207.95 T
1 9 Q
( specification) 189.05 207.95 T
(125, 292) 245.77 207.95 T
(init expressions) 117.65 197.95 T
(126) 184.26 197.95 T
(init keywords) 117.65 187.95 T
(43) 177.42 187.95 T
10 8.5 Q
(init-function:) 117.65 177.95 T
1 9 Q
( slot option) 189.05 177.95 T
(126) 238.36 177.95 T
(initialization of slots) 117.65 167.95 T
(124, 133) 203.13 167.95 T
10 8.5 Q
(initialize) 117.65 157.95 T
1 9 Q
( methods) 168.65 157.95 T
(123, 132) 210.06 157.95 T
324.65 150.95 495.65 672.95 R
7 X
V
10 8.5 Q
0 X
(init-value:) 324.65 666.95 T
1 9 Q
( slot option) 380.75 666.95 T
(124) 430.06 666.95 T
(inlining) 324.65 656.95 T
(333) 360.34 656.95 T
10 8.5 Q
(instance) 324.65 646.95 T
1 9 Q
( slot allocation) 365.45 646.95 T
(127) 427.58 646.95 T
10 8.5 Q
(instance?) 324.65 636.95 T
1 9 Q
(31) 375.05 636.95 T
(instances) 324.65 626.95 T
(60) 365.62 626.95 T
(creation) 333.65 616.95 T
(41) 370.21 616.95 T
(initialization of slots) 333.65 606.95 T
(42) 419.13 606.95 T
(introduction) 333.65 596.95 T
(30) 388.04 596.95 T
(instantiable classes) 324.65 586.95 T
(95) 404.58 586.95 T
(integers) 324.65 576.95 T
(limited) 333.65 566.95 T
(114) 366.7 566.95 T
(interchange format) 324.65 556.95 T
(21, 194, 195, 203) 405.19 556.95 T
(interface modules) 324.65 546.95 T
(196, 198) 400.39 546.95 T
(Internet resources for Dylan) 324.65 536.95 T
(375\320379) 440.95 536.95 T
(is-a relationship) 324.65 526.95 T
(93) 393.1 526.95 T
2 11 Q
(J) 324.65 505.62 T
1 9 Q
(Java comparisons) 324.65 493.95 T
(automatic storage-management) 333.65 483.95 T
(45) 464.13 483.95 T
(multimethods) 333.65 473.95 T
(79) 394.35 473.95 T
(multiple inheritance and interfaces) 333.65 463.95 T
(304) 476.86 463.95 T
(operator overloading) 333.65 453.95 T
(76) 422.75 453.95 T
(pointers) 333.65 443.95 T
(87) 370.94 443.95 T
(representation of data types) 333.65 433.95 T
(318) 449.36 433.95 T
(representation of primitive values) 333.65 423.95 T
(35) 473.31 423.95 T
(safety versus performance trade-off) 333.65 413.95 T
(314) 479.91 413.95 T
(true and false values) 333.65 403.95 T
(13) 420.36 403.95 T
2 11 Q
(K) 324.65 382.62 T
10 8.5 Q
(#key) 324.65 370.95 T
1 9 Q
(173, 175, 176, 179) 349.55 370.95 T
(keyword arguments) 324.65 360.95 T
(178) 409.92 360.95 T
(keyword parameters) 324.65 350.95 T
(43, 173, 174, 178) 412.03 350.95 T
(keywords) 324.65 340.95 T
(namespace of) 333.65 330.95 T
(201) 392.34 330.95 T
2 11 Q
(L) 324.65 309.62 T
1 9 Q
(least specific) 324.65 297.95 T
(294) 379.34 297.95 T
10 8.5 Q
(let) 324.65 287.95 T
1 9 Q
(18, 48, 172) 344.45 287.95 T
10 8.5 Q
(let handler) 324.65 277.95 T
1 9 Q
(349, 352) 385.25 277.95 T
(lexical scoping) 324.65 267.95 T
(18, 184) 387.7 267.95 T
(libraries) 324.65 257.95 T
(187\320218) 361.72 257.95 T
(and programs) 333.65 247.95 T
(195) 394.33 247.95 T
(export, import, and use of modules) 333.65 237.95 T
(191) 478.28 237.95 T
(library-interchange definition \050LID\051) 324.65 227.95 T
(files) 360.65 217.95 T
(195, 208) 381.51 217.95 T
10 8.5 Q
(limited) 324.65 207.95 T
1 9 Q
(109, 114, 115) 364.85 207.95 T
(limited types) 324.65 197.95 T
(109) 381.42 197.95 T
(collections) 333.65 187.95 T
(115) 380.12 187.95 T
(integers) 333.65 177.95 T
(114) 369.94 177.95 T
(performance implications) 333.65 167.95 T
(315) 440.36 167.95 T
10 8.5 Q
(list) 324.65 157.95 T
1 9 Q
(141) 349.55 157.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "408" 422
%%Page: "409" 423
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Index) 486.26 702.62 T
2 F
(409) 517.4 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
V
1 9 Q
0 X
(listeners) 99.65 666.95 T
(11) 137.37 666.95 T
(lists) 99.65 656.95 T
(creation and access to elements) 108.65 646.95 T
(141) 237.22 646.95 T
(literal constants) 99.65 636.95 T
(139) 166.94 636.95 T
10 8.5 Q
(local method) 99.65 626.95 T
1 9 Q
(181, 182, 184) 165.35 626.95 T
(local variables) 99.65 616.95 T
(18, 184) 161.03 616.95 T
(initialization of multiple) 108.65 606.95 T
(48) 209.92 606.95 T
(logical operations) 99.65 596.95 T
1 7.2 Q
(AND) 108.65 586.95 T
1 9 Q
(155, 165) 130.3 586.95 T
(negation) 108.65 576.95 T
(165) 147.91 576.95 T
1 7.2 Q
(OR) 108.65 566.95 T
1 9 Q
(155, 165) 123.62 566.95 T
2 11 Q
(M) 99.65 545.62 T
1 9 Q
(macros) 99.65 533.95 T
(359\320373) 132.88 533.95 T
(auxiliary macros) 108.65 523.95 T
(371) 179.61 523.95 T
(auxiliary rules) 108.65 513.95 T
(368) 170.61 513.95 T
(constraints) 108.65 503.95 T
(365, 373) 156.71 503.95 T
(defining macros) 108.65 493.95 T
(368) 177.65 493.95 T
(delay of evaluation of arguments) 108.65 483.95 T
(361,) 244.78 483.95 T
(362) 126.65 473.95 T
(evaluation in) 108.65 463.95 T
(364) 165.4 463.95 T
(function macros) 108.65 453.95 T
(361) 177.49 453.95 T
(hygiene) 108.65 443.95 T
(363, 369) 144.87 443.95 T
(pattern variables) 108.65 433.95 T
(362, 373) 180.26 433.95 T
(patterns) 108.65 423.95 T
(360) 145.85 423.95 T
(rules) 108.65 413.95 T
(360) 132.88 413.95 T
(statement macros) 108.65 403.95 T
(366) 183.05 403.95 T
(templates) 108.65 393.95 T
(360) 151.93 393.95 T
10 8.5 Q
(make) 99.65 383.95 T
1 9 Q
(41, 180) 124.55 383.95 T
(methods) 108.65 373.95 T
(385) 147.81 373.95 T
10 8.5 Q
(map) 99.65 363.95 T
1 9 Q
(147) 119.45 363.95 T
(Marlais) 99.65 353.95 T
(378) 134.27 353.95 T
10 8.5 Q
(max) 99.65 343.95 T
1 9 Q
(14) 119.45 343.95 T
10 8.5 Q
(<method>) 99.65 333.95 T
1 9 Q
(180) 144.95 333.95 T
10 8.5 Q
(method) 99.65 323.95 T
1 9 Q
(127, 148, 181, 182, 184) 134.75 323.95 T
(method dispatch) 99.65 313.95 T
(ambiguous methods) 108.65 303.95 T
(79, 303) 194.69 303.95 T
(classes) 108.65 293.95 T
(112) 140.02 293.95 T
(introduction) 108.65 283.95 T
(63\32066) 163.04 283.95 T
(limited collections) 108.65 273.95 T
(115) 185.92 273.95 T
(limited integers) 108.65 263.95 T
(114) 175.73 263.95 T
(multimethods) 108.65 253.95 T
(79) 169.35 253.95 T
(multiple inheritance) 108.65 243.95 T
(300) 193.84 243.95 T
(nonclass types) 108.65 233.95 T
(111) 171.01 233.95 T
(performance note) 108.65 223.95 T
(66) 183.53 223.95 T
(singletons) 108.65 213.95 T
(113) 153.66 213.95 T
(unions) 108.65 203.95 T
(113) 140.4 203.95 T
(methods) 99.65 193.95 T
(applicable) 108.65 183.95 T
(63, 178) 154.11 183.95 T
(bare) 108.65 173.95 T
(319) 130.49 173.95 T
(creation) 108.65 163.95 T
(181) 145.21 163.95 T
(direct) 108.65 153.95 T
(319) 136.06 153.95 T
(introduction) 315.65 666.95 T
(27) 370.04 666.95 T
(relationship to classes) 315.65 656.95 T
(33) 407.14 656.95 T
(specificity) 315.65 646.95 T
(65) 360.47 646.95 T
10 8.5 Q
(min) 306.65 636.95 T
1 9 Q
(13) 326.45 636.95 T
(Mindy) 306.65 626.95 T
(376) 338.02 626.95 T
(mix-in classes) 306.65 616.95 T
(305) 366.34 616.95 T
(mix-in style of programming) 306.65 606.95 T
(305) 426.25 606.95 T
(modularity) 306.65 596.95 T
(83\32097) 356.17 596.95 T
(module constants) 306.65 586.95 T
(17) 381.5 586.95 T
(module variables) 306.65 576.95 T
(introduction) 315.65 566.95 T
(14) 370.04 566.95 T
(modules) 306.65 556.95 T
(187\320218) 345.68 556.95 T
(and source records) 315.65 546.95 T
(194) 395.55 546.95 T
(client modules) 315.65 536.95 T
(196) 378.65 536.95 T
10 8.5 Q
(create) 315.65 526.95 T
1 9 Q
( clause) 346.25 526.95 T
(198, 200) 377.67 526.95 T
(export and import of names) 315.65 516.95 T
(190) 431.25 516.95 T
(implementation modules) 315.65 506.95 T
(196, 198) 420.47 506.95 T
10 8.5 Q
(import:) 315.65 496.95 T
1 9 Q
( clause) 351.35 496.95 T
10 8.5 Q
(export:) 324.65 486.95 T
1 9 Q
( option) 360.35 486.95 T
(211) 393.13 486.95 T
(interface modules) 315.65 476.95 T
(196, 198) 391.39 476.95 T
(roles) 315.65 466.95 T
(196) 339.36 466.95 T
(most specific) 306.65 456.95 T
(294) 362.77 456.95 T
(multimethods) 306.65 446.95 T
(75\32080) 367.35 446.95 T
(multiple inheritance) 306.65 436.95 T
(287\320308) 391.84 436.95 T
(base and mix-in classes) 315.65 426.95 T
(305) 412.68 426.95 T
(class precedence list) 315.65 416.95 T
(294) 400.32 416.95 T
(decision to use) 315.65 406.95 T
(304) 379.06 406.95 T
(method dispatch) 315.65 396.95 T
(300) 387.25 396.95 T
(pros and cons) 315.65 386.95 T
(308) 375.54 386.95 T
(slots) 315.65 376.95 T
(292) 338.25 376.95 T
(multiple return values) 306.65 366.95 T
(47, 172) 400.31 366.95 T
(mutable objects) 306.65 356.95 T
(169) 373.17 356.95 T
2 11 Q
(N) 306.65 335.62 T
1 9 Q
(namespaces) 306.65 323.95 T
(189) 358.99 323.95 T
(naming conventions) 306.65 313.95 T
(classes) 315.65 303.95 T
(17) 347.02 303.95 T
(constants) 315.65 293.95 T
(17) 357.53 293.95 T
(destructive functions) 315.65 283.95 T
(151) 404.06 283.95 T
(predicates) 315.65 273.95 T
(14) 361.1 273.95 T
(types) 315.65 263.95 T
(110) 341.62 263.95 T
(variables) 315.65 253.95 T
(14) 356.13 253.95 T
(negation logical operation) 306.65 243.95 T
(165) 415.07 243.95 T
10 8.5 Q
(negative) 306.65 233.95 T
1 9 Q
(165) 351.95 233.95 T
10 8.5 Q
(negative?) 306.65 223.95 T
1 9 Q
(14) 357.05 223.95 T
(newsgroup for Dylan) 306.65 213.95 T
(375) 396.62 213.95 T
10 8.5 Q
(next-method) 306.65 203.95 T
1 9 Q
(69) 367.25 203.95 T
(nonclass types) 306.65 193.95 T
(109) 369.01 193.95 T
2 11 Q
(O) 306.65 172.62 T
10 8.5 Q
(<object>) 306.65 160.95 T
1 9 Q
(31) 351.95 160.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "409" 423
%%Page: "410" 424
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(410) 63.65 702.62 T
0 9 Q
(Index) 86.9 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 279.65 672.95 R
V
1 F
0 X
(object identity) 117.65 666.95 T
(381) 178.79 666.95 T
(object model, for C and C++) 117.65 656.95 T
(programmers) 153.65 646.95 T
(381) 212.66 646.95 T
10 8.5 Q
(object-class) 117.65 636.95 T
1 9 Q
(30) 183.35 636.95 T
(object-oriented programming in Dylan) 117.65 626.95 T
(basic concepts) 126.65 616.95 T
(39\32051) 187.92 616.95 T
(objects) 117.65 606.95 T
(30) 149.2 606.95 T
10 8.5 Q
(one-of) 117.65 596.95 T
1 9 Q
(319) 152.75 596.95 T
(open classes) 117.65 586.95 T
(323) 171.14 586.95 T
(open generic functions) 117.65 576.95 T
(322) 212.73 576.95 T
(operands) 117.65 566.95 T
(162) 159.39 566.95 T
(operations) 117.65 556.95 T
(arithmetic) 126.65 546.95 T
(165) 171.8 546.95 T
(assignment) 126.65 536.95 T
(165, 166) 176.57 536.95 T
(comparison) 126.65 526.95 T
(165) 178.06 526.95 T
(logical) 126.65 516.95 T
(165) 157.42 516.95 T
(operator overloading) 117.65 506.95 T
(75) 206.75 506.95 T
(operators) 117.65 496.95 T
(binary) 126.65 486.95 T
(165) 157.04 486.95 T
(unary) 126.65 476.95 T
(165) 154.87 476.95 T
1 7.2 Q
(OR) 117.65 466.95 T
1 9 Q
( logical operation) 128.12 466.95 T
(155, 165) 201.78 466.95 T
(order of evaluation) 117.65 456.95 T
(162) 198.54 456.95 T
(overloading) 117.65 446.95 T
(75) 170.41 446.95 T
2 11 Q
(P) 117.65 425.62 T
10 8.5 Q
(pair) 117.65 413.95 T
1 9 Q
(141) 142.55 413.95 T
(pairs) 117.65 403.95 T
(141) 142.05 403.95 T
(parameter lists) 117.65 393.95 T
(172) 181.22 393.95 T
(congruence) 126.65 383.95 T
(176) 177.14 383.95 T
(parameter specializers) 117.65 373.95 T
(63, 79) 211.49 373.95 T
(parameters) 117.65 363.95 T
(168) 166.99 363.95 T
(keywords) 126.65 353.95 T
(43, 173, 174, 178) 170.76 353.95 T
(required) 126.65 343.95 T
(173) 165.46 343.95 T
(rest) 126.65 333.95 T
(173) 145.76 333.95 T
(specialized) 126.65 323.95 T
(173) 175.35 323.95 T
(partial evaluation) 117.65 313.95 T
(310, 333) 192.68 313.95 T
(pattern variables) 117.65 303.95 T
(362, 373) 189.26 303.95 T
(patterns) 117.65 293.95 T
(360) 154.85 293.95 T
(performance) 117.65 283.95 T
(333) 172.88 283.95 T
(and flexibility) 126.65 273.95 T
(309\320336) 186.6 273.95 T
(call-site caching) 126.65 263.95 T
(332) 194.4 263.95 T
(efficiency model) 126.65 253.95 T
(310) 196.78 253.95 T
(enumerations) 126.65 243.95 T
(318) 185.96 243.95 T
(execution model) 126.65 233.95 T
(309) 197.08 233.95 T
(garbage collection) 126.65 223.95 T
(332) 203.41 223.95 T
(inlining) 126.65 213.95 T
(333) 162.34 213.95 T
(limited types) 126.65 203.95 T
(315) 183.42 203.95 T
(method dispatch) 126.65 193.95 T
(66) 198.25 193.95 T
(open or sealed classes) 126.65 183.95 T
(323) 218.17 183.95 T
(open or sealed generic functions) 126.65 173.95 T
(322) 259.76 173.95 T
(partial evaluation) 126.65 163.95 T
(310) 201.68 163.95 T
(performance warnings) 126.65 153.95 T
(313) 221.61 153.95 T
324.65 150.95 495.65 672.95 R
7 X
V
0 X
(primary classes) 333.65 666.95 T
(330) 399.86 666.95 T
(safety warnings) 333.65 656.95 T
(313) 401.44 656.95 T
(sealed domains) 333.65 646.95 T
(324) 399.99 646.95 T
(slot accessors) 333.65 636.95 T
(328) 391.4 636.95 T
(tail calls) 333.65 626.95 T
(320) 370.62 626.95 T
(type constraints) 333.65 616.95 T
(311) 401.62 616.95 T
(type inference) 333.65 606.95 T
(312) 394.63 606.95 T
(typed parameters of generic) 333.65 596.95 T
(functions) 351.65 586.95 T
(320) 393.33 586.95 T
(pointers) 324.65 576.95 T
(381) 361.94 576.95 T
(polymorphism) 324.65 566.95 T
(145) 388.54 566.95 T
10 8.5 Q
(positive?) 324.65 556.95 T
1 9 Q
(14) 375.05 556.95 T
(predicates) 324.65 546.95 T
(13, 14) 370.1 546.95 T
(naming conventions) 333.65 536.95 T
(14) 419.25 536.95 T
(primary classes) 324.65 526.95 T
(330) 390.86 526.95 T
(programs) 324.65 516.95 T
(195) 367.85 516.95 T
(proper subtype) 324.65 506.95 T
(112) 390.43 506.95 T
(protocols) 324.65 496.95 T
(187) 366.22 496.95 T
2 11 Q
(Q) 324.65 475.62 T
1 9 Q
(quick start to learning Dylan) 324.65 463.95 T
(11\32024) 443.23 463.95 T
2 11 Q
(R) 324.65 442.62 T
1 9 Q
(recursion) 324.65 430.95 T
(147) 366.58 430.95 T
(redefinition of classes) 324.65 420.95 T
(43) 415.29 420.95 T
(re-export of imports) 324.65 410.95 T
(211) 409.38 410.95 T
(required parameters) 324.65 400.95 T
(173) 410.55 400.95 T
10 8.5 Q
(required-init-value:) 324.65 390.95 T
1 9 Q
( slot option) 426.65 390.95 T
(125) 475.96 390.95 T
10 8.5 Q
(#rest) 324.65 380.95 T
1 9 Q
(173, 175, 176, 177) 354.65 380.95 T
(rest parameters) 324.65 370.95 T
(173) 390.85 370.95 T
10 8.5 Q
(<restart>) 324.65 360.95 T
1 9 Q
(350) 375.05 360.95 T
(restart handlers) 324.65 350.95 T
(350) 391.78 350.95 T
(return values) 324.65 340.95 T
(168) 382.18 340.95 T
(multiple) 333.65 330.95 T
(47) 372.03 330.95 T
(reusable software components) 324.65 320.95 T
(187) 450.41 320.95 T
10 8.5 Q
(reverse) 324.65 310.95 T
1 9 Q
(150) 364.85 310.95 T
10 8.5 Q
(reverse!) 324.65 300.95 T
1 9 Q
(150) 369.95 300.95 T
(root) 324.65 290.95 T
(31) 345.46 290.95 T
10 8.5 Q
(round) 324.65 280.95 T
1 9 Q
(48) 354.65 280.95 T
10 8.5 Q
(round/) 324.65 270.95 T
1 9 Q
(48) 359.75 270.95 T
2 11 Q
(S) 324.65 249.62 T
1 9 Q
(safety warnings) 324.65 237.95 T
(313) 392.44 237.95 T
(scope) 324.65 227.95 T
(lexical) 333.65 217.95 T
(184) 363.46 217.95 T
(sealed classes) 324.65 207.95 T
(323) 383.33 207.95 T
(sealed domains) 324.65 197.95 T
(324) 390.99 197.95 T
(restriction on methods) 333.65 187.95 T
(325) 427.95 187.95 T
(restriction on subclasses of open) 333.65 177.95 T
(classes) 351.65 167.95 T
(327) 383.02 167.95 T
(sealed generic functions) 324.65 157.95 T
(322) 424.92 157.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "410" 424
%%Page: "411" 425
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
99.65 681.95 531.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Index) 486.61 702.62 T
2 F
(41) 517.75 702.62 T
(1) 526.9 702.62 T
99.65 107.12 531.65 141.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
99.65 150.95 477.65 672.95 R
V
10 8.5 Q
0 X
(select) 99.65 666.95 T
1 9 Q
(156, 158) 134.75 666.95 T
(setters) 99.65 656.95 T
(42, 118) 129.82 656.95 T
(element-reference syntax) 108.65 646.95 T
(167) 212.79 646.95 T
(function-call syntax) 108.65 636.95 T
(166) 191.63 636.95 T
(performance) 108.65 626.95 T
(328) 163.88 626.95 T
(slot-reference syntax) 108.65 616.95 T
(166) 195.4 616.95 T
(Shalit, Andrew) 99.65 606.95 T
(xi) 164.39 606.95 T
(signal of conditions) 99.65 596.95 T
(343) 182.14 596.95 T
(signatures) 99.65 586.95 T
(150) 145.37 586.95 T
10 8.5 Q
(<simple-error>) 99.65 576.95 T
1 9 Q
(344) 175.55 576.95 T
10 8.5 Q
(<simple-object-vector>) 99.65 566.95 T
1 9 Q
(141) 216.35 566.95 T
(single inheritance) 99.65 556.95 T
(287) 174.56 556.95 T
10 8.5 Q
(singleton) 99.65 546.95 T
1 9 Q
(109, 113) 150.05 546.95 T
(performance implications) 108.65 536.95 T
(318) 215.36 536.95 T
10 8.5 Q
(size) 99.65 526.95 T
1 9 Q
(143) 124.55 526.95 T
(slot allocation) 99.65 516.95 T
10 8.5 Q
(class) 108.65 506.95 T
1 9 Q
(127) 138.65 506.95 T
10 8.5 Q
(each-subclass) 108.65 496.95 T
1 9 Q
(128) 179.45 496.95 T
10 8.5 Q
(instance) 108.65 486.95 T
1 9 Q
(127) 153.95 486.95 T
10 8.5 Q
(virtual) 108.65 476.95 T
1 9 Q
(127) 148.85 476.95 T
(slot options) 99.65 466.95 T
(43) 150.52 466.95 T
(init expressions) 108.65 456.95 T
(126) 175.26 456.95 T
10 8.5 Q
(init-function:) 108.65 446.95 T
1 9 Q
(126) 184.55 446.95 T
10 8.5 Q
(init-value:) 108.65 436.95 T
1 9 Q
(124) 169.25 436.95 T
10 8.5 Q
(required-init-value:) 108.65 426.95 T
1 9 Q
(125) 215.15 426.95 T
(slot references) 99.65 416.95 T
(163) 161.08 416.95 T
(slot specifications) 99.65 406.95 T
10 8.5 Q
(constant slot) 108.65 396.95 T
1 9 Q
(329) 179.45 396.95 T
10 8.5 Q
(inherited slot) 108.65 386.95 T
1 9 Q
(125) 184.55 386.95 T
(slots) 99.65 376.95 T
(117\320135) 122.25 376.95 T
(allocation) 108.65 366.95 T
(127) 152 366.95 T
(constant) 108.65 356.95 T
(329) 146.72 356.95 T
(getters and setters) 108.65 346.95 T
(42) 185.43 346.95 T
(inheritance) 108.65 336.95 T
(58) 157.71 336.95 T
(initialization) 108.65 326.95 T
(42, 124, 133) 163.62 326.95 T
(introduction) 108.65 316.95 T
(40) 163.04 316.95 T
(multiple inheritance) 108.65 306.95 T
(292) 193.84 306.95 T
(naming considerations) 108.65 296.95 T
(121) 203.91 296.95 T
(performance of getters and setters) 108.65 286.95 T
(328) 248.57 286.95 T
(type constraint) 108.65 276.95 T
(41) 172.8 276.95 T
(uninitialized) 108.65 266.95 T
(111, 124) 163.89 266.95 T
(virtual) 108.65 256.95 T
(128) 139.89 256.95 T
(Smalltalk) 99.65 246.95 T
(33, 332) 141.62 246.95 T
(sorted sequences) 99.65 236.95 T
(245\320253) 171.69 236.95 T
(needed by the airport application) 108.65 226.95 T
(242) 246.02 226.95 T
10 8.5 Q
(<sorted-sequence>) 99.65 216.95 T
1 9 Q
(245) 190.85 216.95 T
(source records) 99.65 206.95 T
(194, 195) 162.06 206.95 T
(specialized parameters) 99.65 196.95 T
(173) 195.43 196.95 T
(specializers) 99.65 186.95 T
(63, 79) 150.22 186.95 T
(statement macros) 99.65 176.95 T
(366) 174.05 176.95 T
10 8.5 Q
(<stretchy-vector>) 99.65 166.95 T
1 9 Q
(141) 190.85 166.95 T
(strings) 99.65 156.95 T
(creation and access to elements) 315.65 666.95 T
(138) 444.22 666.95 T
(subclasses) 306.65 656.95 T
(59) 352.24 656.95 T
10 8.5 Q
(subtype?) 306.65 646.95 T
1 9 Q
(32) 351.95 646.95 T
(subtypes) 306.65 636.95 T
(60) 346.84 636.95 T
(superclasses) 306.65 626.95 T
(59) 360.54 626.95 T
(introduction) 315.65 616.95 T
(30) 370.04 616.95 T
(supertypes) 306.65 606.95 T
(60) 355.14 606.95 T
(symbols) 306.65 596.95 T
(129) 344.24 596.95 T
(namespace of) 315.65 586.95 T
(201) 374.34 586.95 T
2 11 Q
(T) 306.65 565.62 T
10 8.5 Q
(#t) 306.65 553.95 T
1 9 Q
(13) 321.35 553.95 T
(tables) 306.65 543.95 T
(157) 334.3 543.95 T
10 8.5 Q
(tail) 306.65 533.95 T
1 9 Q
(141) 331.55 533.95 T
(tail calls) 306.65 523.95 T
(320) 343.62 523.95 T
(templates) 306.65 513.95 T
(360) 349.93 513.95 T
(terminology) 306.65 503.95 T
(classes, types, and instances) 315.65 493.95 T
(59) 431.45 493.95 T
0 F
(The Dylan Refer) 306.65 483.95 T
(ence Manual) 366.5 483.95 T
1 F
(xi) 417.92 483.95 T
(tree) 306.65 473.95 T
(294) 326.26 473.95 T
(true value) 306.65 463.95 T
(13) 351.57 463.95 T
10 8.5 Q
(truncate) 306.65 453.95 T
1 9 Q
(48) 351.95 453.95 T
10 8.5 Q
(truncate/) 306.65 443.95 T
1 9 Q
(48) 357.05 443.95 T
(type constraints) 306.65 433.95 T
(16) 374.62 433.95 T
10 8.5 Q
(<object>) 315.65 423.95 T
1 9 Q
(41) 360.95 423.95 T
(of slots) 315.65 413.95 T
(41) 348.41 413.95 T
(performance implications) 315.65 403.95 T
(311) 422.36 403.95 T
(type inference) 306.65 393.95 T
(312) 367.63 393.95 T
10 8.5 Q
(type-for-copy) 306.65 383.95 T
1 9 Q
(143) 377.45 383.95 T
(types) 306.65 373.95 T
(limited) 315.65 363.95 T
(109) 348.7 363.95 T
(naming convention) 315.65 353.95 T
(110) 397.43 353.95 T
(that are not classes) 315.65 343.95 T
(109) 394.83 343.95 T
10 8.5 Q
(type-union) 306.65 333.95 T
1 9 Q
(109, 113, 158) 362.15 333.95 T
(performance implications) 315.65 323.95 T
(318) 422.36 323.95 T
2 11 Q
(U) 306.65 302.62 T
1 9 Q
(unary operators) 306.65 290.95 T
(165) 375.03 290.95 T
(user-defined classes and methods) 306.65 280.95 T
(39\32051) 445.25 280.95 T
2 11 Q
(V) 306.65 259.62 T
1 9 Q
(value declarations) 306.65 247.95 T
(46, 168, 175) 383.84 247.95 T
(congruence) 315.65 237.95 T
(177) 366.14 237.95 T
10 8.5 Q
(values) 306.65 227.95 T
1 9 Q
(47, 172) 341.75 227.95 T
(variables) 306.65 217.95 T
(local) 315.65 207.95 T
(18, 184) 338.8 207.95 T
(naming convention) 315.65 197.95 T
(14) 397.43 197.95 T
(type constraints) 315.65 187.95 T
(16) 383.62 187.95 T
10 8.5 Q
(vector) 306.65 177.95 T
1 9 Q
(140, 393) 341.75 177.95 T
(vectors) 306.65 167.95 T
(creation and access to elements) 315.65 157.95 T
(140) 444.22 157.95 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "411" 425
%%Page: "412" 426
595.3 841.9 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
63.65 681.95 495.65 708.95 R
7 X
0 0 0 1 0 0 0 K
V
2 9.5 Q
0 X
(412) 63.65 702.62 T
0 9 Q
(Index) 86.9 702.62 T
63.65 105.95 495.65 142.95 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
117.65 150.95 279.65 672.95 R
V
10 8.5 Q
0 X
(virtual) 117.65 666.95 T
1 9 Q
( slot allocation) 153.35 666.95 T
(127, 128) 215.48 666.95 T
(virtual slots) 117.65 656.95 T
(128) 169.24 656.95 T
2 11 Q
(W) 117.65 635.62 T
10 8.5 Q
(while) 117.65 623.95 T
1 9 Q
(142) 147.65 623.95 T
(Wilson, Joseph N.) 117.65 613.95 T
(378) 193.52 613.95 T
(World Wide Web pages for Dylan) 117.65 603.95 T
(375\320) 257.54 603.95 T
(379) 153.65 593.95 T
2 11 Q
(Z) 117.65 572.62 T
10 8.5 Q
(zero?) 117.65 560.95 T
1 9 Q
(14) 147.65 560.95 T
324.65 150.95 495.65 672.95 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "412" 426
%%Trailer
%%BoundingBox: 0 0 595.3 841.9
%%PageOrder: Ascend
%%Pages: 426
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Roman
%%+ Palatino-Bold
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Courier-Oblique
%%+ Courier-BoldOblique
%%+ Helvetica-Bold
%%+ Helvetica
%%+ Helvetica-Oblique
%%+ Courier
%%EOF
