%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 22 FMDOCUMENT
0 0 /Palatino-Italic FMFONTDEFINE
1 0 /Palatino-Roman FMFONTDEFINE
2 0 /Palatino-Bold FMFONTDEFINE
3 0 /Helvetica-Narrow-Bold FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /Courier-BoldOblique FMFONTDEFINE
6 0 /Courier-Oblique FMFONTDEFINE
7 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
540 113.98 90 113.98 2 L
0.25 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
540 696.68 90 696.68 2 L
2 H
N
0 30 Q
-1.1 (Pr) 207 592 S
-1.1 (ogramming in Dylan) 234.25 592 S
1 13 Q
(Neal Feinber) 207 507.33 T
(g) 280.68 507.33 T
(Sonya Keene) 207 488.33 T
(Robert Mathews) 207 469.33 T
(P) 207 450.33 T
(. T) 213.18 450.33 T
(ucker W) 226.47 450.33 T
(ithington) 274.21 450.33 T
(W) 207 417.33 T
(ith contributions fr) 219.29 417.33 T
(om the Dylan gr) 327.42 417.33 T
(oup and other) 421.05 417.33 T
(people  at Harlequin.) 207 404.33 T
1 10 Q
(Draft September 14, 1995) 207 302.77 T
2 12 Q
(Harlequin) 207 150.44 T
FMENDPAGE
%%EndPage: "1" 1
%%Page: "2" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Copyright 1994, 1995 by The Harlequin Gr) 117 528.33 T
(oup Limited.) 304.68 528.33 T
(All rights r) 117 506.33 T
(eserved.) 165.11 506.33 T
FMENDPAGE
%%EndPage: "2" 2
%%Page: "iii" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.17 546.83 503.17 642.33 R
7 X
0 0 0 1 0 0 0 K
V
1 30 Q
0 X
(Contents) 107.17 566.17 T
107.17 546.83 503.17 642.33 C
0 0 0 1 0 0 0 K
107.17 601.17 404.17 631.33 C
0 0 0 1 0 0 0 K
103.83 616.17 265.83 616.17 2 L
3 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
103.83 607.17 265.83 607.17 2 L
1 H
N
0 0 0 1 0 0 0 K
107.17 546.83 503.17 642.33 C
36 72 576 720 C
0 0 0 1 0 0 0 K
108 135 486 432 R
7 X
0 0 0 1 0 0 0 K
V
108 90 504 108 R
V
2 11 Q
0 X
(iii) 300.51 102 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 504 432 R
7 X
V
1 F
0 X
(Preface) 135 424.67 T
(ix) 181.57 424.67 T
3 13 Q
(1) 108 398.33 T
(Introduction) 135 398.33 T
(1) 210.18 398.33 T
1 11 Q
(1.1) 135 378.67 T
(Modular) 162 378.67 T
(, r) 204 378.67 T
(eusable, component-oriented pr) 213.65 378.67 T
(ograms  5) 368.61 378.67 T
(1.2) 135 364.67 T
(Powerful and familiar pr) 162 364.67 T
(ocedural pr) 282.89 364.67 T
(ogramming  6) 338.96 364.67 T
(1.3) 135 350.67 T
(Rapid and pr) 162 350.67 T
(oductive development of pr) 226.26 350.67 T
(ograms  7) 361.72 350.67 T
(1.4) 135 336.67 T
(Delivery of safe, ef) 162 336.67 T
(\336cient, compact applications  8) 252.63 336.67 T
3 13 Q
(2) 108 314.33 T
(Quick Start) 135 314.33 T
(11) 204.88 314.33 T
1 11 Q
(2.1) 135 294.67 T
(Dialog with a Dylan listener  1) 162 294.67 T
(1) 309.47 294.67 T
(2.2) 135 280.67 T
(V) 162 280.67 T
(ariables and constants  12) 168.93 280.67 T
(2.3) 135 266.67 T
(De\336nitions of methods  15) 162 266.67 T
(2.4) 135 252.67 T
(Classes  18) 162 252.67 T
(2.5) 135 238.67 T
(User) 162 238.67 T
(-de\336ned classes  21) 184.64 238.67 T
(2.6) 135 224.67 T
(Use of) 162 224.67 T
4 F
(make) 195.66 224.67 T
1 F
( to cr) 222.06 224.67 T
(eate an instance  23) 246.18 224.67 T
(2.7) 135 210.67 T
(Getters and setters of slot values  23) 162 210.67 T
(2.8) 135 196.67 T
(Initialization of slots when making instances  24) 162 196.67 T
(2.9) 135 182.67 T
(Methods for handling time  25) 162 182.67 T
(2.10) 135 168.67 T
(The) 162 168.67 T
4 F
(<time-offset>) 183.16 168.67 T
1 F
( class and method  30) 268.96 168.67 T
(2.1) 135 154.67 T
(1) 148.15 154.67 T
(Summary  32) 162 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iii" 3
%%Page: "iv" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(iv) 72 677.67 T
0 9.5 Q
(Contents) 91.28 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 504 648 R
V
3 13 Q
0 X
(3) 108 639.33 T
(Simple Use of Inheritance) 135 639.33 T
(35) 278.34 639.33 T
1 11 Q
(3.1) 135 619.67 T
(Class inheritance  35) 162 619.67 T
(3.2) 135 605.67 T
(Methods for classes that use inheritance  39) 162 605.67 T
(3.3) 135 591.67 T
(De\336nition of a generic function  42) 162 591.67 T
(3.4) 135 577.67 T
(Use of) 162 577.67 T
4 F
(next-method) 195.66 577.67 T
1 F
( to call another method  45) 268.26 577.67 T
(3.5) 135 563.67 T
(Summary  47) 162 563.67 T
3 13 Q
(4) 108 541.33 T
(Design of the Airport Example) 135 541.33 T
(49) 300.83 541.33 T
1 11 Q
(4.1) 135 521.67 T
(Goals of the airport application  50) 162 521.67 T
(4.2) 135 507.67 T
(Objects that model an airport  51) 162 507.67 T
(4.3) 135 493.67 T
(Behaviors of the objects  54) 162 493.67 T
(4.4) 135 479.67 T
(Our appr) 162 479.67 T
(oach to this application  56) 207.24 479.67 T
(4.5) 135 465.67 T
(Summary  56) 162 465.67 T
3 13 Q
(5) 108 443.33 T
(Cycles Through Implementation and Design) 135 443.33 T
(57) 370.73 443.33 T
1 11 Q
(5.1) 135 423.67 T
(Absolute position: using) 162 423.67 T
4 F
(<directed-angle>  57) 283.69 423.67 T
1 F
(5.2) 135 409.67 T
(Absolute position: using) 162 409.67 T
4 F
(<latitude>) 283.69 409.67 T
1 F
( and) 349.69 409.67 T
4 F
(<longitude>  59) 373.82 409.67 T
1 F
(5.3) 135 395.67 T
(Relative position: \336rst appr) 162 395.67 T
(oach  61) 294.39 395.67 T
(5.4) 135 381.67 T
(Pr) 162 381.67 T
(elude to a new appr) 172.79 381.67 T
(oach  62) 269.69 381.67 T
(5.5) 135 367.67 T
(Meeting of space and time  63) 162 367.67 T
(5.6) 135 353.67 T
(Use of a r) 162 353.67 T
(elative position  68) 208.06 353.67 T
(5.7) 135 339.67 T
(Summary  71) 162 339.67 T
3 13 Q
(6) 108 317.33 T
(More on Methods) 135 317.33 T
(73) 236.24 317.33 T
1 11 Q
(6.1) 135 297.67 T
(Methods for the) 162 297.67 T
4 F
(+) 242.57 297.67 T
1 F
( generic function  73) 249.18 297.67 T
(6.2) 135 283.67 T
(Multimethods  76) 162 283.67 T
(6.3) 135 269.67 T
(Requir) 162 269.67 T
(ed, r) 194.76 269.67 T
(est, and keywor) 216.4 269.67 T
(d parameters  77) 293.61 269.67 T
(6.4) 135 255.67 T
(Return values  79) 162 255.67 T
(6.5) 135 241.67 T
(Method parameter congr) 162 241.67 T
(uence  81) 283.69 241.67 T
(6.6) 135 227.67 T
(Identity of methods  81) 162 227.67 T
(6.7) 135 213.67 T
(Methods for types that ar) 162 213.67 T
(e not classes  82) 285.04 213.67 T
(6.8) 135 199.67 T
(Summary  82) 162 199.67 T
3 13 Q
(7) 108 177.33 T
(More on Slots) 135 177.33 T
(85) 218.49 177.33 T
1 11 Q
(7.1) 135 157.67 T
(Getters and setters for slots  85) 162 157.67 T
(7.2) 135 143.67 T
(V) 162 143.67 T
(irtual slots  88) 169.34 143.67 T
(7.3) 135 129.67 T
(Initialize methods  91) 162 129.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "iv" 4
%%Page: "v" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 489.55 677.67 T
2 11 Q
(v) 533.88 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 504 648 R
V
1 F
0 X
(7.4) 135 640.67 T
(T) 162 640.67 T
(echniques for initializing slots  92) 167.73 640.67 T
(7.5) 135 626.67 T
(Class slots and each-subclass slots  96) 162 626.67 T
(7.6) 135 612.67 T
(Summary  97) 162 612.67 T
3 13 Q
(8) 108 590.33 T
(Simple Collections and Control Flow) 135 590.33 T
(99) 333.41 590.33 T
1 11 Q
(8.1) 135 570.67 T
(Built-in collection classes  99) 162 570.67 T
(8.2) 135 556.67 T
(Basic use of collections  101) 162 556.67 T
(8.3) 135 542.67 T
(The) 162 542.67 T
4 F
(for) 183.16 542.67 T
1 F
( function  103) 202.96 542.67 T
(8.4) 135 528.67 T
(Thr) 162 528.67 T
(ee appr) 179.29 528.67 T
(oaches to) 215.45 528.67 T
4 F
(generate-gate-id  105) 263.27 528.67 T
1 F
(8.5) 135 514.67 T
(V) 162 514.67 T
(ectors  1) 168.72 514.67 T
(10) 207.87 514.67 T
(8.6) 135 500.67 T
(Constr) 162 500.67 T
(uction of a simple airport  1) 194.71 500.67 T
(12) 328.24 500.67 T
(8.7) 135 486.67 T
(The) 162 486.67 T
4 F
(select) 183.16 486.67 T
1 F
( and) 222.76 486.67 T
4 F
(block) 246.89 486.67 T
1 F
( contr) 279.89 486.67 T
(ol str) 307.66 486.67 T
(uctur) 332.13 486.67 T
(es  1) 358.01 486.67 T
(17) 378.34 486.67 T
(8.8) 135 472.67 T
(Summary  121) 162 472.67 T
3 13 Q
(9) 108 450.33 T
(Advanced Collections and Control Flow) 135 450.33 T
(123) 349.4 450.33 T
1 11 Q
(9.1) 135 430.67 T
(Simple landing and four appr) 162 430.67 T
(oaches  123) 306.45 430.67 T
(9.2) 135 416.67 T
(Need for an impr) 162 416.67 T
(oved landing algorithm  130) 246.24 416.67 T
(9.3) 135 402.67 T
(Classes that stor) 162 402.67 T
(e mor) 240.74 402.67 T
(e than one vehicle  131) 268.62 402.67 T
(9.4) 135 388.67 T
(Air) 162 388.67 T
(craft transitions  138) 177.91 388.67 T
(9.5) 135 374.67 T
(Pr) 162 374.67 T
(otocols for handling air) 172.79 374.67 T
(craft  139) 286.2 374.67 T
(9.6) 135 360.67 T
(Methods that handle air) 162 360.67 T
(craft transitions  139) 278.72 360.67 T
(9.7) 135 346.67 T
(Method for sorting  148) 162 346.67 T
(9.8) 135 332.67 T
(Summary  149) 162 332.67 T
3 13 Q
(10) 108 310.33 T
(Exceptions) 135 310.33 T
(151) 204.88 310.33 T
1 11 Q
(10.1) 135 290.67 T
(An informal exception pr) 162 290.67 T
(otocol  151) 284.9 290.67 T
(10.2) 135 276.67 T
(Signaling conditions  156) 162 276.67 T
(10.3) 135 262.67 T
(Establishing handlers  161) 162 262.67 T
(10.4) 135 248.67 T
(Using) 162 248.67 T
4 F
(let handler) 193.69 248.67 T
1 F
( to implement a r) 266.29 248.67 T
(ecovery pr) 349.49 248.67 T
(otocol  163) 401.11 248.67 T
(10.5) 135 234.67 T
(De\336ning an err) 162 234.67 T
(or handler with r) 235.72 234.67 T
(ecovery  171) 318.67 234.67 T
(10.6) 135 220.67 T
(Pr) 162 220.67 T
(otected operations and the) 172.79 220.67 T
4 F
(block) 304.58 220.67 T
1 F
( constr) 337.58 220.67 T
(uct  176) 370.13 220.67 T
(10.7) 135 206.67 T
(Summary  178) 162 206.67 T
3 13 Q
(11) 108 184.33 T
(Libraries and Modules) 135 184.33 T
(181) 261.15 184.33 T
1 11 Q
(1) 135 164.67 T
(1.1) 139.9 164.67 T
(Libraries  182) 162 164.67 T
(1) 135 150.67 T
(1.2) 139.9 150.67 T
(Modules  182) 162 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "v" 5
%%Page: "vi" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(vi) 72 677.67 T
0 9.5 Q
(Contents) 91.28 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 504 648 R
V
1 11 Q
0 X
(1) 135 640.67 T
(1.3) 139.9 640.67 T
(Module declaration  183) 162 640.67 T
(1) 135 626.67 T
(1.4) 139.9 626.67 T
(Library declaration  187) 162 626.67 T
(1) 135 612.67 T
(1.5) 139.9 612.67 T
(Inter) 162 612.67 T
(change \336les  188) 185.11 612.67 T
(1) 135 598.67 T
(1.6) 139.9 598.67 T
(Shar) 162 598.67 T
(ed library  192) 183.82 598.67 T
(1) 135 584.67 T
(1.7) 139.9 584.67 T
(Pr) 162 584.67 T
(otocol design  195) 172.79 584.67 T
(1) 135 570.67 T
(1.8) 139.9 570.67 T
(Summary  200) 162 570.67 T
3 13 Q
(12) 108 548.33 T
(Performance and Flexibility) 135 548.33 T
(201) 287.23 548.33 T
1 11 Q
(12.1) 135 528.67 T
(T) 162 528.67 T
(ype declarations  202) 167.75 528.67 T
(12.2) 135 514.67 T
(Limited types  204) 162 514.67 T
(12.3) 135 500.67 T
(T) 162 500.67 T
(yped generic functions  205) 167.75 500.67 T
(12.4) 135 486.67 T
(Open generic functions  206) 162 486.67 T
(12.5) 135 472.67 T
(Open classes  207) 162 472.67 T
(12.6) 135 458.67 T
(Sealed domains  208) 162 458.67 T
(12.7) 135 444.67 T
(Primary classes  21) 162 444.67 T
(1) 253.35 444.67 T
(12.8) 135 430.67 T
(Summary  213) 162 430.67 T
3 13 Q
(13) 108 408.33 T
(Macros) 135 408.33 T
(215) 185.32 408.33 T
1 11 Q
(13.1) 135 388.67 T
(What is a \322macr) 162 388.67 T
(o\323?  215) 239.85 388.67 T
(13.2) 135 374.67 T
(Patterns and templates  216) 162 374.67 T
(13.3) 135 360.67 T
(Macr) 162 360.67 T
(o hygiene  218) 186.94 360.67 T
(13.4) 135 346.67 T
(Evaluation in macr) 162 346.67 T
(os  218) 254.31 346.67 T
(13.5) 135 332.67 T
(Constraints  220) 162 332.67 T
(13.6) 135 318.67 T
(Mor) 162 318.67 T
(e complex patterns  222) 182.56 318.67 T
(13.7) 135 304.67 T
(Mor) 162 304.67 T
(e hygiene  223) 182.56 304.67 T
(13.8) 135 290.67 T
(Summary  224) 162 290.67 T
3 13 Q
(14) 108 268.33 T
(Multiple Inheritance) 135 268.33 T
(225) 248.11 268.33 T
1 11 Q
(14.1) 135 248.67 T
(Example of multiple inheritance  226) 162 248.67 T
(14.2) 135 234.67 T
(Multiple Inheritance and slots  230) 162 234.67 T
(14.3) 135 220.67 T
(The class pr) 162 220.67 T
(ecedence list  231) 219.59 220.67 T
(14.4) 135 206.67 T
(Multiple inheritance and method dispatch  237) 162 206.67 T
(14.5) 135 192.67 T
(When should you use multiple inheritance?  240) 162 192.67 T
3 13 Q
(Appendix A) 108 170.33 T
(Source Code of the Airport Example) 180.23 170.33 T
(243) 376.27 170.33 T
(Appendix B) 108 145.33 T
(The) 180.23 145.33 T
4 F
(format) 202.15 145.33 T
3 F
( Function) 248.95 145.33 T
(245) 309.92 145.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vi" 6
%%Page: "vii" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Contents) 482.22 677.67 T
2 11 Q
(vii) 526.56 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 504 648 R
V
3 13 Q
0 X
(Appendix C) 108 639.33 T
(Internet Resources on Dylan) 180.23 639.33 T
(247) 337.77 639.33 T
(Glossary) 108 614.33 T
(249) 166.63 614.33 T
(Index) 108 589.33 T
(253) 148.85 589.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "vii" 7
%%Page: "viii" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(viii) 72 677.67 T
0 9.5 Q
(Contents) 98.61 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 504 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "viii" 8
%%Page: "ix" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(ix) 328.42 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 565.5 502.33 619.5 R
7 X
V
106.33 591.95 502.33 619.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 591.95 502.33 619.5 R
7 X
0 0 0 1 0 0 0 K
V
106.33 612.64 268.33 612.64 2 L
3 H
2 Z
0 X
N
106.33 603.64 268.33 603.64 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Pr) 106.33 571.95 T
(eface) 135.76 571.95 T
108 135 522 432 R
7 X
V
3 13 Q
0 X
(Dylan) 108 423.33 T
1 11 Q
-0.29 (Dylan \050DYnamic LANguage\051 is a new pr) 108 403.67 P
-0.29 (ogramming language invented by Apple) 304.36 403.67 P
(Computer and several partners. Dylan is dynamic, it is object-oriented, and it) 108 389.67 T
(delivers ef) 108 375.67 T
(\336cient applications.) 158.37 375.67 T
(Dylan is up and r) 135 361.67 T
(unning. Y) 219.72 361.67 T
(ou can get it fr) 266.7 361.67 T
(om Apple Computer) 336.7 361.67 T
(, Harlequin) 437.31 361.67 T
(Incorporated, Carnegie-Mellon University) 108 347.67 T
(, and other or) 312.02 347.67 T
(ganizations. Dylan imple-) 377.4 347.67 T
-0.24 (mentations r) 108 333.67 P
-0.24 (un on the Macintosh, W) 169.1 333.67 P
-0.24 (indows, and Unix. Full-\337edged pr) 284.04 333.67 P
-0.24 (oducts pr) 448.57 333.67 P
-0.24 (o-) 494.33 333.67 P
-0.26 (vide both a compiler and a development envir) 108 319.67 P
-0.26 (onment. Y) 331.25 319.67 P
-0.26 (ou can also obtain public-) 380.2 319.67 P
-0.36 (domain implementations for most popular computer platforms. See Appendix C,) 108 305.67 P
(\322Internet Resour) 108 291.67 T
(ces on Dylan\323, for further information on Dylan implementa-) 188.88 291.67 T
(tions.) 108 277.67 T
3 13 Q
(Audience) 108 246.33 T
1 11 Q
(This book is written for application pr) 108 226.67 T
(ogrammers who have experience working) 292.62 226.67 T
(in a conventional language such as C, Pascal, COBOL, FOR) 108 212.67 T
(TRAN, or BASIC.) 395.09 212.67 T
(Familiarity with object-oriented pr) 108 198.67 T
(ogramming and dynamic languages is not) 275.92 198.67 T
(r) 108 184.67 T
(equir) 112.15 184.67 T
(ed.) 137.56 184.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "ix" 9
%%Page: "x" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(x) 72 677.67 T
0 9.5 Q
(Preface) 87 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(Goal of this book) 108 639.33 T
1 11 Q
(The primary goal of this book is to teach you how to pr) 108 619.67 T
(ogram in Dylan, and how) 375.59 619.67 T
-0.3 (to write pr) 108 605.67 P
-0.3 (ograms in an object-oriented style. Along the way) 158.83 605.67 P
-0.3 (, we hope to convince) 397.4 605.67 P
-0.28 (you to use Dylan. It is intended to be a practical, elegant, and fun language to use.) 108 591.67 P
-0.21 (This book is a tutorial on pr) 108 577.67 P
-0.21 (ogramming in Dylan, and it does the following things:) 241.06 577.67 P
(\245) 117 557.67 T
-0.16 (Begins with the most basic use of Dylan, and gradually expands to showing) 135 557.67 P
(the mor) 135 543.67 T
(e powerful and advanced techniques.) 172.87 543.67 T
(\245) 117 523.67 T
(Gives the \337avor of working with the Dylan language in a typical Dylan) 135 523.67 T
(envir) 135 509.67 T
(onment.) 160.23 509.67 T
(\245) 117 489.67 T
(Shows how to de\336ne classes and methods that work together to solve a) 135 489.67 T
(pr) 135 475.67 T
(oblem.) 145.76 475.67 T
(\245) 117 455.67 T
-0.1 (Shows how to use many of the classes, functions, and options to good ef) 135 455.67 P
-0.1 (fect) 483.95 455.67 P
(within the context of an example application.) 135 441.67 T
(This book does not attempt to be as complete as the) 108 421.67 T
0 F
(Dylan Refer) 361.04 421.67 T
(ence Manual) 414.94 421.67 T
1 F
(, and) 472.29 421.67 T
(does not pr) 108 407.67 T
(ovide this kind of material:) 162.91 407.67 T
(\245) 117 387.67 T
(Complete descriptions of all classes and functions pr) 135 387.67 T
(ovided by Dylan.) 390.5 387.67 T
(\245) 117 367.67 T
(Complete descriptions of the detailed mechanisms in Dylan, such as how) 135 367.67 T
(slot initialization works in every case.) 135 353.67 T
3 13 Q
(Boxes) 108 322.33 T
1 11 Q
-0.18 (One of our challenges in writing this book was how to intr) 108 302.67 P
-0.18 (oduce Dylan gradually) 389.71 302.67 P
-0.2 (to you. As is tr) 108 288.67 P
-0.2 (ue of any pr) 178.23 288.67 P
-0.2 (ogramming language, everything in Dylan seems to be) 236.22 288.67 P
(connected to everything else. Often, a topic or example brings up another) 108 274.67 T
(, unr) 463.78 274.67 T
(e-) 486.47 274.67 T
(lated topic. W) 108 260.67 T
(e use a box to discuss the unr) 174.8 260.67 T
(elated topic. For example, in the sec-) 316.61 260.67 T
(tion describing variables, the following box occurs:) 108 246.67 T
2 F
(Convention:) 141 212.67 T
1 F
(Class names ar) 205.78 212.67 T
(e surr) 278.3 212.67 T
(ounded with angle brackets \321 for) 306.11 212.67 T
(example,) 141 198.67 T
4 9.5 Q
(<integer>) 187.74 198.67 T
1 11 Q
(.) 239.04 198.67 T
135 225.88 135 191.13 2 L
V
0.25 H
0 Z
N
486 225.88 486 191.13 2 L
V
N
134.88 226 486.12 226 2 L
V
N
134.88 191 486.12 191 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "x" 10
%%Page: "xi" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Preface) 493.72 677.67 T
2 11 Q
(xi) 530.84 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The box describes the convention of class names because we use a class name in) 108 640.67 T
(an example in that section, and you might well wonder what the angle brackets) 108 626.67 T
(mean.) 108 612.67 T
(In addition to using boxes to describe naming conventions, we use boxes to) 135 598.67 T
(describe cautions \050for possible pitfalls\051, performance implications \050in sections) 108 584.67 T
(wher) 108 570.67 T
(e you may wonder about performance\051, and brief information about func-) 132.99 570.67 T
(tions that ar) 108 556.67 T
(e used by an example but ar) 166.08 556.67 T
(e not central to the point being made by) 302.42 556.67 T
(the example.) 108 542.67 T
3 13 Q
(Program Examples) 108 511.33 T
1 11 Q
-0.2 (This book includes many pr) 108 491.67 P
-0.2 (ogram examples. Our appr) 242.87 491.67 P
-0.2 (oach is to pr) 373.34 491.67 P
-0.2 (esent an exam-) 431.99 491.67 P
-0.01 (ple simply at \336rst, and to expand it gradually to highlight dif) 108 477.67 P
-0.01 (fer) 403.96 477.67 P
-0.01 (ent concepts. The) 417.04 477.67 P
(central example of this book is an application that simulates airplanes, r) 108 463.67 T
(unways,) 456.08 463.67 T
(gates, \337ights, airports, and so on. The sample application schedules gates for) 108 449.67 T
(incoming air) 108 435.67 T
(craft, and it r) 169.52 435.67 T
(equir) 232.06 435.67 T
(es functions that handle position and time. The) 257.47 435.67 T
(position and time classes ar) 108 421.67 T
(e simple, so we develop them in the early chapters.) 241.56 421.67 T
(Dylan\325s cor) 135 407.67 T
(e language is lean. It does not include input\320output facilities,) 190.24 407.67 T
(support for a user interface, or interfaces for communicating with pr) 108 393.67 T
(ograms writ-) 439.76 393.67 T
(ten in other languages. These featur) 108 379.67 T
(es ar) 281.51 379.67 T
(e available in libraries supplied by ven-) 303.84 379.67 T
(dors or in the public domain. W) 108 365.67 T
(e want this book to be applicable to the widest) 262.34 365.67 T
-0.38 (possible range of Dylan implementations, so we focus on the cor) 108 351.67 P
-0.38 (e Dylan language) 417.16 351.67 P
(fr) 108 337.67 T
(eely) 115.81 337.67 T
(, and use only those library interfaces that ar) 134.44 337.67 T
(e widely available.) 350.33 337.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xi" 11
%%Page: "xii" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(xii) 72 677.67 T
0 9.5 Q
(Preface) 94.33 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "xii" 12
%%Page: "11" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 300.7 111 T
(1) 305.8 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(2) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(2) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Quick Start) 109 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we jump right into Dylan. W) 177.24 424.67 T
(e \336rst show how to interact with a) 321.79 424.67 T
-0.43 (typical development envir) 108 410.67 P
-0.43 (onment, to use several of the basic arithmetic functions,) 235.24 410.67 P
(to de\336ne a variable, and to de\336ne methods. W) 108 396.67 T
(e then show how to de\336ne a class,) 331.1 396.67 T
(to cr) 108 382.67 T
(eate an instance, to de\336ne a method, and to call a generic function on the) 129.37 382.67 T
(instance.) 108 368.67 T
3 15 Q
(2.1  Dialog with a Dylan listener) 108 329 T
1 11 Q
(A Dylan) 108 308.67 T
2 F
(development environment) 151.79 308.67 T
1 F
( can contain many tools, such as an editor) 285.32 308.67 T
(custom-tailor) 108 294.67 T
(ed for Dylan code, a br) 172.79 294.67 T
(owser) 283.64 294.67 T
(, a compiler) 312.28 294.67 T
(, a debugger) 368.45 294.67 T
(, and a) 427.93 294.67 T
2 F
(listener) 463.06 294.67 T
1 F
-0.13 (that enables you to type in expr) 108 280.67 P
-0.13 (essions and to see their values. A Dylan listener is) 260.4 280.67 P
(similar to a BASIC interpr) 108 266.67 T
(eter) 234.04 266.67 T
(. Y) 251.69 266.67 T
(ou can use the listener to test pieces of your pr) 263.52 266.67 T
(o-) 488.33 266.67 T
(gram without compiling the whole pr) 108 252.67 T
(ogram. When you start using Dylan, a nice) 291.41 252.67 T
-0.07 (way to learn and explor) 108 238.67 P
-0.07 (e is to use the listener) 223.36 238.67 P
-0.07 (. Dylan also supports the traditional) 326.43 238.67 P
-0.12 (appr) 108 224.67 P
-0.12 (oach of editing sour) 130.87 224.67 P
-0.12 (ce \336les, compiling them, and r) 227.18 224.67 P
-0.12 (unning them. This chapter) 372.98 224.67 P
(demonstrates using a listener) 108 210.67 T
(.) 249.61 210.67 T
(Her) 135 196.67 T
(e is a sample dialog between a user and a listener) 153.57 196.67 T
(.) 392.11 196.67 T
5 9 Q
(?) 108 176 T
4 F
( 7 + 12;) 113.4 176 T
5 F
(19) 108 165 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 13
%%Page: "12" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(12) 72 677.67 T
0 9.5 Q
(2.2 Variables and constants) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(In this example, the Dylan pr) 108 640.67 T
(ompt is the question mark,) 249.45 640.67 T
5 9 Q
(?) 382.58 640.67 T
1 11 Q
(. The user types in) 387.98 640.67 T
4 9.5 Q
(7 +) 479.66 640.67 T
(12;) 108 626.67 T
1 11 Q
(and pr) 130.8 626.67 T
(esses Enter) 162.93 626.67 T
(. The spaces ar) 215.72 626.67 T
(ound the plus sign,) 286.37 626.67 T
4 9.5 Q
(+) 382.63 626.67 T
1 11 Q
(, ar) 388.33 626.67 T
(e r) 403.48 626.67 T
(equir) 415.65 626.67 T
(ed \050see fol-) 441.06 626.67 T
(lowing box\051. The semicolon indicates the end of the statement. The listener exe-) 108 612.67 T
-0.34 (cutes the statement and displays the value r) 108 598.67 P
-0.34 (eturned by it, which is) 318.29 598.67 P
4 9.5 Q
-0.69 (19) 428.26 598.67 P
1 11 Q
-0.34 (. The listener) 439.65 598.67 P
(displays any r) 108 584.67 T
(eturn values and output pr) 176.34 584.67 T
(oduced by the statement. The) 307.5 584.67 T
4 9.5 Q
(bold) 453.67 584.67 T
-0.27 (typewriter font) 108 570.67 P
1 11 Q
-0.13 ( shows what the user types. The) 193.23 570.67 P
5 9 Q
-0.26 (bold-oblique typewriter font) 350.7 570.67 P
1 11 Q
(shows what the listener displays.) 108 556.67 T
(W) 108 432.67 T
(e can do other simple arithmetic on values:) 117.99 432.67 T
5 9 Q
(?) 108 412 T
4 F
( 7 * 12;) 113.4 412 T
5 F
(84) 108 401 T
(?) 108 382 T
4 F
( 7 - 12;) 113.4 382 T
5 F
(-5) 108 371 T
(?) 108 352 T
4 F
( 7 + 12 + 300 + .5;) 113.4 352 T
5 F
(319.5) 108 341 T
(?) 108 322 T
4 F
( 7 * 12 * 300 * .5;) 113.4 322 T
5 F
(12600) 108 311 T
3 15 Q
(2.2  V) 108 273 T
(ariables and constants) 139.47 273 T
1 11 Q
(W) 108 252.67 T
(e can de\336ne variables for storing values:) 117.99 252.67 T
5 9 Q
(?) 108 232 T
4 F
(def) 118.8 232 T
(ine variable *my-number* = 7;) 135 232 T
5 F
(?) 108 213 T
4 F
(def) 118.8 213 T
(ine variable *your-number* = 12;) 135 213 T
1 11 Q
(In Dylan, these variables ar) 108 192.67 T
(e called) 240.41 192.67 T
2 F
(module variables) 279.95 192.67 T
1 F
(. A module variable has a) 367.03 192.67 T
(name and a value. For now) 108 178.67 T
(, you can consider module variables to be like global) 239.36 178.67 T
(variables in other languages. When you de\336ne a module variable, you must) 108 164.67 T
2 F
(ini-) 478.94 164.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (Caution: Spaces are needed!) 141 522.67 P
1 F
-0.28 (In Dylan, it is legal to use characters such) 283.15 522.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(as) 141 508.67 T
4 9.5 Q
(+, -, *, <) 153.91 508.67 T
1 11 Q
(,) 210.91 508.67 T
4 9.5 Q
(>) 216.41 508.67 T
1 11 Q
(, and) 222.11 508.67 T
4 9.5 Q
(/) 248.99 508.67 T
1 11 Q
( in names of variables. Ther) 254.69 508.67 T
(efor) 388.55 508.67 T
(e, you must) 407.63 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(leave spaces ar) 141 494.67 T
(ound those operators in code, to make it clear that you) 213.19 494.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (ar) 141 480.67 P
-0.26 (e using them as operators, and that they ar) 150.65 480.67 P
-0.26 (e not part of the name of a) 355.79 480.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(variable.) 141 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 535.88 135 459.12 2 L
V
0.25 H
0 Z
N
486 535.88 486 459.12 2 L
V
N
134.88 536 486.12 536 2 L
V
N
134.88 459 486.12 459 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 14
%%Page: "13" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(13) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 X
(tialize) 108 640.67 T
1 F
( it \050that is, pr) 139.15 640.67 T
(ovide an initial value for it\051. For example, the initial value of) 201.05 640.67 T
4 9.5 Q
(*my-number*) 108 626.67 T
1 11 Q
( is) 170.7 626.67 T
4 9.5 Q
(7) 184.07 626.67 T
1 11 Q
(.) 189.76 626.67 T
(W) 108 530.67 T
(e can ask the listener for the value of a module variable:) 117.99 530.67 T
5 9 Q
(?) 108 510 T
4 F
(*my-number*;) 118.8 510 T
5 F
(7) 108 499 T
(?) 108 480 T
4 F
(*your-number*;) 118.8 480 T
5 F
(12) 108 469 T
1 11 Q
(W) 108 448.67 T
(e can add the values stor) 117.99 448.67 T
(ed in these variables:) 237.88 448.67 T
5 9 Q
(?) 108 428 T
4 F
(*my-number* + *your-number*;) 118.8 428 T
5 F
(19) 108 417 T
3 13 Q
(2.2.1  V) 108 387.33 T
(ariables that have type constraints) 144.17 387.33 T
1 11 Q
-0.16 (W) 108 367.67 P
-0.16 (e de\336ned) 117.99 367.67 P
4 9.5 Q
-0.34 (*my-number*) 165.46 367.67 P
1 11 Q
-0.16 ( and) 228.16 367.67 P
4 9.5 Q
-0.34 (*your-number*) 251.96 367.67 P
1 11 Q
-0.16 ( without giving a) 326.06 367.67 P
2 F
-0.16 (type constraint) 411.74 367.67 P
1 F
-0.16 ( on) 486.42 367.67 P
(the variables. Thus, we can stor) 108 353.67 T
(e any type of value in these variables. For exam-) 260.56 353.67 T
(ple, her) 108 339.67 T
(e we use the assignment operator) 144.4 339.67 T
(,) 306.05 339.67 T
4 9.5 Q
(:=) 311.55 339.67 T
1 11 Q
( , to stor) 322.95 339.67 T
(e strings in these variables:) 361.95 339.67 T
5 9 Q
(?) 108 319 T
4 F
(*my-number* :=) 118.8 319 T
5 F
(") 199.8 319 T
4 F
(seven";) 205.2 319 T
5 F
("seven") 108 308 T
(?) 108 289 T
4 F
(*your-number* :=) 118.8 289 T
5 F
(") 210.6 289 T
4 F
(twelve";) 216 289 T
5 F
("twelve") 108 278 T
1 11 Q
(What happens if we try to add the string values stor) 108 257.67 T
(ed in these variables?) 360.79 257.67 T
5 9 Q
(?) 108 237 T
4 F
(*my-number* + *your-number*;) 118.8 237 T
5 F
(ERROR: In + of \050"seven", "twelve"\051 arguments should be of type NUMBER.) 108 226 T
1 11 Q
(Dylan signals an err) 108 205.67 T
(or because the) 205.39 205.67 T
4 9.5 Q
(+) 277.55 205.67 T
1 11 Q
( operator does not know how to operate on) 283.25 205.67 T
(string ar) 108 191.67 T
(guments.) 148.71 191.67 T
-0.07 (W) 135 177.67 P
-0.07 (e can r) 144.99 177.67 P
-0.07 (ede\336ne the variables to include a type constraint, which would pr) 176.55 177.67 P
-0.07 (e-) 495.07 177.67 P
-0.28 (vent err) 108 163.67 P
-0.28 (ors such as the pr) 145.7 163.67 P
-0.28 (eceding one by ensuring that the variables can hold only) 229.37 163.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 592.67 T
1 F
( Module variables that hold pr) 203.03 592.67 T
(ogram data that) 351.15 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(changes during the execution of the pr) 141 578.67 T
(ogram ar) 328.02 578.67 T
(e surr) 372.1 578.67 T
(ounded by) 399.91 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(asterisks \321 for example,) 141 564.67 T
4 9.5 Q
(*my-number*) 263.01 564.67 T
1 11 Q
(.) 325.71 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 605.88 135 557.12 2 L
V
0.25 H
0 Z
N
486 605.88 486 557.12 2 L
V
N
134.88 606 486.12 606 2 L
V
N
134.88 557 486.12 557 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 15
%%Page: "14" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(14) 72 677.67 T
0 9.5 Q
(2.2 Variables and constants) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(numbers. W) 108 640.67 T
(e specify that) 166.6 640.67 T
4 9.5 Q
(*my-number*) 233.6 640.67 T
1 11 Q
( can hold any integer) 296.3 640.67 T
(, and that) 397.81 640.67 T
4 9.5 Q
(*your-num-) 446.5 640.67 T
(ber*) 108 626.67 T
1 11 Q
( can hold a single-pr) 130.8 626.67 T
(ecision \337oating-point number:) 229.69 626.67 T
5 9 Q
(?) 108 606 T
4 F
( def) 113.4 606 T
(ine variable *my-number* :: <integer> = 7;) 135 606 T
5 F
(?) 108 587 T
4 F
( def) 113.4 587 T
(ine variable *your-number* :: <single-f) 135 587 T
(loat> = 12.01;) 345.6 587 T
1 11 Q
(What happens if we try to stor) 108 566.67 T
(e a string in one of the variables?) 255.8 566.67 T
5 9 Q
(?) 108 546 T
4 F
(*my-number* :=) 118.8 546 T
5 F
(") 199.8 546 T
4 F
(seven";) 205.2 546 T
5 F
(ERROR: The value of *my-number* must be of type <INTEGER>) 108 535 T
1 11 Q
-0.42 (Both) 108 514.67 P
4 9.5 Q
-0.88 (<integer>) 133.04 514.67 P
1 11 Q
-0.42 ( and) 184.34 514.67 P
4 9.5 Q
-0.88 (<single-f) 207.62 514.67 P
-0.88 (loat>) 258.92 514.67 P
1 11 Q
-0.42 ( ar) 287.42 514.67 P
-0.42 (e) 299.39 514.67 P
2 F
-0.42 (classes.) 306.99 514.67 P
1 F
-0.42 (For now) 346.27 514.67 P
-0.42 (, you can think of a class) 385.63 514.67 P
(as being like a datatype in another language. Dylan pr) 108 500.67 T
(ovides a set of built-in) 371.25 500.67 T
(classes, and you can also de\336ne new classes.) 108 486.67 T
(Note that the) 108 404.67 T
4 9.5 Q
(+) 174.58 404.67 T
1 11 Q
( operator knows how to operate on numbers of dif) 180.28 404.67 T
(fer) 425.4 404.67 T
(ent types:) 438.48 404.67 T
5 9 Q
(?) 108 384 T
4 F
(*my-number* + *your-number*;) 118.8 384 T
5 F
(19.01) 108 373 T
3 13 Q
(2.2.2  Constants) 108 343.33 T
1 11 Q
(A) 108 323.67 T
2 F
(constant) 119.31 323.67 T
1 F
( is much like a module variable, except that an attempt to modify a) 161.46 323.67 T
(constant is an err) 108 309.67 T
(or) 190.81 309.67 T
(. Y) 200.35 309.67 T
(ou use) 212.17 309.67 T
4 9.5 Q
(def) 246.88 309.67 T
(ine constant) 263.98 309.67 T
1 11 Q
( to de\336ne a constant, in the same) 332.38 309.67 T
(way that you use) 108 295.67 T
4 9.5 Q
(def) 194.18 295.67 T
(ine variable) 211.29 295.67 T
1 11 Q
( to de\336ne a variable. Y) 279.68 295.67 T
(ou must initialize the) 387.23 295.67 T
(value of the constant, and you cannot change its value thr) 108 281.67 T
(oughout the execution) 388.16 281.67 T
(of a Dylan pr) 108 267.67 T
(ogram. For example,) 171.91 267.67 T
5 9 Q
(?) 108 247 T
4 F
( def) 113.4 247 T
(ine constant $pi = 3.14159;) 135 247 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Convention:) 141 452.67 T
1 F
(Class names ar) 205.78 452.67 T
(e surr) 278.3 452.67 T
(ounded with angle brackets \321 for) 306.11 452.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(example,) 141 438.67 T
4 9.5 Q
(<integer>) 187.74 438.67 T
1 11 Q
(.) 239.04 438.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 206.67 T
1 F
(Pr) 205.78 206.67 T
(ogram data constants start with the character dollar) 216.57 206.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sign,) 141 192.67 T
4 9.5 Q
($) 166.88 192.67 T
1 11 Q
(\321 for example,) 178.28 192.67 T
4 9.5 Q
($pi) 255.54 192.67 T
1 11 Q
(.) 272.64 192.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 465.88 135 431.12 2 L
V
0.25 H
0 Z
N
486 465.88 486 431.12 2 L
V
N
134.88 466 486.12 466 2 L
V
N
134.88 431 486.12 431 2 L
V
N
135 219.88 135 185.13 2 L
V
N
486 219.88 486 185.13 2 L
V
N
134.88 220 486.12 220 2 L
V
N
134.88 185 486.12 185 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 16
%%Page: "15" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(15) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(2.2.3  Local variables) 108 639.33 T
1 11 Q
(Y) 108 619.67 T
(ou can de\336ne) 114.32 619.67 T
2 F
(local variables) 182.32 619.67 T
1 F
( by using) 254.72 619.67 T
4 9.5 Q
(let) 302.18 619.67 T
1 11 Q
(. A local variable has scope within a) 319.28 619.67 T
(body) 108 605.67 T
(. One way to cr) 131.71 605.67 T
(eate a body is to use) 205.18 605.67 T
4 9.5 Q
(begin) 305.76 605.67 T
1 11 Q
( to start it and) 334.26 605.67 T
4 9.5 Q
(end) 404.69 605.67 T
1 11 Q
( to \336nish it.) 421.79 605.67 T
5 9 Q
(?) 108 585 T
4 F
(begin) 118.8 585 T
(let radius = 5.0;) 129.6 574 T
(let circumference = 2.0 * $pi * radius;) 129.6 563 T
(circumference;) 129.6 552 T
(end;) 118.8 541 T
5 F
(31.4159) 108 530 T
1 11 Q
(The local variables) 108 509.67 T
4 9.5 Q
(radius) 201.43 509.67 T
1 11 Q
( and) 235.63 509.67 T
4 9.5 Q
(circumference) 259.76 509.67 T
1 11 Q
( ar) 333.86 509.67 T
(e de\336ned, initialized, and used) 346.25 509.67 T
-0.08 (within the body) 108 495.67 P
-0.08 (. The value r) 184.26 495.67 P
-0.08 (eturned by the body is the value of the statement exe-) 244.4 495.67 P
(cuted last in the body) 108 481.67 T
(, which is) 211.61 481.67 T
4 9.5 Q
(circumference) 260.54 481.67 T
1 11 Q
(. Note that, once the body has) 334.64 481.67 T
-0.23 (r) 108 467.67 P
-0.23 (eturned, the local variables ar) 112.15 467.67 P
-0.23 (e no longer de\336ned, and trying to access them is an) 254.88 467.67 P
(err) 108 453.67 T
(or:) 121.76 453.67 T
5 9 Q
(?) 108 433 T
4 F
(radius) 118.8 433 T
5 F
(ERROR: The variable RADIUS is unbound.) 108 422 T
3 15 Q
(2.3  De\336nitions of methods) 108 384 T
1 11 Q
(In Dylan, you de\336ne) 108 363.67 T
2 F
(methods) 210.66 363.67 T
1 F
(, which ar) 254.05 363.67 T
(e a kind of function. W) 302.01 363.67 T
(e de\336ne a simple) 412.15 363.67 T
(method) 108 349.67 T
4 9.5 Q
(say-hello) 148.45 349.67 T
1 11 Q
(:) 199.75 349.67 T
5 9 Q
(?) 108 329 T
4 F
(def) 118.8 329 T
(ine method say-hello \050\051) 135 329 T
(format\050*window*, "hello, world\134n"\051;) 129.6 318 T
(end;) 118.8 307 T
1 11 Q
(W) 108 286.67 T
(e call) 117.99 286.67 T
4 9.5 Q
(say-hello) 145.54 286.67 T
1 11 Q
(:) 196.84 286.67 T
5 9 Q
(?) 108 266 T
4 F
(say-hello \050\051;) 118.8 266 T
5 F
(hello, world) 108 255 T
1 11 Q
(W) 108 234.67 T
(e use) 117.99 234.67 T
4 9.5 Q
(def) 145.32 234.67 T
(ine method) 162.42 234.67 T
1 11 Q
( to de\336ne a method named) 219.42 234.67 T
4 9.5 Q
(say-hello) 352.63 234.67 T
1 11 Q
(. Just after the name) 403.93 234.67 T
4 9.5 Q
(say-hello) 108 220.67 T
1 11 Q
( comes the method\325s parameter list,) 159.3 220.67 T
4 9.5 Q
(\050\051) 334.55 220.67 T
1 11 Q
(. The method\325s parameter list is) 345.95 220.67 T
(empty) 108 206.67 T
(, meaning that this method takes no ar) 138.07 206.67 T
(guments. Note that the call to) 324.49 206.67 T
4 9.5 Q
(say-) 470.83 206.67 T
(hello) 108 192.67 T
1 11 Q
( pr) 136.5 192.67 T
(ovides an empty list, meaning that ther) 150.01 192.67 T
(e ar) 340.26 192.67 T
(e no ar) 357.93 192.67 T
(guments in the call.) 390.75 192.67 T
(The body of the) 135 178.67 T
4 9.5 Q
(say-hello) 214.27 178.67 T
1 11 Q
( method has one statement \321 a call to) 265.57 178.67 T
4 9.5 Q
(format) 452.71 178.67 T
1 11 Q
(, a) 486.91 178.67 T
-0.02 (library function \050not part of the cor) 108 164.67 P
-0.02 (e Dylan language\051. The) 277.62 164.67 P
4 9.5 Q
-0.04 (format) 393.11 164.67 P
1 11 Q
-0.02 ( function sends) 427.31 164.67 P
(formatted output to a destination. Her) 108 150.67 T
(e, the output is sent to the value of the) 294.14 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 17
%%Page: "16" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(16) 72 677.67 T
0 9.5 Q
(2.3 Definitions of methods) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 F
0 X
(*window*) 108 640.67 T
1 11 Q
(, a variable that contains the window wher) 153.6 640.67 T
(e the output should appear) 361.06 640.67 T
(.) 492.29 640.67 T
(In this example,) 108 626.67 T
4 9.5 Q
(*window*) 188.2 626.67 T
1 11 Q
( is set to use the same display as the listener) 233.8 626.67 T
(, so we see) 445.8 626.67 T
(the output.) 108 612.67 T
-0.19 (A method r) 108 438.67 P
-0.19 (eturns whatever is r) 163.53 438.67 P
-0.19 (eturned by the statement executed last in its body) 259.9 438.67 P
-0.19 (.) 498.68 438.67 P
(In general, it can r) 108 424.67 T
(eturn a single value, multiple values, or no value at all. The) 195.68 424.67 T
4 9.5 Q
(say-hello) 108 410.67 T
1 11 Q
( method r) 159.3 410.67 T
(eturns what) 206.64 410.67 T
4 9.5 Q
(format) 267.7 410.67 T
1 11 Q
( r) 301.9 410.67 T
(eturns \321 no value at all. Note that, in) 308.8 410.67 T
-0.35 (the call to) 108 396.67 P
4 9.5 Q
-0.72 (say-hello) 156.85 396.67 P
1 11 Q
-0.35 (, the listener prints the output of) 208.15 396.67 P
4 9.5 Q
-0.72 (format) 365.71 396.67 P
1 11 Q
-0.35 (, and does not print a) 399.91 396.67 P
(r) 108 382.67 T
(eturned value \050because no value is r) 112.15 382.67 T
(eturned\051.) 286.89 382.67 T
3 13 Q
(2.3.1  A method that takes an argument) 108 351.33 T
1 11 Q
(W) 108 331.67 T
(e can de\336ne a method similar to) 117.99 331.67 T
4 9.5 Q
(say-hello) 276.22 331.67 T
1 11 Q
(, called) 327.52 331.67 T
4 9.5 Q
(say-greeting) 364.55 331.67 T
1 11 Q
(, which takes) 432.95 331.67 T
(an ar) 108 317.67 T
(gument:) 132.3 317.67 T
5 9 Q
(?) 108 297 T
4 F
(def) 118.8 297 T
(ine method say-greeting \050greeting :: <object>\051;) 135 297 T
(format\050*window*, "%s\134n", greeting\051;) 129.6 286 T
(end;) 118.8 275 T
1 11 Q
(The) 108 254.67 T
4 9.5 Q
(say-greeting) 129.16 254.67 T
1 11 Q
(method has one r) 203.26 254.67 T
(equir) 287.6 254.67 T
(ed parameter named) 313.01 254.67 T
4 9.5 Q
(greeting) 416.99 254.67 T
1 11 Q
(. Every) 462.59 254.67 T
-0.19 (r) 108 240.67 P
-0.19 (equir) 112.15 240.67 P
-0.19 (ed parameter must have a type constraint, which indicates the type that the) 137.56 240.67 P
(ar) 108 226.67 T
(gument must be. The) 117.65 226.67 T
4 9.5 Q
(greeting) 223.48 226.67 T
1 11 Q
( parameter has the type constraint) 269.08 226.67 T
4 9.5 Q
(<object>) 437.7 226.67 T
1 11 Q
(:) 483.3 226.67 T
4 9.5 Q
(<object>) 108 212.67 T
1 11 Q
( is another built-in class. All objects ar) 153.6 212.67 T
(e of the type) 337.53 212.67 T
4 9.5 Q
(<object>) 400.31 212.67 T
1 11 Q
(, so using) 445.91 212.67 T
(this class as the type constraint allows the ar) 108 198.67 T
(gument to be any object.) 322.99 198.67 T
(W) 135 184.67 T
(e can call) 144.99 184.67 T
4 9.5 Q
(say-greeting) 192.08 184.67 T
1 11 Q
( on a string:) 260.48 184.67 T
5 9 Q
(?) 108 164 T
4 F
( def) 113.4 164 T
(ine variable *greeting* :: <string> = "hi, there";) 135 164 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Quick summary of format:) 141 578.67 T
4 9.5 Q
( format) 274.22 578.67 T
0 11 Q
(destination string ar) 316.87 578.67 T
(g1 ... ar) 407.73 578.67 T
(gn) 441.45 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(destination) 168 564.67 T
1 F
( is the destination wher) 217.5 564.67 T
(e the output should appear) 331.15 564.67 T
(.) 462.38 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 F
(string) 168 550.67 T
1 F
( can contain or) 194.9 550.67 T
(dinary text and formatting instr) 266.07 550.67 T
(uctions) 420.32 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that begin with) 141 536.67 T
4 9.5 Q
(%) 217.76 536.67 T
1 11 Q
(. For each) 223.46 536.67 T
4 9.5 Q
(%) 272.98 536.67 T
1 11 Q
(, ther) 278.68 536.67 T
(e is another ar) 303.58 536.67 T
(gument giving a) 372.12 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value to pr) 141 522.67 T
(esent. The character after the) 193.67 522.67 T
4 9.5 Q
(%) 336.11 522.67 T
1 11 Q
( contr) 341.81 522.67 T
(ols how the ar) 369.58 522.67 T
(gu-) 438.19 522.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ment is pr) 141 508.67 T
(esented. Y) 190.09 508.67 T
(ou can use the backslash character to insert) 239.1 508.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(unusual characters in a string, such as) 141 494.67 T
4 9.5 Q
(\134n) 328.21 494.67 T
1 11 Q
( \050the newline character\051.) 339.61 494.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 480.67 T
4 9.5 Q
(format) 189.16 480.67 T
1 11 Q
( function r) 223.36 480.67 T
(eturns no values.) 273.79 480.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For details, see Appendix B.) 168 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 591.88 135 459.12 2 L
V
0.25 H
0 Z
N
486 591.88 486 459.12 2 L
V
N
134.88 592 486.12 592 2 L
V
N
134.88 459 486.12 459 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 18
%%Page: "17" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(17) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
(say-greeting \050*greeting*\051;) 118.8 642 T
5 F
(hi, there) 108 631 T
1 11 Q
(W) 108 610.67 T
(e can call) 117.99 610.67 T
4 9.5 Q
(say-greeting) 165.08 610.67 T
1 11 Q
( on an integer) 233.48 610.67 T
(, although the integer does not give a par-) 299.41 610.67 T
(ticularly friendly gr) 108 596.67 T
(eeting:) 203.35 596.67 T
5 9 Q
(?) 108 576 T
4 F
(say-greeting \050*my-number*\051;) 118.8 576 T
5 F
(7) 108 565 T
3 13 Q
(2.3.2  T) 108 535.33 T
(wo methods with the same name) 143.37 535.33 T
1 11 Q
(For fun, we can change) 108 515.67 T
4 9.5 Q
(say-greeting) 223.47 515.67 T
1 11 Q
( to take a dif) 291.87 515.67 T
(fer) 351.82 515.67 T
(ent action for integers, such) 364.9 515.67 T
(as to print a message:) 108 501.67 T
5 9 Q
(Your lucky number is 7.) 108 481 T
1 11 Q
(T) 108 460.67 T
(o make this change, we de\336ne another method, also called) 113.73 460.67 T
4 9.5 Q
(say-greeting) 399.87 460.67 T
1 11 Q
(. This) 468.27 460.67 T
(method has one r) 108 446.67 T
(equir) 192.34 446.67 T
(ed parameter named) 217.75 446.67 T
4 9.5 Q
(greeting) 321.73 446.67 T
1 11 Q
(, which has the type con-) 367.33 446.67 T
(straint) 108 432.67 T
4 9.5 Q
(<integer>) 142.03 432.67 T
1 11 Q
(.) 193.33 432.67 T
5 9 Q
(?) 108 412 T
4 F
(def) 118.8 412 T
(ine method say-greeting \050greeting :: <integer>\051) 135 412 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 129.6 401 T
(end;) 118.8 390 T
5 F
(?) 108 371 T
4 F
(say-greeting \050*my-number*\051;) 118.8 371 T
5 F
(Your lucky number is 7.) 108 360 T
1 11 Q
(A Dylan method is similar to a pr) 108 339.67 T
(ocedur) 270.78 339.67 T
(e or subr) 304.44 339.67 T
(outine in other languages, but) 347.08 339.67 T
(ther) 108 325.67 T
(e is an important dif) 127.4 325.67 T
(fer) 225.78 325.67 T
(ence. Y) 238.86 325.67 T
(ou can de\336ne mor) 272.51 325.67 T
(e than one method with the) 360.36 325.67 T
-0.33 (same name. Each one is a method for the same) 108 311.67 P
2 F
-0.33 (generic function) 333.6 311.67 P
1 F
-0.33 (. Figur) 415.45 311.67 P
-0.33 (e 2.1 shows) 446.82 311.67 P
(how you can pictur) 108 297.67 T
(e a generic function.) 202.43 297.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 19
%%Page: "18" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(18) 72 677.67 T
0 9.5 Q
(2.4 Classes) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 450 522 457.99 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 151.88 461.66 T
(e 2.1  The) 178.09 461.66 T
4 9.5 Q
(say-greeting) 226.52 461.66 T
1 11 Q
( generic function and its methods.) 294.92 461.66 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When a generic function is called, it chooses the) 108 429.67 T
2 F
(most speci\336c) 342.92 429.67 T
1 F
( method to call for) 407.36 429.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the ar) 108 415.67 T
(guments. For example, when we call the) 135.65 415.67 T
4 9.5 Q
(say-greeting) 334.23 415.67 T
1 11 Q
( generic function) 402.63 415.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(with an integer) 108 401.67 T
(, the method whose parameter is of the type) 181.14 401.67 T
4 9.5 Q
(<integer>) 397.62 401.67 T
1 11 Q
( is called:) 448.92 401.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 381 T
4 F
(say-greeting \0501000\051;) 118.8 381 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Your lucky number is 1000.) 108 370 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(When we call the) 108 349.67 T
4 9.5 Q
(say-greeting) 194.56 349.67 T
1 11 Q
( generic function with an ar) 262.96 349.67 T
(gument that is not an) 396.88 349.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(integer) 108 335.67 T
(, the method whose parameter is of the type) 141.37 335.67 T
4 9.5 Q
(<object>) 357.85 335.67 T
1 11 Q
( is called:) 403.45 335.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 315 T
4 F
(say-greeting \050"Buenos Dias"\051;) 118.8 315 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(Buenos Dias) 108 304 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 285 T
4 F
(say-greeting \050$pi\051;) 118.8 285 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(3.14159) 108 274 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(2.4  Classes) 108 236 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(W) 108 215.67 T
(e have alr) 117.99 215.67 T
(eady seen examples of classes in Dylan:) 164.99 215.67 T
4 9.5 Q
(<integer>) 359.95 215.67 T
1 11 Q
(,) 411.26 215.67 T
4 9.5 Q
(<single-f) 416.76 215.67 T
(loat>) 468.05 215.67 T
1 11 Q
(,) 496.55 215.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<string>) 108 201.67 T
1 11 Q
(, and) 153.6 201.67 T
4 9.5 Q
(<object>) 180.47 201.67 T
1 11 Q
(. Individual pieces of data ar) 226.07 201.67 T
(e called) 364.6 201.67 T
2 F
(objects) 404.14 201.67 T
1 F
(. Each object) 439.57 201.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(is an) 108 187.67 T
2 F
(instance) 133.27 187.67 T
1 F
( of a class. For example,) 174.8 187.67 T
4 9.5 Q
(7) 292.59 187.67 T
1 11 Q
(,) 298.29 187.67 T
4 9.5 Q
(12) 303.79 187.67 T
1 11 Q
(, and) 315.19 187.67 T
4 9.5 Q
(1000) 342.06 187.67 T
1 11 Q
( ar) 364.86 187.67 T
(e instances of the class) 377.26 187.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<integer>) 108 173.67 T
1 11 Q
(. The objects) 159.3 173.67 T
4 9 Q
(") 221.78 173.67 T
4 9.5 Q
(hello, world) 227.18 173.67 T
4 9 Q
(") 295.58 173.67 T
1 11 Q
( and) 300.98 173.67 T
4 9 Q
(") 325.1 173.67 T
4 9.5 Q
(Buenos Dias") 330.5 173.67 T
1 11 Q
( ar) 398.9 173.67 T
(e instances of the) 411.3 173.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class) 108 159.67 T
4 9.5 Q
(<string>) 133.66 159.67 T
1 11 Q
(.) 179.26 159.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108 477.99 522 637 C
0 0 0 1 0 0 0 K
125.5 484.29 504 628 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
133.5 496.67 496.36 534.58 R
7 X
V
0 X
N
133.5 549.67 496.36 589 R
7 X
V
0 X
N
138.43 551.29 489.86 585 R
7 X
V
4 9 Q
0 X
(def) 138.43 579 T
(ine method say-greeting \050greeting :: <object>\051;) 154.63 579 T
(format\050*window*, "%s\134n", greeting\051;) 149.23 568 T
(end;) 138.43 557 T
138.43 498.43 489.86 530.58 R
7 X
V
0 X
(def) 138.43 524.58 T
(ine method say-greeting \050greeting :: <integer>\051) 154.63 524.58 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 149.23 513.58 T
(end;) 138.43 502.58 T
236.86 600.72 398.29 616.43 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 241.07 605.79 T
4 9.5 Q
(say-greeting) 325.11 605.79 T
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 20
%%Page: "19" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(19) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(Dylan pr) 135 640.67 T
(ovides several functions that let you ask questions about objects) 178.24 640.67 T
(and classes. For example, you can ask, what is the class of an object?) 108 626.67 T
5 9 Q
(?) 108 606 T
4 F
( object-class \0501000\051;) 113.4 606 T
5 F
({class <INTEGER>}) 108 595 T
1 11 Q
(Is a given object an instance of a given class?) 108 574.67 T
5 9 Q
(?) 108 554 T
4 F
( instance? \0501000, <integer>\051;) 113.4 554 T
5 F
(#t) 108 543 T
(?) 108 524 T
4 F
( instance? \050"hello, world", <integer>\051;) 113.4 524 T
5 F
(#f) 108 513 T
1 11 Q
-0.27 (As you might guess,) 108 492.67 P
4 9.5 Q
-0.55 (#t) 209.02 492.67 P
1 11 Q
-0.27 ( means tr) 220.42 492.67 P
-0.27 (ue and) 264.78 492.67 P
4 9.5 Q
-0.55 (#f) 300.27 492.67 P
1 11 Q
-0.27 ( means false. The function) 311.67 492.67 P
4 9.5 Q
-0.55 (instance?) 439.87 492.67 P
1 11 Q
-0.27 ( is) 491.17 492.67 P
(a) 108 478.67 T
2 F
(predicate) 116.25 478.67 T
1 F
(, which r) 162.68 478.67 T
(eturns) 205.14 478.67 T
4 9.5 Q
(#t) 238.79 478.67 T
1 11 Q
( or) 250.19 478.67 T
4 9.5 Q
(#f) 266.04 478.67 T
1 11 Q
(.) 277.44 478.67 T
3 13 Q
(2.4.1  Class inheritance) 108 382.33 T
1 11 Q
(One important aspect of classes is that they ar) 108 362.67 T
(e r) 330.26 362.67 T
(elated to one another by) 342.42 362.67 T
2 F
(inherit-) 462.7 362.67 T
(ance) 108 348.67 T
1 F
(. Inheritance enables classes that ar) 130.6 348.67 T
(e logically r) 300.03 348.67 T
(elated to one another to shar) 356.37 348.67 T
(e) 494.75 348.67 T
(the behaviors and data attributes that they have in common. Each class inherits) 108 334.67 T
(fr) 108 320.67 T
(om one or mor) 115.81 320.67 T
(e classes, called its) 187.67 320.67 T
2 F
(superclasses) 279.77 320.67 T
1 F
(. If no other class is appr) 342.07 320.67 T
(opriate,) 460.35 320.67 T
(then the class inherits fr) 108 306.67 T
(om the class) 223.71 306.67 T
4 9.5 Q
(<object>) 285.85 306.67 T
1 11 Q
(. This class is the) 331.45 306.67 T
2 F
(root) 414.99 306.67 T
1 F
( of all classes:) 435.17 306.67 T
(All classes inherit fr) 108 292.67 T
(om it, either dir) 204.27 292.67 T
(ectly or indir) 279.92 292.67 T
(ectly) 342.5 292.67 T
(. Note that all objects ar) 364.33 292.67 T
(e) 478.52 292.67 T
(instances of the class) 108 278.67 T
4 9.5 Q
(<object>) 211.41 278.67 T
1 11 Q
(:) 257.01 278.67 T
5 9 Q
(?) 108 258 T
4 F
( instance? \0501000, <object>\051;) 113.4 258 T
5 F
(#t) 108 247 T
(?) 108 228 T
4 F
( instance? \050"hello, world", <object>\051;) 113.4 228 T
5 F
(#t) 108 217 T
1 11 Q
(Figur) 108 196.67 T
(e 2.2 shows the class\320super) 134.21 196.67 T
(class r) 266.14 196.67 T
(elationships among several of the built-in) 295.95 196.67 T
(classes.) 108 182.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Convention:) 141 444.67 T
1 F
( The names of most built-in pr) 203.03 444.67 T
(edicates end with a ques-) 349.86 444.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion mark \321 for example,) 141 430.67 T
4 9.5 Q
(instance?) 268.62 430.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 457.88 135 423.12 2 L
V
0.25 H
0 Z
N
486 457.88 486 423.12 2 L
V
N
134.88 458 486.12 458 2 L
V
N
134.88 423 486.12 423 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 21
%%Page: "20" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(20) 72 677.67 T
0 9.5 Q
(2.4 Classes) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 482.72 522 490.71 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 113.84 494.38 T
(e 2.2  Classes and subclasses: Each arr) 140.05 494.38 T
(ow points fr) 323.18 494.38 T
(om a class to a subclass.) 382.14 494.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Dylan pr) 108 462.39 T
(ovides functions for exploring the inheritance r) 151.24 462.39 T
(elationships among) 379.96 462.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.02 (classes. W) 108 448.39 P
-0.02 (e can use) 156.32 448.39 P
4 9.5 Q
-0.04 (subtype?) 203.13 448.39 P
1 11 Q
-0.02 ( to ask whether one class inherits fr) 248.73 448.39 P
-0.02 (om another class:) 419.64 448.39 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 427.72 T
4 F
( subtype? \050<integer>, <number>\051;) 113.4 427.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#t) 108 416.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 397.72 T
4 F
( subtype? \050<integer>, <object>\051;) 113.4 397.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#t) 108 386.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 367.72 T
4 F
( subtype? \050<single-f) 113.4 367.72 T
(loat>, <object>\051;) 221.4 367.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#t) 108 356.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 337.72 T
4 F
( subtype? \050<string>, <integer>\051;) 113.4 337.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#f) 108 326.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(It may be confusing that we use a function called) 108 306.39 T
4 9.5 Q
(subtype?) 348.58 306.39 T
1 11 Q
( her) 394.18 306.39 T
(e, but Dylan does) 412.75 306.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(not pr) 108 292.39 T
(ovide a function called) 137.5 292.39 T
4 9.5 Q
(subclass?) 250.97 292.39 T
1 11 Q
(. Every class is a) 302.27 292.39 T
2 F
(type) 383.71 292.39 T
1 F
(, but certain types) 405.71 292.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 108 278.39 T
(e not classes \050see Section 6.7, page 82\051. The) 117.65 278.39 T
4 9.5 Q
(subtype?) 326.32 278.39 T
1 11 Q
( function works for both) 371.92 278.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(classes and nonclass types.) 108 264.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 135 250.39 T
(e can ask for all the super) 144.99 250.39 T
(classes of a given class:) 268.32 250.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 229.72 T
4 F
( all-superclasses \050<string>\051;) 113.4 229.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#[<STRING> <MUTABLE-SEQUENCE>, <SEQUENCE>, <MUTABLE-COLLECTION>,) 108 218.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<COLLECTION>, OBJECT>]) 108 207.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 188.72 T
4 F
( all-superclasses \050<integer>\051;) 113.4 188.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#[<INTEGER>, <RATIONAL>, <REAL>, <NUMBER>, <OBJECT>]) 108 177.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 158.72 T
4 F
( all-superclasses \050<single-f) 113.4 158.72 T
(loat>\051;) 264.6 158.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#[<SINGLE-FLOAT>, <FLOAT>, <REAL>, <NUMBER>, <OBJECT>]) 108 147.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
119 510.71 511 637 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 270.29 623 T
(<string>) 216 571.73 T
(<number>) 327.43 571.02 T
(<integer>) 264.57 523.44 T
(<single-f) 363.14 522.73 T
(loat>) 414.44 522.73 T
304.67 535.61 293.14 532.29 301.16 541.22 302.91 538.41 4 Y
V
347.57 566.43 302.92 538.41 2 L
0.5 H
2 Z
N
398.98 541.07 407 532.14 395.47 535.47 397.23 538.27 4 Y
V
352.57 566.28 397.23 538.27 2 L
N
246.96 584.76 235.43 581.43 243.44 590.36 245.2 587.56 4 Y
V
289.86 615.57 245.2 587.56 2 L
N
341.27 590.22 349.28 581.29 337.76 584.61 339.51 587.41 4 Y
V
294.86 615.43 339.52 587.41 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 22
%%Page: "21" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(21) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The) 108 640.67 T
4 9.5 Q
(#[) 129.16 640.67 T
0 11 Q
(...) 140.56 640.67 T
4 9.5 Q
(]) 148.81 640.67 T
1 11 Q
( syntax r) 154.51 640.67 T
(epr) 196.1 640.67 T
(esents a vector) 212.13 640.67 T
(. The super) 282.48 640.67 T
(classes ar) 336.46 640.67 T
(e or) 381.71 640.67 T
(der) 399.88 640.67 T
(ed fr) 416.02 640.67 T
(om most spe-) 438.57 640.67 T
(ci\336c to least speci\336c. The \336nal element of the vector r) 108 626.67 T
(eturned by) 364.11 626.67 T
4 9.5 Q
(all-super-) 420.04 626.67 T
(classes) 108 612.67 T
1 11 Q
( is always) 147.9 612.67 T
4 9.5 Q
(<object>) 198.17 612.67 T
1 11 Q
(.) 243.77 612.67 T
(The r) 135 598.67 T
(esults of the pr) 160.31 598.67 T
(eceding) 232.26 598.67 T
4 9.5 Q
(all-superclasses) 272.87 598.67 T
1 11 Q
( calls hint at the range of) 364.07 598.67 T
(built-in classes available.) 108 584.67 T
3 13 Q
(2.4.2  Classes and methods) 108 553.33 T
1 11 Q
(In contrast to in certain object-oriented languages, in Dylan a class does not con-) 108 533.67 T
(tain methods. A method belongs to a generic function, as shown in Figur) 108 519.67 T
(e 2.1,) 461.53 519.67 T
(page 18. Although methods ar) 108 505.67 T
(e independent of classes, methods operate on) 255.16 505.67 T
(instances of classes. A method states the kinds of objects that it handles by the) 108 491.67 T
(type of its r) 108 477.67 T
(equir) 163.1 477.67 T
(ed ar) 188.51 477.67 T
(guments. Consider the) 212.9 477.67 T
4 9.5 Q
(say-greeting) 325.94 477.67 T
1 11 Q
( method de\336ned ear-) 394.34 477.67 T
(lier:) 108 463.67 T
4 9 Q
(def) 108 443 T
(ine method say-greeting \050greeting :: <integer>\051;) 124.2 443 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 118.8 432 T
(end;) 108 421 T
1 11 Q
(This method operates on instances of the) 108 400.67 T
4 9.5 Q
(<integer>) 309.11 400.67 T
1 11 Q
( class. The method knows) 360.41 400.67 T
(what classes it can handle.) 108 386.67 T
3 15 Q
(2.5  User-de\336ned classes) 108 347 T
1 11 Q
(A) 108 326.67 T
2 F
(user) 119.31 326.67 T
(-de\336ned class) 140.49 326.67 T
1 F
( is like a str) 208.61 326.67 T
(uctur) 263.27 326.67 T
(e or a r) 289.15 326.67 T
(ecor) 322.67 326.67 T
(d datatype in other languages.) 342.97 326.67 T
(When you de\336ne a class, you specify its name, its super) 108 312.67 T
(classes, and its) 377.83 312.67 T
2 F
(slots) 451.75 312.67 T
1 F
(. A) 474.96 312.67 T
(slot has a name and a type. Normally) 108 298.67 T
(, each instance stor) 288.11 298.67 T
(es its own value for the) 379.48 298.67 T
(slot. A class inherits the slots de\336ned by its super) 108 284.67 T
(classes, and it can de\336ne mor) 346.89 284.67 T
(e) 488.61 284.67 T
(slots if it needs them.) 108 270.67 T
(In this section, we de\336ne a class to r) 135 256.67 T
(epr) 308.64 256.67 T
(esent a simple form of time. This) 324.66 256.67 T
(class is part of a sample application that we develop thr) 108 242.67 T
(oughout this book. For) 378.09 242.67 T
(mor) 108 228.67 T
(e information, see Chapter 4,) 127.87 228.67 T
0 F
(Design of the Airport Example) 273.37 228.67 T
1 F
(.) 409.65 228.67 T
3 13 Q
(2.5.1  The) 108 197.33 T
4 F
(<time-of-day>) 159.56 197.33 T
3 F
( class) 260.96 197.33 T
1 11 Q
-0.13 (Ther) 108 177.67 P
-0.13 (e ar) 130.56 177.67 P
-0.13 (e several ways to r) 148.1 177.67 P
-0.13 (epr) 237.5 177.67 P
-0.13 (esent time. W) 253.53 177.67 P
-0.13 (e could say that an event happened at) 318.46 177.67 P
(10:30 \050a time of day\051. W) 108 163.67 T
(e could say that an event happened 2 hours ago \050a time) 221.84 163.67 T
(of) 108 149.67 T
(fset\051. Her) 117.47 149.67 T
(e, we de\336ne a class named) 162.38 149.67 T
4 9.5 Q
(<time-of-day>) 293.68 149.67 T
1 11 Q
(:) 367.78 149.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 23
%%Page: "22" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(22) 72 677.67 T
0 9.5 Q
(2.5 User-defined classes) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <time-of-day> \050<object>\051) 124.2 642 T
6 F
(// 1) 500.4 642 T
(// Total number of seconds past midnight) 118.8 631 T
(// 2) 500.4 631 T
4 F
(slot total-seconds :: <integer>;) 118.8 620 T
6 F
(// 3) 500.4 620 T
4 F
(end class <time-of-day>;) 108 609 T
6 F
(// 4) 500.4 609 T
1 11 Q
(Line 1 has the) 108 588.67 T
4 9.5 Q
(def) 177.92 588.67 T
(ine class) 195.02 588.67 T
1 11 Q
( operator) 246.32 588.67 T
(, the name of the class, and a list of one or) 289.92 588.67 T
(mor) 108 574.67 T
(e super) 127.87 574.67 T
(classes of this class. The class) 163.21 574.67 T
4 9.5 Q
(<time-of-day>) 307.07 574.67 T
1 11 Q
( inherits fr) 381.17 574.67 T
(om the class) 431.55 574.67 T
4 9.5 Q
(<object>) 108 560.67 T
1 11 Q
(. Each class must have at least one super) 153.6 560.67 T
(class. If no other class is appr) 349.06 560.67 T
(o-) 490.26 560.67 T
(priate, the class must have) 108 546.67 T
4 9.5 Q
(<object>) 239.16 546.67 T
1 11 Q
( as its super) 284.76 546.67 T
(class.) 341.95 546.67 T
-0.32 (Line 2 is a comment. The) 135 532.67 P
6 9 Q
-0.63 (//) 256.78 532.67 P
1 11 Q
-0.32 ( characters begin a comment, which continues to) 267.58 532.67 P
(the end of the line. In this example, and in others that follow) 108 518.67 T
(, we include com-) 400.16 518.67 T
(ments that number each line of code. The line numbers ar) 108 504.67 T
(e useful only for dis-) 387.32 504.67 T
(cussing the code examples in the book, and would not be used in sour) 108 490.67 T
(ce \336les.) 448.22 490.67 T
(Line 3 contains the only slot de\336nition of this class. This class has one slot,) 135 476.67 T
-0.18 (named) 108 462.67 P
4 9.5 Q
-0.37 (total-seconds) 144.18 462.67 P
1 11 Q
-0.18 (. The slot\325s type constraint is) 218.28 462.67 P
4 9.5 Q
-0.37 (<integer>) 358.08 462.67 P
1 11 Q
-0.18 (. The double colon,) 409.38 462.67 P
4 9.5 Q
-0.38 (::) 108 448.67 P
1 11 Q
-0.18 (, speci\336es the type constraint of a slot, just as it speci\336es the type constraint of a) 119.4 448.67 P
(module variable or of a method\325s parameter) 108 434.67 T
(.) 321.62 434.67 T
(Line 4 is the end of the class de\336nition. The text after the wor) 135 420.67 T
(d) 430.87 420.67 T
4 9.5 Q
(end) 440.34 420.67 T
1 11 Q
( is an) 457.44 420.67 T
(optional part of the de\336nition; it documents which de\336nition is being \336nished.) 108 406.67 T
-0.37 (Any text appearing after the) 108 392.67 P
4 9.5 Q
-0.77 (end) 246.25 392.67 P
1 11 Q
-0.37 ( must match the de\336nition being \336nished, such as) 263.35 392.67 P
4 9.5 Q
(end class <time-of-day>) 108 378.67 T
1 11 Q
(, or) 239.1 378.67 T
4 9.5 Q
(end class) 257.7 378.67 T
1 11 Q
(. Y) 309 378.67 T
(ou do not need to put any text after) 320.83 378.67 T
(the) 108 364.67 T
4 9.5 Q
(end) 126.01 364.67 T
1 11 Q
( \321 however) 143.11 364.67 T
(, such text is useful for long or complex de\336nitions, wher) 201.47 364.67 T
(e it) 477.65 364.67 T
(can be dif) 108 350.67 T
(\336cult to see which language constr) 155.02 350.67 T
(uct is being \336nished.) 323.13 350.67 T
3 13 Q
(2.5.2  The type constraint of a slot) 108 319.33 T
1 11 Q
(The type constraint of the) 108 299.67 T
4 9.5 Q
(total-seconds) 235.25 299.67 T
1 11 Q
( slot is) 309.35 299.67 T
4 9.5 Q
(<integer>) 342.92 299.67 T
1 11 Q
(. This slot may hold) 394.22 299.67 T
(instances of) 108 285.67 T
4 9.5 Q
(<integer>) 167.74 285.67 T
1 11 Q
(, and may not hold any other kind of object.) 219.04 285.67 T
(The type constraint of a slot is optional. A slot with no type constraint is) 135 271.67 T
(equivalent to specifying) 108 257.67 T
4 9.5 Q
(<object>) 227.4 257.67 T
1 11 Q
( as the type constraint. A slot whose type con-) 273.01 257.67 T
(straint is) 108 243.67 T
4 9.5 Q
(<object>) 152.65 243.67 T
1 11 Q
( can hold any object. The ability to have slots with the type) 198.25 243.67 T
4 9.5 Q
(<object>) 108 229.67 T
1 11 Q
( pr) 153.6 229.67 T
(ovides \337exibility that can be valuable; for mor) 167.11 229.67 T
(e information, see) 390.1 229.67 T
(Chapter 12,) 108 215.67 T
0 F
(Performance and Flexibility) 169.51 215.67 T
1 F
(.) 292.77 215.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 24
%%Page: "23" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(23) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(2.6  Use of) 108 638 T
4 13 Q
(make) 172.95 638 T
3 15 Q
( to create an instance) 204.15 638 T
1 11 Q
-0.02 (W) 108 617.67 P
-0.02 (e want to make an instance of) 117.99 617.67 P
4 9.5 Q
-0.04 (<time-of-day>) 264.7 617.67 P
1 11 Q
-0.02 (, but \336rst we need a place to stor) 338.8 617.67 P
-0.02 (e) 496 617.67 P
(it. W) 108 603.67 T
(e de\336ne a module variable called) 130.27 603.67 T
4 9.5 Q
(*my-time-of-day*) 293.49 603.67 T
1 11 Q
(, and initialize it to con-) 384.69 603.67 T
(tain a new instance of) 108 589.67 T
4 9.5 Q
(<time-of-day>) 216.36 589.67 T
1 11 Q
(:) 290.46 589.67 T
5 9 Q
(?) 108 569 T
4 F
( def) 113.4 569 T
(ine variable *my-time-of-day* = make\050<time-of-day>\051;) 135 569 T
1 11 Q
-0.37 (W) 108 548.67 P
-0.37 (e use the) 117.99 548.67 P
4 9.5 Q
-0.76 (make) 162.24 548.67 P
1 11 Q
-0.37 ( function to cr) 185.04 548.67 P
-0.37 (eate an instance of) 251.59 548.67 P
4 9.5 Q
-0.76 (<time-of-day>) 342.24 548.67 P
1 11 Q
-0.37 (. The ar) 416.34 548.67 P
-0.37 (gument to) 451.92 548.67 P
4 9.5 Q
(make) 108 534.67 T
1 11 Q
( is the class of the instance to cr) 130.8 534.67 T
(eate. The) 282.29 534.67 T
4 9.5 Q
(make) 328.58 534.67 T
1 11 Q
( function r) 351.38 534.67 T
(eturns the new) 401.8 534.67 T
(instance.) 108 520.67 T
-0.17 (The instance stor) 135 506.67 P
-0.17 (ed in) 216.88 506.67 P
4 9.5 Q
-0.36 (*my-time-of-day*) 243.62 506.67 P
1 11 Q
-0.17 (has a) 340.15 506.67 P
4 9.5 Q
-0.36 (total-seconds) 367.37 506.67 P
1 11 Q
-0.17 ( slot with no) 441.47 506.67 P
(value. The next logical step is to stor) 108 492.67 T
(e a value in that slot.) 284.26 492.67 T
3 15 Q
(2.7  Getters and setters of slot values) 108 453 T
1 11 Q
(W) 108 432.67 T
(e can stor) 117.99 432.67 T
(e a value in the) 163.95 432.67 T
4 9.5 Q
(total-seconds) 240.14 432.67 T
1 11 Q
( slot of the) 314.24 432.67 T
4 9.5 Q
(<time-of-day>) 367.63 432.67 T
1 11 Q
( instance by) 441.73 432.67 T
(using the assignment operator) 108 418.67 T
(,) 254.89 418.67 T
4 9.5 Q
(:=) 260.39 418.67 T
1 11 Q
(, as follows:) 271.79 418.67 T
5 9 Q
(?) 108 398 T
4 F
(*my-time-of-day*.total-seconds := 180;) 118.8 398 T
5 F
(180) 108 387 T
1 11 Q
(W) 108 366.67 T
(e can examine the value of the slot in the instance:) 117.99 366.67 T
5 9 Q
(?) 108 346 T
4 F
(*my-time-of-day*.total-seconds;) 118.8 346 T
5 F
(180) 108 335 T
1 11 Q
(Although these calls may look like they ar) 108 314.67 T
(e accessing the slots dir) 312.26 314.67 T
(ectly) 425.56 314.67 T
(, they ar) 447.39 314.67 T
(e) 486.66 314.67 T
(not. They ar) 108 300.67 T
(e function calls to a getter and a setter) 166.42 300.67 T
(. A) 349.21 300.67 T
2 F
(getter) 366.02 300.67 T
1 F
( is a method that) 394.74 300.67 T
(r) 108 286.67 T
(etrieves the curr) 112.15 286.67 T
(ent value of a slot in an object. A) 190.73 286.67 T
2 F
(setter) 351.4 286.67 T
1 F
( is a method that stor) 378.89 286.67 T
(es a) 481.17 286.67 T
(value in a slot. Each slot in a class automatically has a getter and a setter de\336ned) 108 272.67 T
(for it.) 108 258.67 T
(The getter) 135 244.67 T
(\325s name is the same as the name of the slot. Thus,) 185.15 244.67 T
4 9.5 Q
(total-seconds) 425.65 244.67 T
1 11 Q
(is the name of the getter for the) 108 230.67 T
4 9.5 Q
(total-seconds) 262.37 230.67 T
1 11 Q
( slot. Y) 336.47 230.67 T
(ou can use the assignment) 368.51 230.67 T
(operator) 108 216.67 T
(,) 148.85 216.67 T
4 9.5 Q
(:=) 154.35 216.67 T
1 11 Q
( , with the getter to invoke the setter) 165.75 216.67 T
(.) 340.26 216.67 T
(For mor) 135 202.67 T
(e information about getters and setters, see Section 7.1, page 85.) 174.08 202.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 25
%%Page: "24" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(24) 72 677.67 T
0 9.5 Q
(2.8 Initialization of slots when making instances) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(2.8  Initialization of slots when making instances) 108 638 T
1 11 Q
(W) 108 617.67 T
(e can initialize a slot with a value when we make an instance. T) 117.99 617.67 T
(o make it possi-) 424.27 617.67 T
(ble to initialize a slot, we need to use the) 108 603.67 T
4 9.5 Q
(init-keyword:) 307.13 603.67 T
2 11 Q
(slot option) 383.98 603.67 T
1 F
( when de\336n-) 438.06 603.67 T
(ing the class. A slot option lets you specify characteristic pertaining to a slot. Slot) 108 589.67 T
(options appear after the optional type speci\336er of a slot.) 108 575.67 T
(Her) 135 561.67 T
(e, we r) 153.57 561.67 T
(ede\336ne the) 185.68 561.67 T
4 9.5 Q
(<time-of-day>) 242.02 561.67 T
1 11 Q
( class to use that slot option:) 316.12 561.67 T
4 9 Q
(def) 108 541 T
(ine class <time-of-day> \050<object>\051) 124.2 541 T
6 F
(// 1) 500.4 541 T
(// Total number of seconds past midnight) 118.8 530 T
(// 2) 500.4 530 T
4 F
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 519 T
6 F
(// 3) 500.4 519 T
4 F
(end class <time-of-day>;) 108 508 T
6 F
(// 4) 500.4 508 T
1 11 Q
-0.25 (Note that the pr) 108 487.67 P
-0.25 (eceding de\336nition) 184.61 487.67 P
2 F
-0.25 (rede\336nes) 274.92 487.67 P
1 F
-0.25 ( the class) 320.75 487.67 P
4 9.5 Q
-0.51 (<time-of-day>) 366.43 487.67 P
1 11 Q
-0.25 (. That is, this) 440.53 487.67 P
(de\336nition of) 108 473.67 T
4 9.5 Q
(<time-of-day>) 170.61 473.67 T
1 11 Q
( r) 244.71 473.67 T
(eplaces the old de\336nition of) 251.61 473.67 T
4 9.5 Q
(<time-of-day>) 389.05 473.67 T
1 11 Q
(. Most) 463.15 473.67 T
(Dylan envir) 108 459.67 T
(onments automatically r) 165.72 459.67 T
(ecycle the storage used by the old de\336nition.) 284.03 459.67 T
(The) 135 445.67 T
4 9.5 Q
(:init-keyword) 156.16 445.67 T
1 11 Q
( slot option de\336nes a keywor) 230.26 445.67 T
(d parameter that you can) 370.59 445.67 T
-0.23 (give to) 108 431.67 P
4 9.5 Q
-0.48 (make) 143.43 431.67 P
1 11 Q
-0.23 ( when you make an instance of this class. Her) 166.23 431.67 P
-0.23 (e, the keywor) 385.04 431.67 P
-0.23 (d is) 450.18 431.67 P
4 9.5 Q
-0.48 (total-) 469.8 431.67 P
(seconds:) 108 417.67 T
1 11 Q
(. W) 153.6 417.67 T
(e pr) 169.09 417.67 T
(ovide a keywor) 187.87 417.67 T
(d ar) 263.11 417.67 T
(gument as follows:) 282.22 417.67 T
5 9 Q
-0.26 (?) 108 397 P
4 F
-0.26 ( def) 113.4 397 P
-0.26 (ine variable *my-time-of-day* = make\050<time-of-day>, total-seconds: 120\051;) 134.74 397 P
1 11 Q
(The pr) 108 376.67 T
(eceding statement r) 139.92 376.67 T
(ede\336nes the) 235.01 376.67 T
4 9.5 Q
(*my-time-of-day*) 296.01 376.67 T
1 11 Q
( variable to contain a) 387.21 376.67 T
-0.15 (new instance of) 108 362.67 P
4 9.5 Q
-0.31 (<time-of-day>) 186.22 362.67 P
1 11 Q
-0.15 ( class. The value of the) 260.32 362.67 P
4 9.5 Q
-0.31 (total-seconds) 371.74 362.67 P
1 11 Q
-0.15 (slot of this) 451.22 362.67 P
-0.25 (instance is initialized to) 108 348.67 P
4 9.5 Q
-0.53 (120) 224.33 348.67 P
1 11 Q
-0.25 (. W) 241.43 348.67 P
-0.25 (e can call the getter to verify that the slot has an ini-) 256.66 348.67 P
(tial value:) 108 334.67 T
5 9 Q
(?) 108 314 T
4 F
(*my-time-of-day*.total-seconds;) 118.8 314 T
5 F
(120) 108 303 T
1 11 Q
(The) 108 282.67 T
4 9.5 Q
(:init-keyword) 129.16 282.67 T
1 11 Q
( slot option de\336nes a) 203.26 282.67 T
2 F
(keyword parameter) 306.76 282.67 T
1 F
( to) 404.85 282.67 T
4 9.5 Q
(make) 419.94 282.67 T
1 11 Q
( for a given) 442.74 282.67 T
(class. A keywor) 108 268.67 T
(d is a name followed by a colon, such as) 184.55 268.67 T
4 9.5 Q
(total-seconds:) 381.95 268.67 T
1 11 Q
(. When) 461.76 268.67 T
(you pr) 108 254.67 T
(ovide a keywor) 140.26 254.67 T
(d ar) 215.5 254.67 T
(gument to a function, you give the keywor) 234.62 254.67 T
(d followed) 441.85 254.67 T
(by a value. Y) 108 240.67 T
(ou can give keywor) 169.84 240.67 T
(d ar) 265.15 240.67 T
(guments in any or) 284.26 240.67 T
(der) 372.67 240.67 T
(. Keywor) 388.19 240.67 T
(d ar) 432.39 240.67 T
(guments) 451.51 240.67 T
(can be useful for functions that take many ar) 108 226.67 T
(guments\321when you call the func-) 324.58 226.67 T
-0.04 (tion, you do not need to r) 108 212.67 P
-0.04 (emember the or) 231.09 212.67 P
-0.04 (der of the ar) 307.59 212.67 P
-0.04 (guments. For mor) 366.64 212.67 P
-0.04 (e informa-) 453.52 212.67 P
(tion about keywor) 108 198.67 T
(d ar) 197.33 198.67 T
(guments, see Section 6.3.3, page 78.) 216.45 198.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 26
%%Page: "25" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(25) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(2.9  Methods for handling time) 108 638 T
1 11 Q
-0.06 (W) 108 617.67 P
-0.06 (e decided to r) 117.99 617.67 P
-0.06 (epr) 183.85 617.67 P
-0.06 (esent time of day with a single slot named) 199.87 617.67 P
4 9.5 Q
-0.13 (total-seconds) 406.81 617.67 P
1 11 Q
-0.06 (. An) 480.91 617.67 P
-0.03 (alternate choice would be to give the class thr) 108 603.67 P
-0.03 (ee slots named) 328.87 603.67 P
4 9.5 Q
-0.06 (hours) 403.31 603.67 P
1 11 Q
-0.03 (,) 431.81 603.67 P
4 9.5 Q
-0.06 (minutes) 437.28 603.67 P
1 11 Q
-0.03 (, and) 477.18 603.67 P
4 9.5 Q
(seconds) 108 589.67 T
1 11 Q
(. People naturally think of time in terms of hours, minutes, and seconds.) 147.9 589.67 T
(W) 108 575.67 T
(e chose to stor) 117.99 575.67 T
(e the total seconds instead, because we envisioned needing to) 186.73 575.67 T
-0.28 (operate on times, such as adding a time of day to a time of) 108 561.67 P
-0.28 (fset. For example, if it is) 387.28 561.67 P
(10:30 now) 108 547.67 T
(, and a meeting is to be held in one hour; then the meeting will be held) 156.07 547.67 T
(at 1) 108 533.67 T
(1:30. It is easier to operate on a single value, rather than on thr) 124.73 533.67 T
(ee values of) 426.27 533.67 T
(hours, minutes, and seconds. On the other hand, it is convenient to see times) 108 519.67 T
(expr) 108 505.67 T
(essed as hours, minutes, and seconds.) 129.7 505.67 T
3 13 Q
(2.9.1  Method for) 108 474.33 T
4 F
(encode-total-seconds) 195.67 474.33 T
1 11 Q
(W) 108 454.67 T
(e can pr) 117.99 454.67 T
(ovide methods that support the convenience of converting fr) 156.3 454.67 T
(om hours,) 450.97 454.67 T
(minutes, and seconds to total seconds \050and vice versa\051.) 108 440.67 T
4 9 Q
(def) 108 420 T
(ine method encode-total-seconds \050hours) 124.2 420 T
( :: <integer>,) 340.2 420 T
6 F
(// 1) 500.4 420 T
4 F
(minutes :: <integer>,) 302.4 409 T
6 F
(// 2) 500.4 409 T
4 F
(seconds :: <integer>\051) 302.4 398 T
6 F
(// 3) 500.4 398 T
4 F
(\05060 * 60 * hours\051 + \05060 * minutes\051 + seconds;) 118.8 387 T
6 F
(// 4) 500.4 387 T
4 F
(end;) 108 376 T
6 F
(// 5) 500.4 376 T
1 11 Q
-0.45 (The method) 108 355.67 P
4 9.5 Q
-0.93 (encode-total-seconds) 168.71 355.67 P
1 11 Q
-0.45 ( has thr) 282.71 355.67 P
-0.45 (ee r) 318.01 355.67 P
-0.45 (equir) 334.99 355.67 P
-0.45 (ed parameters, named) 360.4 355.67 P
4 9.5 Q
-0.93 (hours) 470.45 355.67 P
1 11 Q
-0.45 (,) 498.95 355.67 P
4 9.5 Q
(minutes) 108 341.67 T
1 11 Q
(, and) 147.9 341.67 T
4 9.5 Q
(seconds) 174.77 341.67 T
1 11 Q
(, all of type) 214.67 341.67 T
4 9.5 Q
(<integer>) 271.58 341.67 T
1 11 Q
(. This method is invoked when) 322.88 341.67 T
4 9.5 Q
(encode-total-seconds) 108 327.67 T
1 11 Q
( is called with thr) 222 327.67 T
(ee integer ar) 306.14 327.67 T
(guments.) 366.01 327.67 T
(Line 4 is the only statement in the body) 135 313.67 T
(. It uses arithmetic operators to con-) 325.08 313.67 T
(vert the hours, minutes, and seconds into seconds. All methods r) 108 299.67 T
(eturn the value) 422.45 299.67 T
(of the statement executed last in the body) 108 285.67 T
(. This method r) 308.57 285.67 T
(eturns the r) 382.43 285.67 T
(esult of the) 438.23 285.67 T
(arithmetic expr) 108 271.67 T
(ession in line 4.) 182.14 271.67 T
-0.41 (W) 135 257.67 P
-0.41 (e can call) 144.99 257.67 P
4 9.5 Q
-0.85 (encode-total-seconds) 190.85 257.67 P
1 11 Q
-0.41 ( with ar) 304.85 257.67 P
-0.41 (guments r) 341.54 257.67 P
-0.41 (epr) 390.41 257.67 P
-0.41 (esenting 8 hours, 30) 406.43 257.67 P
(minutes, and 59 seconds:) 108 243.67 T
5 9 Q
(?) 108 223 T
4 F
(encode-total-seconds \0508, 30, 59\051;) 118.8 223 T
5 F
(30659) 108 212 T
1 11 Q
(W) 108 191.67 T
(e \336nd it convenient to call) 117.99 191.67 T
4 9.5 Q
(encode-total-seconds) 246.34 191.67 T
1 11 Q
( to initialize the) 360.34 191.67 T
4 9.5 Q
(total-sec-) 438.45 191.67 T
(onds) 108 177.67 T
1 11 Q
( slot when cr) 130.8 177.67 T
(eating an instance of) 192.79 177.67 T
4 9.5 Q
(<time-of-day>) 295.34 177.67 T
1 11 Q
(, or when storing a new) 369.44 177.67 T
(value in that slot. For example, her) 108 163.67 T
(e we cr) 276.48 163.67 T
(eate a new instance:) 310.72 163.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 27
%%Page: "26" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(26) 72 677.67 T
0 9.5 Q
(2.9 Methods for handling time) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
( def) 113.4 642 T
(ine variable *your-time-of-day* =) 135 642 T
(make\050<time-of-day>, total-seconds: encode-total-seconds \0508, 30, 59\051\051;) 129.6 631 T
1 11 Q
(W) 108 610.67 T
(e examine the value of the) 117.99 610.67 T
4 9.5 Q
(total-seconds) 247.79 610.67 T
1 11 Q
( slot:) 321.89 610.67 T
5 9 Q
(?) 108 590 T
4 F
(*your-time-of-day*.total-seconds;) 118.8 590 T
5 F
(30659) 108 579 T
1 11 Q
(The r) 108 558.67 T
(esult r) 133.31 558.67 T
(eminds us that it would be useful to convert in the other dir) 163.56 558.67 T
(ection as) 453.67 558.67 T
(well\321fr) 108 544.67 T
(om total seconds to hours, minutes, and seconds.) 147.65 544.67 T
3 13 Q
(2.9.2  Method for) 108 513.33 T
4 F
(decode-total-seconds) 195.67 513.33 T
1 11 Q
(W) 108 493.67 T
(e de\336ne) 117.99 493.67 T
4 9.5 Q
(decode-total-seconds) 159.07 493.67 T
1 11 Q
( to convert in the other dir) 273.07 493.67 T
(ection \321 fr) 400.41 493.67 T
(om total) 454.07 493.67 T
(seconds to hours, minutes, and seconds:) 108 479.67 T
4 9 Q
(def) 108 459 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 124.2 459 T
6 F
(// 1) 500.4 459 T
4 F
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 118.8 448 T
6 F
(// 2) 500.4 448 T
4 F
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 118.8 437 T
6 F
(// 3) 500.4 437 T
4 F
(values \050hours, minutes, seconds\051;) 118.8 426 T
6 F
(// 4) 500.4 426 T
4 F
(end;) 108 415 T
6 F
(// 5) 500.4 415 T
1 11 Q
(W) 108 394.67 T
(e can use) 117.99 394.67 T
4 9.5 Q
(decode-total-seconds) 164.86 394.67 T
1 11 Q
( to see the value of the) 278.86 394.67 T
4 9.5 Q
(total-seconds) 389.9 394.67 T
1 11 Q
( slot:) 464 394.67 T
5 9 Q
(?) 108 374 T
4 F
(decode-total-seconds \050*your-time-of-day*.total-seconds\051;) 118.8 374 T
5 F
(8) 108 363 T
(30) 108 352 T
(59) 108 341 T
1 11 Q
(As you can see,) 108 320.67 T
4 9.5 Q
(decode-total-seconds) 185.71 320.67 T
1 11 Q
( r) 299.71 320.67 T
(eturns thr) 306.61 320.67 T
(ee separate values: the hours,) 354.4 320.67 T
-0.13 (minutes, and seconds. This method illustrates how to r) 108 306.67 P
-0.13 (eturn multiple values, and) 373.02 306.67 P
-0.1 (how to use) 108 292.67 P
4 9.5 Q
-0.2 (let) 163.7 292.67 P
1 11 Q
-0.1 ( to assign to multiple local variables. W) 180.8 292.67 P
-0.1 (e describe these techniques) 370.02 292.67 P
(in Section 2.9.3 and Section 2.9.4.) 108 278.67 T
3 13 Q
(2.9.3  Multiple values) 108 247.33 T
1 11 Q
(The method for) 108 227.67 T
4 9.5 Q
(decode-total-seconds) 186.38 227.67 T
1 11 Q
( r) 300.38 227.67 T
(eturns thr) 307.27 227.67 T
(ee values: the hours, the min-) 355.06 227.67 T
(utes, and the seconds. The method uses the) 108 213.67 T
4 9.5 Q
(values) 320.74 213.67 T
1 11 Q
( function as the statement exe-) 354.94 213.67 T
(cuted last in the body) 108 199.67 T
(, to r) 211.61 199.67 T
(eturn the thr) 233.6 199.67 T
(ee values. The) 294.73 199.67 T
4 9.5 Q
(values) 366.16 199.67 T
1 11 Q
( function simply) 400.36 199.67 T
(r) 108 185.67 T
(eturns all its ar) 112.15 185.67 T
(guments as separate values. The ability to r) 184.3 185.67 T
(eturn multiple values) 394.11 185.67 T
(allows for a natural symmetry between) 108 171.67 T
4 9.5 Q
(encode-total-seconds) 301.5 171.67 T
1 11 Q
( and) 415.5 171.67 T
4 9.5 Q
(decode-) 439.62 171.67 T
(total-seconds) 108 157.67 T
1 11 Q
(, as shown in T) 182.1 157.67 T
(able 2.1.) 254 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 28
%%Page: "27" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(27) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 2 Q
0 X
(:) 135 646.67 T
1 11 Q
-0.35 (On lines 2 and 3 of the) 108 510.67 P
4 9.5 Q
-0.73 (decode-total-seconds) 217.11 510.67 P
1 11 Q
-0.35 ( method ar) 331.11 510.67 P
-0.35 (e calls to) 383.24 510.67 P
4 9.5 Q
-0.73 (truncate/) 426.74 510.67 P
1 11 Q
-0.35 (. The) 478.04 510.67 P
4 9.5 Q
(truncate/) 108 496.67 T
1 11 Q
( function is a built-in Dylan function that r) 159.3 496.67 T
(eturns multiple values. This) 365.14 496.67 T
(function takes two ar) 108 482.67 T
(guments, divides the \336rst by the second, and r) 210.57 482.67 T
(eturns two) 435.13 482.67 T
(values: the r) 108 468.67 T
(esult of the tr) 167.14 468.67 T
(uncating division, and the r) 231.51 468.67 T
(emainder) 365.62 468.67 T
(.) 411.23 468.67 T
3 13 Q
(2.9.4  Use of) 108 289.34 T
4 F
(let) 173.18 289.34 T
3 F
( to assign to multiple local variables) 196.58 289.34 T
1 11 Q
(When a function r) 108 269.67 T
(eturns multiple values, you can use) 195.75 269.67 T
4 9.5 Q
(let) 370.9 269.67 T
1 11 Q
( to stor) 388 269.67 T
(e each r) 421.49 269.67 T
(eturned) 458.47 269.67 T
(value in a local variable, as shown in lines 2 and 3 of the) 108 255.67 T
4 9.5 Q
(decode-total-seconds) 382.98 255.67 T
1 11 Q
(method. On line 2,) 108 241.67 T
4 9.5 Q
(let) 200.82 241.67 T
1 11 Q
( de\336nes two local variables, named) 217.92 241.67 T
4 9.5 Q
(total-minutes) 391.29 241.67 T
1 11 Q
( and) 465.39 241.67 T
4 9.5 Q
(seconds) 108 227.67 T
1 11 Q
(, and initializes their values to the two values r) 147.9 227.67 T
(eturned by the) 374.48 227.67 T
4 9.5 Q
(truncate/) 448.41 227.67 T
1 11 Q
(function. Similarly) 108 213.67 T
(, line 3 uses) 197.31 213.67 T
4 9.5 Q
(let) 255.86 213.67 T
1 11 Q
( to assign values to local variables) 272.96 213.67 T
4 9.5 Q
(hours) 440.2 213.67 T
1 11 Q
( and) 468.7 213.67 T
4 9.5 Q
(minutes) 108 199.67 T
1 11 Q
(.) 147.9 199.67 T
(The local variables de\336ned by) 135 185.68 T
4 9.5 Q
(let) 283.17 185.68 T
1 11 Q
( can be used within the method until the) 300.27 185.68 T
(method\325s) 108 171.68 T
4 9.5 Q
(end) 156.17 171.68 T
1 11 Q
( statement. Although ther) 173.27 171.68 T
(e is no) 298.15 171.68 T
4 9.5 Q
(begin) 331.94 171.68 T
1 11 Q
(to de\336ne explicitly the) 366.14 171.68 T
-0.02 (beginning of a body for local variables,) 108 157.68 P
4 9.5 Q
-0.04 (def) 299.95 157.68 P
-0.04 (ine method) 317.05 157.68 P
1 11 Q
-0.02 ( begins a body) 374.01 157.68 P
-0.02 (, and its) 443.15 157.68 P
4 9.5 Q
-0.04 (end) 484.17 157.68 P
1 11 Q
(ends that body) 108 143.68 T
(. Local variables ar) 179.34 143.68 T
(e scoped within the smallest body that sur-) 270.27 143.68 T
0 0 0 1 0 0 0 K
107.61 615.01 522.39 623 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 121.77 626.67 T
(able 2.1  Symmetry of) 127.5 626.67 T
4 9.5 Q
(encode-total-seconds) 235.36 626.67 T
1 11 Q
( and) 349.36 626.67 T
4 9.5 Q
(decode-total-seconds) 373.48 626.67 T
1 11 Q
(.) 487.48 626.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Method) 151.5 593.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 274.9 593.67 T
(gument\050s\051) 287.61 593.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Return value\050s\051) 412.85 593.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(encode-total-seconds) 113.61 571.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 239.78 571.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 384.44 571.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(decode-total-seconds) 113.61 552.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 239.78 552.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(hours, minutes, seconds) 384.44 552.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Division functions:) 141 434.67 T
1 F
( Unlike in some languages, wher) 238.14 434.67 T
(e / on integers) 397.04 434.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(typically pr) 141 420.67 T
(oduces a tr) 196.92 420.67 T
(uncated r) 249.94 420.67 T
(esult, in Dylan / is r) 295.84 420.67 T
(eserved for a) 393.7 420.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(library extension that pr) 141 406.67 T
(oduces exact rational r) 258.35 406.67 T
(esults. The Dylan func-) 367.58 406.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (tions named) 141 392.67 P
4 9.5 Q
-0.67 (f) 203.31 392.67 P
-0.67 (loor) 209.01 392.67 P
1 11 Q
-0.32 (,) 231 392.67 P
4 9.5 Q
-0.67 (ceiling) 236.18 392.67 P
1 11 Q
-0.32 (,) 276.08 392.67 P
4 9.5 Q
-0.67 (round) 281.25 392.67 P
1 11 Q
-0.32 (, and) 309.75 392.67 P
4 9.5 Q
-0.67 (truncate) 335.97 392.67 P
1 11 Q
-0.32 ( convert a rational or) 381.57 392.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337oating-point r) 141 378.67 T
(esult to an integer with the appr) 214.87 378.67 T
(opriate r) 370.89 378.67 T
(ounding. The) 412.3 378.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.35 (Dylan functions named) 141 364.67 P
4 9.5 Q
-0.73 (f) 256.97 364.67 P
-0.73 (loor/) 262.67 364.67 P
1 11 Q
-0.35 (,) 291.17 364.67 P
4 9.5 Q
-0.73 (ceiling/) 296.32 364.67 P
1 11 Q
-0.35 (,) 341.92 364.67 P
4 9.5 Q
-0.73 (round/) 347.07 364.67 P
1 11 Q
-0.35 (, and) 381.27 364.67 P
4 9.5 Q
-0.73 (truncate/) 407.43 364.67 P
1 11 Q
-0.35 ( take) 458.73 364.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(two ar) 141 350.67 T
(guments. Those generic functions divide the \336rst ar) 172.16 350.67 T
(gument by) 422.04 350.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.26 (the second ar) 141 336.67 P
-0.26 (gument, and r) 204.82 336.67 P
-0.26 (eturn two values: the r) 273.03 336.67 P
-0.26 (ounded or tr) 381.6 336.67 P
-0.26 (uncated) 442.52 336.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(r) 141 322.67 T
(esult, and the r) 145.15 322.67 T
(emainder) 217.53 322.67 T
(.) 263.13 322.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
233.78 609.01 233.78 545.01 2 L
V
0.5 H
0 Z
N
378.44 609.01 378.44 545.01 2 L
V
N
107.61 584.01 522.39 584.01 2 L
V
N
107.61 564.51 522.39 564.51 2 L
V
N
135 447.88 135 315.13 2 L
V
0.25 H
N
486 447.88 486 315.13 2 L
V
N
134.88 448.01 486.12 448.01 2 L
V
N
134.88 315.01 486.12 315.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 29
%%Page: "28" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(28) 72 677.67 T
0 9.5 Q
(2.9 Methods for handling time) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(r) 108 640.67 T
(ounds them, so you can use) 112.15 640.67 T
4 9.5 Q
(begin) 249.57 640.67 T
1 11 Q
( and) 278.07 640.67 T
4 9.5 Q
(end) 302.19 640.67 T
1 11 Q
( within a method to de\336ne a smaller) 319.29 640.67 T
(body for local variables.) 108 626.67 T
3 13 Q
(2.9.5  Second method for) 108 595.33 T
4 F
(decode-total-seconds) 237.74 595.33 T
1 11 Q
(The) 108 575.67 T
4 9.5 Q
(decode-total-seconds) 129.16 575.67 T
1 11 Q
( method is called as shown:) 243.16 575.67 T
5 9 Q
(?) 108 555 T
4 F
(decode-total-seconds \050*your-time-of-day*.total-seconds\051;) 118.8 555 T
1 11 Q
(If we envision calling) 108 534.67 T
4 9.5 Q
(decode-total-seconds) 214.68 534.67 T
1 11 Q
( fr) 328.68 534.67 T
(equently to see the hours, min-) 339.24 534.67 T
(utes, and seconds stor) 108 520.67 T
(ed in a) 214.79 520.67 T
4 9.5 Q
(<time-of-day>) 250.13 520.67 T
1 11 Q
( instance, we could pr) 324.23 520.67 T
(ovide a conve-) 430.54 520.67 T
(nient, shorter) 108 506.67 T
(, calling syntax, such as this:) 172.16 506.67 T
5 9 Q
(?) 108 486 T
4 F
(decode-total-seconds \050*your-time-of-day*\051;) 118.8 486 T
1 11 Q
(W) 108 465.67 T
(e can implement that calling syntax this easily) 117.99 465.67 T
(, by de\336ning another method for) 340.36 465.67 T
4 9.5 Q
(decode-total-seconds) 108 451.67 T
1 11 Q
(, which takes a) 222 451.67 T
4 9.5 Q
(<time-of-day>) 296.45 451.67 T
1 11 Q
( instance as its ar) 370.55 451.67 T
(gument:) 452.72 451.67 T
4 9 Q
(def) 108 431 T
(ine method decode-total-seconds \050time :: <time-of-day>\051) 124.2 431 T
(decode-total-seconds \050time.total-seconds\051;) 118.8 420 T
(end;) 108 409 T
1 11 Q
(Figur) 108 388.67 T
(e 2.3 shows the two methods for the) 134.21 388.67 T
4 9.5 Q
(decode-total-seconds) 311.8 388.67 T
1 11 Q
( generic func-) 425.8 388.67 T
(tion.) 108 374.67 T
0 0 0 1 0 0 0 K
108 149.57 522 157.56 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 129.08 161.23 T
(e 2.3  The) 155.29 161.23 T
4 9.5 Q
(decode-total-seconds) 203.72 161.23 T
1 11 Q
( generic function and its methods.) 317.72 161.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108 175.56 522 366 C
0 0 0 1 0 0 0 K
125.5 181.15 504 362.71 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
131.36 189.96 494.22 238.58 R
7 X
V
0 X
N
131.36 249.39 494.22 321.58 R
7 X
V
0 X
N
136.29 253.58 487.72 316.89 R
7 X
V
6 9 Q
0 X
(// Method 1) 136.29 310.89 T
4 F
(def) 136.29 299.89 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 152.49 299.89 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 147.09 288.89 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 147.09 277.89 T
(values \050hours, minutes, seconds\051;) 147.09 266.89 T
(end;) 136.29 255.89 T
136.29 191.72 487.72 234.58 R
7 X
V
6 F
0 X
(// Method 2) 136.29 228.58 T
4 F
(def) 136.29 217.58 T
(ine method decode-total-seconds \050time :: <time-of-day>\051) 152.49 217.58 T
(decode-total-seconds \050time.total-seconds\051;) 147.09 206.58 T
(end;) 136.29 195.58 T
212.43 335.43 423 351.15 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 218.27 340.51 T
4 9.5 Q
(decode-total-seconds) 302.31 340.51 T
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 30
%%Page: "29" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(29) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(Looking at Figur) 108 640.67 T
(e 2.3, we analyze what happens in this call:) 189.37 640.67 T
5 9 Q
(?) 108 620 T
4 F
(decode-total-seconds \050*your-time-of-day*\051;) 118.8 620 T
2 11 Q
(1.) 117 599.67 T
1 F
(The ar) 135 599.67 T
(gument is an instance of) 165.81 599.67 T
4 9.5 Q
(<time-of-day>) 286.62 599.67 T
1 11 Q
(, so Method 2 is called.) 360.72 599.67 T
2 F
(2.) 117 579.67 T
1 F
-0.09 (The body of method 2 calls) 135 579.67 P
4 9.5 Q
-0.19 (decode-total-seconds) 268.61 579.67 P
1 11 Q
-0.09 ( on an instance of) 382.61 579.67 P
4 9.5 Q
-0.19 (<inte-) 469.8 579.67 P
(ger>) 135 565.67 T
1 11 Q
(, the value of the) 157.8 565.67 T
4 9.5 Q
(total-seconds) 241.3 565.67 T
1 11 Q
( slot of the) 315.4 565.67 T
4 9.5 Q
(<time-of-day>) 368.78 565.67 T
1 11 Q
( instance.) 442.88 565.67 T
(Method 1 is called.) 135 551.67 T
2 F
(3.) 117 531.67 T
1 F
-0.34 (Method 1 r) 135 531.67 P
-0.34 (eturns thr) 187.85 531.67 P
-0.34 (ee values to its caller) 235.3 531.67 P
-0.34 (, method 2. Method 2 r) 333.58 531.67 P
-0.34 (eturns those) 442.36 531.67 P
(thr) 135 517.67 T
(ee values.) 149.13 517.67 T
(The purpose of method 2 is simply to allow a dif) 108 497.67 T
(fer) 343.85 497.67 T
(ent kind of ar) 356.93 497.67 T
(gument to be) 422.19 497.67 T
(used. It extracts the integer fr) 108 483.67 T
(om the) 249.85 483.67 T
4 9.5 Q
(<time-of-day>) 286.32 483.67 T
1 11 Q
( instance, and calls) 360.42 483.67 T
4 9.5 Q
(decode-) 454.15 483.67 T
(total-seconds) 108 469.67 T
1 11 Q
( with that integer) 182.1 469.67 T
(.) 265.16 469.67 T
(Note that the technique used in method 2 is similar to r) 135 455.67 T
(ecursion, but is not) 402.9 455.67 T
(exactly the same. In pur) 108 441.67 T
(e r) 223.88 441.67 T
(ecursion, a function calls itself. In this example, a) 236.05 441.67 T
-0.06 (method for) 108 427.67 P
4 9.5 Q
-0.12 (decode-total-seconds) 165.1 427.67 P
1 11 Q
-0.06 ( calls the) 279.1 427.67 P
4 9.5 Q
-0.12 (decode-total-seconds) 323.88 427.67 P
1 11 Q
-0.06 ( generic func-) 437.88 427.67 P
(tion with a dif) 108 413.67 T
(fer) 176.7 413.67 T
(ent ar) 189.77 413.67 T
(gument, and a dif) 217.43 413.67 T
(fer) 303.66 413.67 T
(ent method is executed.) 316.74 413.67 T
3 13 Q
(2.9.6  Method for) 108 382.33 T
4 F
(say-time-of-day) 195.67 382.33 T
1 11 Q
-0.16 (W) 108 362.67 P
-0.16 (e can pr) 117.99 362.67 P
-0.16 (ovide a way to ask an instance of) 155.98 362.67 P
4 9.5 Q
-0.34 (<time-of-day>) 317.72 362.67 P
1 11 Q
-0.16 ( to describe the time in) 391.82 362.67 P
-0.29 (the conventional way) 108 348.67 P
-0.29 (, such as 8:30. For the application that we ar) 210.83 348.67 P
-0.29 (e planning, ther) 420.08 348.67 P
-0.29 (e) 496.27 348.67 P
(is no need to view the seconds. The description is printed in a window on the) 108 334.67 T
(scr) 108 320.67 T
(een. W) 121.69 320.67 T
(e de\336ne a method named) 154.12 320.67 T
4 9.5 Q
(say-time-of-day) 280.26 320.67 T
1 11 Q
(:) 365.76 320.67 T
4 9 Q
(def) 108 300 T
(ine method say-time-of-day \050time :: <time-of-day>\051;) 124.2 300 T
6 F
(// 1) 500.4 300 T
4 F
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 289 T
6 F
(// 2) 500.4 289 T
4 F
(format\050*window*, "%d:%s%d", hours,) 118.8 278 T
6 F
(// 3) 500.4 278 T
4 F
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 156.6 267 T
6 F
(// 4) 500.4 267 T
4 F
(end;) 108 256 T
6 F
(// 6) 500.4 256 T
1 11 Q
(On line 2, we use) 108 235.67 T
4 9.5 Q
(let) 194.13 235.67 T
1 11 Q
( to de\336ne two local variables, and initialize them to the \336rst) 211.23 235.67 T
(and second values r) 108 221.67 T
(eturned by) 204.45 221.67 T
4 9.5 Q
(decode-total-seconds) 260.37 221.67 T
1 11 Q
(. Remember that) 374.37 221.67 T
4 9.5 Q
(decode-) 457.45 221.67 T
(total-seconds) 108 207.67 T
1 11 Q
( r) 182.1 207.67 T
(eturns thr) 189 207.67 T
(ee values \050the thir) 236.78 207.67 T
(d value is the seconds\051. For the pur-) 323.31 207.67 T
(poses of our application, ther) 108 193.67 T
(e is no need to use the thir) 249.72 193.67 T
(d value.) 376.93 193.67 T
-0.08 (On line 4, we print a leading 0 for the minutes when ther) 135 179.67 P
-0.08 (e ar) 409.84 179.67 P
-0.08 (e fewer than 10) 427.43 179.67 P
(minutes. Note that) 108 165.67 T
4 9.5 Q
(if) 201.54 165.67 T
1 11 Q
( r) 212.94 165.67 T
(eturns a value in Dylan, in contrast to certain languages.) 219.84 165.67 T
(W) 135 151.67 T
(e can call) 144.99 151.67 T
4 9.5 Q
(say-time-of-day) 192.08 151.67 T
1 11 Q
(:) 277.58 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 31
%%Page: "30" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(30) 72 677.67 T
0 9.5 Q
(2.10 The <time-offset> class and method) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
(say-time-of-day \050*your-time-of-day*\051;) 118.8 642 T
5 F
(8:30) 108 631 T
(?) 108 612 T
4 F
(say-time-of-day \050*my-time-of-day*\051;) 118.8 612 T
5 F
(0:02) 108 601 T
1 11 Q
(Note that the listener displays the output \050printed by) 108 580.67 T
4 9.5 Q
(format) 368.01 580.67 T
1 11 Q
(\051, but displays no) 402.21 580.67 T
(values because) 108 566.67 T
4 9.5 Q
(format) 183.28 566.67 T
1 11 Q
( does not r) 217.48 566.67 T
(eturn values and ther) 268.54 566.67 T
(efor) 372.53 566.67 T
(e) 391.61 566.67 T
4 9.5 Q
(say-time-of-day) 399.63 566.67 T
1 11 Q
(does not r) 108 552.67 T
(eturn any values.) 156.3 552.67 T
3 15 Q
(2.10  The) 108 513 T
4 13 Q
(<time-offset>) 164.07 513 T
3 15 Q
( class and method) 265.47 513 T
1 11 Q
(In this section, we de\336ne a class to r) 108 492.67 T
(epr) 281.64 492.67 T
(esent time of) 297.66 492.67 T
(fsets, and a method that) 359.59 492.67 T
-0.07 (describes a time of) 108 478.67 P
-0.07 (fset. W) 197.87 478.67 P
-0.07 (e need this class and method for our sample application.) 230.47 478.67 P
4 9 Q
(def) 108 458 T
(ine class <time-offset> \050<object>\051) 124.2 458 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 447 T
(slot past?) 118.8 436 T
( :: <boolean>, init-keyword: past?:;) 216 436 T
(end;) 108 425 T
1 11 Q
-0.3 (The) 108 404.67 P
4 9.5 Q
-0.62 (<time-offset>) 128.86 404.67 P
1 11 Q
-0.3 ( class has two slots:) 202.96 404.67 P
4 9.5 Q
-0.62 (total-seconds) 298.33 404.67 P
1 11 Q
-0.3 ( and) 372.43 404.67 P
4 9.5 Q
-0.62 (past?) 395.95 404.67 P
1 11 Q
-0.3 (. The) 424.45 404.67 P
4 9.5 Q
-0.62 (past?) 450.52 404.67 P
1 11 Q
-0.3 (slot) 484.09 404.67 P
(is of the type) 108 390.67 T
4 9.5 Q
(<boolean>) 173.37 390.67 T
1 11 Q
( and can hold either) 224.67 390.67 T
4 9.5 Q
(#t) 324.23 390.67 T
1 11 Q
( or) 335.63 390.67 T
4 9.5 Q
(#f) 351.48 390.67 T
1 11 Q
(. If the time of) 362.89 390.67 T
(fset is in the) 430.5 390.67 T
(past, the) 108 376.67 T
4 9.5 Q
(past?) 151.87 376.67 T
1 11 Q
( slot contains) 180.37 376.67 T
4 9.5 Q
(#t) 246.72 376.67 T
1 11 Q
(.) 258.12 376.67 T
(W) 135 362.67 T
(e can cr) 144.99 362.67 T
(eate instances of) 181.57 362.67 T
4 9.5 Q
(<time-offset>) 263.69 362.67 T
1 11 Q
(:) 337.79 362.67 T
5 9 Q
(?) 108 342 T
4 F
( def) 113.4 342 T
(ine variable *my-time-offset* :: <time-offset> =) 135 342 T
(make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 10\051,) 129.6 331 T
(past?: #f\051;) 248.4 320 T
5 F
(?) 108 301 T
4 F
( def) 113.4 301 T
(ine variable *your-time-offset* :: <time-offset> =) 135 301 T
(make\050<time-offset>, total-seconds: encode-total-seconds \0506, 45, 30\051,) 129.6 290 T
(past?: #t\051;) 248.4 279 T
1 11 Q
(W) 108 258.67 T
(e need a method to describe instances of) 117.99 258.67 T
4 9.5 Q
(<time-offset>) 316.38 258.67 T
1 11 Q
(. W) 390.48 258.67 T
(e might imagine) 405.97 258.67 T
(de\336ning the method like this:) 108 244.67 T
4 9 Q
(def) 108 224 T
(ine method say-time-offset \050time :: <time-offset>\051 => \050\051;) 124.2 224 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 213 T
(format \050*window*, "%s %d:%s%d",) 118.8 202 T
(if \050time.past?\051 "minus" else "plus" end, hours,) 162 191 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 162 180 T
(end;) 108 169 T
1 11 Q
(W) 108 148.67 T
(e might imagine calling) 117.99 148.67 T
4 9.5 Q
(say-time-offset) 235.18 148.67 T
1 11 Q
( on instances of) 320.68 148.67 T
4 9.5 Q
(<time-offset>) 398.33 148.67 T
1 11 Q
(:) 472.43 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 32
%%Page: "31" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(31) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
(say-time-offset \050*my-time-offset*\051;) 118.8 642 T
5 F
(plus 15:20) 108 631 T
(?) 108 612 T
4 F
(say-time-offset \050*your-time-offset*\051;) 118.8 612 T
5 F
(minus 6:45) 108 601 T
1 11 Q
(If we actually test this method in a listener) 108 580.67 T
(, however) 313.32 580.67 T
(, the r) 360.68 580.67 T
(esult is dif) 388.33 580.67 T
(fer) 438.44 580.67 T
(ent:) 451.52 580.67 T
5 9 Q
(?) 108 560 T
4 F
(say-time-offset \050*my-time-offset*\051;) 118.8 560 T
5 F
(ERROR: NO APPLICABLE METHOD FOR DECODE-TOTAL-SECONDS ON <TIME-OFFSET>) 108 549 T
1 11 Q
(T) 108 528.67 T
(o understand this err) 113.73 528.67 T
(or) 215.84 528.67 T
(, we can look at the methods for) 225.38 528.67 T
4 9.5 Q
(decode-total-seconds) 383.41 528.67 T
1 11 Q
(in Figur) 108 514.67 T
(e 2.3, page 28. Method 1 takes an ar) 146.57 514.67 T
(gument of the type) 318.15 514.67 T
4 9.5 Q
(<integer>) 413.38 514.67 T
1 11 Q
(.) 464.68 514.67 T
(Method 2 takes an ar) 108 500.67 T
(gument of the type) 209.57 500.67 T
4 9.5 Q
(<time-of-day>) 304.8 500.67 T
1 11 Q
(. Ther) 378.9 500.67 T
(e is no method for) 406.96 500.67 T
(instances of) 108 486.67 T
4 9.5 Q
(<time-offset>) 167.74 486.67 T
1 11 Q
(, so Dylan signals an err) 241.84 486.67 T
(or) 358.15 486.67 T
(.) 367.69 486.67 T
(Ther) 135 472.67 T
(e ar) 157.56 472.67 T
(e thr) 175.23 472.67 T
(ee possible appr) 197.38 472.67 T
(oaches to solving this pr) 275.99 472.67 T
(oblem.) 393.72 472.67 T
3 13 Q
(2.10.1  First approach) 108 441.33 T
1 11 Q
(W) 108 421.67 T
(e could de\336ne the) 117.99 421.67 T
4 9.5 Q
(say-time-offset) 207.27 421.67 T
1 11 Q
( method to call) 292.77 421.67 T
4 9.5 Q
(decode-total-seconds) 367.85 421.67 T
1 11 Q
(with an integer:) 108 407.67 T
4 9 Q
(def) 108 387 T
(ine method say-time-offset \050time :: <time-offset>\051 => \050\051;) 124.2 387 T
(let \050hours, minutes\051 = decode-total-seconds \050time.total-seconds\051;) 118.8 376 T
(format \050*window*, "%s %d:%s%d",) 118.8 365 T
(if \050time.past?\051 "minus" else "plus" end, hours,) 162 354 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 162 343 T
(end;) 108 332 T
1 11 Q
(This appr) 108 311.67 T
(oach works, but it is awkwar) 154.63 311.67 T
(d because we need to r) 294.79 311.67 T
(emember what) 405.41 311.67 T
(kinds of ar) 108 297.67 T
(guments) 159.92 297.67 T
4 9.5 Q
(decode-total-seconds) 205.05 297.67 T
1 11 Q
( can take. The convenient calling syn-) 319.05 297.67 T
(tax that we intr) 108 283.67 T
(oduced for calling) 181.87 283.67 T
4 9.5 Q
(decode-total-seconds) 272.87 283.67 T
1 11 Q
( with an instance of) 386.87 283.67 T
4 9.5 Q
(<time-of-day>) 108 269.67 T
1 11 Q
( is not available for other kinds of time.) 182.1 269.67 T
3 13 Q
(2.10.2  Second approach) 108 238.33 T
1 11 Q
(W) 108 218.67 T
(e could de\336ne a thir) 117.99 218.67 T
(d method for) 214.85 218.67 T
4 9.5 Q
(decode-total-seconds) 281.54 218.67 T
1 11 Q
( that takes as its ar) 395.54 218.67 T
(gu-) 484.76 218.67 T
(ment an instance of) 108 204.67 T
4 9.5 Q
(<time-offset>) 205.45 204.67 T
1 11 Q
(:) 279.55 204.67 T
6 9 Q
(// Method 3) 108 184 T
4 F
(def) 108 173 T
(ine method decode-total-seconds \050time :: <time-offset>\051) 124.2 173 T
(decode-total-seconds \050time.total-seconds\051;) 118.8 162 T
(end;) 108 151 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 33
%%Page: "32" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(32) 72 677.67 T
0 9.5 Q
(2.11 Summary) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(The method for) 108 640.67 T
4 9.5 Q
(say-time-offset) 186.38 640.67 T
1 11 Q
( can then call) 271.88 640.67 T
4 9.5 Q
(decode-total-seconds) 338.11 640.67 T
1 11 Q
(, as we) 452.11 640.67 T
(originally thought:) 108 626.67 T
4 9 Q
(def) 108 606 T
(ine method say-time-offset \050time :: <time-offset>\051 => \050\051;) 124.2 606 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 595 T
(format \050*window*, "%s %d:%s%d",) 118.8 584 T
(if \050time.past?\051 "minus" else "plus" end, hours,) 162 573 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 162 562 T
(end;) 108 551 T
1 11 Q
(This appr) 108 530.67 T
(oach works, and it pr) 154.63 530.67 T
(eserves the \337exibility of calling) 257.64 530.67 T
4 9.5 Q
(decode-total-) 410.74 530.67 T
(seconds) 108 516.67 T
1 11 Q
( on instances of) 147.9 516.67 T
4 9.5 Q
(<integer>) 225.55 516.67 T
1 11 Q
(,) 276.85 516.67 T
4 9.5 Q
(<time-of-day>) 282.35 516.67 T
1 11 Q
(, and) 356.45 516.67 T
4 9.5 Q
(<time-offset>) 383.32 516.67 T
1 11 Q
(. How-) 457.42 516.67 T
(ever) 108 502.67 T
(, the body of method 3 is identical to the body of method 2. Duplication of) 128.28 502.67 T
-0.36 (code is ugly) 108 488.67 P
-0.36 (, and is particularly undesirable in an object-oriented language, wher) 164.36 488.67 P
-0.36 (e) 496.34 488.67 P
(it usually indicates a \337aw in the overall design.) 108 474.67 T
3 13 Q
(2.10.3  Third approach) 108 443.33 T
1 11 Q
(The best solution to the pr) 108 423.67 T
(oblem is to r) 235.07 423.67 T
(ethink the classes and methods in a mor) 295.2 423.67 T
(e) 489.48 423.67 T
(object-oriented style, using inheritance. In Chapter 3, we show this solution.) 108 409.67 T
3 15 Q
(2.1) 108 370 T
(1  Summary) 124.43 370 T
1 11 Q
(This chapter cover) 108 349.67 T
(ed the following:) 197.63 349.67 T
(\245) 117 329.67 T
(W) 135 329.67 T
(e used a listener to enter Dylan statements and see their values or output.) 144.99 329.67 T
(\245) 117 309.67 T
(W) 135 309.67 T
(e de\336ned module variables \050with) 144.99 309.67 T
4 9.5 Q
(def) 308.59 309.67 T
(ine variable) 325.69 309.67 T
1 11 Q
(\051, constants \050with) 394.09 309.67 T
4 9.5 Q
(def) 135 295.67 T
(ine constant) 152.1 295.67 T
1 11 Q
(\051 and local variables \050with) 220.5 295.67 T
4 9.5 Q
(let) 349.33 295.67 T
1 11 Q
(\051.) 366.43 295.67 T
(\245) 117 275.67 T
(W) 135 275.67 T
(e de\336ned a method of a generic function \050with) 144.99 275.67 T
4 9.5 Q
(def) 372.7 275.67 T
(ine method) 389.8 275.67 T
1 11 Q
(\051.) 446.8 275.67 T
(\245) 117 255.67 T
(W) 135 255.67 T
(e showed that a generic function can contain two methods, each method) 144.99 255.67 T
(intended for dif) 135 241.67 T
(fer) 211.47 241.67 T
(ent ar) 224.55 241.67 T
(guments. Both the) 252.21 241.67 T
4 9.5 Q
(say-greeting) 343.56 241.67 T
1 11 Q
( and) 411.96 241.67 T
4 9.5 Q
(decode-) 436.08 241.67 T
(total-seconds) 135 227.67 T
1 11 Q
( generic functions contain two methods.) 209.1 227.67 T
(\245) 117 207.67 T
(W) 135 207.67 T
(e de\336ned a class \050with) 144.99 207.67 T
4 9.5 Q
(def) 255.48 207.67 T
(ine class) 272.58 207.67 T
1 11 Q
(\051.) 323.88 207.67 T
(\245) 117 187.67 T
(W) 135 187.67 T
(e cr) 144.99 187.67 T
(eated an instance \050with) 162.04 187.67 T
4 9.5 Q
(make) 277.22 187.67 T
1 11 Q
(\051.) 300.02 187.67 T
(\245) 117 167.67 T
(W) 135 167.67 T
(e r) 144.99 167.67 T
(ead the value of a slot by calling a getter) 157.15 167.67 T
(.) 351.66 167.67 T
(\245) 117 147.67 T
(W) 135 147.67 T
(e set the value of a slot by using the assignment operator) 144.99 147.67 T
4 9.5 Q
(:=) 423.13 147.67 T
1 11 Q
( with a getter) 434.53 147.67 T
(.) 498 147.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 34
%%Page: "33" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(2 Quick Start) 467.08 677.67 T
2 11 Q
(33) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(\245) 117 640.67 T
(W) 135 640.67 T
(e de\336ned a method that r) 144.99 640.67 T
(eturns multiple values \050with) 267.46 640.67 T
4 9.5 Q
(values) 408.28 640.67 T
1 11 Q
(\051, assigning) 442.48 640.67 T
(values to multiple local variables \050with) 135 626.67 T
4 9.5 Q
(let) 326.79 626.67 T
1 11 Q
(\051.) 343.89 626.67 T
(\245) 117 606.67 T
(W) 135 606.67 T
(e showed some of the naming conventions used by Dylan and r) 144.99 606.67 T
(ecom-) 453.68 606.67 T
(mended for user code. See T) 135 592.67 T
(able 2.2.) 271.44 592.67 T
0 0 0 1 0 0 0 K
108 558.01 522 566 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 161.49 569.67 T
(able 2.2  Dylan naming conventions shown in this chapter) 167.22 569.67 T
(.) 447.76 569.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Language element) 197.81 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Example of name) 335.71 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(module variable) 185.59 513.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(*my-time-of-day*) 311.75 514.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(constant) 185.59 492.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
($pi) 311.75 493.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(class) 185.59 471.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<integer>) 311.75 472.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(pr) 185.59 450.67 T
(edicate) 196.34 450.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(instance?) 311.75 451.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
305.75 552.01 305.75 443.01 2 L
V
0.5 H
0 Z
N
179.59 527.01 450.42 527.01 2 L
V
N
179.59 506.01 450.42 506.01 2 L
V
N
179.59 485.01 450.42 485.01 2 L
V
N
179.59 464.01 450.42 464.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 35
%%Page: "34" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(34) 72 677.67 T
0 9.5 Q
(2.11 Summary) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 36
%%Page: "35" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(35) 300.5 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(3) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(3) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Simple Use of Inheritance) 109 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In Chapter 2, we showed initial de\336nitions of classes and methods that r) 108 424.67 T
(epr) 458.67 424.67 T
(esent) 474.7 424.67 T
(times. In this chapter) 108 410.67 T
(, we r) 209.18 410.67 T
(ede\336ne the) 236.02 410.67 T
4 9.5 Q
(<time-of-day>) 292.36 410.67 T
1 11 Q
( and) 366.46 410.67 T
4 9.5 Q
(<time-offset>) 390.58 410.67 T
1 11 Q
( classes) 464.68 410.67 T
(to use inheritance, and we r) 108 396.67 T
(ede\336ne a method for) 242.33 396.67 T
4 9.5 Q
(decode-total-seconds) 346.13 396.67 T
1 11 Q
( to take) 460.13 396.67 T
(advantage of inheritance. W) 108 382.67 T
(e also show how to de\336ne a generic function explic-) 243.93 382.67 T
(itly) 108 368.67 T
(, using) 122.88 368.67 T
4 9.5 Q
(def) 158.15 368.67 T
(ine generic) 175.25 368.67 T
1 11 Q
(.) 237.95 368.67 T
3 15 Q
(3.1  Class inheritance) 108 329 T
1 11 Q
-0.02 (In Chapter 2, we de\336ned two simple classes,) 108 308.67 P
4 9.5 Q
-0.04 (<time-of-day>) 326.23 308.67 P
1 11 Q
-0.02 ( and) 400.33 308.67 P
4 9.5 Q
-0.04 (<time-offset>) 424.42 308.67 P
1 11 Q
-0.02 (:) 498.52 308.67 P
4 9 Q
(def) 108 288 T
(ine class <time-of-day> \050<object>\051) 124.2 288 T
6 F
(// Total number of seconds past midnight) 118.8 277 T
4 F
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 266 T
(end class <time-of-day>;) 108 255 T
(def) 108 236 T
(ine class <time-offset> \050<object>\051) 124.2 236 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 225 T
(slot past?) 118.8 214 T
( :: <boolean>, init-keyword: past?:;) 216 214 T
(end;) 108 203 T
1 11 Q
(Ther) 108 182.67 T
(e is commonality between the two classes:) 130.56 182.67 T
(\245) 117 162.67 T
(Both classes r) 135 162.67 T
(epr) 200.21 162.67 T
(esent a kind of time \321 they ar) 216.24 162.67 T
(e r) 362.07 162.67 T
(elated conceptually) 374.24 162.67 T
(.) 467.61 162.67 T
(\245) 117 142.67 T
(Both classes have a) 135 142.67 T
4 9.5 Q
(total-seconds) 230.45 142.67 T
1 11 Q
( slot \321 they have str) 304.55 142.67 T
(uctur) 404.02 142.67 T
(e in common.) 429.9 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 37
%%Page: "36" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(36) 72 677.67 T
0 9.5 Q
(3.1 Class inheritance) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(Both classes need a) 135 640.67 T
4 9.5 Q
(decode-total-seconds) 230.72 640.67 T
1 11 Q
( method to convert the) 344.72 640.67 T
4 9.5 Q
(total-) 457.73 640.67 T
(seconds) 135 626.67 T
1 11 Q
( slot to hours, minutes, and seconds \321 they have behavior in com-) 174.9 626.67 T
(mon.) 135 612.67 T
(W) 108 592.67 T
(e can use inheritance to model the shar) 117.99 592.67 T
(ed aspects of these two classes dir) 306.79 592.67 T
(ectly) 471 592.67 T
(.) 492.83 592.67 T
(W) 108 578.67 T
(e need to de\336ne a new class, such as) 117.99 578.67 T
4 9.5 Q
(<time>) 296.33 578.67 T
1 11 Q
(, and to r) 330.53 578.67 T
(ede\336ne the two classes to) 373.89 578.67 T
(inherit fr) 108 564.67 T
(om) 150.97 564.67 T
4 9.5 Q
(<time>) 169.43 564.67 T
1 11 Q
(. The) 203.63 564.67 T
4 9.5 Q
(<time>) 230.3 564.67 T
1 11 Q
( class will contain the slot) 264.5 564.67 T
4 9.5 Q
(total-seconds,) 391.38 564.67 T
1 11 Q
( so) 471.18 564.67 T
(both these classes inherit that slot. W) 108 550.67 T
(e r) 286.29 550.67 T
(ede\336ne the) 298.45 550.67 T
4 9.5 Q
(decode-total-seconds) 354.8 550.67 T
1 11 Q
-0.35 (method such that its parameter is of the) 108 536.67 P
4 9.5 Q
-0.72 (<time>) 300.95 536.67 P
1 11 Q
-0.35 ( type, which means it can be called) 335.14 536.67 P
(for instances of) 108 522.67 T
4 9.5 Q
(<time-of-day>) 184.51 522.67 T
1 11 Q
( and of) 258.61 522.67 T
4 9.5 Q
(<time-offset>) 295.15 522.67 T
1 11 Q
(.) 369.25 522.67 T
3 13 Q
(3.1.1  New de\336nitions of the time classes) 108 491.33 T
1 11 Q
(W) 108 471.67 T
(e de\336ne the new class) 117.99 471.67 T
4 9.5 Q
(<time>:) 226.34 471.67 T
4 9 Q
(def) 108 451 T
(ine class <time> \050<object>\051) 124.2 451 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 440 T
(end;) 108 429 T
1 11 Q
(W) 108 408.67 T
(e r) 117.99 408.67 T
(ede\336ne) 130.15 408.67 T
4 9.5 Q
(<time-of-day>) 168.49 408.67 T
1 11 Q
( and) 242.59 408.67 T
4 9.5 Q
(<time-offset>) 266.71 408.67 T
1 11 Q
( to inherit fr) 340.81 408.67 T
(om) 398.87 408.67 T
4 9.5 Q
(<time>) 417.34 408.67 T
1 11 Q
(:) 451.54 408.67 T
4 9 Q
(def) 108 388 T
(ine class <time-of-day> \050<time>\051) 124.2 388 T
(end;) 108 377 T
(def) 108 358 T
(ine class <time-offset> \050<time>\051) 124.2 358 T
(slot past? :: <boolean>;) 118.8 347 T
(end;) 108 336 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Dynamic feature\321no need to recompile:) 141 295.67 T
1 F
(In certain object-oriented) 346.93 295.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(languages and development envir) 141 281.67 T
(onments, a complete r) 306.77 281.67 T
(ecompile of) 414 281.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the pr) 141 267.67 T
(ogram would be necessary to change the super) 169.76 267.67 T
(class of a class.) 397.64 267.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (Most Dylan development envir) 141 253.67 P
-0.1 (onments r) 292.83 253.67 P
-0.1 (equir) 341.66 253.67 P
-0.1 (e only that you compile) 367.07 253.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.32 (the new class de\336nitions. The dif) 141 239.67 P
-0.32 (fer) 298.81 239.67 P
-0.32 (ence between compiling only a few) 311.89 239.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class de\336nitions versus compiling the whole pr) 141 225.67 T
(ogram can be impor-) 369.71 225.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tant for complex applications wher) 141 211.67 T
(e a complete r) 310.81 211.67 T
(ecompilation would) 378.51 211.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(be time-consuming.) 141 197.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 308.88 135 190.13 2 L
V
0.25 H
0 Z
N
486 308.88 486 190.13 2 L
V
N
134.88 309 486.12 309 2 L
V
N
134.88 190 486.12 190 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 38
%%Page: "37" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 413.76 677.67 T
2 11 Q
(37) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(3.1.2  Slot inheritance) 108 639.33 T
1 11 Q
(A class inherits the slots of its super) 108 619.67 T
(classes, and can de\336ne mor) 281.61 619.67 T
(e slots if they ar) 413.8 619.67 T
(e) 490.07 619.67 T
(needed. For example, the) 108 605.67 T
4 9.5 Q
(<time-of-day>) 233.11 605.67 T
1 11 Q
( and) 307.21 605.67 T
4 9.5 Q
(<time-offset>) 331.34 605.67 T
1 11 Q
( classes inherit the) 405.44 605.67 T
4 9.5 Q
(total-seconds) 108 591.67 T
1 11 Q
( slot fr) 182.1 591.67 T
(om their super) 212.87 591.67 T
(class,) 284.21 591.67 T
4 9.5 Q
(<time>) 312.63 591.67 T
1 11 Q
(. The) 346.83 591.67 T
4 9.5 Q
(<time-offset>) 373.49 591.67 T
1 11 Q
( class) 447.59 591.67 T
(de\336nes an additional slot of its own, named) 108 577.67 T
4 9.5 Q
(past?) 323.43 577.67 T
1 11 Q
(. T) 351.93 577.67 T
(able 3.1 shows the slots of) 363.17 577.67 T
(these thr) 108 563.67 T
(ee time classes.) 150.07 563.67 T
(A class inherits the slot options fr) 108 439.17 T
(om its super) 270.04 439.17 T
(classes as well. A class cannot) 330.04 439.17 T
-0.38 (r) 108 425.17 P
-0.38 (emove or r) 112.15 425.17 P
-0.38 (eplace any slots de\336ned by its super) 163.87 425.17 P
-0.38 (classes. It is an err) 337 425.17 P
-0.38 (or to r) 422.92 425.17 P
-0.38 (ede\336ne an) 451.76 425.17 P
(inherited slot.) 108 411.17 T
3 13 Q
(3.1.3  Use of existing instances of the classes) 108 379.84 T
1 11 Q
(The variables) 108 360.17 T
4 9.5 Q
(*my-time-of-day*) 175.89 360.17 T
1 11 Q
(,) 267.09 360.17 T
4 9.5 Q
(*your-time-of-day*) 272.59 360.17 T
1 11 Q
(,) 375.19 360.17 T
4 9.5 Q
(*my-time-offset*) 380.69 360.17 T
1 11 Q
(, and) 471.89 360.17 T
4 9.5 Q
(*your-time-offset*) 108 346.17 T
1 11 Q
( all contain instances of the classes that have now been r) 210.6 346.17 T
(ede-) 482.29 346.17 T
(\336ned. Most Dylan envir) 108 332.17 T
(onments update the existing instances automatically) 223.68 332.17 T
(, so) 477.14 332.17 T
-0.13 (you do not need to r) 108 318.17 P
-0.13 (emake those instances. In this case, the new de\336nition is com-) 205.98 318.17 P
(patible with the old one, because the slots in each instance ar) 108 304.17 T
(e the same.) 402.57 304.17 T
3 13 Q
(3.1.4  Relationships of the time classes) 108 272.84 T
1 11 Q
(It is helpful to look at the r) 108 253.17 T
(elationships among the time classes. W) 236.8 253.17 T
(e show them in) 425.6 253.17 T
(Figur) 108 239.17 T
(e 3.1.) 134.21 239.17 T
0 0 0 1 0 0 0 K
108 524.01 522 532 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 219.14 535.67 T
(able 3.1  Slots of thr) 224.87 535.67 T
(ee time classes.) 319.46 535.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 168.95 505.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 263.66 505.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 366.23 505.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 168.95 486.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 263.66 486.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds) 366.23 486.17 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(past?) 366.23 466.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
257.66 518.01 257.66 459.51 2 L
V
0.5 H
0 Z
N
360.23 518.01 360.23 459.51 2 L
V
N
162.95 498.51 467.05 498.51 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 39
%%Page: "38" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(38) 72 677.67 T
0 9.5 Q
(3.1 Class inheritance) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 505.44 522 513.43 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 172.33 517.09 T
(e 3.1  Inheritance r) 198.54 517.09 T
(elationships of the time classes.) 287.67 517.09 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Referring to Figur) 108 485.1 T
(e 3.1, we can intr) 195.26 485.1 T
(oduce terminology by example:) 276.6 485.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 465.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 135 465.1 T
1 11 Q
( is a) 209.1 465.1 T
2 F
(direct subclass) 230.71 465.1 T
1 F
( of) 304.32 465.1 T
4 9.5 Q
(<time>) 319.48 465.1 T
1 11 Q
(.) 353.68 465.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 445.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 135 445.1 T
1 11 Q
( is a) 209.1 445.1 T
2 F
(subclass) 230.71 445.1 T
1 F
( of) 272.86 445.1 T
4 9.5 Q
(<object>) 288.02 445.1 T
1 11 Q
(.) 333.62 445.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 425.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 135 425.1 T
1 11 Q
( is a) 169.2 425.1 T
2 F
(direct superclass) 190.82 425.1 T
1 F
( of) 274.2 425.1 T
4 9.5 Q
(<time-of-day>) 289.36 425.1 T
1 11 Q
(.) 363.46 425.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 405.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<object>) 135 405.1 T
1 11 Q
( is a) 180.6 405.1 T
2 F
(superclass) 202.21 405.1 T
1 F
( of) 254.13 405.1 T
4 9.5 Q
(<time-of-day>) 269.3 405.1 T
1 11 Q
(.) 343.4 405.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 385.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When you make an instance of the class) 135 385.1 T
4 9.5 Q
(<time-of-day>) 331.08 385.1 T
1 11 Q
(, the r) 405.17 385.1 T
(esult is a) 432.83 385.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(direct instance) 135 371.1 T
1 F
( of the class) 208 371.1 T
4 9.5 Q
(<time-of-day>.) 266.83 371.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(\245) 117 351.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A dir) 135 351.1 T
(ect instance of) 160.38 351.1 T
4 9.5 Q
(<time-of-day>) 231.94 351.1 T
1 11 Q
( is an) 306.04 351.1 T
2 F
(indirect instance) 334.06 351.1 T
1 F
( of) 417.44 351.1 T
4 9.5 Q
(<time>) 432.61 351.1 T
1 11 Q
( and) 466.81 351.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<object>) 135 337.1 T
1 11 Q
(.) 180.6 337.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 317.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(An object is an) 135 317.1 T
2 F
( instance) 206.38 317.1 T
1 F
( of a class if it is either a dir) 250.66 317.1 T
(ect or an indir) 382.65 317.1 T
(ect) 450.57 317.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instance of that class. A dir) 135 303.1 T
(ect instance of) 265.69 303.1 T
4 9.5 Q
(<time-of-day>) 337.26 303.1 T
1 11 Q
( is a general) 411.36 303.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instance of) 135 289.1 T
4 9.5 Q
(<time-of-day>) 190.08 289.1 T
1 11 Q
(,) 264.18 289.1 T
4 9.5 Q
(<time>) 269.68 289.1 T
1 11 Q
(, and) 303.88 289.1 T
4 9.5 Q
(<object>) 330.75 289.1 T
1 11 Q
(.) 376.35 289.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 269.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 135 269.1 T
1 11 Q
( is a) 209.1 269.1 T
2 F
(subtype) 230.71 269.1 T
1 F
(of) 273.79 269.1 T
4 9.5 Q
(<time>) 286.21 269.1 T
1 11 Q
( and) 320.41 269.1 T
4 9.5 Q
(<object>) 344.53 269.1 T
1 11 Q
(. A class is also a sub-) 390.13 269.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(type of itself. All classes ar) 135 255.1 T
(e types.) 263.79 255.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\245) 117 235.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<object>) 135 235.1 T
1 11 Q
( is a) 180.6 235.1 T
2 F
(supertype) 202.21 235.1 T
1 F
( of all the other classes shown. All classes ar) 252.32 235.1 T
(e sub-) 465.2 235.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(types of) 135 221.1 T
4 9.5 Q
(<object>) 176.41 221.1 T
1 11 Q
(. All instances ar) 222.01 221.1 T
(e general instances of) 302.19 221.1 T
4 9.5 Q
(<object>) 408.81 221.1 T
1 11 Q
(.) 454.41 221.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
188.43 533.43 441.57 637 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 283.92 626.43 T
(<time-offset>) 316.27 549.44 T
(<time-of-day>) 215.71 548.73 T
(<time>) 289.61 586.57 T
310.02 607.96 306.71 596.43 303.41 607.96 306.71 607.96 4 Y
V
306.71 620.71 306.71 607.96 2 L
0.5 H
2 Z
N
266.11 560.9 254.21 559.29 263.44 566.96 264.77 563.93 4 Y
V
301.36 580 264.78 563.92 2 L
N
346.5 567.06 355.64 559.29 343.77 561.04 345.13 564.05 4 Y
V
309.93 580 345.14 564.05 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 40
%%Page: "39" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 413.76 677.67 T
2 11 Q
(39) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(3.2  Methods for classes that use inheritance) 108 638 T
1 11 Q
(Now that the classes ar) 108 617.67 T
(e de\336ned, we can r) 220.15 617.67 T
(ede\336ne method 2 of) 311.58 617.67 T
4 9.5 Q
(decode-total-) 411.03 617.67 T
(seconds) 108 603.67 T
1 11 Q
( to have its parameter be of the type) 147.9 603.67 T
4 9.5 Q
(<time>) 325.08 603.67 T
1 11 Q
(, instead of) 359.28 603.67 T
4 9.5 Q
(<time-of-day>.) 415.29 603.67 T
1 11 Q
(Figur) 108 589.67 T
(e 3.2 shows the methods for the) 134.21 589.67 T
4 9.5 Q
(decode-total-seconds) 290.28 589.67 T
1 11 Q
( generic function.) 404.28 589.67 T
0 0 0 1 0 0 0 K
108 348.57 522 356.56 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 129.08 360.23 T
(e 3.2  The) 155.29 360.23 T
4 9.5 Q
(decode-total-seconds) 203.72 360.23 T
1 11 Q
( generic function and its methods.) 317.72 360.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 108 328.24 T
(e can now call) 117.99 328.24 T
4 9.5 Q
(decode-total-seconds) 189.41 328.24 T
1 11 Q
( on instances of) 303.41 328.24 T
4 9.5 Q
(<time-of-day>) 381.06 328.24 T
1 11 Q
( and on) 455.16 328.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(instances of) 108 314.24 T
4 9.5 Q
(<time-offset>) 167.74 314.24 T
1 11 Q
(:) 241.84 314.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 293.57 T
4 F
(decode-total-seconds \050*your-time-of-day*\051;) 118.8 293.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(8) 108 282.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 108 271.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(59) 108 260.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(?) 108 241.57 T
4 F
(decode-total-seconds \050*your-time-offset*\051;) 118.8 241.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(6) 108 230.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(45) 108 219.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(30) 108 208.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The r) 108 188.24 T
(esult is as expected \321 the) 133.31 188.24 T
4 9.5 Q
(decode-total-seconds) 260.73 188.24 T
1 11 Q
( generic function r) 374.73 188.24 T
(eturns) 463.39 188.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the hours, minutes, and seconds of the time stor) 108 174.24 T
(ed in the) 340.61 174.24 T
4 9.5 Q
(total-seconds) 385.71 174.24 T
1 11 Q
( slot. At) 459.81 174.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(this point, it is worth describing how this generic function works.) 108 160.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108 376.56 522 572 C
0 0 0 1 0 0 0 K
125.5 382.15 504 568.71 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
131.36 395.96 494.22 444.58 R
7 X
V
0 X
N
131.36 455.39 494.22 527.58 R
7 X
V
0 X
N
136.29 459.58 487.72 522.88 R
7 X
V
6 9 Q
0 X
(// Method 1) 136.29 516.88 T
4 F
(def) 136.29 505.88 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 152.49 505.88 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 147.09 494.88 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 147.09 483.88 T
(values \050hours, minutes, seconds\051;) 147.09 472.88 T
(end;) 136.29 461.88 T
136.29 397.72 487.72 440.58 R
7 X
V
6 F
0 X
(// Method 2) 136.29 434.58 T
4 F
(def) 136.29 423.58 T
(ine method decode-total-seconds \050time :: <time>\051) 152.49 423.58 T
(decode-total-seconds \050time.total-seconds\051;) 147.09 412.58 T
(end;) 136.29 401.58 T
212.43 541.43 423 557.15 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 218.27 546.51 T
4 9.5 Q
(decode-total-seconds) 302.31 546.51 T
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 41
%%Page: "40" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(40) 72 677.67 T
0 9.5 Q
(3.2 Methods for classes that use inheritance) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(3.2.1  Method dispatch) 108 639.33 T
1 11 Q
-0.14 (When a generic function is called, it chooses the) 108 619.67 P
2 F
-0.14 (most speci\336c applicable) 341.64 619.67 P
1 F
-0.14 (method) 463.7 619.67 P
(and calls that method. The pr) 108 605.67 T
(ocess of choosing the most speci\336c method and call-) 250.52 605.67 T
(ing it is called) 108 591.67 T
2 F
(method dispatch) 178.15 591.67 T
1 F
(. This pr) 262.15 591.67 T
(ocess has two steps:) 302.17 591.67 T
2 F
(1.) 117 571.67 T
1 F
(Find all the) 135 571.67 T
2 F
(applicable methods) 192.85 571.67 T
1 F
( for the ar) 291.52 571.67 T
(gument to the generic function.) 338.69 571.67 T
2 F
(2.) 117 551.67 T
1 F
(Sort the applicable methods by) 135 551.67 T
2 F
(speci\336city) 288.34 551.67 T
(,) 338.03 551.67 T
1 F
( and call the most speci\336c) 340.78 551.67 T
(method.) 135 537.67 T
3 13 Q
(3.2.2  Step 1: Finding the applicable methods) 108 506.33 T
1 11 Q
(Start with the set of methods de\336ned for this generic function.) 108 486.67 T
0 F
(A method is applica-) 412.13 486.67 T
(ble if the ar) 108 472.67 T
(gument is an instance of the type of the method\325) 157.2 472.67 T
(s parameter) 367.94 472.67 T
(.) 418.76 472.67 T
1 F
(For example, consider the) 135 458.67 T
4 9.5 Q
(decode-total-seconds) 263.2 458.67 T
1 11 Q
( generic function. T) 377.2 458.67 T
(able) 470.2 458.67 T
(3.2 shows which method is applicable for certain ar) 108 444.67 T
(guments.) 357.19 444.67 T
(The \336rst r) 108 258.67 T
(ow of the table shows that, when the ar) 155.31 258.67 T
(gument is a dir) 345.94 258.67 T
(ect instance of) 419.34 258.67 T
4 9.5 Q
(<time-of-day>) 108 244.67 T
1 11 Q
(, method 2 is applicable because the ar) 182.1 244.67 T
(gument is an instance of) 368.43 244.67 T
4 9.5 Q
-0.13 (<time>) 108 230.67 P
1 11 Q
-0.06 ( \050the method\325s parameter\051. The \336nal r) 142.2 230.67 P
-0.06 (ow of the table shows that, when the) 323.53 230.67 P
(ar) 108 216.67 T
(gument is) 117.65 216.67 T
4 9.5 Q
("hello, world") 168.73 216.67 T
1 11 Q
(, none of the de\336ned methods ar) 248.53 216.67 T
(e applicable,) 405.83 216.67 T
(because) 108 202.67 T
4 9.5 Q
("hello, world") 149.05 202.67 T
1 11 Q
( is not an instance of) 228.85 202.67 T
4 9.5 Q
(<time>) 330.69 202.67 T
1 11 Q
( or) 364.89 202.67 T
4 9.5 Q
(<integer>) 380.74 202.67 T
1 11 Q
(.) 432.04 202.67 T
(For) 135 188.67 T
4 9.5 Q
(decode-total-seconds) 154.22 188.67 T
1 11 Q
(, ther) 268.22 188.67 T
(e is only one applicable method for any) 293.12 188.67 T
(ar) 108 174.67 T
(gument. Ther) 117.65 174.67 T
(e is no need to continue to step 2. The sole applicable method is) 183.43 174.67 T
(called.) 108 160.67 T
0 0 0 1 0 0 0 K
108 410.01 522 418 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 109.06 421.67 T
(able 3.2  Applicable methods for dif) 114.79 421.67 T
(fer) 287.98 421.67 T
(ent ar) 301.06 421.67 T
(guments to) 328.71 421.67 T
4 9.5 Q
(decode-total-seconds) 386.19 421.67 T
1 11 Q
(.) 500.19 421.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 165.34 381.67 T
(gument) 178.04 381.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicable Method\050s\051) 252.73 381.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 412.22 388.67 T
(ype of) 417.97 388.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method\325s parameter) 381.15 374.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
-1.82 (*my-time-of-day*) 143.01 352.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 2) 250.09 351.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 373.61 352.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(*my-time-offset*) 143.01 331.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 2) 250.09 330.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 373.61 331.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(1000) 143.01 310.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1) 250.09 309.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<integer>) 373.61 310.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
("hello, world") 143.01 289.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(none) 250.09 288.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
244.09 404.01 244.09 281.01 2 L
V
0.5 H
0 Z
N
367.61 404.01 367.61 281.01 2 L
V
N
137.01 365.01 492.98 365.01 2 L
V
N
137.01 344.01 492.98 344.01 2 L
V
N
137.01 323.01 492.98 323.01 2 L
V
N
137.01 302.01 492.98 302.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 42
%%Page: "41" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 413.76 677.67 T
2 11 Q
(41) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.42 (In other cases, ther) 135 640.67 P
-0.42 (e can be several applicable methods. Consider the generic) 224.84 640.67 P
-0.16 (function) 108 626.67 P
4 9.5 Q
-0.34 (say-greeting) 151.37 626.67 P
1 11 Q
-0.16 (, shown in Figur) 219.76 626.67 P
-0.16 (e 3.3. T) 298.74 626.67 P
-0.16 (able 3.3 shows that for certain ar) 331.42 626.67 P
-0.16 (gu-) 487.59 626.67 P
(ments, one method is applicable, but for an integer ar) 108 612.67 T
(gument, two methods ar) 367.24 612.67 T
(e) 486.73 612.67 T
(applicable.) 108 598.67 T
0 0 0 1 0 0 0 K
108 372.15 522 380.14 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 151.88 383.81 T
(e 3.3  The) 178.09 383.81 T
4 9.5 Q
(say-greeting) 226.52 383.81 T
1 11 Q
( generic function and its methods.) 294.92 383.81 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When the ar) 108 211.83 T
(gument is) 167.48 211.83 T
4 9.5 Q
(7) 218.56 211.83 T
1 11 Q
(, a dir) 224.26 211.83 T
(ect instance of) 252.08 211.83 T
4 9.5 Q
(<integer>) 323.65 211.83 T
1 11 Q
(, method 1 is applicable,) 374.95 211.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(because) 108 197.83 T
4 9.5 Q
(7) 149.05 197.83 T
1 11 Q
( is an instance of) 154.75 197.83 T
4 9.5 Q
(<object>) 237.85 197.83 T
1 11 Q
( \050the method\325s parameter\051; method 2 also is) 283.45 197.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(applicable, because) 108 183.83 T
4 9.5 Q
(7) 204.61 183.83 T
1 11 Q
( is an instance of) 210.31 183.83 T
4 9.5 Q
(<integer>) 293.41 183.83 T
1 11 Q
( \050the method\325s parameter\051.) 344.71 183.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 326.16 522 334.15 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 131.86 337.82 T
(able 3.3  Applicable methods for dif) 137.6 337.82 T
(fer) 310.78 337.82 T
(ent ar) 323.86 337.82 T
(guments to) 351.51 337.82 T
4 9.5 Q
(say-greeting) 408.99 337.82 T
1 11 Q
(.) 477.39 337.82 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Ar) 228.03 304.83 T
(gument) 240.73 304.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Applicable Method\050s\051) 315.41 304.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(7) 205.7 282.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1, Method 2) 312.78 281.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
($pi) 205.7 261.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1) 312.78 260.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
("hello, world") 205.7 240.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Method 1) 312.78 239.83 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306.78 320.16 306.78 232.16 2 L
V
0.5 H
0 Z
N
199.7 295.16 430.3 295.16 2 L
V
N
199.7 274.16 430.3 274.16 2 L
V
N
199.7 253.16 430.3 253.16 2 L
V
N
108 135 522 648 C
0 0 0 1 0 0 0 K
108 400.14 522 581 C
0 0 0 1 0 0 0 K
125.5 407.29 504 572 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
133.86 419.29 496.72 469.86 R
7 X
V
0 X
N
133.5 482 496.36 533 R
7 X
V
0 X
N
138.43 484.1 489.86 527.82 R
7 X
V
6 9 Q
0 X
(// Method 1) 138.43 521.82 T
4 F
(def) 138.43 510.82 T
(ine method say-greeting \050greeting :: <object>\051;) 154.63 510.82 T
(format\050*window*, "%s\134n", greeting\051;) 149.23 499.82 T
(end;) 138.43 488.82 T
138.79 421.63 490.22 464.52 R
7 X
V
6 F
0 X
(// Method 2) 138.79 458.52 T
4 F
(def) 138.79 447.52 T
(ine method say-greeting \050greeting :: <integer>\051) 154.99 447.52 T
(format\050*window*, "Your lucky number is %s.\134n", greeting\051;) 149.59 436.52 T
(end;) 138.79 425.52 T
236.86 544.72 398.29 560.43 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 241.07 549.79 T
4 9.5 Q
(say-greeting) 325.11 549.79 T
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 43
%%Page: "42" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(42) 72 677.67 T
0 9.5 Q
(3.3 Definition of a generic function) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(3.2.3  Step 2: Sorting applicable methods by speci\336city) 108 639.33 T
1 11 Q
(Start with the set of applicable methods. Compar) 108 619.67 T
(e the types of the parameters of) 345.8 619.67 T
(the methods.) 108 605.67 T
0 F
(If one type is a subtype of the other) 173.87 605.67 T
(, the method whose parameter is of the) 326.64 605.67 T
(subtype is mor) 108 591.67 T
(e speci\336c than the other method.) 172.79 591.67 T
1 F
(Let\325s continue with the example of calling) 135 577.67 T
4 9.5 Q
(say-greeting) 340.96 577.67 T
1 11 Q
( with an ar) 409.36 577.67 T
(gument) 461.53 577.67 T
(of) 108 563.67 T
4 9.5 Q
(7) 120.42 563.67 T
1 11 Q
(. Method 1\325s parameter is of type) 126.12 563.67 T
4 9.5 Q
(<object>) 288.98 563.67 T
1 11 Q
(. Method 2\325s parameter is of type) 334.58 563.67 T
4 9.5 Q
(<integer>) 108 549.67 T
1 11 Q
(. Because) 159.3 549.67 T
4 9.5 Q
(<integer>) 206.49 549.67 T
1 11 Q
( is a subtype of) 257.79 549.67 T
4 9.5 Q
(<object>) 333.54 549.67 T
1 11 Q
(, method 2 is mor) 379.14 549.67 T
(e spe-) 463.81 549.67 T
(ci\336c than method 1.) 108 535.67 T
(The generic function calls the most speci\336c method.) 135 521.67 T
-0.44 (This conceptual description of how method dispatch works should help you) 135 507.67 P
(to understand how to write methods. The most important concept to r) 108 493.67 T
(ealize is) 448.66 493.67 T
(that method dispatch should feel natural\321it gives pr) 108 479.67 T
(ecedence to the methods) 365.8 479.67 T
(that ar) 108 465.67 T
(e mor) 139.47 465.67 T
(e closely r) 167.36 465.67 T
(elated to the ar) 215.61 465.67 T
(gument rather than to the methods that ar) 287.9 465.67 T
(e) 492.14 465.67 T
(mor) 108 451.67 T
(e distant or general. This pr) 127.87 451.67 T
(ecedence or) 261.52 451.67 T
(dering lets you adjust the behavior of) 318.39 451.67 T
(a class with r) 108 437.67 T
(espect to that class\325s super) 171.17 437.67 T
(classes.) 299.08 437.67 T
3 15 Q
(3.3  De\336nition of a generic function) 108 277 T
1 11 Q
(The de\336nitions of the methods for) 108 256.67 T
4 9.5 Q
(say-time-of-day) 276.32 256.67 T
1 11 Q
( and) 361.82 256.67 T
4 9.5 Q
(say-time-offset) 385.95 256.67 T
1 11 Q
( ar) 471.45 256.67 T
(e) 483.84 256.67 T
(r) 108 242.67 T
(epeated her) 112.15 242.67 T
(e:) 168.94 242.67 T
4 9 Q
(def) 108 222 T
(ine method say-time-of-day \050time :: <time-of-day>\051) 124.2 222 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 211 T
(format\050*window*, "%d:%s%d", hours,) 118.8 200 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 156.6 189 T
(end;) 108 178 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Performance note:) 141 403.67 T
1 F
( The Dylan compiler and r) 232.06 403.67 T
(un-time system ensur) 360.07 403.67 T
(e) 465.16 403.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(that the method-dispatch r) 141 389.67 T
(ules ar) 270.77 389.67 T
(e followed for every call to a generic) 302.93 389.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(function. Given accurate type declarations, however) 141 375.67 T
(, a compiler can) 393.83 375.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(compute the r) 141 361.67 T
(esult of the dispatch r) 208.61 361.67 T
(ules at compile time, so the exe-) 313.71 361.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cuted code is just as ef) 141 347.67 T
(\336cient as a normal function call in a language) 248.94 347.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(without generic functions and methods.) 141 333.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 416.88 135 326.13 2 L
V
0.25 H
0 Z
N
486 416.88 486 326.13 2 L
V
N
134.88 417 486.12 417 2 L
V
N
134.88 326 486.12 326 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 44
%%Page: "43" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 413.76 677.67 T
2 11 Q
(43) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method say-time-offset \050time :: <time-offset>\051) 124.2 642 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 631 T
(format \050*window*, "%s %d:%d",) 118.8 620 T
(if \050time.past?\051 "minus" else "plus" end, hours, minutes\051;) 162 609 T
(end;) 108 598 T
1 11 Q
(Now that) 108 577.67 T
4 9.5 Q
(decode-total-seconds) 156.9 577.67 T
1 11 Q
( has an applicable method for instances of) 270.89 577.67 T
4 9.5 Q
(<time-offset>) 108 563.67 T
1 11 Q
( and) 182.1 563.67 T
4 9.5 Q
(<time-of-day>) 206.22 563.67 T
1 11 Q
(, both these methods work corr) 280.32 563.67 T
(ectly) 431.47 563.67 T
(.) 453.31 563.67 T
5 9 Q
(?) 108 543 T
4 F
(say-time-of-day \050*my-time-of-day*\051;) 118.8 543 T
5 F
(0:02) 108 532 T
(?) 108 513 T
4 F
(say-time-of-day \050*your-time-of-day*\051;) 118.8 513 T
5 F
(8:30) 108 502 T
(?) 108 483 T
4 F
(say-time-offset \050*my-time-offset*\051;) 118.8 483 T
5 F
(plus 15:20) 108 472 T
(?) 108 453 T
4 F
(say-time-offset \050*your-time-offset*\051;) 118.8 453 T
5 F
(minus 6:45) 108 442 T
1 11 Q
(W) 108 421.67 T
(e have de\336ned two methods:) 117.99 421.67 T
4 9.5 Q
(say-time-offset) 261.31 421.67 T
1 11 Q
( and) 346.81 421.67 T
4 9.5 Q
(say-time-of-day) 370.93 421.67 T
1 11 Q
(. A) 455.21 421.67 T
(method de\336ned with) 108 407.67 T
4 9.5 Q
(def) 213.35 407.67 T
(ine method) 230.45 407.67 T
1 11 Q
( cannot exist without a) 287.45 407.67 T
2 F
(generic function) 400.46 407.67 T
1 F
(.) 482.64 407.67 T
(When you de\336ne a method, and no generic function of that name exists, Dylan) 108 393.67 T
(automatically cr) 108 379.67 T
(eates a generic function. When we de\336ned these two methods,) 186.41 379.67 T
-0.03 (ther) 108 365.67 P
-0.03 (e wer) 127.4 365.67 P
-0.03 (e no generic functions with those names de\336ned, so Dylan cr) 153.98 365.67 P
-0.03 (eated mod-) 448.83 365.67 P
(ule variables named) 108 351.67 T
4 9.5 Q
(say-time-of-day) 208.94 351.67 T
1 11 Q
( and) 294.44 351.67 T
4 9.5 Q
(say-time-offset) 318.56 351.67 T
1 11 Q
(, cr) 404.06 351.67 T
(eated the generic) 418.59 351.67 T
(functions, and stor) 108 337.67 T
(ed the generic functions in the module variables.) 198.72 337.67 T
(These two methods ar) 135 323.67 T
(e logically r) 242.37 323.67 T
(elated to each other) 298.71 323.67 T
(, but have no explicit) 392.95 323.67 T
(r) 108 309.67 T
(elationship in the code, other than in the similarity of their names. A cleaner) 112.15 309.67 T
(appr) 108 295.67 T
(oach is to abstract out the concept of what all these methods ar) 130.87 295.67 T
(e trying to) 434.82 295.67 T
-0.02 (do\321namely) 108 281.67 P
-0.02 (, to describe an object. T) 166.71 281.67 P
-0.02 (o do this abstraction, we can intr) 281.92 281.67 P
-0.02 (oduce a new) 439.95 281.67 P
(generic function.) 108 267.67 T
(W) 135 253.67 T
(e use) 144.99 253.67 T
4 9.5 Q
(def) 172.32 253.67 T
(ine generic) 189.42 253.67 T
1 11 Q
( to de\336ne the generic function explicitly:) 252.12 253.67 T
6 9 Q
(// Given an object, print a description of the object.) 108 233 T
4 F
(def) 108 222 T
(ine generic say \050object\051;) 124.2 222 T
1 11 Q
(This generic function has a name:) 108 201.67 T
4 9.5 Q
(say) 273.47 201.67 T
1 11 Q
(. It r) 289.35 201.67 T
(eceives one ar) 309.04 201.67 T
(gument: the object to) 376.64 201.67 T
(describe. It is essentially the same as the generic function that Dylan would have) 108 187.67 T
(cr) 108 173.67 T
(eated automatically if we had de\336ned a method for) 117.03 173.67 T
4 9.5 Q
(say) 368.93 173.67 T
1 11 Q
( befor) 386.03 173.67 T
(e de\336ning the) 413.95 173.67 T
-0.13 (generic function) 108 159.67 P
4 9.5 Q
-0.27 (say) 189.5 159.67 P
1 11 Q
-0.13 (. However) 205.38 159.67 P
-0.13 (, de\336ning the generic function explicitly enables us) 255.37 159.67 P
(to formalize its purpose, to name the parameter) 108 145.67 T
(, to specify a type constraint on) 338.64 145.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 45
%%Page: "44" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(44) 72 677.67 T
0 9.5 Q
(3.3 Definition of a generic function) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(the parameter \050not done in this de\336nition\051, and to give comments about the) 108 640.67 T
(generic function as a whole.) 108 626.67 T
(One important r) 135 612.67 T
(ule in Dylan is that a generic function and all its methods) 214.02 612.67 T
(must have the same number of r) 108 598.67 T
(equir) 265.15 598.67 T
(ed ar) 290.56 598.67 T
(guments. This r) 314.94 598.67 T
(ule makes sense,) 390.84 598.67 T
(because the generic function de\336nes the contract that all methods for this generic) 108 584.67 T
(function must obey) 108 570.67 T
(. For mor) 201.13 570.67 T
(e information, see Section 6.5, page 81.) 245.71 570.67 T
(Now) 135 556.67 T
(, we de\336ne two methods for) 158.31 556.67 T
4 9.5 Q
(say) 297.46 556.67 T
1 11 Q
(. Method 1 ful\336lls the same purpose) 313.34 556.67 T
-0.28 (\050and has the same body\051 as the) 108 542.67 P
4 9.5 Q
-0.58 (say-time-of-day) 258.57 542.67 P
1 11 Q
-0.28 ( method, which we r) 344.07 542.67 P
-0.28 (emove fr) 443.05 542.67 P
-0.28 (om) 485.81 542.67 P
(the application with an editor) 108 528.67 T
(. Similarly) 251.54 528.67 T
(, method 2 is intended to r) 300.07 528.67 T
(eplace) 427.69 528.67 T
4 9.5 Q
(say-) 461.18 528.67 T
(time-offset) 108 514.67 T
1 11 Q
(, which we r) 170.7 514.67 T
(emove.) 230.35 514.67 T
6 9 Q
(// Method 1) 108 494 T
4 F
(def) 108 483 T
(ine method say \050time :: <time-of-day>\051) 124.2 483 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 472 T
(format\050*window*, "%d:%s%d", hours,) 118.8 461 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 156.6 450 T
(end;) 108 439 T
6 F
(// Method 2) 108 420 T
4 F
(def) 108 409 T
(ine method say \050time :: <time-offset>\051) 124.2 409 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 398 T
(format \050*window*, "%s %d:%d",) 118.8 387 T
(if \050time.past?\051 "minus" else "plus" end, hours, minutes\051;) 167.4 376 T
(end;) 108 365 T
1 11 Q
(Figur) 108 344.67 T
(e 3.4 shows that the generic function) 134.21 344.67 T
4 9.5 Q
(say) 313.99 344.67 T
1 11 Q
( has two methods de\336ned for it.) 331.09 344.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 46
%%Page: "45" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 413.76 677.67 T
2 11 Q
(45) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 435.57 522 443.56 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 188.16 447.23 T
(e 3.4  Methods for the) 214.38 447.23 T
4 9.5 Q
(say) 322.22 447.23 T
1 11 Q
( generic function.) 339.32 447.23 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 108 415.24 T
(e can call) 117.99 415.24 T
4 9.5 Q
(say) 165.08 415.24 T
1 11 Q
(:) 182.18 415.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 394.57 T
4 F
(say \050*my-time-of-day*\051;) 118.8 394.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(0:02) 108 383.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In the following call, the ar) 108 363.24 T
(gument is of the type) 238.53 363.24 T
4 9.5 Q
(<time-of-day>) 344.37 363.24 T
1 11 Q
(, so method 1 is) 418.47 363.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the only applicable method. Method 1 is invoked.) 108 349.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 328.57 T
4 F
(say \050*my-time-offset*\051;) 118.8 328.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(plus 15:20) 108 317.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In the following call, the ar) 108 297.24 T
(gument is of the type) 238.53 297.24 T
4 9.5 Q
(<time-offset>) 344.37 297.24 T
1 11 Q
(, so method 2 is) 418.47 297.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the only applicable method. Method 2 is invoked.) 108 283.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(3.4  Use of) 108 243.57 T
4 13 Q
(next-method) 172.95 243.57 T
3 15 Q
( to call another method) 258.75 243.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Notice that ther) 108 223.24 T
(e is duplication of code in the two methods for) 184.07 223.24 T
4 9.5 Q
(say) 413.2 223.24 T
1 11 Q
(:) 430.3 223.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(// Method 1) 108 202.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 108 191.57 T
(ine method say \050time :: <time-of-day>\051) 124.2 191.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 180.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, "%d:%s%d", hours,) 118.8 169.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 156.6 158.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 147.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108 463.56 522 637 C
0 0 0 1 0 0 0 K
118.93 471 497.43 630.71 R
5 X
0 0 0 1 0 0 0 K
V
1 H
0 Z
0 X
N
126.07 545.95 488.93 595.29 R
7 X
V
0 X
N
131 549.14 482.43 591.29 R
7 X
V
6 9 Q
0 X
(// Method 1) 131 585.29 T
4 F
(def) 131 574.29 T
(ine method say \050time :: <time-of-day>\051) 147.2 574.29 T
6 F
(body 1) 147.2 563.29 T
4 F
(end;) 131 552.29 T
257.43 607 363.86 622.71 R
7 X
V
0.5 H
2 Z
N
1 11 Q
0 X
(Generic function) 260.14 612.08 T
4 9.5 Q
(say) 344.18 612.08 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126.93 481.52 489.79 530.86 R
7 X
V
1 H
0 Z
0 X
N
131.86 484.71 483.29 526.86 R
7 X
V
6 9 Q
0 X
(// Method 2) 131.86 520.86 T
4 F
(def) 131.86 509.86 T
(ine method say \050time :: <time-offset>\051) 148.06 509.86 T
6 F
(body 2) 148.06 498.86 T
4 F
(end;) 131.86 487.86 T
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 47
%%Page: "46" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(46) 72 677.67 T
0 9.5 Q
(3.4 Use of next-method to call another method) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Method 2) 108 642 T
4 F
(def) 108 631 T
(ine method say \050time :: <time-offset>\051) 124.2 631 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 620 T
(format \050*window*, "%s %d:%d",) 118.8 609 T
(if \050time.past?\051 "minus" else "plus" end, hours, minutes\051;) 167.4 598 T
(end;) 108 587 T
1 11 Q
(Both methods call) 108 566.67 T
4 9.5 Q
(decode-total-seconds) 198.11 566.67 T
1 11 Q
( to get the hours and minutes, and call) 312.11 566.67 T
4 9.5 Q
-0.79 (format) 108 552.67 P
1 11 Q
-0.38 ( to print the hours and minutes. That is all that the method on) 142.2 552.67 P
4 9.5 Q
-0.79 (<time>) 439.66 552.67 P
1 11 Q
-0.38 ( does.) 473.86 552.67 P
(The method on) 108 538.67 T
4 9.5 Q
(<time-offset>) 184.77 538.67 T
1 11 Q
( does a bit mor) 258.87 538.67 T
(e; it prints either) 330.77 538.67 T
4 9.5 Q
(minus) 413.45 538.67 T
1 11 Q
( or) 441.95 538.67 T
4 9.5 Q
(plus) 457.8 538.67 T
1 11 Q
(,) 480.6 538.67 T
(depending on the value of the) 108 524.67 T
4 9.5 Q
(past?) 256.62 524.67 T
1 11 Q
( slot.) 285.12 524.67 T
-0.03 (W) 135 510.67 P
-0.03 (e can eliminate this duplication by de\336ning another method that does the) 144.99 510.67 P
(shar) 108 496.67 T
(ed work. This method will be on the) 128.71 496.67 T
4 9.5 Q
(<time>) 307.6 496.67 T
1 11 Q
( class, so it will be applicable to) 341.8 496.67 T
(instances of) 108 482.67 T
4 9.5 Q
(<time-of-day>) 167.74 482.67 T
1 11 Q
( and) 241.84 482.67 T
4 9.5 Q
(<time-offset>) 265.96 482.67 T
1 11 Q
(. The method for) 340.06 482.67 T
4 9.5 Q
(<time-of-day>) 423.94 482.67 T
1 11 Q
(is no longer needed, because the new method does the same work. However) 108 468.67 T
(, a) 479.18 468.67 T
(r) 108 454.67 T
(evised method for) 112.15 454.67 T
4 9.5 Q
(<time-offset>) 203.45 454.67 T
1 11 Q
( is needed, to do the extra work of printing) 277.55 454.67 T
4 9.5 Q
(minus) 108 440.67 T
1 11 Q
( or) 136.5 440.67 T
4 9.5 Q
(plus) 152.35 440.67 T
1 11 Q
(, and to call explicitly the next most speci\336c method, which is the) 175.15 440.67 T
(method on) 108 426.67 T
4 9.5 Q
(<time>) 163.6 426.67 T
1 11 Q
(.) 197.8 426.67 T
(W) 135 412.67 T
(e r) 144.99 412.67 T
(emove the de\336nitions of the pr) 157.15 412.67 T
(evious methods, and de\336ne these new) 306.42 412.67 T
(methods:) 108 398.67 T
6 9 Q
(// Method 1) 108 378 T
4 F
(def) 108 367 T
(ine method say \050time :: <time>\051) 124.2 367 T
(let \050hours, minutes\051 = decode-total-seconds \050time\051;) 118.8 356 T
(format\050*window*, "%d:%s%d", hours,) 118.8 345 T
(if \050minutes < 10\051 "0" else "" end, minutes\051;) 156.6 334 T
(end;) 108 323 T
6 F
(// Method 2) 108 304 T
4 F
(def) 108 293 T
(ine method say \050time :: <time-offset>\051) 124.2 293 T
(format \050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 118.8 282 T
(next-method \050\051;) 118.8 271 T
(end;) 108 260 T
1 11 Q
(W) 108 239.67 T
(e can call) 117.99 239.67 T
4 9.5 Q
(say) 165.08 239.67 T
1 11 Q
(:) 182.18 239.67 T
5 9 Q
(?) 108 219 T
4 F
(say \050*my-time-of-day*\051;) 118.8 219 T
5 F
(0:02) 108 208 T
1 11 Q
(In this call, the ar) 108 187.67 T
(gument is of the type) 191.4 187.67 T
4 9.5 Q
(<time-of-day>) 297.24 187.67 T
1 11 Q
(, so method 1 is the only) 371.34 187.67 T
(applicable method. Method 1 is invoked.) 108 173.67 T
5 9 Q
(?) 108 153 T
4 F
(say \050*my-time-offset*\051;) 118.8 153 T
5 F
(plus 15:20) 108 142 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 48
%%Page: "47" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(3 Simple Use of Inheritance) 413.76 677.67 T
2 11 Q
(47) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.31 (In this call, the ar) 108 640.67 P
-0.31 (gument is of the type) 190.14 640.67 P
4 9.5 Q
-0.65 (<time-offset>) 294.41 640.67 P
1 11 Q
-0.31 (, so method 1 and method 2) 368.51 640.67 P
(ar) 108 626.67 T
(e applicable. Method 2 is mor) 117.65 626.67 T
(e speci\336c, so it is called. Method 2 prints) 261.1 626.67 T
4 9.5 Q
(minus) 459.58 626.67 T
1 11 Q
( or) 488.08 626.67 T
4 9.5 Q
(plus) 108 612.67 T
1 11 Q
(, and calls) 130.8 612.67 T
4 9.5 Q
(next-method) 181.87 612.67 T
1 11 Q
(. The) 244.57 612.67 T
4 9.5 Q
(next-method) 271.24 612.67 T
1 11 Q
( function invokes the next most) 333.94 612.67 T
(speci\336c method. \050If ther) 108 598.67 T
(e is no next most speci\336c method,) 223.3 598.67 T
4 9.5 Q
(next-method) 389.61 598.67 T
1 11 Q
( r) 452.31 598.67 T
(eturns) 459.21 598.67 T
4 9.5 Q
(#f) 108 584.67 T
1 11 Q
(\051. In this case, it calls method 1.) 119.4 584.67 T
(Using) 135 570.67 T
4 9.5 Q
(next-method) 166.69 570.67 T
1 11 Q
( is convenient in cases like this wher) 229.39 570.67 T
(e a method on a) 405.36 570.67 T
(super) 108 556.67 T
(class can do most of the work, but a subclass needs to do additional work.) 135.32 556.67 T
3 15 Q
(3.5  Summary) 108 517 T
1 11 Q
(This chapter cover) 108 496.67 T
(ed the following:) 197.63 496.67 T
(\245) 117 476.67 T
(W) 135 476.67 T
(e showed how to use class inheritance.) 144.99 476.67 T
(\245) 117 456.67 T
(W) 135 456.67 T
(e de\336ned the terminology of classes: dir) 144.99 456.67 T
(ect subclass, subclass, dir) 338.35 456.67 T
(ect) 460.49 456.67 T
(super) 135 442.67 T
(class, super) 162.32 442.67 T
(class, dir) 218.06 442.67 T
(ect instance, indir) 260.54 442.67 T
(ect instance, instance, subtype,) 346.11 442.67 T
(supertype.) 135 428.67 T
(\245) 117 408.67 T
(W) 135 408.67 T
(e showed how method dispatch works for a generic function with one) 144.99 408.67 T
(ar) 135 394.67 T
(gument, when ther) 144.65 394.67 T
(e is mor) 237.27 394.67 T
(e than one applicable method.) 275.77 394.67 T
(\245) 117 374.67 T
(W) 135 374.67 T
(e cr) 144.99 374.67 T
(eated a generic function explicitly) 162.04 374.67 T
(.) 324.87 374.67 T
(\245) 117 354.67 T
(W) 135 354.67 T
(e used) 144.99 354.67 T
4 9.5 Q
(next-method) 179.04 354.67 T
1 11 Q
( to call the next most speci\336c method.) 241.74 354.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 49
%%Page: "48" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(48) 72 677.67 T
0 9.5 Q
(3.5 Summary) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 50
%%Page: "49" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(49) 300.5 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(4) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(4) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Design of the Airport) 109 566.45 T
(Example) 108 536.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(When we design a pr) 108 424.67 T
(ogram, we typically cycle thr) 211.15 424.67 T
(ough the following steps:) 351.92 424.67 T
2 F
(1.) 117 404.67 T
1 F
(W) 135 404.67 T
(e try to understand the overall goal of the pr) 144.99 404.67 T
(ogram.) 360.39 404.67 T
2 F
(2.) 117 384.67 T
1 F
(W) 135 384.67 T
(e identify the objects that model the pr) 144.99 384.67 T
(ogram.) 331.99 384.67 T
(W) 135 364.67 T
(e gr) 144.99 364.67 T
(oup the objects in classes based on common featur) 163.27 364.67 T
(es. W) 407.46 364.67 T
(e divide these) 432.88 364.67 T
-0.21 (classes into super) 135 350.67 P
-0.21 (classes and subclasses based on further abstraction of com-) 219.44 350.67 P
(mon featur) 135 336.67 T
(es. W) 188.67 336.67 T
(e determine what sorts of data we need and in which) 214.09 336.67 T
(objects we need to keep it. The data indicate the slots in each class.) 135 322.67 T
2 F
(3.) 117 302.67 T
1 F
(W) 135 302.67 T
(e specify the various behaviors of the objects.) 144.99 302.67 T
(W) 135 282.67 T
(e de\336ne a set of operations on appr) 144.99 282.67 T
(opriate classes of objects. These opera-) 315.38 282.67 T
(tions will be generic functions. For each operation, we determine how to) 135 268.67 T
(implement the operation for objects of dif) 135 254.67 T
(fer) 336.78 254.67 T
(ent classes. The details of the) 349.86 254.67 T
(implementation of operations for dif) 135 240.67 T
(fer) 312.32 240.67 T
(ent classes de\336ne what the methods) 325.4 240.67 T
(do.) 135 226.67 T
-0.27 (When the initial design is done, it is time to start the implementation \321 we de\336ne) 108 206.67 P
(the classes, generic functions, and methods. The implementation phase often) 108 192.67 T
(leads to r) 108 178.67 T
(e\336nement of the class r) 152.59 178.67 T
(elationships as we think about possibilities for) 264.14 178.67 T
(specialization and sharing.) 108 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 51
%%Page: "50" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(50) 72 677.67 T
0 9.5 Q
(4.1 Goals of the airport application) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(4.1  Goals of the airport application) 108 638 T
1 11 Q
(Thr) 108 617.67 T
(oughout this book, we develop a sample application dealing with airports,) 125.29 617.67 T
(airplanes, gates, and r) 108 603.67 T
(elated objects. In this section, we describe the goals of the) 214.35 603.67 T
(application. Figur) 108 589.67 T
(e 4.1 shows a diagram of a simple airport.) 194.42 589.67 T
0 0 0 1 0 0 0 K
108 418.73 522 426.73 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 213.85 430.39 T
(e 4.1  Objects in a simple airport.) 240.07 430.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.04 (In Figur) 108 398.4 P
-0.04 (e 4.1, we see a single) 147.04 398.4 P
2 F
-0.04 (terminal) 249.09 398.4 P
1 F
-0.04 (, named A. It has two) 291.86 398.4 P
2 F
-0.04 (gates) 398.44 398.4 P
1 F
-0.04 (, named A1 and) 424.1 398.4 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A2. It has a) 108 384.4 T
2 F
(taxiway) 165.17 384.4 T
1 F
( named Echo. It has a) 204.27 384.4 T
2 F
(runway) 310.5 384.4 T
1 F
( named 1) 349 384.4 T
(1R-29L. It has an) 393 384.4 T
2 F
(air-) 476.74 384.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(craft) 108 370.4 T
1 F
( appr) 130.6 370.4 T
(oaching the r) 156.22 370.4 T
(unway) 219.75 370.4 T
(.) 252.35 370.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(When landing, an air) 135 356.4 T
(craft goes fr) 237.37 356.4 T
(om the sky to a r) 294.71 356.4 T
(unway to a taxiway to a) 375.68 356.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(gate. Figur) 108 342.4 T
(e 4.2 is a state diagram showing these transitions for both incoming) 160.18 342.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(and outgoing air) 108 328.4 T
(craft.) 189.04 328.4 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 172.91 522 180.9 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 111.64 184.57 T
(e 4.2  T) 137.85 184.57 T
(ransitions between sky and gate for outbound and inbound air) 170.87 184.57 T
(craft.) 475.64 184.57 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
127.46 446.73 502.54 572 C
0 0 0 1 0 0 0 K
219.43 520.25 252.9 546.52 258.94 538.82 225.47 512.55 4 Y
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
133.15 451.68 184.15 531.26 R
7 X
V
0 X
N
184.15 505.68 211.15 523.68 R
7 X
V
0 X
N
184.15 469.68 211.15 487.68 R
7 X
V
0 X
N
240.51 568.63 492.1 477.06 482.87 451.68 231.28 543.25 4 Y
7 X
V
0 X
N
1 11 Q
(terminal) 137.14 496.81 T
(A) 152.85 481.1 T
(A1) 191.35 512.29 T
(A2) 191.35 476.57 T
(r) 0 -20 312.54 523.71 TF
(unway 1) 0 -20 316.54 522.26 TF
(1R-29L) 0 -20 355.49 508.04 TF
211.15 455.53 227.93 536.53 R
7 X
V
0 X
N
7 X
90 450 1.67 4.44 218.78 518.59 G
90 450 1.67 4.44 218.78 518.59 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
(taxiway) 0 -270 222.14 459.43 TF
(Echo) 0 -270 222.69 505.62 TF
7 X
90 450 2.22 6.39 226.56 520.53 G
90 450 2.22 6.39 226.56 520.53 A
90 450 2.22 5.21 67.43 247.9 537.17 GG
90 450 2.22 5.21 67.43 247.9 537.17 AA
405.89 547.84 406.37 548.56 407.18 549.12 408.38 549.59 409.6 550 411.05 551.08 413.8 552.02
 455.74 551.81 462.79 558.14 465.9 558.14 462.79 548.36 464.11 547.21 462.91 546.58 448.8 544.59 413.3 544.8
 409.99 544.95 407.54 545.59 406.13 546.48 405.92 547.08 19 Y
V
0.2 H
0 Z
0 X
N
405.89 547.84 464.11 547.21 462.91 546.58 448.8 544.59 412.57 544.83 409.99 544.95 407.54 545.59
 406.13 546.48 405.92 547.08 9 Y
5 X
V
0 X
N
455.25 548.56 466.6 550.17 469.46 549.39 462.84 547.43 457.03 547.11 5 Y
7 X
V
0 X
N
427.13 547.62 450.2 556.98 454.23 556.98 443.91 550.52 440.28 547.46 5 Y
7 X
V
0 X
N
429.6 548.72 425.89 548.8 425.98 545.01 430.81 545.01 430.81 546.82 432.67 546.82 434.44 545.87
 439.69 545.87 440.33 547.51 438.23 548.19 435.98 548.71 11 Y
7 X
V
0 X
N
3 X
90 450 0.2 1.94 426.02 546.95 G
0 X
90 450 0.2 1.94 426.02 546.95 A
7 X
90 450 0.2 0.43 425.85 546.99 G
0 X
90 450 0.2 0.43 425.85 546.99 A
430.81 545.01 432.67 545.01 432.67 546.82 430.81 546.82 4 Y
4 X
V
0 X
N
432.67 545.01 433.8 545.44 438.23 545.44 439.69 545.87 434.44 545.87 432.67 546.82 6 Y
3 X
V
0 X
N
435.98 548.71 435.98 547.16 434.44 545.87 439.69 545.87 440.33 547.51 438.23 548.19 437.27 548.42 7 Y
4 X
V
0 X
N
425.65 544.74 425.49 543.88 425.65 542.83 429.93 542.83 429.93 544.47 433.48 544.47 434.61 543.88
 436.14 544.25 437.11 544.68 9 Y
3 X
V
0 X
N
429.93 544.47 431.62 544.47 431.62 542.83 429.93 542.83 4 Y
2 X
V
0 X
N
431.62 542.83 434.61 543.88 433.48 544.47 431.62 544.47 4 Y
V
N
431.46 548.72 450.25 556.3 451.87 556.3 439.1 547.91 438.23 548.19 435.98 548.71 432.91 548.71 7 Y
6 X
V
0 X
N
443.67 552.22 446.54 552.22 446.95 551.89 444.37 551.89 4 Y
7 X
V
0 X
N
443.67 552.22 443.48 551.97 444.34 551.65 446.95 551.89 444.37 551.89 5 Y
3 X
V
0 X
N
446.95 554.26 449.82 554.26 450.23 553.94 447.65 553.94 4 Y
7 X
V
0 X
N
446.95 554.26 446.76 554.02 447.62 553.7 450.23 553.94 447.65 553.94 5 Y
3 X
V
0 X
N
429.65 548.53 435.82 548.51 435.82 547.01 434.96 546.29 4 Y
5 X
V
450.2 556.98 454.23 556.98 453.76 556.68 449.45 556.67 4 Y
6 X
V
0 X
N
3 X
90 450 0.18 0.06 450.15 556.81 G
0 X
90 450 0.18 0.06 450.15 556.81 A
419.28 549.79 419.73 550.42 R
4 X
V
0 X
N
420.43 549.79 420.88 550.42 R
4 X
V
0 X
N
421.58 549.79 422.03 550.42 R
4 X
V
0 X
N
422.73 549.79 423.18 550.42 R
4 X
V
0 X
N
423.88 549.79 424.33 550.42 R
4 X
V
0 X
N
425.03 549.79 425.48 550.42 R
4 X
V
0 X
N
426.18 549.79 426.63 550.42 R
4 X
V
0 X
N
427.33 549.79 427.78 550.42 R
4 X
V
0 X
N
428.48 549.79 428.93 550.42 R
4 X
V
0 X
N
429.63 549.79 430.08 550.42 R
4 X
V
0 X
N
430.78 549.79 431.23 550.42 R
4 X
V
0 X
N
431.93 549.79 432.38 550.42 R
4 X
V
0 X
N
443.8 549.59 444.25 550.23 R
4 X
V
0 X
N
444.86 549.59 445.32 550.23 R
4 X
V
0 X
N
445.93 549.59 446.38 550.23 R
4 X
V
0 X
N
446.99 549.59 447.45 550.23 R
4 X
V
0 X
N
448.06 549.59 448.51 550.23 R
4 X
V
0 X
N
449.12 549.59 449.58 550.23 R
4 X
V
0 X
N
450.19 549.53 450.64 550.17 R
4 X
V
0 X
N
455.74 551.81 460.26 551.34 2 L
4 X
V
2 Z
0 X
N
455.87 548.06 466.51 549.46 468.58 549.13 462.84 547.43 457.03 547.11 5 Y
5 X
V
0 Z
0 X
N
455.93 548.01 464.06 549.14 465.68 548.69 457.03 547.11 4 Y
4 X
V
0 X
N
410.29 550.51 411.11 550.62 412.57 550.62 412.57 549.98 411.34 549.46 410.63 549.91 409.6 550 7 Y
V
N
411.34 549.46 411.68 550.62 2 L
V
2 Z
7 X
N
410.63 549.91 410.89 550.59 2 L
0 X
V
7 X
N
416.76 550.92 417.95 550.92 418.11 550.76 418.11 548.16 417.93 547.98 416.76 547.98 416.56 548.18
 416.56 550.72 8 Y
2 X
V
0 Z
0 X
N
416.76 550.92 417.95 550.92 418.11 550.76 418.11 548.16 417.93 547.98 416.76 547.98 416.56 548.18
 416.56 550.72 8 Y
7 X
V
0 X
N
405.95 547.84 408.6 546.83 416.18 545.81 424.84 545.17 425.46 544.78 412.55 544.87 410 544.98
 407.58 545.62 406.19 546.49 9 Y
4 X
V
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
108 135 522 648 C
157.72 200.9 472.28 310.73 C
0 0 0 1 0 0 0 K
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
90 450 37.14 17.28 313.79 252.3 A
271.64 251.92 352.36 275.73 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
344.88 245.47 350.93 250.38 348.4 243.01 346.64 244.24 4 Y
0 X
V
346.65 244.24 346.65 244.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 237.29 252.3 A
195.15 251.92 275.86 275.73 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
268.38 245.47 274.43 250.38 271.9 243.01 270.14 244.24 4 Y
0 X
V
270.14 244.24 270.14 244.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 390.29 252.3 A
348.15 251.92 428.86 275.73 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
421.38 245.47 427.43 250.38 424.9 243.01 423.14 244.24 4 Y
0 X
V
423.15 244.24 423.15 244.24 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 312.22 269.8 A
273.64 248.02 354.36 270.16 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
280.99 276.08 275.07 271.59 277.72 278.53 279.36 277.3 4 Y
0 X
V
279.36 277.3 279.36 277.3 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 388.72 269.8 A
350.15 248.02 430.86 270.16 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
357.49 276.08 351.57 271.59 354.21 278.53 355.85 277.3 4 Y
0 X
V
355.86 277.3 355.86 277.3 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 235.72 269.8 A
197.15 248.02 277.86 270.16 R
7 X
V
N
1 11 Q
0 X
(sky) 189.41 258.02 T
(r) 254.29 257.45 T
(unway) 258.55 257.45 T
(taxiway) 330.15 257.61 T
(gate) 413.34 257.61 T
397.86 251.59 450.72 268.73 8.57 RR
N
246.91 251.59 299.76 268.73 8.57 RR
N
322.38 251.59 375.24 268.73 8.57 RR
N
171.43 251.59 224.29 268.73 8.57 RR
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
204.5 276.08 198.57 271.59 201.22 278.53 202.86 277.3 4 Y
V
202.86 277.3 202.86 277.3 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Outbound air) 366.43 299.45 T
(craft) 432.74 299.45 T
(Inbound air) 173.57 216.59 T
(craft) 231.12 216.59 T
341.54 299 330 302.3 341.54 305.61 341.54 302.3 4 Y
V
357.15 302.3 341.54 302.3 2 L
N
275.18 222.61 286.72 219.3 275.18 216 275.18 219.3 4 Y
V
259.57 219.3 275.18 219.3 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 52
%%Page: "51" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4 Design of the Airport Example) 394.68 677.67 T
2 11 Q
(51) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(Our \336rst goal for this application is: given a set of incoming air) 108 640.67 T
(craft at various) 412.55 640.67 T
(positions in the sky) 108 626.67 T
(, we want to pr) 201.13 626.67 T
(edict which gate each air) 274.33 626.67 T
(craft will use when it) 394.43 626.67 T
-0.3 (arrives, and estimate the arrival time of the air) 108 612.67 P
-0.3 (craft at the gate. This information is) 330.41 612.67 P
(displayed on the \322Arrivals\323 monitors in an airport.) 108 598.67 T
-0.34 (Our second goal for the application is to pr) 135 584.67 P
-0.34 (ovide additional information. W) 340.87 584.67 P
-0.34 (e) 496.32 584.67 P
(must state the entir) 108 570.67 T
(e path an incoming air) 201.31 570.67 T
(craft will take, including the r) 310.36 570.67 T
(unway) 454.36 570.67 T
(,) 486.96 570.67 T
(the taxiway) 108 556.67 T
(, and the gate. W) 163.54 556.67 T
(e must also state the time that an air) 244.38 556.67 T
(craft is expected) 419.07 556.67 T
-0.12 (to be at each point. This information is used by the gr) 108 542.67 P
-0.12 (ound cr) 365.43 542.67 P
-0.12 (ew) 402.85 542.67 P
-0.12 (. For example, for) 416.28 542.67 P
(landing a single air) 108 528.67 T
(craft, the information looks like the following:) 200.99 528.67 T
5 9 Q
(12:30:) 108 508 T
(Aircraft Cardinal at Runway 11R-29L) 145.8 508 T
(12:43:) 108 497 T
(Aircraft Cardinal at Taxiway Echo) 145.8 497 T
(12:47:) 108 486 T
(Aircraft Cardinal at Gate A2) 145.8 486 T
1 11 Q
(When complete, the application considers departing air) 108 465.67 T
(craft as well as arriving) 377.58 465.67 T
(air) 108 451.67 T
(craft.) 120.85 451.67 T
3 15 Q
(4.2  Objects that model an airport) 108 412 T
1 11 Q
(W) 108 391.67 T
(e need to de\336ne classes that r) 117.99 391.67 T
(epr) 259.39 391.67 T
(esent the objects in Figur) 275.42 391.67 T
(e 4.1. Note that,) 395.75 391.67 T
(because the application deals with air) 108 377.67 T
(craft and objects with which that air) 290.58 377.67 T
(craft) 465.09 377.67 T
(interacts, we do not need to de\336ne a terminal class. W) 108 363.67 T
(e shall de\336ne these airport) 368.79 363.67 T
(classes:) 108 349.67 T
4 9 Q
(<airport>, <gate>, <taxiway>, <runway>, <aircraft>) 135 329 T
1 11 Q
-0.4 (Gates, taxiways, and r) 108 308.67 P
-0.4 (unways need to keep track of the air) 214.27 308.67 P
-0.4 (craft as they move fr) 387.98 308.67 P
-0.4 (om) 485.92 308.67 P
-0.12 (the r) 108 294.67 P
-0.12 (unway to the gate. One common attribute of gates, taxiways, and r) 130.14 294.67 P
-0.12 (unways is) 452.39 294.67 P
(that each of them can hold an air) 108 280.67 T
(craft, or mor) 266.88 280.67 T
(e than one air) 327.33 280.67 T
(craft. Because these) 393.26 280.67 T
-0.42 (objects can hold other objects, we can think of the gates, taxiways, and r) 108 266.67 P
-0.42 (unways as) 450.69 266.67 P
(containers of vehicles. W) 108 252.67 T
(e shall use a class to r) 228.02 252.67 T
(epr) 331.48 252.67 T
(esent containers:) 347.5 252.67 T
4 9 Q
(<vehicle-storage>) 135 232 T
1 11 Q
-0.16 (The containers in this application ar) 108 211.67 P
-0.16 (e connected to other containers. In the airport) 281.42 211.67 P
(diagram in Figur) 108 197.67 T
(e 4.1, gate A1 is connected to taxiway Echo, which is connected) 190.41 197.67 T
(to r) 108 183.67 T
(unway 1) 124.6 183.67 T
(1R-29L. W) 166.07 183.67 T
(e can use the) 215.79 183.67 T
4 9.5 Q
(<vehicle-storage>) 280.67 183.67 T
1 11 Q
( class to model these con-) 377.57 183.67 T
(nections.) 108 169.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 53
%%Page: "52" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(52) 72 677.67 T
0 9.5 Q
(4.2 Objects that model an airport) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(4.2.1  Position) 108 639.33 T
1 11 Q
(T) 108 619.67 T
(o be able to pr) 113.73 619.67 T
(edict when an air) 182.49 619.67 T
(craft will arrive at the airport, we need to know) 266.4 619.67 T
-0.32 (how the speed of the air) 108 605.67 P
-0.32 (craft r) 223.27 605.67 P
-0.32 (elative to the gr) 251.82 605.67 P
-0.32 (ound, and the distance the air) 326.45 605.67 P
-0.32 (craft is) 469.31 605.67 P
(fr) 108 591.67 T
(om the airport. Thus we need to r) 115.81 591.67 T
(epr) 278.67 591.67 T
(esent the positions of objects, such as air-) 294.69 591.67 T
(ports and air) 108 577.67 T
(craft, to compute distances.) 170.18 577.67 T
-0.37 (W) 135 563.67 P
-0.37 (e shall use two ways to expr) 144.99 563.67 P
-0.37 (ess the position of an object. The \336rst way is to) 279.61 563.67 P
-0.05 (use latitude and longitude to indicate the) 108 549.67 P
2 F
-0.05 (absolute position) 310.52 549.67 P
1 F
-0.05 ( of the object. The sec-) 397.54 549.67 P
(ond way is to describe the position of the object r) 108 535.67 T
(elative to a second object. For) 345.72 535.67 T
(example, a particular air) 108 521.67 T
(craft is 200 miles west of a given airport. This kind of) 226.39 521.67 T
(description is a) 108 507.67 T
2 F
(relative position) 184.51 507.67 T
1 F
(. W) 266.69 507.67 T
(e shall de\336ne classes to r) 282.17 507.67 T
(epr) 401.06 507.67 T
(esent these two) 417.09 507.67 T
(kinds of positions:) 108 493.67 T
4 9 Q
(<absolute-position>, <relative-position>) 135 473 T
1 11 Q
-0.18 (The attributes of absolute position must include information about the latitude or) 108 452.67 P
(longitude of that position. The attributes of r) 108 438.67 T
(elative position ar) 324.24 438.67 T
(e: a distance \050such) 411.3 438.67 T
(as 200 miles\051, a dir) 108 424.67 T
(ection \050such as South\051, and the second object \050the one to which) 197.69 424.67 T
(this one is r) 108 410.67 T
(elative, such as an airport\051.) 163.79 410.67 T
(These classes ar) 135 396.67 T
(e conceptually r) 211.34 396.67 T
(elated, and we can imagine that certain) 288.55 396.67 T
(operations work on both) 108 382.67 T
4 9.5 Q
(<absolute-position>) 230.72 382.67 T
1 11 Q
( and) 339.02 382.67 T
4 9.5 Q
(<relative-position>) 363.14 382.67 T
1 11 Q
(. W) 471.44 382.67 T
(e) 486.93 382.67 T
(shall de\336ne another class to be a super) 108 368.67 T
(class of both kinds of position:) 294.73 368.67 T
4 9 Q
(<position>) 135 348 T
3 13 Q
(4.2.2  T) 108 318.33 T
(ime) 143.97 318.33 T
1 11 Q
(W) 108 298.67 T
(e can know that an air) 117.99 298.67 T
(craft is 200 miles away fr) 225.32 298.67 T
(om the airport, and know that) 345.56 298.67 T
-0.34 (the air) 108 284.67 P
-0.34 (craft is traveling at 100 miles per hour) 138.52 284.67 P
-0.34 (, but this information is not enough to) 319.5 284.67 P
(pr) 108 270.67 T
(edict when the air) 118.76 270.67 T
(craft will arrive at the airport. W) 206.02 270.67 T
(e must also know what time) 362.83 270.67 T
(we obtained the position of the air) 108 256.67 T
(craft. W) 274.42 256.67 T
(e have alr) 311.89 256.67 T
(eady de\336ned classes to r) 358.89 256.67 T
(epr) 477.12 256.67 T
(e-) 493.14 256.67 T
(sent these two kinds of times:) 108 242.67 T
4 9 Q
(<time-of-day>, <time-offset>) 135 222 T
1 11 Q
(In Chapter 3, we noticed common characteristics of absolute time and r) 108 201.67 T
(elative) 453.42 201.67 T
(time, and captur) 108 187.67 T
(ed the common characteristics in another class:) 188 187.67 T
4 9 Q
(<time>) 135 167 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 54
%%Page: "53" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4 Design of the Airport Example) 394.68 677.67 T
2 11 Q
(53) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(4.2.3  Physical objects) 108 639.33 T
1 11 Q
(W) 108 619.67 T
(e have identi\336ed classes that can use inheritance. The time classes inherit fr) 117.99 619.67 T
(om) 482.4 619.67 T
4 9.5 Q
-0.08 (<time>) 108 605.67 P
1 11 Q
-0.04 (; the position classes inherit fr) 142.2 605.67 P
-0.04 (om) 286.49 605.67 P
4 9.5 Q
-0.08 (<position>) 304.92 605.67 P
1 11 Q
-0.04 (, and classes that behave like) 361.92 605.67 P
-0.29 (containers inherit fr) 108 591.67 P
-0.29 (om) 203.4 591.67 P
4 9.5 Q
-0.6 (<vehicle-storage>) 221.58 591.67 P
1 11 Q
-0.29 (. Note that, in addition, certain classes) 318.48 591.67 P
(r) 108 577.67 T
(epr) 112.15 577.67 T
(esent physical objects. Each physical object has a curr) 128.17 577.67 T
(ent position. Ther) 386.32 577.67 T
(efor) 472.07 577.67 T
(e,) 491.15 577.67 T
(we shall de\336ne a class:) 108 563.67 T
4 9 Q
(<physical-object>) 135 543 T
3 13 Q
(4.2.4  The organization of classes) 108 513.33 T
1 11 Q
(Figur) 108 493.67 T
(e 4.3 and Figur) 134.21 493.67 T
(e 4.4 show the inheritance r) 206.32 493.67 T
(elationships among the classes.) 339.2 493.67 T
0 0 0 1 0 0 0 K
108 281.44 522 289.43 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 122.1 293.1 T
(e 4.3  Inheritance r) 148.32 293.1 T
(elationships of classes r) 237.45 293.1 T
(epr) 351.07 293.1 T
(esenting physical objects.) 367.09 293.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 137.45 522 145.44 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 117.51 149.1 T
(e 4.4  Inheritance r) 143.73 149.1 T
(elationships of classes r) 232.86 149.1 T
(epr) 346.48 149.1 T
(esenting time and position.) 362.51 149.1 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
174.71 309.43 455.29 476 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 291.57 463.29 T
(<physical-object>) 272.29 424.14 T
315.38 445.68 312.07 434.14 308.77 445.68 312.07 445.68 4 Y
V
312.07 459.43 312.07 445.68 2 L
0.5 H
2 Z
N
(<airport>) 181.29 374.16 T
(<gate>) 292.71 323.22 T
(<taxiway>) 333.43 323.22 T
(<runway>) 242.71 323.22 T
(<aircraft>) 392.21 374.16 T
(<vehicle-storage>) 266.09 374.16 T
282.45 340.14 271.36 335.57 278.34 345.33 280.4 342.74 4 Y
V
309.21 365.57 280.4 342.73 2 L
N
315.74 345.68 312.43 334.14 309.12 345.68 312.43 345.68 4 Y
V
312.43 367.14 312.43 345.68 2 L
N
346.69 344.74 353.5 334.86 342.49 339.63 344.59 342.18 4 Y
V
316.14 365.57 344.59 342.18 2 L
N
220.85 384.68 208.86 384.14 218.74 390.95 219.79 387.81 4 Y
V
308.86 417.71 219.79 387.81 2 L
N
315.38 397.11 312.07 385.57 308.77 397.11 312.07 397.11 4 Y
V
312.07 417.86 312.07 397.11 2 L
N
406.97 390.81 416.86 384 404.87 384.54 405.92 387.67 4 Y
V
316.86 417.57 405.92 387.67 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
108 135 522 648 C
109.71 163.44 520.29 266.44 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 303.71 250.86 T
(<position>) 208.43 213.15 T
(<relative-position>) 229.57 176.74 T
(<time>) 405.13 213.15 T
406.14 230.83 416.71 225.15 404.74 224.36 405.44 227.6 4 Y
V
332.43 243.44 405.44 227.6 2 L
0.5 H
2 Z
N
(<time-offset>) 442.57 176.74 T
(<time-of-day>) 359 176.74 T
208.37 192.29 196.71 189.44 205.09 198.03 206.73 195.16 4 Y
V
226.71 206.58 206.73 195.16 2 L
N
257.95 199.77 266 190.87 254.45 194.15 256.2 196.96 4 Y
V
239.57 207.29 256.2 196.95 2 L
N
250.14 222.51 238.14 222.72 248.43 228.9 249.28 225.71 4 Y
V
318.14 244.15 249.29 225.71 2 L
N
(<absolute-position>) 113.14 176.74 T
397.8 192.15 386.14 189.29 394.52 197.89 396.16 195.02 4 Y
V
416.14 206.44 396.16 195.02 2 L
N
447.37 199.62 455.42 190.72 443.88 194.01 445.62 196.81 4 Y
V
429 207.15 445.63 196.81 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 55
%%Page: "54" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(54) 72 677.67 T
0 9.5 Q
(4.3 Behaviors of the objects) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(4.3  Behaviors of the objects) 108 638 T
1 11 Q
(T) 108 617.67 T
(o print a description of each step of the landing, we need a top-level function) 113.73 617.67 T
(that r) 108 603.67 T
(eceives an air) 133.97 603.67 T
(craft, airport, and time. W) 198.99 603.67 T
(e call this operation) 324.19 603.67 T
4 9.5 Q
(land-aircraft) 422.03 603.67 T
1 11 Q
(.) 496.13 603.67 T
(T) 135 589.67 T
(o print information about positions, times, and locations of air) 140.73 589.67 T
(craft, we) 442.33 589.67 T
(need to be able to print a r) 108 575.67 T
(epr) 235.29 575.67 T
(esentation of physical objects, times, and positions.) 251.32 575.67 T
(W) 108 561.67 T
(e call this operation) 117.99 561.67 T
4 9.5 Q
(say.) 215.82 561.67 T
1 11 Q
(T) 135 547.67 T
(o pr) 140.73 547.67 T
(edict how long it will take for an air) 160.24 547.67 T
(craft to arrive at the airport, we) 334.01 547.67 T
(need to compute the distance between the positions of the air) 108 533.67 T
(craft and the posi-) 405.36 533.67 T
(tion of the airport. Then we must divide the distance by the speed to determine) 108 519.67 T
-0.32 (how long it will take the air) 108 505.67 P
-0.32 (craft to get fr) 240.02 505.67 P
-0.32 (om one position to the other) 301.66 505.67 P
-0.32 (. W) 436.52 505.67 P
-0.32 (e shall call) 451.69 505.67 P
(this function) 108 491.67 T
4 9.5 Q
(f) 172.13 491.67 T
(lying-time) 177.83 491.67 T
1 11 Q
(.) 234.83 491.67 T
(T) 135 477.67 T
(o pr) 140.73 477.67 T
(edict when the air) 160.24 477.67 T
(craft will arrive, we need to add the time-of) 247.51 477.67 T
(fset r) 458.69 477.67 T
(ep-) 482.77 477.67 T
(r) 108 463.67 T
(esenting the \337ying time to the time-of-day stating when the air) 112.15 463.67 T
(craft\325s position) 416.46 463.67 T
(was known. Thus we need a way to add two times together) 108 449.67 T
(.) 396.77 449.67 T
-0.26 (Once the air) 135 435.67 P
-0.26 (craft arrives at the airport, it enters a set of connected containers) 193.28 435.67 P
(on its way to a particular gate. W) 108 421.67 T
(e need functions that track the movement of the) 268.01 421.67 T
-0.3 (air) 108 407.67 P
-0.3 (craft into and out of these containers; the functions ar) 120.85 407.67 P
-0.3 (e called) 377.11 407.67 P
4 9.5 Q
-0.63 (move-in-vehicle) 416.05 407.67 P
1 11 Q
(and) 108 393.67 T
4 9.5 Q
(move-out-vehicle) 129.37 393.67 T
1 11 Q
(. W) 220.57 393.67 T
(e also need a technique for picking which container) 236.06 393.67 T
(should be the next one on the path to the gate; this function is called) 108 379.67 T
4 9.5 Q
(next-out) 441.2 379.67 T
1 11 Q
(.) 486.8 379.67 T
(In the following brief descriptions, we summarize the operations we shall) 135 365.67 T
(implement.) 108 351.67 T
4 9 Q
(land-aircraft) 108 323 T
0 11 Q
(air) 183.6 323 T
(craft airport time) 195.62 323 T
(Generic Function) 444.27 321.67 T
1 F
(Describes each step of the landing and the time it would occur) 135 299.67 T
(. For example:) 436.91 299.67 T
5 9 Q
(12:30:) 135 279 T
(Aircraft Cardinal at Runway 11R-29L) 172.8 279 T
(12:43:) 135 268 T
(Aircraft Cardinal at Taxiway Echo) 172.8 268 T
(12:47:) 135 257 T
(Aircraft Cardinal at Gate A2) 172.8 257 T
1 11 Q
-0.27 (The) 135 236.67 P
0 F
-0.27 (air) 155.9 236.67 P
-0.27 (craft) 167.92 236.67 P
1 F
-0.27 ( is an instance of) 188.28 236.67 P
4 9.5 Q
-0.56 (<aircraft>) 270.04 236.67 P
1 11 Q
-0.27 (. The) 327.04 236.67 P
0 F
-0.27 (airport) 353.17 236.67 P
1 F
-0.27 ( is an instance of) 383.71 236.67 P
4 9.5 Q
-0.56 (<airport>) 465.47 236.67 P
1 11 Q
-0.27 (.) 516.77 236.67 P
(The) 135 222.67 T
0 F
(time) 156.16 222.67 T
1 F
( is an instance of) 175.72 222.67 T
4 9.5 Q
(<time-of-day>) 258.82 222.67 T
1 11 Q
(.) 332.92 222.67 T
4 9 Q
(say) 108 194 T
0 11 Q
(object) 129.6 194 T
(Generic Function) 444.27 192.67 T
1 F
(Prints a r) 135 170.67 T
(epr) 178.99 170.67 T
(esentation of) 195.02 170.67 T
0 F
(object) 260.07 170.67 T
1 F
(. The) 285.52 170.67 T
0 F
(object) 312.19 170.67 T
1 F
( may be an instance of any of the fol-) 337.64 170.67 T
(lowing classes:) 135 156.67 T
4 9.5 Q
(<physical-object>) 210.2 156.67 T
1 11 Q
(,) 307.1 156.67 T
4 9.5 Q
(<time-of-day>) 312.6 156.67 T
1 11 Q
(,) 386.7 156.67 T
4 9.5 Q
(<time-offset>) 392.2 156.67 T
1 11 Q
(,) 466.3 156.67 T
4 9.5 Q
(<rela-) 471.8 156.67 T
(tive-position>) 135 142.67 T
1 11 Q
(,) 214.8 142.67 T
4 9.5 Q
(<absolute-position>) 220.3 142.67 T
1 11 Q
(.) 328.6 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 56
%%Page: "55" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(4 Design of the Airport Example) 394.68 677.67 T
2 11 Q
(55) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(distance) 108 642 T
0 11 Q
(fr) 156.6 642 T
(om-object to-object) 163.74 642 T
(Generic Function) 444.27 640.67 T
1 F
(Returns the distance between its two ar) 135 618.67 T
(guments. The) 326.15 618.67 T
0 F
(fr) 395.19 618.67 T
(om-object) 402.33 618.67 T
1 F
( and) 444.89 618.67 T
0 F
(two-object) 469.02 618.67 T
1 F
(ar) 135 604.67 T
(e instances of) 144.65 604.67 T
4 9.5 Q
(<physical-object>) 212.41 604.67 T
1 11 Q
(.) 309.31 604.67 T
4 9 Q
(f) 108 576 T
(lying-time) 113.4 576 T
0 11 Q
(fr) 172.8 576 T
(om-object to-object) 179.94 576 T
(Generic Function) 444.27 574.67 T
1 F
(Returns the distance between its two ar) 135 552.67 T
(guments. The) 326.15 552.67 T
0 F
(fr) 395.19 552.67 T
(om-object) 402.33 552.67 T
1 F
( and) 444.89 552.67 T
0 F
(two-object) 469.02 552.67 T
1 F
(ar) 135 538.67 T
(e instances of) 144.65 538.67 T
4 9.5 Q
(<physical-object>) 212.41 538.67 T
1 11 Q
(.) 309.31 538.67 T
4 9 Q
(+) 108 510 T
0 11 Q
(time1 time2) 118.8 510 T
(Generic Function) 444.27 508.67 T
1 F
(Adds the two times and r) 135 486.67 T
(eturns the sum.) 258.64 486.67 T
0 F
(time1) 336.81 486.67 T
1 F
( and) 361.86 486.67 T
0 F
(time1) 385.99 486.67 T
1 F
( ar) 411.05 486.67 T
(e instances of) 423.44 486.67 T
4 9.5 Q
(<time>) 135 472.67 T
1 11 Q
(. Y) 169.2 472.67 T
(ou can add a) 181.02 472.67 T
4 9.5 Q
(<time-of-day>) 245.89 472.67 T
1 11 Q
( to a) 319.99 472.67 T
4 9.5 Q
(<time-offset>) 343.33 472.67 T
1 11 Q
(, and vice versa, but) 417.43 472.67 T
-0.26 (you cannot add two) 135 458.67 P
4 9.5 Q
-0.55 (<time-of-day>) 234.19 458.67 P
1 11 Q
-0.26 ( instances. In other wor) 308.29 458.67 P
-0.26 (ds, it is not logical to) 420.6 458.67 P
(add 8:30 to 14:00.) 135 444.67 T
4 9 Q
(move-in-vehicle) 108 416 T
0 11 Q
(vehicle container dir) 194.4 416 T
(ection) 284.45 416 T
(Generic Function) 444.27 414.67 T
1 F
(Moves the) 135 392.67 T
0 F
(vehicle) 188.32 392.67 T
1 F
( into the) 218.47 392.67 T
0 F
(container) 261.17 392.67 T
1 F
( in the) 302.93 392.67 T
0 F
(dir) 336.04 392.67 T
(ection) 348.67 392.67 T
1 F
( given. The) 375.15 392.67 T
0 F
(vehicle) 431.77 392.67 T
1 F
( is an) 461.92 392.67 T
(instance of) 135 378.67 T
4 9.5 Q
(<vehicle>) 190.08 378.67 T
1 11 Q
(. The container is an instance of) 241.38 378.67 T
4 9.5 Q
(<vehicle-storage>) 396.73 378.67 T
1 11 Q
(. The) 493.63 378.67 T
0 F
(dir) 135 364.67 T
(ection) 147.64 364.67 T
1 F
( is ...) 174.12 364.67 T
4 9 Q
(move-out-vehicle) 108 336 T
0 11 Q
(vehicle container dir) 199.8 336 T
(ection) 289.85 336 T
(Generic Function) 444.27 334.67 T
1 F
(Moves the) 135 312.67 T
0 F
(vehicle) 188.32 312.67 T
1 F
( out of the) 218.47 312.67 T
0 F
(container) 270.62 312.67 T
1 F
( in the) 312.38 312.67 T
0 F
(dir) 345.48 312.67 T
(ection) 358.12 312.67 T
1 F
( given. The) 384.6 312.67 T
0 F
(vehicle) 441.22 312.67 T
1 F
( is an) 471.37 312.67 T
(instance of) 135 298.67 T
4 9.5 Q
(<vehicle>) 190.08 298.67 T
1 11 Q
(. The container is an instance of) 241.38 298.67 T
4 9.5 Q
(<vehicle-storage>) 396.73 298.67 T
1 11 Q
(. The) 493.63 298.67 T
0 F
(dir) 135 284.67 T
(ection) 147.64 284.67 T
1 F
( is ...) 174.12 284.67 T
4 9 Q
(next-out) 108 256 T
0 11 Q
( container dir) 151.2 256 T
(ection airport) 211.1 256 T
(Generic Function) 444.27 254.67 T
1 F
(Determines information about the next air) 135 232.67 T
(craft out of a container so we can do) 339.85 232.67 T
(scheduling. The container is an instance of) 135 218.67 T
4 9.5 Q
(<vehicle-storage>) 343.85 218.67 T
1 11 Q
(. The) 440.75 218.67 T
0 F
(dir) 467.41 218.67 T
(ection) 480.05 218.67 T
1 F
( is) 506.53 218.67 T
(... The airport is an instance of) 135 204.67 T
4 9.5 Q
(<airport>) 283.85 204.67 T
1 11 Q
(.) 335.15 204.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 57
%%Page: "56" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(56) 72 677.67 T
0 9.5 Q
(4.4 Our approach to this application) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(4.4  Our approach to this application) 108 638 T
1 11 Q
(In this book, we teach you Dylan thr) 108 617.67 T
(ough a family of examples based ar) 284.88 617.67 T
(ound the) 456.89 617.67 T
(airport theme. W) 108 603.67 T
(e use the following pr) 190.07 603.67 T
(ogramming methodology in this book:) 295.89 603.67 T
2 F
(1.) 117 583.67 T
1 F
-0.16 (W) 135 583.67 P
-0.16 (e cr) 144.99 583.67 P
-0.16 (eate a pr) 161.88 583.67 P
-0.16 (ogram in small pieces. A piece might be a class and a method,) 202.95 583.67 P
(or several methods.) 135 569.67 T
2 F
(2.) 117 549.67 T
1 F
(W) 135 549.67 T
(e test the pieces in the listener by cr) 144.99 549.67 T
(eating instances and calling methods.) 316.54 549.67 T
2 F
(3.) 117 529.67 T
1 F
(W) 135 529.67 T
(e r) 144.99 529.67 T
(e\336ne the code as we go. In the course of developing and testing the) 157.15 529.67 T
(pieces, we often gain a better understanding of the pr) 135 515.67 T
(oblem domain. W) 394.27 515.67 T
(e) 480.32 515.67 T
(r) 135 501.67 T
(e\336ne the code by r) 139.15 501.67 T
(eor) 228.23 501.67 T
(ganizing classes and r) 243.65 501.67 T
(eplacing pieces of the pr) 349.95 501.67 T
(ogram) 467.72 501.67 T
(with better versions.) 135 487.67 T
(In certain examples we start with a simplistic appr) 108 467.67 T
(oach to implementing a partic-) 352.98 467.67 T
(ular solution. W) 108 453.67 T
(e then pr) 185.62 453.67 T
(esent other solutions that show a better style of Dylan) 228.8 453.67 T
(pr) 108 439.67 T
(ogramming. W) 118.76 439.67 T
(e r) 191.36 439.67 T
(ecommend that you r) 203.52 439.67 T
(ead all the appr) 307.73 439.67 T
(oaches to see the pr) 383.49 439.67 T
(o-) 478.03 439.67 T
(gr) 108 425.67 T
(ession.) 118.26 425.67 T
-0.14 (Because we ar) 135 411.67 P
-0.14 (e pr) 203.25 411.67 P
-0.14 (esenting the sample application as a means for explaining) 221.88 411.67 P
(Dylan, we simplify certain parts of the application, and cover other parts only in) 108 397.67 T
-0.19 (Appendix A, which contains the sour) 108 383.67 P
-0.19 (ce code of the airport application. Not every) 288.57 383.67 P
(class, slot, or method pr) 108 369.67 T
(esented is used in the \336nal application. W) 223.68 369.67 T
(e use certain) 425.32 369.67 T
(classes, slots, and methods for illustrative purposes only) 108 355.67 T
(.) 380.62 355.67 T
(In the following chapters we de\336ne \050and r) 135 341.67 T
(ede\336ne\051 the classes and methods) 339.04 341.67 T
(discussed in this chapter) 108 327.67 T
(. Our goal for each chapter is to teach you mor) 226.91 327.67 T
(e about) 451.99 327.67 T
(Dylan and to continue to develop the sample application.) 108 313.67 T
3 15 Q
(4.5  Summary) 108 274 T
1 11 Q
(This chapter cover) 108 253.67 T
(ed:) 197.63 253.67 T
(\245) 117 233.67 T
(W) 135 233.67 T
(e summarized the steps of designing an object-oriented application.) 144.99 233.67 T
(\245) 117 213.67 T
(W) 135 213.67 T
(e pr) 144.99 213.67 T
(ovided an initial design of the airport application, including the over-) 163.76 213.67 T
(all goal, the classes, and the operations.) 135 199.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 58
%%Page: "57" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(57) 300.5 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(5) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(5) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Cycles Thr) 109 566.45 T
(ough) 250.75 566.45 T
(Implementation and Design) 108 536.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we begin by de\336ning the position classes and) 177.24 424.67 T
4 9.5 Q
(say) 405.63 424.67 T
1 11 Q
( methods. W) 422.73 424.67 T
(e) 483.33 424.67 T
(discover mor) 108 410.67 T
(e commonality than anticipated, and act on the opportunity to) 171.92 410.67 T
(arrange for mor) 108 396.67 T
(e sharing of code. W) 184.86 396.67 T
(e illustrate how we can impr) 283.04 396.67 T
(ove a design) 421.73 396.67 T
-0.32 (based on information learned while implementing a pr) 108 382.67 P
-0.32 (ogram. Given the dynamic) 372.58 382.67 P
(natur) 108 368.67 T
(e of Dylan, it is easy to change the design of a pr) 134.27 368.67 T
(ogram.) 368.61 368.67 T
3 15 Q
(5.1  Absolute position: using) 108 329 T
4 13 Q
(<directed-angle>) 279.55 329 T
1 11 Q
(In this section, our goal is to de\336ne the) 108 308.67 T
4 9.5 Q
(<absolute-position>) 298.31 308.67 T
1 11 Q
( class and a) 406.61 308.67 T
4 9.5 Q
(say) 464.65 308.67 T
1 11 Q
(method to describe its instances. W) 108 294.67 T
(e start by de\336ning the) 278.24 294.67 T
4 9.5 Q
(<position>) 387.16 294.67 T
1 11 Q
( class:) 444.16 294.67 T
4 9 Q
(def) 108 274 T
(ine class <position> \050<object>\051) 124.2 274 T
(end;) 108 263 T
1 11 Q
-0.02 (The) 108 242.67 P
4 9.5 Q
-0.05 (<absolute-position>) 129.14 242.67 P
1 11 Q
-0.02 ( class stor) 237.44 242.67 P
-0.02 (es its latitude and longitude. One way to r) 284.21 242.67 P
-0.02 (ep-) 488.46 242.67 P
(r) 108 228.67 T
(esent latitude and longitude is with degr) 112.15 228.67 T
(ees, minutes, seconds, and a dir) 309.77 228.67 T
(ection.) 463.24 228.67 T
(W) 108 214.67 T
(e could \050but we do not\051 use eight slots:) 117.99 214.67 T
4 9.5 Q
(latitude-degrees) 308.26 214.67 T
1 11 Q
(,) 399.45 214.67 T
4 9.5 Q
(latitude-minutes) 404.95 214.67 T
1 11 Q
(,) 496.15 214.67 T
4 9.5 Q
(latitude-seconds) 108 200.67 T
1 11 Q
(,) 199.2 200.67 T
4 9.5 Q
(latitude-direction) 204.7 200.67 T
1 11 Q
(,) 307.3 200.67 T
4 9.5 Q
(longitude-degrees) 312.8 200.67 T
1 11 Q
(, l) 409.7 200.67 T
4 9.5 Q
(ongitude-min-) 418.4 200.67 T
(utes) 108 186.67 T
1 11 Q
(,) 130.8 186.67 T
4 9.5 Q
(longitude-seconds) 136.3 186.67 T
1 11 Q
(, and) 233.2 186.67 T
4 9.5 Q
(longitude-direction) 260.07 186.67 T
1 11 Q
(. Instead, we de\336ne a class) 368.37 186.67 T
(that contains degr) 108 172.67 T
(ees, minutes, seconds, and a dir) 195.47 172.67 T
(ection, and call it) 348.94 172.67 T
4 9.5 Q
(<directed-) 434.24 172.67 T
(angle>) 108 158.67 T
1 11 Q
(:) 142.2 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 59
%%Page: "58" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(58) 72 677.67 T
0 9.5 Q
(5.1 Absolute position: using <directed-angle>) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <directed-angle> \050<object>\051) 124.2 642 T
(slot degrees) 118.8 631 T
(:: <integer>, init-keyword: degrees:;) 199.8 631 T
(slot minutes) 118.8 620 T
(:: <integer>, init-keyword: minutes:;) 199.8 620 T
(slot seconds) 118.8 609 T
(:: <integer>, init-keyword: seconds:;) 199.8 609 T
(slot direction :: <string>,) 118.8 598 T
(init-keyword: direction:;) 275.4 598 T
(end;) 108 587 T
1 11 Q
-0.25 (W) 108 566.67 P
-0.25 (e can use the) 117.99 566.67 P
4 9.5 Q
-0.52 (<directed-angle>) 181.87 566.67 P
1 11 Q
-0.25 ( class in the de\336nition of) 273.07 566.67 P
4 9.5 Q
-0.52 (<absolute-position>) 392.95 566.67 P
1 11 Q
-0.25 (:) 501.25 566.67 P
4 9 Q
(def) 108 546 T
(ine class <absolute-position> \050<position>\051) 124.2 546 T
(slot latitude) 118.8 535 T
(:: <directed-angle>, init-keyword: latitude:;) 199.8 535 T
(slot longitude :: <directed-angle>, init-keyword: longitude:;) 118.8 524 T
(end;) 108 513 T
1 11 Q
(W) 108 492.67 T
(e could de\336ne the) 117.99 492.67 T
4 9.5 Q
(say) 207.27 492.67 T
1 11 Q
( method as follows:) 224.38 492.67 T
4 9 Q
(def) 108 472 T
(ine method say \050position :: <absolute-position>\051) 124.2 472 T
(format\050*window*, "%d degrees %d minutes %d seconds %s latitude\134n",) 118.8 461 T
(position.latitude.degrees, position.latitude.minutes,) 129.6 450 T
(position.latitude.seconds, position.latitude.direction\051;) 129.6 439 T
(format\050*window*, "%d degrees %d minutes %d seconds %s longitude\134n",) 118.8 428 T
(position.longitude.degrees, position.longitude.minutes,) 129.6 417 T
(position.longitude.seconds, position.longitude.direction\051;) 129.6 406 T
(end;) 108 395 T
1 11 Q
(Note that this) 108 374.67 T
4 9.5 Q
(say) 177.18 374.67 T
1 11 Q
( method uses) 194.28 374.67 T
4 9.5 Q
(position.latitude.degrees) 261.46 374.67 T
1 11 Q
( to access the) 403.96 374.67 T
4 9.5 Q
(degrees) 108 360.67 T
1 11 Q
( slot of the instance of) 147.9 360.67 T
4 9.5 Q
(<directed-angle>) 256.36 360.67 T
1 11 Q
( stor) 347.56 360.67 T
(ed in the) 368.71 360.67 T
4 9.5 Q
(latitude) 413.81 360.67 T
1 11 Q
( slot of) 459.41 360.67 T
4 9.5 Q
(<absolute-position>) 108 346.67 T
1 11 Q
(.) 216.3 346.67 T
(Although the pr) 135 332.67 T
(eceding method works, ther) 213.42 332.67 T
(e is a better way to implement) 349.69 332.67 T
4 9.5 Q
(say) 108 318.67 T
1 11 Q
(. W) 123.88 318.67 T
(e can de\336ne a) 139.37 318.67 T
4 9.5 Q
(say) 208.24 318.67 T
1 11 Q
( method on) 225.34 318.67 T
4 9.5 Q
(<directed-angle>) 283.69 318.67 T
1 11 Q
(:) 374.89 318.67 T
4 9 Q
(def) 108 298 T
(ine method say \050angle :: <directed-angle>\051) 124.2 298 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 118.8 287 T
(angle.degrees, angle.minutes, angle.seconds, angle.direction\051;) 156.6 276 T
(end;) 108 265 T
1 11 Q
-0.09 (Now we can r) 108 244.67 P
-0.09 (ede\336ne the) 175.67 244.67 P
4 9.5 Q
-0.19 (say) 231.83 244.67 P
1 11 Q
-0.09 ( method for) 248.93 244.67 P
4 9.5 Q
-0.19 (<absolute-position>) 308.61 244.67 P
1 11 Q
-0.09 ( to call) 416.91 244.67 P
4 9.5 Q
-0.19 (say) 451.26 244.67 P
1 11 Q
-0.09 ( on the) 468.36 244.67 P
(instances of) 108 230.67 T
4 9.5 Q
(<directed-angle>) 167.74 230.67 T
1 11 Q
( stor) 258.94 230.67 T
(ed in the) 280.09 230.67 T
4 9.5 Q
(latitude) 325.19 230.67 T
1 11 Q
( and) 370.79 230.67 T
4 9.5 Q
(longitude) 394.92 230.67 T
1 11 Q
( slots:) 446.22 230.67 T
4 9 Q
(def) 108 210 T
(ine method say \050position :: <absolute-position>\051) 124.2 210 T
(say\050position.latitude\051;) 118.8 199 T
(format\050*window*, " latitude\134n"\051;) 118.8 188 T
(say\050position.longitude\051;) 118.8 177 T
(format\050*window*, " longitude\134n"\051;) 118.8 166 T
(end;) 108 155 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 60
%%Page: "59" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(59) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.14 (This division of labor r) 108 640.67 P
-0.14 (educes duplication of code. The) 218.02 640.67 P
4 9.5 Q
-0.28 (<directed-angle>) 374.18 640.67 P
1 11 Q
-0.14 ( class is) 465.38 640.67 P
(r) 108 626.67 T
(esponsible for describing its instances.) 112.15 626.67 T
(Note that ther) 135 612.67 T
(e is still a pr) 202.98 612.67 T
(oblem with this appr) 261.23 612.67 T
(oach, because this) 362.83 612.67 T
4 9.5 Q
(say) 452.78 612.67 T
1 11 Q
(method must print) 108 598.67 T
4 9.5 Q
(latitude) 202.69 598.67 T
1 11 Q
( and) 248.29 598.67 T
4 9.5 Q
(longitude) 272.41 598.67 T
1 11 Q
( after calling) 323.71 598.67 T
4 9.5 Q
(say) 386.83 598.67 T
1 11 Q
( on the dir) 403.93 598.67 T
(ected) 453.91 598.67 T
(angles stor) 108 584.67 T
(ed in its two slots. The modularity is not ideal, because the method on) 160.3 584.67 T
4 9.5 Q
(<absolute-position>) 108 570.67 T
1 11 Q
( must know that the method on) 216.3 570.67 T
4 9.5 Q
(<directed-angle>) 372.28 570.67 T
1 11 Q
( does) 463.48 570.67 T
(not print) 108 556.67 T
4 9.5 Q
(latitude) 153.64 556.67 T
1 11 Q
( or) 199.24 556.67 T
4 9.5 Q
(longitude) 215.09 556.67 T
1 11 Q
(. W) 266.39 556.67 T
(e solve that pr) 281.88 556.67 T
(oblem in Section 5.2.) 350.58 556.67 T
(W) 135 542.67 T
(e cr) 144.99 542.67 T
(eate an instance of) 162.04 542.67 T
4 9.5 Q
(<absolute-position>) 254.14 542.67 T
1 11 Q
(:) 362.44 542.67 T
5 9 Q
(?) 108 522 T
4 F
( def) 113.4 522 T
(ine variable *my-absolute-position* =) 135 522 T
(make\050<absolute-position>,) 129.6 511 T
(latitude:) 156.6 500 T
(make) 216 500 T
(\050<directed-angle>, degrees: 42, minutes: 19,) 243 500 T
(seconds: 34, direction: "North"\051,) 248.4 489 T
(longitude: make \050<directed-angle>, degrees: 70, minutes: 56,) 156.6 478 T
(seconds: 26, direction: "West"\051\051;) 248.4 467 T
1 11 Q
(W) 108 446.67 T
(e call) 117.99 446.67 T
4 9.5 Q
(say) 145.54 446.67 T
1 11 Q
( on the instance:) 162.64 446.67 T
5 9 Q
(?) 108 426 T
4 F
( say\050*my-absolute-position*\051;) 113.4 426 T
5 F
(42 degrees 19 minutes 34 seconds North latitude) 108 415 T
(70 degrees 56 minutes 26 seconds West longitude) 108 404 T
1 11 Q
(This output is \336ne \321 as we make changes to the classes and methods, we always) 108 383.67 T
(want to achieve this output.) 108 369.67 T
3 15 Q
(5.2  Absolute position: using) 108 330 T
4 13 Q
(<latitude>) 279.55 330 T
3 15 Q
( and) 357.55 330 T
4 13 Q
(<longitude>) 386.27 330 T
1 11 Q
(In Section 5.1, we de\336ned the) 108 309.67 T
4 9.5 Q
(<directed-angle>) 252.97 309.67 T
1 11 Q
( class to r) 344.17 309.67 T
(epr) 389.07 309.67 T
(esent what latitude) 405.1 309.67 T
-0.17 (and longitude have in common. It is also useful to r) 108 295.67 P
-0.17 (ecognize that latitude and lon-) 356.36 295.67 P
(gitude have dif) 108 281.67 T
(fer) 181.8 281.67 T
(ences, as well as similarities. In Section 5.1, we r) 194.88 281.67 T
(epr) 426.86 281.67 T
(esented lati-) 442.88 281.67 T
(tude and longitude by the names of slots in) 108 267.67 T
4 9.5 Q
(<absolute-position>) 321.11 267.67 T
1 11 Q
(, and their) 429.41 267.67 T
(implementation as instances of) 108 253.67 T
4 9.5 Q
(<directed-angle>) 261.07 253.67 T
1 11 Q
(. W) 352.27 253.67 T
(e can pr) 367.75 253.67 T
(ovide classes that) 406.07 253.67 T
(r) 108 239.67 T
(epr) 112.15 239.67 T
(esent latitude and longitude, to elevate the visibility of these objects. W) 128.17 239.67 T
(e) 472.31 239.67 T
(describe the bene\336ts of this appr) 108 225.67 T
(oach after the code:) 265.76 225.67 T
4 9 Q
(def) 108 205 T
(ine class <latitude> \050<directed-angle>\051) 124.2 205 T
(end;) 108 194 T
(def) 108 175 T
(ine class <longitude> \050<directed-angle>\051) 124.2 175 T
(end;) 108 164 T
1 11 Q
(W) 108 143.67 T
(e r) 117.99 143.67 T
(ede\336ne) 130.15 143.67 T
4 9.5 Q
(<absolute-position>) 168.49 143.67 T
1 11 Q
( to use) 276.79 143.67 T
4 9.5 Q
(<latitude>) 311.2 143.67 T
1 11 Q
( and) 368.2 143.67 T
4 9.5 Q
(<longitude>) 392.32 143.67 T
1 11 Q
(:) 455.02 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "59" 61
%%Page: "60" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(60) 72 677.67 T
0 9.5 Q
(5.2 Absolute position: using <latitude> and <longitude>) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <absolute-position> \050<position>\051) 124.2 642 T
(slot latitude) 118.8 631 T
(:: <latitude>,) 199.8 631 T
( init-keyword: latitude:;) 280.8 631 T
(slot longitude :: <longitude>, init-keyword: longitude:;) 118.8 620 T
(end;) 108 609 T
1 11 Q
(Figur) 108 588.67 T
(e 5.1 shows the inheritance r) 134.21 588.67 T
(elationships of the position and angle classes.) 271.76 588.67 T
0 0 0 1 0 0 0 K
108 445.72 522 453.71 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 139.44 457.38 T
(e 5.1  Inheritance r) 165.66 457.38 T
(elationships of the position and angle classes) 254.79 457.38 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(W) 108 425.39 T
(e r) 117.99 425.39 T
(ede\336ne the) 130.15 425.39 T
4 9.5 Q
(say) 186.5 425.39 T
1 11 Q
( methods:) 203.6 425.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 108 404.72 T
(ine method say \050angle :: <directed-angle>\051) 124.2 404.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 118.8 393.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(angle.degrees, angle.minutes, angle.seconds, angle.direction\051;) 156.6 382.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 371.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 108 352.72 T
(ine method say \050latitude :: <latitude>\051) 124.2 352.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 118.8 341.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, " latitude\134n"\051;) 118.8 330.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 319.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 108 300.72 T
(ine method say \050longitude :: <longitude>\051) 124.2 300.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(next-method\050\051;) 118.8 289.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format\050*window*, " longitude\134n"\051;) 118.8 278.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 267.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 108 248.72 T
(ine method say \050position :: <absolute-position>\051) 124.2 248.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.latitude\051;) 118.8 237.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(say\050position.longitude\051;) 118.8 226.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 215.72 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(This r) 108 195.39 T
(ede\336nition of) 135.91 195.39 T
4 9.5 Q
(<absolute-position>) 203.79 195.39 T
1 11 Q
( is not compatible with the pr) 312.09 195.39 T
(evious) 454.88 195.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(de\336nition, because the types of the slots have changed. Ther) 108 181.39 T
(efor) 399.79 181.39 T
(e, we need to cr) 418.87 181.39 T
(e-) 494.62 181.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ate an instance of the new class:) 108 167.39 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
148.25 473.71 481.75 571 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 277.32 561.86 T
(<position>) 182.75 522 T
205.06 507.25 201.75 495.71 198.44 507.25 201.75 507.25 4 Y
V
201.75 516.86 201.75 507.25 2 L
0.5 H
2 Z
N
225.18 532.79 213.18 533 223.46 539.18 224.32 535.98 4 Y
V
293.18 554.43 224.32 535.98 2 L
N
(<absolute-position>) 156.45 489.16 T
(<directed-angle>) 360.32 520.71 T
(<latitude>) 336.75 486 T
(<longitude>) 412.47 486 T
370.89 539.04 381.18 532.86 369.18 532.65 370.03 535.84 4 Y
V
301.18 554.29 370.04 535.84 2 L
N
384.98 500.28 373.32 497.43 381.7 506.02 383.34 503.15 4 Y
V
403.32 514.57 383.34 503.15 2 L
N
434.55 507.76 442.6 498.86 431.06 502.14 432.8 504.95 4 Y
V
416.18 515.29 432.81 504.95 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "60" 62
%%Page: "61" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(61) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
( def) 113.4 642 T
(ine variable *my-absolute-position* =) 135 642 T
(make\050<absolute-position>,) 129.6 631 T
(latitude:) 156.6 620 T
(make\050<latitude>, degrees: 42, minutes: 19,) 216 620 T
(seconds: 34, direction: "North"\051,) 243 609 T
(longitude: make\050<longitude>, degrees: 70, minutes: 56,) 156.6 598 T
(seconds: 26, direction: "West"\051\051;) 243 587 T
1 11 Q
(W) 108 566.67 T
(e call) 117.99 566.67 T
4 9.5 Q
(say) 145.54 566.67 T
1 11 Q
( on the instance:) 162.64 566.67 T
5 9 Q
(?) 108 546 T
4 F
( say\050*my-absolute-position*\051;) 113.4 546 T
5 F
(42 degrees 19 minutes 34 seconds North latitude) 108 535 T
(70 degrees 56 minutes 26 seconds West longitude) 108 524 T
1 11 Q
(This technique, characterized by de\336ning the classes) 108 503.67 T
4 9.5 Q
(<latitude>) 365.29 503.67 T
1 11 Q
( and) 422.29 503.67 T
4 9.5 Q
(<longi-) 446.41 503.67 T
(tude>) 108 489.67 T
1 11 Q
(, pr) 136.5 489.67 T
(ovides the following bene\336ts:) 152.76 489.67 T
(\245) 117 469.67 T
(Each class is r) 135 469.67 T
(esponsible for describing its instances. Each method depends) 201.68 469.67 T
(on) 135 455.67 T
4 9.5 Q
(say) 150.16 455.67 T
1 11 Q
( working for all the classes. This appr) 167.26 455.67 T
(oach solves the pr) 348.52 455.67 T
(oblem noted) 435.59 455.67 T
(in Section 5.1, wher) 135 441.67 T
(e the) 229.47 441.67 T
4 9.5 Q
(say) 255.49 441.67 T
1 11 Q
( method on) 272.59 441.67 T
4 9.5 Q
(<absolute-position>) 330.95 441.67 T
1 11 Q
( printed) 439.25 441.67 T
4 9.5 Q
(lat-) 480.88 441.67 T
(itude) 135 427.67 T
1 11 Q
( and) 163.5 427.67 T
4 9.5 Q
(longitude) 187.62 427.67 T
1 11 Q
( after calling) 238.92 427.67 T
4 9.5 Q
(say) 302.04 427.67 T
1 11 Q
( on the dir) 319.14 427.67 T
(ected angles stor) 369.12 427.67 T
(ed in its) 449.91 427.67 T
(two slots.) 135 413.67 T
(\245) 117 393.67 T
(This appr) 135 393.67 T
(oach guar) 181.63 393.67 T
(ds against any attempt to stor) 229.57 393.67 T
(e a latitude in a slot desig-) 373.54 393.67 T
(nated for a longitude, and vice versa. This type-checking will be useful) 135 379.67 T
(when we intr) 135 365.67 T
(oduce mor) 199.53 365.67 T
(e dif) 251.65 365.67 T
(fer) 273.06 365.67 T
(ences between the classes. For example, the) 286.14 365.67 T
(dir) 135 351.67 T
(ection of a latitude is North or South, and the dir) 149.07 351.67 T
(ection of a longitude is) 385.58 351.67 T
-0.05 (W) 135 337.67 P
-0.05 (est or East. W) 144.99 337.67 P
-0.05 (e can pr) 210.16 337.67 P
-0.05 (ovide methods that ensur) 248.37 337.67 P
-0.05 (e that the dir) 372.43 337.67 P
-0.05 (ections stor) 434.2 337.67 P
-0.05 (ed) 489.31 337.67 P
(in a) 135 323.67 T
4 9.5 Q
(<latitude>) 155.6 323.67 T
1 11 Q
( instance ar) 212.6 323.67 T
(e appr) 267.66 323.67 T
(opriate for latitude, and do the same for) 298.55 323.67 T
(longitude. W) 135 309.67 T
(e show how to do that type-checking in Section 7.2, page 88.) 197.62 309.67 T
(\245) 117 289.67 T
(Y) 135 289.67 T
(ou can ask an object what its class is by using the) 141.32 289.67 T
4 9.5 Q
(object-class) 381.7 289.67 T
1 11 Q
( function.) 450.1 289.67 T
(In this case, you can \336nd out that an object is a latitude or longitude, rather) 135 275.67 T
(than just a dir) 135 261.67 T
(ected angle. This can be useful in debugging.) 202.17 261.67 T
3 15 Q
(5.3  Relative position: \336rst approach) 108 222 T
1 11 Q
(The) 108 201.67 T
4 9.5 Q
(<relative-position>) 129.16 201.67 T
1 11 Q
( class is de\336ned:) 237.46 201.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 63
%%Page: "62" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(62) 72 677.67 T
0 9.5 Q
(5.4 Prelude to a new approach) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <relative-position> \050<object>\051) 124.2 642 T
(slot distance) 118.8 631 T
(:: <single-f) 210.6 631 T
(loat>,) 275.4 631 T
(init-keyword: distance:;) 329.4 631 T
(slot angle) 118.8 620 T
(:: <integer>,) 210.6 620 T
(init-keyword: angle:;) 329.4 620 T
(slot from-object :: <physical-object>, init-keyword: from-object:;) 118.8 609 T
(end;) 108 598 T
1 11 Q
(An instance of) 108 577.67 T
4 9.5 Q
(<relative-position>) 180.79 577.67 T
1 11 Q
( knows wher) 289.09 577.67 T
(e it is located in r) 351.94 577.67 T
(elation to the) 434.53 577.67 T
(object in its) 108 563.67 T
4 9.5 Q
(from-object) 165.71 563.67 T
1 11 Q
( slot. The) 228.41 563.67 T
4 9.5 Q
(distance) 275.28 563.67 T
1 11 Q
( slot stor) 320.88 563.67 T
(es the distance to the other) 362.24 563.67 T
(object, and the) 108 549.67 T
4 9.5 Q
(angle) 181.28 549.67 T
1 11 Q
( slot stor) 209.78 549.67 T
(es the dir) 251.14 549.67 T
(ection to the other object. The angle has) 295.9 549.67 T
-0.17 (degr) 108 535.67 P
-0.17 (ees, minutes, and seconds, but we choose to r) 130.25 535.67 P
-0.17 (epr) 348.77 535.67 P
-0.17 (esent it as an) 364.8 535.67 P
4 9.5 Q
-0.35 (<integer>) 429.16 535.67 P
1 11 Q
-0.17 ( con-) 480.46 535.67 P
(taining the total seconds. Unfortunately) 108 521.67 T
(, the angle needed her) 299.95 521.67 T
(e is dif) 406.91 521.67 T
(fer) 438.93 521.67 T
(ent than) 452.01 521.67 T
(the) 108 507.67 T
4 9.5 Q
(<directed-angle>) 126.01 507.67 T
1 11 Q
( class, because the) 217.21 507.67 T
4 9.5 Q
(<directed-angle>) 307.43 507.67 T
1 11 Q
( class has a dir) 398.63 507.67 T
(ection,) 468.68 507.67 T
(such as South, which is not needed for the angle of) 108 493.67 T
4 9.5 Q
(<relative-position>) 357.15 493.67 T
1 11 Q
(. In Sec-) 465.45 493.67 T
(tion 5.4, we addr) 108 479.67 T
(ess the issue of the angles.) 189.48 479.67 T
(For completeness, we de\336ne the other classes needed by) 135 465.67 T
4 9.5 Q
(<relative-posi-) 410.83 465.67 T
(tion>) 108 451.67 T
1 11 Q
(. The type of the) 136.5 451.67 T
4 9.5 Q
(from-object) 217.92 451.67 T
1 11 Q
( slot is) 280.62 451.67 T
4 9.5 Q
(<physical-object>) 314.19 451.67 T
1 11 Q
(.) 411.09 451.67 T
4 9 Q
(def) 108 431 T
(ine class <physical-object> \050<object>\051) 124.2 431 T
(slot current-position :: <position>, init-keyword: current-position:;) 118.8 420 T
(slot physical-size) 118.8 409 T
(:: <size>,) 237.6 409 T
(init-keyword: physical-size:;) 318.6 409 T
(end;) 108 398 T
1 11 Q
-0.12 (Note that the type of the) 108 377.67 P
4 9.5 Q
-0.24 (current-position) 228.63 377.67 P
1 11 Q
-0.12 ( slot is) 319.83 377.67 P
4 9.5 Q
-0.24 (<position>) 353.05 377.67 P
1 11 Q
-0.12 (. It can be either an) 410.05 377.67 P
4 9.5 Q
(<absolute-position>) 108 363.67 T
1 11 Q
( or a) 216.3 363.67 T
4 9.5 Q
(<relative-position>) 240.4 363.67 T
1 11 Q
(.) 348.7 363.67 T
(The type of the) 135 349.67 T
4 9.5 Q
(physical-size) 210.92 349.67 T
1 11 Q
( slot is) 285.02 349.67 T
4 9.5 Q
(<size>) 318.59 349.67 T
1 11 Q
(.) 352.79 349.67 T
6 9 Q
(// Used to keep track of object dimensions and object capacities.) 108 329 T
(// All dimensions in feet.) 108 318 T
4 F
(def) 108 307 T
(ine class <size> \050<object>\051) 124.2 307 T
(slot length :: <integer>, init-keyword: length:;) 118.8 296 T
(slot width) 118.8 285 T
(:: <integer>, init-keyword: width:;) 183.6 285 T
(slot height :: <integer>, init-keyword: height:;) 118.8 274 T
(end;) 108 263 T
3 15 Q
(5.4  Prelude to a new approach) 108 225 T
1 11 Q
(When we start to consider the need to do arithmetic operations on latitude and) 108 204.67 T
-0.36 (longitudes, we might pr) 108 190.67 P
-0.36 (efer a dif) 223.93 190.67 P
-0.36 (fer) 266.13 190.67 P
-0.36 (ent implementation of) 279.21 190.67 P
4 9.5 Q
-0.75 (<directed-angle>) 388.95 190.67 P
1 11 Q
-0.36 ( that) 480.15 190.67 P
(makes those operations mor) 108 176.67 T
(e convenient. W) 244.9 176.67 T
(e might decide to r) 322.04 176.67 T
(epr) 413.13 176.67 T
(esent the) 429.16 176.67 T
(degr) 108 162.67 T
(ees, minutes, and seconds in a) 130.25 162.67 T
4 9.5 Q
(total-seconds) 279.26 162.67 T
1 11 Q
( slot:) 353.36 162.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 64
%%Page: "63" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(63) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <directed-angle> \050<object>\051) 124.2 642 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 631 T
(slot direction) 118.8 620 T
( :: <string>,) 216 620 T
(init-keyword: direction:;) 297 620 T
(end;) 108 609 T
1 11 Q
(W) 108 588.67 T
(e can separate the) 117.99 588.67 T
4 9.5 Q
(<directed-angle>) 207.04 588.67 T
1 11 Q
( class into two classes to make it possible) 298.24 588.67 T
-0.25 (to use dir) 108 574.67 P
-0.25 (ected angles wher) 153.23 574.67 P
-0.25 (e needed \050for latitudes and longitudes\051 and use angles) 240.1 574.67 P
(without dir) 108 560.67 T
(ection wher) 163.41 560.67 T
(e needed \050for the) 220.5 560.67 T
4 9.5 Q
(angle) 305.35 560.67 T
1 11 Q
( slot of the) 333.85 560.67 T
4 9.5 Q
(<relative-position>) 387.23 560.67 T
1 11 Q
(class\051:) 108 546.67 T
4 9 Q
(def) 108 526 T
(ine class <angle> \050<object>\051) 124.2 526 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 515 T
(end;) 108 504 T
(def) 108 485 T
(ine class <directed-angle> \050<angle>\051) 124.2 485 T
(slot direction :: <string>,) 118.8 474 T
(init-keyword: direction:;) 275.4 474 T
(end;) 108 463 T
1 11 Q
(Suddenly) 108 442.67 T
(, the) 153.62 442.67 T
4 9.5 Q
(<angle>) 177.12 442.67 T
1 11 Q
( class looks r) 217.02 442.67 T
(emarkably similar to the) 278.33 442.67 T
4 9.5 Q
(<time>) 399.84 442.67 T
1 11 Q
( class de\336ned) 434.04 442.67 T
(earlier:) 108 428.67 T
4 9 Q
(def) 108 408 T
(ine class <time> \050<object>\051) 124.2 408 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 397 T
(end;) 108 386 T
1 11 Q
(W) 108 365.67 T
(e would like to call) 117.99 365.67 T
4 9.5 Q
(decode-total-seconds) 212.91 365.67 T
1 11 Q
( on instances of) 326.91 365.67 T
4 9.5 Q
(<angle>) 404.56 365.67 T
1 11 Q
(, but cur-) 444.46 365.67 T
(r) 108 351.67 T
(ently the method is de\336ned to work on) 112.15 351.67 T
4 9.5 Q
(<time>) 304.22 351.67 T
1 11 Q
(. The next step is to take advan-) 338.42 351.67 T
(tage of the similarity between) 108 337.67 T
4 9.5 Q
(<angle>) 254.93 337.67 T
1 11 Q
( and) 294.83 337.67 T
4 9.5 Q
(<time>.) 318.95 337.67 T
3 15 Q
(5.5  Meeting of space and time) 108 298 T
1 11 Q
-0.02 (Our goal now is to \336nd a way to r) 108 277.67 P
-0.02 (epr) 271.83 277.67 P
-0.02 (esent the similarities between time and posi-) 287.86 277.67 P
(tion. This section contains all the class and method de\336nitions r) 108 263.67 T
(elated to time,) 415.76 263.67 T
(position, physical objects, and size.) 108 249.67 T
3 13 Q
(5.5.1  Sixty-unit class and method) 108 218.33 T
1 11 Q
(Sometimes the trickiest part of de\336ning super) 108 198.67 T
(classes that model characteristics) 329.61 198.67 T
(shar) 108 184.67 T
(ed by other classes is thinking of the right name for the super) 128.71 184.67 T
(class. Her) 425.7 184.67 T
(e we) 472.68 184.67 T
-0.38 (use) 108 170.67 P
4 9.5 Q
-0.8 (<sixty-unit>) 126.93 170.67 P
1 11 Q
-0.38 ( to name the class that has) 195.33 170.67 P
4 9.5 Q
-0.8 (total-seconds) 322.17 170.67 P
1 11 Q
-0.38 ( that can be converted) 396.27 170.67 P
(to either hours-minutes-seconds, or degr) 108 156.67 T
(ees-minutes-seconds. And in the) 305.47 156.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 65
%%Page: "64" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(64) 72 677.67 T
0 9.5 Q
(5.5 Meeting of space and time) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 F
0 X
(encode-total-seconds) 108 640.67 T
1 11 Q
( method, we use the name) 222 640.67 T
4 9.5 Q
(max-unit) 352.1 640.67 T
1 11 Q
( to r) 397.7 640.67 T
(efer to the unit) 416.94 640.67 T
(that is hours for time, and degr) 108 626.67 T
(ees for positions.) 258.9 626.67 T
4 9 Q
(def) 108 606 T
(ine class <sixty-unit> \050<object>\051) 124.2 606 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:;) 118.8 595 T
(end;) 108 584 T
(def) 108 565 T
(ine method encode-total-seconds \050max-unit :: <integer>,) 124.2 565 T
(minutes) 302.4 554 T
(:: <integer>,) 351 554 T
(seconds) 302.4 543 T
(:: <integer>\051) 351 543 T
(\05060 * 60 * max-unit\051 + \05060 * minutes\051 + seconds;) 118.8 532 T
(end;) 108 521 T
(def) 108 502 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 124.2 502 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 118.8 491 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 480 T
(values \050max-unit, minutes, seconds\051;) 118.8 469 T
(end;) 108 458 T
3 13 Q
(5.5.2  T) 108 428.33 T
(ime classes and methods) 143.97 428.33 T
4 9 Q
(def) 108 408 T
(ine class <time> \050<sixty-unit>\051) 124.2 408 T
(end;) 108 397 T
(def) 108 378 T
(ine method say \050time :: <time>\051) 124.2 378 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 367 T
(format\050*window*, "%d:%d", hours, minutes\051;) 118.8 356 T
(end;) 108 345 T
(def) 108 326 T
(ine class <time-of-day> \050<time>\051) 124.2 326 T
(end;) 108 315 T
(def) 108 296 T
(ine class <time-offset> \050<time>\051) 124.2 296 T
(slot past? :: <boolean>, init-keyword: past?:;) 118.8 285 T
(end;) 108 274 T
(def) 108 255 T
(ine method say \050time :: <time-offset>\051) 124.2 255 T
(format\050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 118.8 244 T
(next-method\050\051;) 118.8 233 T
(end;) 108 222 T
3 13 Q
(5.5.3  Angle and position classes and methods) 108 192.33 T
4 9 Q
(def) 108 172 T
(ine class <angle> \050<sixty-unit>\051) 124.2 172 T
(end;) 108 161 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 66
%%Page: "65" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(65) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method say \050angle :: <angle>\051) 124.2 642 T
(let\050degrees\051 = decode-total-seconds\050angle\051;) 118.8 631 T
(format\050*window*, "%d degrees", degrees\051;) 118.8 620 T
(end;) 108 609 T
(def) 108 590 T
(ine  class <directed-angle> \050<angle>\051) 124.2 590 T
(slot direction :: <string>, init-keyword: direction:;) 118.8 579 T
(end;) 108 568 T
(def) 108 549 T
(ine method say \050angle :: <directed-angle>\051) 124.2 549 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 118.8 538 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 118.8 527 T
(degrees, minutes, seconds, angle.direction\051;) 156.6 516 T
(end;) 108 505 T
(def) 108 486 T
(ine class <latitude> \050<directed-angle>\051) 124.2 486 T
(end;) 108 475 T
(def) 108 456 T
(ine method say \050latitude :: <latitude>\051) 124.2 456 T
(next-method\050\051;) 118.8 445 T
(format\050*window*, " latitude\134n"\051;) 118.8 434 T
(end;) 108 423 T
(def) 108 404 T
(ine class <longitude> \050<directed-angle>\051) 124.2 404 T
(end;) 108 393 T
(def) 108 374 T
(ine method say \050longitude :: <longitude>\051) 124.2 374 T
(next-method\050\051;) 118.8 363 T
(format\050*window*, " longitude\134n"\051;) 118.8 352 T
(end;) 108 341 T
(def) 108 322 T
(ine class <position> \050<object>\051) 124.2 322 T
(end;) 108 311 T
(def) 108 292 T
(ine class <absolute-position> \050<position>\051) 124.2 292 T
(slot latitude  :: <latitude>,  init-keyword: latitude:;) 118.8 281 T
(slot longitude :: <longitude>, init-keyword: longitude:;) 118.8 270 T
(end;) 108 259 T
(def) 108 240 T
(ine method say \050position :: <absolute-position>\051) 124.2 240 T
(say\050position.latitude\051;) 118.8 229 T
(say\050position.longitude\051;) 118.8 218 T
(end;) 108 207 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 67
%%Page: "66" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(66) 72 677.67 T
0 9.5 Q
(5.5 Meeting of space and time) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <relative-position> \050<position>\051) 124.2 642 T
6 F
(// distance is in miles) 118.8 631 T
4 F
(slot distance) 118.8 620 T
(:: <single-f) 210.6 620 T
(loat>,) 275.4 620 T
(init-keyword: distance:;) 329.4 620 T
(slot angle) 118.8 609 T
(:: <angle>,) 210.6 609 T
(init-keyword: angle:;) 329.4 609 T
(slot from-object :: <physical-object>, init-keyword: from-object:;) 118.8 598 T
(end;) 108 587 T
(def) 108 568 T
(ine method say \050position :: <relative-position>\051) 124.2 568 T
(format\050*window*, "%= miles from ", position.distance\051;) 118.8 557 T
(say\050position.from-object\051;) 118.8 546 T
(format\050*window*, " at heading "\051;) 118.8 535 T
(say\050position.angle\051;) 118.8 524 T
(end;) 108 513 T
1 11 Q
(Note that the pr) 108 492.67 T
(eceding) 185.34 492.67 T
4 9.5 Q
(say) 225.95 492.67 T
1 11 Q
( methods for) 243.05 492.67 T
4 9.5 Q
(<latitude>) 307.68 492.67 T
1 11 Q
(,) 364.68 492.67 T
4 9.5 Q
(<longitude>) 370.18 492.67 T
1 11 Q
(, and) 432.88 492.67 T
4 9.5 Q
(<abso-) 459.75 492.67 T
(lute-position>) 108 478.67 T
1 11 Q
( do not change at all, despite the substantial change in the way) 187.8 478.67 T
(latitude and longitude ar) 108 464.67 T
(e r) 229.35 464.67 T
(epr) 241.52 464.67 T
(esented.) 257.55 464.67 T
3 13 Q
(5.5.4  Physical object and size classes and methods) 108 433.33 T
1 11 Q
(W) 108 413.67 T
(e have not changed the de\336nitions of the) 117.99 413.67 T
4 9.5 Q
(<physical-object>) 318.22 413.67 T
1 11 Q
( class and) 415.12 413.67 T
4 9.5 Q
(<size>) 464.91 413.67 T
1 11 Q
(classes, but r) 108 399.67 T
(epeat the de\336nitions her) 169.54 399.67 T
(e for completeness.) 287.21 399.67 T
4 9 Q
(def) 108 379 T
(ine class <physical-object> \050<object>\051) 124.2 379 T
(slot current-position :: <position>, init-keyword: current-position:;) 118.8 368 T
(slot physical-size) 118.8 357 T
(:: <size>,) 237.6 357 T
(init-keyword: physical-size:;) 318.6 357 T
(end;) 108 346 T
6 F
(// Used to keep track of object dimensions and object capacities.) 108 327 T
(// All dimensions in feet.) 108 316 T
4 F
(def) 108 305 T
(ine class <size> \050<object>\051) 124.2 305 T
(slot length :: <integer>, init-keyword: length:;) 118.8 294 T
(slot width) 118.8 283 T
(:: <integer>, init-keyword: width:;) 183.6 283 T
(slot height :: <integer>, init-keyword: height:;) 118.8 272 T
(end;) 108 261 T
1 11 Q
(This) 108 240.67 T
4 9.5 Q
(say) 131.76 240.67 T
1 11 Q
( method is new:) 148.86 240.67 T
4 9 Q
(def) 108 220 T
(ine method say \050physical-object :: <physical-object>\051) 124.2 220 T
(format\050*window*, "object at "\051;) 113.4 209 T
(say\050physical-object.current-position\051;) 113.4 198 T
(end;) 108 187 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 68
%%Page: "67" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(67) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(5.5.5  Relationships of the classes) 108 639.33 T
1 11 Q
-0.01 (Figur) 108 619.67 P
-0.01 (e 5.2 shows the inheritance r) 134.21 619.67 P
-0.01 (elationships of the classes. Note that the classes) 271.69 619.67 P
(have another kind of r) 108 605.67 T
(elationship as well: one class can use another class as the) 216.15 605.67 T
(type of a slot. Figur) 108 591.67 T
(e 5.3 shows both the inheritance r) 202.17 591.67 T
(elationships, and the r) 364.54 591.67 T
(ela-) 472.28 591.67 T
(tionships of one class using another class as the type of a slot.) 108 577.67 T
0 0 0 1 0 0 0 K
108 344.58 522 352.57 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 182.93 356.24 T
(e 5.2  Inheritance r) 209.15 356.24 T
(elationships among classes) 298.28 356.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108.29 370.57 521.71 557 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 288 539.57 T
(<position>) 316.29 499.05 T
(<relative-position>) 385.29 439.43 T
(<absolute-position>) 268.86 439.43 T
(<directed-angle>) 223.14 418.43 T
(<latitude>) 273.29 380.6 T
(<longitude>) 185.43 379.6 T
(<sixty-unit>) 177.71 501.19 T
(<time>) 144.57 459.9 T
(<time-of-day>) 111.57 421.68 T
(<time-offset>) 158 434.54 T
(<angle>) 240.64 456.71 T
223 510.33 211 510.56 221.29 516.73 222.15 513.53 4 Y
V
299.57 534.13 222.15 513.53 2 L
0.5 H
2 Z
N
330.37 520.27 337.43 510.56 326.3 515.05 328.33 517.66 4 Y
V
308.14 533.42 328.34 517.66 2 L
N
171.33 471.54 159.57 469.13 168.26 477.41 169.8 474.47 4 Y
V
211 496 169.8 474.47 2 L
N
249.64 476.55 257.43 467.43 245.99 471.04 247.81 473.79 4 Y
V
216 494.85 247.81 473.79 2 L
N
312.25 457.46 302.42 450.57 307.1 461.61 309.68 459.54 4 Y
V
337.43 493.86 309.68 459.53 2 L
N
395.34 460.02 401.71 449.85 390.92 455.1 393.13 457.56 4 Y
V
352.43 494.13 393.14 457.56 2 L
N
141.92 436.26 131 431.28 137.62 441.29 139.77 438.77 4 Y
V
157.43 453.86 139.77 438.77 2 L
N
184.82 449.7 194.57 442.7 182.6 443.47 183.71 446.58 4 Y
V
164.57 453.42 183.71 446.58 2 L
N
260.02 438.96 256.71 427.43 253.41 438.96 256.71 438.96 4 Y
V
256.71 449.57 256.71 438.96 2 L
N
234.12 395.83 222.43 393.14 230.92 401.62 232.52 398.73 4 Y
V
256 411.71 232.52 398.73 2 L
N
286.22 400.76 294.71 392.29 283.02 394.98 284.62 397.87 4 Y
V
261.14 410.86 284.62 397.87 2 L
N
(<physical-object>) 382.86 498.19 T
(<size>) 486.43 498.19 T
403.09 511.47 413.29 505.14 401.29 505.1 402.19 508.29 4 Y
V
316 532.7 402.19 508.29 2 L
N
487.28 512.1 498.14 506.99 486.23 505.57 486.75 508.83 4 Y
V
326 534.85 486.76 508.83 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 69
%%Page: "68" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(68) 72 677.67 T
0 9.5 Q
(5.6 Use of a relative position) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 422.58 522 430.57 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 112.37 434.24 T
(e 5.3  Dashed lines show wher) 138.59 434.24 T
(e one class uses another as the type of a slot.) 285.15 434.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(5.6  Use of a relative position) 108 388.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In this section, we make an instance of) 108 368.25 T
4 9.5 Q
(<relative-position>) 297.24 368.25 T
1 11 Q
( and call) 405.54 368.25 T
4 9.5 Q
(say) 449.2 368.25 T
1 11 Q
( on it.) 466.3 368.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(First we need to cr) 108 354.25 T
(eate an instance of) 197.64 354.25 T
4 9.5 Q
(<absolute-position>) 289.74 354.25 T
1 11 Q
( to r) 398.04 354.25 T
(epr) 417.28 354.25 T
(esent the posi-) 433.31 354.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tion of the physical object stor) 108 340.25 T
(ed in the) 253.26 340.25 T
4 9.5 Q
(from-object) 298.36 340.25 T
1 11 Q
( slot. The class de\336nition of) 361.05 340.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<absolute-position>) 108 326.25 T
1 11 Q
( has changed signi\336cantly since we cr) 216.3 326.25 T
(eated an instance, so) 398.48 326.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(we need to cr) 108 312.25 T
(eate another instance:) 172.98 312.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 108 291.58 T
(ine variable *my-absolute-position* =) 124.2 291.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(make\050<absolute-position>,) 118.8 280.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(latitude:) 145.8 269.58 T
( make\050<latitude>,) 199.8 269.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 237.6 258.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "North"\051,) 237.6 247.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(longitude: make\050<longitude>,) 145.8 236.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 232.2 225.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(direction: "West"\051\051;) 232.2 214.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(W) 108 194.25 T
(e make a) 117.99 194.25 T
4 9.5 Q
(<relative-position>) 163.6 194.25 T
1 11 Q
( instance:) 271.9 194.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108.29 450.57 521.71 637 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<object>) 288 619.57 T
(<position>) 316.29 579.05 T
(<relative-position>) 385.29 519.43 T
(<absolute-position>) 268.86 519.43 T
(<directed-angle>) 223.14 498.43 T
(<latitude>) 273.29 460.6 T
(<longitude>) 185.43 459.6 T
(<sixty-unit>) 177.71 581.19 T
(<time>) 144.57 539.9 T
(<time-of-day>) 111.57 501.68 T
(<time-offset>) 158 514.54 T
(<angle>) 240.64 536.71 T
223 590.33 211 590.56 221.29 596.73 222.15 593.53 4 Y
V
299.57 614.13 222.15 593.53 2 L
0.5 H
2 Z
N
330.37 600.27 337.43 590.56 326.3 595.05 328.33 597.66 4 Y
V
308.14 613.42 328.34 597.66 2 L
N
171.33 551.54 159.57 549.13 168.26 557.41 169.8 554.47 4 Y
V
211 576 169.8 554.47 2 L
N
249.64 556.55 257.43 547.43 245.99 551.04 247.81 553.79 4 Y
V
216 574.85 247.81 553.79 2 L
N
312.25 537.46 302.42 530.57 307.1 541.61 309.68 539.54 4 Y
V
337.43 573.86 309.68 539.53 2 L
N
395.34 540.02 401.71 529.85 390.92 535.1 393.13 537.56 4 Y
V
352.43 574.13 393.14 537.56 2 L
N
141.92 516.26 131 511.28 137.62 521.28 139.77 518.77 4 Y
V
157.43 533.86 139.77 518.77 2 L
N
184.82 529.7 194.57 522.7 182.6 523.47 183.71 526.58 4 Y
V
164.57 533.42 183.71 526.58 2 L
N
260.02 518.96 256.71 507.43 253.41 518.96 256.71 518.96 4 Y
V
256.71 529.57 256.71 518.96 2 L
N
234.12 475.83 222.43 473.14 230.92 481.62 232.52 478.73 4 Y
V
256 491.71 232.52 478.73 2 L
N
286.22 480.76 294.71 472.29 283.02 474.98 284.62 477.87 4 Y
V
261.14 490.86 284.62 477.87 2 L
N
(<physical-object>) 382.86 578.19 T
(<size>) 486.43 578.19 T
403.09 591.47 413.29 585.14 401.29 585.1 402.19 588.29 4 Y
V
316 612.71 402.19 588.29 2 L
N
487.28 592.1 498.14 586.99 486.23 585.57 486.75 588.83 4 Y
V
326 614.85 486.76 588.83 2 L
N
247.86 473.97 236 472.15 245.09 479.98 246.47 476.98 4 Y
2 X
V
327.43 514.29 246.48 476.97 2 L
N
314.65 479.03 306 470.72 308.93 482.35 311.79 480.69 4 Y
V
331.72 515 311.79 480.69 2 L
N
293.67 534.67 282.43 538.85 294.18 541.27 293.93 537.97 4 Y
V
435.29 527.14 293.93 537.97 2 L
N
493.29 571.69 505.28 572.14 495.35 565.41 494.32 568.55 4 Y
V
429.57 575 461.72 557.86 494.33 568.55 3 L
N
368.19 567.72 358.14 574.29 370.14 574.04 369.16 570.88 4 Y
V
420.29 573.53 402.06 560.71 369.17 570.88 3 L
N
428 556.92 426.71 568.85 434.13 559.41 431.06 558.17 4 Y
V
442.43 530.28 431.07 558.16 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 70
%%Page: "69" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(69) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
( def) 113.4 642 T
(ine variable *her-relative-position* =) 135 642 T
(make\050<relative-position>,) 129.6 631 T
(distance: 30.5,) 156.6 620 T
-0.36 (angle: make\050<angle>, total-seconds: encode-total-seconds\05090, 5, 0\051\051,) 156.6 609 P
(from-object: make\050<physical-object>,) 156.6 598 T
(current-position: *my-absolute-position*\051\051;) 253.8 587 T
1 11 Q
(W) 108 566.67 T
(e call) 117.99 566.67 T
4 9.5 Q
(say) 145.54 566.67 T
1 11 Q
( on the r) 162.64 566.67 T
(elative position:) 202.71 566.67 T
5 9 Q
(?) 108 546 T
4 F
( say\050*her-relative-position*\051;) 113.4 546 T
5 F
(30.5 miles from object at 42 degrees 19 minutes 34 seconds North latitude) 108 535 T
(70 degrees 56 minutes 26 seconds West longitude at heading 90 degrees) 108 524 T
3 13 Q
(5.6.1  Interaction of methods in this call) 108 494.33 T
1 11 Q
(T) 108 474.67 T
(o illustrate how this call worked, we show the de\336nitions of all the methods) 113.73 474.67 T
(called. The generic function) 108 460.67 T
4 9.5 Q
(say) 245.2 460.67 T
1 11 Q
( has nine methods, and seven of them ar) 262.3 460.67 T
(e called) 457.98 460.67 T
(for this particular ar) 108 446.67 T
(gument. Method 1 is called \336rst. The de\336nitions ar) 205.57 446.67 T
(e anno-) 450.74 446.67 T
(tated with comments that tell which) 108 432.67 T
4 9.5 Q
(say) 286.16 432.67 T
1 11 Q
( methods ar) 303.26 432.67 T
(e called for this instance of) 360.76 432.67 T
4 9.5 Q
(<relative-position>) 108 418.67 T
1 11 Q
(.) 216.3 418.67 T
6 9 Q
(// Method 1) 108 398 T
4 F
(def) 108 387 T
(ine method say \050position :: <relative-position>\051) 124.2 387 T
(format\050*window*, "%= miles from ", position.distance\051;) 118.8 376 T
(say\050position.from-object\051;) 118.8 365 T
6 F
(// Calls Method 2) 430.2 365 T
4 F
(format\050*window*, " at heading "\051;) 118.8 354 T
(say\050position.angle\051;) 118.8 343 T
6 F
(// Calls Method 7) 430.2 343 T
4 F
(end;) 108 332 T
6 F
(// Method 2) 108 313 T
4 F
(def) 108 302 T
(ine method say \050physical-object :: <physical-object>\051) 124.2 302 T
(format\050*window*, "object at "\051;) 113.4 291 T
(say\050physical-object.current-position\051;) 113.4 280 T
6 F
(// Calls Method 3) 430.2 280 T
4 F
(end;) 108 269 T
6 F
(// Method 3) 108 250 T
4 F
(def) 108 239 T
(ine method say \050position :: <absolute-position>\051) 124.2 239 T
(say\050position.latitude\051;) 118.8 228 T
6 F
(// Calls Method 4) 430.2 228 T
4 F
(say\050position.longitude\051;) 118.8 217 T
6 F
(// Calls Method 5) 430.2 217 T
4 F
(end;) 108 206 T
6 F
(// Method 4) 108 187 T
4 F
(def) 108 176 T
(ine method say \050latitude :: <latitude>\051) 124.2 176 T
(next-method\050\051;) 118.8 165 T
6 F
(// Calls Method 6) 430.2 165 T
4 F
(format\050*window*, " latitude\134n"\051;) 118.8 154 T
(end;) 108 143 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 71
%%Page: "70" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(70) 72 677.67 T
0 9.5 Q
(5.6 Use of a relative position) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Method 5) 108 642 T
4 F
(def) 108 631 T
(ine method say \050longitude :: <longitude>\051) 124.2 631 T
(next-method\050\051;) 118.8 620 T
6 F
(// Calls Method 6) 430.2 620 T
4 F
(format\050*window*, " longitude\134n"\051;) 118.8 609 T
(end;) 108 598 T
6 F
(// Method 6) 108 579 T
4 F
(def) 108 568 T
(ine method say \050angle :: <directed-angle>\051) 124.2 568 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 118.8 557 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 118.8 546 T
(degrees, minutes, seconds, angle.direction\051;) 156.6 535 T
(end;) 108 524 T
6 F
(// Method 7) 108 505 T
4 F
(def) 108 494 T
(ine method say \050angle :: <angle>\051) 124.2 494 T
(let\050degrees\051 = decode-total-seconds\050angle\051;) 118.8 483 T
(format\050*window*, "%d degrees", degrees\051;) 118.8 472 T
(end;) 108 461 T
1 11 Q
(It is important to understand that the annotation of the sequence of methods) 108 440.67 T
-0.15 (called is tr) 108 426.67 P
-0.15 (ue for this particular ar) 157.68 426.67 P
-0.15 (gument,) 269.29 426.67 P
4 9.5 Q
-0.31 (*her-relative-position*) 312.36 426.67 P
1 11 Q
-0.15 (, and the set) 443.46 426.67 P
-0.43 (of methods de\336ned in this chapter) 108 412.67 P
-0.43 (. The sequence of methods can be dif) 271.9 412.67 P
-0.43 (fer) 447.4 412.67 P
-0.43 (ent if we) 460.48 412.67 P
(add methods, or r) 108 398.67 T
(eor) 194.8 398.67 T
(ganize classes, or call) 210.22 398.67 T
4 9.5 Q
(say) 315.94 398.67 T
1 11 Q
( with a dif) 333.04 398.67 T
(fer) 382.54 398.67 T
(ent ar) 395.62 398.67 T
(gument.) 423.28 398.67 T
3 13 Q
(5.6.2  One) 108 367.33 T
4 F
(<relative-position>) 161.34 367.33 T
3 F
( instance relative to another) 309.54 367.33 T
1 11 Q
(The variable) 108 347.67 T
4 9.5 Q
(*her-relative-position*) 171.23 347.67 T
1 11 Q
( contains a r) 302.33 347.67 T
(elative position that is r) 360.87 347.67 T
(ela-) 474.87 347.67 T
(tive to an absolute position \050the value of) 108 333.67 T
4 9.5 Q
(*my-absolute-position*) 305.79 333.67 T
1 11 Q
(\051. However) 431.19 333.67 T
(, a) 484.97 333.67 T
-0.19 (r) 108 319.67 P
-0.19 (elative position can be r) 112.15 319.67 P
-0.19 (elative to another r) 226.6 319.67 P
-0.19 (elative position. How can this be? The) 317.77 319.67 P
(position of the physical object that the r) 108 305.67 T
(elative position is r) 299.31 305.67 T
(elative to is stor) 391.49 305.67 T
(ed in) 467.84 305.67 T
(the) 108 291.67 T
4 9.5 Q
(current-position) 126.01 291.67 T
1 11 Q
( slot of the) 217.21 291.67 T
4 9.5 Q
(<physical-object>) 270.59 291.67 T
1 11 Q
( class. The type of the c) 367.49 291.67 T
4 9.5 Q
(ur-) 479.46 291.67 T
(rent-position) 108 277.67 T
1 11 Q
( slot is) 182.1 277.67 T
4 9.5 Q
(<position>) 215.67 277.67 T
1 11 Q
(. Thus, we can stor) 272.67 277.67 T
(e a) 363.25 277.67 T
4 9.5 Q
(<relative-position>) 379.52 277.67 T
1 11 Q
( in) 487.82 277.67 T
(that slot.) 108 263.67 T
(W) 135 249.67 T
(e cr) 144.99 249.67 T
(eate a r) 162.04 249.67 T
(elative position that is r) 196.81 249.67 T
(elative to another r) 310.81 249.67 T
(elative position:) 402.55 249.67 T
4 9 Q
(def) 108 229 T
(ine variable *his-relative-position* =) 124.2 229 T
(make\050<relative-position>,) 118.8 218 T
(distance: 25,) 145.8 207 T
(angle: make\050<angle>, total-seconds: encode-total-seconds\05036, 0, 0\051\051,) 145.8 196 T
(from-object: make\050<physical-object>,) 145.8 185 T
(current-position: *her-relative-position*\051\051;) 243 174 T
1 11 Q
(W) 108 153.67 T
(e can call) 117.99 153.67 T
4 9.5 Q
(say) 165.08 153.67 T
1 11 Q
( on this r) 182.18 153.67 T
(elative position:) 224.84 153.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 72
%%Page: "71" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(5 Cycles Through Implementation and Design) 342.24 677.67 T
2 11 Q
(71) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
(say\050*his-relative-position*\051;) 118.8 642 T
5 F
(25 miles from object at 30.5 miles from object at 42 degrees 19 minutes 34) 108 631 T
(seconds North latitude) 108 620 T
(70 degrees 56 minutes 26 seconds West longitude at heading 90 degrees at) 108 609 T
(heading 36 degrees) 108 598 T
3 15 Q
(5.7  Summary) 108 560 T
1 11 Q
(This chapter cover) 108 539.67 T
(ed:) 197.63 539.67 T
(\245) 117 519.67 T
(W) 135 519.67 T
(e started to implement the initial design, discover) 144.99 519.67 T
(ed opportunities for) 385.51 519.67 T
(mor) 135 505.67 T
(e sharing, and r) 154.87 505.67 T
(edesigned the pr) 230.54 505.67 T
(ogram.) 311.68 505.67 T
(\245) 117 485.67 T
(W) 135 485.67 T
(e de\336ned certain classes and methods r) 144.99 485.67 T
(elated to time, position, and phys-) 334.96 485.67 T
(ical objects.Running H/F 4) 135 471.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 73
%%Page: "72" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(72) 72 677.67 T
0 9.5 Q
(5.7 Summary) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 74
%%Page: "73" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(73) 300.5 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(6) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(6) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Mor) 109 566.45 T
(e on Methods) 165.07 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we \336rst show how to de\336ne new methods on built-in functions) 177.24 424.67 T
(such as +. W) 108 410.67 T
(e then describe multimethods, the dif) 168.4 410.67 T
(fer) 349.6 410.67 T
(ent kinds of parameters that) 362.68 410.67 T
(can be used in methods, the techniques of declaring and r) 108 396.67 T
(eturning values, the) 387.44 396.67 T
(r) 108 382.67 T
(ules for method parameter congr) 112.26 382.67 T
(uence, the identity of a method, and the tech-) 272.54 382.67 T
(nique of de\336ning methods on types that ar) 108 368.67 T
(e not classes.) 315.09 368.67 T
3 15 Q
(6.1  Methods for the) 108 329 T
4 13 Q
(+) 227.61 329 T
3 15 Q
( generic function) 235.41 329 T
1 11 Q
-0.2 (W) 108 308.67 P
-0.2 (e need to be able to add one time to another) 117.99 308.67 P
-0.2 (. W) 327.65 308.67 P
-0.2 (e can de\336ne new methods on the) 342.93 308.67 P
(generic function) 108 294.67 T
4 9.5 Q
(+) 189.76 294.67 T
1 11 Q
(, which is pr) 195.46 294.67 T
(ovided by Dylan. W) 255.15 294.67 T
(e can extend) 352.2 294.67 T
4 9.5 Q
(+) 415.43 294.67 T
1 11 Q
( by adding new) 421.13 294.67 T
-0.16 (methods on it. In certain languages, this technique is called) 108 280.67 P
2 F
-0.16 (operator overloading) 395.97 280.67 P
1 F
-0.16 (.) 501.25 280.67 P
3 13 Q
(6.1.1  Method for adding two time-offsets) 108 249.33 T
1 11 Q
-0.29 (W) 108 229.67 P
-0.29 (e de\336ne a method for) 117.99 229.67 P
4 9.5 Q
-0.61 (+) 223.07 229.67 P
1 11 Q
-0.29 (. The method adds two time-of) 228.77 229.67 P
-0.29 (fsets and r) 377.18 229.67 P
-0.29 (eturns the sum,) 426.71 229.67 P
(which is also a time-of) 108 215.67 T
(fset:) 216.7 215.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 75
%%Page: "74" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(74) 72 677.67 T
0 9.5 Q
(6.1 Methods for the + generic function) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Method 1) 108 642 T
4 F
(def) 108 631 T
(ine method \134+ \050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 124.2 631 T
6 F
(// 1) 500.4 631 T
4 F
(let s1 = if\050offset1.past?\051 negative else identity end;) 118.8 620 T
6 F
(// 2) 500.4 620 T
4 F
(let t1 = offset1.total-seconds;) 118.8 609 T
6 F
(// 3) 500.4 609 T
4 F
(let s2 = if\050offset2.past?\051 negative else identity end;) 118.8 598 T
6 F
(// 4) 500.4 598 T
4 F
(let t2 = offset2.total-seconds;) 118.8 587 T
6 F
(// 5) 500.4 587 T
4 F
(make\050<time-offset>, total-seconds: s1\050t1\051 + s2\050t2\051\051;) 118.8 576 T
6 F
(// 6) 500.4 576 T
4 F
(end;) 108 565 T
6 F
(// 7) 500.4 565 T
1 11 Q
(On line 1, note that the method is de\336ned on) 108 544.67 T
4 9.5 Q
(\134+) 327.47 544.67 T
1 11 Q
(, not simply) 338.87 544.67 T
4 9.5 Q
(+) 399.37 544.67 T
1 11 Q
(. When we de\336ne a) 405.07 544.67 T
-0.19 (method on) 108 530.67 P
4 9.5 Q
-0.39 (+) 163.23 530.67 P
1 11 Q
-0.19 ( or another in\336x operator) 168.93 530.67 P
-0.19 (, we need to use a backslash befor) 289.83 530.67 P
-0.19 (e the oper-) 452.45 530.67 P
(ator) 108 516.67 T
(. The backslash clari\336es that we mean the value of the variable + \050which is a) 126.62 516.67 T
(generic function\051, and we ar) 108 502.67 T
(e not trying to call the function.) 244.39 502.67 T
(In this method, we must take car) 135 488.67 T
(e to consider that if the) 293.95 488.67 T
4 9.5 Q
(past?) 408 488.67 T
1 11 Q
( slot is tr) 436.5 488.67 T
(ue,) 477.91 488.67 T
(then the) 108 474.67 T
4 9.5 Q
(<time-offset>) 150.42 474.67 T
1 11 Q
( r) 224.52 474.67 T
(epr) 231.41 474.67 T
(esents a negative number of seconds. W) 247.44 474.67 T
(e use the) 440.31 474.67 T
(Dylan functions) 108 460.67 T
4 9.5 Q
(negative) 188.67 460.67 T
1 11 Q
( \050r) 234.27 460.67 T
(eturns the additive inverse of a number\051 and) 244.83 460.67 T
4 9.5 Q
(iden-) 464.67 460.67 T
-0.44 (tity) 108 446.67 P
1 11 Q
-0.21 ( \050r) 130.8 446.67 P
-0.21 (eturns the object that is its ar) 141.15 446.67 P
-0.21 (gument\051. Also, we use the technique of assign-) 278.97 446.67 P
(ing a function to a local variable.) 108 432.67 T
-0.24 (On line 2, we assign a function to the local variable) 135 418.67 P
4 9.5 Q
-0.5 (s1) 382.18 418.67 P
1 11 Q
-0.24 (. The function is either) 393.58 418.67 P
4 9.5 Q
-0.23 (negative) 108 404.67 P
1 11 Q
-0.11 ( or) 153.6 404.67 P
4 9.5 Q
-0.23 (identity) 169.22 404.67 P
1 11 Q
-0.11 (. If the) 213.6 404.67 P
4 9.5 Q
-0.23 (past?) 246.89 404.67 P
1 11 Q
-0.11 ( slot of the \336rst ar) 275.39 404.67 P
-0.11 (gument is tr) 359.85 404.67 P
-0.11 (ue, we assign the) 418.55 404.67 P
-0.08 (value) 108 390.67 P
4 9.5 Q
-0.17 (negative) 137.48 390.67 P
1 11 Q
-0.08 ( to) 183.08 390.67 P
4 9.5 Q
-0.17 (s1) 198.01 390.67 P
1 11 Q
-0.08 (, otherwise we assign the value) 209.41 390.67 P
4 9.5 Q
-0.17 (identity) 363.14 390.67 P
1 11 Q
-0.08 ( to) 408.74 390.67 P
4 9.5 Q
-0.17 (s1) 423.66 390.67 P
1 11 Q
-0.08 (. Similarly) 435.06 390.67 P
-0.08 (, on) 483.51 390.67 P
(line 4 we assign either) 108 376.67 T
4 9.5 Q
(negative) 218.38 376.67 T
1 11 Q
( or) 263.98 376.67 T
4 9.5 Q
(identity) 279.84 376.67 T
1 11 Q
( to) 325.44 376.67 T
4 9.5 Q
(s2) 340.53 376.67 T
1 11 Q
(, based on the value of the) 351.93 376.67 T
4 9.5 Q
(past?) 108 362.67 T
1 11 Q
( slot of the second ar) 136.5 362.67 T
(gument.) 236.23 362.67 T
(On line 6, we make and r) 135 348.67 T
(eturn a new instance of) 256.68 348.67 T
4 9.5 Q
(<time-offset>) 372.59 348.67 T
1 11 Q
(. W) 446.69 348.67 T
(e initial-) 462.18 348.67 T
(ize the) 108 334.67 T
4 9.5 Q
(total-seconds) 142.73 334.67 T
1 11 Q
( slot to contain the sum of the) 216.83 334.67 T
4 9.5 Q
(total-seconds) 363.05 334.67 T
1 11 Q
( slots, taking) 437.15 334.67 T
(car) 108 320.67 T
(e to add the negative of each) 122.53 320.67 T
4 9.5 Q
(total-seconds) 264.12 320.67 T
1 11 Q
( slot if the) 338.22 320.67 T
4 9.5 Q
(past?) 388.8 320.67 T
1 11 Q
( slot is tr) 417.3 320.67 T
(ue for) 458.72 320.67 T
(that instance.) 108 306.67 T
(T) 135 292.67 T
(o test the method, we need to cr) 140.73 292.67 T
(eate two instances of) 295.52 292.67 T
4 9.5 Q
(<time-offset>) 399.15 292.67 T
1 11 Q
(:) 473.25 292.67 T
5 9 Q
(?) 108 272 T
4 F
( def) 113.4 272 T
(ine variable *minus-2-hours* =) 135 272 T
(make\050<time-offset>, total-seconds: encode-total-seconds \0502, 0, 0\051,) 129.6 261 T
(past?: #t\051;) 237.6 250 T
5 F
(?) 108 231 T
4 F
( def) 113.4 231 T
(ine variable *15-20-45* =) 135 231 T
(make\050<time-offset>, total-seconds: encode-total-seconds \05015, 20, 45\051,) 129.6 220 T
(past?: #f\051;) 237.6 209 T
1 11 Q
(W) 108 188.67 T
(e can add the time-of) 117.99 188.67 T
(fsets:) 220.15 188.67 T
5 9 Q
(?) 108 168 T
4 F
( *minus-2-hours* + *15-20-45*;) 113.4 168 T
5 F
({instance of <TIME-OFFSET>}) 108 157 T
540 206 542 278 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 76
%%Page: "75" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 444.31 677.67 T
2 11 Q
(75) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The r) 108 640.67 T
(esult is a new instance of) 133.31 640.67 T
4 9.5 Q
(<time-offset>) 256.95 640.67 T
1 11 Q
(. W) 331.05 640.67 T
(e did not save the value) 346.54 640.67 T
(r) 108 626.67 T
(eturned. \050Many envir) 112.15 626.67 T
(onments of) 215.94 626.67 T
(fer a way to access values r) 270.21 626.67 T
(eturned by the lis-) 401.36 626.67 T
(tener) 108 612.67 T
(.\051 W) 132.06 612.67 T
(e can add the time-of) 151.21 612.67 T
(fsets again, and view the) 253.37 612.67 T
4 9.5 Q
(total-seconds) 376.17 612.67 T
1 11 Q
( slot of the) 450.27 612.67 T
(r) 108 598.67 T
(esult:) 112.15 598.67 T
5 9 Q
(?) 108 578 T
4 F
( decode-total-seconds \050*minus-2-hours* + *15-20-45*\051;) 113.4 578 T
5 F
(13) 108 567 T
(20) 108 556 T
(45) 108 545 T
3 13 Q
(6.1.2  Methods for adding time-of-day to time-offset) 108 515.33 T
1 11 Q
(These methods implement addition between a time-of) 108 495.67 T
(fset and a time-of-day:) 370.97 495.67 T
6 9 Q
(// Method 2) 108 475 T
4 F
(def) 108 464 T
(ine method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 124.2 464 T
(let s1 = if\050offset.past?\051 negative else identity end;) 118.8 453 T
(let t1 = offset.total-seconds;) 118.8 442 T
(let t2 = time-of-day.total-seconds;) 118.8 431 T
(make\050<time-of-day>, total-seconds: s1\050t1\051 + t2\051;) 118.8 420 T
(end;) 108 409 T
1 11 Q
-0.19 (Method 2 is invoked when the \336rst ar) 108 388.67 P
-0.19 (gument is a time-of) 289.02 388.67 P
-0.19 (fset and the second ar) 382.69 388.67 P
-0.19 (gu-) 487.59 388.67 P
(ment is a time-of-day) 108 374.67 T
(. It does all the work.) 210.46 374.67 T
6 9 Q
(// Method 3) 108 354 T
4 F
(def) 108 343 T
(ine method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 124.2 343 T
(offset + time-of-day;) 118.8 332 T
(end;) 108 321 T
1 11 Q
(Method 3 is invoked when the \336rst ar) 108 300.67 T
(gument is a time-of-day and the second) 290.34 300.67 T
(ar) 108 286.67 T
(gument is a time-of) 117.65 286.67 T
(fset. It simply calls) 211.88 286.67 T
4 9.5 Q
(+) 305.07 286.67 T
1 11 Q
( with the or) 310.77 286.67 T
(der of the ar) 366.79 286.67 T
(guments) 425.95 286.67 T
(switched \321 this call invokes method 2.) 108 272.67 T
(T) 135 258.67 T
(o test these methods, we can use one of the time of) 140.73 258.67 T
(fsets cr) 386.03 258.67 T
(eated in Section) 419.66 258.67 T
(6.1.1, and the) 108 244.67 T
4 9.5 Q
(*your-time-of-day*) 174.88 244.67 T
1 11 Q
( variable, which contains a) 277.48 244.67 T
4 9.5 Q
(<time-of-day>) 409.5 244.67 T
1 11 Q
(instance, and was de\336ned as follows:) 108 230.67 T
5 9 Q
(?) 108 210 T
4 F
( def) 113.4 210 T
(ine variable *your-time-of-day* =) 135 210 T
(make\050<time-of-day>, total-seconds: encode-total-seconds \0508, 30, 59\051\051;) 129.6 199 T
1 11 Q
(W) 108 178.67 T
(e add the time-of) 117.99 178.67 T
(fset and the time-of-day:) 200.61 178.67 T
540 196 542 216 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 77
%%Page: "76" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(76) 72 677.67 T
0 9.5 Q
(6.2 Multimethods) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
( decode-total-seconds \050*minus-2-hours* + *your-time-of-day*\051;) 113.4 642 T
5 F
(6) 108 631 T
(30) 108 620 T
(59) 108 609 T
1 11 Q
(W) 108 588.67 T
(e add the time-of-day and the time-of) 117.99 588.67 T
(fset:) 299.84 588.67 T
5 9 Q
(?) 108 568 T
4 F
( decode-total-seconds \050*your-time-of-day* + *minus-2-hours*\051;) 113.4 568 T
5 F
(6) 108 557 T
(30) 108 546 T
(59) 108 535 T
3 15 Q
(6.2  Multimethods) 108 497 T
1 11 Q
(A method is) 108 476.67 T
2 F
(specialized) 170.37 476.67 T
1 F
( on the r) 226.57 476.67 T
(equir) 266.63 476.67 T
(ed parameters that have types. A) 292.04 476.67 T
2 F
(multime-) 455.35 476.67 T
(thod) 108 462.67 T
1 F
( is a method that specializes mor) 131.22 462.67 T
(e than one of its parameters. Methods 1, 2,) 289.69 462.67 T
(and 3 \050de\336ned in Section 6.1\051 ar) 108 448.67 T
(e specialized on their two r) 261.11 448.67 T
(equir) 392.27 448.67 T
(ed parameters,) 417.68 448.67 T
(and ther) 108 434.67 T
(efor) 148.78 434.67 T
(e ar) 167.86 434.67 T
(e multimethods.) 185.53 434.67 T
(The method dispatch considers all the specialized parameters:) 135 420.67 T
2 F
(Step 1.) 135 406.67 T
1 F
( Finding applicable methods: A method is applicable if each ar) 168.6 406.67 T
(gu-) 472.18 406.67 T
(ment is an instance of the type of the corr) 108 392.67 T
(esponding parameter of the method.) 308.21 392.67 T
2 F
(Step 2.) 135 378.67 T
1 F
( Sorting applicable methods by speci\336city: The parameter lists of the) 168.6 378.67 T
(methods ar) 108 364.67 T
(e compar) 162.76 364.67 T
(ed. The \336rst specialized parameter is mor) 207.64 364.67 T
(e signi\336cant than) 408.43 364.67 T
(the second, which is mor) 108 350.67 T
(e signi\336cant than the thir) 228.75 350.67 T
(d, and so on. Starting with the) 350.11 350.67 T
-0.45 (\336rst specialized parameter) 108 336.67 P
-0.45 (, compar) 235.19 336.67 P
-0.45 (e the types of the parameters of the methods. If) 277.1 336.67 P
(one type is a subtype of the other) 108 322.67 T
(, the method whose parameter is of the subtype) 268.56 322.67 T
(is mor) 108 308.67 T
(e speci\336c than the other method.) 138.48 308.67 T
(T) 135 294.67 T
(o illustrate, we start by de\336ning one mor) 140.73 294.67 T
(e method, to make the example) 338.55 294.67 T
(mor) 108 280.67 T
(e inter) 127.87 280.67 T
(esting:) 158.49 280.67 T
6 9 Q
(// Method 4) 108 260 T
4 F
(def) 108 249 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 124.2 249 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 118.8 238 T
(end;) 108 227 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 78
%%Page: "77" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 444.31 677.67 T
2 11 Q
(77) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(W) 108 640.67 T
(e show the types of the specialized parameters of these four methods.) 117.99 640.67 T
(W) 108 472.67 T
(e call) 117.99 472.67 T
4 9.5 Q
(+) 145.54 472.67 T
1 11 Q
( on two instances of) 151.24 472.67 T
4 9.5 Q
(<time-offset>) 250.41 472.67 T
1 11 Q
(:) 324.51 472.67 T
5 9 Q
(?) 108 452.01 T
4 F
( *minus-2-hours* + *15-20-45*;) 113.4 452.01 T
5 F
({instance of <TIME-OFFSET>}) 108 441.01 T
1 11 Q
-0.14 (Methods 1 and 4 ar) 108 420.67 P
-0.14 (e applicable. Method 1 is mor) 200.76 420.67 P
-0.14 (e speci\336c than method 4 because) 343.51 420.67 P
-0.29 (when comparing the types of the \336rst parameters,) 108 406.67 P
4 9.5 Q
-0.61 (<time-offset>) 350.91 406.67 P
1 11 Q
-0.29 ( is mor) 425.01 406.67 P
-0.29 (e speci\336c) 457.65 406.67 P
(than) 108 392.67 T
4 9.5 Q
(<time>) 132.64 392.67 T
1 11 Q
(. Ther) 166.84 392.67 T
(e is no need to compar) 194.9 392.67 T
(e the types of the second parameters.) 304.31 392.67 T
3 15 Q
(6.3  Required, rest, and keyword parameters) 108 353.01 T
1 11 Q
(Methods can have r) 108 332.67 T
(equir) 203.62 332.67 T
(ed parameters and optional parameters. Requir) 229.03 332.67 T
(ed) 459.02 332.67 T
(parameters may be specialized, but optional parameters may not. Ther) 108 318.67 T
(e ar) 451.26 318.67 T
(e two) 468.92 318.67 T
(kinds of optional parameters: r) 108 304.67 T
(est parameters, and keywor) 257.98 304.67 T
(d parameters.) 392.76 304.67 T
3 13 Q
(6.3.1  Required parameters) 108 273.34 T
1 11 Q
(Requir) 108 253.67 T
(ed parameters appear befor) 140.76 253.67 T
(e any r) 274.8 253.67 T
(est or keywor) 307.74 253.67 T
(d parameters. Requir) 373.94 253.67 T
(ed) 476.47 253.67 T
(parameters ar) 108 239.67 T
(e or) 175.2 239.67 T
(der) 193.37 239.67 T
(ed, and the r) 209.51 239.67 T
(equir) 270.52 239.67 T
(ed ar) 295.93 239.67 T
(guments must be given in or) 320.32 239.67 T
(der) 459.36 239.67 T
(.) 474.88 239.67 T
3 13 Q
(6.3.2  Rest parameters) 108 208.34 T
1 11 Q
(Rest parameters enable a method to accept any number of optional ar) 108 188.67 T
(guments.) 445.46 188.67 T
(Any ar) 108 174.67 T
(guments pr) 141.47 174.67 T
(ovided in the call after the r) 197.36 174.67 T
(equir) 331.41 174.67 T
(ed ar) 356.82 174.67 T
(guments ar) 381.21 174.67 T
(e collected in) 435.99 174.67 T
-0.13 (a sequence, which is the value of the r) 108 160.67 P
-0.13 (est parameter) 290.83 160.67 P
-0.13 (. Rest parameters appear after) 356.29 160.67 P
4 9.5 Q
(#rest) 108 146.67 T
1 11 Q
( in the parameter list.) 136.5 146.67 T
0 0 0 1 0 0 0 K
108 606.01 522 614 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(T) 148.08 617.67 T
(able 6.1  T) 153.82 617.67 T
(ypes of the specialized parameters of these + methods) 201.62 617.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Method) 151.19 586.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 229.73 586.67 T
(ype of \336rst parameter) 235.48 586.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(T) 352.86 586.67 T
(ype of second parameter) 358.61 586.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(method 1) 151.19 565.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-offset>) 229.73 566.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 352.86 566.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method 2) 151.19 544.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-offset>) 229.73 545.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-of-day>) 352.86 545.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method 3) 151.19 523.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time-of-day>) 229.73 524.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time-offset>) 352.86 524.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(method 4) 151.19 502.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(<time>) 229.73 503.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<time>) 352.86 503.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
223.73 600.01 223.73 495.01 2 L
V
0.5 H
0 Z
N
346.86 600.01 346.86 495.01 2 L
V
N
145.19 579.01 484.81 579.01 2 L
V
N
145.19 558.01 484.81 558.01 2 L
V
N
145.19 537.01 484.81 537.01 2 L
V
N
145.19 516.01 484.81 516.01 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 79
%%Page: "78" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(78) 72 677.67 T
0 9.5 Q
(6.3 Required, rest, and keyword parameters) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(For example, we de\336ne a method called) 135 640.67 T
4 9.5 Q
(sum) 331.44 640.67 T
1 11 Q
(:) 348.54 640.67 T
6 9 Q
(// sum any number of values) 108 620 T
(// more-values contains any arguments that follow the f) 108 609 T
(irst) 405 609 T
4 F
(def) 108 598 T
(ine method sum \050value, #rest more-values\051) 124.2 598 T
6 F
( // if only one value, that is the answer) 113.4 587 T
4 F
(  if \050empty?\050more-values\051\051) 108 576 T
(    value;) 108 565 T
6 F
( // otherwise add the f) 113.4 554 T
(irst value to the sum of the rest) 237.6 554 T
4 F
(  else) 108 543 T
(    value + apply\050sum, more-values\051;) 108 532 T
(  end;) 108 521 T
(end;) 108 510 T
1 11 Q
(W) 108 489.67 T
(e can call) 117.99 489.67 T
4 9.5 Q
(sum) 165.08 489.67 T
1 11 Q
( with one or mor) 182.18 489.67 T
(e ar) 263.44 489.67 T
(guments:) 281.1 489.67 T
5 9 Q
(?) 108 469 T
4 F
(sum\0503\051;) 118.8 469 T
5 F
(3) 108 458 T
(?) 108 439 T
4 F
(sum\0501, 2, 3, 4, 5\051;) 118.8 439 T
5 F
(15) 108 428 T
3 13 Q
(6.3.3  Keyword parameters) 108 297.33 T
1 11 Q
(Keywor) 108 277.67 T
(d parameters enable a method to accept optional ar) 146.7 277.67 T
(guments that ar) 395.63 277.67 T
(e) 472.23 277.67 T
(keyed to a name. The caller of the generic function can supply the keywor) 108 263.67 T
(d ar) 466.68 263.67 T
(gu-) 485.8 263.67 T
-0.08 (ments in any or) 108 249.67 P
-0.08 (der) 183.43 249.67 P
-0.08 (, although keywor) 198.95 249.67 P
-0.08 (d ar) 287.73 249.67 P
-0.08 (guments must follow any r) 306.77 249.67 P
-0.08 (equir) 437.87 249.67 P
-0.08 (ed ar) 463.28 249.67 P
-0.08 (gu-) 487.59 249.67 P
(ments. Using keywor) 108 235.67 T
(d ar) 211.65 235.67 T
(guments can be particularly useful for functions that) 230.77 235.67 T
(take a lot of ar) 108 221.67 T
(guments \321 when calling the function, you do not need to r) 177.08 221.67 T
(emem-) 464.12 221.67 T
(ber the or) 108 207.67 T
(der of the ar) 154.61 207.67 T
(guments.) 213.76 207.67 T
(Keywor) 135 193.67 T
(d parameters appear after) 173.7 193.67 T
4 9.5 Q
(#key) 302.42 193.67 T
1 11 Q
( in the parameter list. For example,) 325.22 193.67 T
-0.14 (we can write a method similar to) 108 179.67 P
4 9.5 Q
-0.3 (encode-total-seconds) 269.66 179.67 P
1 11 Q
-0.14 ( that uses keywor) 383.66 179.67 P
-0.14 (d ar) 468.61 179.67 P
-0.14 (gu-) 487.59 179.67 P
(ments instead of r) 108 165.67 T
(equir) 195.04 165.67 T
(ed ar) 220.45 165.67 T
(guments:) 244.84 165.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Quick summary of apply) 141 387.67 T
1 F
(:) 266.58 387.67 T
4 9.5 Q
(apply) 272.08 387.67 T
0 11 Q
(function) 303.33 387.67 T
4 9.5 Q
(#rest) 343.56 387.67 T
0 11 Q
( ar) 372.06 387.67 T
(gs) 383.78 387.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
(apply) 141 373.67 T
1 11 Q
( calls the) 169.5 373.67 T
0 F
(function) 214.46 373.67 T
1 F
( with the given) 251.95 373.67 T
0 F
(ar) 327.77 373.67 T
(gs) 336.73 373.67 T
1 F
(. The last) 346.51 373.67 T
0 F
(ar) 392.88 373.67 T
(g) 401.84 373.67 T
1 F
( must be a) 407.34 373.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence. The elements of the sequence ar) 141 359.67 T
(e pr) 345.71 359.67 T
(ovided as separate ar) 364.49 359.67 T
(gu-) 467.42 359.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments to the) 141 345.67 T
0 F
(function) 203.73 345.67 T
1 F
(.) 241.22 345.67 T
4 9.5 Q
(apply) 246.72 345.67 T
1 11 Q
( r) 275.22 345.67 T
(eturns the values of) 282.12 345.67 T
0 F
(function) 380.42 345.67 T
1 F
(.) 417.91 345.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 400.88 135 338.12 2 L
V
0.25 H
0 Z
N
486 400.88 486 338.12 2 L
V
N
134.88 401 486.12 401 2 L
V
N
134.88 338 486.12 338 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 80
%%Page: "79" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 444.31 677.67 T
2 11 Q
(79) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// convert days, hours, minutes, seconds to seconds) 108 642 T
(// named \050keyword\051 arguments are optional) 108 631 T
4 F
(def) 108 620 T
(ine method convert-to-seconds \050#key days = 0, hours = 0,) 124.2 620 T
(minutes = 0, seconds = 0\051) 291.6 609 T
(  \050\050days * 24 + hours\051 * 60 + minutes\051 * 60 + seconds;) 108 598 T
(end;) 108 587 T
1 11 Q
(W) 108 566.67 T
(e can call) 117.99 566.67 T
4 9.5 Q
(convert-to-seconds) 165.08 566.67 T
1 11 Q
(:) 267.68 566.67 T
5 9 Q
(?) 108 546 T
4 F
(convert-to-seconds\050minutes: 3, seconds: 9\051;) 118.8 546 T
5 F
(189) 108 535 T
(?) 108 516 T
4 F
(convert-to-seconds\050hours: 2, days: 1\051;) 118.8 516 T
5 F
(93600) 108 505 T
1 11 Q
(As shown in the pr) 108 484.67 T
(eceding calls, keywor) 200.49 484.67 T
(d ar) 304.88 484.67 T
(guments consist of a keywor) 324 484.67 T
(d fol-) 462.78 484.67 T
(lowed by a value. A keywor) 108 470.67 T
(d is a symbol such as) 244.77 470.67 T
4 9.5 Q
(minutes) 349.89 470.67 T
1 11 Q
( and) 389.79 470.67 T
4 9.5 Q
(seconds) 413.91 470.67 T
1 11 Q
(.) 453.81 470.67 T
(In this example, we used the) 135 456.67 T
4 9.5 Q
(=) 276.44 456.67 T
1 11 Q
( to give a default initial value to each key-) 282.14 456.67 T
(wor) 108 442.67 T
(d. If one of these keywor) 127.33 442.67 T
(d ar) 247.28 442.67 T
(guments is not pr) 266.4 442.67 T
(ovided in the call to) 351.65 442.67 T
4 9.5 Q
(convert-) 450.77 442.67 T
(to-seconds) 108 428.67 T
1 11 Q
(, its value is the default initial value.) 165 428.67 T
-0.3 (A method can specify that it accepts all keywor) 135 414.67 P
-0.3 (ds by using) 362 414.67 P
4 9.5 Q
-0.63 (#all-keys) 419.94 414.67 P
1 11 Q
-0.3 ( as the) 471.24 414.67 P
(last element in the parameter list.) 108 400.67 T
3 15 Q
(6.4  Return values) 108 361 T
1 11 Q
-0.1 (A method can r) 108 340.67 P
-0.1 (eturn zer) 183.14 340.67 P
-0.1 (o, one, or multiple values. A method r) 226.94 340.67 P
-0.1 (eturns the value\050s\051) 411.08 340.67 P
-0.32 (of the last statement executed in its body) 108 326.67 P
-0.32 (. Returning a single value is easy) 302.56 326.67 P
-0.32 (. The last) 458.58 326.67 P
(statement executed in the body simply r) 108 312.67 T
(eturns the single value.) 302.82 312.67 T
3 13 Q
(6.4.1  No values) 108 281.33 T
1 11 Q
-0.34 (T) 108 261.67 P
-0.34 (o r) 113.73 261.67 P
-0.34 (eturn no values, the last statement executed in the body r) 126.3 261.67 P
-0.34 (eturns no values. For) 400.34 261.67 P
-0.41 (example, method 4 r) 108 247.67 P
-0.41 (eturns no values because the last statement is a call to) 206.35 247.67 P
4 9.5 Q
-0.85 (format) 464.71 247.67 P
1 11 Q
-0.41 (,) 498.91 247.67 P
(which r) 108 233.67 T
(eturns no values:) 144.96 233.67 T
6 9 Q
(// Method 4, original version which returns no values) 108 213 T
4 F
(def) 108 202 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 124.2 202 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 118.8 191 T
(end;) 108 180 T
1 11 Q
-0.33 (Suppose for a moment that) 108 159.67 P
4 9.5 Q
-0.68 (format) 240.96 159.67 P
1 11 Q
-0.33 ( did r) 275.16 159.67 P
-0.33 (eturn a value and we wanted this method) 300.8 159.67 P
(to r) 108 145.67 T
(eturn no values. W) 124.49 145.67 T
(e can call) 215.6 145.67 T
4 9.5 Q
(values) 262.69 145.67 T
1 11 Q
( with no ar) 296.89 145.67 T
(guments to r) 349.56 145.67 T
(eturn no values:) 411.18 145.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 81
%%Page: "80" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(80) 72 677.67 T
0 9.5 Q
(6.4 Return values) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Method 4, revised to return no values explicitly) 108 642 T
4 F
(def) 108 631 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 124.2 631 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 118.8 620 T
(values\050\051;) 118.8 609 T
(end;) 108 598 T
3 13 Q
(6.4.2  Multiple values) 108 568.33 T
1 11 Q
(W) 108 548.67 T
(e call) 117.99 548.67 T
4 9.5 Q
(values) 145.54 548.67 T
1 11 Q
( with multiple ar) 179.74 548.67 T
(guments to r) 261.42 548.67 T
(eturn multiple values:) 323.04 548.67 T
4 9 Q
(def) 108 528 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 124.2 528 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 118.8 517 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 118.8 506 T
(values \050hours, minutes, seconds\051;) 118.8 495 T
(end;) 108 484 T
3 13 Q
(6.4.3  Declarations of the return values) 108 454.33 T
1 11 Q
-0.16 (Sometimes it is helpful to document, or declar) 108 434.67 P
-0.16 (e, the values r) 330.59 434.67 P
-0.16 (eturned by a method.) 397.27 434.67 P
(Specifying r) 108 420.67 T
(eturn values enables the compiler to check r) 166.13 420.67 T
(eceivers of the r) 379.27 420.67 T
(esults of) 455.71 420.67 T
(the method for corr) 108 406.67 T
(ect type, and also impr) 202.6 406.67 T
(oves the ef) 313.34 406.67 T
(\336ciency of the code gener-) 364.98 406.67 T
(ated.) 108 392.67 T
(W) 135 378.67 T
(e can declar) 144.99 378.67 T
(e the values just after the parameter list, beginning with the) 202.26 378.67 T
(characters) 108 364.67 T
4 9.5 Q
(=>) 160.13 364.67 T
1 11 Q
(, as shown in the following method, on line 2:) 171.53 364.67 T
6 9 Q
(// Method 1, revised to declare its value) 108 344 T
4 F
(def) 108 333 T
(ine method \134+ \050offset1 :: <time-offset>, offset2 :: <time-offset>\051) 124.2 333 T
6 F
(// 1) 500.4 333 T
4 F
(=> sum :: <time-offset>;) 118.8 322 T
6 F
(// 2) 500.4 322 T
4 F
(let s1 = if\050offset1.past?\051 negative else identity end;) 118.8 311 T
6 F
(// 3) 500.4 311 T
4 F
(let t1 = offset1.total-seconds;) 118.8 300 T
6 F
(// 4) 500.4 300 T
4 F
(let s2 = if\050offset2.past?\051 negative else identity end;) 118.8 289 T
6 F
(// 5) 500.4 289 T
4 F
(let t2 = offset2.total-seconds;) 118.8 278 T
6 F
(// 6) 500.4 278 T
4 F
(make\050<time-offset>, total-seconds: s1\050t1\051 + s2\050t2\051\051;) 118.8 267 T
6 F
(// 7) 500.4 267 T
4 F
(end;) 108 256 T
6 F
(// 8) 500.4 256 T
1 11 Q
(On line 2, the value r) 108 235.67 T
(eturned is named) 209.34 235.67 T
4 9.5 Q
(sum) 297.29 235.67 T
1 11 Q
(, and its type is) 314.39 235.67 T
4 9.5 Q
(<time-offset>) 390.41 235.67 T
1 11 Q
(. The) 464.51 235.67 T
(name of the value is pur) 108 221.67 T
(ely for documentation.) 225.63 221.67 T
(T) 135 207.67 T
(o declar) 140.73 207.67 T
(e multiple values, we separate them by commas and enclose them) 179.21 207.67 T
(in par) 108 193.67 T
(entheses:) 136.61 193.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 82
%%Page: "81" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 444.31 677.67 T
2 11 Q
(81) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// decode-total-seconds method, revised to declare its values) 108 642 T
4 F
(def) 108 631 T
(ine method decode-total-seconds \050total-seconds :: <integer>\051) 124.2 631 T
(=> \050hours :: <integer>, minutes :: <integer>, seconds :: <integer>\051;) 118.8 620 T
(let \050total-minutes, seconds\051 = truncate/ \050total-seconds, 60\051;) 118.8 609 T
(let \050hours, minutes\051 = truncate/ \050total-minutes, 60\051;) 118.8 598 T
(values \050hours, minutes, seconds\051;) 118.8 587 T
(end;) 108 576 T
3 15 Q
(6.5  Method parameter congruence) 108 538 T
1 11 Q
(A generic function and all its methods must have congr) 108 517.67 T
(uent parameter lists. This) 377.55 517.67 T
(means that:) 108 503.67 T
(\245) 117 483.67 T
(The parameter lists must have the same number of r) 135 483.67 T
(equir) 388.26 483.67 T
(ed ar) 413.67 483.67 T
(guments.) 438.06 483.67 T
(\245) 117 463.67 T
(If one parameter list uses) 135 463.67 T
4 9.5 Q
(#key) 259.82 463.67 T
1 11 Q
( or) 282.62 463.67 T
4 9.5 Q
(#rest) 298.47 463.67 T
1 11 Q
(, then all must.) 326.97 463.67 T
(\245) 117 443.67 T
(If one parameter list uses) 135 443.67 T
4 9.5 Q
(#rest) 259.82 443.67 T
1 11 Q
( but not) 288.32 443.67 T
4 9.5 Q
(#key) 328.86 443.67 T
1 11 Q
(, then all must.) 350.44 443.67 T
(\245) 117 423.67 T
(If one parameter list uses neither) 135 423.67 T
4 9.5 Q
(#rest) 297.04 423.67 T
1 11 Q
( ar) 325.54 423.67 T
(guments nor) 337.94 423.67 T
4 9.5 Q
(#key) 402.57 423.67 T
1 11 Q
( ar) 425.37 423.67 T
(guments,) 437.77 423.67 T
(then all must not.) 135 409.67 T
(\245) 117 389.67 T
(If a method uses) 135 389.67 T
4 9.5 Q
(#all-keys) 217.8 389.67 T
1 11 Q
(, then the generic function must use) 269.1 389.67 T
4 9.5 Q
(#all-keys) 445.44 389.67 T
1 11 Q
(.) 496.74 389.67 T
(\245) 117 369.67 T
(If the generic function specializes a parameter) 135 369.67 T
(, then each method must spe-) 357.18 369.67 T
(cialize that parameter with a subtype of the type in the generic function.) 135 355.67 T
(This r) 135 341.67 T
(ule enables a generic function to state the types of ar) 163.02 341.67 T
(guments for) 416.79 341.67 T
(which it is intended.) 135 327.67 T
(\245) 117 307.67 T
(If the generic function speci\336es keywor) 135 307.67 T
(d parameters, then all methods) 325.68 307.67 T
(must accept those keywor) 135 293.67 T
(ds.) 261.33 293.67 T
-0.11 (The value declarations of a generic function and its methods must also be congr) 108 273.67 P
-0.11 (u-) 493.7 273.67 P
(ent. The r) 108 259.67 T
(ules for congr) 154.18 259.67 T
(uency of value declarations ar) 221.12 259.67 T
(e not given in this book.) 366.84 259.67 T
3 15 Q
(6.6  Identity of methods) 108 220 T
1 11 Q
-0.08 (A method is identi\336ed by the name of the generic function and by the types of all) 108 199.67 P
-0.32 (its r) 108 185.67 P
-0.32 (equir) 126.03 185.67 P
-0.32 (ed parameters. When you evaluate or compile a method de\336nition, ther) 151.44 185.67 P
-0.32 (e) 496.3 185.67 P
(ar) 108 171.67 T
(e two possible outcomes:) 117.65 171.67 T
(\245) 117 151.67 T
(The method is added to the generic function.) 135 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 83
%%Page: "82" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(82) 72 677.67 T
0 9.5 Q
(6.7 Methods for types that are not classes) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(When you de\336ne method A, if that generic function has no method whose) 135 640.67 T
-0.29 (r) 135 626.67 P
-0.29 (equir) 139.15 626.67 P
-0.29 (ed parameters ar) 164.56 626.67 P
-0.29 (e of the same types as in method A, then method A is) 245.91 626.67 P
(added to the generic function.) 135 612.67 T
(\245) 117 592.67 T
(The method r) 135 592.67 T
(eplaces a method pr) 200.76 592.67 T
(eviously de\336ned.) 298.36 592.67 T
(When you de\336ne method A, if that generic function has a method B whose) 135 572.67 T
(r) 135 558.67 T
(equir) 139.15 558.67 T
(ed parameters ar) 164.56 558.67 T
(e of the same types as in method A, then method A) 246.5 558.67 T
(r) 135 544.67 T
(eplaces method B.) 139.15 544.67 T
3 15 Q
(6.7  Methods for types that are not classes) 108 505 T
1 11 Q
(Note that every class is a type, but not every type is a class. Ther) 108 484.67 T
(e ar) 420.08 484.67 T
(e thr) 437.75 484.67 T
(ee func-) 459.9 484.67 T
(tions that cr) 108 470.67 T
(eate types that ar) 165.46 470.67 T
(e not classes:) 248.3 470.67 T
4 9.5 Q
(singleton) 313.41 470.67 T
1 11 Q
(,) 364.71 470.67 T
4 9.5 Q
(union) 370.21 470.67 T
1 11 Q
(, and) 398.71 470.67 T
4 9.5 Q
(limited) 425.59 470.67 T
1 11 Q
(.) 465.49 470.67 T
4 9.5 Q
(singleton) 135 444.67 T
1 11 Q
(T) 216 444.67 T
(akes any particular instance, and cr) 221.73 444.67 T
(eates a type whose) 393.17 444.67 T
(only member is that instance. The purpose of a singleton) 216 430.67 T
(type is to be used for a method that should be chosen for a) 216 416.67 T
(particular instance.) 216 402.67 T
4 9.5 Q
(union) 135 376.67 T
1 11 Q
(T) 216 376.67 T
(akes one or mor) 221.73 376.67 T
(e classes or types and cr) 299.42 376.67 T
(eates a new type) 415.54 376.67 T
(whose members ar) 216 362.67 T
(e all the members of the classes and) 307.72 362.67 T
-0.06 (types that ar) 216 348.67 P
-0.06 (e its ar) 276.34 348.67 P
-0.06 (guments. Y) 308.08 348.67 P
-0.06 (ou can use) 362.23 348.67 P
4 9.5 Q
-0.13 (union) 416.29 348.67 P
1 11 Q
-0.06 ( to combine) 444.79 348.67 P
-0.14 (one or mor) 216 334.67 P
-0.14 (e types \050note that you cannot combine non-class) 269.12 334.67 P
(types using multiple inheritance\051. One example is to com-) 216 320.67 T
(bine a singleton type of) 216 306.67 T
4 9.5 Q
(#f) 332.3 306.67 T
1 11 Q
( and a class such as) 343.7 306.67 T
4 9.5 Q
(<integer>) 439.99 306.67 T
1 11 Q
-0.15 (into a new type that has as members) 216 292.67 P
4 9.5 Q
-0.31 (#f) 394.8 292.67 P
1 11 Q
-0.15 ( and all the integers.) 406.2 292.67 P
4 9.5 Q
(limited) 135 266.67 T
1 11 Q
(T) 216 266.67 T
(akes a type and cr) 221.73 266.67 T
(eates a new type, which is a mor) 309.02 266.67 T
(e) 466.52 266.67 T
-0.26 (r) 216 252.67 P
-0.26 (estricted version of the type that is its ar) 220.15 252.67 P
-0.26 (gument. For exam-) 412.26 252.67 P
(ple, you can de\336ne a new type that is an array of integers.) 216 238.67 T
-0.24 (The main r) 216 224.67 P
-0.24 (easons for de\336ning types with) 268.39 224.67 P
4 9.5 Q
-0.5 (limited) 416.83 224.67 P
1 11 Q
-0.24 ( ar) 456.73 224.67 P
-0.24 (e to do) 468.89 224.67 P
(type-checking and to incr) 216 210.67 T
(ease ef) 339.62 210.67 T
(\336ciency) 371.8 210.67 T
(.) 407.99 210.67 T
3 15 Q
(6.8  Summary) 108 171 T
1 11 Q
(This chapter cover) 108 150.67 T
(ed:) 197.63 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 84
%%Page: "83" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(6 More on Methods) 444.31 677.67 T
2 11 Q
(83) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(\245) 117 640.67 T
(W) 135 640.67 T
(e de\336ned new methods on the built-in function +.) 144.99 640.67 T
(\245) 117 620.67 T
(W) 135 620.67 T
(e discussed how method dispatch works for multimethods.) 144.99 620.67 T
(\245) 117 600.67 T
(W) 135 600.67 T
(e discussed r) 144.99 600.67 T
(equir) 207.32 600.67 T
(ed, r) 232.74 600.67 T
(est, and keywor) 254.37 600.67 T
(d ar) 331.59 600.67 T
(guments.) 350.71 600.67 T
(\245) 117 580.67 T
-0.04 (W) 135 580.67 P
-0.04 (e showed how to declar) 144.99 580.67 P
-0.04 (e and r) 260.25 580.67 P
-0.04 (eturn no values, a single value, or multiple) 293.72 580.67 P
(values.) 135 566.67 T
(\245) 117 546.67 T
(W) 135 546.67 T
(e discussed method parameter congr) 144.99 546.67 T
(uence.) 324.18 546.67 T
(\245) 117 526.67 T
(W) 135 526.67 T
(e de\336ned the identity of a method.) 144.99 526.67 T
(\245) 117 506.67 T
(W) 135 506.67 T
(e discussed the technique of de\336ning methods on types that ar) 144.99 506.67 T
(e not) 448.41 506.67 T
(classes.) 135 492.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 85
%%Page: "84" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(84) 72 677.67 T
0 9.5 Q
(6.8 Summary) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 86
%%Page: "85" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(85) 300.5 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(7) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(7) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Mor) 109 566.45 T
(e on Slots) 165.07 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we give mor) 177.24 424.67 T
(e information about classes and slots. W) 243.35 424.67 T
(e discuss get-) 437.29 424.67 T
(ters and setters, virtual slots, techniques for initializing slots, and the dif) 108 410.67 T
(fer) 457.76 410.67 T
(ent) 470.83 410.67 T
(kinds of allocations for slots. W) 108 396.67 T
(e de\336ne the) 259.55 396.67 T
4 9.5 Q
(<vehicle>) 318.64 396.67 T
1 11 Q
( class.) 369.94 396.67 T
3 15 Q
(7.1  Getters and setters for slots) 108 357 T
1 11 Q
(As alr) 108 336.67 T
(eady shown, when you de\336ne a class, Dylan automatically de\336nes a getter) 136.82 336.67 T
(method to r) 108 322.67 T
(eturn the value of a slot, and it de\336nes a setter method to change the) 164.94 322.67 T
(value of a slot.) 108 308.67 T
3 13 Q
(7.1.1  Syntaxes for calling a getter) 108 277.33 T
1 11 Q
-0.11 (The name of the getter is always the same as the name of the slot. Dylan supports) 108 257.67 P
(two syntaxes for calling a getter) 108 243.67 T
(. The following two expr) 261.77 243.67 T
(essions ar) 381.37 243.67 T
(e equivalent:) 428.64 243.67 T
4 9 Q
(*my-absolute-time*.total-seconds;) 108 223 T
(total-seconds\050*my-absolute-time*\051;) 108 204 T
1 11 Q
(The pr) 108 183.67 T
(eceding expr) 139.92 183.67 T
(essions ar) 202.24 183.67 T
(e calls to the getter function named) 249.5 183.67 T
4 9.5 Q
(total-seconds) 422.88 183.67 T
1 11 Q
(.) 496.98 183.67 T
(The choice of which syntax to use is pur) 108 169.67 T
(ely a matter of personal style. The \336rst) 302.15 169.67 T
(syntax is pr) 108 155.67 T
(ovided for those who pr) 164.07 155.67 T
(efer the slightly mor) 281.48 155.67 T
(e concise dot syntax. The) 379.89 155.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 87
%%Page: "86" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(86) 72 677.67 T
0 9.5 Q
(7.1 Getters and setters for slots) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(second syntax is pr) 108 640.67 T
(ovided for those who pr) 200.76 640.67 T
(efer slot accesses to look like function) 318.18 640.67 T
(calls. In this book, we use the dot syntax.) 108 626.67 T
3 13 Q
(7.1.2  Syntaxes for calling a setter) 108 488.33 T
1 11 Q
-0.43 (By default, the name of the setter is the slot\325s name followed by) 108 468.67 P
4 9.5 Q
-0.89 (-setter) 412.75 468.67 P
1 11 Q
-0.43 (. Thus, the) 451.84 468.67 P
(setter for the) 108 454.67 T
4 9.5 Q
(total-seconds) 172.24 454.67 T
1 11 Q
( slot is) 246.34 454.67 T
4 9.5 Q
(total-seconds-setter) 279.91 454.67 T
1 11 Q
(. However) 393.1 454.67 T
(, you can) 443.21 454.67 T
-0.34 (invoke the setter by using assignment with the name of the getter) 108 440.67 P
-0.34 (. Dylan supports) 421.18 440.67 P
(thr) 108 426.67 T
(ee syntaxes for calling a setter) 122.14 426.67 T
(. The following thr) 266.22 426.67 T
(ee expr) 356.74 426.67 T
(essions ar) 391.73 426.67 T
(e equivalent:) 439 426.67 T
4 9 Q
(*my-absolute-time*.total-seconds := 180;) 108 406 T
(total-seconds\050*my-absolute-time*\051 := 180;) 108 387 T
(total-seconds-setter\050180, *my-absolute-time*\051;) 108 368 T
1 11 Q
(Each of these expr) 108 347.67 T
(essions stor) 196.32 347.67 T
(e the value) 252.34 347.67 T
4 9.5 Q
(180) 307.94 347.67 T
1 11 Q
( in the slot named) 325.04 347.67 T
4 9.5 Q
(total-seconds) 414.71 347.67 T
1 11 Q
( of) 488.81 347.67 T
(the object that is the value of the) 108 333.67 T
4 9.5 Q
(*my-absolute-time*) 267.6 333.67 T
1 11 Q
( variable. In the \336rst two) 370.2 333.67 T
(syntaxes, we use the assignment operator) 108 319.67 T
(,) 309.01 319.67 T
4 9.5 Q
(:=) 314.51 319.67 T
1 11 Q
(, with the name of the getter) 325.91 319.67 T
(.) 461.95 319.67 T
(In the thir) 135 305.67 T
(d syntax, we use the name of the setter explicitly \321) 183.2 305.67 T
4 9.5 Q
(total-sec-) 435.61 305.67 T
(onds-setter) 108 291.67 T
1 11 Q
(. The \336rst and second syntaxes ar) 169.89 291.67 T
(e translated into calls to the thir) 330.89 291.67 T
(d) 484.27 291.67 T
(syntax.) 108 277.67 T
3 13 Q
(7.1.3  The setter: slot option) 108 246.33 T
1 11 Q
-0.05 (W) 108 226.67 P
-0.05 (e can use the) 117.99 226.67 P
4 9.5 Q
-0.1 (setter:) 182.67 226.67 P
1 11 Q
-0.05 ( slot option to de\336ne a slot to be r) 222.57 226.67 P
-0.05 (ead-only \050to have no set-) 384.09 226.67 P
-0.18 (ter\051, or to change the name of the setter) 108 212.67 P
-0.18 (. Her) 295.66 212.67 P
-0.18 (e we r) 319.55 212.67 P
-0.18 (ede\336ne the) 348.55 212.67 P
4 9.5 Q
-0.37 (<physical-object>) 404.53 212.67 P
1 11 Q
(class to use the) 108 198.67 T
4 9.5 Q
(setter:) 183.33 198.67 T
1 11 Q
( slot option:) 223.23 198.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Performance note:) 141 592.67 T
1 F
( For slot accesses, given accurate type declarations,) 232.06 592.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the compiler can typically optimize away not only the method dis-) 141 578.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(patch, but also the function call, making the executed code just as ef) 141 564.67 T
(\336-) 469.82 564.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cient as in a language such as C wher) 141 550.67 T
(e str) 321.88 550.67 T
(uctur) 342.41 550.67 T
(e or r) 368.29 550.67 T
(ecor) 393.56 550.67 T
(d slots ar) 413.87 550.67 T
(e) 457.86 550.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(accessed dir) 141 536.67 T
(ectly) 199.67 536.67 T
(.) 221.51 536.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 605.88 135 529.12 2 L
V
0.25 H
0 Z
N
486 605.88 486 529.12 2 L
V
N
134.88 606 486.12 606 2 L
V
N
134.88 529 486.12 529 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 88
%%Page: "87" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 458.55 677.67 T
2 11 Q
(87) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <physical-object> \050<object>\051) 124.2 642 T
(slot current-position :: <position>,) 118.8 631 T
(init-keyword: current-position:,) 253.8 620 T
(setter: change-position;) 253.8 609 T
(slot physical-size) 118.8 598 T
(:: <size>;) 237.6 598 T
(end;) 108 587 T
1 11 Q
(W) 108 566.67 T
(e use the) 117.99 566.67 T
4 9.5 Q
(setter:) 163.33 566.67 T
1 11 Q
( slot option to de\336ne the name of the setter function of the) 203.23 566.67 T
4 9.5 Q
(current-position) 108 552.67 T
1 11 Q
( slot to be) 199.2 552.67 T
4 9.5 Q
(change-position) 248.6 552.67 T
1 11 Q
(. A slot\325s setter generic function) 334.1 552.67 T
(takes two ar) 108 538.67 T
(guments: the value to stor) 167.05 538.67 T
(e, and the instance to modify) 293.25 538.67 T
(. W) 432.6 538.67 T
(e can now) 448.09 538.67 T
(change the position of a physical object using the) 108 524.67 T
4 9.5 Q
(change-position) 348.68 524.67 T
1 11 Q
( function:) 434.18 524.67 T
5 9 Q
(?) 108 504 T
4 F
( def) 113.4 504 T
(ine variable *you* = make\050<physical-object>\051;) 135 504 T
5 F
(?) 108 485 T
4 F
( change-position\050*my-absolute-position*, *you*\051;) 113.4 485 T
5 F
({Instance of <absolute-position>}) 108 474 T
(?) 108 455 T
4 F
( say\050*you*\051;) 113.4 455 T
5 F
(object at 42 degrees 19 minutes 34 seconds North latitude) 108 444 T
(70 degrees 56 minutes 26 seconds West longitude) 108 433 T
1 11 Q
(Note that, when you change the name of the setter function to something other) 108 412.67 T
(than the default \050which is) 108 398.67 T
0 F
(slot-name) 235.06 398.67 T
1 F
(-) 278.45 398.67 T
4 9.5 Q
(setter) 282.11 398.67 T
1 11 Q
(\051, you cannot use assignment on the) 316.31 398.67 T
-0.42 (getter of the slot. This technique can be useful to help contr) 108 384.67 P
-0.42 (ol write access to a slot.) 390.07 384.67 P
3 13 Q
(7.1.4  Advantages of accessing slots via generic functions) 108 353.33 T
1 11 Q
-0.35 (A slot is conceptually a variable, in that it has a value. But the only way to access a) 108 333.67 P
(slot\325s value is to call a generic function. Using generic functions and methods to) 108 319.67 T
(gain access to slot values has thr) 108 305.67 T
(ee important advantages:) 264.82 305.67 T
(\245) 117 285.67 T
(Generic functions pr) 135 285.67 T
(ovide a public interface to the private implementation) 234.46 285.67 T
(of a slot. By making the r) 135 271.67 T
(epr) 256.17 271.67 T
(esentation of the slot visible only to the meth-) 272.19 271.67 T
(ods of the generic functions, you can change the r) 135 257.67 T
(epr) 375.26 257.67 T
(esentation without) 391.29 257.67 T
(changing any of the users of the information \321 the callers of the generic) 135 243.67 T
-0.15 (functions. In most cases a compiler can optimize slot r) 135 229.67 P
-0.15 (efer) 395.89 229.67 P
-0.15 (ences to r) 414.23 229.67 P
-0.15 (educe or) 459.67 229.67 P
(eliminate the cost of hiding the implementation.) 135 215.67 T
(\245) 117 195.67 T
(A subclass can specialize, or \336lter) 135 195.67 T
(, r) 297.03 195.67 T
(efer) 306.68 195.67 T
(ences to super) 325.02 195.67 T
(class slots. For exam-) 393.93 195.67 T
(ple, the classes) 135 181.67 T
4 9.5 Q
(<latitude>) 209.18 181.67 T
1 11 Q
( and) 266.18 181.67 T
4 9.5 Q
(<longitude>) 290.31 181.67 T
1 11 Q
( inherit the) 353.01 181.67 T
4 9.5 Q
(direction) 408.92 181.67 T
1 11 Q
( slot) 460.22 181.67 T
(fr) 135 167.67 T
(om their super) 142.81 167.67 T
(class) 214.16 167.67 T
4 9.5 Q
(<directed-angle>) 239.82 167.67 T
1 11 Q
(. In Section 7.2, we show how to) 331.02 167.67 T
(pr) 135 153.67 T
(ovide a setter method for the dir) 145.76 153.67 T
(ection slot of) 302.93 153.67 T
4 9.5 Q
(<latitude>) 367.65 153.67 T
1 11 Q
( that ensur) 424.65 153.67 T
(es) 476.34 153.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 89
%%Page: "88" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(88) 72 677.67 T
0 9.5 Q
(7.2 Virtual slots) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(that the value is North or South, and a setter method for the dir) 135 640.67 T
(ection slot) 442.63 640.67 T
(of) 135 626.67 T
4 9.5 Q
(<longitude>) 147.42 626.67 T
1 11 Q
( that ensur) 210.12 626.67 T
(es that the value is East or W) 261.81 626.67 T
(est.) 400.82 626.67 T
(\245) 117 606.67 T
(A slot access can involve arbitrary computation. For example, a slot can be) 135 606.67 T
2 F
(virtual) 135 592.67 T
1 F
(.) 168.6 592.67 T
3 15 Q
(7.2  V) 108 553 T
(irtual slots) 139.93 553 T
1 11 Q
-0.21 (W) 108 532.67 P
-0.21 (e want to ensur) 117.99 532.67 P
-0.21 (e that the value of the) 192.25 532.67 P
4 9.5 Q
-0.43 (direction) 298.84 532.67 P
1 11 Q
-0.21 ( slot is North or South for) 350.14 532.67 P
4 9.5 Q
-0.43 (<lat-) 475.5 532.67 P
(itude>) 108 518.67 T
1 11 Q
(, and East or W) 142.2 518.67 T
(est for) 215.38 518.67 T
4 9.5 Q
(<longitude>) 248.42 518.67 T
1 11 Q
(. T) 311.12 518.67 T
(o do this checking, we must:) 322.35 518.67 T
(\245) 117 498.67 T
(Check the value when the setter method is invoked. In this section, we) 135 498.67 T
(show how to do this using a virtual slot. W) 135 484.67 T
(e also show how to use symbols) 343.14 484.67 T
(instead of strings to r) 135 470.67 T
(epr) 237.73 470.67 T
(esent North, South, East, and W) 253.76 470.67 T
(est.) 407.91 470.67 T
(\245) 117 450.67 T
(Check the value of the) 135 450.67 T
4 9.5 Q
(direction) 246.22 450.67 T
1 11 Q
( slot when an instance is cr) 297.52 450.67 T
(eated and ini-) 427.43 450.67 T
(tialized. W) 135 436.67 T
(e do that checking in Section 7.3.) 186.67 436.67 T
(W) 108 416.67 T
(e r) 117.99 416.67 T
(ede\336ne the) 130.15 416.67 T
4 9.5 Q
(<directed-angle>) 186.5 416.67 T
1 11 Q
( class to include a virtual slot and an or) 277.7 416.67 T
(dinary) 467.58 416.67 T
(slot:) 108 402.67 T
4 9 Q
(def) 108 382 T
(ine class <directed-angle> \050<sixty-unit>\051) 124.2 382 T
(virtual slot direction) 118.8 371 T
( :: <symbol>;) 243 371 T
(slot internal-direction :: <symbol>;) 118.8 360 T
(end;) 108 349 T
1 11 Q
-0.26 (W) 108 328.67 P
-0.26 (e de\336ne the slot) 117.99 328.67 P
4 9.5 Q
-0.55 (direction) 196.23 328.67 P
1 11 Q
-0.26 ( with the) 247.53 328.67 P
4 9.5 Q
-0.55 (virtual) 292.61 328.67 P
2 11 Q
-0.26 (slot allocation) 335 328.67 P
1 F
-0.26 (. Note that the slot\325s) 405.3 328.67 P
(allocation appears befor) 108 314.67 T
(e the name of the slot \050as contrasted with slot options,) 224.65 314.67 T
(which appear after the name of the slot\051.) 108 300.67 T
-0.23 (A virtual slot does not occupy storage; instead, its value is computed. When) 135 286.67 P
-0.21 (you de\336ne a virtual slot, you need to de\336ne a getter method to r) 108 272.67 P
-0.21 (eturn the value of) 415.87 272.67 P
(the virtual slot, and you can optionally de\336ne a setter method to set the value of) 108 258.67 T
(the virtual slot.) 108 244.67 T
-0.28 (In the) 135 230.67 P
4 9.5 Q
-0.58 (<directed-angle>) 165.31 230.67 P
1 11 Q
-0.28 ( class, we use the slot) 256.51 230.67 P
4 9.5 Q
-0.58 (internal-direction) 360.72 230.67 P
1 11 Q
-0.28 ( to stor) 463.32 230.67 P
-0.28 (e) 496.26 230.67 P
(the dir) 108 216.67 T
(ection. W) 140.08 216.67 T
(e shall pr) 184.91 216.67 T
(ovide methods that use the virtual slot) 229.41 216.67 T
4 9.5 Q
(direction) 419.46 216.67 T
1 11 Q
( to) 470.77 216.67 T
(check the validity of the value of the dir) 108 202.67 T
(ection befor) 301.29 202.67 T
(e storing the value in the) 358.56 202.67 T
4 9.5 Q
(internal-direction) 108 188.67 T
1 11 Q
( slot.) 210.6 188.67 T
(V) 135 174.67 T
(irtual slots ar) 142.34 174.67 T
(e useful when ther) 206.07 174.67 T
(e is information conceptually associated) 296.3 174.67 T
(with an object that is better computed than stor) 108 160.67 T
(ed in an or) 337.46 160.67 T
(dinary slot. By using a) 389.36 160.67 T
(virtual slot instead of writing a method, you make the information appear like a) 108 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 90
%%Page: "89" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 458.55 677.67 T
2 11 Q
(89) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(slot to the callers of the getter) 108 640.67 T
(. The information appears like a slot because the) 250.15 640.67 T
-0.3 (caller cannot distinguish the getter of a virtual fr) 108 626.67 P
-0.3 (om a getter of an or) 340.67 626.67 P
-0.3 (dinary slot. In) 434.04 626.67 P
-0.38 (both cases, the getter takes a single r) 108 612.67 P
-0.38 (equir) 281.49 612.67 P
-0.38 (ed ar) 306.9 612.67 P
-0.38 (gument, the instance, and it r) 330.91 612.67 P
-0.38 (eturns) 470.73 612.67 P
(a single value.) 108 598.67 T
3 13 Q
(7.2.1  Symbols) 108 567.33 T
1 11 Q
(In the) 108 547.67 T
4 9.5 Q
(<directed-angle>) 138.87 547.67 T
1 11 Q
( class, we de\336ne the type of the two slots as) 230.07 547.67 T
4 9.5 Q
(<symbol>) 443.55 547.67 T
1 11 Q
(,) 489.15 547.67 T
(instead of) 108 533.67 T
4 9.5 Q
(<string>) 158.51 533.67 T
1 11 Q
(, which we used in pr) 204.11 533.67 T
(evious versions of this class. If we use) 308.77 533.67 T
(strings, when checking whether the dir) 108 519.67 T
(ection slot of a latitude is) 297.77 519.67 T
4 9.5 Q
("North") 421.81 519.67 T
1 11 Q
( or) 461.71 519.67 T
4 9.5 Q
("South") 108 505.67 T
1 11 Q
(, we would have to worry about upper) 147.9 505.67 T
(case versus lower) 336.12 505.67 T
(case. For exam-) 421.52 505.67 T
(ple, we would have to decide whether each of these wer) 108 491.67 T
(e valid values:) 380.5 491.67 T
4 9.5 Q
("north") 453.09 491.67 T
1 11 Q
(,) 492.99 491.67 T
4 9.5 Q
("NORTH") 108 477.67 T
1 11 Q
(,) 147.9 477.67 T
4 9.5 Q
("North") 153.4 477.67 T
1 11 Q
(,) 193.3 477.67 T
4 9.5 Q
("NOrth") 198.8 477.67 T
1 11 Q
(, and so on.) 238.7 477.67 T
(W) 135 463.67 T
(e simplify that decision by using the) 144.99 463.67 T
4 9.5 Q
(<symbol>) 323.77 463.67 T
1 11 Q
( type instead of) 369.37 463.67 T
4 9.5 Q
(<string>) 446.96 463.67 T
1 11 Q
(.) 492.57 463.67 T
(Symbols ar) 108 449.67 T
(e much like strings. The r) 161.96 449.67 T
(eason for using them her) 284.68 449.67 T
(e is that symbol) 405.34 449.67 T
(comparison is not case-sensitive. For mor) 108 435.67 T
(e information, see Section 9.3.10, page) 308.48 435.67 T
(137.) 108 421.67 T
(Ther) 135 407.67 T
(e ar) 157.56 407.67 T
(e two equivalent syntaxes for r) 175.23 407.67 T
(eferring to symbols:) 324.49 407.67 T
(\245) 117 387.67 T
4 9.5 Q
(north:) 135 387.67 T
1 11 Q
( and) 169.2 387.67 T
4 9.5 Q
(south:) 193.32 387.67 T
1 11 Q
( ar) 227.52 387.67 T
(e examples of using the keywor) 239.92 387.67 T
(d syntax.) 393.61 387.67 T
(\245) 117 367.67 T
4 9.5 Q
(#"north") 135 367.67 T
1 11 Q
( and) 180.6 367.67 T
4 9.5 Q
(#"south") 204.72 367.67 T
1 11 Q
( ar) 250.32 367.67 T
(e examples of using the hash syntax.) 262.72 367.67 T
3 13 Q
(7.2.2  Getter and setter methods for a virtual slot) 108 336.33 T
1 11 Q
(Her) 108 316.67 T
(e is the getter method for the virtual slot) 126.57 316.67 T
4 9.5 Q
(direction) 324.99 316.67 T
1 11 Q
(:) 376.29 316.67 T
6 9 Q
(// Method 1) 108 296 T
4 F
(def) 108 285 T
(ine method direction \050angle :: <directed-angle>\051) 124.2 285 T
(angle.internal-direction;) 118.8 274 T
(end;) 108 263 T
1 11 Q
(Her) 108 242.67 T
(e ar) 126.57 242.67 T
(e the setter methods for the virtual slot) 144.23 242.67 T
4 9.5 Q
(direction) 335.25 242.67 T
1 11 Q
(:) 386.55 242.67 T
6 9 Q
(// Method 2) 108 222 T
4 F
(def) 108 211 T
(ine method direction-setter \050dir, angle :: <directed-angle>\051) 124.2 211 T
(angle.internal-direction := dir;) 118.8 200 T
(end;) 108 189 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 91
%%Page: "90" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(90) 72 677.67 T
0 9.5 Q
(7.2 Virtual slots) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Method 3) 108 642 T
4 F
(def) 108 631 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 124.2 631 T
(if \050dir == north: | dir == south:\051) 118.8 620 T
(next-method\050\051;) 140.4 609 T
(else error \050"%= is not north: or south:", dir\051;) 129.6 598 T
(end;) 118.8 587 T
(end;) 108 576 T
6 F
(// Method 4) 108 557 T
4 F
(def) 108 546 T
(ine method direction-setter \050dir, longitude :: <longitude>\051) 124.2 546 T
(if \050dir == east: | dir == west:\051) 118.8 535 T
(next-method\050\051;) 140.4 524 T
(else error \050"%= is not east: or west:", dir\051;) 129.6 513 T
(end;) 118.8 502 T
(end;) 108 491 T
1 11 Q
(The pr) 108 470.67 T
(eceding methods work as follows:) 139.92 470.67 T
(\245) 117 450.67 T
(When you call the getter) 135 450.67 T
4 9.5 Q
(direction) 256.79 450.67 T
1 11 Q
( an instance of) 308.09 450.67 T
4 9.5 Q
(<directed-angle>) 380.57 450.67 T
1 11 Q
( or) 471.77 450.67 T
(any of its subclasses, method 1 is invoked. Method 1 calls the getter) 135 436.67 T
4 9.5 Q
(inter-) 465.37 436.67 T
(nal-direction) 135 422.67 T
1 11 Q
(, and thus r) 209.1 422.67 T
(eturns the value of the) 264.15 422.67 T
4 9.5 Q
(internal-direction) 375.8 422.67 T
1 11 Q
( slot.) 478.4 422.67 T
(\245) 117 402.67 T
(When you call the setter) 135 402.67 T
4 9.5 Q
(direction-setter) 255.34 402.67 T
1 11 Q
( on a dir) 346.54 402.67 T
(ect instance of) 386.77 402.67 T
4 9.5 Q
(<lati-) 458.33 402.67 T
-0.36 (tude>) 135 388.67 P
1 11 Q
-0.17 (, method 3 is invoked. Method 3 checks that the dir) 163.5 388.67 P
-0.17 (ection is valid, and) 410.27 388.67 P
(if so, it calls) 135 374.67 T
4 9.5 Q
(next-method) 194.52 374.67 T
1 11 Q
(, which invokes method 2. Method 2 stor) 257.22 374.67 T
(es the) 455.4 374.67 T
(dir) 135 360.67 T
(ection in the) 149.07 360.67 T
4 9.5 Q
(internal-direction) 211.53 360.67 T
1 11 Q
( slot.) 314.13 360.67 T
(\245) 117 340.67 T
(When you call the setter) 135 340.67 T
4 9.5 Q
(direction-setter) 255.34 340.67 T
1 11 Q
( on a dir) 346.54 340.67 T
(ect instance of) 386.77 340.67 T
4 9.5 Q
(<longi-) 458.33 340.67 T
(tude>) 135 326.67 T
1 11 Q
(, method 4 is called. Method 4 checks that the dir) 163.5 326.67 T
(ection is valid for) 400.85 326.67 T
(longitude, and if so, it calls) 135 312.67 T
4 9.5 Q
(next-method) 268.53 312.67 T
1 11 Q
(, which invokes method 2. Method) 331.23 312.67 T
(2 stor) 135 298.67 T
(es the dir) 161.65 298.67 T
(ection in the) 206.41 298.67 T
4 9.5 Q
(internal-direction) 268.87 298.67 T
1 11 Q
( slot.) 371.47 298.67 T
(\245) 117 278.67 T
(When you call the setter) 135 278.67 T
4 9.5 Q
(direction-setter) 255.34 278.67 T
1 11 Q
( on a dir) 346.54 278.67 T
(ect instance of) 386.77 278.67 T
4 9.5 Q
(<directed-angle>) 135 264.67 T
1 11 Q
(, method 2 is invoked. Method 2 stor) 226.2 264.67 T
(es the dir) 404.23 264.67 T
(ection in) 448.99 264.67 T
(the) 135 250.67 T
4 9.5 Q
(internal-direction) 153.01 250.67 T
1 11 Q
( slot.) 255.61 250.67 T
(In these methods, we use) 108 230.67 T
4 9.5 Q
(dir) 233.17 230.67 T
1 11 Q
(, not) 249.46 230.67 T
4 9.5 Q
(direction) 273.7 230.67 T
1 11 Q
(, as the name of the parameter that) 325 230.67 T
(r) 108 216.67 T
(epr) 112.15 216.67 T
(esents dir) 128.17 216.67 T
(ection. Recall that) 174.85 216.67 T
4 9.5 Q
(direction) 263.67 216.67 T
1 11 Q
( is the name of a getter) 314.97 216.67 T
(. Although we) 424 216.67 T
(technically could use) 108 202.67 T
4 9.5 Q
(direction) 212.91 202.67 T
1 11 Q
( as the parameter name in these methods) 264.21 202.67 T
(\050because we do not call the getter) 108 188.67 T
4 9.5 Q
(direction) 272.59 188.67 T
1 11 Q
( in the bodies\051,) 323.89 188.67 T
4 9.5 Q
(direction) 398.11 188.67 T
1 11 Q
( as a) 449.41 188.67 T
(parameter name might be confusing to other people r) 108 174.67 T
(eading the code.) 367.68 174.67 T
(The) 135 160.67 T
4 9.5 Q
(error) 156.16 160.67 T
1 11 Q
( function signals an err) 184.66 160.67 T
(or) 295.85 160.67 T
(. For mor) 305.39 160.67 T
(e information about signaling) 349.97 160.67 T
(and handling err) 108 146.67 T
(ors, see Chapter 10.) 189.83 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 92
%%Page: "91" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 458.55 677.67 T
2 11 Q
(91) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The) 135 640.67 T
4 9.5 Q
(direction-setter) 156.16 640.67 T
1 11 Q
( methods check the dir) 247.36 640.67 T
(ection when the setter is) 357.61 640.67 T
(called. In Section 7.3, we check the dir) 108 626.67 T
(ection when an instance is made.) 291.83 626.67 T
3 15 Q
(7.3  Initialize methods) 108 587 T
1 11 Q
-0.26 (Every time you call) 108 566.67 P
4 9.5 Q
-0.54 (make) 203.93 566.67 P
1 11 Q
-0.26 ( to cr) 226.73 566.67 P
-0.26 (eate an instance of a class,) 250.33 566.67 P
4 9.5 Q
-0.54 (make) 377.54 566.67 P
1 11 Q
-0.26 ( calls the) 400.34 566.67 P
4 9.5 Q
-0.54 (initialize) 444.51 566.67 P
1 11 Q
(generic function. The purpose of the) 108 552.67 T
4 9.5 Q
(initialize) 286.99 552.67 T
1 11 Q
( generic function is to initialize) 343.99 552.67 T
(the instance befor) 108 538.67 T
(e it is r) 193.83 538.67 T
(eturned by) 226.15 538.67 T
4 9.5 Q
(make) 282.08 538.67 T
1 11 Q
(. Y) 304.88 538.67 T
(ou can customize the initialization by) 316.7 538.67 T
(de\336ning a method on) 108 524.67 T
4 9.5 Q
(initialize) 215.37 524.67 T
1 11 Q
(.) 272.37 524.67 T
(Methods for) 135 510.67 T
4 9.5 Q
(initialize) 197.57 510.67 T
1 11 Q
( r) 254.57 510.67 T
(eceive the instance as the \336rst ar) 261.46 510.67 T
(gument, and) 417.55 510.67 T
(r) 108 496.67 T
(eceive all keywor) 112.15 496.67 T
(d ar) 196.48 496.67 T
(guments given in the call to) 215.6 496.67 T
4 9.5 Q
(make) 352.93 496.67 T
1 11 Q
(. Sometimes it is useful to) 375.73 496.67 T
-0.38 (de\336ne a keywor) 108 482.67 P
-0.38 (d ar) 185.39 482.67 P
-0.38 (gument to be used by an) 204.14 482.67 P
4 9.5 Q
-0.78 (initialize) 324.43 482.67 P
1 11 Q
-0.38 ( method. W) 381.43 482.67 P
-0.38 (e r) 436.62 482.67 P
-0.38 (ede\336ne the) 448.41 482.67 P
4 9.5 Q
(<directed-angle>) 108 468.67 T
1 11 Q
( class to include such a keywor) 199.2 468.67 T
(d:) 349.43 468.67 T
4 9 Q
(def) 108 448 T
(ine class <directed-angle> \050<sixty-unit>\051) 124.2 448 T
(virtual slot direction) 118.8 437 T
( :: <symbol>;) 243 437 T
(slot internal-direction :: <symbol>;) 118.8 426 T
(keyword direction:;) 118.8 415 T
(end;) 108 404 T
1 11 Q
(The keywor) 108 383.67 T
(d) 165.99 383.67 T
4 9.5 Q
(direction:) 175.46 383.67 T
1 11 Q
( happens to have the same name as the virtual slot) 232.46 383.67 T
4 9.5 Q
-0.27 (direction) 108 369.67 P
1 11 Q
-0.13 (. However) 159.3 369.67 P
-0.13 (, the keywor) 209.29 369.67 P
-0.13 (d is intended for use in the) 269.36 369.67 P
4 9.5 Q
-0.27 (initialize) 401.31 369.67 P
1 11 Q
-0.13 ( method,) 458.31 369.67 P
(and has no dir) 108 355.67 T
(ect r) 177.92 355.67 T
(elationship with the slot of the same name.) 198.55 355.67 T
(W) 135 341.67 T
(e de\336ne the) 144.99 341.67 T
4 9.5 Q
(initialize) 204.08 341.67 T
1 11 Q
( method:) 261.08 341.67 T
4 9 Q
(def) 108 321 T
(ine method initialize \050angle :: <directed-angle>, #key direction: dir\051) 124.2 321 T
6 F
(//1) 505.8 321 T
4 F
(next-method\050\051;) 118.8 310 T
6 F
(//2) 505.8 310 T
4 F
(angle.direction := dir;) 118.8 299 T
6 F
(//3) 505.8 299 T
4 F
(end;) 108 288 T
1 11 Q
(On line 1, the) 108 267.67 T
4 9.5 Q
(#key) 175.63 267.67 T
1 11 Q
( syntax in the parameter list for) 198.43 267.67 T
4 9.5 Q
(initialize) 353.29 267.67 T
1 11 Q
( indicates that) 410.29 267.67 T
4 9.5 Q
(direction) 108 253.67 T
1 11 Q
( is a keywor) 159.3 253.67 T
(d parameter) 217.74 253.67 T
(. This keywor) 276.54 253.67 T
(d ar) 342.63 253.67 T
(gument is supplied fr) 361.74 253.67 T
(om the) 466.3 253.67 T
(keywor) 108 239.67 T
(d ar) 144.83 239.67 T
(guments pr) 163.95 239.67 T
(ovided in the call to) 219.84 239.67 T
4 9.5 Q
(make) 318.96 239.67 T
1 11 Q
( for the class) 341.76 239.67 T
4 9.5 Q
(<directed-angle>) 404.94 239.67 T
1 11 Q
(,) 496.14 239.67 T
(or any of its subclasses. The local variable) 108 225.67 T
4 9.5 Q
(dir) 312.98 225.67 T
1 11 Q
( will be initialized to the ar) 330.08 225.67 T
(gument) 460.19 225.67 T
(pr) 108 211.67 T
(ovided for the) 118.76 211.67 T
4 9.5 Q
(direction:) 190.41 211.67 T
1 11 Q
( keywor) 247.41 211.67 T
(d.) 286.99 211.67 T
(On line 2, we call) 135 197.67 T
4 9.5 Q
(next-method) 221.35 197.67 T
1 11 Q
(. All methods for) 284.05 197.67 T
4 9.5 Q
(initialize) 369.14 197.67 T
1 11 Q
( should call) 426.14 197.67 T
4 9.5 Q
(next-method) 108 183.67 T
1 11 Q
( as their \336rst action, to allow any less speci\336c initializations \050that is,) 170.7 183.67 T
4 9.5 Q
(initialize) 108 169.67 T
1 11 Q
( methods de\336ned on super) 165 169.67 T
(classes\051 to execute \336rst. By calling) 295.13 169.67 T
4 9.5 Q
(next-) 461.66 169.67 T
-0.75 (method) 108 155.67 P
1 11 Q
-0.36 ( as the \336rst action, in the r) 142.2 155.67 P
-0.36 (est of the method, you can operate on an instance) 264.91 155.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 93
%%Page: "92" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(92) 72 677.67 T
0 9.5 Q
(7.4 Techniques for initializing slots) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
-0.22 (that has been pr) 108 640.67 P
-0.22 (operly initialized. If you for) 185.01 640.67 P
-0.22 (get to include the call to) 318.34 640.67 P
4 9.5 Q
-0.46 (next-method) 436.02 640.67 P
1 11 Q
-0.22 (,) 498.72 640.67 P
(you may get impr) 108 626.67 T
(operly initialized instances fr) 194.98 626.67 T
(om) 336.14 626.67 T
4 9.5 Q
(make) 354.61 626.67 T
1 11 Q
(.) 377.41 626.67 T
(Line 3 contains the r) 135 612.67 T
(eal action of this method; it works by calling the setter) 233.14 612.67 T
(of the) 108 598.67 T
4 9.5 Q
(direction) 138.43 598.67 T
1 11 Q
( slot. W) 189.73 598.67 T
(e de\336ned the methods for) 225.42 598.67 T
4 9.5 Q
(direction-setter) 353.11 598.67 T
1 11 Q
( in Section) 444.31 598.67 T
-0.08 (7.2.2. If the ar) 108 584.67 P
-0.08 (gument is a latitude, then method 3 is invoked to check the value. If) 173.04 584.67 P
(the ar) 108 570.67 T
(gument is a longitude, then method 4 is invoked to check the value.) 135.65 570.67 T
(W) 135 556.67 T
(e can cr) 144.99 556.67 T
(eate a new instance of) 181.57 556.67 T
4 9.5 Q
(<absolute-position>) 290.87 556.67 T
1 11 Q
(. In the following) 399.17 556.67 T
(example, we demonstrate the syntax of symbols \050) 108 542.67 T
4 9.5 Q
(North:) 347.72 542.67 T
1 11 Q
( and) 381.92 542.67 T
4 9.5 Q
(South:) 406.05 542.67 T
1 11 Q
(\051, and the) 440.25 542.67 T
4 9.5 Q
-0.18 (direction) 108 528.67 P
1 11 Q
-0.09 ( keywor) 159.3 528.67 P
-0.09 (d, which is used by the) 198.79 528.67 P
4 9.5 Q
-0.18 (initialize) 312.92 528.67 P
1 11 Q
-0.09 ( method \050and not as an init-) 369.92 528.67 P
(keywor) 108 514.67 T
(d\051:) 144.83 514.67 T
5 9 Q
(?) 108 494 T
4 F
(def) 118.8 494 T
(ine variable *my-absolute-position* =) 135 494 T
(make\050<absolute-position>,) 129.6 483 T
(latitude:) 156.6 472 T
( make\050<latitude>,) 210.6 472 T
(total-seconds: encode-total-seconds\05042, 19, 34\051,) 243 461 T
(direction: North:\051,) 243 450 T
(longitude: make\050<longitude>,) 156.6 439 T
(total-seconds: encode-total-seconds\05070, 56, 26\051,) 243 428 T
(direction: West:\051\051;) 243 417 T
1 11 Q
(The pr) 108 396.67 T
(eceding example works, because the values for dir) 139.92 396.67 T
(ection wer) 384.45 396.67 T
(e appr) 435.14 396.67 T
(opriate) 466.03 396.67 T
(for latitude and longitude. The following example show what happens when the) 108 382.67 T
(dir) 108 368.67 T
(ection is not valid when cr) 122.07 368.67 T
(eating an instance:) 250.14 368.67 T
5 9 Q
(?) 108 348 T
4 F
(make\050<latitude>, direction: Nooth:\051;) 118.8 348 T
5 F
(ERROR: nooth: is not north: or south:) 108 337 T
1 11 Q
-0.05 (The following example show what happens when the dir) 108 316.67 P
-0.05 (ection is not valid when) 385.19 316.67 P
(using the) 108 302.67 T
4 9.5 Q
(direction) 155.77 302.67 T
1 11 Q
( setter:) 207.07 302.67 T
5 9 Q
(?) 108 282 T
4 F
(begin) 118.8 282 T
(let my-longitude = make\050<longitude>\051;) 129.6 271 T
(my-longitude.direction := North:) 129.6 260 T
(end;) 118.8 249 T
5 F
(ERROR: north: is not east: or west:) 108 238 T
3 15 Q
(7.4  T) 108 200 T
(echniques for initializing slots) 138.55 200 T
1 11 Q
-0.28 (If you call a getter for a slot that has not been initialized, Dylan signals an err) 108 179.67 P
-0.28 (or) 476.66 179.67 P
-0.28 (. In) 486.19 179.67 P
(this section, we describe a variety of techniques for avoiding the pr) 108 165.67 T
(oblem of) 433.01 165.67 T
(accessing an uninitialized slot.) 108 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 94
%%Page: "93" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 458.55 677.67 T
2 11 Q
(93) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(7.4.1  Use of a predicate to test whether the slot is initialized) 108 639.33 T
1 11 Q
(In the) 108 619.67 T
4 9.5 Q
(decode-total-seconds) 138.87 619.67 T
1 11 Q
( method \050see Section 5.5, page 63\051, we assume that) 252.87 619.67 T
(the) 108 605.67 T
4 9.5 Q
(total-seconds) 126.01 605.67 T
1 11 Q
( slot has a value. If we call) 200.11 605.67 T
4 9.5 Q
(decode-total-seconds) 329.8 605.67 T
1 11 Q
( befor) 443.8 605.67 T
(e \336ll-) 471.71 605.67 T
-0.03 (ing in the) 108 591.67 P
4 9.5 Q
-0.07 (total-seconds) 156.73 591.67 P
1 11 Q
-0.03 ( slot, an err) 230.83 591.67 P
-0.03 (or is signaled. W) 284.84 591.67 P
-0.03 (e could r) 365.02 591.67 P
-0.03 (ede\336ne the method) 407.31 591.67 P
(to call the) 108 577.67 T
4 9.5 Q
(slot-initialized?) 157.88 577.67 T
1 11 Q
( pr) 254.79 577.67 T
(edicate to determine whether the slot is initial-) 268.29 577.67 T
(ized befor) 108 563.67 T
(e trying to access it. If it is not initialized, we could r) 156.61 563.67 T
(eturn something) 409.42 563.67 T
(suitable, such as zer) 108 549.67 T
(o for all thr) 204.8 549.67 T
(ee r) 259.11 549.67 T
(eturn values, when the) 276.54 549.67 T
4 9.5 Q
(total-seconds) 390.51 549.67 T
1 11 Q
( slot is) 464.61 549.67 T
(not initialized:) 108 535.67 T
4 9 Q
(def) 108 515 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 124.2 515 T
(=> \050max-unit :: <integer>, minutes :: <integer>, seconds :: <integer>\051) 118.8 504 T
(if \050slot-initialized? \050sixty-unit, total-seconds\051\051) 118.8 493 T
-0.36 (let\050total-minutes, seconds\051 = truncate/ \050sixty-unit.total-seconds, 60\051;) 140.4 482 P
(let\050max-unit, minutes\051 = truncate/ \050total-minutes, 60\051;) 140.4 471 T
(values\050max-unit, minutes, seconds\051;) 140.4 460 T
(else) 129.6 449 T
(values \0500, 0, 0\051;) 140.4 438 T
(end;) 118.8 427 T
(end;) 108 416 T
1 11 Q
(Calling) 108 395.67 T
4 9.5 Q
(slot-initialized?) 146.17 395.67 T
1 11 Q
( in the pr) 243.07 395.67 T
(eceding method solves the pr) 286.94 395.67 T
(oblem for this) 429.53 395.67 T
(method only) 108 381.67 T
(. Instead of checking whether a slot is initialized, we can guarantee) 168.95 381.67 T
(that the slot is initialized. In Sections 7.4.2, 7.4.3, 7.4.4, and 7.4.5, we show tech-) 108 367.67 T
(niques for initializing slots.) 108 353.67 T
3 13 Q
(7.4.2  The init-value: slot option) 108 322.33 T
1 11 Q
(W) 108 302.67 T
(e can use the) 117.99 302.67 T
4 9.5 Q
(init-value:) 182.87 302.67 T
1 11 Q
( slot option to give a default initial value to a slot.) 245.57 302.67 T
(This technique is better than using) 108 288.67 T
4 9.5 Q
(slot-initialized?) 278.23 288.67 T
1 11 Q
( because we can avoid) 375.12 288.67 T
(having to check whether the slot is initialized in every method.) 108 274.67 T
4 9 Q
(def) 108 254 T
(ine class <sixty-unit> \050<object>\051) 124.2 254 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 118.8 243 T
(init-value: 0;) 237.6 232 T
(end;) 108 221 T
1 11 Q
(When we use) 108 200.67 T
4 9.5 Q
(make) 176.33 200.67 T
1 11 Q
( to cr) 199.13 200.67 T
(eate any subclass of) 223.26 200.67 T
4 9.5 Q
(<sixty-unit>) 321.86 200.67 T
1 11 Q
( \050such as) 390.26 200.67 T
4 9.5 Q
(<time-of-) 434.92 200.67 T
(day>) 108 186.67 T
1 11 Q
(, and we do not supply the) 130.8 186.67 T
4 9.5 Q
(total-seconds:) 263.68 186.67 T
1 11 Q
( keywor) 343.48 186.67 T
(d to) 383.06 186.67 T
4 9.5 Q
(make) 404.87 186.67 T
1 11 Q
(, the) 427.67 186.67 T
4 9.5 Q
(total-) 451.18 186.67 T
(seconds) 108 172.67 T
1 11 Q
( slot is initialized to zer) 147.9 172.67 T
(o.) 260.46 172.67 T
(In general, a slot r) 135 158.67 T
(eceives its default initial value when no init keywor) 222.07 158.67 T
(d is) 472.84 158.67 T
(de\336ned or when the caller does not supply the init keywor) 108 144.67 T
(d ar) 392.76 144.67 T
(gument to) 411.88 144.67 T
4 9.5 Q
(make) 464.69 144.67 T
1 11 Q
(.) 487.49 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 95
%%Page: "94" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(94) 72 677.67 T
0 9.5 Q
(7.4 Techniques for initializing slots) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(7.4.3  The required-init-keyword: slot option) 108 639.33 T
1 11 Q
(Instead of giving the slot a default initial value, we can r) 108 619.67 T
(equir) 381.04 619.67 T
(e the caller of) 406.45 619.67 T
4 9.5 Q
(make) 474.05 619.67 T
1 11 Q
(to supply an init keywor) 108 605.67 T
(d for the slot. The) 227.55 605.67 T
4 9.5 Q
(required-init-keyword:) 315.91 605.67 T
1 11 Q
( slot option) 441.31 605.67 T
-0.05 (de\336nes a r) 108 591.67 P
-0.05 (equir) 158.03 591.67 P
-0.05 (ed init keywor) 183.44 591.67 P
-0.05 (d. If the caller of) 254.04 591.67 P
4 9.5 Q
-0.1 (make) 335.71 591.67 P
1 11 Q
-0.05 ( does not supply the r) 358.51 591.67 P
-0.05 (equir) 463.9 591.67 P
-0.05 (ed) 489.31 591.67 P
(init keywor) 108 577.67 T
(d, then an err) 163.97 577.67 T
(or is signaled.) 229.01 577.67 T
4 9 Q
(def) 108 557 T
(ine class <sixty-unit> \050<object>\051) 124.2 557 T
(slot total-seconds :: <integer>, required-init-keyword: total-seconds:;) 118.8 546 T
(end;) 108 535 T
1 11 Q
(The) 108 514.67 T
4 9.5 Q
(total-seconds) 129.16 514.67 T
1 11 Q
( slot is de\336ned in the) 203.26 514.67 T
4 9.5 Q
(<sixty-unit>) 306.98 514.67 T
1 11 Q
( class. Note that making) 375.38 514.67 T
4 9.5 Q
(total-seconds:) 108 500.67 T
1 11 Q
( a r) 187.8 500.67 T
(equir) 202.95 500.67 T
(ed init keywor) 228.36 500.67 T
(d in this class makes it r) 299.07 500.67 T
(equir) 414.85 500.67 T
(ed for every) 440.26 500.67 T
(class that inherits fr) 108 486.67 T
(om it, including) 203.12 486.67 T
4 9.5 Q
(<time>) 283.38 486.67 T
1 11 Q
(,) 317.58 486.67 T
4 9.5 Q
(<angle>) 323.08 486.67 T
1 11 Q
(, and all their subclasses.) 362.98 486.67 T
3 13 Q
(7.4.4  Slot options for an inherited slot) 108 455.33 T
1 11 Q
(Y) 108 435.67 T
(ou can de\336ne a slot in only one particular class in a set of classes r) 114.32 435.67 T
(elated by) 433.28 435.67 T
(inheritance. Y) 108 421.67 T
(ou can use the) 174.29 421.67 T
4 9.5 Q
(inherited slot) 246.53 421.67 T
1 11 Q
( speci\336cation to modify the default) 326.33 421.67 T
(initial value of an inherited slot, or the) 108 407.67 T
2 F
(init function) 296.89 407.67 T
1 F
( of an inherited slot. See Sec-) 360.12 407.67 T
(tion 7.4.5.) 108 393.67 T
(In this example, assume that the) 135 379.67 T
4 9.5 Q
(<sixty-unit>) 294.23 379.67 T
1 11 Q
( class de\336nes the) 362.62 379.67 T
4 9.5 Q
(total-sec-) 446.77 379.67 T
-0.72 (onds) 108 365.67 P
1 11 Q
-0.35 ( slot, the init keywor) 130.8 365.67 P
-0.35 (d) 229.1 365.67 P
4 9.5 Q
-0.72 (total-seconds:) 238.22 365.67 P
1 11 Q
-0.35 (, and pr) 318.02 365.67 P
-0.35 (ovides the default initial value) 354.96 365.67 P
(of zer) 108 351.67 T
(o for that slot.) 135.34 351.67 T
4 9 Q
(def) 108 331 T
(ine class <sixty-unit> \050<object>\051) 124.2 331 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 118.8 320 T
(init-value: 0;) 237.6 309 T
(end;) 108 298 T
(def) 108 279 T
(ine class <time> \050<sixty-unit>\051) 124.2 279 T
(end;) 108 268 T
1 11 Q
(The) 108 247.67 T
4 9.5 Q
(<time-offset>) 129.16 247.67 T
1 11 Q
( class pr) 203.26 247.67 T
(ovides a dif) 242.43 247.67 T
(fer) 298.9 247.67 T
(ent default initial value for the inher-) 311.98 247.67 T
(ited slot) 108 233.67 T
4 9.5 Q
(total-seconds) 149.73 233.67 T
1 11 Q
(:) 223.83 233.67 T
4 9 Q
(def) 108 213 T
(ine class <time-offset> \050<time>\051) 124.2 213 T
(inherited slot total-seconds, init-value: encode-total-seconds\0501, 0, 0\051;) 118.8 202 T
(end;) 108 191 T
1 11 Q
(By using the) 108 170.67 T
4 9.5 Q
(inherited slot) 171.36 170.67 T
1 11 Q
( speci\336cation, we ar) 251.16 170.67 T
(e not de\336ning the slot, but ar) 347.11 170.67 T
(e) 487.05 170.67 T
(stating that it is a slot de\336ned by a super) 108 156.67 T
(class. W) 304.55 156.67 T
(e can then pr) 342.95 156.67 T
(ovide either a) 405.67 156.67 T
(default initial value or an init function for the inherited slot.) 108 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 96
%%Page: "95" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 458.55 677.67 T
2 11 Q
(95) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(7.4.5  The init-function: slot option) 108 639.33 T
1 11 Q
-0.26 (W) 108 619.67 P
-0.26 (e can use the) 117.99 619.67 P
4 9.5 Q
-0.53 (init-function:) 181.84 619.67 P
1 11 Q
-0.26 ( slot option to pr) 261.64 619.67 P
-0.26 (ovide a function of no ar) 341.24 619.67 P
-0.26 (guments) 459.12 619.67 P
(to be called to r) 108 605.67 T
(eturn a default initial value for the slot. These functions ar) 182.46 605.67 T
(e called) 464.29 605.67 T
2 F
(init-functions) 108 591.67 T
1 F
(. They allow the initial value of a slot to be an arbitrary computa-) 177.02 591.67 T
(tion.) 108 577.67 T
4 9 Q
(def) 108 557 T
(ine class <time-of-day> \050<time>\051) 124.2 557 T
(inherited slot total-seconds, init-function: get-current-time\050\051;) 118.8 546 T
(end;) 108 535 T
1 11 Q
(The) 108 514.67 T
4 9.5 Q
(<time-of-day>) 129.16 514.67 T
1 11 Q
( class calls the) 203.26 514.67 T
4 9.5 Q
(get-current-time) 273.88 514.67 T
1 11 Q
( function to pr) 365.08 514.67 T
(ovide an ini-) 434.46 514.67 T
(tial value for the) 108 500.67 T
4 9.5 Q
(total-seconds) 190.58 500.67 T
1 11 Q
( slot. Note that we assume) 264.68 500.67 T
4 9.5 Q
(get-current-time) 395.35 500.67 T
1 11 Q
( is) 486.55 500.67 T
(available as a library function.) 108 486.67 T
(An init function is called during instance cr) 135 472.67 T
(eation when no keywor) 345.38 472.67 T
(d ar) 460.07 472.67 T
(gu-) 479.19 472.67 T
(ment is de\336ned or when an optional keywor) 108 458.67 T
(d ar) 323.96 458.67 T
(gument is not passed to) 343.08 458.67 T
4 9.5 Q
(make) 461.43 458.67 T
1 11 Q
(.) 484.23 458.67 T
(A slot cannot use both the) 135 444.67 T
4 9.5 Q
(init-value:) 264.2 444.67 T
1 11 Q
( and) 326.89 444.67 T
4 9.5 Q
(init-function:) 351.02 444.67 T
1 11 Q
( slot options.) 430.82 444.67 T
3 13 Q
(7.4.6  Summary of slot initialization techniques) 108 413.33 T
1 11 Q
(Ther) 108 393.67 T
(e ar) 130.56 393.67 T
(e four ways to pr) 148.23 393.67 T
(ovide an initial values for a slot:) 230.95 393.67 T
(Init keywor) 135 367.67 T
(ds) 191.47 367.67 T
(Y) 216 367.67 T
(ou can use the) 222.32 367.67 T
4 9.5 Q
(init-keyword:) 294.57 367.67 T
1 11 Q
( to declar) 368.67 367.67 T
(e an optional key-) 413.49 367.67 T
-0.29 (wor) 216 353.67 P
-0.29 (d ar) 235.33 353.67 P
-0.29 (gument, or) 254.16 353.67 P
4 9.5 Q
-0.6 (required-init-keyword:) 309.9 353.67 P
1 11 Q
-0.29 ( slot option to) 435.3 353.67 P
(declar) 216 339.67 T
(e a r) 245.72 339.67 T
(equir) 266.14 339.67 T
(ed keywor) 291.55 339.67 T
(d ar) 343.12 339.67 T
(gument for) 362.23 339.67 T
4 9.5 Q
(make) 419.47 339.67 T
1 11 Q
( when you) 442.27 339.67 T
(cr) 216 325.67 T
(eate an instance of the class. The value of the keywor) 225.03 325.67 T
(d) 481.54 325.67 T
(ar) 216 311.67 T
(gument becomes the value of the slot.) 225.65 311.67 T
(Default initial value) 135 285.67 T
(Y) 216 271.67 T
(ou can use the) 222.32 271.67 T
4 9.5 Q
(init-value:) 294.57 271.67 T
1 11 Q
( slot option to give a default) 357.27 271.67 T
(initial value for the slot. The slot r) 216 257.67 T
(eceives its default initial) 379.86 257.67 T
(value when no init keywor) 216 243.67 T
(d is de\336ned or when the caller) 346.69 243.67 T
(does not supply the init keywor) 216 229.67 T
(d ar) 370.71 229.67 T
(gument to) 389.83 229.67 T
4 9.5 Q
(make) 442.64 229.67 T
1 11 Q
(.) 465.44 229.67 T
(Init-function) 135 203.67 T
(Y) 216 203.67 T
(ou can use the) 222.32 203.67 T
4 9.5 Q
(init-function:) 294.57 203.67 T
1 11 Q
( slot option to pr) 374.37 203.67 T
(ovide a) 454.99 203.67 T
(function of zer) 216 189.67 T
(o ar) 286.86 189.67 T
(guments to be called to r) 305.27 189.67 T
(eturn a default) 424.86 189.67 T
-0.14 (initial value for the slot no init keywor) 216 175.67 P
-0.14 (d is de\336ned or when) 401.73 175.67 P
(the caller does not supply the init keywor) 216 161.67 T
(d ar) 417.87 161.67 T
(gument to) 436.99 161.67 T
4 9.5 Q
(make) 216 147.67 T
1 11 Q
(.) 238.8 147.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 97
%%Page: "96" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(96) 72 677.67 T
0 9.5 Q
(7.5 Class slots and each-subclass slots) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(Methods for) 135 640.67 T
4 9.5 Q
(initialize) 197.57 640.67 T
1 11 Q
(Y) 216 626.67 T
(ou can de\336ne a method for) 222.32 626.67 T
4 9.5 Q
(initialize) 355.78 626.67 T
1 11 Q
( for this class to) 412.78 626.67 T
(perform any actions to initialize the instance. The) 216 612.67 T
4 9.5 Q
(make) 458.4 612.67 T
1 11 Q
(function calls the) 216 598.67 T
4 9.5 Q
(initialize) 301.73 598.67 T
1 11 Q
( generic function after) 358.73 598.67 T
4 9.5 Q
(make) 468.36 598.67 T
1 11 Q
(cr) 216 584.67 T
(eates an instance and supplies what initial slot values it) 225.03 584.67 T
(can. If you need to do any complex computation to com-) 216 570.67 T
(pute and set the value of a slot, you can do that computa-) 216 556.67 T
(tion in an) 216 542.67 T
4 9.5 Q
(initialize) 264.95 542.67 T
1 11 Q
( method.) 321.95 542.67 T
3 15 Q
(7.5  Class slots and each-subclass slots) 108 503 T
1 11 Q
(Each slot has a particular kind of) 108 482.67 T
2 F
(allocation) 270.2 482.67 T
1 F
(. The allocation of a slot determines) 319.68 482.67 T
(wher) 108 468.67 T
(e the storage for the slot\325s value is allocated, and it determines which) 132.99 468.67 T
(instances shar) 108 454.67 T
(e the value of the slot. Ther) 176.04 454.67 T
(e ar) 307.57 454.67 T
(e four kinds of allocation:) 325.24 454.67 T
(Instance) 135 428.67 T
(Each instance allocates storage for the slot, and each) 216 428.67 T
(instance of the class that de\336nes the slot has its own value) 216 414.67 T
(for the slot. Changing a slot in one instance does not af) 216 400.67 T
(fect) 481.43 400.67 T
(the value of the same slot in a dif) 216 386.67 T
(fer) 376.09 386.67 T
(ent instance. Instance) 389.17 386.67 T
(allocation is the default, and is the most commonly used) 216 372.67 T
(kind of allocation.) 216 358.67 T
(V) 135 332.67 T
(irtual) 142.34 332.67 T
(No storage is allocated for the slot. Y) 216 332.67 T
(ou must pr) 393.42 332.67 T
(ovide a get-) 446.91 332.67 T
(ter method that computes the value of the virtual slot.) 216 318.67 T
(Class) 135 292.67 T
(The class that de\336nes the slot allocates storage for the slot.) 216 292.67 T
(Instances of the class that de\336nes the slot and all its sub-) 216 278.67 T
(classes see the same value for the slot. That is, all general) 216 264.67 T
(instances of the class shar) 216 250.67 T
(e the value for the slot.) 340.12 250.67 T
(Each-subclass) 135 224.67 T
(The class that de\336nes the slot and each of its subclasses) 216 224.67 T
(allocate storage for the slot. Thus, if the class that de\336nes) 216 210.67 T
(the slot has four subclasses, the slot is allocated in \336ve) 216 196.67 T
(places. All the dir) 216 182.67 T
(ect instances of each class shar) 301.42 182.67 T
(e a value) 448.83 182.67 T
(for the slot.) 216 168.67 T
(W) 108 148.67 T
(e can give an example of an each-subclass slot by de\336ning the) 117.99 148.67 T
4 9.5 Q
(<vehicle>) 420.25 148.67 T
1 11 Q
( class:) 471.55 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 98
%%Page: "97" 99
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(7 More on Slots) 458.55 677.67 T
2 11 Q
(97) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <vehicle> \050<physical-object>\051) 124.2 642 T
6 F
(// Every vehicle has a unique identif) 118.8 631 T
(ication code) 318.6 631 T
4 F
(slot vehicle-id) 118.8 620 T
( :: <string>, required-init-keyword: id:;) 297 620 T
6 F
(// How much fuel is left in the fuel tank) 118.8 609 T
4 F
(slot fuel-remaining) 118.8 598 T
(:: <integer>,) 302.4 598 T
(init-keyword: fuel-remaining:,) 318.6 587 T
(init-value: 0;) 318.6 576 T
6 F
(// The normal operating speed of this class of vehicle) 118.8 565 T
4 F
(each-subclass slot cruising-speed :: <integer>;) 118.8 554 T
(end;) 108 543 T
1 11 Q
(The slot) 108 522.67 T
4 9.5 Q
(cruising-speed) 149.37 522.67 T
1 11 Q
( is de\336ned with the) 229.17 522.67 T
4 9.5 Q
(each-subclass) 325.44 522.67 T
1 11 Q
( slot allocation. W) 399.54 522.67 T
(e) 485.48 522.67 T
(use each-subclass allocation to expr) 108 508.67 T
(ess that, for example, all instances of Boeing) 280.36 508.67 T
(747 air) 108 494.67 T
(craft shar) 140.1 494.67 T
(e a particular cr) 185.54 494.67 T
(uising speed, all instances of McDonnell Douglas) 261.51 494.67 T
(MD-80 air) 108 480.67 T
(craft shar) 157.18 480.67 T
(e a particular cr) 202.62 480.67 T
(uising speed, but the speed of one 747 need) 278.59 480.67 T
(not be the same as the speed of an MD-80.) 108 466.67 T
3 15 Q
(7.6  Summary) 108 427 T
1 11 Q
(This chapter cover) 108 406.67 T
(ed:) 197.63 406.67 T
(\245) 117 386.67 T
(W) 135 386.67 T
(e discussed getter and setter methods, in particular) 144.99 386.67 T
(, the syntaxes for call-) 392.15 386.67 T
(ing getters and setters, the name of a setter) 135 372.67 T
(, and de\336ning a setter method.) 341.52 372.67 T
(\245) 117 352.67 T
(W) 135 352.67 T
(e showed how you can use symbols instead of strings.) 144.99 352.67 T
(\245) 117 332.67 T
(W) 135 332.67 T
(e discussed techniques for initializing slots: init keywor) 144.99 332.67 T
(ds \050which can be) 414.21 332.67 T
(optional or r) 135 318.67 T
(equir) 195.51 318.67 T
(ed\051, default initial values, init functions, and) 220.92 318.67 T
4 9.5 Q
(initialize) 438.88 318.67 T
1 11 Q
(methods.) 135 304.67 T
(\245) 117 284.67 T
(W) 135 284.67 T
(e showed how you can override the default initial value or init function) 144.99 284.67 T
(of an inherited slot.) 135 270.67 T
(\245) 117 250.67 T
(W) 135 250.67 T
(e discussed the dif) 144.99 250.67 T
(fer) 234.57 250.67 T
(ent kinds of slot allocation: instance \050the default\051,) 247.65 250.67 T
(virtual, class, and each-subclass.) 135 236.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 99
%%Page: "98" 100
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(98) 72 677.67 T
0 9.5 Q
(7.6 Summary) 92.5 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 100
%%Page: "99" 101
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(99) 300.5 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(8) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(8) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Simple Collections and) 109 566.45 T
(Contr) 108 536.45 T
(ol Flow) 184.2 536.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we intr) 177.24 424.67 T
(oduce collections and contr) 217.27 424.67 T
(ol \337ow operators. A) 349.99 424.67 T
2 F
(collection) 449.7 424.67 T
1 F
(is an object used to hold one or mor) 108 410.67 T
(e objects. Dylan pr) 281.27 410.67 T
(ovides the usual kinds of) 371.1 410.67 T
(collections, including arrays, vectors, strings, singly linked lists, queues, hash) 108 396.67 T
(tables, and so on. In this chapter) 108 382.67 T
(, we illustrate several useful data types as we) 263.75 382.67 T
(develop the airport example, including strings, lists, and vectors.) 108 368.67 T
-0.4 (In Dylan, a collection is an instance of a class. For example, the) 135 354.67 P
4 9.5 Q
-0.83 (<array>) 436.49 354.67 P
1 11 Q
-0.4 ( class) 476.39 354.67 P
-0.43 (r) 108 340.67 P
-0.43 (epr) 112.15 340.67 P
-0.43 (esents arrays, and the) 128.17 340.67 P
4 9.5 Q
-0.89 (<vector>) 234.4 340.67 P
1 11 Q
-0.43 ( class r) 280 340.67 P
-0.43 (epr) 311.7 340.67 P
-0.43 (esents vectors. The) 327.73 340.67 P
4 9.5 Q
-0.89 (<vector>) 420.67 340.67 P
1 11 Q
-0.43 ( class is) 466.27 340.67 P
(a subclass of) 108 326.67 T
4 9.5 Q
(<array>) 171.71 326.67 T
1 11 Q
(. Y) 211.61 326.67 T
(ou can call) 223.44 326.67 T
4 9.5 Q
(make) 277.9 326.67 T
1 11 Q
( to cr) 300.7 326.67 T
(eate a new collection, and you call) 324.82 326.67 T
(generic functions to operate on a collection. In addition to using the built-in col-) 108 312.67 T
(lection classes, you can de\336ne new collection classes.) 108 298.67 T
(Contr) 135 284.67 T
(ol \337ow operators enable you to alter the natural or) 162.94 284.67 T
(der of statement) 407.65 284.67 T
(execution, including performing iteration. One useful form of iteration is to per-) 108 270.67 T
(form computations on each element of a collection. W) 108 256.67 T
(e show the use of) 368.24 256.67 T
4 9.5 Q
(for) 454.99 256.67 T
1 11 Q
(,) 471.28 256.67 T
4 9.5 Q
-0.12 (while) 108 242.67 P
1 11 Q
-0.05 (,) 136.5 242.67 P
4 9.5 Q
-0.12 (do) 141.95 242.67 P
1 11 Q
-0.05 (, and the) 153.34 242.67 P
4 9.5 Q
-0.12 (if) 198.06 242.67 P
1 11 Q
-0.05 (-) 209.46 242.67 P
4 9.5 Q
-0.12 (elseif) 213.12 242.67 P
1 11 Q
-0.05 (-) 247.32 242.67 P
4 9.5 Q
-0.12 (else) 250.98 242.67 P
1 11 Q
-0.05 ( constr) 273.78 242.67 P
-0.05 (uct in this chapter) 306.28 242.67 P
-0.05 (. W) 392.7 242.67 P
-0.05 (e also show) 408.14 242.67 P
4 9.5 Q
-0.12 (select) 467.11 242.67 P
1 11 Q
(and) 108 228.67 T
4 9.5 Q
(block) 129.37 228.67 T
1 11 Q
(.) 157.87 228.67 T
3 15 Q
(8.1  Built-in collection classes) 108 189 T
1 11 Q
(Figur) 108 168.67 T
(e 8.1 shows the most useful collection classes, and omits the classes that ar) 134.21 168.67 T
(e) 494.03 168.67 T
(not used dir) 108 154.67 T
(ectly) 166.85 154.67 T
(.) 188.68 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 101
%%Page: "100" 102
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(100) 72 677.67 T
0 9.5 Q
(8.1 Built-in collection classes) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 445.58 522 453.57 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 218.46 457.24 T
(e 8.1  Built-in collection classes) 244.68 457.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(A collection holds a gr) 108 425.25 T
(oup of objects, called values, each indexed by a key) 216.96 425.25 T
(. If you) 464.74 425.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 108 411.25 T
(e familiar with hash tables, you know that a table associates a key with a value) 117.65 411.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(such that you can r) 108 397.25 T
(etrieve each value ef) 200.35 397.25 T
(\336ciently fr) 299.36 397.25 T
(om the table given its corr) 349.23 397.25 T
(e-) 475.63 397.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sponding key) 108 383.25 T
(. Each class of collection can have dif) 173.15 383.25 T
(fer) 351.44 383.25 T
(ent r) 364.52 383.25 T
(estrictions on keys or) 386.67 383.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(values.) 108 369.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Sequences ar) 135 355.25 T
(e an important subclass of collections. Sequences r) 197.72 355.25 T
(estrict their) 441.58 355.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(keys to be whole numbers \050integers\051 starting at zer) 108 341.25 T
(o, and incr) 353.85 341.25 T
(easing by one for) 405.36 341.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(each additional value in the collection. V) 108 327.25 T
(ectors, strings, and lists ar) 304.38 327.25 T
(e sequences.) 430.2 327.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.34 (The class) 135 313.25 P
4 9.5 Q
-0.71 (<byte-string>) 181.14 313.25 P
1 11 Q
-0.34 ( is a subclass of) 255.24 313.25 P
4 9.5 Q
-0.71 (<string>) 330.6 313.25 P
1 11 Q
-0.34 (. The) 376.2 313.25 P
4 9.5 Q
-0.71 (<byte-string>) 402.17 313.25 P
1 11 Q
-0.34 ( class) 476.27 313.25 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(has a mor) 108 299.25 T
(e ef) 155.43 299.25 T
(\336cient implementation than) 172.18 299.25 T
4 9.5 Q
(<string>) 309.98 299.25 T
1 11 Q
(, but) 355.58 299.25 T
4 9.5 Q
(<byte-string>) 380.13 299.25 T
1 11 Q
( can hold) 454.23 299.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(only those characters that ar) 108 285.25 T
(e r) 244.75 285.25 T
(epr) 256.92 285.25 T
(esented with a single byte. Other strings, for) 272.95 285.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.01 (example those r) 108 271.25 P
-0.01 (epr) 184.78 271.25 P
-0.01 (esenting international character sets, need mor) 200.81 271.25 P
-0.01 (e than one byte) 427.17 271.25 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(per character) 108 257.25 T
(.) 170.88 257.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.06 (The class) 135 243.25 P
4 9.5 Q
-0.12 (<simple-object-vector>) 181.71 243.25 P
1 11 Q
-0.06 ( is mor) 307.11 243.25 P
-0.06 (e speci\336c than) 340.22 243.25 P
4 9.5 Q
-0.12 (<vector>) 411.61 243.25 P
1 11 Q
-0.06 (, and it is) 457.21 243.25 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(sealed) 108 229.25 T
1 F
(, so it should pr) 139.77 229.25 T
(ovide higher performance than) 215.36 229.25 T
4 9.5 Q
(<vector>) 369.4 229.25 T
1 11 Q
(. See Chapter 12) 415 229.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(for information about sealing. Instances of) 108 215.25 T
4 9.5 Q
(<simple-object-vector>) 316.2 215.25 T
1 11 Q
( may hold) 441.6 215.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.1 (any Dylan instance. Y) 108 201.25 P
-0.1 (ou specify the size of a) 212.67 201.25 P
4 9.5 Q
-0.22 (<simple-object-vector>) 324.66 201.25 P
1 11 Q
-0.1 ( when you) 450.06 201.25 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(cr) 108 187.25 T
(eate one, and you cannot be change the size later) 117.03 187.25 T
(. Y) 352.89 187.25 T
(ou can use the) 364.72 187.25 T
4 9.5 Q
(<stretchy-) 436.97 187.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(vector>) 108 173.25 T
1 11 Q
( class for vectors that can change in size.) 147.9 173.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
124.71 473.57 505.29 637 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<collection>) 249.93 623.57 T
(<sequence>) 347.79 590.74 T
(<range>) 450.64 557.15 T
(<deque>) 344.22 557.15 T
(<string>) 284.21 557.15 T
(<vector>) 227.79 557.15 T
(<array>) 222.07 590.74 T
(<table>) 134.21 590.74 T
(<stretchy-vector>) 134.21 520.73 T
(<simple-object-vector>) 137.79 493.57 T
(<unicode-string>) 268.84 493.57 T
(<byte-string>) 371.36 493.57 T
(<list>) 402.07 557.15 T
(<pair>) 370.64 532.88 T
(<empty-list>) 417.79 532.88 T
169.33 599.9 157.43 601.43 168.33 606.44 168.83 603.17 4 Y
V
265.29 617.86 168.83 603.16 2 L
0.5 H
2 Z
N
365.9 608.77 376.71 603.57 364.79 602.25 365.34 605.51 4 Y
V
288.86 618.57 365.35 605.51 2 L
N
253.3 600.28 241.71 597.14 249.88 605.94 251.59 603.11 4 Y
V
276 617.86 251.59 603.11 2 L
N
248.03 576.7 250.71 565 242.24 573.5 245.14 575.1 4 Y
V
239.29 585.71 245.14 575.1 2 L
N
269.39 564.71 257.43 565.71 268.1 571.2 268.74 567.96 4 Y
V
351 584.29 268.74 567.96 2 L
N
455.68 571.85 465.99 565.72 453.99 565.46 454.84 568.66 4 Y
V
387.43 586.43 454.85 568.65 2 L
N
406.57 575.38 414.57 566.43 403.05 569.78 404.81 572.58 4 Y
V
381.72 587.14 404.82 572.58 2 L
N
335.68 568.46 323.85 566.43 332.81 574.42 334.24 571.44 4 Y
V
363.86 585.71 334.25 571.44 2 L
N
371.71 574.79 363.85 565.72 365.71 577.57 368.71 576.18 4 Y
V
373.14 585.71 368.72 576.18 2 L
N
197.97 530.12 186 529.29 195.71 536.34 196.84 533.23 4 Y
V
248.86 552.14 196.84 533.23 2 L
N
310.74 514.39 307.43 502.86 304.12 514.39 307.43 514.39 4 Y
V
307.43 550.71 307.43 514.39 2 L
N
399.4 508.22 408.14 500 396.37 502.34 397.89 505.28 4 Y
V
311 550 397.89 505.28 2 L
N
233.03 511.36 224.57 502.86 227.24 514.56 230.14 512.96 4 Y
V
251.71 552.14 230.14 512.96 2 L
N
289.33 512.54 293.86 501.43 284.13 508.46 286.73 510.5 4 Y
V
254.57 551.43 286.73 510.5 2 L
N
375.06 510.18 384.57 502.86 372.63 504.02 373.84 507.1 4 Y
V
258.14 552.86 373.85 507.1 2 L
N
405.04 542.98 393.14 541.43 402.41 549.05 403.73 546.02 4 Y
V
414.57 550.71 403.73 546.01 2 L
N
438.65 549.17 448.86 542.86 436.86 542.8 437.76 545.99 4 Y
V
421 550.71 437.76 545.99 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 102
%%Page: "101" 103
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 365.77 677.67 T
2 11 Q
(101) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(8.2  Basic use of collections) 108 638 T
1 11 Q
(In the following sections, we show how to cr) 108 617.67 T
(eate collections, and how to access) 324.66 617.67 T
(the elements of a collection.) 108 603.67 T
3 13 Q
(8.2.1  Use of strings) 108 572.33 T
1 11 Q
(First, we cr) 108 552.67 T
(eate a variable containing a string:) 161.64 552.67 T
5 9 Q
(?) 108 532 T
4 F
(def) 118.8 532 T
(ine variable *greeting* = "Hello, world.";) 135 532 T
5 F
(?) 108 513 T
4 F
(*greeting*;) 118.8 513 T
5 F
("Hello, world.") 108 502 T
1 11 Q
(Now we can access elements of the string:) 108 481.67 T
5 9 Q
(?) 108 461 T
4 F
(*greeting*[0];) 118.8 461 T
5 F
(\325H\325) 108 450 T
(?) 108 431 T
4 F
(*greeting*[1];) 118.8 431 T
5 F
(\325e\325) 108 420 T
1 11 Q
(The syntax) 108 399.67 T
4 9.5 Q
(*greeting*[) 163.86 399.67 T
0 11 Q
(n) 226.56 399.67 T
4 9.5 Q
(]) 232.67 399.67 T
1 11 Q
( r) 238.37 399.67 T
(efers to the) 245.27 399.67 T
0 F
(n) 301.58 399.67 T
1 F
(th element of the string in) 307.7 399.67 T
4 9.5 Q
(*greeting*.) 435.74 399.67 T
1 11 Q
(In general, you can use this syntax to access any element of any collection.) 108 385.67 T
(W) 135 371.67 T
(e use the assignment operator to change an element of a string:) 144.99 371.67 T
5 9 Q
(?) 108 351 T
4 F
(*greeting* := copy-sequence \050*greeting*\051;) 118.8 351 T
5 F
("Hello, world.") 108 340 T
(?) 108 321 T
4 F
(*greeting*[0] :=) 118.8 321 T
5 F
(') 210.6 321 T
4 F
(j) 216 321 T
5 F
(') 221.4 321 T
4 F
(;) 226.8 321 T
5 F
(\325j\325) 108 310 T
(?) 108 291 T
4 F
(*greeting*;) 118.8 291 T
5 F
("jello, world.") 108 280 T
1 11 Q
(W) 108 259.67 T
(e copied the gr) 117.99 259.67 T
(eeting \336rst befor) 189.72 259.67 T
(e modifying it because it is an err) 269.48 259.67 T
(or to modify a) 430.54 259.67 T
(pr) 108 245.67 T
(ogram literal.) 118.76 245.67 T
3 13 Q
(8.2.2  Use of vectors) 108 214.33 T
1 11 Q
(Ther) 108 194.67 T
(e ar) 130.56 194.67 T
(e two ways to cr) 148.23 194.67 T
(eate collections. The \336rst way is to cr) 227.34 194.67 T
(eate a collection) 405.21 194.67 T
(without initializing it by using) 108 180.67 T
4 9.5 Q
(make.) 259.05 180.67 T
1 11 Q
( For example, her) 287.55 180.67 T
(e we cr) 372.08 180.67 T
(eate a vector:) 406.32 180.67 T
5 9 Q
(?) 108 160 T
4 F
(def) 118.8 160 T
(ine variable *my-vector* = make \050<vector>, size: 2\051;) 135 160 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 103
%%Page: "102" 104
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(102) 72 677.67 T
0 9.5 Q
(8.2 Basic use of collections) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
-0.32 (The pr) 108 640.67 P
-0.32 (eceding statement cr) 139.6 640.67 P
-0.32 (eates an empty vector with two elements. W) 238.93 640.67 P
-0.32 (e can stor) 450.98 640.67 P
-0.32 (e) 496.3 640.67 P
(elements into it:) 108 626.67 T
5 9 Q
(?) 108 606 T
4 F
(*my-vector*[0] := 5;) 118.8 606 T
5 F
(?) 108 595 T
4 F
(*my-vector*[1] := 3;) 118.8 595 T
5 F
(?) 108 584 T
4 F
(*my-vector*;) 118.8 584 T
5 F
(#[5 3]) 108 573 T
1 11 Q
(The second way to cr) 108 552.67 T
(eate a collection is to cr) 210.77 552.67 T
(eate and initialize it at the same time:) 322.77 552.67 T
5 9 Q
(?) 108 532 T
4 F
(def) 118.8 532 T
(ine variable *my-vector* = #[5, 3];) 135 532 T
5 F
(?) 108 521 T
4 F
(*my-vector*;) 118.8 521 T
5 F
(#[5 3]) 108 510 T
1 11 Q
(Figur) 108 489.67 T
(e 8.2 shows how you can pictur) 134.21 489.67 T
(e the vector we just cr) 286.83 489.67 T
(eated.) 392.34 489.67 T
0 0 0 1 0 0 0 K
108 401.01 522 409 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 204.75 412.67 T
(e 8.2  Diagram of the vector) 230.96 412.67 T
4 9.5 Q
(#[5, 3]) 367.35 412.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(8.2.3  Use of lists) 108 375.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Lists ar) 108 355.67 T
(e similar in purpose to vectors: each one can stor) 143.23 355.67 T
(e an or) 379.05 355.67 T
(der) 411.88 355.67 T
(ed sequence of) 428.01 355.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(objects. Lists dif) 108 341.67 T
(fer fr) 185.54 341.67 T
(om vectors in that it is easy to add and r) 209.38 341.67 T
(emove elements) 403.75 341.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(fr) 108 327.67 T
(om lists, especially at the fr) 115.81 327.67 T
(ont. In general, if the number of elements in a) 247.41 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence will r) 108 313.67 T
(emain constant, lists ar) 180.97 313.67 T
(e less ef) 292.05 313.67 T
(\336cient than vectors.) 329.35 313.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Each element of a list is stor) 135 299.67 T
(ed in a pair) 269.8 299.67 T
(. Pairs have two parts, a head and a) 323.99 299.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tail. T) 108 285.67 T
(ypically the head of a pair points to an element, and the tail points to the) 134.74 285.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(pair that holds the next element of the list. T) 108 271.67 T
(ypically) 321.45 271.67 T
(, the \336nal tail of the list is the) 359.06 271.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (empty list, r) 108 257.67 P
-0.28 (epr) 165.79 257.67 P
-0.28 (esented by) 181.82 257.67 P
4 9.5 Q
-0.57 (#\050\051) 236.15 257.67 P
1 11 Q
-0.28 (. Elements of unr) 253.24 257.67 P
-0.28 (estricted lists can contain any kind) 335.09 257.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of object, including, of course, lists.) 108 243.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.12 (The) 135 229.67 P
4 9.5 Q
-0.25 (list) 156.04 229.67 P
1 11 Q
-0.12 ( function cr) 178.84 229.67 P
-0.12 (eates a list whose elements ar) 233.91 229.67 P
-0.12 (e the ar) 376.03 229.67 P
-0.12 (guments pr) 411.47 229.67 P
-0.12 (ovided) 467.24 229.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(to) 108 215.67 T
4 9.5 Q
(list) 120.34 215.67 T
1 11 Q
(.) 143.14 215.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 9 Q
(?) 108 195.01 T
4 F
( list \0504, 5, 6\051;) 113.4 195.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
5 F
(#\0504, 5, 6\051) 108 184.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Figur) 108 163.67 T
(e 8.3 shows how you can pictur) 134.21 163.67 T
(e the list we just cr) 286.83 163.67 T
(eated.) 376.69 163.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
248.05 429 381.95 472 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(5) 291.45 454.44 T
(3) 330.16 454.44 T
312.16 470 276.16 470 276.16 443 312.16 443 4 Y
0.5 H
2 Z
N
348.16 470 312.16 470 312.16 443 348.16 443 4 Y
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 104
%%Page: "103" 105
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 365.77 677.67 T
2 11 Q
(103) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 546.01 522 554 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 204.03 557.67 T
(e 8.3  Diagram of the list) 230.24 557.67 T
4 9.5 Q
(#[4, 5, 6]) 350.97 557.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(8.3  The) 108 512.01 T
4 13 Q
(for) 157.23 512.01 T
3 15 Q
( function) 180.63 512.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(In the examples in the following sections, we show how to use the) 108 491.67 T
4 9.5 Q
(for) 431.96 491.67 T
1 11 Q
( contr) 449.06 491.67 T
(ol) 476.84 491.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(\337ow operator) 108 477.67 T
(.) 173.47 477.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(8.3.1  De\336nition of the class) 108 446.34 T
4 F
(<gate>) 251.38 446.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(One of the main tasks of the application is to schedule gates. Her) 108 426.67 T
(e we de\336ne a) 422.17 426.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(class that r) 108 412.67 T
(epr) 159.63 412.67 T
(esents gates:) 175.66 412.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 108 392.01 T
(ine class <gate> \050<physical-object>\051) 124.2 392.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot gate-id) 113.4 381.01 T
(:: <string>, init-keyword: id:;) 216 381.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// How large a plane will f) 113.4 370.01 T
(it at this gate?) 259.2 370.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(slot gate-capacity :: <size>,) 113.4 359.01 T
( init-keyword: capacity:;) 280.8 359.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 348.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The) 108 327.67 T
4 9.5 Q
(<gate>) 129.16 327.67 T
1 11 Q
( class r) 163.36 327.67 T
(epr) 195.92 327.67 T
(esents a gate as having an identi\336er \050the gate-id\051, and stor-) 211.95 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.28 (ing the size of plane that can be accommodated at this particular gate. A gate-id is) 108 313.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(a letter followed by a number) 108 299.67 T
(, such as) 251.08 299.67 T
4 9.5 Q
("A2") 294.82 299.67 T
1 11 Q
(.) 317.62 299.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(For completeness, we de\336ne a) 135 285.67 T
4 9.5 Q
(say) 283.76 285.67 T
1 11 Q
( method on) 300.86 285.67 T
4 9.5 Q
(<gate>) 359.22 285.67 T
1 11 Q
(:) 393.42 285.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 108 265.01 T
(ine method say \050object :: <gate>\051) 124.2 265.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(format \050*window*, "Gate %s", object.gate-id\051;) 118.8 254.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 243.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(8.3.2) 108 213.34 T
(Use of) 137.64 213.34 T
4 F
(for) 173.18 213.34 T
3 F
( to generate gates) 196.58 213.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
-0.29 (W) 108 193.67 P
-0.29 (e could cr) 117.99 193.67 P
-0.29 (eate each gate by hand \050using) 164.65 193.67 P
4 9.5 Q
-0.6 (make) 309.48 193.67 P
1 11 Q
-0.29 ( r) 332.28 193.67 P
-0.29 (epeatedly\051, but, for a lar) 338.88 193.67 P
-0.29 (ge airport) 454.1 193.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(such as Los Angeles International or Chicago\325s O\325Har) 108 179.67 T
(e, that would be a lot of) 368.46 179.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(work. Instead, we can write a pr) 108 165.67 T
(ogram to help cr) 264.55 165.67 T
(eate all the gates. T) 344.59 165.67 T
(o start, we) 435.99 165.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.15 (show how to cr) 108 151.67 P
-0.15 (eate the gate instances and use) 182.26 151.67 P
4 9.5 Q
-0.3 (say) 333 151.67 P
1 11 Q
-0.15 ( to print the r) 350.1 151.67 P
-0.15 (esults. Eventually) 413.65 151.67 P
-0.15 (,) 498.65 151.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
167.57 574 462.43 637 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(4) 200.86 608.45 T
221.57 624.01 185.57 624.01 185.57 597.01 221.57 597.01 4 Y
0.5 H
2 Z
N
257.57 624.01 221.57 624.01 221.57 597.01 257.57 597.01 4 Y
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
265.96 612.34 275.57 609.58 265.96 606.82 266.96 609.58 4 Y
V
239.57 609.58 266.96 609.58 2 L
N
(5) 290.86 608.45 T
311.57 624.01 275.57 624.01 275.57 597.01 311.57 597.01 4 Y
N
347.57 624.01 311.57 624.01 311.57 597.01 347.57 597.01 4 Y
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(6) 380.86 608.45 T
(#\050\051) 410.57 608.6 T
401.57 624.01 365.57 624.01 365.57 597.01 401.57 597.01 4 Y
N
437.57 624.01 401.57 624.01 401.57 597.01 437.57 597.01 4 Y
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
355.39 612.19 365 609.44 355.39 606.68 356.39 609.44 4 Y
V
329 609.44 356.39 609.44 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 105
%%Page: "104" 106
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(104) 72 677.67 T
0 9.5 Q
(8.3 The for function) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(we need to stor) 108 640.67 T
(e the gate instances in the appr) 182.35 640.67 T
(opriate slot of the) 332.15 640.67 T
4 9.5 Q
(<airport>) 420.05 640.67 T
1 11 Q
( class.) 471.35 640.67 T
(W) 108 626.67 T
(e implement the latter step in Section 8.5.) 117.99 626.67 T
(Her) 135 612.67 T
(e is an example of the output we would like our pr) 153.57 612.67 T
(ototype gate genera-) 399.78 612.67 T
(tor to pr) 108 598.67 T
(oduce:) 147.79 598.67 T
5 9 Q
(?) 108 578 T
4 F
(generate-gates \0502, 3\051;) 118.8 578 T
5 F
(Gate A1) 108 567 T
(Gate A2) 108 556 T
(Gate A3) 108 545 T
(Gate B1) 108 534 T
(Gate B2) 108 523 T
(Gate B3) 108 512 T
1 11 Q
(The \336rst ar) 108 491.67 T
(gument to) 160.81 491.67 T
4 9.5 Q
(generate-gates) 213.62 491.67 T
1 11 Q
( is the number of terminals at the airport,) 293.42 491.67 T
(and the second ar) 108 477.67 T
(gument is the number of gates per terminal. T) 193.72 477.67 T
(o keep our pr) 415.74 477.67 T
(oto-) 481 477.67 T
(type simple, we assume that every terminal has the same number of gates. W) 108 463.67 T
(e) 482.09 463.67 T
(shall make this model mor) 108 449.67 T
(e \337exible later) 237.2 449.67 T
(.) 304.44 449.67 T
-0.06 (First we de\336ne a helper method that describes an object using) 135 435.67 P
4 9.5 Q
-0.13 (say) 437.02 435.67 P
1 11 Q
-0.06 (, and then) 452.9 435.67 P
(prints a newline character:) 108 421.67 T
4 9 Q
(def) 108 401 T
(ine method say-line \050object\051) 124.2 401 T
(say \050object\051;) 118.8 390 T
(format \050*window*, \322\134n\323\051;) 118.8 379 T
(end;) 108 368 T
1 11 Q
(Now we de\336ne our pr) 108 347.67 T
(ototype) 215.82 347.67 T
4 9.5 Q
(generate-gates) 255.75 347.67 T
1 11 Q
( method:) 335.55 347.67 T
4 9 Q
(def) 108 327 T
(ine method generate-gates \050number-of-terminals :: <integer>,) 124.2 327 T
(gates-per-terminal :: <integer>\051) 270 316 T
(for \050term :: <integer> from 0 below number-of-terminals\051) 118.8 305 T
(for \050gate :: <integer> from 1 to gates-per-terminal\051) 129.6 294 T
(say-line \050make\050<gate>, id: generate-gate-id \050term, gate\051\051\051;) 140.4 283 T
(format \050*window*, "\134n"\051;) 140.4 272 T
(end;) 129.6 261 T
(end;) 118.8 250 T
(end;) 108 239 T
1 11 Q
(The) 108 218.67 T
4 9.5 Q
(for) 129.16 218.67 T
1 11 Q
( special form has several variations. The pr) 146.26 218.67 T
(eceding method de\336nition) 354.14 218.67 T
(shows the simplest form of) 108 204.67 T
4 9.5 Q
(for) 242.22 204.67 T
1 11 Q
(. The local iteration variables) 258.51 204.67 T
4 9.5 Q
(term) 401.29 204.67 T
1 11 Q
( and) 424.09 204.67 T
4 9.5 Q
(gate) 448.21 204.67 T
1 11 Q
( ar) 471.01 204.67 T
(e) 483.41 204.67 T
(initialized to the integers) 108 190.67 T
4 9.5 Q
(0) 231.68 190.67 T
1 11 Q
( and) 237.38 190.67 T
4 9.5 Q
(1) 261.51 190.67 T
1 11 Q
( r) 267.21 190.67 T
(espectively) 274.1 190.67 T
(. These variables ar) 327.17 190.67 T
(e incr) 420.14 190.67 T
(emented) 446.79 190.67 T
-0.06 (each time thr) 108 176.67 P
-0.06 (ough the loop until they r) 171.34 176.67 P
-0.06 (each their boundaries, which ar) 295.56 176.67 P
-0.06 (e pr) 448.46 176.67 P
-0.06 (ovided) 467.18 176.67 P
(as ar) 108 162.67 T
(guments to) 130.56 162.67 T
4 9.5 Q
(generate-gates) 188.04 162.67 T
1 11 Q
(. The body of the inner) 267.84 162.67 T
4 9.5 Q
(for) 380.97 162.67 T
1 11 Q
( loop is executed) 398.07 162.67 T
4 9.5 Q
(gates-per-terminal) 108 148.67 T
1 11 Q
( times per iteration of the outer loop. The body of the inner) 210.6 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 106
%%Page: "105" 107
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 365.77 677.67 T
2 11 Q
(105) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9.5 Q
0 X
(for) 108 640.67 T
1 11 Q
( loop cr) 125.1 640.67 T
(eates instances of) 161.46 640.67 T
4 9.5 Q
(<gate>) 248.23 640.67 T
1 11 Q
(, and initializes the) 282.43 640.67 T
4 9.5 Q
(gate-id) 376.99 640.67 T
1 11 Q
( slot to the value) 416.89 640.67 T
(r) 108 626.67 T
(eturned by) 112.15 626.67 T
4 9.5 Q
(generate-gate-id) 168.07 626.67 T
1 11 Q
(. The body of the outer loop is executed) 259.27 626.67 T
4 9.5 Q
(number-) 453.87 626.67 T
(of-terminal) 108 612.67 T
1 11 Q
( times.) 170.7 612.67 T
3 15 Q
(8.4  Three approaches to) 108 573 T
4 13 Q
(generate-gate-id) 256.35 573 T
1 11 Q
-0.32 (In the following sections, we show thr) 108 552.67 P
-0.32 (ee appr) 291.15 552.67 P
-0.32 (oaches to generating the gate-id and) 326.98 552.67 P
(illustrate the use of strings,) 108 538.67 T
4 9.5 Q
(while) 242.16 538.67 T
1 11 Q
(, a list, pr) 270.66 538.67 T
(edicates,) 315.32 538.67 T
4 9.5 Q
(as) 359.91 538.67 T
1 11 Q
(, and \336nally) 371.31 538.67 T
4 9.5 Q
(format-to-) 432.01 538.67 T
(string) 108 524.67 T
1 11 Q
(. Each appr) 142.2 524.67 T
(oach is an impr) 196.83 524.67 T
(ovement on the pr) 271.31 524.67 T
(evious appr) 360.44 524.67 T
(oach, so keep) 418.05 524.67 T
(r) 108 510.67 T
(eading!) 112.15 510.67 T
3 13 Q
(8.4.1  First approach \321 using strings) 108 479.33 T
1 11 Q
(T) 108 459.67 T
(o pr) 113.73 459.67 T
(oduce the gate-id, we must translate) 133.24 459.67 T
4 9.5 Q
(term) 312.41 459.67 T
1 11 Q
( \050an integer\051 into a letter) 335.21 459.67 T
(, and pr) 451.52 459.67 T
(o-) 489.15 459.67 T
(duce a string with the \336rst element containing this letter) 108 445.67 T
(, followed by the charac-) 379.64 445.67 T
(ters that r) 108 431.67 T
(epr) 154.59 431.67 T
(esent the gate number) 170.61 431.67 T
(. The following code pr) 277.41 431.67 T
(oduces a gate-id:) 390.18 431.67 T
6 9 Q
(// Def) 108 411 T
(ine some constants which map integers to characters for) 140.4 411 T
(// uppercase letters and numbers.) 108 400 T
4 F
(def) 108 389 T
(ine constant $letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";) 124.2 389 T
(def) 108 378 T
(ine constant $digits = "0123456789";) 124.2 378 T
(def) 108 359 T
(ine method generate-gate-id \050term :: <integer>, gate :: <integer>\051) 124.2 359 T
(let result = make\050<string>, size: 2\051;) 118.8 348 T
(result[0] := $letters[term];) 118.8 337 T
(result[1] := $digits[gate];) 118.8 326 T
(result;) 118.8 315 T
(end;) 108 304 T
1 11 Q
(Her) 108 283.67 T
(e we show what) 126.57 283.67 T
4 9.5 Q
(generate-gate-id) 208.19 283.67 T
1 11 Q
( r) 299.39 283.67 T
(eturns for certain ar) 306.29 283.67 T
(guments:) 402.28 283.67 T
5 9 Q
(?) 108 263 T
4 F
(generate-gate-id \0500, 1\051;) 118.8 263 T
5 F
("A1") 108 252 T
(?) 108 233 T
4 F
(generate-gate-id \0501, 5\051;) 118.8 233 T
5 F
("B5") 108 222 T
1 11 Q
(Note that terminals ar) 108 201.67 T
(e number) 214.85 201.67 T
(ed starting at zer) 261.12 201.67 T
(o, but gates ar) 342.76 201.67 T
(e typically num-) 410.85 201.67 T
(ber) 108 187.67 T
(ed starting at one.) 123.5 187.67 T
(T) 135 173.67 T
(o implement this simple gate-id generator) 140.73 173.67 T
(, \336rst we de\336ne two constant) 344.04 173.67 T
(strings. The) 108 159.67 T
4 9.5 Q
($letters) 167.64 159.67 T
1 11 Q
( constant is initialized to) 213.24 159.67 T
4 9.5 Q
("ABC...Z") 334.46 159.67 T
1 11 Q
(, a string containing all) 385.76 159.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 107
%%Page: "106" 108
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(106) 72 677.67 T
0 9.5 Q
(8.4 Three approaches to generate-gate-id) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(the upper) 108 640.67 T
(case letters of the English alphabet. The) 155.28 640.67 T
4 9.5 Q
($digits) 349.71 640.67 T
1 11 Q
( constant is initialized) 389.61 640.67 T
(to) 108 626.67 T
4 9.5 Q
("0123456789") 120.34 626.67 T
1 11 Q
(, a string containing characters r) 188.74 626.67 T
(epr) 344.28 626.67 T
(esenting the ten digits.) 360.31 626.67 T
(In the) 135 612.67 T
4 9.5 Q
(generate-gate-id) 165.87 612.67 T
1 11 Q
( method, we cr) 257.07 612.67 T
(eate the local variable) 329.24 612.67 T
4 9.5 Q
(result) 437.22 612.67 T
1 11 Q
( to) 471.42 612.67 T
(hold the r) 108 598.67 T
(esult that the method will r) 155.23 598.67 T
(eturn; this is a) 287.29 598.67 T
4 9.5 Q
(<string>) 358.49 598.67 T
1 11 Q
( with two elements.) 404.09 598.67 T
(The method sets the \336rst element of) 108 584.67 T
4 9.5 Q
(result) 284.43 584.67 T
1 11 Q
( to the appr) 318.63 584.67 T
(opriate element of the) 374.6 584.67 T
4 9.5 Q
($letters) 108 570.67 T
1 11 Q
( constant, and sets the second element of) 153.6 570.67 T
4 9.5 Q
(result) 353.77 570.67 T
1 11 Q
( to the appr) 387.97 570.67 T
(opriate ele-) 443.93 570.67 T
(ment of the) 108 556.67 T
4 9.5 Q
($digits) 166.15 556.67 T
1 11 Q
( constant.) 206.05 556.67 T
-0.45 (The \336nal statement in the) 135 542.67 P
4 9.5 Q
-0.94 (generate-gate-id) 259.08 542.67 P
1 11 Q
-0.45 ( method causes the entir) 350.29 542.67 P
-0.45 (e r) 466.64 542.67 P
-0.45 (esult) 478.35 542.67 P
(to be r) 108 528.67 T
(eturned; the r) 138.59 528.67 T
(esult is a string containing the terminal letter and the gate) 204.47 528.67 T
(number) 108 514.67 T
(. If that \336nal statement wer) 145.63 514.67 T
(e missing, then) 276.5 514.67 T
4 9.5 Q
(generate-gate-id) 352.39 514.67 T
1 11 Q
( would) 443.59 514.67 T
(r) 108 500.67 T
(eturn only the character that r) 112.15 500.67 T
(epr) 257.05 500.67 T
(esents the gate number) 273.08 500.67 T
(.) 384.54 500.67 T
3 13 Q
(8.4.2  Second approach \321 using) 108 469.33 T
4 F
(as) 275.08 469.33 T
3 F
(,) 290.68 469.33 T
4 F
(while) 296.6 469.33 T
3 F
(, and a list) 335.6 469.33 T
1 11 Q
(The technique we used in the \336rst appr) 108 449.67 T
(oach works \336ne for airports with 26 or) 298.18 449.67 T
(fewer terminals, and with terminals that do not have mor) 108 435.67 T
(e than nine gates. The) 387.02 435.67 T
(\336rst assumption is pr) 108 421.67 T
(obably pr) 211.1 421.67 T
(etty accurate; however) 257.6 421.67 T
(, lar) 366.87 421.67 T
(ge airports can have) 385.22 421.67 T
(mor) 108 407.67 T
(e than nine gates in their terminals. In this section, we r) 127.87 407.67 T
(ede\336ne) 396.04 407.67 T
4 9.5 Q
(generate-) 434.37 407.67 T
(gate-id) 108 393.67 T
1 11 Q
( to handle gate numbers of arbitrary length.) 147.9 393.67 T
(First, we de\336ne a helper method named) 135 379.67 T
4 9.5 Q
(as) 331.57 379.67 T
1 11 Q
(, to convert integers to strings.) 342.97 379.67 T
(The) 108 365.67 T
4 9.5 Q
(as) 129.16 365.67 T
1 11 Q
( generic function is used to convert an instance of one class to a new) 140.56 365.67 T
(instance of a dif) 108 351.67 T
(fer) 184.71 351.67 T
(ent class. In the) 197.79 351.67 T
4 9.5 Q
(as) 275.08 351.67 T
1 11 Q
( method in the following example, we use a) 286.48 351.67 T
(list to hold \050temporarily\051 the characters of the supplied integer) 108 337.67 T
(, which we add to) 410.39 337.67 T
-0.27 (the list one at a time using the) 108 323.67 P
4 9.5 Q
-0.56 (add!) 254.03 323.67 P
1 11 Q
-0.27 ( function. At the end of this) 276.83 323.67 P
4 9.5 Q
-0.56 (as) 411.01 323.67 P
1 11 Q
-0.27 ( method, we call) 422.41 323.67 P
-0.22 (as to convert the list of characters into a string of characters; this call invokes a dif-) 108 309.67 P
(fer) 108 295.67 T
(ent, built-in) 121.08 295.67 T
4 9.5 Q
(as) 180.56 295.67 T
1 11 Q
( method.) 191.96 295.67 T
(Normally) 135 281.67 T
(, we would expect a library to implement the) 181 281.67 T
4 9.5 Q
(as) 402.08 281.67 T
1 11 Q
( method that fol-) 413.48 281.67 T
-0.05 (lows. W) 108 267.67 P
-0.05 (e show how to write this method because it illustrates several useful tech-) 146.49 267.67 P
(niques: singleton dispatching, the) 108 253.67 T
4 9.5 Q
(if) 274.22 253.67 T
1 11 Q
(-) 285.62 253.67 T
4 9.5 Q
(elseif) 289.28 253.67 T
1 11 Q
(-) 323.48 253.67 T
4 9.5 Q
(else) 327.15 253.67 T
1 11 Q
( contr) 349.95 253.67 T
(ol constr) 377.72 253.67 T
(uct, and the) 419.48 253.67 T
4 9.5 Q
(while) 108 239.67 T
1 11 Q
( iteration constr) 136.5 239.67 T
(uct.) 212.9 239.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 108
%%Page: "107" 109
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 365.77 677.67 T
2 11 Q
(107) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method as \050class == <string>, integer :: <integer>\051) 124.2 642 T
(=> result :: <string>;) 205.2 631 T
(if \050integer = 0\051 "0") 118.8 620 T
(elseif \050integer < 0\051 concatenate \050"-", as \050<string>, - integer\051\051) 129.6 609 T
(else) 129.6 598 T
(let result = #\050\051;) 140.4 587 T
(while \050integer > 0\051) 140.4 576 T
(let \050new-integer, digit\051 = truncate/ \050integer, 10\051;) 151.2 565 T
(result := add!\050result, $digits[digit]\051;) 151.2 554 T
(integer := new-integer;) 151.2 543 T
(end;) 140.4 532 T
(as\050<string>, result\051;) 140.4 521 T
(end if;) 118.8 510 T
(end;) 108 499 T
1 11 Q
(Note that the \336rst parameter is specialized to a particular object \050the class) 108 478.67 T
4 9.5 Q
-0.67 (<string>) 108 464.67 P
1 11 Q
-0.32 (\051, and so this method will be selected only if that exact object is pr) 153.6 464.67 P
-0.32 (ovided) 467.44 464.67 P
(as the \336rst ar) 108 450.67 T
(gument, and the class of the second object is an integer) 170.57 450.67 T
(.) 435.74 450.67 T
(This) 135 436.67 T
4 9.5 Q
(as) 158.76 436.67 T
1 11 Q
( method works as follows: First it checks to see if the integer pr) 170.16 436.67 T
(o-) 475.52 436.67 T
-0.24 (vided is zer) 108 422.67 P
-0.24 (o. If so, the answer is simply a string with just the character which r) 163.93 422.67 P
-0.24 (ep-) 488.46 422.67 P
-0.01 (r) 108 408.67 P
-0.01 (esents zer) 112.15 408.67 P
-0.01 (o in it. If the integer pr) 159.66 408.67 P
-0.01 (ovided is less than zer) 268.83 408.67 P
-0.01 (o, then the answer will be) 376.39 408.67 P
(a string which starts with a minus sign, followed by the absolute value \050the nega-) 108 394.67 T
-0.03 (tion of\051 the negative integer) 108 380.67 P
-0.03 (. Otherwise, the integer pr) 241.59 380.67 P
-0.03 (ovided must be positive. In) 368.72 380.67 P
(that case the local variable) 108 366.67 T
4 9.5 Q
(result) 238.5 366.67 T
1 11 Q
( is initialized to the empty list, r) 272.7 366.67 T
(epr) 426.49 366.67 T
(esented by) 442.52 366.67 T
4 9.5 Q
(#\050\051) 108 352.67 T
1 11 Q
(. This variable will hold the value to be r) 125.1 352.67 T
(eturned by the method.) 321.2 352.67 T
(Now the) 135 338.67 T
4 9.5 Q
(while) 180.08 338.67 T
1 11 Q
( iteration constr) 208.58 338.67 T
(uct begins. The expr) 284.97 338.67 T
(ession) 382.93 338.67 T
4 9.5 Q
(integer > 0) 415.88 338.67 T
1 11 Q
( is) 478.58 338.67 T
(evaluated. For at least the \336rst time thr) 108 324.67 T
(ough the loop,) 296.08 324.67 T
4 9.5 Q
(integer > 0) 369.32 324.67 T
1 11 Q
( cannot be) 432.02 324.67 T
-0.31 (false, because we have alr) 108 310.67 P
-0.31 (eady determined the integer is positive. Because the test) 231.8 310.67 P
(expr) 108 296.67 T
(ession for the) 129.7 296.67 T
4 9.5 Q
(while) 197.43 296.67 T
1 11 Q
( loop is not false, the body is executed. In the body of) 225.93 296.67 T
4 9.5 Q
(while) 108 282.67 T
1 11 Q
(, tr) 136.5 282.67 T
(uncating integer division is performed on) 149.84 282.67 T
4 9.5 Q
(integer) 355.08 282.67 T
1 11 Q
( by 10. This integer) 394.98 282.67 T
(division r) 108 268.67 T
(eturns two values, and these values ar) 154.51 268.67 T
(e used to initialize the local vari-) 339.85 268.67 T
-0.19 (ables) 108 254.67 P
4 9.5 Q
-0.4 (new-integer) 135.28 254.67 P
1 11 Q
-0.19 ( and) 197.98 254.67 P
4 9.5 Q
-0.4 (digit) 221.72 254.67 P
1 11 Q
-0.19 (. The \336rst value is the r) 250.22 254.67 P
-0.19 (esult of the division followed) 360.07 254.67 P
-0.28 (by tr) 108 240.67 P
-0.28 (uncation, and the second value is the r) 130.51 240.67 P
-0.28 (emainder of the division. For example,) 315.04 240.67 P
(if the value of) 108 226.67 T
4 9.5 Q
(integer) 177.61 226.67 T
1 11 Q
( is 19, then) 217.51 226.67 T
4 9.5 Q
(new-integer) 271.78 226.67 T
1 11 Q
( is initialized to 1, and) 334.48 226.67 T
4 9.5 Q
(digit) 444.3 226.67 T
1 11 Q
( is ini-) 472.8 226.67 T
-0.04 (tialized to 9 \05019 divided by 10 is 1, with a r) 108 212.67 P
-0.04 (emainder of 9\051. \050Dylan has other forms) 313.09 212.67 P
(of integer division which r) 108 198.67 T
(ound the r) 236.68 198.67 T
(esult in various ways. This book does not) 287.34 198.67 T
(cover all the forms of division.\051) 108 184.67 T
(Next, the r) 135 170.67 T
(emainder) 186.33 170.67 T
(, which is one digit of the integer) 231.93 170.67 T
(, is converted to the) 390.66 170.67 T
(character which r) 108 156.67 T
(epr) 192.43 156.67 T
(esents that digit. Then that character is added to the fr) 208.45 156.67 T
(ont of) 470.52 156.67 T
(the r) 108 142.67 T
(esult list using) 130.15 142.67 T
4 9.5 Q
(add!) 203.43 142.67 T
1 11 Q
(.) 226.23 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 109
%%Page: "108" 110
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(108) 72 677.67 T
0 9.5 Q
(8.4 Three approaches to generate-gate-id) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(The last action in the body of) 135 640.67 T
4 9.5 Q
(while) 278.65 640.67 T
1 11 Q
( alters the value of) 307.15 640.67 T
4 9.5 Q
(integer) 399.21 640.67 T
1 11 Q
( to be the) 439.11 640.67 T
-0.08 (quotient computed at the start of the body) 108 626.67 P
-0.08 (. When we r) 311.63 626.67 P
-0.08 (each the end of the body of) 370.06 626.67 P
4 9.5 Q
(while) 108 612.67 T
1 11 Q
(, execution loops back to the top of the loop, wher) 136.5 612.67 T
(e the test expr) 378.29 612.67 T
(ession is) 445.88 612.67 T
(checked again. If) 108 598.67 T
4 9.5 Q
(integer) 192.63 598.67 T
1 11 Q
( is gr) 232.53 598.67 T
(eater than zer) 256.16 598.67 T
(o, then the iteration continues; other-) 322.44 598.67 T
(wise, contr) 108 584.67 T
(ol r) 160.83 584.67 T
(eturns to the point after the end of the) 176.94 584.67 T
4 9.5 Q
(while) 364.18 584.67 T
1 11 Q
( body) 392.68 584.67 T
(.) 419.13 584.67 T
-0.18 (Once all the digits of the integer number ar) 135 570.67 P
-0.18 (e collected as separate characters) 342.59 570.67 P
-0.27 (in the r) 108 556.67 P
-0.27 (esult list, the list is converted into a string using the appr) 141.97 556.67 P
-0.27 (opriate built-in) 414.66 556.67 P
4 9.5 Q
-0.55 (as) 490.12 556.67 P
1 11 Q
(function.) 108 542.67 T
4 9 Q
(def) 108 522 T
(ine method generate-gate-id \050term :: <integer>, gate :: <integer>\051) 124.2 522 T
(concatenate\050as \050<string>, $letters[term]\051,) 118.8 511 T
(as \050<string>, gate\051;) 183.6 500 T
(end;) 108 489 T
1 11 Q
(The) 108 468.67 T
4 9.5 Q
(generate-gate-id) 129.16 468.67 T
1 11 Q
( method above uses the built-in) 220.36 468.67 T
4 9.5 Q
(as) 376.09 468.67 T
1 11 Q
( method to convert a) 387.49 468.67 T
-0.43 (character to a string, and then uses the) 108 454.67 P
4 9.5 Q
-0.89 (as) 294.22 454.67 P
1 11 Q
-0.43 ( method we de\336ned above to convert the) 305.62 454.67 P
(gate number \050r) 108 440.67 T
(epr) 180.23 440.67 T
(esented as an integer\051 into a string. These two strings ar) 196.25 440.67 T
(e sup-) 466.35 440.67 T
-0.28 (plied as two ar) 108 426.67 P
-0.28 (guments to) 178.99 426.67 P
4 9.5 Q
-0.58 (concatenate) 235.9 426.67 P
1 11 Q
-0.28 (, which combines the two strings into one,) 298.6 426.67 P
(and r) 108 412.67 T
(eturns this combined string, which is the gate-id string we need.) 133.52 412.67 T
3 13 Q
(8.4.3  Predicates) 108 381.33 T
1 11 Q
(As you might expect,) 108 361.67 T
4 9.5 Q
(>) 214.04 361.67 T
1 11 Q
( is a) 219.74 361.67 T
2 F
(predicate) 241.35 361.67 T
1 F
( which r) 287.79 361.67 T
(eturns tr) 327.5 361.67 T
(ue if and only if the ar) 368.99 361.67 T
(gu-) 476.37 361.67 T
-0.11 (ment to the left is gr) 108 347.67 P
-0.11 (eater than the ar) 204.85 347.67 P
-0.11 (gument on the right. Pr) 283.52 347.67 P
-0.11 (edicates ar) 396.64 347.67 P
-0.11 (e functions) 448.02 347.67 P
(that r) 108 333.67 T
(eturn tr) 133.97 333.67 T
(ue or false. Ther) 170.8 333.67 T
(e is only one false value in Dylan, which is r) 248.91 333.67 T
(epr) 462.22 333.67 T
(e-) 478.25 333.67 T
(sented by) 108 319.67 T
4 9.5 Q
(#f) 157.61 319.67 T
1 11 Q
(. Every value except false may be used to r) 169.01 319.67 T
(epr) 375.29 319.67 T
(esent tr) 391.32 319.67 T
(ue, including) 427.1 319.67 T
-0.03 (the canonical tr) 108 305.67 P
-0.03 (uth value r) 182.52 305.67 P
-0.03 (epr) 235.55 305.67 P
-0.03 (esented by) 251.58 305.67 P
4 9.5 Q
-0.06 (#t) 306.4 305.67 P
1 11 Q
-0.03 (, empty lists, vectors, strings, and any-) 317.8 305.67 P
(thing else that is not) 108 291.67 T
4 9.5 Q
(#f) 208.79 291.67 T
1 11 Q
(. Thus, pr) 220.19 291.67 T
(edicates must r) 266.39 291.67 T
(eturn) 339.73 291.67 T
4 9.5 Q
(#f) 368.71 291.67 T
1 11 Q
( for false, but may r) 380.11 291.67 T
(eturn) 474.7 291.67 T
(any other value to indicate tr) 108 277.67 T
(ue. Dylan has many built-in pr) 248.39 277.67 T
(edicates.) 397.55 277.67 T
3 13 Q
(8.4.4  Predicates for equality) 108 246.33 T
1 11 Q
(Dylan has two r) 108 226.67 T
(elated pr) 185.46 226.67 T
(edicates for testing equality:) 228.52 226.67 T
4 9.5 Q
(==) 367.86 226.67 T
1 11 Q
( and) 379.26 226.67 T
4 9.5 Q
( =) 400.64 226.67 T
1 11 Q
(. The) 412.04 226.67 T
4 9.5 Q
(==) 438.7 226.67 T
1 11 Q
( pr) 450.1 226.67 T
(edicate) 463.61 226.67 T
-0.08 (determines whether two objects ar) 108 212.67 P
-0.08 (e identical. For some objects \050like numbers\051,) 275.06 212.67 P
4 9.5 Q
-0.16 (==) 489.92 212.67 P
1 11 Q
(is tr) 108 198.67 T
(ue if the objects have the same value. For other objects \050like strings, other col-) 126.46 198.67 T
(lections, and instances of user) 108 184.67 T
(-de\336ned classes\051,) 252.54 184.67 T
4 9.5 Q
( ==) 335.25 184.67 T
1 11 Q
( is tr) 352.35 184.67 T
(ue only if its ar) 373.56 184.67 T
(guments) 446.15 184.67 T
(r) 108 170.67 T
(efer to the exact same object. The) 112.15 170.67 T
4 9.5 Q
(==) 274.42 170.67 T
1 11 Q
( pr) 285.82 170.67 T
(edicate is the str) 299.33 170.67 T
(onger test for equality) 377.53 170.67 T
(.) 483.48 170.67 T
-0.37 (The) 135 156.67 P
4 9.5 Q
-0.76 (=) 155.8 156.67 P
1 11 Q
-0.37 ( pr) 161.5 156.67 P
-0.37 (edicate tests its two ar) 174.64 156.67 P
-0.37 (guments to see whether they ar) 280.24 156.67 P
-0.37 (e similar) 430.81 156.67 P
-0.37 (. If the) 471.47 156.67 P
-0.43 (ar) 108 142.67 P
-0.43 (guments ar) 117.65 142.67 P
-0.43 (e) 172 142.67 P
4 9.5 Q
-0.88 (==) 179.6 142.67 P
1 11 Q
-0.43 (, then they ar) 191 142.67 P
-0.43 (e always) 253.4 142.67 P
4 9.5 Q
-0.88 (=) 297.48 142.67 P
1 11 Q
-0.43 ( as well. The converse does not hold. T) 303.18 142.67 P
-0.43 (wo) 486.49 142.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 110
%%Page: "109" 111
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 365.77 677.67 T
2 11 Q
(109) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(strings ar) 108 640.67 T
(e) 153.38 640.67 T
4 9.5 Q
(=) 161.39 640.67 T
1 11 Q
( if they have the same elements, but they ar) 167.09 640.67 T
(e not) 377.32 640.67 T
4 9.5 Q
(==) 404.08 640.67 T
1 11 Q
( unless they ar) 415.48 640.67 T
(e) 485.58 640.67 T
(the same string object. For example:) 108 626.67 T
5 9 Q
(?) 108 606 T
4 F
(2 == 2;) 118.8 606 T
5 F
(#t) 108 595 T
(?) 108 576 T
4 F
("abc" = "abc";) 118.8 576 T
5 F
(#t) 108 565 T
(?) 108 546 T
4 F
("abc" == "abc";) 118.8 546 T
5 F
(#f) 108 535 T
1 11 Q
(The two) 108 514.67 T
4 9 Q
(") 150.68 514.67 T
4 9.5 Q
(abc) 156.08 514.67 T
4 9 Q
(") 173.18 514.67 T
1 11 Q
( strings ar) 178.58 514.67 T
(e dif) 226.71 514.67 T
(fer) 248.11 514.67 T
(ent objects. If we use) 261.19 514.67 T
4 9.5 Q
(let) 364.39 514.67 T
1 11 Q
( as shown below) 381.49 514.67 T
(, we can) 461.27 514.67 T
(compar) 108 500.67 T
(e the string to itself:) 144.86 500.67 T
5 9 Q
(?) 108 480 T
4 F
(begin) 118.8 480 T
(let string = "abc";) 124.2 469 T
(string == string;) 124.2 458 T
(end;) 118.8 447 T
5 F
(#t) 108 436 T
1 11 Q
(Many operations on collections copy their ar) 108 415.67 T
(gument when computing the r) 324.29 415.67 T
(esult) 472.82 415.67 T
(of the function. For example,) 108 401.67 T
4 9.5 Q
(copy-sequence) 250.66 401.67 T
1 11 Q
( copies its ar) 324.76 401.67 T
(gument. Thus, the ar) 384.74 401.67 T
(gu-) 485.56 401.67 T
(ment and the r) 108 387.67 T
(esult ar) 179.25 387.67 T
(e dif) 215 387.67 T
(fer) 236.4 387.67 T
(ent objects, as shown below:) 249.48 387.67 T
5 9 Q
(?) 108 367 T
4 F
(begin) 118.8 367 T
(let string = "abc";) 124.2 356 T
(string == copy-sequence \050string\051;) 124.2 345 T
(end;) 118.8 334 T
5 F
(#f) 108 323 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 11 Q
(Convention:) 141 282.67 T
1 F
( Dylan has a convention of putting an exclamation point) 203.03 282.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(at the end of the name of operators that can destr) 141 268.67 T
(uctively modify a) 379.4 268.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.31 (data str) 141 254.67 P
-0.31 (uctur) 177.25 254.67 P
-0.31 (e, or that r) 203.14 254.67 P
-0.31 (eturn a data str) 252.04 254.67 P
-0.31 (uctur) 324.91 254.67 P
-0.31 (e that shar) 350.79 254.67 P
-0.31 (es str) 400.73 254.67 P
-0.31 (uctur) 425.61 254.67 P
-0.31 (e with) 451.49 254.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the data str) 141 240.67 T
(uctur) 195.57 240.67 T
(e given as the ar) 221.45 240.67 T
(gument. For example,) 299.99 240.67 T
4 9.5 Q
(add!) 409.17 240.67 T
1 11 Q
( takes a) 431.97 240.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.09 (sequence and a new element, and r) 141 226.67 P
-0.09 (eturns a sequence with the element) 310.73 226.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(added to it. In contrast, note that the) 141 212.67 T
4 9.5 Q
(add) 320.49 212.67 T
1 11 Q
( function r) 337.59 212.67 T
(eturns a new) 388.01 212.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(sequence that does not shar) 141 198.67 T
(e str) 274.99 198.67 T
(uctur) 295.52 198.67 T
(e with the sequence that was its) 321.4 198.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ar) 141 184.67 T
(gument.) 150.65 184.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 295.88 135 177.12 2 L
V
0.25 H
0 Z
N
486 295.88 486 177.12 2 L
V
N
134.88 296 486.12 296 2 L
V
N
134.88 177 486.12 177 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 111
%%Page: "110" 112
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 72 677.67 T
(10) 77.09 677.67 T
0 9.5 Q
(8.5 Vectors) 97.59 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(8.4.5  Third approach \321 using) 108 639.33 T
4 F
(format-to-string) 263.22 639.33 T
1 11 Q
-0.44 (The \336rst two appr) 108 619.67 P
-0.44 (oaches wer) 194.24 619.67 P
-0.44 (e useful for illustrating) 247.86 619.67 P
4 9.5 Q
-0.91 (for) 360.1 619.67 P
1 11 Q
-0.44 ( and) 377.2 619.67 P
4 9.5 Q
-0.91 (while) 400.45 619.67 P
1 11 Q
-0.44 (, but ther) 428.95 619.67 P
-0.44 (e is an) 472.03 619.67 P
(easier way to implement) 108 605.67 T
4 9.5 Q
(generate-gate-id) 230.6 605.67 T
1 11 Q
(. W) 321.8 605.67 T
(e can use a special version of) 337.28 605.67 T
4 9.5 Q
(for-) 479.76 605.67 T
(mat) 108 591.67 T
1 11 Q
( which pr) 125.1 591.67 T
(oduces a string rather than sending characters somewher) 171.42 591.67 T
(e. So, we) 448.8 591.67 T
(can write) 108 577.67 T
4 9.5 Q
(generate-gate-id) 155.86 577.67 T
1 11 Q
( mor) 247.06 577.67 T
(e succinctly:) 269.68 577.67 T
4 9 Q
(def) 108 557 T
(ine method generate-gate-id \050term :: <integer>, gate :: <integer>\051) 124.2 557 T
(format-to-string \050"%c%d", $letters[term], gate\051;) 118.8 546 T
(end;) 108 535 T
1 11 Q
(For those familiar with C I/O libraries,) 108 514.67 T
4 9.5 Q
(format \050*window*, ...\051) 299.71 514.67 T
1 11 Q
( is similar to) 425.11 514.67 T
4 9.5 Q
(printf) 108 500.67 T
1 11 Q
(, and) 142.2 500.67 T
4 9.5 Q
(format-to-string \050...\051) 169.07 500.67 T
1 11 Q
( is similar to) 294.47 500.67 T
4 9.5 Q
(sprintf) 356.76 500.67 T
1 11 Q
(.) 396.65 500.67 T
3 15 Q
(8.5  V) 108 461 T
(ectors) 139.47 461 T
1 11 Q
-0.03 (In this section, we de\336ne the) 108 440.67 P
4 9.5 Q
-0.07 (<airport>) 249.05 440.67 P
1 11 Q
-0.03 ( class, and stor) 300.35 440.67 P
-0.03 (e the gates of the airport in) 371.19 440.67 P
-0.13 (the) 108 426.67 P
4 9.5 Q
-0.27 (<airport>) 125.88 426.67 P
1 11 Q
-0.13 ( instance. The) 177.18 426.67 P
4 9.5 Q
-0.27 (<airport>) 246.11 426.67 P
1 11 Q
-0.13 ( class uses a vector as the type of the) 297.41 426.67 P
4 9.5 Q
-0.27 (gate-) 475.5 426.67 P
(instances) 108 412.67 T
1 11 Q
( slot.) 159.3 412.67 T
4 9 Q
(def) 108 392 T
(ine class <airport> \050<physical-object>\051) 124.2 392 T
6 F
(// The name of the airport, such as "Logan International Airport") 118.8 381 T
4 F
(slot name) 118.8 370 T
( :: <string>,) 270 370 T
(init-keyword: name:;) 351 370 T
6 F
(// The three letter abbreviation, such as "BOS") 118.8 359 T
4 F
(slot code) 118.8 348 T
( :: <string>,) 270 348 T
(init-keyword: code:;) 351 348 T
6 F
(// How many gates are at the airport) 118.8 337 T
4 F
(virtual slot number-of-gates :: <integer>, setter: #f;) 118.8 326 T
(slot gate-instances) 118.8 315 T
(:: <vector>;) 275.4 315 T
(required keyword gates-per-terminal:, type: <vector>;) 118.8 304 T
(keyword gate-capacity:, type: <size>, init-value: *default-capacity*;) 118.8 293 T
(end;) 108 282 T
3 13 Q
(8.5.1  Use of a vector to store gates) 108 252.33 T
1 11 Q
(W) 108 232.67 T
(e de\336ned an initial version of the) 117.99 232.67 T
4 9.5 Q
(generate-gates) 280.77 232.67 T
1 11 Q
( method in Section 8.3.2. W) 360.57 232.67 T
(e) 491.48 232.67 T
(need to modify that method so that it no longer assumes each terminal has the) 108 218.67 T
(same number of gates.) 108 204.67 T
(Befor) 135 190.67 T
(e r) 160.81 190.67 T
(ede\336ning the) 172.97 190.67 T
4 9.5 Q
(generate-gates) 239.76 190.67 T
1 11 Q
( method, it is helpful to see a sample) 319.56 190.67 T
(call to it. Below) 108 176.67 T
(,) 181.52 176.67 T
4 9.5 Q
(generate-gates) 187.02 176.67 T
1 11 Q
( is called, and the r) 266.82 176.67 T
(esult \050a vector of gate) 357.99 176.67 T
-0.18 (instances\051 is r) 108 162.67 P
-0.18 (eturned to the) 173.39 162.67 P
4 9.5 Q
-0.37 (do) 244.17 162.67 P
1 11 Q
-0.18 ( function which calls the) 255.57 162.67 P
4 9.5 Q
-0.37 (say-line) 375.96 162.67 P
1 11 Q
-0.18 ( method on each) 421.56 162.67 P
(element of the r) 108 148.67 T
(esulting vector) 184.03 148.67 T
(.) 255.35 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 112
%%Page: "111" 113
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 366.59 677.67 T
2 11 Q
(1) 524.31 677.67 T
(1) 529.41 677.67 T
(1) 534.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Create the gates for the airport assuming three terminals,) 108 642 T
(// the f) 108 631 T
(irst with 5 gates, the second with 3 gates, and so on.) 151.2 631 T
5 F
(?) 108 620 T
4 F
(do \050say-line, generate-gates \050#[5, 3, 2]\051\051;) 118.8 620 T
5 F
(Gate A1) 108 609 T
(Gate A2) 108 598 T
(Gate A3) 108 587 T
(Gate A4) 108 576 T
(Gate A5) 108 565 T
(Gate B1) 108 554 T
(Gate B2) 108 543 T
(Gate B3) 108 532 T
(Gate C1) 108 521 T
(Gate C2) 108 510 T
1 11 Q
(Her) 108 489.67 T
(e we r) 126.57 489.67 T
(ede\336ne the) 155.93 489.67 T
4 9.5 Q
(generate-gates) 212.27 489.67 T
1 11 Q
( method:) 292.07 489.67 T
6 9 Q
(// Gates-per-terminal is a vector. Each element of the vector is the) 108 469 T
(// number of gates to create for the terminal at that index.) 108 458 T
(// Returns a vector of all the gate instances.) 108 447 T
4 F
(def) 108 436 T
(ine method generate-gates \050gates-per-terminal) 124.2 436 T
( :: <vector>,) 383.4 436 T
(default-gate-capacity :: <size>\051) 270 425 T
(let result = make\050<vector>, size: reduce1\050\134+, gates-per-terminal\051\051;) 118.8 414 T
(let result-index = 0;) 118.8 403 T
(for \050term :: <integer> from 0 below gates-per-terminal.size\051) 118.8 392 T
(for \050gate :: <integer> from 1 to gates-per-terminal[term]\051) 129.6 381 T
(result[result-index] :=) 140.4 370 T
(make\050<gate>, id: generate-gate-id \050term, gate\051,) 151.2 359 T
(capacity: default-gate-capacity\051;) 178.2 348 T
(result-index := result-index + 1;) 140.4 337 T
(end;) 129.6 326 T
(end;) 118.8 315 T
(end;) 108 304 T
1 11 Q
(This version of) 108 283.67 T
4 9.5 Q
(generate-gates) 183.03 283.67 T
1 11 Q
( \336rst makes a vector to hold all the gates and) 262.83 283.67 T
-0.07 (stor) 108 269.67 P
-0.07 (es it in the) 126.4 269.67 P
4 9.5 Q
-0.15 (result) 178.69 269.67 P
1 11 Q
-0.07 ( variable. The method computes the size of the vector using) 212.89 269.67 P
(the function) 108 255.67 T
4 9.5 Q
(reduce1) 169.53 255.67 T
1 11 Q
(, which in this case sums all the elements of the) 209.43 255.67 T
4 9.5 Q
(gates-per-) 441.4 255.67 T
(terminal) 108 241.67 T
1 11 Q
( vector) 153.6 241.67 T
(. The generic function) 185.84 241.67 T
4 9.5 Q
(reduce1) 294.27 241.67 T
1 11 Q
( takes a two-ar) 334.17 241.67 T
(gument function) 405.13 241.67 T
-0.36 (and a sequence, and transforms the sequence into a single value. By pr) 108 227.67 P
-0.36 (oviding the) 446.11 227.67 P
4 9.5 Q
(+) 108 213.67 T
1 11 Q
( generic function, the transformation simply sums all the elements in the) 113.7 213.67 T
(sequence, in this case) 108 199.67 T
4 9.5 Q
(gates-per-terminal) 214.07 199.67 T
1 11 Q
(. Dylan pr) 316.67 199.67 T
(ovides many variations of) 365.41 199.67 T
(this function.) 108 185.67 T
(Note that the call to) 135 171.67 T
4 9.5 Q
(reduce1) 233.46 171.67 T
1 11 Q
( has a backslash befor) 273.36 171.67 T
(e the name of the) 378.61 171.67 T
4 9.5 Q
(+) 464.7 171.67 T
1 11 Q
(generic function. The backslash is necessary befor) 108 157.67 T
(e in\336x operators like) 349.09 157.67 T
4 9.5 Q
(+) 451.41 157.67 T
1 11 Q
( in this) 457.11 157.67 T
(situation because otherwise it is har) 108 143.67 T
(d to tell if the expr) 281.45 143.67 T
(ession is trying to add) 370.59 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 113
%%Page: "112" 114
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 72 677.67 T
(12) 77.09 677.67 T
0 9.5 Q
(8.6 Construction of a simple airport) 97.59 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(something, or get the value of the variable) 108 640.67 T
4 9.5 Q
(+) 315.75 640.67 T
1 11 Q
( \050which is a generic function\051. In this) 321.45 640.67 T
(case the goal is to pass the generic function for addition to) 108 626.67 T
4 9.5 Q
(reduce1) 392.76 626.67 T
1 11 Q
(, to dir) 432.66 626.67 T
(ect it to) 464.57 626.67 T
(perform a sum of the elements of the vector) 108 612.67 T
(, so the backslash is necessary) 319.18 612.67 T
(. This is) 462.38 612.67 T
(exactly like the earlier example when we wer) 108 598.67 T
(e adding methods to) 327.17 598.67 T
4 9.5 Q
(+) 430.06 598.67 T
1 11 Q
(.) 435.76 598.67 T
(Next,) 135 584.67 T
4 9.5 Q
(result-index) 164.17 584.67 T
1 11 Q
( is initialized to zer) 232.57 584.67 T
(o, and then a nested iteration is per-) 324.93 584.67 T
(formed. The number of terminals in the simulation is determined by the number) 108 570.67 T
(of elements in the) 108 556.67 T
4 9.5 Q
(gates-per-terminal) 196.9 556.67 T
1 11 Q
( vector) 299.5 556.67 T
(. The number of gates in a particu-) 331.74 556.67 T
(lar terminal depends on the value of the corr) 108 542.67 T
(esponding element in the) 324.71 542.67 T
4 9.5 Q
(gates-) 450.67 542.67 T
(per-terminal) 108 528.67 T
1 11 Q
( vector) 176.4 528.67 T
(. In the body of the inner) 208.64 528.67 T
4 9.5 Q
(for) 331.48 528.67 T
1 11 Q
( loop, a gate instance with the) 348.58 528.67 T
-0.08 (appr) 108 514.67 P
-0.08 (opriate gate-id and capacity is cr) 130.87 514.67 P
-0.08 (eated and then stor) 288.61 514.67 P
-0.08 (ed in the appr) 381.67 514.67 P
-0.08 (opriate ele-) 449.41 514.67 P
(ment of the r) 108 500.67 T
(esult vector) 170.29 500.67 T
(.) 225.89 500.67 T
(The last action of the body incr) 135 486.67 T
(ements the index into the) 284.93 486.67 T
4 9.5 Q
(result) 410.56 486.67 T
1 11 Q
( vector) 444.76 486.67 T
(, so) 477 486.67 T
(that the next instance will be stor) 108 472.67 T
(ed in the next element of the) 268.2 472.67 T
4 9.5 Q
(result) 408.87 472.67 T
1 11 Q
( vector) 443.07 472.67 T
(.) 475.31 472.67 T
3 13 Q
(8.5.2  Method for) 108 441.33 T
4 F
(initialize) 195.67 441.33 T
3 F
( to store the gates in the airport) 273.67 441.33 T
1 11 Q
(W) 108 421.67 T
(e use an) 117.99 421.67 T
4 9.5 Q
(initialize) 159.98 421.67 T
1 11 Q
( method for the) 216.98 421.67 T
4 9.5 Q
(<airport>) 294.94 421.67 T
1 11 Q
( class to call) 346.24 421.67 T
4 9.5 Q
(generate-gates) 406.53 421.67 T
1 11 Q
(when an instance of) 108 407.67 T
4 9.5 Q
(<airport>) 207.73 407.67 T
1 11 Q
( is made.) 259.03 407.67 T
4 9 Q
(def) 108 387 T
(ine method initialize \050airport :: <airport>, #key gates-per-terminal,) 124.2 387 T
(gate-capacity\051) 248.4 376 T
(next-method \050\051;) 118.8 365 T
(airport.gate-instances := generate-gates \050gates-per-terminal,) 118.8 354 T
(gate-capacity\051;) 345.6 343 T
(end;) 108 332 T
1 11 Q
(This method stor) 108 311.67 T
(es the gates in the vector in the) 190.61 311.67 T
4 9.5 Q
(gate-instances) 342.96 311.67 T
1 11 Q
( slot of an) 422.76 311.67 T
4 9.5 Q
(<air-) 472.79 311.67 T
(port>) 108 297.67 T
1 11 Q
( instance.) 136.5 297.67 T
3 15 Q
(8.6  Construction of a simple airport) 108 258 T
1 11 Q
(In this section, we r) 108 237.67 T
(ound out the design of the basic airport, and enhance the) 202.31 237.67 T
(design of the airport and gate classes.) 108 223.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 114
%%Page: "113" 115
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 366.18 677.67 T
2 11 Q
(1) 523.91 677.67 T
(13) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <vehicle-storage> \050<physical-object>\051) 124.2 642 T
6 F
(// Simplistic model, just one vehicle at a time.) 118.8 631 T
4 F
(slot vehicle-currently-occupying, init-value: #f;) 118.8 620 T
6 F
(// How large a vehicle can be stored.) 118.8 609 T
4 F
(slot storage-capacity) 118.8 598 T
( :: <size>, init-keyword: capacity:,) 291.6 598 T
(init-value: *default-capacity*;) 313.2 587 T
(slot identif) 118.8 576 T
(ier) 183.6 576 T
(:: <string>,) 297 576 T
(required-init-keyword: id:;) 313.2 565 T
(slot connected-to) 118.8 554 T
(:: <vector>;) 297 554 T
(end;) 108 543 T
(def) 108 524 T
(ine class <gate> \050<vehicle-storage>\051) 124.2 524 T
(end;) 108 513 T
(def) 108 494 T
(ine method say \050object :: <gate>\051) 124.2 494 T
(format \050*window*, "Gate %s", identif) 118.8 483 T
(ier \050object\051\051;) 313.2 483 T
(end;) 108 472 T
(def) 108 453 T
(ine class <runway> \050<vehicle-storage>\051) 124.2 453 T
(end;) 108 442 T
(def) 108 423 T
(ine method say \050object :: <runway>\051) 124.2 423 T
(format \050*window*, "Runway %s", identif) 118.8 412 T
(ier \050object\051\051;) 324 412 T
(end;) 108 401 T
(def) 108 382 T
(ine class <taxiway> \050<vehicle-storage>\051) 124.2 382 T
(end;) 108 371 T
(def) 108 352 T
(ine method say \050object :: <taxiway>\051) 124.2 352 T
(format \050*window*, "Taxiway %s", identif) 118.8 341 T
(ier \050object\051\051;) 329.4 341 T
(end;) 108 330 T
1 11 Q
(The) 108 309.67 T
4 9.5 Q
(connected-to) 129.16 309.67 T
1 11 Q
( slot in the) 197.56 309.67 T
4 9.5 Q
(<vehicle-storage>) 250.88 309.67 T
1 11 Q
( class is used to stor) 347.78 309.67 T
(e) 443.59 309.67 T
4 9.5 Q
(<vehicle-) 451.61 309.67 T
(storage>) 108 295.67 T
1 11 Q
( instances which ar) 153.6 295.67 T
(e physically adjacent to a given storage instance. For) 246.13 295.67 T
(example, if a gate is adjacent to a particular taxiway) 108 281.67 T
(, the gate is an element of the) 358.3 281.67 T
(taxiway\325s) 108 267.67 T
4 9.5 Q
(connected-to) 157.23 267.67 T
1 11 Q
( vector) 225.62 267.67 T
(, and the taxiway is an element of the gate\325s) 257.87 267.67 T
4 9.5 Q
(con-) 472.34 267.67 T
(nected-to) 108 253.67 T
1 11 Q
( vector) 159.3 253.67 T
(.) 191.54 253.67 T
(The) 135 239.67 T
4 9.5 Q
(gate-id) 156.16 239.67 T
1 11 Q
( and) 196.06 239.67 T
4 9.5 Q
(gate-capacity) 220.19 239.67 T
1 11 Q
( slots have been generalized, and ther) 294.29 239.67 T
(e ar) 476.89 239.67 T
(e) 494.55 239.67 T
(now corr) 108 225.67 T
(esponding slots) 151.71 225.67 T
4 9.5 Q
(identif) 230.73 225.67 T
(ier) 270.63 225.67 T
1 11 Q
( and) 287.73 225.67 T
4 9.5 Q
(storage-capacity) 311.85 225.67 T
1 11 Q
( in) 403.05 225.67 T
4 9.5 Q
( <gate>) 415.4 225.67 T
1 11 Q
(\325s super-) 455.3 225.67 T
(class,) 108 211.67 T
4 9.5 Q
(<vehicle-storage>) 136.41 211.67 T
1 11 Q
(.) 233.31 211.67 T
(In Chapter 9, we extend this model to permit mor) 135 197.67 T
(e than one vehicle per) 375.93 197.67 T
4 9.5 Q
(<vehicle-storage>) 108 183.67 T
1 11 Q
( instance for some classes.) 204.9 183.67 T
(Next we r) 135 169.67 T
(ede\336ne the) 182.76 169.67 T
4 9.5 Q
(<airport>) 239.1 169.67 T
1 11 Q
( class to add a slot for storing instances of) 290.4 169.67 T
(r) 108 155.67 T
(unways:) 112.26 155.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 115
%%Page: "114" 116
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 72 677.67 T
(14) 77.09 677.67 T
0 9.5 Q
(8.6 Construction of a simple airport) 97.59 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <airport> \050<physical-object>\051) 124.2 642 T
6 F
(// The name of the airport, such as "Logan International Airport") 118.8 631 T
4 F
(slot name) 118.8 620 T
(:: <string>, init-keyword: name:;) 275.4 620 T
6 F
(// The three letter abbreviation, such as "BOS") 118.8 609 T
4 F
(slot code) 118.8 598 T
(:: <string>, init-keyword: code:;) 275.4 598 T
6 F
(// How many gates are at the airport) 118.8 587 T
4 F
(virtual slot number-of-gates :: <integer>, setter: #f;) 118.8 576 T
(slot gate-instances) 118.8 565 T
( :: <vector>;) 270 565 T
(slot runway-instances) 118.8 554 T
( :: <vector>;) 270 554 T
(required keyword gates-per-terminal:, type: <vector>;) 118.8 543 T
(keyword gate-capacity:, type: <size>, init-value: *default-capacity*;) 118.8 532 T
(end;) 108 521 T
3 13 Q
(8.6.1  Construction of the objects) 108 491.33 T
1 11 Q
(Figur) 108 471.67 T
(e 8.4 shows a diagram of a simple airport. It is followed by the code neces-) 134.21 471.67 T
(sary to constr) 108 457.67 T
(uct the model of that con\336guration.) 173.52 457.67 T
0 0 0 1 0 0 0 K
108 279.02 522 287.01 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 211.6 290.68 T
(e 8.4  Diagram of a simple airport) 237.82 290.68 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
127.46 307.01 502.54 440 C
0 0 0 1 0 0 0 K
219.43 384.11 252.9 410.38 258.94 402.68 225.47 376.41 4 Y
7 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
133.15 315.54 184.15 395.11 R
7 X
V
0 X
N
184.15 369.54 211.15 387.54 R
7 X
V
0 X
N
184.15 333.54 211.15 351.54 R
7 X
V
0 X
N
238.39 433.26 492.1 340.91 482.87 315.54 229.15 407.89 4 Y
7 X
V
0 X
N
1 11 Q
(T) 137.14 360.67 T
(erminal) 142.87 360.67 T
(A) 152.85 344.95 T
(A1) 191.35 376.14 T
(A2) 191.35 340.43 T
(Runway 1) 0 -20 312.54 387.57 TF
(1R-29L) 0 -20 358.4 370.84 TF
211.15 319.39 227.93 400.39 R
7 X
V
0 X
N
7 X
90 450 1.67 4.44 218.78 382.44 G
90 450 1.67 4.44 218.78 382.44 A
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
(T) 0 -270 222.14 323.29 TF
(axiway) 0 -270 222.14 329.02 TF
(Echo) 0 -270 222.69 369.48 TF
7 X
90 450 2.22 6.39 226.56 384.39 G
90 450 2.22 6.39 226.56 384.39 A
90 450 2.22 5.21 67.43 247.9 401.03 GG
90 450 2.22 5.21 67.43 247.9 401.03 AA
405.89 411.69 406.37 412.42 407.18 412.97 408.38 413.45 409.6 413.86 411.05 414.94 413.8 415.88
 455.74 415.67 462.79 422 465.9 422 462.79 412.22 464.11 411.07 462.91 410.44 448.8 408.45 413.3 408.66
 409.99 408.8 407.54 409.45 406.13 410.33 405.92 410.93 19 Y
V
0.2 H
0 Z
0 X
N
405.89 411.69 464.11 411.07 462.91 410.44 448.8 408.45 412.57 408.69 409.99 408.8 407.54 409.45
 406.13 410.33 405.92 410.93 9 Y
5 X
V
0 X
N
455.25 412.42 466.6 414.03 469.46 413.24 462.84 411.29 457.03 410.96 5 Y
7 X
V
0 X
N
427.13 411.48 450.2 420.83 454.23 420.83 443.91 414.38 440.28 411.32 5 Y
7 X
V
0 X
N
429.6 412.58 425.89 412.65 425.98 408.87 430.81 408.87 430.81 410.67 432.67 410.67 434.44 409.73
 439.69 409.73 440.33 411.36 438.23 412.05 435.98 412.57 11 Y
7 X
V
0 X
N
3 X
90 450 0.2 1.94 426.02 410.8 G
0 X
90 450 0.2 1.94 426.02 410.8 A
7 X
90 450 0.2 0.43 425.85 410.85 G
0 X
90 450 0.2 0.43 425.85 410.85 A
430.81 408.87 432.67 408.87 432.67 410.67 430.81 410.67 4 Y
4 X
V
0 X
N
432.67 408.87 433.8 409.3 438.23 409.3 439.69 409.73 434.44 409.73 432.67 410.67 6 Y
3 X
V
0 X
N
435.98 412.57 435.98 411.02 434.44 409.73 439.69 409.73 440.33 411.36 438.23 412.05 437.27 412.27 7 Y
4 X
V
0 X
N
425.65 408.6 425.49 407.73 425.65 406.69 429.93 406.69 429.93 408.33 433.48 408.33 434.61 407.73
 436.14 408.1 437.11 408.53 9 Y
3 X
V
0 X
N
429.93 408.33 431.62 408.33 431.62 406.69 429.93 406.69 4 Y
2 X
V
0 X
N
431.62 406.69 434.61 407.73 433.48 408.33 431.62 408.33 4 Y
V
N
431.46 412.58 450.25 420.16 451.87 420.16 439.1 411.77 438.23 412.05 435.98 412.57 432.91 412.57 7 Y
6 X
V
0 X
N
443.67 416.07 446.54 416.07 446.95 415.75 444.37 415.75 4 Y
7 X
V
0 X
N
443.67 416.07 443.48 415.83 444.34 415.51 446.95 415.75 444.37 415.75 5 Y
3 X
V
0 X
N
446.95 418.12 449.82 418.12 450.23 417.8 447.65 417.8 4 Y
7 X
V
0 X
N
446.95 418.12 446.76 417.88 447.62 417.55 450.23 417.8 447.65 417.8 5 Y
3 X
V
0 X
N
429.65 412.38 435.82 412.37 435.82 410.87 434.96 410.15 4 Y
5 X
V
450.2 420.83 454.23 420.83 453.76 420.54 449.45 420.53 4 Y
6 X
V
0 X
N
3 X
90 450 0.18 0.06 450.15 420.66 G
0 X
90 450 0.18 0.06 450.15 420.66 A
419.28 413.64 419.73 414.28 R
4 X
V
0 X
N
420.43 413.64 420.88 414.28 R
4 X
V
0 X
N
421.58 413.64 422.03 414.28 R
4 X
V
0 X
N
422.73 413.64 423.18 414.28 R
4 X
V
0 X
N
423.88 413.64 424.33 414.28 R
4 X
V
0 X
N
425.03 413.64 425.48 414.28 R
4 X
V
0 X
N
426.18 413.64 426.63 414.28 R
4 X
V
0 X
N
427.33 413.64 427.78 414.28 R
4 X
V
0 X
N
428.48 413.64 428.93 414.28 R
4 X
V
0 X
N
429.63 413.64 430.08 414.28 R
4 X
V
0 X
N
430.78 413.64 431.23 414.28 R
4 X
V
0 X
N
431.93 413.64 432.38 414.28 R
4 X
V
0 X
N
443.8 413.45 444.25 414.09 R
4 X
V
0 X
N
444.86 413.45 445.32 414.09 R
4 X
V
0 X
N
445.93 413.45 446.38 414.09 R
4 X
V
0 X
N
446.99 413.45 447.45 414.09 R
4 X
V
0 X
N
448.06 413.45 448.51 414.09 R
4 X
V
0 X
N
449.12 413.45 449.58 414.09 R
4 X
V
0 X
N
450.19 413.38 450.64 414.02 R
4 X
V
0 X
N
455.74 415.67 460.26 415.19 2 L
4 X
V
2 Z
0 X
N
455.87 411.92 466.51 413.32 468.58 412.98 462.84 411.29 457.03 410.96 5 Y
5 X
V
0 Z
0 X
N
455.93 411.86 464.06 413 465.68 412.55 457.03 410.96 4 Y
4 X
V
0 X
N
410.29 414.37 411.11 414.48 412.57 414.48 412.57 413.84 411.34 413.32 410.63 413.77 409.6 413.86 7 Y
V
N
411.34 413.32 411.68 414.48 2 L
V
2 Z
7 X
N
410.63 413.77 410.89 414.45 2 L
0 X
V
7 X
N
416.76 414.78 417.95 414.78 418.11 414.62 418.11 412.02 417.93 411.84 416.76 411.84 416.56 412.04
 416.56 414.58 8 Y
2 X
V
0 Z
0 X
N
416.76 414.78 417.95 414.78 418.11 414.62 418.11 412.02 417.93 411.84 416.76 411.84 416.56 412.04
 416.56 414.58 8 Y
7 X
V
0 X
N
405.95 411.69 408.6 410.69 416.18 409.67 424.84 409.03 425.46 408.64 412.55 408.73 410 408.84
 407.58 409.48 406.19 410.35 9 Y
4 X
V
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 116
%%Page: "115" 117
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 366.18 677.67 T
2 11 Q
(1) 523.91 677.67 T
(15) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine variable *airport* =) 124.2 642 T
(make\050<airport>, gates-per-terminal: #[2], name: "Belefonte Airport",) 124.2 631 T
(code: "BLA",) 151.2 620 T
(current-position:) 151.2 609 T
(make\050<absolute-position>,) 156.6 598 T
(latitude:) 183.6 587 T
(make\050<latitude>,) 194.4 576 T
(total-seconds: encode-total-seconds\05040, 57, 43\051,) 221.4 565 T
(direction: "North"\051,) 221.4 554 T
(longitude:) 183.6 543 T
(make\050<longitude>,) 194.4 532 T
(total-seconds: encode-total-seconds\05077, 40, 24\051,) 221.4 521 T
(direction: "West"\051\051;) 221.4 510 T
(begin) 108 491 T
(let taxiway = make \050<taxiway>, id: "Echo"\051;) 118.8 480 T
(let taxiway-vector = vector \050taxiway\051;) 118.8 469 T
(let runway = make \050<runway>, id: "11R-29L"\051;) 118.8 458 T
(*airport*.runway-instances := vector \050runway\051;) 118.8 447 T
(runway.connected-to := taxiway-vector;) 118.8 436 T
(let gates = *airport*.gate-instances;) 118.8 425 T
(for \050gate in gates\051) 118.8 414 T
(gate.connected-to := taxiway-vector;) 129.6 403 T
(end;) 118.8 392 T
(taxiway.connected-to := concatenate \050vector \050runway\051, gates\051;) 118.8 381 T
(end;) 108 370 T
1 11 Q
-0.11 (The) 108 349.67 P
4 9.5 Q
-0.22 (vector) 129.06 349.67 P
1 11 Q
-0.11 ( generic function takes any number of ar) 163.26 349.67 P
-0.11 (guments and r) 358.93 349.67 P
-0.11 (eturns a vector) 429.37 349.67 P
-0.21 (containing those ar) 108 335.67 P
-0.21 (guments. The) 200.35 335.67 P
4 9.5 Q
-0.44 (concatenate) 268.97 335.67 P
1 11 Q
-0.21 ( generic function takes one or mor) 331.67 335.67 P
-0.21 (e) 496.19 335.67 P
(sequences as ar) 108 321.67 T
(guments, and appends the elements of those sequences together) 182.52 321.67 T
(,) 493.26 321.67 T
(in or) 108 307.67 T
(der) 130.51 307.67 T
(, into one sequence.) 146.03 307.67 T
3 13 Q
(8.6.2  Classes that model airlines, \337ights, and so on) 108 276.33 T
1 11 Q
(Next we de\336ne some classes to r) 108 256.67 T
(epr) 265.17 256.67 T
(esent airlines, \337ights, commer) 281.2 256.67 T
(cial air) 426.31 256.67 T
(craft in) 458.69 256.67 T
(general, and the class of Boeing 707s in particular) 108 242.67 T
(.) 346.79 242.67 T
4 9 Q
(def) 108 222 T
(ine class <airline> \050<object>\051) 124.2 222 T
(slot name :: <string>, required-init-keyword: name:;) 118.8 211 T
(slot code :: <string>, required-init-keyword: code:;) 118.8 200 T
(end;) 108 189 T
(def) 108 170 T
(ine method say \050object :: <airline>\051) 124.2 170 T
(format \050*window*, "Airline %s", object.name\051;) 118.8 159 T
(end;) 108 148 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 117
%%Page: "116" 118
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 72 677.67 T
(16) 77.09 677.67 T
0 9.5 Q
(8.6 Construction of a simple airport) 97.59 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <f) 124.2 642 T
(light> \050<object>\051) 189 642 T
(slot airline :: <airline>, required-init-keyword: airline:;) 118.8 631 T
(slot number) 118.8 620 T
(:: <integer>, required-init-keyword: number:;) 189 620 T
(end;) 108 609 T
(def) 108 590 T
(ine method say \050object :: <f) 124.2 590 T
(light>\051) 275.4 590 T
(format \050*window*, "Flight %s %d", object.airline.code, object.number\051;) 118.8 579 T
(end;) 108 568 T
6 F
(// This def) 108 549 T
(inition is repeated here.) 167.4 549 T
4 F
(def) 108 538 T
(ine class <vehicle> \050<physical-object>\051) 124.2 538 T
6 F
(// Every vehicle has some unique identif) 118.8 527 T
(ication code) 334.8 527 T
4 F
(slot vehicle-id) 118.8 516 T
( :: <string>, required-init-keyword: id:;) 297 516 T
6 F
(// How much fuel is left in the fuel tank) 118.8 505 T
4 F
(slot fuel-remaining) 118.8 494 T
(:: <integer>,) 302.4 494 T
(init-keyword: fuel-remaining:,) 318.6 483 T
(init-value: 0;) 318.6 472 T
6 F
(// The normal operating speed of this class of vehicle) 118.8 461 T
4 F
(each-subclass slot cruising-speed :: <integer>;) 118.8 450 T
(end;) 108 439 T
(def) 108 420 T
(ine method say \050object :: <vehicle>\051) 124.2 420 T
(format\050*window*, "Vehicle %s", object.vehicle-id\051;) 118.8 409 T
(end;) 108 398 T
(def) 108 379 T
(ine class <standard-aircraft> \050<vehicle>\051) 124.2 379 T
(slot altitude) 118.8 368 T
(:: <integer>, init-keyword: altitude:;) 291.6 368 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 118.8 357 T
(end;) 108 346 T
6 F
(// Commercial aircraft may have a f) 108 327 T
(light assigned to them.) 297 327 T
4 F
(def) 108 316 T
(ine class <standard-commercial-aircraft> \050<standard-aircraft>\051) 124.2 316 T
(slot aircraft-f) 118.8 305 T
(light, init-keyword: f) 199.8 305 T
(light:, init-value: #f;) 318.6 305 T
(end;) 108 294 T
(def) 108 275 T
(ine method say \050object :: <standard-commercial-aircraft>\051;) 124.2 275 T
(let f) 118.8 264 T
(light = object.aircraft-f) 145.8 264 T
(light;) 280.8 264 T
(if \050f) 118.8 253 T
(light\051 say \050f) 145.8 253 T
(light\051) 216 253 T
(else format \050*window*, "Unscheduled Aircraft %s", object.vehicle-id\051;) 129.6 242 T
(end;) 118.8 231 T
(end;) 108 220 T
(def) 108 201 T
(ine class <B707> \050<standard-commercial-aircraft>\051) 124.2 201 T
(inherited slot cruising-speed, init-value: 368;) 118.8 190 T
(end;) 108 179 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 118
%%Page: "117" 119
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 366.18 677.67 T
2 11 Q
(1) 523.91 677.67 T
(17) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method say \050object :: <B707>\051) 124.2 642 T
(let f) 118.8 631 T
(light = aircraft-f) 145.8 631 T
(light \050object\051;) 243 631 T
(if \050f) 118.8 620 T
(light\051 next-method \050\051) 145.8 620 T
(else format \050*window*, "Unscheduled B707 %s", vehicle-id \050object\051\051;) 129.6 609 T
(end;) 118.8 598 T
(end;) 108 587 T
3 15 Q
(8.7  The) 108 549 T
4 13 Q
(select) 157.23 549 T
3 15 Q
( and) 204.03 549 T
4 13 Q
(block) 232.74 549 T
3 15 Q
( control structures) 271.74 549 T
1 11 Q
(The) 108 528.67 T
4 9.5 Q
(select) 129.16 528.67 T
1 11 Q
( and) 163.36 528.67 T
4 9.5 Q
(block) 187.49 528.67 T
1 11 Q
( contr) 215.99 528.67 T
(ol str) 243.76 528.67 T
(uctur) 268.23 528.67 T
(es ar) 294.11 528.67 T
(e very useful.) 316.44 528.67 T
4 9.5 Q
(select) 384.72 528.67 T
1 11 Q
( enables you to) 418.92 528.67 T
(de\336ne a set of conditions, and for each one de\336ne a body of code to r) 108 514.67 T
(un if that) 441.59 514.67 T
(condition is tr) 108 500.67 T
(ue.) 175.62 500.67 T
4 9.5 Q
(block) 193.02 500.67 T
1 11 Q
( enables you to do a non-local exit. In this section, we) 221.52 500.67 T
(de\336ne a very simple integer parser to illustrate the) 108 486.67 T
4 9.5 Q
(select) 356.13 486.67 T
1 11 Q
( and) 390.33 486.67 T
4 9.5 Q
(block) 414.45 486.67 T
1 11 Q
( contr) 442.95 486.67 T
(ol) 470.73 486.67 T
(str) 108 472.67 T
(uctur) 120.51 472.67 T
(es. \050Note that normally you would not need to de\336ne such a function) 146.39 472.67 T
(fr) 108 458.67 T
(om scratch, but would call a library function.\051) 115.81 458.67 T
(W) 135 444.67 T
(e will need a convenient way to expr) 144.99 444.67 T
(ess times. One convenient way to) 323.17 444.67 T
(expr) 108 430.67 T
(ess a time is with a string. For example, we would like to take the string) 129.7 430.67 T
4 9 Q
(") 108 416.67 T
4 9.5 Q
(12:30) 113.4 416.67 T
4 9 Q
(") 141.9 416.67 T
1 11 Q
( and convert it into an instance of) 147.3 416.67 T
4 9.5 Q
(<time-of-day>) 312.09 416.67 T
1 11 Q
(. Similarly) 386.19 416.67 T
(, the string) 434.72 416.67 T
4 9 Q
(") 108 402.67 T
4 9.5 Q
(+1:05) 113.4 402.67 T
4 9 Q
(") 141.9 402.67 T
1 11 Q
( expr) 147.3 402.67 T
(esses a time-of) 171.75 402.67 T
(fset \050one hour and \336ve minutes in the futur) 242.19 402.67 T
(e\051. T) 451.85 402.67 T
(o con-) 472.01 402.67 T
-0.43 (vert these strings into instances, we must parse the strings into integers, which ar) 108 388.67 P
-0.43 (e) 496.41 388.67 P
-0.43 (then stor) 108 374.67 P
-0.43 (ed in an appr) 150.38 374.67 P
-0.43 (opriate time instance. First we de\336ne) 213.71 374.67 P
4 9.5 Q
-0.89 (parse-integer) 393.26 374.67 P
1 11 Q
-0.43 (, which) 466.54 374.67 P
(will be used later in) 108 360.67 T
4 9.5 Q
(parse-time) 206.67 360.67 T
1 11 Q
(. Normally you would use a library function to) 263.67 360.67 T
(turn a string of digits into the integer the string r) 108 346.67 T
(epr) 343.8 346.67 T
(esents. Her) 359.82 346.67 T
(e a very simple) 413.74 346.67 T
(integer parser is pr) 108 332.67 T
(esented to intr) 199.79 332.67 T
(oduce the) 269.4 332.67 T
4 9.5 Q
(select) 319.67 332.67 T
1 11 Q
( and) 353.87 332.67 T
4 9.5 Q
(block) 378 332.67 T
1 11 Q
( contr) 406.5 332.67 T
(ol str) 434.27 332.67 T
(uctur) 458.73 332.67 T
(es.) 484.62 332.67 T
(The contract of the) 135 318.67 T
4 9.5 Q
(parse-integer) 228.53 318.67 T
1 11 Q
( method de\336ned below is: given a string,) 302.63 318.67 T
-0.37 (a delimiter \050which defaults to a decimal point\051, and a starting index into the string) 108 304.67 P
(\050defaulting to zer) 108 290.67 T
(o\051, this simple integer parser skips over any whitespace, r) 191.96 290.67 T
(eads) 471.13 290.67 T
(the characters out of the string, and assembles an integer up to the given delim-) 108 276.67 T
(iter) 108 262.67 T
(, or the end of the string. Some extra r) 123.59 262.67 T
(eturn values \050described below\051 ar) 306.36 262.67 T
(e also) 468.94 262.67 T
(r) 108 248.67 T
(eturned to facilitate sign detection, and multiple integer parses fr) 112.15 248.67 T
(om a complex) 427.45 248.67 T
(string \050such as a time\051.) 108 234.67 T
-0.36 (It is helpful to show the desir) 135 220.67 P
-0.36 (ed ef) 274.57 220.67 P
-0.36 (fect of this method befor) 297.69 220.67 P
-0.36 (e de\336ning it. Her) 415.03 220.67 P
-0.36 (e) 496.34 220.67 P
(ar) 108 206.67 T
(e some examples:) 117.65 206.67 T
5 9 Q
(?) 108 186 T
4 F
(parse-integer \050"12:30", delimiter: ':'\051;) 118.8 186 T
5 F
(12) 108 175 T
(#f) 108 164 T
(2) 108 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 119
%%Page: "118" 120
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(1) 72 677.67 T
(18) 77.09 677.67 T
0 9.5 Q
(8.7 The select and block control structures) 97.59 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
5 9 Q
0 X
(?) 108 642 T
4 F
(parse-integer \050"12:30", delimiter: ':' start: 3\051;) 118.8 642 T
5 F
(30) 108 631 T
(#f) 108 620 T
(5) 108 609 T
3 13 Q
(8.7.1  Method for parsing integers) 108 579.33 T
1 11 Q
(The) 108 559.67 T
4 9.5 Q
(parse-integer) 129.16 559.67 T
1 11 Q
( method is de\336ned below:) 203.26 559.67 T
6 9 Q
(// This is a very simple integer parser.) 108 539 T
4 F
(def) 108 528 T
(ine method parse-integer) 124.2 528 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051 =>) 129.6 517 T
( \050integer :: <integer>, sign, end-index :: <integer>\051;) 129.6 506 T
(block \050return\051) 118.8 495 T
(let length = size \050integer-string\051;) 129.6 484 T
(let result = #f;) 129.6 473 T
(let sign = #f;) 129.6 462 T
(let end-index = start;) 129.6 451 T
(for \050index from start below length\051) 129.6 440 T
(let char = integer-string[index];) 140.4 429 T
(select char) 140.4 418 T
6 F
(// Is the character a digit?) 151.2 407 T
4 F
('0', '1', '2', '3', '4', '5', '6', '7', '8', '9' =>) 151.2 396 T
(let value = position \050char, $digits\051;) 162 385 T
(if \050result\051) 162 374 T
6 F
(// If we have already started to generate the integer) 183.6 363 T
(// shift the result to make room for the next digit.) 183.6 352 T
4 F
(result := \050result * 10\051 + value;) 183.6 341 T
(else) 172.8 330 T
(result := value;) 183.6 319 T
(end;) 162 308 T
6 F
(// Is the character whitespace?) 151.2 297 T
4 F
(' ', '\134t', '\134n', '\134r' => #f;) 151.2 286 T
6 F
(// Is the character a sign?) 151.2 275 T
4 F
('+', '-' => if \050result | sign\051) 151.2 264 T
(format \050*window*, "Sign in illegal spot, skipping"\051) 237.6 253 T
(else) 226.8 242 T
(sign := char;) 237.6 231 T
(end;) 216 220 T
6 F
(// Is the character the specif) 151.2 209 T
(ied character to stop at when reached?) 313.2 209 T
4 F
(delimiter => return \050values \050result, sign, index\051\051;) 151.2 198 T
(otherwise => format \050*window*, "Illegal character %c, skipping",) 151.2 187 T
(char\051;) 264.6 176 T
(end select;) 140.4 165 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 120
%%Page: "119" 121
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 366.18 677.67 T
2 11 Q
(1) 523.91 677.67 T
(19) 529 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(f) 129.6 642 T
(inally return \050values \050result, sign, length\051\051;) 135 642 T
(end for;) 129.6 631 T
(end block;) 118.8 620 T
(end method parse-integer;) 108 609 T
1 11 Q
(In this method, the) 108 588.67 T
4 9.5 Q
(for) 202.67 588.67 T
1 11 Q
( loop iterates over each of the characters in) 219.77 588.67 T
4 9.5 Q
(integer-) 429.56 588.67 T
-0.7 (string) 108 574.67 P
1 11 Q
-0.34 (, starting at the index) 142.2 574.67 P
4 9.5 Q
-0.7 (start) 246.01 574.67 P
1 11 Q
-0.34 (. When ther) 274.52 574.67 P
-0.34 (e ar) 330.56 574.67 P
-0.34 (e no further characters to iterate) 347.89 574.67 P
-0.25 (over \050the end of the string is r) 108 560.67 P
-0.25 (eached\051, contr) 249.89 560.67 P
-0.25 (ol is transferr) 317.87 560.67 P
-0.25 (ed to the) 381.86 560.67 P
4 9.5 Q
-0.52 (f) 426.2 560.67 P
-0.52 (inally) 431.9 560.67 P
1 11 Q
-0.25 ( clause,) 466.1 560.67 P
-0.05 (wher) 108 546.67 P
-0.05 (e the r) 132.99 546.67 P
-0.05 (esult, sign, and ending index \050which must be past the last character of) 163.06 546.67 P
(the string\051 ar) 108 532.67 T
(e r) 170.38 532.67 T
(eturned as multiple values fr) 182.55 532.67 T
(om the method.) 322.64 532.67 T
(Inside the body of the) 135 518.67 T
4 9.5 Q
(for) 243.82 518.67 T
1 11 Q
( loop the) 260.92 518.67 T
4 9.5 Q
(select) 306.25 518.67 T
1 11 Q
( contr) 340.45 518.67 T
(ol str) 368.23 518.67 T
(uctur) 392.69 518.67 T
(e is used to exe-) 418.58 518.67 T
-0.4 (cute the appr) 108 504.67 P
-0.4 (opriate code based on the curr) 171.21 504.67 P
-0.4 (ent character being examined fr) 316.29 504.67 P
-0.4 (om the) 468.31 504.67 P
(string. If the curr) 108 490.67 T
(ent character being examined is one of the decimal digits, then) 189.95 490.67 T
(\336rst the numerical value of the digit is computed. Then if this is not the \336rst digit) 108 476.67 T
-0.05 (pr) 108 462.67 P
-0.05 (ocessed, the digit is inserted into the r) 118.76 462.67 P
-0.05 (esult, otherwise the r) 301.89 462.67 P
-0.05 (esult is initialized to) 403.41 462.67 P
-0.25 (the value of this \336rst digit. If the character is not a digit, but is instead whitespace,) 108 448.67 P
(that whitespace character is ignor) 108 434.67 T
(ed. If the character is a sign, then this could sig-) 271.09 434.67 T
(nify a time-of) 108 420.67 T
(fset, and that fact is noted assuming the sign is in a valid position.) 173.29 420.67 T
-0.37 (The in\336x operator) 135 406.67 P
4 9.5 Q
-0.76 (|) 224.16 406.67 P
1 11 Q
-0.37 ( is used to determine if either) 229.87 406.67 P
4 9.5 Q
-0.76 (result) 372 406.67 P
1 11 Q
-0.37 ( or) 406.2 406.67 P
4 9.5 Q
-0.76 (sign) 421.32 406.67 P
1 11 Q
-0.37 ( is tr) 444.12 406.67 P
-0.37 (ue \050that) 464.59 406.67 P
(is, not) 108 392.67 T
4 9.5 Q
(#f) 140.11 392.67 T
1 11 Q
(\051.) 151.51 392.67 T
-0.14 (It is important to r) 108 170.67 P
-0.14 (eturn the fact that a sign was found in the string, because other-) 196.3 170.67 P
(wise that information might be lost if the integer is positive. The time parser) 108 156.67 T
-0.08 (which uses this integer parser must distinguish between \322+1:20\323 \050which is a time-) 108 142.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 F
(Quick summary of) 141 358.67 T
4 9.5 Q
(|) 237.85 358.67 T
2 11 Q
( in\336x operator) 243.55 358.67 T
1 F
(:) 316.58 358.67 T
0 F
(ar) 322.08 358.67 T
(g1) 331.05 358.67 T
4 9.5 Q
( |) 342.05 358.67 T
0 11 Q
(ar) 359.15 358.67 T
(g2) 368.11 358.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 F
(The in\336x operator) 168 344.67 T
4 9.5 Q
(|) 258.27 344.67 T
1 11 Q
( does the \322or\323 logical operation. If either) 263.97 344.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(or both of the ar) 141 330.67 T
(guments to the) 219 330.67 T
4 9.5 Q
(|) 294.48 330.67 T
1 11 Q
( operator ar) 300.18 330.67 T
(e tr) 357 330.67 T
(ue, then) 372.86 330.67 T
4 9.5 Q
(|) 414.67 330.67 T
1 11 Q
( r) 420.37 330.67 T
(eturns) 427.27 330.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(tr) 141 316.67 T
(ue.) 148.84 316.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Note that the) 168 302.67 T
4 9.5 Q
(|) 234.58 302.67 T
1 11 Q
( operator is actually a contr) 240.28 302.67 T
(ol \337ow operator) 372.71 302.67 T
(. If) 450.14 302.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the \336rst ar) 141 288.67 T
(gument to the) 190.65 288.67 T
4 9.5 Q
(|) 261.47 288.67 T
1 11 Q
( operator is tr) 267.17 288.67 T
(ue, then the value of the) 332.8 288.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(second ar) 141 274.67 T
(gument is never computed, and the \336rst ar) 187.34 274.67 T
(gument is) 394.63 274.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
-0.42 (r) 141 260.67 P
-0.42 (eturned. If the value of the \336rst ar) 145.15 260.67 P
-0.42 (gument is false, then the value of) 305.68 260.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(the second ar) 141 246.67 T
(gument is computed and r) 205.35 246.67 T
(eturned.) 334.13 246.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The) 168 232.67 T
4 9.5 Q
(&) 189.16 232.67 T
1 11 Q
( operator behaves in a similar manner) 194.86 232.67 T
(, except its ar) 378.18 232.67 T
(gu-) 441.57 232.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(ments ar) 141 218.67 T
(e computed only until ther) 183.03 218.67 T
(e either ar) 312.88 218.67 T
(e no mor) 361.36 218.67 T
(e, or the) 404.41 218.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(value of one of the ar) 141 204.67 T
(guments is false.) 243.49 204.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
135 371.88 135 197.13 2 L
V
0.25 H
0 Z
N
486 371.88 486 197.13 2 L
V
N
134.88 372 486.12 372 2 L
V
N
134.88 197 486.12 197 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 121
%%Page: "120" 122
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(120) 72 677.67 T
0 9.5 Q
(8.7 The select and block control structures) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(of) 108 640.67 T
(fset\051 and \3221:20\323 \050which is a time-of-day\051. Thus if ther) 117.47 640.67 T
(e is an explicit sign, that) 373.25 640.67 T
(fact is r) 108 626.67 T
(eturned to the caller as the second r) 143.15 626.67 T
(eturn value.) 315.38 626.67 T
-0.34 (If the character is the delimiter \050for U.S. time this would be a colon\051, then the) 135 612.67 P
-0.12 (r) 108 598.67 P
-0.12 (esults ar) 112.15 598.67 P
-0.12 (e r) 152.44 598.67 P
-0.12 (eturned out of the block, and thus out of the method. The name of the) 164.48 598.67 P
(function which r) 108 584.67 T
(eturns out of the block is the \336rst ar) 188.49 584.67 T
(gument to the) 360.85 584.67 T
4 9.5 Q
(block) 431.66 584.67 T
1 11 Q
( contr) 460.16 584.67 T
(ol) 487.94 584.67 T
(str) 108 570.67 T
(uctur) 120.51 570.67 T
(e. In this case the function was named) 146.39 570.67 T
4 9.5 Q
(return) 333.67 570.67 T
1 11 Q
(, but you can choose any) 367.86 570.67 T
(name you wish. \050This might come in handy if you have nested blocks and you) 108 556.67 T
(sometimes you might want to r) 108 542.67 T
(eturn fr) 260.01 542.67 T
(om either the inner or outer block.\051 The) 296.8 542.67 T
(non-local exit pr) 108 528.67 T
(ovided by) 187.26 528.67 T
4 9.5 Q
(block) 239.09 528.67 T
1 11 Q
( and) 267.59 528.67 T
4 9.5 Q
(block) 291.71 528.67 T
1 11 Q
(\325s ar) 320.21 528.67 T
(gument is useful for situations) 340.33 528.67 T
(similar to this one wher) 108 514.67 T
(e the r) 222.94 514.67 T
(esult of some computation has been determined,) 253.11 514.67 T
(but it would be awkwar) 108 500.67 T
(d to arrange for the value to be r) 224.79 500.67 T
(eturned in the usual) 381.76 500.67 T
-0.33 (sequential contr) 108 486.67 P
-0.33 (ol \337ow manner) 185.33 486.67 P
-0.33 (. In this case the) 258.06 486.67 P
4 9.5 Q
-0.68 (for) 336.45 486.67 P
1 11 Q
-0.33 ( loop is simpler because it only) 353.55 486.67 P
-0.28 (needs to handle one exit situation \050end of string\051, and the) 108 472.67 P
4 9.5 Q
-0.59 (block) 385.04 472.67 P
1 11 Q
-0.28 ( constr) 413.54 472.67 P
-0.28 (uct handles) 445.81 472.67 P
(the second exit situation \050delimiter found\051.) 108 458.67 T
(The function) 135 444.67 T
4 9.5 Q
(position) 199.69 444.67 T
1 11 Q
( \050not de\336ned her) 245.29 444.67 T
(e\051 is used to \336nd the index in the) 326.05 444.67 T
(string of digits which contains the given character) 108 430.67 T
(. The index is the numerical) 349.79 430.67 T
(value of the character) 108 416.67 T
(. The constant module variable) 211.9 416.67 T
4 9.5 Q
($digits) 364.7 416.67 T
1 11 Q
( was de\336ned in Sec-) 404.6 416.67 T
(tion 8.4.1.) 108 402.67 T
-0.25 (Note that rather than just skipping over illegal characters, it would be better) 135 388.67 P
(to raise an exception. This is cover) 108 374.67 T
(ed in Chapter 10.) 274.02 374.67 T
-0.43 (Note that for lar) 135 360.67 P
-0.43 (ge methods such as) 211.88 360.67 P
4 9.5 Q
-0.9 (parse-integer) 307.64 360.67 P
1 11 Q
-0.43 (, the code can be easier to) 380.93 360.67 P
-0.01 (r) 108 346.67 P
-0.01 (ead with the optional documentation permitted after each) 112.15 346.67 P
4 9.5 Q
-0.02 (end) 396.31 346.67 P
1 11 Q
-0.01 (, as has been done) 413.41 346.67 P
(with the example above.) 108 332.67 T
3 13 Q
(8.7.2  Method for parsing time) 108 301.33 T
1 11 Q
(W) 108 281.67 T
(e show examples of calling) 117.99 281.67 T
4 9.5 Q
(parse-time) 251.33 281.67 T
1 11 Q
( befor) 308.33 281.67 T
(e de\336ning it:) 336.25 281.67 T
5 9 Q
(?) 108 261 T
4 F
(parse-time \050"12:30"\051;) 118.8 261 T
5 F
({Instance of <time-of-day>}) 108 250 T
(?) 108 231 T
4 F
(say \050parse-time \050"12:30"\051\051;) 118.8 231 T
5 F
(12:30) 108 220 T
1 11 Q
(Using the integer parser) 108 199.67 T
(, we de\336ne a simple time parser:) 224.56 199.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 122
%%Page: "121" 123
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(8 Simple Collections and Control Flow) 365.77 677.67 T
2 11 Q
(121) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// This is a very simple time parser. It is designed to ignore whitespace,) 108 642 T
(// to assume a leading + or - indicates a time-offset, that the f) 108 631 T
(irst set) 459 631 T
(// of digits is the hours and the second set of digits \050after the colon\051 is) 108 620 T
(// the minutes.) 108 609 T
4 F
(def) 108 598 T
(ine method parse-time \050time-string :: <string>\051 => \050time :: <time>\051;) 124.2 598 T
(let \050hours, sign, delim-index\051 =) 118.8 587 T
(parse-integer \050time-string, delimiter: ':'\051;) 129.6 576 T
-0.2 (let \050minutes, msign\051 = parse-integer \050time-string, start: delim-index + 1\051;) 118.8 565 P
(if \050sign\051) 118.8 554 T
(make\050<time-offset>,) 145.8 543 T
(total-seconds: encode-total-seconds\050hours, minutes, 0\051,) 172.8 532 T
(past?: \050sign = '-'\051\051;) 172.8 521 T
(else) 129.6 510 T
(make\050<time-of-day>,) 145.8 499 T
(total-seconds: encode-total-seconds\050hours, minutes, 0\051\051;) 172.8 488 T
(end;) 118.8 477 T
(end;) 108 466 T
1 11 Q
-0.04 (Although) 108 445.67 P
4 9.5 Q
-0.09 (parse-integer) 157.61 445.67 P
1 11 Q
-0.04 ( normally r) 231.71 445.67 P
-0.04 (eturns thr) 285.76 445.67 P
-0.04 (ee r) 333.5 445.67 P
-0.04 (esult values, when the minutes) 350.9 445.67 P
(ar) 108 431.67 T
(e parsed, only two values \050) 117.65 431.67 T
4 9.5 Q
(minutes) 248.16 431.67 T
1 11 Q
( and) 288.06 431.67 T
4 9.5 Q
(msign) 312.18 431.67 T
1 11 Q
(\051 ar) 340.68 431.67 T
(e captur) 356.74 431.67 T
(ed. The delimiter) 396.12 431.67 T
-0.36 (index r) 108 417.67 P
-0.36 (eturn value is thr) 141.8 417.67 P
-0.36 (own away) 224.02 417.67 P
-0.36 (. If we had pr) 273.05 417.67 P
-0.36 (ovided mor) 336.55 417.67 P
-0.36 (e variables than r) 392.93 417.67 P
-0.36 (eturn) 475.38 417.67 P
(values, those variables would have been initialized to) 108 403.67 T
4 9.5 Q
(#f) 370.86 403.67 T
1 11 Q
(. In the example above,) 382.26 403.67 T
(the variable) 108 389.67 T
4 9.5 Q
(msign) 168.07 389.67 T
1 11 Q
( is ignor) 196.57 389.67 T
(ed. It would be better to pr) 235.81 389.67 T
(ovide an err) 365.92 389.67 T
(or check which) 424.49 389.67 T
(would pr) 108 375.67 T
(event users fr) 153.24 375.67 T
(om entering signed minutes \050for example,) 218.87 375.67 T
4 9.5 Q
("12:-28") 425.18 375.67 T
1 11 Q
(\051.) 470.79 375.67 T
-0.15 (W) 135 361.67 P
-0.15 (e leave certain details about this simple time library \050such as time compar-) 144.99 361.67 P
(ison operators\051 to Chapter 1) 108 347.67 T
(1.) 243.27 347.67 T
3 15 Q
(8.8  Summary) 108 308 T
1 11 Q
(This chapter cover) 108 287.67 T
(ed:) 197.63 287.67 T
(\245) 117 267.67 T
(W) 135 267.67 T
(e used a selection of built-in classes, including: integers, characters,) 144.99 267.67 T
(strings, lists, and vectors.) 135 253.67 T
(\245) 117 233.67 T
(W) 135 233.67 T
(e used the following iteration facilities and contr) 144.99 233.67 T
(ol str) 380.14 233.67 T
(uctur) 404.6 233.67 T
(es:) 430.48 233.67 T
4 9.5 Q
(for) 445.92 233.67 T
1 11 Q
(,) 462.2 233.67 T
4 9.5 Q
(do) 467.7 233.67 T
1 11 Q
(,) 479.1 233.67 T
4 9.5 Q
(while) 135 219.67 T
1 11 Q
(,) 163.5 219.67 T
4 9.5 Q
(if) 169 219.67 T
1 11 Q
(,) 180.4 219.67 T
4 9.5 Q
(select) 185.9 219.67 T
1 11 Q
(, and) 220.1 219.67 T
4 9.5 Q
(block) 246.97 219.67 T
1 11 Q
(.) 275.47 219.67 T
(\245) 117 199.67 T
(W) 135 199.67 T
(e continued to develop the airport application. W) 144.99 199.67 T
(e started with the sim-) 383.79 199.67 T
(ple task of generating gate-ids, and pr) 135 185.67 T
(oceeded to associate gates with air-) 319.17 185.67 T
(ports. W) 135 171.67 T
(e modeled all the various parts of the airport that can hold an) 175.7 171.67 T
(air) 135 157.67 T
(craft. W) 147.85 157.67 T
(e constr) 185.31 157.67 T
(ucted a simple model of an airport by cr) 223.13 157.67 T
(eating the indi-) 417.69 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 123
%%Page: "122" 124
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(122) 72 677.67 T
0 9.5 Q
(8.8 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(vidual pieces and connecting them together) 135 640.67 T
(. W) 346.63 640.67 T
(e de\336ned the) 362.12 640.67 T
4 9.5 Q
(parse-time) 427.93 640.67 T
1 11 Q
(method, which we need for scheduling.) 135 626.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 124
%%Page: "123" 125
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(123) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(9) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(9) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Advanced Collections and) 109 566.45 T
(Contr) 108 536.45 T
(ol Flow) 184.2 536.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we show mor) 177.24 424.67 T
(e advanced use of collections and contr) 248.8 424.67 T
(ol \337ow by) 438.97 424.67 T
(pr) 108 410.67 T
(esenting several appr) 118.76 410.67 T
(oaches to landing air) 222.5 410.67 T
(craft at the airport we constr) 323.46 410.67 T
(ucted in) 461.36 410.67 T
-0.05 (Chapter 8. First, we explor) 108 396.67 P
-0.05 (e four dif) 236.57 396.67 P
-0.05 (fer) 281.28 396.67 P
-0.05 (ent techniques for conditional execution of) 294.36 396.67 P
(code using a simple landing algorithm. W) 108 382.67 T
(e then discuss the pr) 310.91 382.67 T
(oblems with that) 410.28 382.67 T
(algorithm and pr) 108 368.67 T
(esent a mor) 190.95 368.67 T
(e compr) 247.01 368.67 T
(ehensive solution.) 286.39 368.67 T
3 15 Q
(9.1  Simple landing and four approaches) 108 329 T
1 11 Q
(W) 108 308.67 T
(e name the landing function) 117.99 308.67 T
4 9.5 Q
(land-aircraft) 257.47 308.67 T
1 11 Q
(. This function takes as ar) 331.57 308.67 T
(guments) 454.8 308.67 T
-0 (the air) 108 294.67 P
-0 (craft, airport, and curr) 138.85 294.67 P
-0 (ent time-of-day) 246.8 294.67 P
-0 (, and it describes the time that the air-) 320.69 294.67 P
-0.24 (craft will arrive at each step of the landing. For example, suppose that we have an) 108 280.67 P
(airline named Keystone \050code KN\051 and a \337ight 42 for that airline, and suppose) 108 266.67 T
(that \337ight 42 is associated with an instance of the Boeing 707 class that is located) 108 252.67 T
(20 minutes away fr) 108 238.67 T
(om the Belefonte airport. When we call) 200.82 238.67 T
4 9.5 Q
(land-aircraft) 393.08 238.67 T
1 11 Q
(, the) 467.18 238.67 T
(r) 108 224.67 T
(esults ar) 112.15 224.67 T
(e as follows:) 152.56 224.67 T
5 9 Q
(?) 108 204 T
4 F
( land-aircraft \050b707-instance, *airport*,) 113.4 204 T
(time: make \050<time-of-day>, hours: 8, minutes: 13\051\051;) 199.8 193 T
5 F
(8:33: KN42 at Runway 11R-29L) 108 182 T
(8:46: KN42 at Taxiway Echo) 108 171 T
(8:50: KN42 at Gate A1) 108 160 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 125
%%Page: "124" 126
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(124) 72 677.67 T
0 9.5 Q
(9.1 Simple landing and four approaches) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(Befor) 108 640.67 T
(e implementing) 133.81 640.67 T
4 9.5 Q
(land-aircraft) 213.26 640.67 T
1 11 Q
(, we need to de\336ne a useful time constant,) 287.36 640.67 T
4 9.5 Q
($midnight) 108 626.67 T
1 11 Q
(, and a helper method,) 159.3 626.67 T
4 9.5 Q
(say-step) 271.47 626.67 T
1 11 Q
(:) 317.07 626.67 T
4 9 Q
(def) 108 606 T
(ine constant $midnight = make \050<time-of-day>, hours: 0, minutes: 0\051;) 124.2 606 T
(// prints the progress of the landing as each step is taken) 108 587 T
(def) 108 576 T
(ine method say-step \050time) 124.2 576 T
(:: <time-of-day>,) 286.2 576 T
(aircraft :: <aircraft>,) 237.6 565 T
(storage) 237.6 554 T
(:: <vehicle-storage>\051 => \050\051) 286.2 554 T
(if \050storage\051) 118.8 543 T
(say \050time\051;) 129.6 532 T
(format \050*window*, ": "\051;) 129.6 521 T
(say \050aircraft\051;) 129.6 510 T
(format \050*window*, " at "\051;) 129.6 499 T
(say \050storage\051;) 129.6 488 T
(end;) 118.8 477 T
(values \050\051;) 118.8 466 T
(end;) 108 455 T
1 11 Q
(The following sections show four appr) 108 434.67 T
(oaches, each one illustrating a dif) 295.57 434.67 T
(fer) 457.05 434.67 T
(ent) 470.13 434.67 T
(style of using Dylan. The appr) 108 420.67 T
(oaches pr) 255.04 420.67 T
(ogr) 301.27 420.67 T
(ess fr) 317.54 420.67 T
(om using simple contr) 342.7 420.67 T
(ol str) 451.36 420.67 T
(uc-) 475.83 420.67 T
(tur) 108 406.67 T
(es to genuine object-oriented pr) 122.37 406.67 T
(ogramming. If you ar) 275.8 406.67 T
(e new to object-oriented) 379.69 406.67 T
(pr) 108 392.67 T
(ogramming, this pr) 118.76 392.67 T
(ogr) 212.73 392.67 T
(ession can help you understand how to migrate fr) 229 392.67 T
(om a) 471.19 392.67 T
(traditional language into the object-oriented style. Do not stop after learning the) 108 378.67 T
(\336rst, second, or thir) 108 364.67 T
(d appr) 202.63 364.67 T
(oach!) 234.97 364.67 T
3 13 Q
(9.1.1  First approach \321 using) 108 333.33 T
4 F
(if) 259.67 333.33 T
3 F
(,) 275.27 333.33 T
4 F
(elseif) 281.2 333.33 T
3 F
(, and) 328 333.33 T
4 F
(else) 355.84 333.33 T
1 11 Q
(In the \336rst appr) 108 313.67 T
(oach to landing, we use the combination of) 183.74 313.67 T
4 9.5 Q
(if) 395.33 313.67 T
1 11 Q
(,) 406.73 313.67 T
4 9.5 Q
(elseif) 412.23 313.67 T
1 11 Q
(, and) 446.43 313.67 T
4 9.5 Q
(else) 473.3 313.67 T
1 11 Q
(as the primary contr) 108 299.67 T
(ol str) 206.53 299.67 T
(uctur) 230.99 299.67 T
(e to separate each major step in the landing) 256.87 299.67 T
(sequence. The major steps ar) 108 285.67 T
(e:) 247.29 285.67 T
2 F
(1.) 117 265.67 T
1 F
(Fly to the airport and land on the r) 135 265.67 T
(unway) 303.24 265.67 T
(.) 335.85 265.67 T
2 F
(2.) 117 245.67 T
1 F
(Slow down on the r) 135 245.67 T
(unway and r) 230.38 245.67 T
(each the taxiway) 292.48 245.67 T
(.) 372.82 245.67 T
2 F
(3.) 117 225.67 T
1 F
(T) 135 225.67 T
(ravel on the taxiway to the gate.) 140.75 225.67 T
(W) 108 205.67 T
(e use r) 117.99 205.67 T
(ecursion \050) 149.47 205.67 T
4 9.5 Q
(land-aircraft) 197.29 205.67 T
1 11 Q
( calling itself with modi\336ed ar) 271.39 205.67 T
(guments\051 as the) 417.52 205.67 T
(technique to r) 108 191.67 T
(epeat execution until the air) 175.04 191.67 T
(craft r) 310.33 191.67 T
(eaches the gate.) 339.21 191.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 126
%%Page: "125" 127
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(125) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method land-aircraft) 124.2 642 T
6 F
(// 1) 500.4 642 T
4 F
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 140.4 631 T
6 F
(// 2) 500.4 631 T
4 F
(#key storage = #f, time = $midnight\051) 145.8 620 T
6 F
(// 3) 500.4 620 T
4 F
(say-step \050time, aircraft, storage\051;) 118.8 609 T
6 F
(// 4) 500.4 609 T
4 F
(let \050next-storage, transit-time\051 =) 118.8 598 T
6 F
(// 5) 500.4 598 T
4 F
(if \050storage = #f\051) 129.6 587 T
6 F
(// 6) 500.4 587 T
4 F
(values \050airport.runway-instances[0],) 151.2 576 T
6 F
(// 7) 500.4 576 T
4 F
(f) 194.4 565 T
(lying-time \050aircraft, airport\051\051;) 199.8 565 T
6 F
(// 8) 500.4 565 T
4 F
(elseif \050instance? \050storage, <runway>\051\051) 140.4 554 T
6 F
(// 9) 500.4 554 T
4 F
(values \050f) 151.2 543 T
(ind-connection \050storage, <taxiway>\051,) 199.8 543 T
6 F
(// 10) 495 543 T
4 F
(brake-time \050aircraft\051\051;) 194.4 532 T
6 F
(// 11) 495 532 T
4 F
(elseif \050instance? \050storage, <taxiway>\051\051) 140.4 521 T
6 F
(// 12) 495 521 T
4 F
(values \050f) 151.2 510 T
(ind-connection \050storage, <gate>\051,) 199.8 510 T
6 F
(// 13) 495 510 T
4 F
(gate-time \050aircraft\051\051;) 194.4 499 T
6 F
(// 14) 495 499 T
4 F
(else values \050#f, #f\051;) 140.4 488 T
6 F
(// 15) 495 488 T
4 F
(end if;) 129.6 477 T
6 F
(// 16) 495 477 T
4 F
(if \050next-storage\051) 118.8 466 T
6 F
(// 17) 495 466 T
4 F
(next-storage.vehicle-currently-occupying := aircraft;) 129.6 455 T
6 F
(// 18) 495 455 T
4 F
(if \050storage\051) 129.6 444 T
6 F
(// 19) 495 444 T
4 F
(storage.vehicle-currently-occupying := #f;) 140.4 433 T
6 F
(// 20) 495 433 T
4 F
(end if;) 129.6 422 T
6 F
(// 21) 495 422 T
4 F
(land-aircraft \050aircraft, airport, storage: next-storage,) 129.6 411 T
6 F
(// 22) 495 411 T
4 F
(time: time + transit-time\051;) 210.6 400 T
6 F
(// 23) 495 400 T
4 F
(end if;) 118.8 389 T
6 F
(// 24) 495 389 T
4 F
(end method land-aircraft;) 108 378 T
6 F
(// 25) 495 378 T
1 11 Q
-0.39 (In the pr) 108 357.67 P
-0.39 (eceding method, if ther) 148.84 357.67 P
-0.39 (e is a vehicle container in the variable) 260.49 357.67 P
4 9.5 Q
-0.81 (storage) 442.19 357.67 P
1 11 Q
-0.39 (, we) 482.09 357.67 P
(display the curr) 108 343.67 T
(ent position of the air) 184.78 343.67 T
(craft r) 288.49 343.67 T
(elative to a vehicle storage container) 317.36 343.67 T
(,) 493.15 343.67 T
(and the time and air) 108 329.67 T
(craft information \050line 4\051. In line 5 we initialize the local vari-) 206.12 329.67 T
-0.75 (ables) 108 315.67 P
4 9.5 Q
-1.55 (next-storage) 134.72 315.67 P
1 11 Q
-0.75 ( and) 203.12 315.67 P
4 9.5 Q
-1.55 (transit-time) 225.74 315.67 P
1 11 Q
-0.75 ( to the two values which will be r) 294.14 315.67 P
-0.75 (eturned by) 449.58 315.67 P
(executing the) 108 301.67 T
4 9.5 Q
(if-elseif-else) 175.79 301.67 T
1 11 Q
( contr) 255.59 301.67 T
(ol str) 283.37 301.67 T
(uctur) 307.83 301.67 T
(e on lines 6 though 16. In Dylan,) 333.71 301.67 T
(unlike other languages, contr) 108 287.67 T
(ol str) 249.86 287.67 T
(uctur) 274.32 287.67 T
(es like) 300.2 287.67 T
4 9.5 Q
(if) 333.42 287.67 T
1 11 Q
( may r) 344.82 287.67 T
(eturn one or mor) 375.8 287.67 T
(e values) 458.18 287.67 T
(to the part of the pr) 108 273.67 T
(ogram which used the contr) 202.32 273.67 T
(ol str) 338.64 273.67 T
(uctur) 363.1 273.67 T
(e \050in this case) 388.98 273.67 T
4 9.5 Q
(let) 456.69 273.67 T
1 11 Q
(\051.) 473.79 273.67 T
(In lines 6-16, we compute what the next container will be, and how long it) 135 259.67 T
(will take \050r) 108 245.67 T
(epr) 160.56 245.67 T
(esented as a) 176.59 245.67 T
4 9.5 Q
(<time-offset>) 237.68 245.67 T
1 11 Q
( instance\051 for the air) 311.78 245.67 T
(craft to r) 408.47 245.67 T
(each that) 449.69 245.67 T
(container) 108 231.67 T
(. In lines 6-16, we use) 152.78 231.67 T
4 9.5 Q
(if) 258.8 231.67 T
1 11 Q
(,) 270.2 231.67 T
4 9.5 Q
(elseif) 275.7 231.67 T
1 11 Q
(, and) 309.9 231.67 T
4 9.5 Q
(else) 336.77 231.67 T
1 11 Q
( as described below:) 359.57 231.67 T
(If the air) 135 217.67 T
(craft is not curr) 175.98 217.67 T
(ently in any storage container \050line 6\051, we assume) 250.07 217.67 T
(that the air) 108 203.67 T
(craft is airborne. In this case:) 160.68 203.67 T
(\245) 117 183.67 T
(The next storage container is a r) 135 183.67 T
(unway) 289.55 183.67 T
(. In this method, we choose the \336rst) 322.15 183.67 T
(r) 135 169.67 T
(unway at the airport.) 139.26 169.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 127
%%Page: "126" 128
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(126) 72 677.67 T
0 9.5 Q
(9.1 Simple landing and four approaches) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(\245) 117 640.67 T
(The time depends on how long it will take for the air) 135 640.67 T
(craft to get to the air-) 390.96 640.67 T
(port, plus how long it takes for the air) 135 626.67 T
(craft\325s wheels to touch down on the) 318.76 626.67 T
(r) 135 612.67 T
(unway) 139.26 612.67 T
(. This computation is performed by the method) 171.86 612.67 T
4 9.5 Q
(f) 404.71 612.67 T
(lying-time) 410.41 612.67 T
1 11 Q
( \050not) 467.41 612.67 T
(de\336ned her) 135 598.67 T
(e\051, which is based on the position of the airport, the position of) 190.6 598.67 T
(the air) 135 584.67 T
(craft \050including altitude of the air) 165.85 584.67 T
(craft\051, the cr) 327.48 584.67 T
(uising speed of the air-) 385.77 584.67 T
(craft, and many other factors.) 135 570.67 T
(If the air) 108 550.67 T
(craft is not in the air) 148.98 550.67 T
(, but alr) 245.65 550.67 T
(eady on the r) 283.05 550.67 T
(unway \050line 9\051:) 346.83 550.67 T
(\245) 117 530.67 T
(The next storage container is a taxiway) 135 530.67 T
(.) 322.83 530.67 T
(\245) 117 510.67 T
(The time depends on how fast the air) 135 510.67 T
(craft can brake \050under curr) 315.6 510.67 T
(ent condi-) 445.72 510.67 T
(tions\051, plus how long it will take to get to the start of the taxiway) 135 496.67 T
(. The) 447.77 496.67 T
(method) 135 482.67 T
4 9.5 Q
(brake-time) 175.45 482.67 T
1 11 Q
( \050not de\336ned her) 232.45 482.67 T
(e\051 computes the time it will take this) 313.21 482.67 T
(particular air) 135 468.67 T
(craft to slow to taxi speed, and taxi to the end of the r) 198.4 468.67 T
(unway) 456.62 468.67 T
(.) 489.22 468.67 T
(The) 135 454.67 T
4 9.5 Q
(f) 156.16 454.67 T
(ind-connection) 161.86 454.67 T
1 11 Q
( method \050not de\336ned her) 241.66 454.67 T
(e\051 simply selects the \336rst) 362.87 454.67 T
(connected taxiway to the r) 135 440.67 T
(unway) 263.28 440.67 T
(.) 295.89 440.67 T
(If the air) 108 420.67 T
(craft is neither in the air) 148.98 420.67 T
(, nor on the r) 264.13 420.67 T
(unway) 326.56 420.67 T
(, but is at the start of the taxi-) 359.16 420.67 T
(way \050line 12\051:) 108 406.67 T
(\245) 117 386.67 T
(The next storage container is the gate.) 135 386.67 T
(\245) 117 366.67 T
(The time is computed by the) 135 366.67 T
4 9.5 Q
(gate-time) 276.43 366.67 T
1 11 Q
( function \050not de\336ned her) 327.73 366.67 T
(e\051, which) 452.02 366.67 T
(r) 135 352.67 T
(eturns an instance of) 139.15 352.67 T
4 9.5 Q
(<time-offset>) 242.52 352.67 T
1 11 Q
( that r) 316.62 352.67 T
(epr) 345.35 352.67 T
(esents how long the air) 361.37 352.67 T
(craft) 473.64 352.67 T
(will take to transition fr) 135 338.67 T
(om the taxiway to the gate.) 249.54 338.67 T
-0.24 (Otherwise, we must be at the gate alr) 108 318.67 P
-0.24 (eady \050line 15\051, so we r) 286.96 318.67 P
-0.24 (eturn false for both the) 391.55 318.67 P
(next storage container and the time.) 108 304.67 T
-0.3 (Now we examine the next storage container that was just computed. If ther) 135 290.67 P
-0.3 (e) 496.28 290.67 P
(is a next stage of the landing pr) 108 276.67 T
(ocess \050line 17\051, then we place the air) 259.91 276.67 T
(craft in that) 433.47 276.67 T
-0.12 (container \050line 18\051, and r) 108 262.67 P
-0.12 (emove the air) 226.05 262.67 P
-0.12 (craft fr) 291.89 262.67 P
-0.12 (om its curr) 324.32 262.67 P
-0.12 (ent container) 376.76 262.67 P
-0.12 (, if any \050lines) 439.43 262.67 P
(19-20\051. W) 108 248.67 T
(e then call the) 152.81 248.67 T
4 9.5 Q
(land-aircraft) 222.79 248.67 T
1 11 Q
( method with updated information about) 296.89 248.67 T
(what time it is, and the storage container in which the air) 108 234.67 T
(craft curr) 384.82 234.67 T
(ently r) 429.55 234.67 T
(esides) 461.02 234.67 T
(\050lines 22-23\051. If ther) 108 220.67 T
(e is no next stage, then we ar) 201.5 220.67 T
(e \336nished.) 340.86 220.67 T
(When a method calls itself \050as) 135 206.67 T
4 9.5 Q
(land-aircraft) 282.63 206.67 T
1 11 Q
( does at the end\051 we say the) 356.73 206.67 T
(method) 108 192.67 T
2 F
(recurses) 148.45 192.67 T
1 F
(. Recursion is a perfectly acceptable contr) 189.38 192.67 T
(ol str) 389.5 192.67 T
(uctur) 413.96 192.67 T
(e when used) 439.85 192.67 T
(in the right cir) 108 178.67 T
(cumstances. Many times it can simplify certain algorithms such as) 176.99 178.67 T
(tr) 108 164.67 T
(ee walks. Recursion is both safe and ef) 115.73 164.67 T
(\336cient in Dylan.) 302.07 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 128
%%Page: "127" 129
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(127) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(9.1.2  Second approach \321 using) 108 639.33 T
4 F
(case) 275.08 639.33 T
1 11 Q
(The highly stylized) 108 619.67 T
4 9.5 Q
(if-elseif-else) 204.36 619.67 T
1 11 Q
( pattern that forms the cor) 284.16 619.67 T
(e of the contr) 410.97 619.67 T
(ol) 474.44 619.67 T
(str) 108 605.67 T
(uctur) 120.51 605.67 T
(e of the method in Section 9.1.1 is generally useful. Dylan pr) 146.39 605.67 T
(ovides the) 437.85 605.67 T
4 9.5 Q
(case) 108 591.67 T
1 11 Q
( contr) 130.8 591.67 T
(ol constr) 158.57 591.67 T
(uct to captur) 200.33 591.67 T
(e this common contr) 261.89 591.67 T
(ol \337ow pattern. Deciding) 361.01 591.67 T
-0.05 (whether to us the) 108 577.67 P
4 9.5 Q
-0.1 (if-elseif-else) 195.4 577.67 P
1 11 Q
-0.05 ( pattern or) 275.2 577.67 P
4 9.5 Q
-0.1 (case) 328.95 577.67 P
1 11 Q
-0.05 ( is lar) 351.75 577.67 P
-0.05 (gely a matter of style. For) 377.87 577.67 P
(conditionals with many arms,) 108 563.67 T
4 9.5 Q
(case) 255.84 563.67 T
1 11 Q
( can be clear) 278.64 563.67 T
(er than) 338.03 563.67 T
4 9.5 Q
(if-elseif-else) 375.03 563.67 T
1 11 Q
(. The fol-) 454.83 563.67 T
(lowing method is equivalent to the method in Section 9.1.1, but we use) 108 549.67 T
4 9.5 Q
(case) 454.18 549.67 T
1 11 Q
(instead of) 108 535.67 T
4 9.5 Q
(if-elseif-else) 158.51 535.67 T
1 11 Q
(:) 238.31 535.67 T
4 9 Q
(def) 108 515 T
(ine method land-aircraft) 124.2 515 T
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 140.4 504 T
(#key storage = #f, time = $midnight\051) 145.8 493 T
(say-step \050time, aircraft, storage\051;) 118.8 482 T
(let \050next-storage, transit-time\051 =) 118.8 471 T
(case storage = #f =>) 129.6 460 T
(values \050airport.runway-instances[0],) 167.4 449 T
(f) 210.6 438 T
(lying-time \050aircraft, airport\051\051;) 216 438 T
(instance? \050storage, <runway>\051 =>) 156.6 427 T
(values \050f) 167.4 416 T
(ind-connection \050storage, <taxiway>\051,) 216 416 T
(brake-time \050aircraft\051\051;) 210.6 405 T
(instance? \050storage, <taxiway>\051 =>) 156.6 394 T
(values \050f) 167.4 383 T
(ind-connection \050storage, <gate>\051, gate-time \050aircraft\051\051;) 216 383 T
(otherwise => values \050#f, #f\051;) 156.6 372 T
(end case;) 129.6 361 T
(if \050next-storage\051) 118.8 350 T
(next-storage.vehicle-currently-occupying := aircraft;) 129.6 339 T
(if \050storage\051) 129.6 328 T
(storage.vehicle-currently-occupying := #f;) 140.4 317 T
(end if;) 129.6 306 T
(land-aircraft \050aircraft, airport, storage: next-storage,) 129.6 295 T
(time: time + transit-time\051;) 210.6 284 T
(end if;) 118.8 273 T
(end method land-aircraft;) 108 262 T
1 11 Q
-0.34 (In the) 108 241.67 P
4 9.5 Q
-0.7 (case) 138.19 241.67 P
1 11 Q
-0.34 ( constr) 160.99 241.67 P
-0.34 (uct in the pr) 193.2 241.67 P
-0.34 (eceding method, we use r) 251.16 241.67 P
-0.34 (oughly the same pr) 374.28 241.67 P
-0.34 (edicate) 467.16 241.67 P
(\050is this an instance of x?\051 for the second and thir) 108 227.67 T
(d arms of the) 339.76 227.67 T
4 9.5 Q
(case) 406.63 227.67 T
1 11 Q
( contr) 429.43 227.67 T
(ol str) 457.2 227.67 T
(uc-) 481.67 227.67 T
(tur) 108 213.67 T
(e. In the \336rst clause, we ar) 122.37 213.67 T
(e not checking for a particular type, but rather for a) 248.49 213.67 T
-0.01 (particular object \050the canonical value for false,) 108 199.67 P
4 9.5 Q
-0.03 (#f) 334.13 199.67 P
1 11 Q
-0.01 (\051. Note that we can take any par-) 345.53 199.67 P
(ticular object, and turn it into a type using the) 108 185.67 T
4 9.5 Q
(singleton) 332.93 185.67 T
1 11 Q
( function. The type) 384.23 185.67 T
-0 (matches only that particular object. \050Note that this type is not a class.\051 So it is pos-) 108 171.67 P
(sible to think of the above contr) 108 157.67 T
(ol str) 261.24 157.67 T
(uctur) 285.7 157.67 T
(e completely in terms of testing the) 311.59 157.67 T
(object to see what type it is. This fact leads dir) 108 143.67 T
(ectly to the thir) 330.41 143.67 T
(d appr) 403.9 143.67 T
(oach.) 436.24 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 129
%%Page: "128" 130
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(128) 72 677.67 T
0 9.5 Q
(9.1 Simple landing and four approaches) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(9.1.3  Third approach \321 using) 108 639.33 T
4 F
(select) 263.22 639.33 T
1 11 Q
(The) 108 619.67 T
4 9.5 Q
(select) 129.16 619.67 T
1 11 Q
( constr) 163.36 619.67 T
(uct \050intr) 195.91 619.67 T
(oduced in Section 8.7, page 1) 234.76 619.67 T
(17\051 normally uses the) 374.37 619.67 T
4 9.5 Q
(==) 481 619.67 T
1 11 Q
-0.62 (pr) 108 605.67 P
-0.62 (edicate. However) 118.76 605.67 P
-0.62 (, we can cause it to use the) 202.68 605.67 P
4 9.5 Q
-1.28 (instance?) 328.86 605.67 P
1 11 Q
-0.62 ( pr) 380.16 605.67 P
-0.62 (edicate by using the) 393.05 605.67 P
4 9.5 Q
-1.28 (by) 490.47 605.67 P
1 11 Q
-0.22 (option, which enables us to specify the comparison pr) 108 591.67 P
-0.22 (edicate. Any pr) 367.88 591.67 P
-0.22 (edicate spec-) 441.95 591.67 P
(i\336ed using the) 108 577.67 T
4 9.5 Q
(by) 180.37 577.67 T
1 11 Q
( clause will be passed two ar) 191.77 577.67 T
(gument. The \336rst ar) 330.39 577.67 T
(gument will) 426.42 577.67 T
-0.01 (always be the ar) 108 563.67 P
-0.01 (gument to) 186.62 563.67 P
4 9.5 Q
-0.03 (select) 239.4 563.67 P
1 11 Q
-0.01 ( prior to the) 273.6 563.67 P
4 9.5 Q
-0.03 (by) 333.9 563.67 P
1 11 Q
-0.01 ( clause \050the dispatch value\051. The) 345.3 563.67 P
(second ar) 108 549.67 T
(gument to the pr) 154.34 549.67 T
(edicate will be value of the \336rst part of each clause) 235.92 549.67 T
(befor) 108 535.67 T
(e the) 133.17 535.67 T
4 9.5 Q
(=>) 159.19 535.67 T
1 11 Q
( separator) 170.59 535.67 T
(. The pr) 218.36 535.67 T
(edicate will be called with the dispatch value and) 255.78 535.67 T
(the \336rst part of each clause until the pr) 108 521.67 T
(edicate speci\336ed in the by clause r) 295.46 521.67 T
(eturns a) 461.02 521.67 T
(tr) 108 507.67 T
(ue value. The value r) 115.84 507.67 T
(eturned by select will then be the r) 217.69 507.67 T
(esult of executing the) 385.43 507.67 T
(r) 108 493.67 T
(est of the successful clause. If the speci\336ed pr) 112.15 493.67 T
(edicate never r) 331.31 493.67 T
(eturns a tr) 402.89 493.67 T
(ue value) 452.63 493.67 T
(for any clause, and an otherwise clause exists, then that clause is executed.) 108 479.67 T
(The following method is equivalent to the land-air) 135 465.67 T
(craft methods in Section) 379.82 465.67 T
(9.1.1 and Section 9.1.2, but this method uses the) 108 451.67 T
4 9.5 Q
(select) 341.58 451.67 T
1 11 Q
( contr) 375.79 451.67 T
(ol str) 403.56 451.67 T
(uctur) 428.02 451.67 T
(e and the) 453.91 451.67 T
4 9.5 Q
(singleton) 108 437.67 T
1 11 Q
( function:) 159.3 437.67 T
4 9 Q
(def) 108 417 T
(ine method land-aircraft) 124.2 417 T
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 140.4 406 T
(#key storage = #f, time = $midnight\051) 145.8 395 T
(say-step \050time, aircraft, storage\051;) 118.8 384 T
(let \050next-storage, transit-time\051 =) 118.8 373 T
(select \050storage by instance?\051) 129.6 362 T
(singleton \050#f\051 =>) 140.4 351 T
(values \050airport.runway-instances[0],) 151.2 340 T
(f) 194.4 329 T
(lying-time\050aircraft, airport\051\051;) 199.8 329 T
(<runway> =>) 140.4 318 T
(values \050f) 151.2 307 T
(ind-connection \050storage, <taxiway>\051,) 199.8 307 T
(brake-time \050aircraft\051\051;) 194.4 296 T
(<taxiway> =>) 140.4 285 T
(values \050f) 145.8 274 T
(ind-connection \050storage, <gate>\051, gate-time \050aircraft\051\051;) 194.4 274 T
(otherwise => values \050#f, #f\051;) 140.4 263 T
(end select;) 129.6 252 T
(if \050next-storage\051) 118.8 241 T
(next-storage.vehicle-currently-occupying := aircraft;) 129.6 230 T
(if \050storage\051) 129.6 219 T
(storage.vehicle-currently-occupying := #f;) 140.4 208 T
(end if;) 129.6 197 T
(land-aircraft \050aircraft, airport, storage: next-storage,) 129.6 186 T
(time: time + transit-time\051;) 210.6 175 T
(end if;) 118.8 164 T
(end method land-aircraft;) 108 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 130
%%Page: "129" 131
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(129) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The) 108 640.67 T
4 9.5 Q
(select) 129.16 640.67 T
1 11 Q
( constr) 163.36 640.67 T
(uct is mor) 195.91 640.67 T
(e concise when you use the same pr) 244.25 640.67 T
(edicate with a) 417.8 640.67 T
(particular \336rst ar) 108 626.67 T
(gument, and you want to execute dif) 190.2 626.67 T
(fer) 368.78 626.67 T
(ent code depending on) 381.86 626.67 T
(whether the pr) 108 612.67 T
(edicate is tr) 179.96 612.67 T
(ue for dif) 235.6 612.67 T
(fer) 280.4 612.67 T
(ent values of the second ar) 293.48 612.67 T
(gument to the) 422.49 612.67 T
-0.24 (pr) 108 598.67 P
-0.24 (edicate. Y) 118.76 598.67 P
-0.24 (ou should use) 164.77 598.67 P
4 9.5 Q
-0.5 (case) 235.13 598.67 P
1 11 Q
-0.24 ( instead of) 257.93 598.67 P
4 9.5 Q
-0.5 (select) 310.46 598.67 P
1 11 Q
-0.24 ( if you cannot use the same pr) 344.66 598.67 P
-0.24 (ed-) 488.35 598.67 P
(icate for each arm, or if the \336rst ar) 108 584.67 T
(gument to the pr) 272.19 584.67 T
(edicate is not always the same.) 353.76 584.67 T
3 13 Q
(9.1.4  Fourth approach \321 using generic functions) 108 553.33 T
1 11 Q
(Finally) 108 533.67 T
(, it becomes obvious that the code is performing type dispatch, a task best) 140.52 533.67 T
(done by generic functions, which ar) 108 519.67 T
(e quite good at it. In the fourth appr) 281.73 519.67 T
(oach, we) 456.19 519.67 T
(r) 108 505.67 T
(ewrite the) 112.15 505.67 T
4 9.5 Q
(land-aircraft) 163.75 505.67 T
1 11 Q
( method to call the generic function) 237.85 505.67 T
4 9.5 Q
(next-landing-) 412.69 505.67 T
(step) 108 491.67 T
1 11 Q
(, which r) 130.8 491.67 T
(eturns dif) 173.26 491.67 T
(fer) 220.3 491.67 T
(ent r) 233.38 491.67 T
(esults depending on the type of vehicle container) 255.53 491.67 T
(instance in the) 108 477.67 T
4 9.5 Q
(storage) 181.02 477.67 T
1 11 Q
( variable.) 220.92 477.67 T
4 9 Q
(def) 108 457 T
(ine method land-aircraft) 124.2 457 T
(\050aircraft :: <standard-aircraft>, airport :: <airport>,) 140.4 446 T
(#key storage = #f, time = $midnight\051) 145.8 435 T
(say-step \050time, aircraft, storage\051;) 118.8 424 T
(let \050next-storage, transit-time\051 =) 118.8 413 T
(next-landing-step \050storage, aircraft, airport\051;) 129.6 402 T
(if \050next-storage\051) 118.8 391 T
(next-storage.vehicle-currently-occupying := aircraft;) 129.6 380 T
(if \050storage\051) 129.6 369 T
(storage.vehicle-currently-occupying := #f;) 140.4 358 T
(end if;) 129.6 347 T
(land-aircraft \050aircraft, airport, storage: next-storage,) 129.6 336 T
(time: time + transit-time\051\051;) 210.6 325 T
(end if;) 118.8 314 T
(end method land-aircraft;) 108 303 T
(def) 108 284 T
(ine method next-landing-step \050storage) 124.2 284 T
(:: singleton \050#f\051,) 334.8 284 T
(aircraft) 286.2 273 T
(:: <standard-aircraft>,) 334.8 273 T
(airport) 286.2 262 T
(:: <airport>\051) 334.8 262 T
(values \050airport.runway-instances[0], f) 118.8 251 T
(lying-time \050aircraft, airport\051\051;) 324 251 T
(end;) 108 240 T
(def) 108 221 T
(ine method next-landing-step \050storage) 124.2 221 T
(:: <runway>,) 334.8 221 T
(aircraft) 286.2 210 T
(:: <standard-aircraft>,) 334.8 210 T
(airport) 286.2 199 T
(:: <airport>\051) 334.8 199 T
(values \050f) 118.8 188 T
(ind-connection \050storage, <taxiway>\051, brake-time \050aircraft\051\051;) 167.4 188 T
(end;) 108 177 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 131
%%Page: "130" 132
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(130) 72 677.67 T
0 9.5 Q
(9.2 Need for an improved landing algorithm) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method next-landing-step \050storage) 124.2 642 T
(:: <taxiway>,) 334.8 642 T
(aircraft) 286.2 631 T
(:: <standard-aircraft>,) 334.8 631 T
(airport) 286.2 620 T
(:: <airport>\051) 334.8 620 T
(values \050f) 118.8 609 T
(ind-connection \050storage, <gate>\051, gate-time \050aircraft\051\051;) 167.4 609 T
(end;) 108 598 T
(def) 108 579 T
(ine method next-landing-step \050storage) 124.2 579 T
(:: <gate>,) 334.8 579 T
(aircraft) 286.2 568 T
(:: <standard-aircraft>,) 334.8 568 T
(airport) 286.2 557 T
(:: <airport>\051) 334.8 557 T
(values \050#f, #f\051;) 118.8 546 T
(end;) 108 535 T
1 11 Q
(This appr) 108 514.67 T
(oach is better in several important ways. The) 154.63 514.67 T
4 9.5 Q
(land-aircraft) 375.06 514.67 T
1 11 Q
( method is) 449.16 514.67 T
(now simpler and easier to follow) 108 500.67 T
(. Mor) 267.04 500.67 T
(e importantly) 293.1 500.67 T
(, it is now easier to customize) 358.16 500.67 T
(and extend the landing sequence. For example, general aviation air) 108 486.67 T
(craft usually) 433.41 486.67 T
(do not \337y dir) 108 472.67 T
(ectly to the r) 171.84 472.67 T
(unway and touch down. Often they \336rst \337y in a r) 232.26 472.67 T
(ectan-) 471.01 472.67 T
(gular pattern ar) 108 458.67 T
(ound the airport. It would be easy to r) 184.24 458.67 T
(epr) 369.27 458.67 T
(esent each piece of that) 385.3 458.67 T
(pattern as a vehicle container) 108 444.67 T
(, and add those steps to the landing pr) 249.18 444.67 T
(ocedur) 435.37 444.67 T
(e by) 469.03 444.67 T
-0.08 (adding several) 108 430.67 P
4 9.5 Q
-0.17 (next-landing-step) 182.46 430.67 P
1 11 Q
-0.08 ( methods. By isolating the main dispatch loop) 279.36 430.67 P
(fr) 108 416.67 T
(om the particular steps involved in landing the air) 115.81 416.67 T
(craft, the softwar) 359.87 416.67 T
(e has signi\336-) 442.09 416.67 T
(cantly better modularity) 108 402.67 T
(.) 225.13 402.67 T
(Note that the \336nal de\336nitions for landing the air) 135 388.67 T
(craft ar) 368.86 388.67 T
(e tighter) 403.23 388.67 T
(. If for some) 442.95 388.67 T
(r) 108 374.67 T
(eason the) 112.15 374.67 T
4 9.5 Q
(storage) 160.74 374.67 T
1 11 Q
( variable is ever initialized to something other than the) 200.65 374.67 T
(expected classes of instances, the appr) 108 360.67 T
(opriate err) 293 360.67 T
(or is r) 344.03 360.67 T
(eported. This was not so) 371.89 360.67 T
-0.45 (with the pr) 108 346.67 P
-0.45 (evious thr) 160.97 346.67 P
-0.45 (ee appr) 209.4 346.67 P
-0.45 (oaches. This checking occurs as every call to a generic) 245.1 346.67 P
-0.08 (function is veri\336ed to be corr) 108 332.67 P
-0.08 (ect either at compile time \050if possible\051, or at r) 247.98 332.67 P
-0.08 (un time) 463.86 332.67 P
(\050if necessary\051. If an attempt is made to call a generic function with ar) 108 318.67 T
(guments for) 440.14 318.67 T
(which ther) 108 304.67 T
(e is no applicable method, an err) 160.22 304.67 T
(or will always be r) 318.43 304.67 T
(eported to the pr) 408.21 304.67 T
(o-) 489.88 304.67 T
(grammer) 108 290.67 T
(.) 152.19 290.67 T
3 15 Q
(9.2  Need for an improved landing algorithm) 108 251 T
1 11 Q
-0.04 (The landing algorithm we implemented in the pr) 108 230.67 P
-0.04 (evious sections has some simpli-) 346.02 230.67 P
(fying assumptions:) 108 216.67 T
(\245) 117 196.67 T
(The algorithm can handle only one vehicle at a time.) 135 196.67 T
(\245) 117 176.67 T
(The algorithm assumes that all r) 135 176.67 T
(unways, taxiways, and gates ar) 291.57 176.67 T
(e always) 443.39 176.67 T
(available.) 135 162.67 T
(\245) 117 142.67 T
(The algorithm assumes that ther) 135 142.67 T
(e is only one r) 292.07 142.67 T
(unway) 359.86 142.67 T
(.) 392.47 142.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 132
%%Page: "131" 133
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(131) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(\245) 117 640.67 T
(The algorithm only lands air) 135 640.67 T
(craft, eliminating the ability to r) 273.55 640.67 T
(euse gates.) 427.7 640.67 T
(The following sections addr) 108 620.67 T
(ess these pr) 243.4 620.67 T
(oblems.) 299.44 620.67 T
3 15 Q
(9.3  Classes that store more than one vehicle) 108 581 T
1 11 Q
-0 (T) 108 560.67 P
-0 (o addr) 113.73 560.67 P
-0 (ess the pr) 145.57 560.67 P
-0 (oblems with the algorithm, we will modify the way vehicles ar) 191.68 560.67 P
-0 (e) 495.98 560.67 P
(stor) 108 546.67 T
(ed. Our plan is to split the) 126.4 546.67 T
4 9.5 Q
(<vehicle-storage>) 255.71 546.67 T
1 11 Q
( class into two subclasses, one) 352.61 546.67 T
(that operates much like the curr) 108 532.67 T
(ently) 262.76 532.67 T
4 9.5 Q
(<vehicle-storage>) 290.08 532.67 T
1 11 Q
( class, which can only) 386.98 532.67 T
(hold one vehicle at a time, and one that can handle mor) 108 518.67 T
(e than one air) 377.32 518.67 T
(craft, and) 443.26 518.67 T
(can also handle inbound and outbound traf) 108 504.67 T
(\336c at the same time. Figur) 319.19 504.67 T
(e 9.1 shows) 444.7 504.67 T
(the classes we plan to de\336ne.) 108 490.67 T
0 0 0 1 0 0 0 K
108 373.01 522 381 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 164.04 384.67 T
(e 9.1  Classes that stor) 190.26 384.67 T
(e one vehicle, or mor) 296.27 384.67 T
(e than one) 397.62 384.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(9.3.1  Revised de\336nition of <) 108 347.34 T
4 F
(vehicle-storage>) 251.68 347.34 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(W) 108 327.67 T
(e r) 117.99 327.67 T
(ede\336ne) 130.15 327.67 T
4 9.5 Q
(<vehicle-storage>) 168.49 327.67 T
1 11 Q
( and de\336ne a new class,) 265.39 327.67 T
4 9.5 Q
(<single-capacity-) 382.84 327.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(storage>) 108 313.67 T
1 11 Q
(:) 153.6 313.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 108 293.01 T
(ine class <vehicle-storage> \050<physical-object>\051) 124.2 293.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot storage-capacity :: <size>,) 118.8 282.01 T
(init-keyword: capacity:,) 334.8 282.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(init-value: *default-capacity*;) 334.8 271.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot identif) 118.8 260.01 T
(ier) 183.6 260.01 T
(:: <byte-string>, required-init-keyword: id:;) 237.6 260.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot connected-to) 118.8 249.01 T
(:: <simple-object-vector>;) 237.6 249.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 238.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 108 219.01 T
(ine class <single-capacity-storage> \050<vehicle-storage>\051) 124.2 219.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(slot vehicle-currently-occupying :: <vehicle>, init-value: #f;) 118.8 208.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 197.01 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
-0.33 (The pr) 108 176.67 P
-0.33 (eceding code de\336nes the new class) 139.59 176.67 P
4 9.5 Q
-0.69 (<single-capacity-storage>) 308.84 176.67 P
1 11 Q
-0.33 (. Instances) 451.34 176.67 P
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(of) 108 162.67 T
4 9.5 Q
(<single-capacity-storage>) 120.42 162.67 T
1 11 Q
( r) 262.92 162.67 T
(epr) 269.82 162.67 T
(esent containers at the airport that can be) 285.84 162.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(used by only one air) 108 148.67 T
(craft at a time. Note that we de\336ne the slot) 206.74 148.67 T
4 9.5 Q
(vehicle-cur-) 415.87 148.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
149 401 481 473 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle-storage>) 267 464.44 T
(<single-capacity-storage>) 158.1 419.6 T
(<multiple-capacity-storage>) 320.1 419.6 T
269.33 436.63 257.43 435.1 266.71 442.7 268.02 439.67 4 Y
V
311.86 458.57 268.02 439.67 2 L
0.5 H
2 Z
N
362 442.61 371.28 435 359.38 436.53 360.69 439.57 4 Y
V
316.86 458.47 360.7 439.57 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 133
%%Page: "132" 134
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(132) 72 677.67 T
0 9.5 Q
(9.3 Classes that store more than one vehicle) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 F
0 X
(rently-occupying) 108 640.67 T
1 11 Q
( in the class) 199.2 640.67 T
4 9.5 Q
(<single-capacity-storage>) 257.97 640.67 T
1 11 Q
(, not in the class) 400.47 640.67 T
4 9.5 Q
(<vehicle-storage>) 108 626.67 T
1 11 Q
(.) 204.9 626.67 T
(The next goal is to de\336ne the) 135 612.67 T
4 9.5 Q
(<multiple-capacity-storage>) 277.45 612.67 T
1 11 Q
( class, which) 431.35 612.67 T
-0.04 (we do in Section 9.3.5. First, we take a short detour) 108 598.67 P
-0.04 (, to describe two Dylan classes) 353.6 598.67 P
(that we need to use when implementing the) 108 584.67 T
4 9.5 Q
(<multiple-capacity-storage>) 324.52 584.67 T
1 11 Q
(class, and to de\336ne two constr) 108 570.67 T
(uctors.) 254.51 570.67 T
3 13 Q
(9.3.2  The) 108 539.33 T
4 F
(<object-table>) 159.56 539.33 T
3 F
( class) 268.76 539.33 T
1 11 Q
-0.26 (The class) 108 519.67 P
4 9.5 Q
-0.54 (<object-table>) 154.31 519.67 P
1 11 Q
-0.26 ( is a subclass of) 234.11 519.67 P
4 9.5 Q
-0.54 (<table>) 309.89 519.67 P
1 11 Q
-0.26 (. T) 349.79 519.67 P
-0.26 (ables ar) 360.76 519.67 P
-0.26 (e collections, like lists) 397.61 519.67 P
(and vectors. However) 108 505.67 T
(, lists and vectors ar) 214.46 505.67 T
(e sequences, while tables ar) 310.76 505.67 T
(e not. An) 444.19 505.67 T
(instance of) 108 491.67 T
4 9.5 Q
(<table>) 163.08 491.67 T
1 11 Q
( uses an ef) 202.98 491.67 T
(\336cient technique to associate arbitrary keys with) 253.09 491.67 T
(arbitrary values.) 108 477.67 T
(Instances of) 135 463.67 T
4 9.5 Q
(<object-table>) 195.25 463.67 T
1 11 Q
( use a hashing technique that causes only keys) 275.05 463.67 T
(that ar) 108 449.67 T
(e) 139.47 449.67 T
4 9.5 Q
(==) 147.49 449.67 T
1 11 Q
( to be consider) 158.89 449.67 T
(ed the same. Strings ar) 229.38 449.67 T
(e not appr) 339.26 449.67 T
(opriate keys for) 388.89 449.67 T
4 9.5 Q
(<object-table>) 108 435.67 T
1 11 Q
(, because it is very easy to have two strings that look the same,) 187.8 435.67 T
(but ar) 108 421.67 T
(e not the same instance. See Section 8.4.4, page 108.) 136.7 421.67 T
(The advantage of using) 135 407.67 T
4 9.5 Q
(<object-table>) 251.91 407.67 T
1 11 Q
( \050as opposed to some other class of) 331.71 407.67 T
(table\051 is that its performance for storing and r) 108 393.67 T
(etrieving data is quite good.) 328.8 393.67 T
3 13 Q
(9.3.3  The) 108 362.33 T
4 F
(<deque>) 159.56 362.33 T
3 F
( class) 214.16 362.33 T
1 11 Q
(The class) 108 342.67 T
4 9.5 Q
(<deque>) 154.83 342.67 T
1 11 Q
( is similar in behavior to a list, except that it is ef) 194.73 342.67 T
(\336cient to add) 428.29 342.67 T
(and r) 108 328.67 T
(emove elements fr) 133.52 328.67 T
(om both ends of a) 222.68 328.67 T
4 9.5 Q
(<deque>) 312.45 328.67 T
1 11 Q
( data str) 352.35 328.67 T
(uctur) 391.66 328.67 T
(e. The generic) 417.54 328.67 T
-0.08 (functions) 108 314.67 P
4 9.5 Q
-0.17 (push) 156.11 314.67 P
1 11 Q
-0.08 ( and) 178.91 314.67 P
4 9.5 Q
-0.17 (pop) 202.86 314.67 P
1 11 Q
-0.08 ( operate on the fr) 219.96 314.67 P
-0.08 (ont of these queues. Similarly) 302.69 314.67 P
-0.08 (,) 444.62 314.67 P
4 9.5 Q
-0.17 (push-last) 450.03 314.67 P
1 11 Q
(and) 108 300.67 T
4 9.5 Q
(pop-last) 129.37 300.67 T
1 11 Q
( operate on the end of these queues.) 174.97 300.67 T
3 13 Q
(9.3.4  Constructors) 108 269.33 T
1 11 Q
(Below we de\336ne some helper functions, called) 108 249.67 T
2 F
(constructors) 336.1 249.67 T
1 F
(, which cr) 397.19 249.67 T
(eate) 444.53 249.67 T
(instances of) 108 235.67 T
4 9.5 Q
(<object-table>) 167.74 235.67 T
1 11 Q
( and) 247.54 235.67 T
4 9.5 Q
(<deque>) 271.66 235.67 T
1 11 Q
(. Constr) 311.56 235.67 T
(uctors can be a convenient) 349.78 235.67 T
(shorthand for) 108 221.67 T
4 9.5 Q
(make) 177.54 221.67 T
1 11 Q
(. In the de\336nition of the) 200.34 221.67 T
4 9.5 Q
(<multiple-capacity-storage>) 317.33 221.67 T
1 11 Q
( class) 471.23 221.67 T
-0.12 (in Section 9.3.5, we use these constr) 108 207.67 P
-0.12 (uctors as init-functions. An init-function must) 279.28 207.67 P
(take no ar) 108 193.67 T
(guments, so we cannot use) 156.03 193.67 T
4 9.5 Q
(make) 289.37 193.67 T
1 11 Q
( as an init-function.) 312.17 193.67 T
4 9 Q
(def) 108 173 T
(ine method make-object-table \050\051) 124.2 173 T
(make \050<object-table>\051;) 118.8 162 T
(end;) 108 151 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 134
%%Page: "133" 135
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(133) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method make-deque \050\051) 124.2 642 T
(make \050<deque>\051;) 118.8 631 T
(end;) 108 620 T
3 13 Q
(9.3.5  De\336nition of) 108 590.33 T
4 F
(<multiple-capacity-storage>) 202.78 590.33 T
1 11 Q
(In this section we de\336ne the class) 108 570.67 T
4 9.5 Q
(<multiple-capacity-storage>) 272.15 570.67 T
1 11 Q
(. This class can) 426.05 570.67 T
(handle mor) 108 556.67 T
(e than one vehicle at a time, and it also has pr) 164.11 556.67 T
(ovisions for handling) 384.85 556.67 T
(inbound and outbound traf) 108 542.67 T
(\336c simultaneously) 241.29 542.67 T
(.) 329.14 542.67 T
4 9 Q
(def) 108 522 T
(ine class <multiple-capacity-storage> \050<vehicle-storage>\051) 124.2 522 T
(slot vehicles-by-direction :: <object-table>,) 118.8 511 T
(init-function: make-object-table;) 280.8 500 T
(slot maxima-by-direction) 118.8 489 T
(:: <object-table>,) 264.6 489 T
(init-function: make-object-table;) 280.8 478 T
(keyword directions:;) 118.8 467 T
(keyword maxima:;) 118.8 456 T
(end;) 108 445 T
1 11 Q
(W) 108 424.67 T
(e r) 117.99 424.67 T
(estrict the slots) 130.15 424.67 T
4 9.5 Q
(vehicles-by-direction) 205.32 424.67 T
1 11 Q
( and) 325.02 424.67 T
4 9.5 Q
(maxima-by-direction) 349.14 424.67 T
1 11 Q
( to be of) 457.44 424.67 T
(the type) 108 410.67 T
4 9.5 Q
(<object-table>) 150.34 410.67 T
1 11 Q
(. Further) 230.14 410.67 T
(, we pr) 271.52 410.67 T
(ovide these slots with an init-function.) 304.97 410.67 T
(W) 108 396.67 T
(e use the) 117.99 396.67 T
4 9.5 Q
(keyword) 163.33 396.67 T
1 11 Q
( option to permit the) 203.23 396.67 T
4 9.5 Q
(directions:) 306.37 396.67 T
1 11 Q
( and) 369.07 396.67 T
4 9.5 Q
(maxima:) 393.19 396.67 T
1 11 Q
( keywor) 433.09 396.67 T
(d) 472.67 396.67 T
(ar) 108 382.67 T
(guments to be speci\336ed during the cr) 117.65 382.67 T
(eation of) 298.45 382.67 T
4 9.5 Q
(<multiple-capacity-storage>) 343.59 382.67 T
1 11 Q
-0.18 (instances. W) 108 368.67 P
-0.18 (e use these keywor) 167.88 368.67 P
-0.18 (d values in the) 259.45 368.67 P
4 9.5 Q
-0.37 (initialize) 332.79 368.67 P
1 11 Q
-0.18 ( method de\336ned in Sec-) 389.79 368.67 P
(tion 9.3.7.) 108 354.67 T
3 13 Q
(9.3.6  Init-functions) 108 323.33 T
1 11 Q
-0.01 (Y) 108 303.67 P
-0.01 (ou can use init-functions when you want each slot of a set of instances to have a) 114.32 303.67 P
(unique value. In this case, we de\336ne init-functions that ensur) 108 289.67 T
(e that no two) 404.09 289.67 T
(instances of) 108 275.67 T
4 9.5 Q
(<multiple-capacity-storage>) 167.74 275.67 T
1 11 Q
( will shar) 321.64 275.67 T
(e the same) 366.63 275.67 T
4 9.5 Q
(<object-table>) 420.55 275.67 T
1 11 Q
(instance for either) 108 261.67 T
4 9.5 Q
(vehicles-by-direction) 198.24 261.67 T
1 11 Q
( or) 317.94 261.67 T
4 9.5 Q
(maxima-by-direction) 333.8 261.67 T
1 11 Q
( slots. If we) 442.1 261.67 T
(had used the) 108 247.67 T
4 9.5 Q
(init-value:) 173.42 247.67 T
1 11 Q
( slot option instead of) 236.12 247.67 T
4 9.5 Q
(:init-function) 344.15 247.67 T
1 11 Q
(, then two) 423.95 247.67 T
-0.24 (instances of) 108 233.67 P
4 9.5 Q
-0.5 (<multiple-capacity-storage>) 167.26 233.67 P
1 11 Q
-0.24 ( would have shar) 321.16 233.67 P
-0.24 (ed a single) 404.53 233.67 P
4 9.5 Q
-0.5 (<object-) 458.4 233.67 P
(table>) 108 219.67 T
1 11 Q
( for the) 142.2 219.67 T
4 9.5 Q
(vehicle-by-direction) 179.72 219.67 T
1 11 Q
( slot. When you want the object initialized) 293.72 219.67 T
-0.07 (in each slot to be identical \050) 108 205.67 P
4 9.5 Q
-0.15 (==) 239.75 205.67 P
1 11 Q
-0.07 (\051, use the) 251.15 205.67 P
4 9.5 Q
-0.15 (init-value:) 297.42 205.67 P
1 11 Q
-0.07 ( slot option. When want each) 360.12 205.67 P
(slot to contain a unique object, use the) 108 191.67 T
4 9.5 Q
(init-function:) 295.8 191.67 T
1 11 Q
( slot option.) 375.6 191.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 135
%%Page: "134" 136
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(134) 72 677.67 T
0 9.5 Q
(9.3 Classes that store more than one vehicle) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(9.3.7  Initialization method on) 108 639.33 T
4 F
(<multiple-capacity-storage>) 259.66 639.33 T
1 11 Q
(Now) 108 619.67 T
(, we de\336ne an initialization method on) 131.31 619.67 T
4 9.5 Q
(<multiple-capacity-storage>) 321.76 619.67 T
1 11 Q
( to) 475.66 619.67 T
(compute the values of the) 108 605.67 T
4 9.5 Q
(vehicle-by-direction) 236.12 605.67 T
1 11 Q
( and the) 350.12 605.67 T
4 9.5 Q
(maxima-by-direction) 392.25 605.67 T
1 11 Q
(tables based on the initialization keywor) 108 591.67 T
(ds pr) 304.47 591.67 T
(ovided to) 329.36 591.67 T
4 9.5 Q
(make) 378.59 591.67 T
1 11 Q
(. In general the) 401.39 591.67 T
4 9.5 Q
(make) 476.61 591.67 T
1 11 Q
(function calls the) 108 577.67 T
4 9.5 Q
(initialize) 193.73 577.67 T
1 11 Q
( generic function after it has cr) 250.73 577.67 T
(eated the instance,) 398.24 577.67 T
(passing in the instance cr) 108 563.67 T
(eated and any keywor) 229.96 563.67 T
(d ar) 338.02 563.67 T
(guments pr) 357.14 563.67 T
(ovided to) 413.03 563.67 T
4 9.5 Q
(make) 462.26 563.67 T
1 11 Q
(..) 485.05 563.67 T
4 9 Q
(def) 108 543 T
(ine method initialize \050object :: <multiple-capacity-storage>,) 124.2 543 T
(#key directions, maxima\051) 248.4 532 T
(next-method \050\051;) 118.8 521 T
(do \050method \050direction, maximum\051) 118.8 510 T
-0.3 (element \050vehicles-by-direction \050object\051, direction\051 := make-deque \050\051;) 151.2 499 P
(element \050maxima-by-direction \050object\051, direction\051 := maximum;) 151.2 488 T
(end,) 140.4 477 T
(directions, maxima\051) 140.4 466 T
(end;) 108 455 T
1 11 Q
-0.17 (First we call) 108 434.67 P
4 9.5 Q
-0.36 (next-method) 168.87 434.67 P
1 11 Q
-0.17 (, as is done in all pr) 231.57 434.67 P
-0.17 (operly written) 324.47 434.67 P
4 9.5 Q
-0.36 (initialize) 396.73 434.67 P
1 11 Q
-0.17 ( methods.) 453.73 434.67 P
-0.26 (Next, we call the) 108 420.67 P
4 9.5 Q
-0.53 (do) 190.89 420.67 P
1 11 Q
-0.26 ( collection iterator to iterate over two vectors,) 202.29 420.67 P
4 9.5 Q
-0.53 (directions) 423.39 420.67 P
1 11 Q
-0.26 ( and) 480.39 420.67 P
4 9.5 Q
(maxima) 108 406.67 T
1 11 Q
(, in parallel.) 142.2 406.67 T
(\245) 117 386.67 T
(The) 135 386.67 T
4 9.5 Q
(directions) 156.16 386.67 T
1 11 Q
( vector will contain the names of the two dir) 213.16 386.67 T
(ections) 427.54 386.67 T
(\050inbound and outbound\051.) 135 372.67 T
(\245) 117 352.67 T
-0.08 (The) 135 352.67 P
4 9.5 Q
-0.16 (maxima) 156.09 352.67 P
1 11 Q
-0.08 ( vector will contain an integer for each dir) 190.29 352.67 P
-0.08 (ection: the integer will) 392.98 352.67 P
-0.09 (be the maximum number of air) 135 338.67 P
-0.09 (craft that the vehicle storage can hold in that) 286.02 338.67 P
(dir) 135 324.67 T
(ection.) 149.07 324.67 T
-0.33 (The) 108 304.67 P
4 9.5 Q
-0.68 (do) 128.84 304.67 P
1 11 Q
-0.33 ( function takes a method to iterate over one or mor) 140.24 304.67 P
-0.33 (e sequences. In this case,) 383.63 304.67 P
-0.1 (the) 108 290.67 P
4 9.5 Q
-0.22 (method) 125.9 290.67 P
1 11 Q
-0.1 ( special form is used to cr) 160.1 290.67 P
-0.1 (eate an) 282.81 290.67 P
2 F
-0.1 (bare method) 319.62 290.67 P
1 F
-0.1 (, which is then passed to) 382.77 290.67 P
(the) 108 276.67 T
4 9.5 Q
(do) 126.01 276.67 T
1 11 Q
( collection iterator) 137.41 276.67 T
(. Bar) 224.57 276.67 T
(e methods ar) 246.44 276.67 T
(e useful when a function or method is) 309.22 276.67 T
(r) 108 262.67 T
(equir) 112.15 262.67 T
(ed as an ar) 137.56 262.67 T
(gument, but that function is so simple and so speci\336c to a partic-) 189.51 262.67 T
(ular section of code that it is not worth naming the function or method. Bar) 108 248.67 T
(e) 472.51 248.67 T
(methods ar) 108 234.67 T
(e not appr) 162.76 234.67 T
(opriate if the same de\336nition could be used in mor) 212.39 234.67 T
(e than) 457.92 234.67 T
-0.08 (one place, or if the body of the method is lar) 108 220.67 P
-0.08 (ge enough that it is awkwar) 321.36 220.67 P
-0.08 (d to have) 456.28 220.67 P
(the de\336nition embedded at the point of call in the code. Methods ar) 108 206.67 T
(e \336rst-class) 435.26 206.67 T
(objects in Dylan that can be passed ar) 108 192.67 T
(ound and manipulated just like any other) 289.94 192.67 T
(class of object. The bar) 108 178.67 T
(e method we have de\336ned will be passed an element fr) 216.88 178.67 T
(om) 484.19 178.67 T
(each of the) 108 164.67 T
4 9.5 Q
(directions) 163.23 164.67 T
1 11 Q
( and) 220.23 164.67 T
4 9.5 Q
(maxima) 244.35 164.67 T
1 11 Q
( vectors by) 278.55 164.67 T
4 9.5 Q
(do) 333.97 164.67 T
1 11 Q
(.) 345.37 164.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 136
%%Page: "135" 137
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(135) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The) 135 640.67 T
4 9.5 Q
(direction) 156.16 640.67 T
1 11 Q
( is used as a key for both the) 207.46 640.67 T
4 9.5 Q
(vehicles-by-direction) 347.88 640.67 T
1 11 Q
( and) 467.58 640.67 T
4 9.5 Q
(maxima-by-direction) 108 626.67 T
1 11 Q
( hash tables. In the) 216.3 626.67 T
4 9.5 Q
(vehicles-by-direction) 309.44 626.67 T
1 11 Q
( table, the) 429.14 626.67 T
(dir) 108 612.67 T
(ection name is associated with a new queue, which is cr) 122.07 612.67 T
(eated. This queue will) 392.04 612.67 T
-0.05 (hold vehicle instances that ar) 108 598.67 P
-0.05 (e going in that dir) 248.88 598.67 P
-0.05 (ection and ar) 335.54 598.67 P
-0.05 (e curr) 398.57 598.67 P
-0.05 (ently located in) 426.55 598.67 P
(the vehicle storage object. The maximum number of vehicles going inbound, and) 108 584.67 T
-0.4 (the maximum going outbound ar) 108 570.67 P
-0.4 (e stor) 268.35 570.67 P
-0.4 (ed in the) 294.37 570.67 P
4 9.5 Q
-0.83 (maxima-by-direction) 338.27 570.67 P
1 11 Q
-0.4 ( table. Note) 446.57 570.67 P
-0.09 (that a taxiway might accommodate four air) 108 556.67 P
-0.09 (craft going outbound, or thr) 317.57 556.67 P
-0.09 (ee air) 453.32 556.67 P
-0.09 (craft) 479.36 556.67 P
(coming inbound. Ther) 108 542.67 T
(e may be a dif) 216.58 542.67 T
(fer) 284.42 542.67 T
(ent maximum number for each dir) 297.5 542.67 T
(ection.) 465.24 542.67 T
-0.37 (This) 135 528.67 P
4 9.5 Q
-0.76 (initialize) 158.39 528.67 P
1 11 Q
-0.37 ( method sets up these hash tables so it is possible to \336nd the) 215.39 528.67 P
(queue of either incoming or outgoing vehicles for a given vehicle storage object,) 108 514.67 T
(and also determine the maximum number of incoming or outgoing vehicles) 108 500.67 T
(allowed in this vehicle storage object at one time.) 108 486.67 T
3 13 Q
(9.3.8  Revised de\336nitions of vehicle containers) 108 455.33 T
1 11 Q
(Now that we have de\336ned the) 108 435.67 T
4 9.5 Q
(<single-capacity-storage>) 258.02 435.67 T
1 11 Q
( and) 400.52 435.67 T
4 9.5 Q
(<multiple-) 424.64 435.67 T
(capacity-storage>) 108 421.67 T
1 11 Q
( classes, the speci\336c classes \050) 204.9 421.67 T
4 9.5 Q
(<gate>) 342.18 421.67 T
1 11 Q
(,) 376.38 421.67 T
4 9.5 Q
(<runway>) 381.88 421.67 T
1 11 Q
(, and so on\051) 427.48 421.67 T
(should use them. W) 108 407.67 T
(e also want to de\336ne a new vehicle storage class,) 204.15 407.67 T
4 9.5 Q
(<sky>) 442.8 407.67 T
1 11 Q
(, that) 471.3 407.67 T
(r) 108 393.67 T
(epr) 112.15 393.67 T
(esents the immediate airspace ar) 128.17 393.67 T
(ound the airport. Figur) 286.08 393.67 T
(e 9.2 shows the inher-) 397.9 393.67 T
(itance r) 108 379.67 T
(elationships among these classes.) 143.74 379.67 T
0 0 0 1 0 0 0 K
108 226.58 522 234.57 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 208.93 238.24 T
(e 9.2  All classes that stor) 235.14 238.24 T
(e vehicles) 355.95 238.24 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(The class de\336nitions ar) 108 206.25 T
(e:) 219.33 206.25 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9 Q
(def) 108 185.58 T
(ine class <gate> \050<single-capacity-storage>\051) 124.2 185.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 174.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(def) 108 155.58 T
(ine class <runway> \050<single-capacity-storage>\051) 124.2 155.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(end;) 108 144.58 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
147.29 254.57 482.71 362 C
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle-storage>) 268.86 353.44 T
(<single-capacity-storage>) 160.67 312.17 T
(<multiple-capacity-storage>) 322.67 312.17 T
271.18 325.63 259.28 324.1 268.57 331.7 269.88 328.67 4 Y
V
313.72 347.57 269.88 328.67 2 L
0.5 H
2 Z
N
363.86 331.61 373.14 324 361.24 325.53 362.55 328.57 4 Y
V
318.72 347.47 362.55 328.57 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<gate>) 152.86 269.73 T
(<runway>) 261.97 269.01 T
(<taxiway>) 324.14 269.01 T
(<sky>) 448.36 269.73 T
182.76 282.63 170.86 281.1 180.14 288.71 181.45 285.67 4 Y
V
225.29 304.57 181.45 285.67 2 L
N
275.43 288.61 284.71 281 272.81 282.53 274.12 285.57 4 Y
V
230.29 304.47 274.12 285.57 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
356.9 282.63 344.99 281.1 354.28 288.71 355.59 285.67 4 Y
V
399.43 304.57 355.59 285.67 2 L
N
449.57 288.61 458.85 281 446.95 282.53 448.26 285.57 4 Y
V
404.43 304.47 448.27 285.57 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 137
%%Page: "136" 138
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(136) 72 677.67 T
0 9.5 Q
(9.3 Classes that store more than one vehicle) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <taxiway> \050<multiple-capacity-storage>\051) 124.2 642 T
(end;) 108 631 T
(def) 108 612 T
(ine class <sky> \050<multiple-capacity-storage>\051) 124.2 612 T
(// The airport which this piece of sky is over.) 118.8 601 T
(slot airport :: <airport>, required-init-keyword: airport:;) 118.8 590 T
(required keyword inbound-aircraft:;) 118.8 579 T
(end;) 108 568 T
1 11 Q
(In the r) 108 547.67 T
(evised de\336nitions, gates and r) 143.01 547.67 T
(unways behave much like they did in the) 288.22 547.67 T
(pr) 108 533.67 T
(evious design, but taxiways and skies can handle mor) 118.76 533.67 T
(e than one air) 380.27 533.67 T
(craft.) 446.21 533.67 T
3 13 Q
(9.3.9  Initialization method on) 108 502.33 T
4 F
(<sky>) 259.66 502.33 T
1 11 Q
(When you make an instance of the class) 108 482.67 T
4 9.5 Q
(<sky>) 304.08 482.67 T
1 11 Q
(, you must supply a vector of) 332.58 482.67 T
-0.08 (incoming air) 108 468.67 P
-0.08 (craft. That vector is used to con\336gur) 169.44 468.67 P
-0.08 (e the initialization performed by) 344.3 468.67 P
(its dir) 108 454.67 T
(ect super) 136.27 454.67 T
(class \050) 180.08 454.67 T
4 9.5 Q
(<multiple-capacity-storage>) 209.41 454.67 T
1 11 Q
(\051 as well as to perform some) 363.31 454.67 T
(other actions.) 108 440.67 T
4 9 Q
(def) 108 420 T
(ine method initialize \050object :: <sky>, #key directions, maxima,) 124.2 420 T
(inbound-aircraft\051) 248.4 409 T
(next-method \050object, directions: #[inbound:, outbound:],) 118.8 398 T
(maxima: vector \050size \050inbound-aircraft\051,) 189 387 T
(size \050inbound-aircraft\051\051\051;) 275.4 376 T
(let inbound-queue = object.vehicles-by-direction [inbound:];) 118.8 365 T
(for \050vehicle in inbound-aircraft\051) 118.8 354 T
(vehicle.direction := inbound:;) 129.6 343 T
(push-last \050inbound-queue, vehicle\051;) 129.6 332 T
(end;) 118.8 321 T
(end;) 108 310 T
1 11 Q
(In the) 108 289.67 T
4 9.5 Q
(initialize) 138.87 289.67 T
1 11 Q
( method for) 195.87 289.67 T
4 9.5 Q
(<sky>) 255.83 289.67 T
1 11 Q
(, \336rst we call the next most speci\336c) 284.33 289.67 T
4 9.5 Q
(initial-) 455.88 289.67 T
(ize) 108 275.67 T
1 11 Q
( method, but we call it with some new ar) 125.1 275.67 T
(guments, and we omit the) 323.12 275.67 T
4 9.5 Q
(inbound-) 452.83 275.67 T
(aircraft) 108 261.67 T
1 11 Q
( ar) 153.6 261.67 T
(gument, which is understood only by) 166 261.67 T
4 9.5 Q
(<sky>) 351.17 261.67 T
1 11 Q
(. For the) 379.67 261.67 T
4 9.5 Q
(directions) 422.39 261.67 T
1 11 Q
(ar) 108 247.67 T
(gument to the next method, we pass avector containing the symbols) 117.65 247.67 T
4 9.5 Q
(inbound:) 450.94 247.67 T
1 11 Q
-0.43 (and) 108 233.67 P
4 9.5 Q
-0.88 (outbound:) 128.95 233.67 P
1 11 Q
-0.43 (. For the) 180.25 233.67 P
4 9.5 Q
-0.88 (maxima) 221.69 233.67 P
1 11 Q
-0.43 ( ar) 255.89 233.67 P
-0.43 (gument, we pass a vector containing the number) 267.86 233.67 P
(of inbound air) 108 219.67 T
(craft stor) 177.46 219.67 T
(ed in both the zer) 220.6 219.67 T
(oth and \336rst element.) 305.44 219.67 T
-0.33 (After the next most speci\336c method is executed, the hash tables stor) 135 205.67 P
-0.33 (ed in the) 459.9 205.67 P
4 9.5 Q
(vehicles-by-direction) 108 191.67 T
1 11 Q
( and) 227.7 191.67 T
4 9.5 Q
(maxima-by-direction) 251.82 191.67 T
1 11 Q
( should be set up. The) 360.12 191.67 T
4 9.5 Q
(ini-) 469.53 191.67 T
(tialize) 108 177.67 T
1 11 Q
( method for) 147.9 177.67 T
4 9.5 Q
(<sky>) 207.86 177.67 T
1 11 Q
( then initializes the) 236.36 177.67 T
4 9.5 Q
(inbound-queue) 331.2 177.67 T
1 11 Q
( variable to the) 405.3 177.67 T
-0.26 (inbound vehicle queue that was just cr) 108 163.67 P
-0.26 (eated. For each vehicle in the) 293.72 163.67 P
4 9.5 Q
-0.53 (inbound-air-) 435.6 163.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 138
%%Page: "137" 139
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(137) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9.5 Q
0 X
(craft) 108 640.67 T
1 11 Q
( vector) 136.5 640.67 T
(, the) 168.74 640.67 T
4 9.5 Q
(direction) 192.25 640.67 T
1 11 Q
( slot of that air) 243.55 640.67 T
(craft is set to) 313.6 640.67 T
4 9.5 Q
(inbound:) 377.55 640.67 T
1 11 Q
(, and then the) 423.15 640.67 T
(air) 108 626.67 T
(craft is added to the inbound queue.) 120.85 626.67 T
(Note that you can use the squar) 135 612.67 T
(e bracket syntax to access tables as well as) 289.04 612.67 T
(sequences. In fact, the squar) 108 598.67 T
(e bracket syntax is equivalent to using the) 243.82 598.67 T
4 9.5 Q
(element) 449.98 598.67 T
1 11 Q
(and) 108 584.67 T
4 9.5 Q
(element-setter) 129.37 584.67 T
1 11 Q
( generic functions. For example, the following two expr) 209.17 584.67 T
(es-) 478 584.67 T
(sions ar) 108 570.67 T
(e equivalent:) 145.33 570.67 T
4 9 Q
(element \050object.vehicles-by-direction, inbound:\051) 108 550 T
(object.vehicles-by-direction [inbound:]) 108 531 T
3 13 Q
(9.3.10  Symbols as keys of an) 108 501.33 T
4 F
(<object-table>) 260.89 501.33 T
1 11 Q
(In our airport model, instances of) 108 481.67 T
4 9.5 Q
(<sky>) 273.09 481.67 T
1 11 Q
( deal with inbound and outbound dir) 301.59 481.67 T
(ec-) 483.35 481.67 T
-0.11 (tions. These dir) 108 467.67 P
-0.11 (ections ar) 182.3 467.67 P
-0.11 (e named with symbols \050) 228.6 467.67 P
4 9.5 Q
-0.23 (inbound:) 344.5 467.67 P
1 11 Q
-0.11 ( and) 390.1 467.67 P
4 9.5 Q
-0.23 (outbound:) 413.99 467.67 P
1 11 Q
-0.11 (\051, using) 465.3 467.67 P
(the keywor) 108 453.67 T
(d syntax for symbols. Symbols ar) 162.84 453.67 T
(e very much like strings, except a) 323.67 453.67 T
(special table is used \050not an) 108 439.67 T
4 9.5 Q
(<object-table>) 244.18 439.67 T
1 11 Q
(\051 to ensur) 323.98 439.67 T
(e that symbols that look) 369.85 439.67 T
(alike ar) 108 425.67 T
(e in fact the identical object \050) 143.68 425.67 T
4 9.5 Q
(==) 281.98 425.67 T
1 11 Q
(\051. This makes symbols ideal keys for) 293.38 425.67 T
4 9.5 Q
(<object-table>) 108 411.67 T
1 11 Q
( hash tables. Note that just because two strings look alike, they) 187.8 411.67 T
(may not always be) 108 397.67 T
4 9.5 Q
(==) 201.83 397.67 T
1 11 Q
( to each other) 213.23 397.67 T
(. Thus it is faster to compar) 277.92 397.67 T
(e two symbols for) 409.74 397.67 T
(equality than it is to compar) 108 383.67 T
(e two strings for equality) 244.41 383.67 T
(. T) 364.88 383.67 T
(o compar) 376.11 383.67 T
(e two strings,) 421.73 383.67 T
(Dylan must check each character of each string until it \336nds a dif) 108 369.67 T
(fer) 422.83 369.67 T
(ence \050if ther) 435.91 369.67 T
(e) 493.17 369.67 T
(is a dif) 108 355.67 T
(fer) 140.25 355.67 T
(ence\051, wher) 153.33 355.67 T
(eas Dylan can compar) 209.31 355.67 T
(e symbols with just one test.) 316.37 355.67 T
(Symbol comparison is not case-sensitive. Y) 135 341.67 T
(ou can convert fr) 342.36 341.67 T
(om symbols to) 424.55 341.67 T
(strings and strings to symbols by using) 108 327.67 T
4 9.5 Q
(as) 301.08 327.67 T
1 11 Q
(. If the name of a symbol is composed) 312.48 327.67 T
-0.43 (only of characters that ar) 108 313.67 P
-0.43 (e allowed in variable names, then the keywor) 226.79 313.67 P
-0.43 (d syntax for) 444.35 313.67 P
(symbols can be used to name that symbol. In any case, the) 108 299.67 T
4 9.5 Q
(#"...") 393.41 299.67 T
1 11 Q
( syntax may) 427.61 299.67 T
(always be used to name any symbol constant \050for example,) 108 285.67 T
4 9.5 Q
(#"inbound") 397.27 285.67 T
1 11 Q
(\051. Note) 454.27 285.67 T
(that a symbol cannot be dif) 108 271.67 T
(fer) 239.63 271.67 T
(entiated by its syntax. That is,) 252.71 271.67 T
4 9.5 Q
(inbound: ==) 399.93 271.67 T
(#"inbound") 108 257.67 T
1 11 Q
( is always a tr) 165 257.67 T
(ue expr) 231.36 257.67 T
(ession.) 267.72 257.67 T
3 13 Q
(9.3.1) 108 226.33 T
(1  Association of a) 131.13 226.33 T
4 F
(<sky>) 228.29 226.33 T
3 F
( with an) 267.29 226.33 T
4 F
(<airport>) 309.94 226.33 T
1 11 Q
-0.19 (Now we add a slot to the) 108 206.67 P
4 9.5 Q
-0.39 (<airport>) 231.46 206.67 P
1 11 Q
-0.19 ( class to hold the instance of) 282.76 206.67 P
4 9.5 Q
-0.39 (<sky>) 420.38 206.67 P
1 11 Q
-0.19 ( associated) 448.88 206.67 P
(with a given airport.) 108 192.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 139
%%Page: "138" 140
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(138) 72 677.67 T
0 9.5 Q
(9.4 Aircraft transitions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <airport> \050<physical-object>\051) 124.2 642 T
6 F
(// The name of the airport, such as "Logan International Airport") 118.8 631 T
4 F
(slot name) 118.8 620 T
( :: <byte-string>, init-keyword: name:;) 270 620 T
6 F
(// The three letter abbreviation, such as "BOS") 118.8 609 T
4 F
(slot code) 118.8 598 T
( :: <byte-string>, init-keyword: code:;) 270 598 T
6 F
(// How many gates are at the airport) 118.8 587 T
4 F
(virtual slot number-of-gates :: <integer>, setter: #f;) 118.8 576 T
(slot gate-instances) 118.8 565 T
( :: <simple-object-vector>;) 270 565 T
(slot runway-instances) 118.8 554 T
(:: <simple-object-vector>;) 275.4 554 T
(slot sky-instance) 118.8 543 T
(:: <sky>;) 275.4 543 T
(required keyword gates-per-terminal:, type: <simple-object-vector>;) 118.8 532 T
(keyword gate-capacity:, type: <size>, init-value: *default-capacity*;) 118.8 521 T
(end;) 108 510 T
3 13 Q
(9.3.12  Revised de\336nition of) 108 480.33 T
4 F
(<standard-aircraft>) 251.38 480.33 T
1 11 Q
-0.09 (It is important to make sur) 108 460.67 P
-0.09 (e that each air) 237.04 460.67 P
-0.09 (craft knows whether it is inbound or out-) 304.26 460.67 P
(bound. Sometimes that can be determined by what queue the air) 108 446.67 T
(craft is in, but) 421.93 446.67 T
-0.1 (when the air) 108 432.67 P
-0.1 (craft is at the gate or on the r) 168.65 432.67 P
-0.1 (unway) 306.74 432.67 P
-0.1 (, ther) 339.35 432.67 P
-0.1 (e is no way to tell other than) 364.15 432.67 P
(by a value stor) 108 418.67 T
(ed in the instance. W) 179.17 418.67 T
(e r) 279.67 418.67 T
(ede\336ne) 291.83 418.67 T
4 9.5 Q
(<standard-aircraft>) 330.17 418.67 T
1 11 Q
( to contain a) 438.47 418.67 T
4 9.5 Q
(direction) 108 404.67 T
1 11 Q
( slot:) 159.3 404.67 T
4 9 Q
(def) 108 384 T
(ine class <standard-aircraft> \050<vehicle>\051) 124.2 384 T
(slot altitude) 118.8 373 T
(:: <integer>, init-keyword: altitude:;) 291.6 373 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 118.8 362 T
(slot direction) 118.8 351 T
( :: <symbol>;) 286.2 351 T
(end;) 108 340 T
3 15 Q
(9.4  Aircraft transitions) 108 302 T
1 11 Q
-0.39 (Given the class de\336nitions in Section 9.3, we now want to de\336ne the pr) 108 281.67 P
-0.39 (otocols and) 446.3 281.67 P
(methods that will move inbound air) 108 267.67 T
(craft thr) 283.46 267.67 T
(ough each step of the landing and) 322.32 267.67 T
(takeof) 108 253.67 T
(f pr) 137.94 253.67 T
(ocess as shown in Figur) 155.11 253.67 T
(e 9.3.) 270.23 253.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 140
%%Page: "139" 141
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(139) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
108 474.86 522 482.86 C
36 72 576 720 C
0 0 0 1 0 0 0 K
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 160.11 486.52 T
(e 9.3  State diagram for outbound and inbound air) 186.33 486.52 T
(craft) 429.91 486.52 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(9.5  Protocols for handling aircraft) 108 440.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Her) 108 420.53 T
(e we de\336ne a set of pr) 126.57 420.53 T
(otocols that will be useful for scheduling:) 232.54 420.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
(// Returns true if container is available for aircraft in direction) 108 399.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 108 388.86 T
(ine generic available? \050vehicle, container, direction\051;) 124.2 388.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// Moves a vehicle into a container in the given direction) 108 369.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 108 358.86 T
(ine generic move-in-vehicle \050vehicle, container, direction\051;) 124.2 358.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// Moves a vehicle out of a container in the given direction) 108 339.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 108 328.86 T
(ine generic move-out-vehicle \050vehicle, container, direction\051;) 124.2 328.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 F
(// Returns the aircraft next in line to move out of container in direction) 108 309.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 F
(def) 108 298.86 T
(ine generic next-out \050container, direction\051;) 124.2 298.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 15 Q
(9.6  Methods that handle aircraft transitions) 108 260.86 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(The following sections de\336ne methods that implement the pr) 108 240.53 T
(otocols de\336ned in) 404.79 240.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Section 9.5.) 108 226.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
3 13 Q
(9.6.1  Methods for the) 108 195.2 T
4 F
(available?) 220.55 195.2 T
3 F
( predicate) 298.55 195.2 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 11 Q
(Now we de\336ne methods for the) 108 175.53 T
4 9.5 Q
(available?) 265.21 175.53 T
1 11 Q
( pr) 322.21 175.53 T
(edicate:) 335.72 175.53 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
0 0 0 1 0 0 0 K
108 502.86 504 637 C
0 0 0 1 0 0 0 K
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
90 450 37.14 17.28 292.64 554.28 A
250.5 553.9 331.22 577.71 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
323.73 547.45 329.78 552.36 327.26 544.99 325.5 546.22 4 Y
0 X
V
325.5 546.22 325.5 546.22 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 216.14 554.28 A
174 553.9 254.72 577.71 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
247.24 547.45 253.28 552.36 250.76 544.99 249 546.22 4 Y
0 X
V
249 546.22 249 546.22 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 17.28 369.14 554.28 A
327 553.9 407.72 577.71 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
400.23 547.45 406.28 552.36 403.76 544.99 401.99 546.22 4 Y
0 X
V
402 546.22 402 546.22 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 291.07 571.79 A
252.5 550 333.22 572.14 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
259.85 578.06 253.93 573.57 256.57 580.52 258.21 579.29 4 Y
0 X
V
258.21 579.29 258.21 579.29 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 367.57 571.79 A
329 550 409.72 572.14 R
7 X
V
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
336.35 578.06 330.42 573.57 333.07 580.52 334.71 579.29 4 Y
0 X
V
334.72 579.29 334.72 579.29 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
90 450 37.14 16.07 214.57 571.79 A
176 550 256.72 572.14 R
7 X
V
N
1 11 Q
0 X
(sky) 168.27 560 T
(r) 233.15 559.43 T
(unway) 237.41 559.43 T
(taxiway) 309.01 559.59 T
(gate) 392.2 559.59 T
376.72 553.57 429.57 570.71 8.57 RR
N
225.76 553.57 278.62 570.71 8.57 RR
N
301.24 553.57 354.1 570.71 8.57 RR
N
150.29 553.57 203.14 570.71 8.57 RR
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
183.35 578.06 177.43 573.57 180.07 580.52 181.71 579.29 4 Y
V
181.71 579.29 181.71 579.29 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Outbound) 381 601.43 T
(Inbound) 152.43 518.57 T
356.11 600.98 344.57 604.29 356.11 607.59 356.11 604.29 4 Y
V
371.72 604.29 356.11 604.29 2 L
N
214.04 524.59 225.57 521.29 214.04 517.98 214.04 521.29 4 Y
V
198.43 521.29 214.04 521.29 2 L
N
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 141
%%Page: "140" 142
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(140) 72 677.67 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method available? \050vehicle,) 124.2 642 T
(container :: <single-capacity-storage>,) 248.4 631 T
(direction :: <symbol>\051) 248.4 620 T
(~ container.vehicle-currently-occupying;) 118.8 609 T
(end;) 108 598 T
1 11 Q
(It is easy to determine whether a aingle capacity storage container is available. It) 108 577.67 T
-0.2 (is available when no air) 108 563.67 P
-0.2 (craft is curr) 222.22 563.67 P
-0.2 (ently occupying it. The not operator) 277.16 563.67 P
-0.2 (,) 450.12 563.67 P
4 9.5 Q
-0.42 (~) 455.41 563.67 P
1 11 Q
-0.2 (, r) 461.11 563.67 P
-0.2 (eturns) 470.55 563.67 P
-0.14 (false,) 108 549.67 P
4 9.5 Q
-0.29 (#f) 135.65 549.67 P
1 11 Q
-0.14 (, if and only if its ar) 147.05 549.67 P
-0.14 (gument is not false. Note that we do not str) 240.63 549.67 P
-0.14 (ongly type) 449.36 549.67 P
-0.32 (the) 108 535.67 P
4 9.5 Q
-0.67 (vehicle) 125.68 535.67 P
1 11 Q
-0.32 ( parameter) 165.58 535.67 P
-0.32 (. That is because sometimes we want to \336nd out if any vehi-) 217.33 535.67 P
(cle at all could ever \336t into a container) 108 521.67 T
(. When we want to ask this question, we) 292.6 521.67 T
(may not have a particular vechicle in mind, so we would like to pr) 108 507.67 T
(ovide false for) 430.46 507.67 T
(the) 108 493.67 T
4 9.5 Q
(vehicle) 126.01 493.67 T
1 11 Q
( parameter) 165.91 493.67 T
(.) 217.98 493.67 T
4 9 Q
(def) 108 473 T
(ine method available? \050vehicle,) 124.2 473 T
(container :: <multiple-capacity-storage>,) 248.4 462 T
(direction :: <symbol>\051) 248.4 451 T
(size \050container.vehicles-by-direction [direction]\051 <) 118.8 440 T
(container.maxima-by-direction [direction];) 118.8 429 T
(end;) 108 418 T
1 11 Q
(The complexity of handling multiple air) 108 397.67 T
(craft is evident in the implementation of) 302.3 397.67 T
4 9.5 Q
-3.26 (available?) 108 383.67 P
1 11 Q
-1.58 ( on the) 165 383.67 P
4 9.5 Q
-3.26 (<multiple-capacity-storage>) 196.19 383.67 P
1 11 Q
-1.58 ( class. First we determine the size) 350.09 383.67 P
-0.22 (of the appr) 108 369.67 P
-0.22 (opriate queue \050based on the speci\336ed dir) 160.86 369.67 P
-0.22 (ection\051. W) 357.45 369.67 P
-0.22 (e then compar) 405.73 369.67 P
-0.22 (e that) 474.59 369.67 P
(value to the maximum number of vehicles permitted in the speci\336ed dir) 108 355.67 T
(ection. If) 457.79 355.67 T
(the size of the queue is smaller than the maximum, then ther) 108 341.67 T
(e is r) 401.9 341.67 T
(oom for at least) 424.68 341.67 T
(one mor) 108 327.67 T
(e air) 148.29 327.67 T
(craft, otherwise ther) 169.16 327.67 T
(e is not enough r) 266.71 327.67 T
(oom.) 347.81 327.67 T
3 13 Q
(9.6.2  Methods for) 108 296.33 T
4 F
(move-in-vehicle) 201.6 296.33 T
1 11 Q
(W) 108 276.67 T
(e de\336ne methods for moving air) 117.99 276.67 T
(craft between containers:) 274.2 276.67 T
4 9 Q
(def) 108 256 T
(ine method move-in-vehicle \050vehicle) 124.2 256 T
(:: <standard-aircraft>,) 329.4 256 T
(container :: <single-capacity-storage>,) 275.4 245 T
(direction :: <symbol>\051) 275.4 234 T
(container.vehicle-currently-occupying := vehicle;) 118.8 223 T
(end;) 108 212 T
1 11 Q
(In the pr) 108 191.67 T
(eceding method, on) 149.62 191.67 T
4 9.5 Q
(<single-capacity-storage>) 248.59 191.67 T
1 11 Q
(, we simply stor) 391.09 191.67 T
(e the) 468.44 191.67 T
(vehicle in the) 108 177.67 T
4 9.5 Q
(vehicle-currently-occupying) 175.55 177.67 T
1 11 Q
( slot.) 329.45 177.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 142
%%Page: "141" 143
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(141) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method move-in-vehicle \050vehicle) 124.2 642 T
(:: <standard-aircraft>,) 329.4 642 T
(container :: <multiple-capacity-storage>,) 275.4 631 T
(direction :: <symbol>\051) 275.4 620 T
(let vehicles = container.vehicles-by-direction [direction];) 118.8 609 T
(push-last \050vehicles, vehicle\051;) 118.8 598 T
(end;) 108 587 T
1 11 Q
(In the pr) 108 566.67 T
(eceding method, on) 149.62 566.67 T
4 9.5 Q
(<multiple-capacity-storage>) 248.59 566.67 T
1 11 Q
(, we add the vehicle) 402.49 566.67 T
(to the end of the) 108 552.67 T
4 9.5 Q
(vehicles-by-direction) 189.92 552.67 T
1 11 Q
( queue.) 309.62 552.67 T
4 9 Q
(def) 108 532 T
(ine method move-in-vehicle \050vehicle) 124.2 532 T
(:: <standard-aircraft>,) 329.4 532 T
(container :: <gate>,) 275.4 521 T
(direction :: <symbol>\051) 275.4 510 T
(next-method \050\051;) 118.8 499 T
(vehicle.direction := outbound:;) 118.8 488 T
(end;) 108 477 T
1 11 Q
(In the pr) 108 456.67 T
(eceding method, on the) 149.62 456.67 T
4 9.5 Q
(<gate>) 266.6 456.67 T
1 11 Q
( class, we take car) 300.8 456.67 T
(e of one important) 386.91 456.67 T
(detail: we turn the air) 108 442.67 T
(craft ar) 212.74 442.67 T
(ound at the gate so it starts to head outbound after) 247.12 442.67 T
(the air) 108 428.67 T
(craft has \336nished the inbound portion.) 138.85 428.67 T
3 13 Q
(9.6.3  Methods for) 108 397.33 T
4 F
(move-out-vehicle) 201.6 397.33 T
1 11 Q
(W) 108 377.67 T
(e de\336ne the methods for moving a vehicle out of a container:) 117.99 377.67 T
4 9 Q
(def) 108 357 T
(ine method move-out-vehicle \050vehicle) 124.2 357 T
( :: <standard-aircraft>,) 329.4 357 T
(container :: <single-capacity-storage>,) 280.8 346 T
(direction :: <symbol>\051) 280.8 335 T
(container.vehicle-currently-occupying := #f;) 118.8 324 T
(end;) 108 313 T
1 11 Q
(In the pr) 108 292.67 T
(eceding method, on) 149.62 292.67 T
4 9.5 Q
(<single-capacity-storage>) 248.59 292.67 T
1 11 Q
(, we simply stor) 391.09 292.67 T
(e false) 468.44 292.67 T
(in the) 108 278.67 T
4 9.5 Q
(vehicle-currently-occupying) 138.36 278.67 T
1 11 Q
( slot.) 292.26 278.67 T
4 9 Q
(def) 108 258 T
(ine method move-out-vehicle \050vehicle) 124.2 258 T
(:: <standard-aircraft>,) 334.8 258 T
(container :: <multiple-capacity-storage>,) 280.8 247 T
(direction :: <symbol>\051) 280.8 236 T
(let vehicles = container.vehicles-by-direction [direction];) 118.8 225 T
6 F
(// Assumes aircraft always exit container in order, and this aircraft) 118.8 214 T
(// is next.) 118.8 203 T
4 F
(pop \050vehicles\051;) 118.8 192 T
(end;) 108 181 T
1 11 Q
(In the pr) 108 160.67 T
(eceding method, on) 149.62 160.67 T
4 9.5 Q
(<multiple-capacity-storage>) 248.59 160.67 T
1 11 Q
(, we r) 402.49 160.67 T
(emove the) 429.33 160.67 T
(vehicle that is at the fr) 108 146.67 T
(ont of the appr) 215.28 146.67 T
(opriate queue.) 287.32 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 143
%%Page: "142" 144
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(142) 72 677.67 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(9.6.4  Method for) 108 639.33 T
4 F
(f) 195.67 639.33 T
(ind-available-connection) 203.47 639.33 T
1 11 Q
(Now we de\336ne a method that helps \336nd the next place an air) 108 619.67 T
(craft could go. This) 404.68 619.67 T
(is similar to the) 108 605.67 T
4 9.5 Q
(f) 185.54 605.67 T
(ind-connection) 191.24 605.67 T
1 11 Q
( function, which we used without de\336ning in) 271.04 605.67 T
(Section 9.1, but for) 108 591.67 T
4 9.5 Q
(f) 200.94 591.67 T
(ind-available-connection) 206.64 591.67 T
1 11 Q
(, we check to make sur) 343.44 591.67 T
(e the mul-) 453.57 591.67 T
(tiple air) 108 577.67 T
(craft case works corr) 145.47 577.67 T
(ectly) 245.7 577.67 T
(. Note that Dylan classes ar) 267.53 577.67 T
(e \336rst-class objects,) 399.33 577.67 T
(and can be passed fr) 108 563.67 T
(om function to function.) 207 563.67 T
4 9 Q
(def) 108 543 T
(ine method f) 124.2 543 T
(ind-available-connection) 189 543 T
(\050storage) 151.2 532 T
(:: <vehicle-storage>, class-of-next :: <class>,) 205.2 532 T
(aircraft) 156.6 521 T
(:: <standard-aircraft>\051) 205.2 521 T
(block \050return\051) 118.8 510 T
(for \050c in connected-to \050storage\051\051) 129.6 499 T
(if \050instance? \050c, class-of-next\051 &) 140.4 488 T
(available? \050aircraft, c, direction \050aircraft\051\051\051) 156.6 477 T
(return \050c\051;) 145.8 466 T
(end;) 140.4 455 T
(end;) 129.6 444 T
(end;) 118.8 433 T
(end;) 108 422 T
1 11 Q
(In the pr) 108 401.67 T
(eceding method, we \336rst establish a block, thus naming the) 149.62 401.67 T
4 9.5 Q
(return) 440.11 401.67 T
1 11 Q
( func-) 474.31 401.67 T
-0.11 (tion, which we shall use later) 108 387.67 P
-0.11 (. Next we use the) 248.28 387.67 P
4 9.5 Q
-0.23 (for) 334.17 387.67 P
1 11 Q
-0.11 ( constr) 351.27 387.67 P
-0.11 (uct to iterate over all the) 383.71 387.67 P
-0.03 (objects connected to this container) 108 373.67 P
-0.03 (. For each of those objects, if the object matches) 273.59 373.67 P
(the speci\336ed class, and it has some space available, then the container that meets) 108 359.67 T
(both of those criteria is immediately r) 108 345.67 T
(eturned fr) 290.01 345.67 T
(om the block using the) 338.79 345.67 T
4 9.5 Q
(return) 452.08 345.67 T
1 11 Q
-0.01 (function \050and is also r) 108 331.67 P
-0.01 (eturned fr) 213.41 331.67 P
-0.01 (om the method\051, without iterating over any mor) 262.19 331.67 P
-0.01 (e) 495.99 331.67 P
(objects.) 108 317.67 T
3 13 Q
(9.6.5  Revised) 108 286.33 T
4 F
(next-landing-step) 181.49 286.33 T
3 F
( protocol) 314.09 286.33 T
1 11 Q
-0.78 (Now we change the) 108 266.67 P
4 9.5 Q
-1.62 (next-landing-step) 204.46 266.67 P
1 11 Q
-0.78 ( pr) 301.36 266.67 P
-0.78 (otocol. W) 314.09 266.67 P
-0.78 (e r) 358.48 266.67 P
-0.78 (emove the) 369.87 266.67 P
4 9.5 Q
-1.62 (airport) 421.53 266.67 P
1 11 Q
-0.78 ( parame-) 461.43 266.67 P
(ter because only the method for) 108 252.67 T
4 9.5 Q
(<sky>) 264.7 252.67 T
1 11 Q
( needs to know about the airport, and we) 293.2 252.67 T
-0.11 (can simplify the) 108 238.67 P
4 9.5 Q
-0.23 (next-landing-step) 188.33 238.67 P
1 11 Q
-0.11 ( pr) 285.23 238.67 P
-0.11 (otocol by simply making the airport a slot) 298.63 238.67 P
(in) 108 224.67 T
4 9.5 Q
(<sky>) 120.35 224.67 T
1 11 Q
(, since a particular sky instances covers only one particular airport.) 148.85 224.67 T
4 9 Q
(def) 108 204 T
(ine method next-landing-step \050storage) 124.2 204 T
(:: <sky>,) 361.8 204 T
(aircraft) 286.2 193 T
(:: <standard-aircraft>\051) 361.8 193 T
(if \050direction \050aircraft\051 == inbound:\051) 118.8 182 T
(values \050<runway>, f) 129.6 171 T
(lying-time \050aircraft, storage.airport\051\051;) 232.2 171 T
(end;) 118.8 160 T
(end;) 108 149 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 144
%%Page: "143" 145
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(143) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.01 (In the pr) 108 640.67 P
-0.01 (eceding method, we establish that the inbound transition fr) 149.6 640.67 P
-0.01 (om the sky is) 437.31 640.67 P
(to a r) 108 626.67 T
(unway) 132.85 626.67 T
(, and that the time it takes is determined by how long it takes to \337y) 165.45 626.67 T
-0.29 (fr) 108 612.67 P
-0.29 (om the airport to the r) 115.81 612.67 P
-0.29 (unway) 221.79 612.67 P
-0.29 (. After the air) 254.39 612.67 P
-0.29 (craft is airborne, ther) 318.05 612.67 P
-0.29 (e is no additional) 418.58 612.67 P
(transition de\336ned for the outbound case.) 108 598.67 T
4 9 Q
(def) 108 578 T
(ine method next-landing-step \050storage) 124.2 578 T
(:: <runway>,) 361.8 578 T
(aircraft) 286.2 567 T
( :: <standard-aircraft>\051) 356.4 567 T
(select \050aircraft.direction\051) 118.8 556 T
(inbound: => values \050<taxiway>, brake-time \050aircraft\051\051;) 129.6 545 T
(outbound: => values \050<sky>, take-off-time \050aircraft\051\051;) 129.6 534 T
(end;) 118.8 523 T
(end;) 108 512 T
1 11 Q
(In the pr) 108 491.67 T
(eceding method, if an air) 149.62 491.67 T
(craft is on the r) 270.55 491.67 T
(unway) 343.31 491.67 T
(, the next step for the) 375.92 491.67 T
(inbound case is the taxiway) 108 477.67 T
(. The time it takes depends on how fast the air) 241.42 477.67 T
(craft) 464.94 477.67 T
(could brake, plus some taxiing time. For the outbound case, the next stop is the) 108 463.67 T
(sky) 108 449.67 T
(, and that takes some taxiing time, followed by the time it takes the air) 123.68 449.67 T
(craft to) 464.1 449.67 T
(actually take of) 108 435.67 T
(f.) 182.06 435.67 T
4 9 Q
(def) 108 415 T
(ine method next-landing-step \050storage) 124.2 415 T
(:: <taxiway>,) 361.8 415 T
(aircraft) 286.2 404 T
(:: <standard-aircraft>\051) 361.8 404 T
(select \050aircraft.direction\051) 118.8 393 T
(inbound: => values \050<gate>, gate-time \050aircraft\051\051;) 129.6 382 T
(outbound: => values \050<runway>, runway-time \050aircraft\051\051;) 129.6 371 T
(end;) 118.8 360 T
(end;) 108 349 T
1 11 Q
(In the pr) 108 328.67 T
(eceding method, if the air) 149.62 328.67 T
(craft is on the taxiway) 273.9 328.67 T
(, the next step for the) 379.94 328.67 T
(inbound case is a gate. For the outbound case, the next stop is the r) 108 314.67 T
(unway) 432.15 314.67 T
(.) 464.75 314.67 T
4 9 Q
(def) 108 294 T
(ine method next-landing-step \050storage) 124.2 294 T
( :: <gate>,) 356.4 294 T
(aircraft) 286.2 283 T
( :: <standard-aircraft>\051) 356.4 283 T
(values \050<taxiway>, gate-turnaround \050aircraft\051\051;) 118.8 272 T
(end;) 108 261 T
1 11 Q
(In the pr) 108 240.67 T
(eceding method, once the air) 149.62 240.67 T
(craft is at the gate, it will take some time to) 289.6 240.67 T
(transition back out to the taxiway) 108 226.67 T
(. The function) 269.83 226.67 T
4 9.5 Q
(gate-turnaround) 340.02 226.67 T
1 11 Q
( \050not de\336ned) 425.52 226.67 T
(her) 108 212.67 T
(e\051 computes the time-of) 123.82 212.67 T
(fset that r) 238.53 212.67 T
(epr) 284.43 212.67 T
(esents how long that transition takes.) 300.46 212.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 145
%%Page: "144" 146
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(144) 72 677.67 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(9.6.6  Methods for) 108 639.33 T
4 F
(next-out) 201.6 639.33 T
1 11 Q
(Now we need a method that builds on) 108 619.67 T
4 9.5 Q
(next-landing-step) 297.61 619.67 T
1 11 Q
(, and actually deter-) 394.51 619.67 T
(mines which air) 108 605.67 T
(craft could move next, fr) 185.66 605.67 T
(om this container into the next plausible) 304.78 605.67 T
(container) 108 591.67 T
(, and how much time that would take:) 152.78 591.67 T
4 9 Q
(def) 108 571 T
(ine method next-out \050container :: <vehicle-storage>,) 124.2 571 T
(direction :: <symbol>\051) 237.6 560 T
(let next-vehicle = next-out-internal \050container, direction\051;) 118.8 549 T
(if \050next-vehicle\051) 118.8 538 T
(let \050class, time\051 =) 129.6 527 T
(next-landing-step \050container, next-vehicle\051;) 156.6 516 T
(if \050class\051) 129.6 505 T
(let next-container =) 140.4 494 T
(f) 167.4 483 T
(ind-available-connection \050container, class, next-vehicle\051;) 172.8 483 T
(if \050next-container\051) 140.4 472 T
(values \050next-vehicle, container, next-container, time\051;) 151.2 461 T
(end;) 140.4 450 T
(end;) 129.6 439 T
(end;) 118.8 428 T
(end;) 108 417 T
1 11 Q
-0.23 (In the pr) 108 396.67 P
-0.23 (eceding method, we get the next air) 149.17 396.67 P
-0.23 (craft out of the speci\336ed container \050in) 321.07 396.67 P
(the speci\336ed dir) 108 382.67 T
(ection\051 if ther) 186.1 382.67 T
(e is one, and use that object to initialized the) 250.88 382.67 T
4 9.5 Q
(next-) 468.44 382.67 T
(vehicle) 108 368.67 T
1 11 Q
( local variable. Then, if ther) 147.9 368.67 T
(e is such a vehicle \050the container is not empty) 280.34 368.67 T
(in this dir) 108 354.67 T
(ection\051, we determine the next plausible step in the landing/takeof) 155.02 354.67 T
(f) 479.45 354.67 T
(sequence. If ther) 108 340.67 T
(e is such a step \050that is, if this is not an instance of) 187.57 340.67 T
4 9.5 Q
(<sky>) 430.83 340.67 T
1 11 Q
( and the) 459.33 340.67 T
(dir) 108 326.67 T
(ection is) 122.07 326.67 T
4 9.5 Q
(outbound:) 164.78 326.67 T
1 11 Q
(\051, we sear) 216.08 326.67 T
(ch for the next available container matching the) 262.02 326.67 T
(plausible step. If we \336nd one, then we r) 108 312.67 T
(eturn the r) 299.51 312.67 T
(elevant information.) 350.65 312.67 T
-0.04 (W) 135 298.67 P
-0.04 (e de\336ne two helper methods needed by the) 144.99 298.67 P
4 9.5 Q
-0.08 (next-out) 357.6 298.67 P
1 11 Q
-0.04 ( method. The helper) 403.2 298.67 P
(methods \336nd the \336rst air) 108 284.67 T
(craft in line for transition.) 228.49 284.67 T
4 9 Q
(def) 108 264 T
(ine method next-out-internal \050container :: <single-capacity-storage>,) 124.2 264 T
(direction :: <symbol>\051) 286.2 253 T
(container.vehicle-currently-occupying;) 118.8 242 T
(end;) 108 231 T
(def) 108 212 T
(ine method next-out-internal \050container :: <multiple-capacity-storage>,) 124.2 212 T
(direction :: <symbol>\051;) 286.2 201 T
(let vehicle-queue = container.vehicles-by-direction;) 118.8 190 T
(if \050size \050vehicle-queue\051 > 0\051) 118.8 179 T
(vehicle-queue[0];) 129.6 168 T
(end;) 118.8 157 T
(end;) 108 146 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 146
%%Page: "145" 147
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(145) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The helper generic function is named) 108 640.67 T
4 9.5 Q
(next-out-internal) 291.74 640.67 T
1 11 Q
( because we do not) 388.64 640.67 T
-0.73 (expect any methods to call) 108 626.67 P
4 9.5 Q
-1.51 (next-out-internal) 236.16 626.67 P
1 11 Q
-0.73 (, except those associated with) 333.06 626.67 P
4 9.5 Q
-1.51 (next-) 475.5 626.67 P
(out) 108 612.67 T
1 11 Q
( itself. In Appendix 1) 125.1 612.67 T
(1,) 226.49 612.67 T
0 F
(Libraries and Modules) 240.24 612.67 T
1 F
(, a mor) 340.06 612.67 T
(e rigor) 373.68 612.67 T
(ous technique for) 405.51 612.67 T
(de\336ning internal and external interfaces is pr) 108 598.67 T
(esented.) 326.45 598.67 T
-0.14 (The) 135 584.67 P
4 9.5 Q
-0.3 (next-out-internal) 156.02 584.67 P
1 11 Q
-0.14 ( generic function \050and ther) 252.92 584.67 P
-0.14 (efor) 381.3 584.67 P
-0.14 (e) 400.39 584.67 P
4 9.5 Q
-0.3 (next-out) 408.26 584.67 P
1 11 Q
-0.14 (\051 does not) 453.86 584.67 P
-0.24 (actually r) 108 570.67 P
-0.24 (emove anything fr) 153.28 570.67 P
-0.24 (om any queue. Its contract is only to determine which) 242.3 570.67 P
(air) 108 556.67 T
(craft could be r) 120.85 556.67 T
(emoved next.) 194.02 556.67 T
(Note that you can use the squar) 135 542.67 T
(e bracket syntax to access queues, in the) 289.04 542.67 T
(same way that you can access vectors by index.) 108 528.67 T
3 13 Q
(9.6.7  Revised method for) 108 497.33 T
4 F
(land-aircraft) 240.12 497.33 T
1 11 Q
(The following method is the completely r) 108 477.67 T
(evised top-level loop:) 308.71 477.67 T
6 9 Q
(// Assumes airport is empty at the start, and that the inbound queue) 108 457 T
(// of the sky instance is preloaded with the aircraft headed for this) 108 446 T
-0.13 (// airport, and the outbound queue is empty, and the same size as the inbound) 108 435 P
(// queue.) 108 424 T
4 F
(def) 108 413 T
(ine method land-aircraft \050airport :: <airport>, aircraft :: <vector>,) 124.2 413 T
(#key time = $midnight\051) 264.6 402 T
(let sky = airport.sky-instance;) 118.8 391 T
(let containers-visited = make-object-table;) 118.8 380 T
(let vehicles-moved = make-object-table;) 118.8 369 T
6 F
(// Keep going until every incoming aircraft is now in the sky, outbound.) 118.8 358 T
4 F
(while \050available? \050#f, sky, #"outbound"\051\051) 118.8 347 T
(f) 129.6 336 T
(ill! \050containers-visited, #f\051;) 135 336 T
(f) 129.6 325 T
(ill! \050vehicles-moved, #f\051;) 135 325 T
(time := execute-next-transfers \050sky, containers-visited, vehicles-moved,) 129.6 314 T
(time\051;) 291.6 303 T
(end;) 118.8 292 T
(end;) 108 281 T
1 11 Q
-0.2 (W) 108 260.67 P
-0.2 (e start by obtaining the appr) 117.99 260.67 P
-0.2 (opriate) 254.52 260.67 P
4 9.5 Q
-0.41 (<sky>) 291.59 260.67 P
1 11 Q
-0.2 ( instance fr) 320.09 260.67 P
-0.2 (om the airport, cr) 372.91 260.67 P
-0.2 (eating an) 456.92 260.67 P
(object table that will keep track of the containers that have been checked for any) 108 246.67 T
(possible moves, and cr) 108 232.67 T
(eating a table used to ensur) 218.22 232.67 T
(e that a vehicle is moved only) 351.18 232.67 T
-0.57 (once per iteration. W) 108 218.67 P
-0.57 (e implement the main loop with the) 207.17 218.67 P
4 9.5 Q
-1.17 (while) 380.2 218.67 P
1 11 Q
-0.57 ( iteration constr) 408.7 218.67 P
-0.57 (uct.) 483.96 218.67 P
(The looping continues until the sky\325s outbound queue \336lls up with the same) 108 204.67 T
(numnber of air) 108 190.67 T
(craft that have been pushed inbound into the airport \050r) 180.86 190.67 T
(emember) 446.68 190.67 T
(that the sky\325s inbound and outbound queues ar) 108 176.67 T
(e the same length\051. The) 338.61 176.67 T
4 9.5 Q
(#f) 453.84 176.67 T
1 11 Q
( ar) 465.24 176.67 T
(gu-) 477.64 176.67 T
(ment to) 108 162.67 T
4 9.5 Q
(available?) 148.06 162.67 T
1 11 Q
( means that we ar) 205.06 162.67 T
(e checking whether ther) 290.77 162.67 T
(e is available space) 407.42 162.67 T
(for any vehicle \050not for a speci\336c vehicle\051. In the body of the loop, we \336rst clear) 108 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 147
%%Page: "146" 148
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(146) 72 677.67 T
0 9.5 Q
(9.6 Methods that handle aircraft transitions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(the table being used to keep track of the containers checked so far) 108 640.67 T
(, and clear the) 425.64 640.67 T
4 9.5 Q
(vehicles-moved) 108 626.67 T
1 11 Q
( table \050using the) 187.8 626.67 T
4 9.5 Q
(f) 268.38 626.67 T
(ill!) 274.08 626.67 T
1 11 Q
( function\051, then call the main) 296.88 626.67 T
4 9.5 Q
(transfer) 439.08 626.67 T
1 11 Q
-0.29 (method, which will move the air) 108 612.67 P
-0.29 (craft that is next in line at each container one step) 264.89 612.67 P
(forwar) 108 598.67 T
(d \050if possible\051.) 140.84 598.67 T
(The) 135 584.67 T
4 9.5 Q
(f) 156.16 584.67 T
(ill!) 161.86 584.67 T
1 11 Q
( function stor) 184.66 584.67 T
(es its second ar) 249.34 584.67 T
(gument \050in this case) 322.57 584.67 T
4 9.5 Q
(#f) 422.73 584.67 T
1 11 Q
(\051 as the value) 434.13 584.67 T
(of every key in its \336rst ar) 108 570.67 T
(gument, which must be a collection. This is a handy) 228.84 570.67 T
(function to initialize a collection to some known state.) 108 556.67 T
3 13 Q
(9.6.8  Method for) 108 525.33 T
4 F
(execute-next-transfers) 195.67 525.33 T
4 9 Q
(def) 108 505 T
(ine method execute-next-transfers \050container :: <vehicle-storage>,) 124.2 505 T
(containers-visited :: <object-table>,) 313.2 494 T
(vehicles-moved :: <object-table>,) 313.2 483 T
(time :: <time>\051) 313.2 472 T
(let max-time = $midnight) 118.8 461 T
6 F
(// Don\325t bother to check containers we have already checked for) 118.8 450 T
(// candidates to move.) 118.8 439 T
4 F
(unless \050containers-visited[container]\051) 118.8 428 T
(containers-visited[container] := #t;) 129.6 417 T
6 F
(// The local method consider-transfer forms the core of) 129.6 406 T
(// execute-next-transfers. Given a vehicle, the containers it is) 129.6 395 T
(// currently in, the next container it should move into, and the) 129.6 384 T
(// time it will take to execute the transfer, this method) 129.6 373 T
(// determines if the transfer should take place, and if so, then) 129.6 362 T
(// the transfer is executed.) 129.6 351 T
4 F
(local method consider-transfer \050pvehicle, pcurrent-container,) 129.6 340 T
(pnext-container, ptime\051) 291.6 329 T
6 F
(// If there is a vehicle to move, and we haven\325t already moved) 135 318 T
(// this particular vehicle once this round...) 135 307 T
4 F
(if \050pvehicle & \050~ vehicles-moved[pvehicle]\051\051) 135 296 T
4 9.5 Q
(//...then remember we have moved this particular vehicle this) 147.9 285 T
(//round.) 147.9 274 T
4 9 Q
(vehicles-moved[pvehicle] := #t;) 145.8 263 T
6 F
(// Transfer the vehicle from where it is, to where it needs to go.) 145.8 252 T
4 F
(move-out-vehicle \050pvehicle, pcurrent-container, pvehicle.direction\051;) 145.8 241 T
(move-in-vehicle \050pvehicle, pnext-container, pvehicle.direction\051;) 145.8 230 T
(// Compute the time of arrival at the next place, and display) 145.8 219 T
(// the message.) 145.8 208 T
(next-time = time + ptime;) 145.8 197 T
(say-step \050next-time, pvehicle, pnext-container\051;) 145.8 186 T
(// Keep track of the latest time an action took place.) 145.8 175 T
(max-time := max \050max-time, next-time\051;) 145.8 164 T
(end if;) 129.6 153 T
(end method consider-transfer;) 124.2 142 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 148
%%Page: "147" 149
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(147) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// Perform the above operations on whatever might be next inbound for) 124.2 642 T
(// the container.) 124.2 631 T
4 F
(let \050vehicle, current-container, next-container, time\051 =) 124.2 620 T
(next-out \050container, outbound:\051;) 140.4 609 T
(consider-transfer \050vehicle, current-container, next-container, time\051;) 124.2 598 T
6 F
(// Ditto for whatever might be next outbound.) 124.2 587 T
4 F
(let \050vehicle, current-container, next-container, time\051 =) 124.2 576 T
(next-out \050container, inbound:\051;) 140.4 565 T
(consider-transfer \050vehicle, current-container, next-container, time\051;) 124.2 554 T
6 F
(// Then check all the containers connected to the container.) 124.2 543 T
4 F
(for \050c in connected-to \050container\051\051) 124.2 532 T
(max-time := max \050max-time,) 135 521 T
(execute-next-transfers \050c, containers-visited,) 226.8 510 T
(time\051\051;) 356.4 499 T
(end for;) 124.2 488 T
(end unless;) 118.8 477 T
(max-time;) 118.8 466 T
(end method execute-next-transfers;) 108 455 T
1 11 Q
-1.13 (In the pr) 108 434.67 P
-1.13 (eceding method for) 147.37 434.67 P
4 9.5 Q
-2.34 (execute-next-transfers) 241.81 434.67 P
1 11 Q
-1.13 (, we initialize the latest trans-) 367.21 434.67 P
-0.34 (fer to midnight. W) 108 420.67 P
-0.34 (e should \336nd aome transfer later than this during our sear) 196.17 420.67 P
-0.34 (ch, or) 474.8 420.67 P
-0.15 (ther) 108 406.67 P
-0.15 (e is a pr) 127.4 406.67 P
-0.15 (oblem. Next, if we have alr) 164.59 406.67 P
-0.15 (eady visited this container) 294.55 406.67 P
-0.15 (, we need not do) 421.44 406.67 P
(anything further) 108 392.67 T
(.) 187.9 392.67 T
(Next we note that the curr) 135 378.67 T
(ent container has been visited, and we de\336ne a) 262.47 378.67 T
2 F
(local method) 108 364.67 T
1 F
( named) 173.08 364.67 T
4 9.5 Q
(consider-transfer) 212.18 364.67 T
1 11 Q
(. The name of this method is accessible) 308.27 364.67 T
(only in the r) 108 350.67 T
(est of the body of) 166.98 350.67 T
4 9.5 Q
(execute-next-transfers) 253.77 350.67 T
1 11 Q
(.) 379.17 350.67 T
-0.22 (The) 135 336.67 P
4 9.5 Q
-0.45 (consider-transfer) 155.95 336.67 P
1 11 Q
-0.22 ( method takes as ar) 252.85 336.67 P
-0.22 (guments: an air) 345.62 336.67 P
-0.22 (craft, a container) 420.58 336.67 P
(the air) 108 322.67 T
(craft is curr) 138.85 322.67 T
(ently in, the container it should move to, and the time in min-) 194.21 322.67 T
(utes as an integer it will take to execute such a transfer) 108 308.67 T
(. In the method, we per-) 371.91 308.67 T
(form the transfer if the vehicle is not false \050that is, we \336nd a vehicle to transfer\051) 108 294.67 T
(and if we have not alr) 108 280.67 T
(eady moved this vehicle this time \050that is, since) 213.91 280.67 T
4 9.5 Q
(execute-) 445.88 280.67 T
(next-transfers) 108 266.67 T
1 11 Q
( was called\051. By limiting the number of times a vehicle can move) 187.8 266.67 T
-0.22 (per call to) 108 252.67 P
4 9.5 Q
-0.45 (execute-next-transfers) 158.2 252.67 P
1 11 Q
-0.22 (, we ensur) 283.6 252.67 P
-0.22 (e that each vehicle gets an opportu-) 332.97 252.67 P
(nity to advance thr) 108 238.67 T
(ough the airport if it is next in line out of a container) 199.77 238.67 T
(. If the) 453.08 238.67 T
(vehicle is suitable, we note that the vehicle has now been moved once, call) 108 224.67 T
4 9.5 Q
(move-) 471.36 224.67 T
(out-vehicle) 108 210.67 T
1 11 Q
( and) 170.7 210.67 T
4 9.5 Q
(move-in-vehicle) 194.82 210.67 T
1 11 Q
( to accomplish the transfer) 280.32 210.67 T
(, \336gur) 408.2 210.67 T
(e out what) 437.25 210.67 T
(time the transfer occurr) 108 196.67 T
(ed, r) 221.95 196.67 T
(eport the transfer to the user) 243.59 196.67 T
(, and update the latest) 381.13 196.67 T
(time an event has occurr) 108 182.67 T
(ed during this execution of) 226.88 182.67 T
4 9.5 Q
(execute-next-transfers) 360.48 182.67 T
1 11 Q
(, if) 485.88 182.67 T
(this particular event is the latest.) 108 168.67 T
(W) 135 154.67 T
(e call the) 144.99 154.67 T
4 9.5 Q
(consider-transfer) 190.55 154.67 T
1 11 Q
( local method fr) 287.45 154.67 T
(om the body of) 364 154.67 T
4 9.5 Q
(execute-) 440.57 154.67 T
(next-transfers) 108 140.67 T
1 11 Q
( for any possible inbound traf) 187.8 140.67 T
(\336c for this container) 331.62 140.67 T
(, and for any) 428.06 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 149
%%Page: "148" 150
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(148) 72 677.67 T
0 9.5 Q
(9.7 Method for sorting) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(possible outbound traf) 108 640.67 T
(\336c for this container) 218.16 640.67 T
(, and then we r) 314.6 640.67 T
(epeaat this entir) 387.22 640.67 T
(e pr) 464.92 640.67 T
(o-) 483.69 640.67 T
-0.1 (cess for any containers connected to this container) 108 626.67 P
-0.1 (. The r) 349.95 626.67 P
-0.1 (ecursion terminates once) 380.56 626.67 P
-0.38 (all connected containers have been visited. Note that the messages generated may) 108 612.67 P
(not be in chr) 108 598.67 T
(onological or) 168.63 598.67 T
(der anymor) 232.06 598.67 T
(e. W) 289.03 598.67 T
(e could solve this pr) 309.78 598.67 T
(oblem by cr) 407.46 598.67 T
(eating) 464.47 598.67 T
(log r) 108 584.67 T
(ecor) 130.22 584.67 T
(ds, and sorting those log r) 150.53 584.67 T
(ecor) 276.75 584.67 T
(ds befor) 297.06 584.67 T
(e displaying them to the user) 336.36 584.67 T
(.) 477.03 584.67 T
3 13 Q
(9.6.9  Revised) 108 553.33 T
4 F
(available?) 181.49 553.33 T
3 F
( method) 259.49 553.33 T
1 11 Q
(As it turns out, ther) 108 533.67 T
(e is a signi\336cant pr) 203.02 533.67 T
(oblem with the code in Section 9.6.8.) 294.02 533.67 T
(Depending on the arrival times of the air) 108 519.67 T
(craft, it would be possible to completely) 305.93 519.67 T
(load up the airport with traf) 108 505.67 T
(\336c. If the taxiway is full of inbound and outbound) 244.53 505.67 T
(traf) 108 491.67 T
(\336c, and the r) 124.9 491.67 T
(unway is occupied by an inbound air) 185.57 491.67 T
(craft, and the gates ar) 366.37 491.67 T
(e full,) 470.76 491.67 T
(then a deadlock occurs. No air) 108 477.67 T
(craft can depart fr) 255.49 477.67 T
(om the outbound taxiway) 342.34 477.67 T
(because the r) 108 463.67 T
(unway is blocked with the inbound air) 171.32 463.67 T
(craft. The inbound air) 359.7 463.67 T
(craft) 465.39 463.67 T
(cannot get onto the taxiway because it is full. T) 108 449.67 T
(o solve this pr) 334.64 449.67 T
(oblem, we change) 402.87 449.67 T
(the) 108 435.67 T
4 9.5 Q
(available?) 126.01 435.67 T
1 11 Q
( method on) 183.01 435.67 T
4 9.5 Q
(<runway>) 241.36 435.67 T
1 11 Q
( to r) 286.96 435.67 T
(eport that the r) 306.2 435.67 T
(unway available to) 378.86 435.67 T
(inbound traf) 108 421.67 T
(\336c only if ther) 169.09 421.67 T
(e is an inbound taxiway with space once the air) 236.88 421.67 T
(craft) 466.82 421.67 T
(lands.) 108 407.67 T
4 9 Q
(def) 108 387 T
(ine method available? \050vehicle) 124.2 387 T
(:: <standard-aircraft>,) 302.4 387 T
(container :: <runway>,) 248.4 376 T
(direction :: <symbol>\051) 248.4 365 T
(next-method \050\051 &) 118.8 354 T
(select \050direction\051) 129.6 343 T
(outbound: => #t;) 135 332 T
(inbound: =>) 135 321 T
(let \050class, time\051 = next-landing-step \050container, vehicle\051;) 145.8 310 T
(if \050class\051) 145.8 299 T
(f) 156.6 288 T
(ind-available-connection \050container, class, vehicle\051;) 162 288 T
(end;) 145.8 277 T
(end;) 129.6 266 T
(end;) 108 255 T
1 11 Q
(This solution can be generalized for any deadlock interaction between single and) 108 234.67 T
(multiple capacity containers.) 108 220.67 T
3 15 Q
(9.7  Method for sorting) 108 181 T
1 11 Q
(Ther) 108 160.67 T
(e ar) 130.56 160.67 T
(e many built-in functions that manipulate collections in various ways.) 148.23 160.67 T
(One example is the) 108 146.67 T
4 9.5 Q
(sort) 203.68 146.67 T
1 11 Q
( generic function, which sorts the elements of sequences.) 226.48 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 150
%%Page: "149" 151
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(9 Advanced Collections and Control Flow) 354 677.67 T
2 11 Q
(149) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(In the examples in the pr) 108 640.67 T
(evious section, ther) 228.64 640.67 T
(e was an assumption that the user) 322.29 640.67 T
(had alr) 108 626.67 T
(eady sorted the vector of inbound air) 142.22 626.67 T
(craft befor) 322.45 626.67 T
(e cr) 372.34 626.67 T
(eating the) 389.39 626.67 T
4 9.5 Q
(<sky>) 440.22 626.67 T
1 11 Q
(instance. The following method could help the user sort the inbound air) 108 612.67 T
(craft vec-) 457.24 612.67 T
(tor:) 108 598.67 T
4 9 Q
(def) 108 578 T
(ine method sort-inbound-aircraft) 124.2 578 T
(\050inbound-vector :: <simple-object-vector>, airport :: <airport>\051) 129.6 567 T
(sort \050inbound-vector,) 118.8 556 T
(test: method \050a, b\051) 151.2 545 T
(f) 194.4 534 T
(lying-time \050a, airport\051 < f) 199.8 534 T
(lying-time \050b, airport\051) 345.6 534 T
(end\051;) 183.6 523 T
(end;) 108 512 T
1 11 Q
(W) 108 491.67 T
(e pr) 117.99 491.67 T
(ovide an bar) 136.76 491.67 T
(e method as the test function to the) 197.31 491.67 T
4 9.5 Q
(sort) 370.43 491.67 T
1 11 Q
( generic function; this) 393.23 491.67 T
(method helps sort the inbound air) 108 477.67 T
(craft vector in the or) 273.75 477.67 T
(der of time to \337y to the) 372.04 477.67 T
(speci\336ed airport. Note that) 108 463.67 T
4 9.5 Q
(sort) 241.69 463.67 T
1 11 Q
( does not alter its ar) 264.49 463.67 T
(gument, but cr) 359.9 463.67 T
(eates a new) 431.2 463.67 T
(sequence with the elements sorted.) 108 449.67 T
(Dylan supplies a rich set of sequence manipulation functions in particular) 135 435.67 T
(,) 493.15 435.67 T
(and collection manipulation functions in general. See the) 108 421.67 T
0 F
(Dylan Refer) 386.68 421.67 T
(ence Manual) 440.58 421.67 T
1 F
(for mor) 108 407.67 T
(e information.) 144.63 407.67 T
3 15 Q
(9.8  Summary) 108 368 T
1 11 Q
(This chapter cover) 108 347.67 T
(ed:) 197.63 347.67 T
(\245) 117 327.67 T
(W) 135 327.67 T
(e used four dif) 144.99 327.67 T
(fer) 215.83 327.67 T
(ent contr) 228.91 327.67 T
(ol str) 271.94 327.67 T
(uctur) 296.4 327.67 T
(es:) 322.29 327.67 T
4 9.5 Q
(if-elseif-else) 337.72 327.67 T
1 11 Q
(,) 417.52 327.67 T
4 9.5 Q
(case) 423.02 327.67 T
1 11 Q
(,) 445.82 327.67 T
4 9.5 Q
(select) 451.32 327.67 T
1 11 Q
(,) 485.52 327.67 T
(and generic function dispatch.) 135 313.67 T
(\245) 117 293.67 T
(W) 135 293.67 T
(e used the) 144.99 293.67 T
4 9.5 Q
(do) 197.05 293.67 T
1 11 Q
( iterator) 208.45 293.67 T
(.) 246.23 293.67 T
(\245) 117 273.67 T
(W) 135 273.67 T
(e de\336ned local methods and bar) 144.99 273.67 T
(e methods.) 300.55 273.67 T
(\245) 117 253.67 T
(W) 135 253.67 T
(e used tables, queues, and symbol Dylan collection classes.) 144.99 253.67 T
(\245) 117 233.67 T
(W) 135 233.67 T
(e de\336ned constr) 144.99 233.67 T
(uctors.) 222.59 233.67 T
(\245) 117 213.67 T
(W) 135 213.67 T
(e de\336ned an init-function.) 144.99 213.67 T
(\245) 117 193.67 T
(W) 135 193.67 T
(e used the) 144.99 193.67 T
4 9.5 Q
(sort) 197.05 193.67 T
1 11 Q
( and) 219.85 193.67 T
4 9.5 Q
(f) 243.97 193.67 T
(ill!) 249.67 193.67 T
1 11 Q
( functions.) 272.47 193.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 151
%%Page: "150" 152
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(150) 72 677.67 T
0 9.5 Q
(9.8 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 152
%%Page: "151" 153
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(151) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(10) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(10) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Exceptions) 110 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In this chapter) 108 424.67 T
(, we discuss how to use Dylan facilities to help cr) 177.24 424.67 T
(eate r) 415.32 424.67 T
(eliable pr) 441.84 424.67 T
(o-) 487.07 424.67 T
(grams in the face of exceptional situations, or) 108 410.67 T
2 F
(exceptions) 330.33 410.67 T
1 F
(. An exception is an) 383.48 410.67 T
(unexpected event that occurs during pr) 108 396.67 T
(ogram execution. One common type of) 299.48 396.67 T
(exception is a violation of the contract of a function, such as attempting to divide) 108 382.67 T
(a number by zer) 108 368.67 T
(o. Another example is an attempt to access an uninitialized slot.) 187.31 368.67 T
(Those two exceptions ar) 108 354.67 T
(e detected by Dylan itself. Sometimes an application) 225.32 354.67 T
(detects a violation of a contract it de\336nes. For example, our simple integer parser) 108 340.67 T
(\050de\336ned in Section 8.7.1, page 1) 108 326.67 T
(18\051 detects err) 260.32 326.67 T
(ors in the syntax of its ar) 328.22 326.67 T
(gument.) 447.31 326.67 T
(When an application detects an unusual event, ther) 135 312.67 T
(e ar) 384.37 312.67 T
(e many options) 402.04 312.67 T
-0.09 (available for r) 108 298.67 P
-0.09 (esponding to that event. Some options ar) 175.16 298.67 P
-0.09 (e unstr) 373.57 298.67 P
-0.09 (uctur) 407.04 298.67 P
-0.09 (ed. In the case) 432.92 298.67 P
-0.04 (of the integer parser) 108 284.67 P
-0.04 (, we simply display a warning and ignor) 205.17 284.67 P
-0.04 (e the bit of tr) 402 284.67 P
-0.04 (oubling) 463.65 284.67 P
(syntax. Sometimes a mor) 108 270.67 T
(e str) 229.51 270.67 T
(uctur) 250.03 270.67 T
(ed appr) 275.92 270.67 T
(oach is useful. For example, the code) 313.52 270.67 T
(calling the integer parser might like to know that the time is in an incorr) 108 256.67 T
(ect for-) 457.73 256.67 T
(mat. Per) 108 242.67 T
(haps that time came fr) 148.36 242.67 T
(om an interactive user) 256.55 242.67 T
(, and the application could) 363.98 242.67 T
-0.39 (ask the user to enter the time again. In this chapter) 108 228.67 P
-0.39 (, we explor) 348.76 228.67 P
-0.39 (e several appr) 401.59 228.67 P
-0.39 (oaches) 468.91 228.67 P
(to pr) 108 214.67 T
(oviding a exception pr) 131.1 214.67 T
(otocol between parts of an application.) 240.37 214.67 T
3 15 Q
(10.1  An informal exception protocol) 108 175 T
1 11 Q
-0.27 (The goal of this example is to modify the integer parser used by the time parser to) 108 154.67 P
-0.26 (r) 108 140.67 P
-0.26 (ecognize invalid input, and to pr) 112.15 140.67 P
-0.26 (ompt the user to enter an integer) 269.83 140.67 P
-0.26 (. In this section,) 426.58 140.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 153
%%Page: "152" 154
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(152) 72 677.67 T
0 9.5 Q
(10.1 An informal exception protocol) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
-0.02 (we show a very simple way to handle exceptions, without using the Dylan condi-) 108 640.67 P
(tions facility) 108 626.67 T
(. W) 166.74 626.67 T
(e then discuss the pr) 182.23 626.67 T
(oblems with this informal appr) 281.6 626.67 T
(oach. In Sec-) 432.65 626.67 T
(tion 10.2, we achieve the same goal using Dylan conditions, and solve the) 108 612.67 T
(pr) 108 598.67 T
(oblems with the informal appr) 118.76 598.67 T
(oach.) 267.21 598.67 T
(W) 135 584.67 T
(e shall modify the integer parser used by the time parser to r) 144.99 584.67 T
(ecognize) 438.81 584.67 T
-0.89 (invalid input. W) 108 570.67 P
-0.89 (e shall pr) 185.32 570.67 P
-0.89 (ovide a method) 228.03 570.67 P
4 9.5 Q
-1.85 (interactive-read-integer) 304.21 570.67 P
1 11 Q
-0.89 ( that uses the) 441.01 570.67 P
-0.93 (new) 108 556.67 P
4 9.5 Q
-1.93 (parse-integer) 130.66 556.67 P
1 11 Q
-0.93 (, and r) 203.95 556.67 P
-0.93 (ecovers fr) 233.11 556.67 P
-0.93 (om any detected parse err) 279.39 556.67 P
-0.93 (ors by pr) 401.86 556.67 P
-0.93 (ompting the) 443.47 556.67 P
(user for an integer) 108 542.67 T
(. The following example is a sample dialog with) 196.45 542.67 T
4 9.5 Q
(interactive-) 432.01 542.67 T
(read-integer) 108 528.67 T
1 11 Q
(:) 176.4 528.67 T
5 9 Q
(?) 108 508 T
4 F
( interactive-read-integer\050*window*, prompt: "How old are you? "\051;) 113.4 508 T
5 F
(How old are you?) 108 489 T
4 F
( forever young) 194.4 489 T
5 F
(Illegal integer: Illegal character.) 108 478 T
(How old are you?) 108 459 T
4 F
( 0-60) 194.4 459 T
5 F
(Illegal integer: Sign in illegal spot.) 108 448 T
(How old are you?) 108 429 T
4 F
( 17) 194.4 429 T
(17) 108 418 T
3 13 Q
(10.1.1  The) 108 388.33 T
4 F
(parse-integer) 165.49 388.33 T
3 F
( method using informal exceptions) 266.89 388.33 T
1 11 Q
(The following example is the modi\336ed version of) 108 368.67 T
4 9.5 Q
(parse-integer) 349.8 368.67 T
1 11 Q
(. First we de\336ne) 423.09 368.67 T
(some constants and some pr) 108 354.67 T
(edicates which use those pr) 245.38 354.67 T
(edicates. This will make) 378.79 354.67 T
4 9.5 Q
(parse-integer) 108 340.67 T
1 11 Q
(itself simpler) 187.8 340.67 T
(.) 250.32 340.67 T
4 9 Q
(def) 108 320 T
(ine constant $whitespace-chars = #[' ', '\134t', '\134n', '\134r']) 124.2 320 T
(def) 108 301 T
(ine constant $sign-chars = #[\325+\325, \325-\325]) 124.2 301 T
(def) 108 282 T
(ine method digit? \050char :: <character>\051) 124.2 282 T
(member? \050char, $digits\051;) 118.8 271 T
(end;) 108 260 T
(def) 108 241 T
(ine method whitespace? \050char :: <character>\051) 124.2 241 T
(member? \050char, $whitespace-chars\051;) 118.8 230 T
(end;) 108 219 T
(def) 108 200 T
(ine method sign? \050char :: <character>\051) 124.2 200 T
(member? \050char, $sign-chars\051) 118.8 189 T
(end;) 108 178 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 154
%%Page: "153" 155
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(153) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// This is a very simple integer parser with its own homegrown exception) 108 642 T
-0.15 (// conventions. If parse-integer returns an integer as its f) 108 631 P
-0.15 (irst value, then) 430.65 631 P
(// the results of calling the method are valid. If parse-integer returns a) 108 620 T
(// string as its f) 108 609 T
(irst argument,then there was a parsing problem, and the) 205.2 609 T
(// string will give some indication of the nature of that problem.) 108 598 T
4 F
(def) 108 587 T
(ine method parse-integer) 124.2 587 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051) 129.6 576 T
(block \050return\051) 118.8 565 T
(let length = size \050integer-string\051;) 129.6 554 T
(let result = #f;) 129.6 543 T
(let sign = #f;) 129.6 532 T
(let end-index = start;) 129.6 521 T
(for \050index from start below length\051) 129.6 510 T
(let char = integer-string[index];) 140.4 499 T
(case) 140.4 488 T
(// Is the character a digit?) 151.2 477 T
(digit? \050char\051 =>) 151.2 466 T
(let value = position \050char, $digits\051;) 162 455 T
(if \050result\051) 162 444 T
6 F
(// If we have already started to generate the integer) 183.6 433 T
(// shift the result to make room for the next digit.) 183.6 422 T
4 F
(result := \050result * 10\051 + value;) 183.6 411 T
(else) 172.8 400 T
(result := value;) 183.6 389 T
(end;) 162 378 T
6 F
(// Is the character whitespace?) 151.2 367 T
4 F
(whitespace? \050char\051 => #f;) 151.2 356 T
6 F
(// Is the character a sign?) 151.2 345 T
4 F
(sign? \050char\051 => if \050result | sign\051) 151.2 334 T
(return\050"Sign in illegal spot\323\051;) 248.4 323 T
(else) 237.6 312 T
(sign := char;) 248.4 301 T
(end;) 237.6 290 T
6 F
(// Is the character the specif) 151.2 279 T
(ied character to stop at when reached?) 313.2 279 T
4 F
(char == delimiter => return \050values \050result, sign, index\051\051;) 151.2 268 T
(otherwise => return \050"Illegal character"\051;) 151.2 257 T
(end case;) 140.4 246 T
(f) 129.6 235 T
(inally return \050values \050result, sign, length\051\051;) 135 235 T
(end for;) 129.6 224 T
(end block;) 118.8 213 T
(end method parse-integer;) 108 202 T
1 11 Q
(In the pr) 108 181.67 T
(eceding example, we have modi\336ed the) 149.62 181.67 T
4 9.5 Q
( parse-integer) 342.6 181.67 T
1 11 Q
(function in sev-) 428.1 181.67 T
(eral important ways. First, we have r) 108 167.67 T
(emoved the original r) 286.61 167.67 T
(eturn values declara-) 391.43 167.67 T
(tion \050) 108 153.67 T
4 9.5 Q
(\050integer :: <integer>, sign, end-index :: <integer>\051) 133.61 153.67 T
1 11 Q
(\051 because now) 430.01 153.67 T
(this function r) 108 139.67 T
(eturns those thr) 176.28 139.67 T
(ee values only when pr) 252.74 139.67 T
(esented with a syntactically) 365.49 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 155
%%Page: "154" 156
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(154) 72 677.67 T
0 9.5 Q
(10.1 An informal exception protocol) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(valid integer string. If the function r) 108 640.67 T
(eceives an invalid ar) 282.14 640.67 T
(gument, it r) 381.15 640.67 T
(eturns a) 438.05 640.67 T
(string describing the parse err) 108 626.67 T
(or) 253.61 626.67 T
(. The other changes r) 263.14 626.67 T
(evise the two ar) 364.3 626.67 T
(eas wher) 440.84 626.67 T
(e) 484.01 626.67 T
(parse err) 108 612.67 T
(ors ar) 150.9 612.67 T
(e detected to r) 178.31 612.67 T
(eturn a string rather than print out a warning and) 246.88 612.67 T
(continue.) 108 598.67 T
3 13 Q
(10.1.2  The) 108 567.33 T
4 F
(interactive-read-integer) 165.49 567.33 T
3 F
( method) 352.69 567.33 T
1 11 Q
(W) 108 547.67 T
(e can now de\336ne) 117.99 547.67 T
4 9.5 Q
(interactive-read-integer) 202.94 547.67 T
1 11 Q
(. This function pr) 338.93 547.67 T
(ompts the user) 422.47 547.67 T
(,) 493.91 547.67 T
-0.31 (and r) 108 533.67 P
-0.31 (eturns the integer the user enter) 133.21 533.67 P
-0.31 (ed. If the user enter) 286.57 533.67 P
-0.31 (ed the integer incorr) 379.26 533.67 P
-0.31 (ectly) 476.98 533.67 P
-0.31 (,) 498.82 533.67 P
(this function prints an err) 108 519.67 T
(or message and pr) 232.1 519.67 T
(ompts the user to pr) 321.28 519.67 T
(ovide input) 419.38 519.67 T
(again.) 108 505.67 T
4 9 Q
-0.22 (def) 108 485 P
-0.22 (ine method interactive-read-integer \050where #key prompt = "Enter integer:"\051) 124.2 485 P
(block \050return\051) 118.8 474 T
(while \050#t\051) 129.6 463 T
(format \050where, "\134n%s", prompt\051;) 140.4 452 T
(let result = parse-integer \050read-line \050where\051\051;) 140.4 441 T
(select \050result by instance?\051) 140.4 430 T
(<integer> => return \050result\051;) 151.2 419 T
(<string>) 151.2 408 T
(=> format \050where, "\134nIllegal integer: %s.", result\051;) 205.2 408 T
(end;) 129.6 397 T
(end;) 118.8 386 T
(end;) 108 375 T
1 11 Q
(The block pr) 108 354.67 T
(ovides a way to exit the loop when a pr) 168.96 354.67 T
(oper integer is enter) 359.99 354.67 T
(ed. The) 457.2 354.67 T
4 9.5 Q
(while) 108 340.67 T
1 11 Q
( loop continues to iterate until we r) 136.5 340.67 T
(eturn fr) 306.58 340.67 T
(om the block \050with a valid inte-) 343.38 340.67 T
(ger\051. W) 108 326.67 T
(ithin the) 143.29 326.67 T
4 9.5 Q
(while) 186.84 326.67 T
1 11 Q
( loop, the user is pr) 215.34 326.67 T
(ompted for input. The) 308.45 326.67 T
4 9.5 Q
(read-line) 418.97 326.67 T
1 11 Q
(method r) 108 312.67 T
(eads a line of text fr) 152.59 312.67 T
(om the user) 247.67 312.67 T
(, and r) 304.24 312.67 T
(eturns that text in the form of a) 335.26 312.67 T
-0.38 (string. This string is then passed as the ar) 108 298.67 P
-0.38 (gument to the) 305.33 298.67 P
4 9.5 Q
-0.8 (parse-integer) 374.99 298.67 P
1 11 Q
-0.38 ( method. If) 449.09 298.67 P
(the user typed something that could not be parsed as an integer) 108 284.67 T
(, then) 416.49 284.67 T
4 9.5 Q
(parse-) 446.4 284.67 T
-0.02 (integer) 108 270.67 P
1 11 Q
-0.01 ( r) 147.9 270.67 P
-0.01 (eturns an err) 154.79 270.67 P
-0.01 (or message string instead of an integer) 216.84 270.67 P
-0.01 (. The) 403.43 270.67 P
4 9.5 Q
-0.02 (select) 430.08 270.67 P
1 11 Q
-0.01 ( contr) 464.28 270.67 P
-0.01 (ol) 492.05 270.67 P
(str) 108 256.67 T
(uctur) 120.51 256.67 T
(e checks the type of the r) 146.39 256.67 T
(esult, and either r) 266.29 256.67 T
(eturns the valid integer) 351.48 256.67 T
(, or) 464.1 256.67 T
(prints the err) 108 242.67 T
(or message string. If the integer was not valid, the) 171.33 242.67 T
4 9.5 Q
(while) 416.43 242.67 T
1 11 Q
( loop) 444.93 242.67 T
(ensur) 108 228.67 T
(es that the user is pr) 135.12 228.67 T
(ompted to enter an integer) 232.66 228.67 T
(.) 361.31 228.67 T
(Experienced users who see) 135 214.67 T
4 9.5 Q
(format) 268.73 214.67 T
1 11 Q
( and) 302.93 214.67 T
4 9.5 Q
(read-line) 327.05 214.67 T
1 11 Q
( in the example might) 378.35 214.67 T
(expect a discussion of str) 108 200.67 T
(eams; however) 228.9 200.67 T
(, str) 301.41 200.67 T
(eams ar) 319.31 200.67 T
(e beyond the scope of this) 356.85 200.67 T
(book.) 108 186.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 156
%%Page: "155" 157
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(155) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(10.1.3  Problems with the informal exception protocol) 108 639.33 T
1 11 Q
(Ther) 108 619.67 T
(e ar) 130.56 619.67 T
(e several signi\336cant pr) 148.23 619.67 T
(oblems with the appr) 257.58 619.67 T
(oach used in Section 10.1:) 361.25 619.67 T
(\245) 117 599.67 T
(All the callers of the) 135 599.67 T
4 9.5 Q
(parse-integer) 234.96 599.67 T
1 11 Q
( function must now check the r) 309.06 599.67 T
(eturn) 459.47 599.67 T
(value, and dispatch based on the \336rst type r) 135 585.67 T
(eturned. This br) 347.64 585.67 T
(eaks up the) 425.36 585.67 T
(normal \337ow of contr) 135 571.67 T
(ol, and gives as much weight to the unusual case \050the) 234.98 571.67 T
(exception\051 as it does to the usual case. If a caller fails to check the r) 135 557.67 T
(eturn) 457.02 557.67 T
(value to see if it is a string, then a dif) 135 543.67 T
(fer) 312.74 543.67 T
(ent exception will happen later in) 325.82 543.67 T
-0.02 (the pr) 135 529.67 P
-0.02 (ogram \050such as adding a string and number together\051, when it will be) 163.74 529.67 P
(har) 135 515.67 T
(d to trace the pr) 151.05 515.67 T
(oblem back to the original point of failur) 227.96 515.67 T
(e. For functions) 424.71 515.67 T
(that might r) 135 501.67 T
(eturn any object, an additional r) 192.74 501.67 T
(eturn value would have to be) 347.98 501.67 T
(used to indicate that an exception occurr) 135 487.67 T
(ed. It would be easy to for) 331.92 487.67 T
(get to) 458.5 487.67 T
(check the extra r) 135 473.67 T
(eturn value, and failing to check this extra r) 214.59 473.67 T
(eturn value) 425.82 473.67 T
(could easily go undetected, causing unpr) 135 459.67 T
(edictable pr) 334.55 459.67 T
(ogram behavior) 391.77 459.67 T
(.) 468.41 459.67 T
(\245) 117 439.67 T
(A casual r) 135 439.67 T
(eader of the code could become easily confused about this ad hoc) 183.59 439.67 T
(err) 135 425.67 T
(or pr) 148.76 425.67 T
(otocol. The comments could be overlooked, and someone might) 172.62 425.67 T
(write code that did not obey this ad hoc pr) 135 411.67 T
(otocol. Also, if everyone uses) 341.51 411.67 T
(their own err) 135 397.67 T
(or pr) 198.65 397.67 T
(otocol, it would be har) 222.51 397.67 T
(d to r) 331.87 397.67 T
(emember which convention) 357.83 397.67 T
-0.08 (to obey at the call site; pr) 135 383.67 P
-0.08 (ogrammers would have to check the convention in) 255.45 383.67 P
(the sour) 135 369.67 T
(ce code or pr) 174.46 369.67 T
(ogrammer documentation.) 236.85 369.67 T
(\245) 117 349.67 T
(W) 135 349.67 T
(e lose the ability to str) 144.99 349.67 T
(ongly type the r) 251.28 349.67 T
(eturn values. This may pr) 328.36 349.67 T
(event) 452.92 349.67 T
(some compile-time err) 135 335.67 T
(or checking that could catch err) 244.23 335.67 T
(ors that would be dif-) 397.14 335.67 T
(\336cult or inconvenient to catch at r) 135 321.67 T
(untime. It may also pr) 298.24 321.67 T
(event the compiler) 405.55 321.67 T
(fr) 135 307.67 T
(om optimizing code that uses the r) 142.81 307.67 T
(esults of this function, thus decr) 311.15 307.67 T
(easing) 466.28 307.67 T
(performance of the application.) 135 293.67 T
(\245) 117 273.67 T
(W) 135 273.67 T
(e ar) 144.99 273.67 T
(e limited in how we can r) 162.65 273.67 T
(ecover fr) 285.88 273.67 T
(om the err) 328.42 273.67 T
(or) 378.66 273.67 T
(. The context in which) 388.2 273.67 T
(the err) 135 259.67 T
(or was detected has been lost.) 166.77 259.67 T
(\245) 117 239.67 T
(Notice that we have lost the additional r) 135 239.67 T
(eturn values fr) 330.14 239.67 T
(om) 401.17 239.67 T
4 9.5 Q
( parse-integer) 416.89 239.67 T
1 11 Q
(.) 495.87 239.67 T
(W) 135 225.67 T
(e would have to captur) 144.99 225.67 T
(e all the r) 257.33 225.67 T
(eturn values and go thr) 302.16 225.67 T
(ough extra ef) 415.75 225.67 T
(fort) 479.52 225.67 T
(to insur) 135 211.67 T
(e that they all ar) 172.39 211.67 T
(e r) 250.65 211.67 T
(eturned in the normal case. W) 262.82 211.67 T
(e would like to) 407.88 211.67 T
(avoid this additional complexity if possible.) 135 197.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 157
%%Page: "156" 158
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(156) 72 677.67 T
0 9.5 Q
(10.2 Signaling conditions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(10.2  Signaling conditions) 108 638 T
1 11 Q
(In this section, we describe Dylan\325s str) 108 617.67 T
(uctur) 294.07 617.67 T
(ed appr) 319.95 617.67 T
(oach to r) 357.56 617.67 T
(eporting err) 399.59 617.67 T
(ors with) 457.64 617.67 T
(condition; we discuss the functions used to handle conditions; and \336nally we) 108 603.67 T
(show an example that modi\336es the integer parser to use conditions.) 108 589.67 T
3 13 Q
(10.2.1  Conditions, handlers, and restart handlers) 108 558.33 T
1 11 Q
(Dylan pr) 108 538.67 T
(ovides a str) 151.24 538.67 T
(uctur) 206.82 538.67 T
(ed mechanism for indicating that an unusual or excep-) 232.71 538.67 T
(tional pr) 108 524.67 T
(oblem has occurr) 149.4 524.67 T
(ed during the execution of a pr) 232.64 524.67 T
(ogram. This mechanism) 382.66 524.67 T
(is called) 108 510.67 T
2 F
(signaling a condition) 150.14 510.67 T
1 F
(. A) 256.46 510.67 T
2 F
(condition) 273.26 510.67 T
1 F
( is an instance of the) 321.53 510.67 T
4 9.5 Q
(<condition>) 422.63 510.67 T
1 11 Q
(class, which r) 108 496.67 T
(epr) 173.37 496.67 T
(esents a pr) 189.4 496.67 T
(oblem or unusual situation encounter) 241.01 496.67 T
(ed during pr) 423.68 496.67 T
(o-) 485.34 496.67 T
(gram execution. A condition is an indication of an unusual situation, and a) 108 482.67 T
2 F
(han-) 473.83 482.67 T
(dler) 108 468.67 T
1 F
( is an of) 128.16 468.67 T
(fer to deal with that unusual situation. A) 165.65 468.67 T
2 F
(restart handler) 366.4 468.67 T
1 F
( is a) 440.02 468.67 T
(particular kind of handler that pr) 108 454.67 T
(ovides a well-de\336ned pr) 269.34 454.67 T
(otocol for r) 387.47 454.67 T
(ecovering) 440.82 454.67 T
(fr) 108 440.67 T
(om the situation and continuing execution in spite of any potential pr) 115.81 440.67 T
(oblems.) 452.94 440.67 T
(The signaling and handling pr) 108 426.67 T
(ocess is basically a sear) 255.54 426.67 T
(ch to \336nd an appr) 367.33 426.67 T
(opriate) 453.75 426.67 T
(way to cope with a given unusual situation, followed by the actual coping with) 108 412.67 T
(the situation. Dylan uses objects \050instances of) 108 398.67 T
4 9.5 Q
(<condition>) 329.97 398.67 T
1 11 Q
(\051 to r) 392.67 398.67 T
(epr) 415.57 398.67 T
(esent unusual) 431.6 398.67 T
(situations, and uses object-oriented pr) 108 384.67 T
(ogramming to cope with those situations.) 292.67 384.67 T
3 13 Q
(10.2.2  Functions that handle conditions) 108 353.33 T
1 11 Q
(Y) 108 333.67 T
(ou can cr) 114.32 333.67 T
(eate a) 158.28 333.67 T
4 9.5 Q
(<condition>) 188.9 333.67 T
1 11 Q
( instance by calling) 251.6 333.67 T
4 9.5 Q
(make) 347.22 333.67 T
1 11 Q
(, just like you would cr) 370.02 333.67 T
(eate) 481.28 333.67 T
-0.32 (any other instance. Once the instance is cr) 108 319.67 P
-0.32 (eated and pr) 308.54 319.67 P
-0.32 (operly initialized, it may be) 369.11 319.67 P
(passed as an ar) 108 305.67 T
(gument to the) 181.39 305.67 T
4 9.5 Q
(signal) 252.21 305.67 T
1 11 Q
(,) 286.41 305.67 T
4 9.5 Q
(error) 291.91 305.67 T
1 11 Q
(,) 319.6 305.67 T
4 9.5 Q
(cerror) 325.1 305.67 T
1 11 Q
(, or) 358.48 305.67 T
4 9.5 Q
(break) 377.08 305.67 T
1 11 Q
( functions. What) 405.58 305.67 T
(happens next depends on the signaling function you use, the condition is being) 108 291.67 T
(signaled, and the handlers that ar) 108 277.67 T
(e in for) 270.68 277.67 T
(ce.) 304.87 277.67 T
(The) 135 263.67 T
4 9.5 Q
(signal) 156.16 263.67 T
1 11 Q
(,) 190.36 263.67 T
4 9.5 Q
(error) 195.86 263.67 T
1 11 Q
(, and) 223.55 263.67 T
4 9.5 Q
(cerror) 250.42 263.67 T
1 11 Q
( functions \336rst try to \336nd a handler that) 284.62 263.67 T
(matches the condition being signaled. A handler matches the condition being sig-) 108 249.67 T
(naled if the condition is a subtype of the type of the handler) 108 235.67 T
(, and the condition) 397.41 235.67 T
(passes the optional test established by the handler) 108 221.67 T
(. Ther) 350.54 221.67 T
(e ar) 378.6 221.67 T
(e two kinds of han-) 396.27 221.67 T
(dlers: one kind is established by the) 108 207.67 T
4 9.5 Q
(let handler) 284.2 207.67 T
1 11 Q
( local declaration, and the other) 346.9 207.67 T
(is established by the) 108 193.67 T
4 9.5 Q
(exception) 208.88 193.67 T
1 11 Q
( clause in the) 260.18 193.67 T
4 9.5 Q
( block) 323.44 193.67 T
1 11 Q
(contr) 363.34 193.67 T
(ol str) 388.37 193.67 T
(uctur) 412.83 193.67 T
(e. When a) 438.71 193.67 T
-0.09 (handler established by) 108 179.67 P
4 9.5 Q
-0.19 (let handler) 220.58 179.67 P
1 11 Q
-0.09 ( matches, contr) 283.09 179.67 P
-0.09 (ol passes to the function speci-) 356.2 179.67 P
(\336ed in the) 108 165.67 T
4 9.5 Q
(let handler) 159.76 165.67 T
1 11 Q
( clause as if the signaler just executed a normal function) 222.46 165.67 T
(call.) 108 151.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 158
%%Page: "157" 159
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(157) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The handler function r) 135 640.67 T
(eceives the condition being signaled, and a next han-) 244.43 640.67 T
(dler function. The handler now has several options at its disposal. It may decline) 108 626.67 T
(to handle the condition by calling the next handler function. It may handle the) 108 612.67 T
-0.23 (condition by executing some non-local exit. It may handle the condition by signal-) 108 598.67 P
-0.4 (ing another condition, possibly a r) 108 584.67 P
-0.4 (estart. Finally) 272.33 584.67 P
-0.4 (, the handler may simply r) 336.89 584.67 P
-0.4 (eturn to) 463.47 584.67 P
(the signaler) 108 570.67 T
(, pr) 163.89 570.67 T
(oviding any r) 180.15 570.67 T
(eturn values the signaler expects. If the handler) 245.68 570.67 T
-0.22 (decides to r) 108 556.67 P
-0.22 (eturn, it should do so in the framework of a well-understood r) 163.53 556.67 P
-0.22 (ecovery) 463.36 556.67 P
(pr) 108 542.67 T
(otocol.) 118.76 542.67 T
(If the signaler never expects to have a handler r) 135 528.67 T
(eturn, then it should use) 365 528.67 T
4 9.5 Q
(error) 108 514.67 T
1 11 Q
( to signal the condition. Should a handler ever r) 136.5 514.67 T
(eturn contr) 367.67 514.67 T
(ol to the) 421.67 514.67 T
4 9.5 Q
(error) 463.98 514.67 T
1 11 Q
(function,) 108 500.67 T
4 9.5 Q
(error) 154.28 500.67 T
1 11 Q
( will immediately enter the debugger) 182.78 500.67 T
(.) 362.66 500.67 T
(If the signaler anticipates that a handler might r) 135 486.67 T
(eturn, then the signaler) 366.31 486.67 T
(should use the) 108 472.67 T
4 9.5 Q
(signal) 181.7 472.67 T
1 11 Q
( function to signal the condition. Should a handler ever) 215.9 472.67 T
(r) 108 458.67 T
(eturn contr) 112.15 458.67 T
(ol to the) 166.16 458.67 T
4 9.5 Q
(signal) 208.46 458.67 T
1 11 Q
( function, the values r) 242.66 458.67 T
(eturned by) 348.08 458.67 T
4 9.5 Q
(signal) 404 458.67 T
1 11 Q
( will be the) 438.2 458.67 T
(values r) 108 444.67 T
(eturned by the handler) 146.38 444.67 T
(. The caller of the) 257.34 444.67 T
4 9.5 Q
(signal) 343.58 444.67 T
1 11 Q
( function should antici-) 377.78 444.67 T
(pate this happening, and deal with the r) 108 430.67 T
(eturn values in accor) 302.41 430.67 T
(dance with the) 403.4 430.67 T
(r) 108 416.67 T
(ecovery pr) 112.15 416.67 T
(otocol for that condition.) 163.76 416.67 T
(If the signaler would like to de\336ne a simple way to r) 135 402.67 T
(ecover fr) 388.69 402.67 T
(om the condi-) 431.24 402.67 T
-0.43 (tion being signaled, then) 108 388.67 P
4 9.5 Q
-0.89 (cerror) 229.03 388.67 P
1 11 Q
-0.43 ( is the appr) 263.23 388.67 P
-0.43 (opriate function to use. Befor) 316.18 388.67 P
-0.43 (e actually) 455.47 388.67 P
(signaling the speci\336ed condition,) 108 374.67 T
4 9.5 Q
(cerror) 271.49 374.67 T
1 11 Q
( establishes a r) 305.69 374.67 T
(estart handler) 376.09 374.67 T
(, which, if) 442.82 374.67 T
(invoked, causes) 108 360.67 T
4 9.5 Q
(cerror) 187.79 360.67 T
1 11 Q
( to r) 221.99 360.67 T
(eturn) 241.23 360.67 T
4 9.5 Q
(#f) 270.22 360.67 T
1 11 Q
(. If the r) 281.62 360.67 T
(estart handler is never invoked,) 319.39 360.67 T
4 9.5 Q
(cer-) 475.98 360.67 T
(ror) 108 346.67 T
1 11 Q
( is guaranteed not to r) 125.1 346.67 T
(eturn. The caller of) 231.79 346.67 T
4 9.5 Q
(cerror) 326.26 346.67 T
1 11 Q
( should anticipate the use of) 360.46 346.67 T
(the r) 108 332.67 T
(estart, and perform any r) 130.15 332.67 T
(ecovery fr) 251.59 332.67 T
(om the condition detailed in the r) 300.26 332.67 T
(estart) 462.62 332.67 T
(description ar) 108 318.67 T
(gument to the) 175.29 318.67 T
4 9.5 Q
(cerror) 246.1 318.67 T
1 11 Q
( function.) 280.3 318.67 T
-0.01 (The) 135 304.67 P
4 9.5 Q
-0.03 (break) 156.15 304.67 P
1 11 Q
-0.01 ( function does not actually signal the condition pr) 184.65 304.67 P
-0.01 (ovided; it estab-) 426.09 304.67 P
(lishes a r) 108 290.67 T
(estart and then enters the debugger) 150.55 290.67 T
(. The debugger might invoke the) 322.06 290.67 T
(r) 108 276.67 T
(estart, in which case) 112.15 276.67 T
4 9.5 Q
(break) 212.83 276.67 T
1 11 Q
( r) 241.33 276.67 T
(eturns) 248.23 276.67 T
4 9.5 Q
(#f) 281.88 276.67 T
1 11 Q
(, and pr) 293.28 276.67 T
(ogram execution continues. This) 330.91 276.67 T
(behavior is handy for inserting br) 108 262.67 T
(eakpoints into code. This behavior is similar to) 271.21 262.67 T
4 9.5 Q
(cerror) 108 248.67 T
1 11 Q
(, except that) 141.39 248.67 T
4 9.5 Q
(break) 202.76 248.67 T
1 11 Q
( does not actually signal a condition.) 231.26 248.67 T
(If) 135 234.67 T
4 9.5 Q
(signal) 145.12 234.67 T
1 11 Q
(,) 179.32 234.67 T
4 9.5 Q
(error) 184.82 234.67 T
1 11 Q
(, or) 212.51 234.67 T
4 9.5 Q
(cerror) 231.11 234.67 T
1 11 Q
( cannot \336nd an applicable handler) 265.31 234.67 T
(, they call the) 430.6 234.67 T
4 9.5 Q
(default-handler) 108 220.67 T
1 11 Q
( generic function with the condition. What happens next) 193.5 220.67 T
(depends on the class of the condition. If the condition is a) 108 206.67 T
4 9.5 Q
(<serious-condition>) 389.72 206.67 T
1 11 Q
(,) 498.02 206.67 T
4 9.5 Q
(default-handler) 108 192.67 T
1 11 Q
( enters the debugger) 193.5 192.67 T
(. If the condition is a) 292.28 192.67 T
4 9.5 Q
(<restart>) 393.93 192.67 T
1 11 Q
(,) 445.23 192.67 T
4 9.5 Q
(default-) 450.73 192.67 T
(handler) 108 178.67 T
1 11 Q
( signals an err) 147.9 178.67 T
(or) 215.56 178.67 T
(, because a r) 225.1 178.67 T
(estart should not be invoked if it will not be) 284.05 178.67 T
(handled. If the condition is a) 108 164.67 T
4 9.5 Q
(<warning>) 249.87 164.67 T
1 11 Q
(,) 301.17 164.67 T
4 9.5 Q
( default-handler) 303.92 164.67 T
1 11 Q
(prints a warning) 400.82 164.67 T
(message, and then r) 108 150.67 T
(eturns) 204.62 150.67 T
4 9.5 Q
(#f) 238.27 150.67 T
1 11 Q
(. If the condition is none of those classes, but is a) 249.67 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 159
%%Page: "158" 160
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(158) 72 677.67 T
0 9.5 Q
(10.2 Signaling conditions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 F
0 X
-0.48 (<condition>,) 108 640.67 P
1 11 Q
-0.23 ( then) 176.4 640.67 P
4 9.5 Q
-0.48 ( default-handler) 200.57 640.67 P
1 11 Q
-0.23 (r) 296.51 640.67 P
-0.23 (eturns an empty sequence. Y) 300.65 640.67 P
-0.23 (ou ar) 438.44 640.67 P
-0.23 (e fr) 463.24 640.67 P
-0.23 (ee to) 478.84 640.67 P
(de\336ne new methods for) 108 626.67 T
4 9.5 Q
(default-handler) 226.54 626.67 T
1 11 Q
( to customize the behavior for some) 312.04 626.67 T
(class or classes of conditions when no applicable handler is found.) 108 612.67 T
(Establishing a handler with the) 135 598.67 T
4 9.5 Q
(exception) 289.45 598.67 T
1 11 Q
(clause of) 343.5 598.67 T
4 9.5 Q
(block) 388.82 598.67 T
1 11 Q
( is similar to) 417.32 598.67 T
-0.16 (establishing a handler with the) 108 584.67 P
4 9.5 Q
-0.33 (let handler) 260.21 584.67 P
1 11 Q
-0.16 ( local declaration, except that instead) 322.58 584.67 P
-0.3 (of having to de\336ne your own handler function, the) 108 570.67 P
4 9.5 Q
-0.63 (exception) 354.75 570.67 P
1 11 Q
-0.3 ( clause takes a body) 406.05 570.67 P
(that is used instead, and the body is executed after a non-local exit outside of the) 108 556.67 T
-0.08 (block. Among other things, this means that the handlers established by the) 108 542.67 P
4 9.5 Q
-0.17 (block) 472.83 542.67 P
1 11 Q
(ar) 108 528.67 T
(e not in for) 117.65 528.67 T
(ce during execution of the) 170.58 528.67 T
4 9.5 Q
(exception) 299.75 528.67 T
1 11 Q
( clause\325s body) 351.05 528.67 T
(. The) 418.13 528.67 T
4 9.5 Q
( exception) 442.04 528.67 T
1 11 Q
(clause of) 108 514.67 T
4 9.5 Q
(block) 153.32 514.67 T
1 11 Q
( is best used to establish simple handlers for simple situations) 181.82 514.67 T
(wher) 108 500.67 T
(e the immediate context ar) 132.99 500.67 T
(ound the signaler is not necessary to handle the) 261.75 500.67 T
(condition. The) 108 486.67 T
4 9.5 Q
(let handler) 181.07 486.67 T
1 11 Q
( local declaration is best used in mor) 243.77 486.67 T
(e complex situa-) 420.65 486.67 T
(tions wher) 108 472.67 T
(e the immediate context ar) 159.6 472.67 T
(ound the signaler is of inter) 288.36 472.67 T
(est.) 421.96 472.67 T
(The) 135 458.67 T
4 9.5 Q
(signal) 156.16 458.67 T
1 11 Q
(,) 190.36 458.67 T
4 9.5 Q
( error) 193.11 458.67 T
1 11 Q
(,) 226.5 458.67 T
4 9.5 Q
( cerror) 229.25 458.67 T
1 11 Q
(, and) 268.33 458.67 T
4 9.5 Q
( break) 292.46 458.67 T
(f) 329.41 458.67 T
1 11 Q
(unctions take either a condition as) 335.11 458.67 T
(an ar) 108 444.67 T
(gument, or a string and one or mor) 132.3 444.67 T
(e additional ar) 302.7 444.67 T
(guments \050in addition,) 373.15 444.67 T
4 9.5 Q
(cer-) 481.14 444.67 T
(ror) 108 430.67 T
1 11 Q
( takes a separate r) 125.1 430.67 T
(estart description ar) 211.63 430.67 T
(gument\051. If a condition is pr) 308.61 430.67 T
(ovided, exe-) 444.4 430.67 T
(cution pr) 108 416.67 T
(oceeds as described above. If a string and optional ar) 152.22 416.67 T
(guments ar) 408.89 416.67 T
(e) 463.67 416.67 T
(pr) 108 402.67 T
(ovided, then these function cr) 118.76 402.67 T
(eate an appr) 263.3 402.67 T
(opriate condition instances for you) 323.19 402.67 T
(\050) 108 388.67 T
4 9.5 Q
(<simple-warning>) 111.66 388.67 T
1 11 Q
(,) 202.86 388.67 T
4 9.5 Q
( <simple-error>) 205.61 388.67 T
1 11 Q
(,) 291.11 388.67 T
4 9.5 Q
( <simple-error>) 293.86 388.67 T
1 11 Q
( with a r) 379.36 388.67 T
(estart of) 419.62 388.67 T
4 9.5 Q
( <sim-) 458.99 388.67 T
(ple-restart>) 108 374.67 T
1 11 Q
(,) 176.4 374.67 T
(and) 184.85 374.67 T
4 9.5 Q
( <simple-warning>) 203.47 374.67 T
1 11 Q
( with a r) 300.37 374.67 T
(estart of) 340.63 374.67 T
4 9.5 Q
(<simple-restart>) 382.75 374.67 T
1 11 Q
(,) 473.95 374.67 T
(r) 108 360.67 T
(espectively\051, and then pr) 112.15 360.67 T
(oceed as described above.) 232.13 360.67 T
3 13 Q
(10.2.3  signaling error conditions with) 108 329.33 T
4 F
(parse-integer) 302.32 329.33 T
1 11 Q
(In this section, we de\336ne a set of err) 108 309.67 T
(or conditions, and modify) 281.93 309.67 T
4 9.5 Q
(parse-integer) 411.15 309.67 T
1 11 Q
( to) 485.25 309.67 T
(signal those conditions rather than r) 108 295.67 T
(eturn special values to indicate an err) 283.32 295.67 T
(or) 464.88 295.67 T
(. The) 474.42 295.67 T
(point of using the condition system is that it allows us to stop execution at the) 108 281.67 T
-0.07 (point of err) 108 267.67 P
-0.07 (or) 162.6 267.67 P
-0.07 (, and indicate to the user the natur) 172.13 267.67 P
-0.07 (e of the pr) 338.32 267.67 P
-0.07 (oblem encounter) 387.31 267.67 P
-0.07 (ed in a) 468.86 267.67 P
-0.28 (str) 108 253.67 P
-0.28 (uctur) 120.51 253.67 P
-0.28 (ed way) 146.39 253.67 P
-0.28 (. Later on in this chapter) 180.42 253.67 P
-0.28 (, we shall show how the pr) 296.57 253.67 P
-0.28 (ogram can of) 425.38 253.67 P
-0.28 (fer) 488.26 253.67 P
(the user ways to r) 108 239.67 T
(ecover fr) 194.36 239.67 T
(om the pr) 236.91 239.67 T
(oblem.) 284.14 239.67 T
(In the following example, we de\336ne the class) 135 225.67 T
4 9.5 Q
(<integer-parse-error>) 356.25 225.67 T
1 11 Q
(,) 475.95 225.67 T
(which r) 108 211.67 T
(epr) 144.96 211.67 T
(esents general integer parsing pr) 160.99 211.67 T
(oblems. Note that we de\336ne condi-) 319.73 211.67 T
(tions in the same way that we de\336ne other classes in Dylan, with) 108 197.67 T
4 9.5 Q
(def) 425.14 197.67 T
(ine class) 442.24 197.67 T
1 11 Q
(.) 493.54 197.67 T
4 9 Q
(def) 108 177 T
(ine class <integer-parse-error> \050<error>\051) 124.2 177 T
(slot bad-string :: <string>, required-init-keyword: bad-string:;) 118.8 166 T
(end;) 108 155 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 160
%%Page: "159" 161
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(159) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.4 (The) 108 640.67 P
4 9.5 Q
-0.82 (bad-string) 128.77 640.67 P
1 11 Q
-0.4 ( slot is used to hold the string that cannot be parsed pr) 185.77 640.67 P
-0.4 (operly) 445.2 640.67 P
-0.4 (. This) 475.53 640.67 P
(slot may be examined by the handler of the condition after it is signaled.) 108 626.67 T
(In the following example, we de\336ne a) 135 612.67 T
4 9.5 Q
(report) 320.83 612.67 T
1 11 Q
( method on) 355.03 612.67 T
4 9.5 Q
(<integer-parse-) 413.39 612.67 T
(error>) 108 598.67 T
1 11 Q
(:) 142.2 598.67 T
4 9 Q
(def) 108 578 T
(ine method report \050cond :: <integer-parse-error>, where\051) 124.2 578 T
(next-method \050\051;) 118.8 567 T
(format \050where, "Error parsing integer from %=: ", bad-string \050cond\051\051;) 118.8 556 T
(end;) 108 545 T
1 11 Q
-1.19 (The) 108 524.67 P
4 9.5 Q
-2.46 ( report) 126.41 524.67 P
1 11 Q
-1.19 (method for) 167.1 524.67 P
4 9.5 Q
-2.46 ( <integer-parse-error>) 220.37 524.67 P
1 11 Q
-1.19 (displays a suitable err) 346.56 524.67 P
-1.19 (or message) 449.33 524.67 P
(based the information stor) 108 510.67 T
(ed in the condition instance.) 236.17 510.67 T
(Next, we de\336ne a speci\336c condition that will be signaled when a sign char-) 135 496.67 T
(acter \050) 108 482.67 T
4 9.5 Q
(-) 138 482.67 T
1 11 Q
( or) 143.7 482.67 T
4 9.5 Q
(+) 159.55 482.67 T
1 11 Q
(\051 is found in an incorr) 165.25 482.67 T
(ect position in the string being parsed:) 270.44 482.67 T
4 9 Q
(def) 108 462 T
(ine class <sign-in-illegal-position> \050<integer-parse-error>\051) 124.2 462 T
(end;) 108 451 T
1 11 Q
(The following) 108 430.67 T
4 9.5 Q
(report) 178.88 430.67 T
1 11 Q
( method for) 213.08 430.67 T
4 9.5 Q
(<sign-in-illegal-position>) 273.05 430.67 T
1 11 Q
( displays addi-) 421.24 430.67 T
(tional information after the err) 108 416.67 T
(or message displayed by the method on the super-) 256.3 416.67 T
(class.) 108 402.67 T
4 9 Q
(def) 108 382 T
(ine method report \050cond :: <sign-in-illegal-position>, w) 124.2 382 T
4 9.5 Q
(here) 426.6 382 T
4 9 Q
(\051) 449.4 382 T
(next-method \050\051;) 118.8 371 T
(format \050where, "Sign in illegal position."\051;) 118.8 360 T
(end;) 108 349 T
1 11 Q
(Next, we de\336ne the speci\336c condition which is signaled when the parser encoun-) 108 328.67 T
(ters an unexpected character in the string. A slot is de\336ned to hold the illegal) 108 314.67 T
(character) 108 300.67 T
(.) 151.9 300.67 T
4 9 Q
(def) 108 280 T
(ine class <illegal-character> \050<integer-parse-error>\051) 124.2 280 T
(slot bad-char :: <character>, required-init-keyword: bad-char:;) 118.8 269 T
(end;) 108 258 T
(def) 108 239 T
(ine method report \050cond :: <illegal-character>, where\051) 124.2 239 T
(next-method \050\051;) 118.8 228 T
(format \050where, "Illegal character %=.", bad-char \050cond\051\051;) 118.8 217 T
(end;) 108 206 T
1 11 Q
(The) 108 185.67 T
4 9.5 Q
(report) 129.16 185.67 T
1 11 Q
( method for) 163.36 185.67 T
4 9.5 Q
(<illegal-character>) 223.32 185.67 T
1 11 Q
( is similar to the method for) 331.62 185.67 T
4 9.5 Q
(<sign-) 469.12 185.67 T
(in-illegal-position>) 108 171.67 T
1 11 Q
(; it r) 222 171.67 T
(ounds out the set of condition classes we want to sig-) 241.18 171.67 T
(nal in) 108 157.67 T
4 9.5 Q
(parse-integer) 138.21 157.67 T
1 11 Q
(.) 211.49 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 161
%%Page: "160" 162
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(160) 72 677.67 T
0 9.5 Q
(10.2 Signaling conditions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
-0.01 (Finally) 135 640.67 P
-0.01 (, we add a) 167.52 640.67 P
4 9.5 Q
-0.02 (report) 220.12 640.67 P
1 11 Q
-0.01 ( method to) 254.32 640.67 P
4 9.5 Q
-0.02 (<condition>) 309.83 640.67 P
1 11 Q
-0.01 ( so that pr) 372.53 640.67 P
-0.01 (ogrammers who) 421.26 640.67 P
(write) 108 626.67 T
4 9.5 Q
(report) 136.32 626.67 T
1 11 Q
( methods do not have to be concerned about whether they may call) 170.52 626.67 T
4 9.5 Q
(next-method) 108 612.67 T
1 11 Q
( or not. \050By doing this, we use the same technique that the Dylan) 170.7 612.67 T
(does in the initialize pr) 108 598.67 T
(otocol.\051.) 219.54 598.67 T
4 9 Q
(def) 108 578 T
(ine method report \050cond :: <condition>, where\051) 124.2 578 T
(end;) 108 567 T
1 11 Q
(Next, we r) 108 546.67 T
(ede\336ne) 158.51 546.67 T
4 9.5 Q
(parse-integer) 196.85 546.67 T
1 11 Q
( so that it cr) 270.95 546.67 T
(eates instances of these conditions) 327.51 546.67 T
(and signals them when parsing pr) 108 532.67 T
(oblems ar) 273.93 532.67 T
(e encounter) 321.27 532.67 T
(ed.) 377.89 532.67 T
6 9 Q
(// This is a very simple integer parser, which signals <integer-parse-error>) 108 512 T
(// conditions when parsing problems are encountered.) 108 501 T
4 F
(def) 108 490 T
(ine method parse-integer) 124.2 490 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051 =>) 129.6 479 T
( \050integer :: <integer>, sign, end-index :: <integer>\051;) 129.6 468 T
(block \050return\051) 118.8 457 T
(let length = size \050integer-string\051;) 129.6 446 T
(let result = #f;) 129.6 435 T
(let sign = #f;) 129.6 424 T
(let end-index = start;) 129.6 413 T
(for \050index from start below length\051) 129.6 402 T
(let char = integer-string[index];) 140.4 391 T
(case) 140.4 380 T
6 F
(// Is the character a digit?) 151.2 369 T
4 F
(digit? \050char\051 =>) 151.2 358 T
(let value = position \050char, $digits\051;) 162 347 T
(if \050result\051) 162 336 T
6 F
(// If we have already started to generate the integer) 183.6 325 T
(// shift the result to make room for the next digit.) 183.6 314 T
4 F
(result := \050result * 10\051 + value;) 183.6 303 T
(else) 172.8 292 T
(result := value;) 183.6 281 T
(end;) 162 270 T
6 F
(// Is the character whitespace?) 151.2 259 T
4 F
(whitespace? \050char\051 => #f;) 151.2 248 T
6 F
(// Is the character a sign?) 151.2 237 T
4 F
(sign? \050char\051 => if \050result | sign\051) 151.2 226 T
(error \050make \050<sign-in-illegal-position>,) 259.2 215 T
(bad-string: integer-string\051\051;) 297 204 T
(else) 237.6 193 T
(sign := char;) 259.2 182 T
(end;) 237.6 171 T
6 F
(// Is the character the specif) 151.2 160 T
(ied character to stop at when reached?) 313.2 160 T
4 F
(char == delimiter => return \050values \050result, sign, index\051\051;) 151.2 149 T
(otherwise => error \050make \050<illegal-character>, bad-char: char,) 151.2 138 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 162
%%Page: "161" 163
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(161) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(bad-string: integer-string\051\051;) 291.6 642 T
(end case;) 140.4 631 T
(f) 129.6 620 T
(inally return \050values \050result, sign, length\051\051;) 135 620 T
(end for;) 129.6 609 T
(end block;) 118.8 598 T
(end method parse-integer;) 108 587 T
1 11 Q
(Using this de\336nition, we have solved some of the pr) 108 566.67 T
(oblems with the pr) 360.98 566.67 T
(evious) 452.54 566.67 T
(appr) 108 552.67 T
(oach. First, callers do not need to check the r) 130.87 552.67 T
(eturn value to see if ther) 345.82 552.67 T
(e is an) 463.68 552.67 T
(err) 108 538.67 T
(or string instead of an integer) 121.76 538.67 T
(. Because we use) 264.46 538.67 T
4 9.5 Q
(error) 348.16 538.67 T
1 11 Q
( to signal the condition,) 376.66 538.67 T
(we ensur) 108 524.67 T
(e that calls to) 152.31 524.67 T
4 9.5 Q
(parse-integer) 218.69 524.67 T
1 11 Q
( will not r) 292.79 524.67 T
(eturn via normal means if the) 339.96 524.67 T
(string pr) 108 510.67 T
(ovided is incorr) 149.82 510.67 T
(ect. Second, because we ar) 226.3 510.67 T
(e using the standar) 353.99 510.67 T
(d Dylan) 446.3 510.67 T
(condition pr) 108 496.67 T
(otocol, r) 167.92 496.67 T
(eaders of the code will mor) 207.25 496.67 T
(e easily understand the parts of) 339.22 496.67 T
(the parser that deal with err) 108 482.67 T
(ors. Thir) 243.63 482.67 T
(d, we can now str) 284.64 482.67 T
(ongly type the r) 370.32 482.67 T
(eturn val-) 447.39 482.67 T
(ues, which will aid in both performance and code clarity) 108 468.67 T
(. Fourth, we can captur) 381.13 468.67 T
(e) 493.31 468.67 T
(some inter) 108 454.67 T
(esting information about the err) 159.01 454.67 T
(or in the condition object, thus at least) 314.1 454.67 T
(pr) 108 440.67 T
(oviding better err) 118.76 440.67 T
(or messages for the user) 204.02 440.67 T
(. In addition, we ar) 320.6 440.67 T
(e giving extra) 412.63 440.67 T
(information to handlers in a useful form that they might use to determine if, for) 108 426.67 T
(example, they ar) 108 412.67 T
(e able to handle a particular condition. Finally) 188.51 412.67 T
(, as we shall see in) 411.15 412.67 T
(the next section, the caller of) 108 398.67 T
4 9.5 Q
( parse-integer) 246.03 398.67 T
1 11 Q
(does not need to do anything spe-) 331.53 398.67 T
(cial to pass on the multiple values r) 108 384.67 T
(eturned by) 279.78 384.67 T
4 9.5 Q
( parse-integer) 332.95 384.67 T
1 11 Q
(in the normal) 418.45 384.67 T
(case.) 108 370.67 T
3 15 Q
(10.3  Establishing handlers) 108 331 T
1 11 Q
(If we now call) 108 310.67 T
4 9.5 Q
(parse-integer) 179.18 310.67 T
1 11 Q
( on a string that does not contain a pr) 253.28 310.67 T
(oper integer) 434.22 310.67 T
(,) 492.58 310.67 T
(an err) 108 296.67 T
(or will be signaled, but ther) 136.41 296.67 T
(e is likely to be no handler for it. In those situa-) 270.17 296.67 T
-0.15 (tions, the debugger is enter) 108 282.67 P
-0.15 (ed. After describing the situation in some implementa-) 239.35 282.67 P
(tion-dependent way) 108 268.67 T
(, the debugger will then pr) 205.43 268.67 T
(ovide the user with one or mor) 334.93 268.67 T
(e) 485.27 268.67 T
(options. Since we have not pr) 108 254.67 T
(ovided any suggested way to continue, the debug-) 251.09 254.67 T
-0.18 (ger) 108 240.67 P
-0.18 (\325s options ar) 124.54 240.67 P
-0.18 (e limited indeed. Per) 183.52 240.67 P
-0.18 (haps the only option is to abort the execution) 283.77 240.67 P
(of the pr) 108 226.67 T
(ogram. Handlers and r) 149.18 226.67 T
(estarts pr) 259.89 226.67 T
(ovide a way to pr) 305.01 226.67 T
(ovide mor) 390.06 226.67 T
(e options.) 440.09 226.67 T
3 13 Q
(10.3.1  The) 108 195.33 T
4 F
(exception) 165.49 195.33 T
3 F
( clause for) 235.69 195.33 T
4 F
(block) 291.98 195.33 T
1 11 Q
(W) 108 175.67 T
(e now r) 117.99 175.67 T
(ede\336ne the) 154.49 175.67 T
4 9.5 Q
(interactive-read-integer) 210.83 175.67 T
1 11 Q
( method to deal with integer) 347.63 175.67 T
(parsing err) 108 161.67 T
(ors. Like the pr) 161.35 161.67 T
(evious implementation, if a user types an illegal num-) 234.69 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 163
%%Page: "162" 164
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(162) 72 677.67 T
0 9.5 Q
(10.3 Establishing handlers) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
-0 (ber) 108 640.67 P
-0 (, the method will pr) 122.88 640.67 P
-0 (ompt the user to enter an integer) 219.11 640.67 P
-0 (. W) 377.42 640.67 P
-0 (e supply a handler via) 392.9 640.67 P
(the) 108 626.67 T
4 9.5 Q
(exception) 126.01 626.67 T
1 11 Q
( clause to) 177.31 626.67 T
4 9.5 Q
(block) 225.3 626.67 T
1 11 Q
( to achieve this behavior) 253.8 626.67 T
(.) 371.19 626.67 T
4 9 Q
(def) 108 606 T
(ine method interactive-read-integer \050where,) 124.2 606 T
(#key prompt = "Enter a number: "\051) 324 595 T
(block \050return\051) 118.8 584 T
(while \050#t\051) 129.6 573 T
(block \050\051) 140.4 562 T
(format \050where, "\134n%s", prompt\051;) 162 551 T
(return \050parse-integer \050read-line \050where\051\051) 162 540 T
(exception \050cond :: <integer-parse-error>\051) 151.2 529 T
(report \050cond, where\051;) 162 518 T
(end;) 140.4 507 T
(end;) 129.6 496 T
(end;) 118.8 485 T
(end;) 108 474 T
1 11 Q
-0.27 (The \336rst block established is used to pr) 108 453.67 P
-0.27 (ovide a way to exit the loop when a pr) 295.37 453.67 P
-0.27 (oper) 479.29 453.67 P
-0.24 (integer is enter) 108 439.67 P
-0.24 (ed. The) 179.75 439.67 P
4 9.5 Q
-0.5 (while) 217.92 439.67 P
1 11 Q
-0.24 ( loop will continue to iterate until we r) 246.42 439.67 P
-0.24 (eturn fr) 431.45 439.67 P
-0.24 (om the) 468 439.67 P
(outer block \050with a valid integer\051. The inner block is used to establish a handler) 108 425.67 T
-0.24 (for the) 108 411.67 P
4 9.5 Q
-0.5 (<integer-parse-error>) 142.28 411.67 P
1 11 Q
-0.24 ( condition \050and all its subclasses\051. The body of the) 261.98 411.67 P
(inner block simply pr) 108 397.67 T
(ompts the user for input, and then r) 212.42 397.67 T
(eturns fr) 386.05 397.67 T
(om the outer) 427.51 397.67 T
(block the integer parsed fr) 108 383.67 T
(om the string r) 235.65 383.67 T
(ead fr) 307.34 383.67 T
(om the interactive str) 335.39 383.67 T
(eam ar) 438.47 383.67 T
(gu-) 471.35 383.67 T
(ment. The) 108 369.67 T
4 9.5 Q
(read-line) 159.63 369.67 T
1 11 Q
( method r) 210.93 369.67 T
(eads a line of text fr) 258.28 369.67 T
(om the user) 353.35 369.67 T
(, and r) 409.92 369.67 T
(eturns that) 440.94 369.67 T
(text in the form of a string. This string is then passed as the ar) 108 355.67 T
(gument to the) 406.78 355.67 T
4 9.5 Q
(parse-integer) 108 341.67 T
1 11 Q
( method. If the user typed something that could not be parsed as) 182.1 341.67 T
(an integer) 108 327.67 T
(, execution inside the) 156.03 327.67 T
4 9.5 Q
(parse-integer) 261.42 327.67 T
1 11 Q
( method stops, and the) 335.52 327.67 T
4 9.5 Q
( error) 446.38 327.67 T
1 11 Q
(function will perform the sear) 108 313.67 T
(ch for a handler described in Section 10.2.2, page) 253.34 313.67 T
(156. The sear) 108 299.67 T
(ch will \336nd the handler established by the inner block exception) 170.74 299.67 T
(clause, and contr) 108 285.67 T
(ol will transfer to the body of the exception clause, which is exe-) 190.05 285.67 T
(cuted outside the boundary of the inner block. The body of the exception clause) 108 271.67 T
(will print a suitable err) 108 257.67 T
(or message based on the particular pr) 219.32 257.67 T
(oblem the integer) 401.83 257.67 T
-0.16 (parser encounter) 108 243.67 P
-0.16 (ed, and then the) 189.92 243.67 P
4 9.5 Q
-0.33 ( while) 267.97 243.67 P
1 11 Q
-0.16 (loop will cause the user to be pr) 307.2 243.67 P
-0.16 (ompted.) 460.75 243.67 P
-0.2 (Since the) 108 229.67 P
4 9.5 Q
-0.41 (while) 153.89 229.67 P
1 11 Q
-0.2 ( loop establishes the inner block \050and thus the handler\051, any subse-) 182.39 229.67 P
(quent user input err) 108 215.67 T
(ors will also be caught by the handler) 205.4 215.67 T
(, and the user will once) 386.77 215.67 T
(again have an opportunity to corr) 108 201.67 T
(ectly enter an integer) 271.83 201.67 T
(.) 373.29 201.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 164
%%Page: "163" 165
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(163) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(10.3.2  The) 108 639.33 T
4 F
(let handler) 165.49 639.33 T
3 F
( local declaration) 251.29 639.33 T
1 11 Q
(While the exception clause of block gives us a mor) 108 619.67 T
(e str) 352.22 619.67 T
(uctur) 372.75 619.67 T
(ed way to handle) 398.63 619.67 T
(err) 108 605.67 T
(ors outside the context in which the err) 121.76 605.67 T
(or occurr) 311.46 605.67 T
(ed, it is sometimes useful to) 355.46 605.67 T
(invoke handlers inside the context wher) 108 591.67 T
(e the err) 302.58 591.67 T
(or occurr) 342.37 591.67 T
(ed. For example, it) 386.37 591.67 T
-0.11 (might be nice to have the option to ignor) 108 577.67 P
-0.11 (e illegal characters or signs and continue) 304.77 577.67 P
(parsing \050as we did in the initial design of) 108 563.67 T
4 9.5 Q
( parse-integer) 306.95 563.67 T
1 11 Q
(\051, or per) 386.75 563.67 T
(haps simply) 425.04 563.67 T
-0.14 (r) 108 549.67 P
-0.14 (eturn zer) 112.15 549.67 P
-0.14 (o or some other value when an err) 155.9 549.67 P
-0.14 (or occurs. W) 321.5 549.67 P
-0.14 (e would also like to have) 381.22 549.67 P
(the option of dealing with err) 108 535.67 T
(ors automatically) 251.02 535.67 T
(, since ther) 334.19 535.67 T
(e may be no user sup-) 386.27 535.67 T
-0.15 (plying these integer strings, but instead they might be coming fr) 108 521.67 P
-0.15 (om a non-interac-) 418.26 521.67 P
(tive sour) 108 507.67 T
(ce such as \336le, a network, or a database, and ther) 150.47 507.67 T
(e may be no user) 387.35 507.67 T
-0.4 (available to ask questions about the data. In the next section, we explor) 108 493.67 P
-0.4 (e the use of) 447.85 493.67 P
4 9.5 Q
(let handler) 108 479.67 T
1 11 Q
( to both establish err) 170.7 479.67 T
(or handlers and r) 269.7 479.67 T
(estarts that operate in the con-) 353.58 479.67 T
(text of the err) 108 465.67 T
(or) 173.05 465.67 T
(, rather than r) 182.59 465.67 T
(ecovering after the err) 249.07 465.67 T
(or) 356.41 465.67 T
(.) 365.95 465.67 T
3 15 Q
(10.4  Using) 108 426 T
4 F
(let handler) 176.37 426 T
3 F
( to implement a recovery protocol) 275.37 426 T
1 11 Q
(Ther) 108 405.67 T
(e could be many choices of how to r) 130.56 405.67 T
(ecover fr) 304.66 405.67 T
(om an err) 347.21 405.67 T
(or) 394.09 405.67 T
(. It would be nice to) 403.62 405.67 T
(have a way to determine what those choices ar) 108 391.67 T
(e, and to either pr) 334.59 391.67 T
(esent those) 420.65 391.67 T
(options to the user \050for interactive pr) 108 377.67 T
(ograms\051, or per) 286.63 377.67 T
(haps to pr) 361.26 377.67 T
(ogrammatically) 410.29 377.67 T
(choose an option that makes sense. Dylan pr) 108 363.67 T
(ovides the notion of a) 324.04 363.67 T
2 F
(recovery pro-) 431.89 363.67 T
(tocol) 108 349.67 T
1 F
( for a condition \321 a formal technique for handling and r) 132.44 349.67 T
(ecovering fr) 406.08 349.67 T
(om) 464.35 349.67 T
(exceptional situations. In this section, we examine how to implement and exploit) 108 335.67 T
-0.16 (a r) 108 321.67 P
-0.16 (ecovery pr) 120.24 321.67 P
-0.16 (otocol for the integer parser) 171.7 321.67 P
-0.16 (. The) 305.14 321.67 P
4 9.5 Q
-0.32 (let handler) 331.49 321.67 P
1 11 Q
-0.16 ( local declaration is an) 393.86 321.67 P
(essential part of implementing this pr) 108 307.67 T
(otocol.) 290.51 307.67 T
3 13 Q
(10.4.1  Using restart handlers to implement a recovery protocol) 108 276.33 T
1 11 Q
(Sometimes a handler knows exactly what to do, and how to do it when an excep-) 108 256.67 T
(tional situation occurs. The handler de\336ned in the) 108 242.67 T
4 9.5 Q
(interactive-read-integer) 352.99 242.67 T
1 11 Q
-0.07 (method in Section 10.3.1 is one such handler) 108 228.67 P
-0.07 (. A mor) 321.84 228.67 P
-0.07 (e \337exible err) 358.37 228.67 P
-0.07 (or handler that is) 418.15 228.67 P
-0.04 (part of a r) 108 214.67 P
-0.04 (ecovery pr) 155.48 214.67 P
-0.04 (otocol can actually hunt ar) 207.05 214.67 P
-0.04 (ound, and see what r) 335.65 214.67 P
-0.04 (ecovery alter-) 437.62 214.67 P
(natives ar) 108 200.67 T
(e available. This hunt would happen immediately after the appr) 155.23 200.67 T
(opriate) 466.21 200.67 T
(err) 108 186.67 T
(or handler is found in the usual way) 121.76 186.67 T
(. The err) 297.55 186.67 T
(or handler conducts the hunt for) 337.98 186.67 T
(r) 108 172.67 T
(ecovery alternatives. These alternatives ar) 112.15 172.67 T
(e pr) 315.47 172.67 T
(ovided by establishing r) 334.25 172.67 T
(estart han-) 451.27 172.67 T
(dlers, which ar) 108 158.67 T
(e or) 180.16 158.67 T
(dinary condition handlers that will handle conditions of class) 198.33 158.67 T
4 9.5 Q
(<restart>) 108 144.67 T
1 11 Q
(. A \337exible err) 159.3 144.67 T
(or handler typically scans all established r) 228.01 144.67 T
(estart han-) 431.84 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 165
%%Page: "164" 166
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(164) 72 677.67 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(dlers, makes instances of the r) 108 640.67 T
(estart conditions associated with the handlers, and) 253.61 640.67 T
(then goes thr) 108 626.67 T
(ough a pr) 171.35 626.67 T
(ocess of selecting a particular r) 218.26 626.67 T
(estart condition instance) 367.21 626.67 T
(best able to r) 108 612.67 T
(ecover fr) 169.64 612.67 T
(om the curr) 212.19 612.67 T
(ent exceptional situation. When the err) 268.68 612.67 T
(or han-) 456.91 612.67 T
(dler \336nds a suitable r) 108 598.67 T
(estart condition instance, it signals that instance, which) 210.76 598.67 T
(causes contr) 108 584.67 T
(ol to transfer to the r) 167.39 584.67 T
(estart handler) 266.71 584.67 T
(. Once the r) 333.43 584.67 T
(estart handler has con-) 389.04 584.67 T
-0.34 (tr) 108 570.67 P
-0.34 (ol, it may not r) 115.73 570.67 P
-0.34 (eturn to the signaling err) 185.57 570.67 P
-0.34 (or handler) 304.83 570.67 P
-0.34 (. The r) 354.61 570.67 P
-0.34 (estart handler can either) 384.73 570.67 P
(decline to handle the r) 108 556.67 T
(estart, or it will r) 216.44 556.67 T
(ecover fr) 297.2 556.67 T
(om the exceptional situation) 339.75 556.67 T
-0.14 (accor) 108 542.67 P
-0.14 (ding to its contract. The r) 133.42 542.67 P
-0.14 (estart handler may r) 254.44 542.67 P
-0.14 (ecover by optionally executing) 352.52 542.67 P
-0.01 (some r) 108 528.67 P
-0.01 (ecovery code followed by either performing a non-local exit, or by delegat-) 140.54 528.67 P
(ing. A handler delegates by signaling another condition.) 108 514.67 T
(Another way an err) 135 500.67 T
(or handler may r) 230.27 500.67 T
(ecover \050if the err) 312.19 500.67 T
(or handler was estab-) 391.97 500.67 T
(lish using) 108 486.67 T
4 9.5 Q
(let handler) 157.98 486.67 T
1 11 Q
(\051 is simply to r) 220.68 486.67 T
(eturn some values, if that is part of the) 290.46 486.67 T
(r) 108 472.67 T
(ecovery pr) 112.15 472.67 T
(otocol. If the designer of a condition wishes to permit the err) 163.76 472.67 T
(or han-) 457.35 472.67 T
(dler to simply r) 108 458.67 T
(eturn to the signaler as a r) 183.03 458.67 T
(ecovery technique, some r) 309.12 458.67 T
(equir) 435.83 458.67 T
(ements) 461.24 458.67 T
-0.42 (must be met. First, the condition \050or a super) 108 444.67 P
-0.42 (class of the condition\051 must de\336ne the) 317.09 444.67 P
4 9.5 Q
-0.27 (return-allowed?) 108 430.67 P
1 11 Q
-0.13 ( method to r) 193.5 430.67 P
-0.13 (eturn tr) 252.8 430.67 P
-0.13 (ue. Second, the condition \050or a super) 289.49 430.67 P
-0.13 (class of) 466.18 430.67 P
(the condition\051 must de\336ne the) 108 416.67 T
4 9.5 Q
( return-description) 254.5 416.67 T
1 11 Q
(method to r) 368.5 416.67 T
(eturn a descrip-) 425.43 416.67 T
(tion \050typically a string\051 of what will happen if the handler r) 108 402.67 T
(eturns. Finally) 395.01 402.67 T
(, the) 463.93 402.67 T
(original err) 108 388.67 T
(or must be signaled with the) 162.48 388.67 T
4 9.5 Q
(signal) 303.98 388.67 T
1 11 Q
( function, since it is an err) 338.18 388.67 T
(or for a) 462.94 388.67 T
(handler to r) 108 374.67 T
(eturn to) 165.08 374.67 T
4 9.5 Q
(error) 206.41 374.67 T
1 11 Q
( or) 234.91 374.67 T
4 9.5 Q
(cerror) 250.76 374.67 T
1 11 Q
( functions.) 284.96 374.67 T
3 13 Q
(10.4.2  Restart classes and methods) 108 343.33 T
1 11 Q
(In this section, we de\336ne some r) 108 323.67 T
(estart classes and methods. In Section 10.4.7, we) 263.78 323.67 T
-0.16 (r) 108 309.67 P
-0.16 (ede\336ne) 112.15 309.67 P
4 9.5 Q
-0.34 (parse-integer) 150.32 309.67 P
1 11 Q
-0.16 ( to use those classes and methods to pr) 224.42 309.67 P
-0.16 (ovide several alter-) 411.39 309.67 P
(natives for any err) 108 295.67 T
(or handlers that may decide to hunt for r) 196.88 295.67 T
(ecovery options. The) 394.98 295.67 T
(four alternatives we want to supply ar) 108 281.67 T
(e:) 294.07 281.67 T
(\245) 117 261.67 T
(A way to automatically r) 135 261.67 T
(ecover without user interaction if we know the) 255.71 261.67 T
(thr) 135 247.67 T
(ee values we want to r) 149.13 247.67 T
(eturn fr) 257.75 247.67 T
(om) 294.54 247.67 T
4 9.5 Q
(parse-integer) 313.01 247.67 T
1 11 Q
(. W) 386.3 247.67 T
(e implement this) 401.79 247.67 T
(alternative in Section 10.4.3.) 135 233.67 T
(\245) 117 213.67 T
(A way to interactively r) 135 213.67 T
(eturn any thr) 249.86 213.67 T
(ee valid user) 313.75 213.67 T
(-supplied values fr) 375.34 213.67 T
(om) 466.7 213.67 T
4 9.5 Q
(parse-integer) 135 199.67 T
1 11 Q
(. W) 208.29 199.67 T
(e implement this alternative in Section 10.4.4.) 223.77 199.67 T
(\245) 117 179.67 T
(A way to interactively r) 135 179.67 T
(eturn zer) 249.86 179.67 T
(o, and skip over the r) 293.76 179.67 T
(est of the string. W) 396.72 179.67 T
(e) 487.22 179.67 T
(implement this alternative in Section 10.4.5.) 135 165.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 166
%%Page: "165" 167
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(165) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(\245) 117 640.67 T
(A way to skip over the pr) 135 640.67 T
(oblem character) 258.88 640.67 T
(, and continue parsing after that) 335.8 640.67 T
(point. W) 135 626.67 T
(e implement this alternative in Section 10.4.6.) 176.29 626.67 T
(T) 108 606.67 T
(o start, we de\336ne a type that r) 113.73 606.67 T
(epr) 258.48 606.67 T
(esents valid values for signs in our integer) 274.51 606.67 T
-0.12 (parser \050false, a plus sign, and a minus sign\051. Her) 108 592.67 P
-0.12 (e) 340.98 592.67 P
4 9.5 Q
-0.24 (union) 348.88 592.67 P
1 11 Q
-0.12 ( cr) 377.38 592.67 P
-0.12 (eates a new type that is) 389.05 592.67 P
-0.07 (the union of all the types pr) 108 578.67 P
-0.07 (ovided as ar) 241.8 578.67 P
-0.07 (guments. Remember that the) 301.1 578.67 P
4 9.5 Q
-0.15 ( singleton) 441.6 578.67 P
1 11 Q
(function r) 108 564.67 T
(eturns a type that matches only one object, the instance pr) 155.67 564.67 T
(ovided as its) 436.72 564.67 T
(ar) 108 550.67 T
(gument.) 117.65 550.67 T
4 9 Q
(def) 108 530 T
(ine constant <sign> = union \050singleton \050#f\051, singleton\050\325-\325\051, singleton) 124.2 530 T
(\050\325+\325\051\051;) 108 519 T
1 11 Q
(Next, we de\336ne) 108 498.67 T
4 9.5 Q
(<return-integer-parse-values>) 187.43 498.67 T
1 11 Q
(, the main r) 352.73 498.67 T
(estart condition,) 407.95 498.67 T
-0.25 (which r) 108 484.67 P
-0.25 (epr) 144.71 484.67 P
-0.25 (esents a r) 160.74 484.67 P
-0.25 (ecovery pr) 205.24 484.67 P
-0.25 (otocol wher) 256.6 484.67 P
-0.25 (e some value is to be r) 313.79 484.67 P
-0.25 (eturned fr) 419.49 484.67 P
-0.25 (om the) 468.02 484.67 P
4 9.5 Q
(parse-integer) 108 470.67 T
1 11 Q
( method. Although it is possible to design general-purpose) 182.1 470.67 T
-0.02 (r) 108 456.67 P
-0.02 (estarts, we de\336ne some very speci\336c r) 112.15 456.67 P
-0.02 (estarts to keep the example simple. All the) 295.56 456.67 P
(r) 108 442.67 T
(estarts after this one either dir) 112.15 442.67 T
(ectly or indir) 257.55 442.67 T
(ectly inherit fr) 320.12 442.67 T
(om this class.) 388.9 442.67 T
4 9 Q
(def) 108 422 T
(ine class <return-integer-parse-values> \050<restart>\051) 124.2 422 T
(slot return-function :: <function>;) 118.8 411 T
(slot return-result :: <integer>, init-keyword: return-result:;) 118.8 400 T
(slot return-sign, init-keyword: return-sign:;) 118.8 389 T
(slot return-end-index :: integer, init-keyword: return-end-index:;) 118.8 378 T
(end;) 108 367 T
1 11 Q
(The slots de\336ned in the pr) 108 346.67 T
(eceding de\336nition ar) 234.94 346.67 T
(e used in the following method to) 335.39 346.67 T
(pr) 108 332.67 T
(ovide the r) 118.76 332.67 T
(eturn function and r) 171.07 332.67 T
(eturn values when the r) 269.11 332.67 T
(estart handler method) 384.47 332.67 T
(\050) 108 318.67 T
4 9.5 Q
(do-return) 111.66 318.67 T
1 11 Q
(\051 is executed.) 162.96 318.67 T
4 9 Q
-0.3 (def) 108 298 P
-0.3 (ine method do-return \050cond :: <return-integer-parse-values>, next-handler\051) 124.2 298 P
(cond.return-function \050values \050cond.return-result,) 118.8 287 T
(cond.return-sign,) 280.8 276 T
(cond.return-end-index\051\051;) 280.8 265 T
(end;) 108 254 T
1 11 Q
-0 (As we shall see in Section 10.4.7, the) 108 233.67 P
4 9.5 Q
-0 (return-function) 286.06 233.67 P
1 11 Q
-0 ( slot will be \336lled with the) 371.56 233.67 P
4 9.5 Q
(return) 108 219.67 T
1 11 Q
( function fr) 142.2 219.67 T
(om the) 196.29 219.67 T
4 9.5 Q
(block) 232.76 219.67 T
1 11 Q
( that surr) 261.26 219.67 T
(ounds the body o) 305.63 219.67 T
2 F
(f) 390.49 219.67 T
4 9.5 Q
(parse-integer) 397.52 219.67 T
1 11 Q
(.) 470.81 219.67 T
(W) 479.26 219.67 T
(e) 489.24 219.67 T
(can r) 108 205.67 T
(eturn any value fr) 131.68 205.67 T
(om) 218.81 205.67 T
4 9.5 Q
(parse-integer) 237.28 205.67 T
1 11 Q
( by simply calling this function fr) 311.38 205.67 T
(om) 472.53 205.67 T
(our err) 108 191.67 T
(or handler) 141.49 191.67 T
(.) 191.62 191.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 167
%%Page: "166" 168
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(166) 72 677.67 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(10.4.3  Automatic return recovery option) 108 639.33 T
1 11 Q
(The) 108 619.67 T
4 9.5 Q
(<automatic-return-integer-parse-values>) 129.16 619.67 T
1 11 Q
( class in the following de\336ni-) 351.46 619.67 T
(tion r) 108 605.67 T
(epr) 134.09 605.67 T
(esents the r) 150.12 605.67 T
(estart option chosen by the application rather than thr) 204.88 605.67 T
(ough) 466.9 605.67 T
(user interaction. This r) 108 591.67 T
(estart is selected by a handler without user intervention) 217.45 591.67 T
(when the handler knows the corr) 108 577.67 T
(ect values to r) 269.1 577.67 T
(eturn fr) 336.3 577.67 T
(om) 373.1 577.67 T
4 9.5 Q
( parse-integer) 388.82 577.67 T
1 11 Q
(.) 467.8 577.67 T
4 9 Q
(def) 108 557 T
(ine class <automatic-return-integer-parse-values>) 124.2 557 T
(\050<return-integer-parse-values>\051) 140.4 546 T
(end;) 108 535 T
1 11 Q
(The) 108 514.67 T
4 9.5 Q
(interactive?) 129.16 514.67 T
1 11 Q
( pr) 197.56 514.67 T
(otocol is de\336ned by our application, not Dylan. It it used by) 211.07 514.67 T
(a handler to determine if this r) 108 500.67 T
(estart should be of) 256.07 500.67 T
(fer) 345.72 500.67 T
(ed in the list of choices pr) 358.8 500.67 T
(e-) 482.54 500.67 T
-0.11 (sented interactively to users. Her) 108 486.67 P
-0.11 (e, we assert that this condition is not suitable for) 267.74 486.67 P
(interactive use:) 108 472.67 T
4 9 Q
(def) 108 452 T
(ine method interactive? \050cond :: <automatic-return-integer-parse-values>\051) 124.2 452 T
(#f;) 118.8 441 T
(end;) 108 430 T
1 11 Q
-0.47 (The) 108 409.67 P
4 9.5 Q
-0.98 (values-supplied?) 128.69 409.67 P
1 11 Q
-0.47 ( method de\336ned in the following example is a test function) 219.89 409.67 P
-0.02 (that we will supply in) 108 395.67 P
4 9.5 Q
-0.05 (parse-integer) 217.37 395.67 P
1 11 Q
-0.02 ( as part of establishing this r) 291.47 395.67 P
-0.02 (estart. This test) 428 395.67 P
-0.19 (function should pr) 108 381.67 P
-0.19 (event a handler fr) 198.29 381.67 P
-0.19 (om selecting this r) 283.88 381.67 P
-0.19 (estart unless all the slots of) 371.88 381.67 P
(the r) 108 367.67 T
(estart condition instance ar) 130.15 367.67 T
(e \336lled in.) 261.32 367.67 T
4 9 Q
-3.6 (def) 108 347 P
-3.6 (ine method values-supplied? \050cond :: <automatic-return-integer-parse-values>\051) 124.2 347 P
(slot-initialized? \050cond, return-function\051 &) 118.8 336 T
(slot-initialized? \050cond, return-result\051 &) 118.8 325 T
(slot-initialized? \050cond, return-sign\051 &) 118.8 314 T
(slot-initialized? \050cond, return-index\051;) 118.8 303 T
(end;) 108 292 T
3 13 Q
(10.4.4  Interactive query recovery option) 108 262.33 T
1 11 Q
(Next, we de\336ne a class that r) 108 242.67 T
(epr) 247.32 242.67 T
(esents all r) 263.34 242.67 T
(estarts that ar) 314.74 242.67 T
(e designed to be used) 380.58 242.67 T
(interactively) 108 228.67 T
(. The additional slot,) 167.55 228.67 T
4 9.5 Q
(interact-where) 269.96 228.67 T
1 11 Q
(, designates wher) 349.76 228.67 T
(e the user) 434.4 228.67 T
(interaction should take place.) 108 214.67 T
4 9 Q
(def) 108 194 T
(ine class <interactive-return-integer-parse-values>) 124.2 194 T
(\050<return-integer-parse-values>\051) 140.4 183 T
(slot interact-where, init-keyword: where:;) 118.8 172 T
(end;) 108 161 T
1 11 Q
(W) 108 140.67 T
(e indicate to our handlers that this r) 117.99 140.67 T
(estart may be used interactively:) 291.42 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 168
%%Page: "167" 169
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(167) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
-1.44 (def) 108 642 P
-1.44 (ine method interactive? \050cond :: <interactive-return-integer-parse-values>\051) 124.2 642 P
(#t;) 118.8 631 T
(end;) 108 620 T
1 11 Q
(Next, we de\336ne a class that r) 108 599.67 T
(epr) 247.32 599.67 T
(esents the option to r) 263.34 599.67 T
(eturn values fr) 365 599.67 T
(om) 436.03 599.67 T
4 9.5 Q
( parse-) 451.75 599.67 T
(integer) 108 585.67 T
1 11 Q
(based on interactively querying those values fr) 153.6 585.67 T
(om the user:) 380.98 585.67 T
4 9 Q
(def) 108 565 T
(ine class <query-return-integer-parse-values>) 124.2 565 T
(\050<interactive-return-integer-parse-values>\051) 140.4 554 T
(end;) 108 543 T
1 11 Q
(Next, we de\336ne the method for querying the user for values to r) 108 522.67 T
(eturn for this) 418.79 522.67 T
(r) 108 508.67 T
(estart. The) 112.15 508.67 T
4 9.5 Q
(restart-query) 165.76 508.67 T
1 11 Q
( generic function is part of the Dylan standar) 239.86 508.67 T
(d r) 457.21 508.67 T
(ecov-) 470.83 508.67 T
(ery pr) 108 494.67 T
(otocol.) 137.24 494.67 T
4 9 Q
(def) 108 474 T
(ine method restart-query \050cond :: <query-return-integer-parse-values>\051) 124.2 474 T
(return-result := interactive-read-integer \050interact-where \050cond\051,) 118.8 463 T
-1.44 (prompt: "Integer value of parse?) 351 452 P
("\051;) 108 441 T
(return-sign := interactive-read-sign \050interact-where \050cond\051,) 118.8 430 T
-0.26 (prompt: "Sign of parse \050n for none\051?) 324 419 P
("\051;) 108 408 T
(return-end-index := interactive-read-integer \050interact-where \050cond\051,) 118.8 397 T
(prompt: "end of parse? "\051;) 367.2 386 T
(end;) 108 375 T
1 11 Q
-0.02 (Next, we de\336ne a helper method that pr) 108 354.67 P
-0.02 (ompts for and r) 302.41 354.67 P
-0.02 (eads a sign fr) 377.96 354.67 P
-0.02 (om the user) 441.99 354.67 P
-0.02 (.) 498.52 354.67 P
-0.44 (Her) 108 340.67 P
-0.44 (e we intr) 126.57 340.67 P
-0.44 (oduce the function) 168.24 340.67 P
4 9.5 Q
-0.91 (read-character) 260.72 340.67 P
1 11 Q
-0.44 (, which r) 339.7 340.67 P
-0.44 (eads a character fr) 381.29 340.67 P
-0.44 (om the) 468.4 340.67 P
(speci\336ed place. In this case, typically the character will be r) 108 326.67 T
(ead fr) 394.68 326.67 T
(om keystr) 422.73 326.67 T
(okes) 471.1 326.67 T
(typed by a user) 108 312.67 T
(.) 182.35 312.67 T
4 9 Q
(def) 108 292 T
(ine method interactive-read-sign) 124.2 292 T
-0.13 (\050where, #key prompt = "Enter a sign \050n for none\051: "\051 => sign :: <sign>;) 140.4 281 P
(block \050return\051) 118.8 270 T
(while \050#t\051) 129.6 259 T
(format \050where, "\134n%s", prompt\051;) 162 248 T
(let result = read-character \050where\051;) 162 237 T
(if \050\050result = \325n\325\051 | \050result = \325N\325\051\051 return \050#\134f\051;) 162 226 T
(if \050instance? \050result, <sign>\051\051 return \050result\051;) 162 215 T
(end;) 129.6 204 T
(end;) 118.8 193 T
(end;) 108 182 T
1 11 Q
-0.42 (For our application, in Section 10.2.3, we de\336ned) 108 161.67 P
4 9.5 Q
-0.87 (report) 344 161.67 P
1 11 Q
-0.42 ( methods \050and an implicit) 378.2 161.67 P
(generic function\051 that described err) 108 147.67 T
(or conditions for users. W) 278.92 147.67 T
(e use that same pr) 403.67 147.67 T
(o-) 491.48 147.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 169
%%Page: "168" 170
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(168) 72 677.67 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(tocol in the following method, this time to describe what picking this r) 108 640.67 T
(estart will) 449.8 640.67 T
(do. This method will be used by our err) 108 626.67 T
(or handler in the next section to help the) 300.54 626.67 T
(user decide which r) 108 612.67 T
(estart to pick.) 203.44 612.67 T
4 9 Q
(def) 108 592 T
(ine method report \050cond :: <query-return-integer-parse-values>, where\051) 124.2 592 T
(format \050where,) 118.8 581 T
("Returns from the integer parser with return values supplied) 129.6 570 T
(interactively."\051;) 108 559 T
(end;) 108 548 T
3 13 Q
(10.4.5  Interactive zero return recovery option) 108 518.33 T
1 11 Q
(Next, we de\336ne a class to r) 108 498.67 T
(epr) 237.83 498.67 T
(esent the option of simply r) 253.86 498.67 T
(eturning zer) 387.19 498.67 T
(o fr) 446.81 498.67 T
(om) 463.38 498.67 T
4 9.5 Q
-0.41 (parse-integer) 108 484.67 P
1 11 Q
-0.2 (, with no sign, and with an) 181.29 484.67 P
4 9.5 Q
-0.41 (end-index) 312.69 484.67 P
1 11 Q
-0.2 ( that indicates that the entir) 363.99 484.67 P
-0.2 (e) 496.18 484.67 P
(string pr) 108 470.67 T
(ovided has been consumed. In or) 149.82 470.67 T
(der to pr) 310.6 470.67 T
(ovide this option, we need to) 352.78 470.67 T
(look at the original string that caused the parse err) 108 456.67 T
(or) 352.86 456.67 T
(. Fortunately) 362.4 456.67 T
(, our err) 423.44 456.67 T
(or han-) 462.43 456.67 T
(dler will pr) 108 442.67 T
(ovide us with the original err) 162.57 442.67 T
(or condition, which contains the unpars-) 304.38 442.67 T
(able integer string. Because the) 108 428.67 T
4 9.5 Q
(condition:) 261.25 428.67 T
1 11 Q
( init keywor) 318.25 428.67 T
(d is part of the standar) 376.97 428.67 T
(d) 486.79 428.67 T
-0.1 (Dylan r) 108 414.67 P
-0.1 (ecovery pr) 144.53 414.67 P
-0.1 (otocol, we would expect other handlers to also pr) 196.04 414.67 P
-0.1 (ovide us with) 434.98 414.67 P
(the original err) 108 400.67 T
(or condition.) 180.49 400.67 T
4 9 Q
(def) 108 380 T
(ine class <zero-return-integer-parse-values>) 124.2 380 T
(\050<interactive-return-integer-parse-values>\051) 140.4 369 T
(slot error-condition :: <integer-parse-error>, init-keyword: condition:;) 118.8 358 T
(end;) 108 347 T
1 11 Q
-0.2 (The following) 108 326.67 P
4 9.5 Q
-0.41 (restart-query) 178.49 326.67 P
1 11 Q
-0.2 ( method does nothing because it is not be necessary) 252.59 326.67 P
(for the user to interactively supply any slot values for this r) 108 312.67 T
(estart.) 395.61 312.67 T
4 9 Q
(def) 108 292 T
(ine method restart-query \050cond :: <zero-return-integer-parse-values>\051) 124.2 292 T
(end;) 108 281 T
1 11 Q
(As with the) 108 260.67 T
4 9.5 Q
(report) 167.09 260.67 T
1 11 Q
( method in Section 10.4.4, the following method pr) 201.29 260.67 T
(ovides an) 446.65 260.67 T
(explanation of what picking this r) 108 246.67 T
(estart will do, namely) 271.97 246.67 T
(, r) 376.4 246.67 T
(eturn zer) 386.05 246.67 T
(o.) 429.95 246.67 T
4 9 Q
(def) 108 226 T
(ine method report \050cond :: <zero-return-integer-parse-values>\051, where\051) 124.2 226 T
(format \050where,) 118.8 215 T
-1.14 (\322Returns zero from the integer parser, skipping the rest of the string.\323\051;) 135 204 P
(end;) 108 193 T
1 11 Q
(Next, we pr) 108 172.67 T
(ovide a special) 165.12 172.67 T
4 9.5 Q
(do-return) 239.62 172.67 T
1 11 Q
( method that delegates to the r) 290.92 172.67 T
(estart that) 438.78 172.67 T
-0.15 (r) 108 158.67 P
-0.15 (epr) 112.15 158.67 P
-0.15 (esents the pr) 128.17 158.67 P
-0.15 (ogramatic \050non-interactive\051 r) 189.25 158.67 P
-0.15 (eturn option. Once the user has cho-) 328.7 158.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 170
%%Page: "169" 171
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(169) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(sen to r) 108 640.67 T
(eturn zer) 143.57 640.67 T
(o, we can simply use the same handler the automatic r) 187.48 640.67 T
(eturn) 451.29 640.67 T
(r) 108 626.67 T
(estart uses, supplying the corr) 112.15 626.67 T
(ect r) 258.27 626.67 T
(eturn values for the zer) 278.91 626.67 T
(o r) 391.81 626.67 T
(eturn option.) 404.71 626.67 T
4 9 Q
-4.8 (def) 108 606 P
-4.8 (ine method do-return \050cond :: <zero-return-integer-parse-values>, next-handler\051) 124.2 606 P
(signal \050make \050<automatically-return-integer-parse-values>,) 118.8 595 T
(return-function: return-function \050cond\051,) 194.4 584 T
(return-result: 0,) 194.4 573 T
(return-sign: #f,) 194.4 562 T
(return-index: size \050bad-string \050error-condition \050cond\051\051\051\051\051;) 194.4 551 T
(end;) 108 540 T
3 13 Q
(10.4.6  Skip character recovery option) 108 510.33 T
1 11 Q
(Finally) 108 490.67 T
(, we de\336ne the methods for the standar) 140.52 490.67 T
(d Dylan r) 330.68 490.67 T
(ecovery pr) 376.79 490.67 T
(otocol that) 428.4 490.67 T
(allows a handler to r) 108 476.67 T
(eturn values fr) 207.82 476.67 T
(om the signaler) 278.85 476.67 T
(. In this case, r) 353.21 476.67 T
(eturning values) 422.14 476.67 T
(fr) 108 462.67 T
(om the handler simply causes the curr) 115.81 462.67 T
(ent pr) 301.51 462.67 T
(oblem character to be skipped, and) 330.28 462.67 T
(execution to continue, as we will see with the new) 108 448.67 T
4 9.5 Q
(parse-integer) 354.2 448.67 T
1 11 Q
( method in Sec-) 428.3 448.67 T
(tion 10.4.7.) 108 434.67 T
4 9 Q
(def) 108 414 T
(ine method return-allowed? \050<integer-parse-error>\051) 124.2 414 T
(#t;) 118.8 403 T
(end;) 108 392 T
(def) 108 373 T
(ine method return-description \050cond :: <integer-parse-error>\051) 124.2 373 T
("Skip over the problem character and continue parsing") 118.8 362 T
(end;) 108 351 T
3 13 Q
(10.4.7  The new) 108 321.33 T
(, recoverable parse-integer) 185.83 321.33 T
6 9 Q
(// This is a simple integer parser that both signals <integer-parse-error>) 108 301 T
(// conditions when parsing problems are encountered, and also provides some) 108 290 T
(// restart handlers in case an error handler wishes to recover within parse-) 108 279 T
(integer.) 108 268 T
4 F
(def) 108 257 T
(ine method parse-integer) 124.2 257 T
(\050integer-string :: <string>, #key delimiter = ".", start = 0\051 =>) 129.6 246 T
( \050integer :: <integer>, sign :: <sign>, end-index :: <integer>\051;) 129.6 235 T
(block \050return\051) 118.8 224 T
(let length = size \050integer-string\051;) 129.6 213 T
(let result = #f;) 129.6 202 T
(let sign = #f;) 129.6 191 T
(let end-index = start;) 129.6 180 T
(let handler \050<automatic-return-integer-parse-values>, test: values-) 129.6 169 T
(suppied?,) 108 158 T
(init-arguments: vector\050return-function:, return\051\051 = do-) 199.8 147 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 171
%%Page: "170" 172
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(170) 72 677.67 T
0 9.5 Q
(10.4 Using let handler to implement a recovery protocol) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(return;) 108 642 T
(let handler \050<query-return-integer-parse-values>,) 129.6 631 T
(init-arguments: vector\050return-function:, return\051\051 = do-) 199.8 620 T
(return;) 108 609 T
(let handler \050<zero-return-integer-parse-values>,) 129.6 598 T
(init-arguments: vector\050return-function:, return\051\051 = do-) 199.8 587 T
(return;) 108 576 T
(for \050index from start below length\051) 129.6 565 T
(let char = integer-string[index];) 140.4 554 T
(case) 140.4 543 T
6 F
(// Is the character a digit?) 151.2 532 T
4 F
(digit? \050char\051 =>) 151.2 521 T
(let value = position \050char, $digits\051;) 162 510 T
(if \050result\051) 162 499 T
6 F
(// If we have already started to generate the integer) 183.6 488 T
(// shift the result to make room for the next digit.) 183.6 477 T
4 F
(result := \050result * 10\051 + value;) 183.6 466 T
(else) 172.8 455 T
(result := value;) 183.6 444 T
(end;) 162 433 T
6 F
(// Is the character whitespace?) 151.2 422 T
4 F
(whitespace? \050char\051 => #f;) 151.2 411 T
6 F
(// Is the character a sign?) 151.2 400 T
4 F
(sign? \050char\051 => if \050result | sign\051) 151.2 389 T
(signal \050make \050) 253.8 378 T
4 9.5 Q
(<sign-in-illegal-position>,) 329.4 378 T
4 9 Q
(bad-string: integer-string) 329.4 367 T
4 9.5 Q
(\051) 469.8 367 T
4 9 Q
(\051;) 475.5 367 T
(else) 237.6 356 T
(sign := char;) 253.8 345 T
(end;) 237.6 334 T
6 F
(// Is the character the specif) 151.2 323 T
(ied character to stop at when reached?) 313.2 323 T
4 F
(char == delimiter => return \050values \050result, sign, index\051\051;) 151.2 312 T
(otherwise => signal \050make \050) 151.2 301 T
4 9.5 Q
(<illegal-character>, bad-char: char) 297 301 T
4 9 Q
(,) 496.5 301 T
(bad-string: integer-string) 291.6 290 T
4 9.5 Q
(\051) 432 290 T
4 9 Q
(\051;) 437.7 290 T
(end case;) 140.4 279 T
(f) 129.6 268 T
(inally return \050values \050result, sign, length\051\051;) 135 268 T
(end for;) 129.6 257 T
(end block;) 118.8 246 T
(end method parse-integer;) 108 235 T
1 11 Q
(W) 108 214.67 T
(e have made only two changes in) 117.99 214.67 T
4 9.5 Q
(parse-integer) 282.43 214.67 T
1 11 Q
( itself.) 356.53 214.67 T
(First, we have added a gr) 135 200.67 T
(oup of) 257.94 200.67 T
4 9.5 Q
(let handler) 292.36 200.67 T
1 11 Q
( local declarations. These dec-) 355.05 200.67 T
(larations establish the thr) 108 186.67 T
(ee r) 230.62 186.67 T
(estart options we de\336ned, and link them to the) 248.05 186.67 T
4 9.5 Q
(do-) 477.82 186.67 T
-0.52 (return) 108 172.67 P
1 11 Q
-0.25 ( handler generic function we de\336ned. W) 142.2 172.67 P
-0.25 (e captur) 335.51 172.67 P
-0.25 (e the) 374.64 172.67 P
4 9.5 Q
-0.52 (return) 400.16 172.67 P
1 11 Q
-0.25 ( function, and) 434.36 172.67 P
(pr) 108 158.67 T
(ovide it to the handler via the r) 118.76 158.67 T
(estart init keywor) 269.22 158.67 T
(d sequence. The) 354.88 158.67 T
4 9.5 Q
(return) 435.57 158.67 T
1 11 Q
( func-) 469.77 158.67 T
(tion will end up in the r) 108 144.67 T
(estart condition instance cr) 223.12 144.67 T
(eated by an err) 353.66 144.67 T
(or handler) 426.12 144.67 T
(. For) 476.25 144.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 172
%%Page: "171" 173
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(171) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(the) 108 640.67 T
4 9.5 Q
(<automatic-return-integer-parse-values>) 126.01 640.67 T
1 11 Q
( r) 348.31 640.67 T
(estart, we pr) 355.2 640.67 T
(ovide a test) 415.61 640.67 T
-0.44 (de\336ned above that will inform handlers not to select this r) 108 626.67 P
-0.44 (estart unless all the slots) 385.38 626.67 P
(of the r) 108 612.67 T
(estart ar) 142.57 612.67 T
(e alr) 181.92 612.67 T
(eady \336lled in. Sometimes you want to establish a gr) 202.79 612.67 T
(oup of) 453.08 612.67 T
(similar handlers \050as in this case\051, or sometimes you want to establish a general) 108 598.67 T
-0.34 (purpose r) 108 584.67 P
-0.34 (estart handler \050or gr) 154.7 584.67 P
-0.34 (oup of handlers\051 in mor) 251.01 584.67 P
-0.34 (e than one place. That might) 365.22 584.67 P
(be a bit cumbersome and har) 108 570.67 T
(d to maintain if done the obvious way) 248.72 570.67 T
(. Establishing) 432.69 570.67 T
(r) 108 556.67 T
(epetitive err) 112.15 556.67 T
(or or r) 170.87 556.67 T
(estart handlers is sometimes best done using a macr) 201.21 556.67 T
(o. See) 453.38 556.67 T
(Chapter 13 for mor) 108 542.67 T
(e information about macr) 200.64 542.67 T
(os.) 324.24 542.67 T
-0.29 (Second, we have changed the calls fr) 135 528.67 P
-0.29 (om) 311.2 528.67 P
4 9.5 Q
-0.6 (error) 329.38 528.67 P
1 11 Q
-0.29 ( to) 357.88 528.67 P
4 9.5 Q
-0.6 (signal) 372.39 528.67 P
1 11 Q
-0.29 (, to permit handlers) 406.59 528.67 P
(to r) 108 514.67 T
(eturn values as an additional way to r) 124.49 514.67 T
(ecover) 308.09 514.67 T
(. In this case, r) 339.26 514.67 T
(eturning fr) 408.19 514.67 T
(om the) 460.7 514.67 T
-0.09 (handler means that the handler would like us to skip the pr) 108 500.67 P
-0.09 (oblematical character) 395.88 500.67 P
-0.09 (,) 498.59 500.67 P
(and pr) 108 486.67 T
(oceed with the parsing after that point.) 140.13 486.67 T
-0.22 (In the next section, we explor) 135 472.67 P
-0.22 (e how all this machinery \336nally \336ts together as) 276.07 472.67 P
(we de\336ne our own err) 108 458.67 T
(or handler that takes advantage of these new r) 216.09 458.67 T
(ecovery) 441.15 458.67 T
(opportunities.) 108 444.67 T
3 15 Q
(10.5  De\336ning an error handler with recovery) 108 405 T
1 11 Q
(Now that we have de\336ned a) 108 384.67 T
4 9.5 Q
(parse-integer) 248.26 384.67 T
1 11 Q
( method with r) 322.36 384.67 T
(ecovery) 394.82 384.67 T
(, we will) 431.7 384.67 T
(explor) 108 370.67 T
(e some dif) 138.91 370.67 T
(fer) 188.72 370.67 T
(ent ways a handler can exploit the availability of these r) 201.8 370.67 T
(ecov-) 472.45 370.67 T
(ery options.) 108 356.67 T
3 13 Q
(10.5.1  Establishing introspective handlers) 108 325.33 T
1 11 Q
(Below we de\336ne a new method,) 108 305.67 T
4 9.5 Q
(read-integer) 266.42 305.67 T
1 11 Q
(, which takes an ar) 334.01 305.67 T
(gument saying) 424.51 305.67 T
(wher) 108 291.67 T
(e to get the characters that make up the integer) 132.99 291.67 T
(, and also takes an ar) 359.76 291.67 T
(gument) 460.93 291.67 T
(describing how the caller would like err) 108 277.67 T
(ors handled. The) 301.91 277.67 T
4 9.5 Q
(error-action) 386.55 277.67 T
1 11 Q
( keywor) 454.95 277.67 T
(d) 494.53 277.67 T
(parameter must be one of the following symbols:) 108 263.67 T
4 9.5 Q
(ask:) 348.86 263.67 T
1 11 Q
(,) 371.66 263.67 T
4 9.5 Q
(zero:) 377.16 263.67 T
1 11 Q
(,) 405.66 263.67 T
4 9.5 Q
(skip:) 411.16 263.67 T
1 11 Q
(, or) 439.66 263.67 T
4 9.5 Q
(error:) 458.26 263.67 T
1 11 Q
(.) 492.46 263.67 T
(The) 108 249.67 T
4 9.5 Q
(ask:) 129.16 249.67 T
1 11 Q
( symbol indicates that an interactive dialog with the user should deter-) 151.96 249.67 T
(mine how any parse err) 108 235.67 T
(ors ar) 223.34 235.67 T
(e handled. The) 250.75 235.67 T
4 9.5 Q
(zero:) 325.65 235.67 T
1 11 Q
( keywor) 354.15 235.67 T
(d indicates that the) 393.72 235.67 T
-0.12 (caller simply wants the integer zer) 108 221.67 P
-0.12 (o r) 274.73 221.67 P
-0.12 (eturned whenever ther) 287.52 221.67 P
-0.12 (e is a parse err) 398.74 221.67 P
-0.12 (or) 468.04 221.67 P
-0.12 (. The) 477.58 221.67 P
4 9.5 Q
-0.28 (skip:) 108 207.67 P
1 11 Q
-0.13 ( keywor) 136.5 207.67 P
-0.13 (d indicates that the caller wants to ignor) 175.95 207.67 P
-0.13 (e any illegal characters and) 369.94 207.67 P
(continue parsing. The) 108 193.67 T
4 9.5 Q
(error:) 216.64 193.67 T
1 11 Q
( keywor) 250.84 193.67 T
(d indicates that the caller will handle the) 290.41 193.67 T
-0.04 (err) 108 179.67 P
-0.04 (or) 121.76 179.67 P
-0.04 (, or is willing to have the err) 131.3 179.67 P
-0.04 (or send the user to whatever debugger might be) 267.74 179.67 P
(available, so) 108 165.67 T
4 9.5 Q
(read-integer) 170.59 165.67 T
1 11 Q
( should decline to handle any parse err) 238.99 165.67 T
(ors.) 428.07 165.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 173
%%Page: "172" 174
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(172) 72 677.67 T
0 9.5 Q
(10.5 Defining an error handler with recovery) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method read-integer \050where, #key error-action :: <symbol> = error:,) 124.2 642 T
(prompt :: <string> = "Enter a number: "\051) 259.2 631 T
(=> \050value :: <integer>, sign :: <sign>,) 253.8 620 T
(end-index :: <integer>\051;) 275.4 609 T
(let handler <integer-parse-error> =) 118.8 598 T
(select \050error-action\051) 151.2 587 T
6 F
(// Always decline) 162 576 T
4 F
(error: => decline-handler;) 162 565 T
6 F
(// Ask the user what to do interactively) 162 554 T
4 F
(ask: => method \050condition, next-handler\051) 162 543 T
(interactive-handler \050condition, next-handler, where\051;) 216 532 T
(end;) 205.2 521 T
6 F
(// Always return) 162 510 T
4 F
(skip: => return-handler;) 162 499 T
6 F
(// Always cause parse-integer to return zero to its caller.) 162 488 T
4 F
(zero: => zero-handler;) 162 477 T
(parse-integer \050read-line \050where\051\051;) 118.8 466 T
(end;) 108 455 T
1 11 Q
(The) 108 434.67 T
4 9.5 Q
(read-integer) 129.16 434.67 T
1 11 Q
( method implements the four err) 197.56 434.67 T
(or actions by choosing and) 356.3 434.67 T
(establishing one of four dif) 108 420.67 T
(fer) 238.67 420.67 T
(ent handlers. The inter) 251.75 420.67 T
(esting parts ar) 361.53 420.67 T
(e contained) 430.62 420.67 T
(within the actual handler methods below) 108 406.67 T
(. Note the bar) 307.2 406.67 T
(e method \050in the) 373.19 406.67 T
4 9.5 Q
(ask:) 455.68 406.67 T
1 11 Q
(branch of the) 108 392.67 T
4 9.5 Q
(select) 174.79 392.67 T
1 11 Q
(\051 that complies with the standar) 208.99 392.67 T
(d contract for a handler) 363.17 392.67 T
(, and) 476.62 392.67 T
(yet pr) 108 378.67 T
(ovides additional information the) 136.48 378.67 T
4 9.5 Q
(interactive-handler) 302.88 378.67 T
1 11 Q
( handler method) 411.18 378.67 T
(r) 108 364.67 T
(equir) 112.15 364.67 T
(es. The condition system pr) 137.56 364.67 T
(ovides only the err) 270.83 364.67 T
(or instance and the) 361.9 364.67 T
4 9.5 Q
(next-) 457.04 364.67 T
(handler) 108 350.67 T
1 11 Q
( method, and the) 147.9 350.67 T
4 9.5 Q
(interactive-handler) 233.23 350.67 T
1 11 Q
( method needs to know wher) 341.53 350.67 T
(e) 483.58 350.67 T
(the user dialog should take place, as well.) 108 336.67 T
(The \336rst handler) 135 322.67 T
(,) 215.19 322.67 T
4 9.5 Q
(decline-handler) 220.69 322.67 T
1 11 Q
(, is not intr) 305.38 322.67 T
(ospective. It always declines) 357.57 322.67 T
(to handle any condition by calling) 108 308.67 T
4 9.5 Q
(next-handler) 276.72 308.67 T
1 11 Q
(. W) 344.3 308.67 T
(ith this handler established,) 360.2 308.67 T
(any integer parse err) 108 294.67 T
(ors will be handled outside of) 208.61 294.67 T
4 9.5 Q
(read-integer) 356.21 294.67 T
1 11 Q
(.) 423.8 294.67 T
4 9 Q
(def) 108 274 T
(ine method decline-handler \050cond :: <condition>, next-handler\051) 124.2 274 T
(next-handler \050\051;) 118.8 263 T
(end;) 108 252 T
3 13 Q
(10.5.2  An interactive introspective handler) 108 222.33 T
1 11 Q
(The handler method de\336ned in this section is selected when the caller of) 108 202.67 T
4 9.5 Q
(read-) 461.51 202.67 T
(integer) 108 188.67 T
1 11 Q
( would like an interactive user to decide how to continue fr) 147.9 188.67 T
(om the pr) 434.97 188.67 T
(ob-) 482.2 188.67 T
(lem. First, the pr) 108 174.67 T
(oblem is r) 187.86 174.67 T
(evealed to the user) 235.64 174.67 T
(, and then a set of options is pr) 326.28 174.67 T
(e-) 475.1 174.67 T
(sented to the user) 108 160.67 T
(. The user then chooses one of the options, and an appr) 193.11 160.67 T
(opriate) 460.21 160.67 T
(action is taken. This handler is similar to part of what a debugger might do,) 108 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 174
%%Page: "173" 175
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(173) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(although ther) 108 640.67 T
(e will be lar) 174 640.67 T
(ge variations in how the original err) 230.5 640.67 T
(or and r) 405.18 640.67 T
(ecovery) 443.8 640.67 T
(options ar) 108 626.67 T
(e pr) 156.87 626.67 T
(esented, and how the r) 175.65 626.67 T
(ecovery option is selected. A typical debug-) 286.19 626.67 T
(ger will usually pr) 108 612.67 T
(ovide many other options besides simply picking a r) 197.46 612.67 T
(estart or) 452.24 612.67 T
(r) 108 598.67 T
(eturning.) 112.15 598.67 T
-0.19 (First, we de\336ne a helper method that \336nds all available r) 135 584.67 P
-0.19 (estarts that match a) 407.51 584.67 P
(given set of sear) 108 570.67 T
(ch criteria. This method uses our own internal pr) 186.22 570.67 T
(otocol for selec-) 423.76 570.67 T
(tion based on the desirability of an interactive handler) 108 556.67 T
(, and also uses a general) 370.24 556.67 T
-0.27 (purpose pr) 108 542.67 P
-0.27 (otocol for \336ltering on type. This method is at the heart of our intr) 161.38 542.67 P
-0.27 (ospec-) 472.9 542.67 P
(tive r) 108 528.67 T
(ecovery pr) 133.17 528.67 T
(otocol, as it allows the handler to determine which inter) 184.78 528.67 T
(esting) 455.8 528.67 T
(r) 108 514.67 T
(estarts ar) 112.15 514.67 T
(e available.) 156.16 514.67 T
4 9 Q
(def) 108 494 T
(ine method collect-available-restarts \050original-error :: <integer-parse-) 124.2 494 T
(error>,) 108 483 T
(#key interactive = #t, type =) 334.8 472 T
(<restart>\051) 108 461 T
(let restarts = #\050\051) 118.8 450 T
(local) 118.8 439 T
(method maybe-collect-restart \050type, test, function, initargs\051) 129.6 428 T
6 F
(// Make an instance of the restart, so we can see if it matches our) 140.4 417 T
(// search criteria.) 140.4 406 T
4 F
(let instance = if \050initargs\051) 140.4 395 T
(apply \050make, type, condition: original-error,) 243 384 T
(initargs\051) 108 373 T
(else) 232.2 362 T
(make\050type, condition: original-error\051;) 243 351 T
(end;) 221.4 340 T
(let i-interactive = interactive? \050instance\051;) 140.4 329 T
6 F
(// If the condition passes the test specif) 140.4 318 T
(ied when the restart was) 367.2 318 T
(// established, and the desire for an interactive handler matches) 140.4 307 T
(// the interactivity of the restart, and the desired type matches) 140.4 296 T
(// the restart\325s type, then collect the restart instance.) 140.4 285 T
4 F
(if \050test \050instance\051 & if \050interactive\051 i-interactive else ~ i-) 140.4 274 T
(interactive end) 108 263 T
(& instance? \050instance, type\051\051) 162 252 T
(restarts := pair \050instance, restarts\051;) 162 241 T
(end;) 140.4 230 T
(end;) 129.6 219 T
6 F
(// The Dylan provided function do-handlers will call maybe-collect-restart) 118.8 208 T
(// for every handler which is currently established, in order \050f) 118.8 197 T
(irst is) 464.4 197 T
(closest) 108 186 T
(// to the signaller\051.) 118.8 175 T
4 F
(do-handlers \050maybe-collect-restart\051;) 118.8 164 T
6 F
(// Here we reverse the elements of the list of restart instances, since) 118.8 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 175
%%Page: "174" 176
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(174) 72 677.67 T
0 9.5 Q
(10.5 Defining an error handler with recovery) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
6 9 Q
0 X
(// collecting them the way we did will reverse the order, and the order) 118.8 642 T
(// is signif) 118.8 631 T
(icant.) 183.6 631 T
4 F
(reverse! \050restarts\051;) 118.8 620 T
(end;) 108 609 T
1 11 Q
-0.16 (The following) 108 588.67 P
4 9.5 Q
-0.32 (interactive-handler) 178.57 588.67 P
1 11 Q
-0.16 ( method explains the curr) 286.87 588.67 P
-0.16 (ent situation to the) 410.74 588.67 P
(user) 108 574.67 T
(, and allows the user to pick the desir) 128.1 574.67 T
(ed r) 309.05 574.67 T
(ecovery option.) 327.93 574.67 T
4 9 Q
(def) 108 554 T
(ine method interactive-handler \050cond :: <integer-parse-error>, next-) 124.2 554 T
(handler,) 108 543 T
(where\051) 297 532 T
(format \050where, "The Following error has occurred:\134n"\051;) 118.8 521 T
(report \050cond, where\051;) 118.8 510 T
(format \050where, "How would you like to proceed?\134n\134n"\051;) 118.8 499 T
(let restarts = collect-available-restarts \050cond, interactive: t\051;) 118.8 488 T
6 F
(// The return-number variable will either contain the integer for) 118.8 477 T
(// the return option, or #f if the condition does not support it.) 118.8 466 T
4 F
-0.16 (let return-number = if \050return-allowed? \050cond\051\051 size \050restarts\051 + 1 else #f) 118.8 455 P
(end;) 226.8 444 T
(for \050restart in restarts,) 118.8 433 T
(restart-number from 1\051) 145.8 422 T
(format \050where, "%d) 129.6 411 T
(", restart-number\051;) 248.4 411 T
(report \050restart, where\051;) 129.6 400 T
(format \050where, "\134n"\051;) 129.6 389 T
(end;) 118.8 378 T
(if \050return-number\051) 118.8 367 T
(format \050where, "%d) 129.6 356 T
(", return-number\051) 248.4 356 T
6 F
-0.18 (// Since return descriptions may be strings, restarts, or false, dispatch) 129.6 345 P
(// to f) 129.6 334 T
(ind the best way to describe the return description.) 167.4 334 T
4 F
(show-return-description \050return-description \050cond\051, where\051;) 129.6 323 T
(format \050where, "\134n"\051;) 129.6 312 T
(end;) 118.8 301 T
(block \050return\051) 118.8 290 T
(while \050#t\051) 129.6 279 T
(let response = read-integer \050where, error-action: zero:,) 140.4 268 T
(prompt: "Enter an option number: "\051;) 297 257 T
(case) 140.4 246 T
6 F
(// If the user has picked a restart, signal it.) 151.2 235 T
4 F
(response > 0 & response < size \050restart\051 =>) 151.2 224 T
(signal \050restarts [response]\051;) 162 213 T
6 F
(// If the user is permitted to return and has chosen to do so, then) 151.2 202 T
(// return from the handler.) 151.2 191 T
4 F
(return-number & response = return-number =>) 151.2 180 T
(return \050#t\051;) 162 169 T
6 F
(// Otherwise, the user has picked an option that was not offered.) 151.2 158 T
(// Try to get a valid one again.) 151.2 147 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 176
%%Page: "175" 177
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(175) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(otherwise format \050where, "Invalid option number.\134n"\051;) 151.2 642 T
(end;) 140.4 631 T
(end;) 129.6 620 T
(end;) 118.8 609 T
(end;) 108 598 T
1 11 Q
-0.14 (The) 108 577.67 P
4 9.5 Q
-0.29 (interactive-handler) 129.02 577.67 P
1 11 Q
-0.14 ( method uses) 237.32 577.67 P
4 9.5 Q
-0.29 (collect-available-restarts) 304.08 577.67 P
1 11 Q
-0.14 ( to \336nd all) 452.28 577.67 P
(the r) 108 563.67 T
(estarts that ar) 130.15 563.67 T
(e meant to be called fr) 195.99 563.67 T
(om the interactive handler) 303.01 563.67 T
(. Each interac-) 430.72 563.67 T
(tive r) 108 549.67 T
(estart is displayed to the user) 133.17 549.67 T
(, along with an option number so the user can) 274.68 549.67 T
(concisely r) 108 535.67 T
(efer to a speci\336c r) 159.52 535.67 T
(estart. By using option numbers, we minimize) 244.48 535.67 T
(assumptions about available user interface toolkits. Mor) 108 521.67 T
(e advanced user inter-) 380.33 521.67 T
(faces might, for example, take advantage of menus, and thus eliminate the need) 108 507.67 T
-0.17 (for option numbers. The case of r) 108 493.67 P
-0.17 (eturning fr) 267.7 493.67 P
-0.17 (om the handler is handled separately) 320.04 493.67 P
-0.17 (,) 498.67 493.67 P
(as that is how the Dylan r) 108 479.67 T
(ecovery framework is designed. Once the user selects a) 232.32 479.67 T
(valid r) 108 465.67 T
(ecovery option, the appr) 139.74 465.67 T
(opriate r) 258.78 465.67 T
(estart is invoked, or the handler r) 300.19 465.67 T
(eturns.) 461.78 465.67 T
(Next, we de\336ne the thr) 135 451.67 T
(ee ways to describe r) 246.57 451.67 T
(eturn descriptions.) 347.74 451.67 T
4 9 Q
(def) 108 431 T
(ine method show-return-description \050string :: <string>, where\051) 124.2 431 T
(format \050where, "%s", string\051;) 118.8 420 T
(end;) 108 409 T
(def) 108 390 T
(ine method show-return-description \050restart :: <restart>, where\051) 124.2 390 T
(report \050restart, where\051;) 118.8 379 T
(end;) 108 368 T
(def) 108 349 T
(ine method show-return-description \050false == #f, where\051) 124.2 349 T
(format \050where, "Return."\051;) 118.8 338 T
(end;) 108 327 T
1 11 Q
(The) 108 306.67 T
4 9.5 Q
(return-handler) 129.16 306.67 T
1 11 Q
( handler below always r) 208.96 306.67 T
(eturns to the signaler) 325.84 306.67 T
(, when that is) 427.72 306.67 T
(allowed.) 108 292.67 T
4 9 Q
(def) 108 272 T
(ine method return-handler \050cond :: <integer-parse-error>, next-handler\051) 124.2 272 T
(if \050return-allowed? \050cond\051\051 #t else next-handler \050\051 end;) 118.8 261 T
(end;) 108 250 T
3 13 Q
(10.5.3  An automatic introspective handler) 108 220.33 T
1 11 Q
-0.36 (It is possible to have an intr) 108 200.67 P
-0.36 (ospective handler that does not dir) 239.43 200.67 P
-0.36 (ectly interact with a) 406.74 200.67 P
(user) 108 186.67 T
(. The following de\336nition for) 128.1 186.67 T
4 9.5 Q
(zero-handler) 271.44 186.67 T
1 11 Q
( sear) 339.84 186.67 T
(ches for any r) 362.17 186.67 T
(estarts that ar) 427.82 186.67 T
(e) 493.65 186.67 T
(r) 108 172.67 T
(elated to r) 112.15 172.67 T
(eturning zer) 160.93 172.67 T
(o. If ther) 220.55 172.67 T
(e ar) 261.58 172.67 T
(e any) 279.25 172.67 T
(, then the \336rst r) 304.06 172.67 T
(estart is picked. If ther) 378.13 172.67 T
(e) 486.27 172.67 T
(ar) 108 158.67 T
(e no such r) 117.65 158.67 T
(estarts available,) 170.3 158.67 T
4 9.5 Q
(zero-handler) 253.84 158.67 T
1 11 Q
( declines to handle the condition.) 322.24 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "175" 177
%%Page: "176" 178
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(176) 72 677.67 T
0 9.5 Q
(10.6 Protected operations and the block construct) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method zero-handler \050cond :: <integer-parse-error>, next-handler\051) 124.2 642 T
(let restarts = collect-available-restarts \050cond, type: <zero-return>\051) 118.8 631 T
(if \050zero? \050size \050restarts\051\051\051) 118.8 620 T
(next-handler \050\051;) 140.4 609 T
(else) 129.6 598 T
(signal \050f) 140.4 587 T
(irst \050restarts\051\051;) 189 587 T
(end;) 118.8 576 T
(end;) 108 565 T
3 15 Q
(10.6  Protected operations and the) 108 527 T
4 F
(block) 312.39 527 T
3 F
( construct) 357.39 527 T
1 11 Q
(In this section, we describe how to use) 108 506.67 T
4 9.5 Q
(block) 297.34 506.67 T
1 11 Q
( to pr) 325.84 506.67 T
(otect sections of Dylan code) 351.69 506.67 T
(fr) 108 492.67 T
(om unexpected non-local exits. Dylan pr) 115.81 492.67 T
(ovides powerful ways to execute non-) 312.5 492.67 T
(local exits fr) 108 478.67 T
(om a given execution context. An application may signal a condition) 166.5 478.67 T
(that might cause a handler to execute a non-local exit, or an application may call) 108 464.67 T
(an exit pr) 108 450.67 T
(ocedur) 153.89 450.67 T
(e named by the \336rst ar) 187.55 450.67 T
(gument to) 296.53 450.67 T
4 9.5 Q
(block) 349.34 450.67 T
1 11 Q
(. Sometimes it is conve-) 377.84 450.67 T
(nient to add some additional behavior to the non-local exit, to keep the applica-) 108 436.67 T
(tion\325s execution envir) 108 422.67 T
(onment in good shape. W) 212.58 422.67 T
(e would like to add this behavior) 336.59 422.67 T
(in certain cases, especially when we ar) 108 408.67 T
(e not sur) 294.27 408.67 T
(e that, for example, our err) 336.48 408.67 T
(or han-) 466.07 408.67 T
(dler might be selected during the pr) 108 394.67 T
(ocessing of an exception, and yet we must) 282.7 394.67 T
(perform some action during the non-local exit called for by the exception.) 108 380.67 T
3 13 Q
(10.6.1  Reading \337ight schedules) 108 349.33 T
1 11 Q
(The purpose of the following) 108 329.67 T
4 9.5 Q
(read-f) 252.2 329.67 T
(light-schedule) 286.4 329.67 T
1 11 Q
( method is to r) 366.2 329.67 T
(ead \337ight) 436.5 329.67 T
(information fr) 108 315.67 T
(om some sour) 176.59 315.67 T
(ce, verify that the \337ight information is corr) 244.91 315.67 T
(ect, and if) 451.46 315.67 T
-0.23 (it is, then r) 108 301.67 P
-0.23 (eturn a sequence of \337ight instances to its caller) 158.76 301.67 P
-0.23 (. If the \337ight information) 382.03 301.67 P
(has an err) 108 287.67 T
(or in it, then) 155.73 287.67 T
4 9.5 Q
(read-f) 217.88 287.67 T
(light-schedule) 252.08 287.67 T
1 11 Q
( should call the err) 331.88 287.67 T
(or function) 422.31 287.67 T
-0.44 (passed in via the) 108 273.67 P
4 9.5 Q
-0.91 (error-function) 190.45 273.67 P
1 11 Q
-0.44 ( parameter) 270.25 273.67 P
-0.44 (. The) 321.89 273.67 P
4 9.5 Q
-0.91 (read-f) 347.68 273.67 P
-0.91 (light-schedule) 381.88 273.67 P
1 11 Q
-0.44 ( method) 461.68 273.67 P
(must obtain the sour) 108 259.67 T
(ce of the of the \337ight information by calling) 208.33 259.67 T
4 9.5 Q
(open-f) 421.81 259.67 T
(light-) 456.01 259.67 T
(schedule-information-source) 108 245.67 T
1 11 Q
(, and must call) 261.9 245.67 T
4 9.5 Q
(close-f) 335.65 245.67 T
(light-schedule-infor-) 375.55 245.67 T
(mation-source) 108 231.67 T
1 11 Q
(when it is \336nished. If) 187.8 231.67 T
4 9.5 Q
(close-f) 292.88 231.67 T
(light-schedule-information-) 332.78 231.67 T
(source) 108 217.67 T
1 11 Q
(is not called befor) 147.9 217.67 T
(e) 233.95 217.67 T
4 9.5 Q
(read-f) 241.97 217.67 T
(light-schedule) 276.17 217.67 T
1 11 Q
( r) 355.97 217.67 T
(eturns, then the application) 362.87 217.67 T
(will be left in an inconsistent state, which might cause pr) 108 203.67 T
(oblems later in the pr) 383.26 203.67 T
(o-) 486.72 203.67 T
(gram\325s execution. The) 108 189.67 T
4 9.5 Q
(read-f) 217.74 189.67 T
(light) 251.94 189.67 T
1 11 Q
( method will use) 280.44 189.67 T
4 9.5 Q
(read-string) 364.48 189.67 T
1 11 Q
(, and) 427.18 189.67 T
4 9.5 Q
(read-) 454.05 189.67 T
-0.52 (integer) 108 175.67 P
1 11 Q
-0.25 ( to parse the characters fr) 147.9 175.67 P
-0.25 (om the schedule information sour) 268.83 175.67 P
-0.25 (ce into a list of) 432.33 175.67 P
-0.34 (init keywor) 108 161.67 P
-0.34 (ds and values for the particular \337ight instance to be cr) 163.62 161.67 P
-0.34 (eated. W) 422.12 161.67 P
-0.34 (e de\336ne) 463.61 161.67 P
4 9.5 Q
(read-f) 108 147.67 T
(light) 142.2 147.67 T
1 11 Q
( to signal the) 170.7 147.67 T
4 9.5 Q
(<end-of-data>) 235.63 147.67 T
1 11 Q
( exception when ther) 309.73 147.67 T
(e is no mor) 411.54 147.67 T
(e infor-) 465.2 147.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "176" 178
%%Page: "177" 179
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(177) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(mation left to r) 108 640.67 T
(ead. The) 180.12 640.67 T
4 9.5 Q
(verify-f) 224.27 640.67 T
(light) 269.87 640.67 T
1 11 Q
( method r) 298.37 640.67 T
(eturns tr) 345.71 640.67 T
(ue if the \337ight contains) 387.21 640.67 T
(sensible information otherwise it r) 108 626.67 T
(eturns whatever calling the) 274.63 626.67 T
4 9.5 Q
(error-function) 410.05 626.67 T
1 11 Q
(parameter on the \337ight pr) 108 612.67 T
(oduces. W) 233.55 612.67 T
(e will only r) 283.22 612.67 T
(eveal the de\336nition of the) 341.39 612.67 T
4 9.5 Q
(read-) 468.22 612.67 T
(f) 108 598.67 T
(light-schedule) 113.7 598.67 T
1 11 Q
( method her) 193.5 598.67 T
(e, as it is the only one r) 252.51 598.67 T
(elevant to pr) 363.41 598.67 T
(otecting code) 424.7 598.67 T
(fr) 108 584.67 T
(om non-local exits.) 115.81 584.67 T
4 9 Q
(def) 108 564 T
(ine method read-f) 124.2 564 T
(light-schedule \050error-function\051) 216 564 T
(let where = open-f) 118.8 553 T
(light-schedule-information-source \050\051;) 216 553 T
(let f) 118.8 542 T
(lights = #\050\051;) 145.8 542 T
(block \050return\051) 118.8 531 T
(while \050#t\051) 129.6 520 T
(let f) 140.4 509 T
(light = apply \050make, <f) 167.4 509 T
(light>, read-f) 291.6 509 T
(light \050where\051\051;) 367.2 509 T
(if \050verify-f) 140.4 498 T
(light \050f) 205.2 498 T
(light, error-function\051\051) 248.4 498 T
(f) 162 487 T
(lights := pair \050f) 167.4 487 T
(light, f) 259.2 487 T
(lights\051;) 302.4 487 T
(end;) 140.4 476 T
(end;) 129.6 465 T
(exception \050<end-of-data>\051) 118.8 454 T
(close-f) 129.6 443 T
(light-schedule-information-source \050where\051;) 167.4 443 T
(return \050f) 129.6 432 T
(lights\051;) 178.2 432 T
(end;) 118.8 421 T
(end;) 108 410 T
1 11 Q
(On the surface, this looks like a r) 108 389.67 T
(easonable de\336nition. However) 266.54 389.67 T
(, ther) 414.75 389.67 T
(e ar) 439.65 389.67 T
(e some) 457.32 389.67 T
(pr) 108 375.67 T
(oblems lurking. First, what happens if) 118.76 375.67 T
4 9.5 Q
(read-f) 306.61 375.67 T
(light) 340.8 375.67 T
1 11 Q
( encounters a parsing err) 369.3 375.67 T
(or) 489.86 375.67 T
(during its execution? Ther) 108 361.67 T
(e might be a handler established by the caller of) 235.49 361.67 T
4 9.5 Q
(read-) 470.05 361.67 T
(f) 108 347.67 T
(light-schedule) 113.7 347.67 T
1 11 Q
( that might perform some non-local exit. Second, the pr) 193.5 347.67 T
(ovided) 461.52 347.67 T
4 9.5 Q
(error-function) 108 333.67 T
1 11 Q
( could perform a non-local exit as well. How do we ensur) 187.8 333.67 T
(e that) 466.32 333.67 T
(the) 108 319.67 T
4 9.5 Q
(close-f) 126.01 319.67 T
(light-schedule-information-source) 165.91 319.67 T
1 11 Q
( method is pr) 354.01 319.67 T
(operly executed) 418.58 319.67 T
(prior to exiting fr) 108 305.67 T
(om) 191.61 305.67 T
4 9.5 Q
(read-f) 210.08 305.67 T
(light-schedule) 244.28 305.67 T
1 11 Q
(, even in the face of these pr) 324.08 305.67 T
(oblems?) 459.03 305.67 T
(The) 108 291.67 T
4 9.5 Q
(block) 129.16 291.67 T
1 11 Q
( constr) 157.66 291.67 T
(uct pr) 190.21 291.67 T
(ovides a) 218.82 291.67 T
4 9.5 Q
(cleanup) 261.9 291.67 T
1 11 Q
( clause for just such situations.) 301.8 291.67 T
3 13 Q
(10.6.2  The) 108 260.33 T
4 F
(cleanup) 165.49 260.33 T
3 F
( clause of) 220.09 260.33 T
4 F
(block) 272.23 260.33 T
1 11 Q
(Below we use the) 108 240.67 T
4 9.5 Q
(cleanup) 195.64 240.67 T
1 11 Q
( clause of) 235.54 240.67 T
4 9.5 Q
(block) 283.61 240.67 T
1 11 Q
( to ensur) 312.11 240.67 T
(e that the \337ight schedule infor-) 354.31 240.67 T
(mation sour) 108 226.67 T
(ce is pr) 166.61 226.67 T
(operly closed befor) 200.88 226.67 T
(e) 293.85 226.67 T
4 9.5 Q
(read-f) 301.86 226.67 T
(light-schedule) 336.06 226.67 T
1 11 Q
( r) 415.86 226.67 T
(eturns.) 422.76 226.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "177" 179
%%Page: "178" 180
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(178) 72 677.67 T
0 9.5 Q
(10.7 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method read-f) 124.2 642 T
(light-schedule \050error-function\051) 216 642 T
(let where = open-f) 118.8 631 T
(light-schedule-information-source \050\051;) 216 631 T
(let f) 118.8 620 T
(lights = #\050\051;) 145.8 620 T
(block \050return\051) 118.8 609 T
(while \050#t\051) 129.6 598 T
(let f) 140.4 587 T
(light = apply \050make, <f) 167.4 587 T
(light>, read-f) 291.6 587 T
(light \050where\051\051;) 367.2 587 T
(if \050verify-f) 140.4 576 T
(light \050f) 205.2 576 T
(light, error-function\051\051) 248.4 576 T
(f) 162 565 T
(lights := pair \050f) 167.4 565 T
(light, f) 259.2 565 T
(lights\051;) 302.4 565 T
(end;) 129.6 554 T
(cleanup) 118.8 543 T
(close-f) 129.6 532 T
(light-schedule-information-source \050where\051;) 167.4 532 T
(exception \050<end-of-data>\051) 118.8 521 T
(return \050f) 129.6 510 T
(lights\051;) 178.2 510 T
(end;) 118.8 499 T
(end;) 108 488 T
1 11 Q
(The) 108 467.67 T
4 9.5 Q
(cleanup) 129.16 467.67 T
1 11 Q
( clause in the) 169.06 467.67 T
4 9.5 Q
(block) 235.07 467.67 T
1 11 Q
( will ensur) 263.58 467.67 T
(e that) 314.97 467.67 T
4 9.5 Q
( close-f) 342.06 467.67 T
(light-schedule-) 387.66 467.67 T
(information-source) 108 453.67 T
1 11 Q
( will be called befor) 210.6 453.67 T
(e the) 305.67 453.67 T
4 9.5 Q
(block) 331.7 453.67 T
1 11 Q
( is exited for any r) 360.2 453.67 T
(eason. The) 447.71 453.67 T
(call to) 108 439.67 T
4 9.5 Q
(close-f) 139.88 439.67 T
(light-schedule-information-source) 179.78 439.67 T
1 11 Q
( is pr) 367.88 439.67 T
(otected against any) 392 439.67 T
(non-local exits within the block. Note that this is mor) 108 425.67 T
(e powerful than simply) 365.33 425.67 T
(establishing a handler for) 108 411.67 T
4 9.5 Q
(<condition>) 234.64 411.67 T
1 11 Q
(.) 297.34 411.67 T
3 15 Q
(10.7  Summary) 108 372 T
1 11 Q
(In this chapter) 108 351.67 T
(, we cover) 177.24 351.67 T
(ed the following:) 226.46 351.67 T
(\245) 117 331.67 T
(W) 135 331.67 T
(e described how to de\336ne condition classes and signal them in various) 144.99 331.67 T
(ways.) 135 317.67 T
(\245) 117 297.67 T
(W) 135 297.67 T
(e explor) 144.99 297.67 T
(ed establishing simple err) 183.92 297.67 T
(or handlers using the) 308.87 297.67 T
4 9.5 Q
(exception) 414.99 297.67 T
1 11 Q
( clause) 466.29 297.67 T
(of) 135 283.67 T
4 9.5 Q
(block) 147.42 283.67 T
1 11 Q
(.) 175.92 283.67 T
(\245) 117 263.67 T
(W) 135 263.67 T
(e showed how to design and implement an entir) 144.99 263.67 T
(e intr) 380.14 263.67 T
(ospective r) 405.49 263.67 T
(ecovery) 458.09 263.67 T
(pr) 135 249.67 T
(otocol using) 145.76 249.67 T
4 9.5 Q
(let handler) 207.96 249.67 T
1 11 Q
( and r) 270.66 249.67 T
(estarts.) 298.93 249.67 T
(\245) 117 229.67 T
(Finally) 135 229.67 T
(, we showed how to pr) 167.52 229.67 T
(otect sections of code fr) 278.63 229.67 T
(om unexpected non-) 391.99 229.67 T
(local exits using the) 135 215.67 T
4 9.5 Q
(cleanup) 233.46 215.67 T
1 11 Q
( clause pr) 273.36 215.67 T
(ovided by) 319.77 215.67 T
4 9.5 Q
(block) 371.6 215.67 T
1 11 Q
(.) 400.1 215.67 T
(Y) 108 195.67 T
(ou can use these techniques to contr) 114.32 195.67 T
(ol the handling of exceptional situations) 289.09 195.67 T
-0.48 (when they arise. By car) 108 181.67 P
-0.48 (efully designing your condition classes and handling those) 218.8 181.67 P
-0.01 (conditions corr) 108 167.67 P
-0.01 (ectly) 181.2 167.67 P
-0.01 (, you can make your pr) 203.03 167.67 P
-0.01 (ogram signi\336cantly mor) 315.48 167.67 P
-0.01 (e bullet-pr) 432.43 167.67 P
-0.01 (oof,) 482.83 167.67 P
(while not interr) 108 153.67 T
(upting the normal \337ow of contr) 183.8 153.67 T
(ol. By pr) 337.09 153.67 T
(oviding r) 378.14 153.67 T
(ecovery pr) 422.9 153.67 T
(oto-) 474.51 153.67 T
(cols, you make it possible to cleanly continue after a pr) 108 139.67 T
(oblem has been detected.) 374.01 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "178" 180
%%Page: "179" 181
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(10 Exceptions) 460.26 677.67 T
2 11 Q
(179) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(By pr) 108 640.67 T
(otecting critical code against unexpected non-local exits, you enhance the) 134.35 640.67 T
(r) 108 626.67 T
(eliability of your application, and thus incr) 112.15 626.67 T
(ease the satisfaction r) 319.97 626.67 T
(ealized by your) 423.18 626.67 T
(users.) 108 612.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "179" 181
%%Page: "180" 182
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(180) 72 677.67 T
0 9.5 Q
(10.7 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "180" 182
%%Page: "181" 183
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(181) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(1) 180 628 T
(1) 193.35 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(1) 108 566.45 T
(1) 108.89 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Libraries and Modules) 109.89 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(As you cr) 108 424.67 T
(eate a pr) 154.51 424.67 T
(ogram, you will often discover subsets of your code that ar) 195.89 424.67 T
(e) 481.52 424.67 T
-0.25 (candidates for sharing or r) 108 410.67 P
-0.25 (euse. Alternatively) 235.59 410.67 P
-0.25 (, you may be working on a lar) 325.9 410.67 P
-0.25 (ge pr) 469.69 410.67 P
-0.25 (o-) 494.33 410.67 P
-0.23 (gram that has been divided into pieces that can be implemented separately) 108 396.67 P
-0.23 (, either) 468.15 396.67 P
(to allow parallel development, or to make the pr) 108 382.67 T
(ogramming task mor) 343.07 382.67 T
(e manage-) 445.41 382.67 T
(able. For either of these r) 108 368.67 T
(easons, you can package your code into a) 228.1 368.67 T
2 F
(reusable soft-) 431.57 368.67 T
(ware component) 108 354.67 T
1 F
( so that:) 191.41 354.67 T
(\245) 117 334.67 T
(Y) 135 334.67 T
(ou can develop your component independently fr) 141.32 334.67 T
(om any clients.) 383.5 334.67 T
(\245) 117 314.67 T
(Other pr) 135 314.67 T
(ogrammers can easily add your component to their pr) 176.76 314.67 T
(ograms) 439.24 314.67 T
(\050which ar) 135 300.67 T
(e called client pr) 181.12 300.67 T
(ograms of your component\051.) 260.72 300.67 T
(\245) 117 280.67 T
(Clients can use your code without knowing or depending on the internal) 135 280.67 T
(implementation of your component.) 135 266.67 T
-0.41 (T) 108 246.67 P
-0.41 (wo important principles of softwar) 113.75 246.67 P
-0.41 (e engineering apply her) 282.03 246.67 P
-0.41 (e: information hiding,) 396.15 246.67 P
(and pr) 108 232.67 T
(otocols. The principle of information hiding says that you should try to) 140.13 232.67 T
(minimize the information that is passed between components in a system, thus) 108 218.67 T
(minimizing the inter) 108 204.67 T
(-dependencies of components. A) 208.01 204.67 T
2 F
(protocol) 369.88 204.67 T
1 F
( is the interface) 411.43 204.67 T
(de\336nition of a softwar) 108 190.67 T
(e component. The purpose of establishing pr) 215.6 190.67 T
(otocols is to) 432.27 190.67 T
(de\336ne a uniform interface between components that clients can use, even if the) 108 176.67 T
(implementation of any component is enhanced or modi\336ed. Dylan supports the) 108 162.67 T
-0.05 (concept of softwar) 108 148.67 P
-0.05 (e components and pr) 197.44 148.67 P
-0.05 (otocols in terms of) 299.72 148.67 P
2 F
-0.05 (libraries) 391.7 148.67 P
1 F
-0.05 ( and) 433.85 148.67 P
2 F
-0.05 (modules) 457.87 148.67 P
1 F
-0.05 (.) 501.25 148.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "181" 183
%%Page: "182" 184
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(182) 72 677.67 T
0 9.5 Q
(11.1 Libraries) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(In this chapter) 135 640.67 T
(, we consider the time classes and methods we have de\336ned) 204.24 640.67 T
(and show how they might be packaged into a r) 108 626.67 T
(eusable softwar) 336.5 626.67 T
(e component. W) 412.61 626.67 T
(e) 491 626.67 T
(also show how the sixty-unit classes and methods could be a component sub-) 108 612.67 T
(strate that the time library uses and shar) 108 598.67 T
(es with an angle library) 303.66 598.67 T
(. Finally) 416.91 598.67 T
(, we illus-) 454.93 598.67 T
-0.03 (trate how important it is to design good pr) 108 584.67 P
-0.03 (otocols, by showing that to implement) 314.79 584.67 P
(a say pr) 108 570.67 T
(otocol that works with either or both of the time and angle libraries, we) 146.04 570.67 T
(need to cr) 108 556.67 T
(eate a separate library de\336ning the shar) 155.78 556.67 T
(ed pr) 347.68 556.67 T
(otocol.) 373.18 556.67 T
3 15 Q
(1) 108 517 T
(1.1  Libraries) 114.17 517 T
1 11 Q
(Each softwar) 108 496.67 T
(e component is a library) 171 496.67 T
(. In each Dylan implementation, a library is) 287.08 496.67 T
(associated with implementation-speci\336c export information. The library export) 108 482.67 T
(information completely describes whatever implementation-speci\336c information) 108 468.67 T
(is needed for other softwar) 108 454.67 T
(e components to use the library) 238.88 454.67 T
(. Thus, you can use) 390.42 454.67 T
-0.06 (libraries to deliver components in compiled form, keeping the implementation of) 108 440.67 P
(the library con\336dential.) 108 426.67 T
3 15 Q
(1) 108 252 T
(1.2  Modules) 114.17 252 T
1 11 Q
(A library speci\336es its interface in terms of the modules it exports. Additional) 108 231.67 T
(modules make up the implementation of each library) 108 217.67 T
(. Each module speci\336es an) 365.51 217.67 T
(independent) 108 203.67 T
2 F
(namespace) 172.6 203.67 T
1 F
( \050or dictionary\051 for Dylan variables and contr) 227.59 203.67 T
(ols the visi-) 445.85 203.67 T
(bility of the names within a module fr) 108 189.67 T
(om outside the module. Y) 291.93 189.67 T
(ou can use mod-) 416.61 189.67 T
(ules both for information hiding and to pr) 108 175.67 T
(event name clashes between modules.) 312.15 175.67 T
(For instance,) 108 161.67 T
0 F
([--- need example of name overloading]) 172.62 161.67 T
1 F
(.) 344.64 161.67 T
2 F
(Comparison with C++:) 141 392.67 T
1 F
( Dylan libraries ar) 255.46 392.67 T
(e similar to C++ libraries in) 342.89 392.67 T
(that they both ar) 141 378.67 T
(e potentially shar) 221.42 378.67 T
(ed components of many pr) 305.58 378.67 T
(ograms.) 436.27 378.67 T
(Unlike C++ libraries, Dylan libraries include all the information) 141 364.67 T
(needed to be used by another Dylan library \321 ther) 141 350.67 T
(e is no companion) 388.27 350.67 T
-0.1 (header \336le that must be kept up to date. A Dylan library may also be a) 141 336.67 P
(complete pr) 141 322.67 T
(ogram, which simply means it has a distinguished entry) 199.05 322.67 T
(point and is used only by the executive or command pr) 141 308.67 T
(ocessor) 409.31 308.67 T
(.) 444.34 308.67 T
135 405.88 135 301.13 2 L
V
0.25 H
0 Z
N
486 405.88 486 301.13 2 L
V
N
134.88 406 486.12 406 2 L
V
N
134.88 301 486.12 301 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "182" 184
%%Page: "183" 185
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(183) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(1) 108 452 T
(1.3  Module declaration) 114.17 452 T
1 11 Q
(First, let\325s examine what the interface pr) 108 431.67 T
(otocol of our time library might be. W) 302.77 431.67 T
(e) 486.03 431.67 T
(have de\336ned two kinds of time that can be cr) 108 417.67 T
(eated:) 326.72 417.67 T
4 9.5 Q
(<time-of-day>) 358.57 417.67 T
1 11 Q
( and) 432.67 417.67 T
4 9.5 Q
(<time-) 456.79 417.67 T
-0.26 (offset>) 108 403.67 P
1 11 Q
-0.12 (. W) 147.9 403.67 P
-0.12 (e have two generic functions for manipulating those times,) 163.26 403.67 P
4 9.5 Q
-0.26 (say) 450.42 403.67 P
1 11 Q
-0.12 (, and) 466.3 403.67 P
4 9.5 Q
-0.26 (+) 492.92 403.67 P
1 11 Q
-0.12 (;) 498.62 403.67 P
(and one, per) 108 389.67 T
(haps not so obvious, utility function for cr) 168.58 389.67 T
(eating new times,) 372.57 389.67 T
4 9.5 Q
(encode-) 460.92 389.67 T
(total-seconds) 108 375.67 T
1 11 Q
(. These \336ve items de\336ne the external pr) 182.1 375.67 T
(otocol of the time library) 372.6 375.67 T
(.) 491.55 375.67 T
(Note that the) 108 361.67 T
4 9.5 Q
(<time>) 174.58 361.67 T
1 11 Q
( class is used only internally as a specializer for one of the) 208.78 361.67 T
4 9.5 Q
(say) 108 347.67 T
1 11 Q
( methods, so it is not part of the library pr) 125.1 347.67 T
(otocol. Similarly) 327.54 347.67 T
(, the) 405.77 347.67 T
4 9.5 Q
(<sixty-unit>) 429.27 347.67 T
1 11 Q
(class and several other functions ar) 108 333.67 T
(e not part of the library pr) 278.45 333.67 T
(otocol, but ar) 404.73 333.67 T
(e used) 468.61 333.67 T
(internally in the library) 108 319.67 T
(.) 219.9 319.67 T
3 13 Q
(1) 108 288.33 T
(1.3.1  Roles of modules) 113.34 288.33 T
1 11 Q
(In our experience, we have found it useful to consider modules as having thr) 108 268.67 T
(ee) 481.32 268.67 T
(distinct r) 108 254.67 T
(oles: interface, implementor) 151.14 254.67 T
(, or client. These r) 285.9 254.67 T
(oles lead to a simple, low-) 371.79 254.67 T
(maintenance, str) 108 240.67 T
(uctur) 188.13 240.67 T
(e. An) 214.02 240.67 T
2 F
(interface module) 242.5 240.67 T
1 F
( cr) 327.74 240.67 T
(eates names that ar) 339.52 240.67 T
(e to be visible) 432.32 240.67 T
(at a library interface. An) 108 226.67 T
2 F
(implementation module) 228.96 226.67 T
1 F
( uses an interface module to) 350.86 226.67 T
(give de\336nitions for some or all of the interface names. A) 108 212.67 T
2 F
(client module) 382.98 212.67 T
1 F
( uses an) 452.32 212.67 T
(interface module to utilize the de\336nitions in the interface. It is possible for a mod-) 108 198.67 T
(ule to play mor) 108 184.67 T
(e than one r) 182.24 184.67 T
(ole \321 for example, a client module may also imple-) 239.47 184.67 T
(ment a higher) 108 170.67 T
(-level interface. W) 175.51 170.67 T
(e r) 262.68 170.67 T
(ecommend thinking of modules as having) 274.85 170.67 T
(these r) 108 156.67 T
(oles, and in this chapter we use our design convention.) 140.09 156.67 T
2 F
(Comparison with C++:) 141 620.67 T
1 F
( Dylan modules ar) 255.46 620.67 T
(e similar to the pr) 345.29 620.67 T
(oposed) 430.99 620.67 T
(C++ namespaces in that they eliminate the pr) 141 606.67 T
(oblem of global) 361.26 606.67 T
(namespace pollution or clashes between names used in individual) 141 592.67 T
-0.44 (libraries. Unlike C++ namespaces, Dylan modules also de\336ne a level of) 141 578.67 P
-0.19 (access contr) 141 564.67 P
-0.19 (ol: each module decides what names ar) 198.45 564.67 P
-0.19 (e externally visible,) 387.92 564.67 P
(and no module can cr) 141 550.67 T
(eate or access names in another module, unless) 246.39 550.67 T
-0.17 (that module explicitly exports those names. In contrast, the C++) 141 536.67 P
4 9.5 Q
-0.36 (using) 452.92 536.67 P
1 11 Q
-0.22 (declaration allows the client of a namespace to access any name in that) 141 522.67 P
(namespace.) 141 508.67 T
135 633.88 135 501.12 2 L
V
0.25 H
0 Z
N
486 633.88 486 501.12 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 501 486.12 501 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "183" 185
%%Page: "184" 186
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(184) 72 677.67 T
0 9.5 Q
(11.3 Module declaration) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(1) 108 639.33 T
(1.3.2  The interface module) 113.34 639.33 T
1 11 Q
(W) 108 619.67 T
(e can now write a \336rst draft of the interface module for our library:) 117.99 619.67 T
6 9 Q
(// Time Library Interface) 108 599 T
4 F
(def) 108 588 T
(ine module time-library) 124.2 588 T
6 F
(// Classes) 118.8 577 T
4 F
(create <time-of-day>, <time-offset>;) 118.8 566 T
6 F
(// Generics) 118.8 555 T
4 F
(create say, \134+, encode-total-seconds;) 118.8 544 T
(end;) 108 533 T
1 11 Q
(In the pr) 108 512.67 T
(eceding de\336nition, the) 149.62 512.67 T
4 9.5 Q
(time-library) 261.19 512.67 T
1 11 Q
( interface module cr) 329.59 512.67 T
(eates and) 426.53 512.67 T
-0.28 (exports \050makes visible\051 two classes and thr) 108 498.67 P
-0.28 (ee functions. W) 313.78 498.67 P
-0.28 (e use the) 387.45 498.67 P
4 9.5 Q
-0.57 (create) 431.95 498.67 P
1 11 Q
-0.28 ( clause,) 466.15 498.67 P
(because we do not intend to de\336ne any implementations in the time library inter-) 108 484.67 T
(face module itself \321 we r) 108 470.67 T
(eserve those for an implementation module, which will) 231.78 470.67 T
(use the time library module as its interface.) 108 456.67 T
3 13 Q
(1) 108 425.33 T
(1.3.3  Special consideration for the + generic function) 113.34 425.33 T
1 11 Q
(W) 108 405.67 T
(e have alr) 117.99 405.67 T
(eady shown that when naming an operator) 164.99 405.67 T
(, such as) 374.16 405.67 T
4 9.5 Q
(+) 417.9 405.67 T
1 11 Q
(, we have to) 423.6 405.67 T
(escape its name,) 108 391.67 T
4 9.5 Q
(\134+) 189.53 391.67 T
1 11 Q
(, to clarify that we ar) 200.93 391.67 T
(e using the name of the operator) 301.1 391.67 T
(, and not) 457.8 391.67 T
(performing the operation. But the) 108 377.67 T
4 9.5 Q
(+) 274.55 377.67 T
1 11 Q
( operator draws our attention to a subtle) 280.25 377.67 T
(point. W) 108 363.67 T
(e do not want to cr) 149.29 363.67 T
(eate a new) 240.32 363.67 T
4 9.5 Q
(+) 294.54 363.67 T
1 11 Q
( operation, we simply want to extend the) 300.24 363.67 T
(built-in Dylan) 108 349.67 T
4 9.5 Q
(+) 179.2 349.67 T
1 11 Q
( operation with a new set of methods that know how to handle) 184.9 349.67 T
-0.23 (the addition of time values. This consideration leads to a second draft of our inter-) 108 335.67 P
(face module:) 108 321.67 T
6 9 Q
(// Time Library Interface) 108 301 T
4 F
(def) 108 290 T
(ine module time-library) 124.2 290 T
6 F
(// Classes) 118.8 279 T
4 F
(create <time-of-day>, <time-offset>;) 118.8 268 T
6 F
(// Generics) 118.8 257 T
4 F
(create say, encode-total-seconds;) 118.8 246 T
6 F
(// Methods) 118.8 235 T
4 F
(use dylan, import: { \134+ }, export: all;) 118.8 224 T
(end;) 108 213 T
1 11 Q
(In the pr) 108 192.67 T
(eceding de\336nition, we state that clients of our time library will see our) 149.62 192.67 T
(time classes and the) 108 178.67 T
4 9.5 Q
(say) 207.49 178.67 T
1 11 Q
( and) 224.6 178.67 T
4 9.5 Q
(encode-total-seconds) 248.72 178.67 T
1 11 Q
( generic functions, and they) 362.72 178.67 T
(will also see the Dylan) 108 164.67 T
4 9.5 Q
(+) 220.09 164.67 T
1 11 Q
( generic function. This is a subtle point because most) 225.79 164.67 T
(Dylan pr) 108 150.67 T
(ograms ar) 151.24 150.67 T
(e alr) 199.98 150.67 T
(eady using the) 220.85 150.67 T
4 9.5 Q
(dylan) 294.98 150.67 T
1 11 Q
( module and hence alr) 323.48 150.67 T
(eady see the) 431.72 150.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "184" 186
%%Page: "185" 187
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(185) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(Dylan) 108 640.67 T
4 9.5 Q
(+) 140.48 640.67 T
1 11 Q
( generic function. In fact, our implementation module will do just that,) 146.18 640.67 T
(and it would take additional module trickery to cr) 108 626.67 T
(eate a dif) 351.68 626.67 T
(fer) 395.69 626.67 T
(ent) 408.77 626.67 T
4 9.5 Q
(+) 426.78 626.67 T
1 11 Q
( generic func-) 432.48 626.67 T
(tion for our time library \050although it can be done, if ther) 108 612.67 T
(e is a need\051.) 378.85 612.67 T
(The important point her) 135 598.67 T
(e is that we ar) 252.24 598.67 T
(e documenting in one place what we) 319.54 598.67 T
(expect the interface to our library to be, and that we in fact do plan to add meth-) 108 584.67 T
(ods to the Dylan) 108 570.67 T
4 9.5 Q
(+) 190.97 570.67 T
1 11 Q
( generic function, and we expect them to be visible as part of) 196.67 570.67 T
(our library interface. \050Note that in our implementation we may actually add) 108 556.67 T
(methods to other Dylan generic functions, such as) 108 542.67 T
4 9.5 Q
(initialize) 353.72 542.67 T
1 11 Q
(, but we do not) 410.72 542.67 T
(expect those to be called dir) 108 528.67 T
(ectly by clients of our library) 242.76 528.67 T
(, and hence do not docu-) 381.2 528.67 T
(ment them in our interface module.\051) 108 514.67 T
3 13 Q
(1) 108 483.33 T
(1.3.4  The implementation module) 113.34 483.33 T
1 11 Q
(Our) 108 463.67 T
4 9.5 Q
(time-library) 130.37 463.67 T
1 11 Q
( interface module speci\336es the names that ar) 198.77 463.67 T
(e visible to clients) 414.43 463.67 T
(of our library) 108 449.67 T
(. It also serves to specify the names that must be de\336ned in our) 171.72 449.67 T
(implementation. T) 108 435.67 T
(o pr) 196.89 435.67 T
(epar) 216.4 435.67 T
(e to de\336ne those names, we cr) 237.93 435.67 T
(eate a separate imple-) 383.31 435.67 T
(mentation module:) 108 421.67 T
4 9 Q
(def) 108 401 T
(ine module time-library-implementation) 124.2 401 T
6 F
(// External interface) 118.8 390 T
4 F
(use time-library;) 118.8 379 T
6 F
(// Substrate) 118.8 368 T
4 F
(use format, dylan;) 118.8 357 T
(end;) 108 346 T
1 11 Q
(In the pr) 108 325.67 T
(eceding de\336nition, the implementation module uses the) 149.62 325.67 T
4 9.5 Q
(time-library) 423.88 325.67 T
1 11 Q
(interface module for the purpose of de\336ning the objects that make up the inter-) 108 311.67 T
-0.11 (face. The implementation module also uses the) 108 297.67 P
4 9.5 Q
-0.24 (dylan) 337.99 297.67 P
1 11 Q
-0.11 ( module, because we expect) 366.49 297.67 P
-0.01 (to write Dylan code; and it uses the) 108 283.67 P
4 9.5 Q
-0.01 (format) 282.37 283.67 P
1 11 Q
-0.01 ( module, because the) 316.57 283.67 P
4 9.5 Q
-0.01 (say) 421.39 283.67 P
1 11 Q
-0.01 ( methods ar) 438.49 283.67 P
-0.01 (e) 495.99 283.67 P
(implemented using) 108 269.67 T
4 9.5 Q
(format) 205.47 269.67 T
1 11 Q
(. Note that, unlike the interface module, wher) 239.67 269.67 T
(e only) 460.98 269.67 T
4 9.5 Q
(+) 493.47 269.67 T
1 11 Q
(was imported fr) 108 255.67 T
(om Dylan, her) 186.1 255.67 T
(e the unmodi\336ed) 255.62 255.67 T
4 9.5 Q
(use) 341.72 255.67 T
1 11 Q
( clause by default imports all) 358.82 255.67 T
(the names exported fr) 108 241.67 T
(om the) 214.35 241.67 T
4 9.5 Q
(dylan) 250.82 241.67 T
1 11 Q
( module \050that is, all the names de\336ned by the) 279.32 241.67 T
(cor) 108 227.67 T
(e language\051.) 123.04 227.67 T
(If we had used our \336rst version of our) 135 213.67 T
4 9.5 Q
(time-library) 322.46 213.67 T
1 11 Q
( interface module) 390.86 213.67 T
(\050de\336ned in Section 1) 108 199.67 T
(1.3.2\051, we would have gotten an err) 206.57 199.67 T
(or at this point, because) 377.68 199.67 T
(we would be trying to use two dif) 108 185.67 T
(fer) 272.86 185.67 T
(ent de\336nitions of) 285.94 185.67 T
4 9.5 Q
(+) 371.22 185.67 T
1 11 Q
(: one fr) 376.92 185.67 T
(om) 410.66 185.67 T
4 9.5 Q
(dylan) 429.12 185.67 T
1 11 Q
(, and) 457.62 185.67 T
(another fr) 108 171.67 T
(om) 156.07 171.67 T
4 9.5 Q
(time-library) 174.54 171.67 T
1 11 Q
(. However) 241.72 171.67 T
(, the second version of the) 291.83 171.67 T
4 9.5 Q
(time-library) 421.32 171.67 T
1 11 Q
-0.11 (interface module \050de\336ned in Section 1) 108 157.67 P
-0.11 (1.3.3\051 has no such con\337ict, because we have) 291.16 157.67 P
(speci\336ed that the) 108 143.67 T
4 9.5 Q
(+) 193.85 143.67 T
1 11 Q
( fr) 199.55 143.67 T
(om) 210.12 143.67 T
4 9.5 Q
(time-library) 228.58 143.67 T
1 11 Q
( is the) 296.98 143.67 T
4 9.5 Q
(+) 328.36 143.67 T
1 11 Q
( fr) 334.06 143.67 T
(om) 344.62 143.67 T
4 9.5 Q
(dylan) 363.08 143.67 T
1 11 Q
(.) 391.58 143.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 187
%%Page: "186" 188
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(186) 72 677.67 T
0 9.5 Q
(11.3 Module declaration) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(In a mor) 135 640.67 T
(e complicated library than the time library) 175.98 640.67 T
(, we might decompose) 380.6 640.67 T
-0.41 (the constr) 108 626.67 P
-0.41 (uction of the library into several implementation modules. For example,) 155.4 626.67 P
(we might want to assign the implementation of the) 108 612.67 T
4 9.5 Q
(<sixty-unit>) 358.86 612.67 T
1 11 Q
( substrate to) 427.26 612.67 T
(another pr) 108 598.67 T
(ogrammer) 159.02 598.67 T
(. In that case, we might use the following module declara-) 209.21 598.67 T
(tions:) 108 584.67 T
4 9 Q
(def) 108 564 T
(ine module sixty-unit) 124.2 564 T
6 F
(// External interface) 118.8 553 T
4 F
(use time-library;) 118.8 542 T
6 F
(// Internal interface) 118.8 531 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 118.8 520 T
6 F
(// Substrate) 118.8 509 T
4 F
(use dylan;) 118.8 498 T
(end;) 108 487 T
(def) 108 468 T
(ine module time-library-implementation) 124.2 468 T
6 F
(// External interface) 118.8 457 T
4 F
(use time-library;) 118.8 446 T
6 F
(// Substrate) 118.8 435 T
4 F
(use sixty-unit, format, dylan;) 118.8 424 T
(end;) 108 413 T
1 11 Q
(Her) 108 392.67 T
(e, because) 126.57 392.67 T
4 9.5 Q
(sixty-unit) 178.39 392.67 T
1 11 Q
( is an internal interface, we for) 235.39 392.67 T
(go the formality of cr) 382.69 392.67 T
(eat-) 485.1 392.67 T
(ing a separate implementation module and simply export the de\336nitions we) 108 378.67 T
(expect to be used by other modules within the library) 108 364.67 T
(. Note that we use) 367.08 364.67 T
4 9.5 Q
(time-) 457.67 364.67 T
(library) 108 350.67 T
1 11 Q
(, because) 146.68 350.67 T
4 9.5 Q
(sixty-unit) 193.23 350.67 T
1 11 Q
( does de\336ne one of the interface functions) 250.23 350.67 T
4 9.5 Q
(encode-) 455.37 350.67 T
(total-seconds) 108 336.67 T
1 11 Q
(. Dylan r) 182.1 336.67 T
(equir) 224.23 336.67 T
(es that all the variables exported using the) 249.64 336.67 T
4 9.5 Q
(create) 457.54 336.67 T
1 11 Q
(clause ar) 108 322.67 T
(e de\336ned by some module in the same library) 150.55 322.67 T
(. Thus we can be sur) 371.82 322.67 T
(e that) 470.79 322.67 T
(our interface is completely implemented, even if its implementation is spr) 108 308.67 T
(ead) 466.45 308.67 T
(over several modules.) 108 294.67 T
(The) 135 280.67 T
4 9.5 Q
(sixty-unit) 156.16 280.67 T
1 11 Q
( module exports the class) 213.16 280.67 T
4 9.5 Q
(<sixty-unit>) 338.78 280.67 T
1 11 Q
(, because the time) 407.18 280.67 T
-0.26 (library will subclass it. The) 108 266.67 P
4 9.5 Q
-0.53 (sixty-unit) 240.28 266.67 P
1 11 Q
-0.26 ( module also exports the generic functions) 297.28 266.67 P
4 9.5 Q
-0.24 (total-seconds) 108 252.67 P
1 11 Q
-0.12 (, and) 182.1 252.67 P
4 9.5 Q
-0.24 (decode-total-seconds) 208.74 252.67 P
1 11 Q
-0.12 (. The export of) 322.74 252.67 P
4 9.5 Q
-0.24 (total-seconds) 395.61 252.67 P
1 11 Q
-0.12 ( might) 469.71 252.67 P
(seem surprising at \336rst, because in many object-oriented languages, access to a) 108 238.67 T
(class includes access to all the slots of a class. In Dylan, class slots ar) 108 224.67 T
(e simply) 437.23 224.67 T
(methods on generic functions and names in the module namespace, and hence) 108 210.67 T
-0.41 (the functions must be exported to allow slot access fr) 108 196.67 P
-0.41 (om outside the module. Note) 360.96 196.67 P
-0.05 (that exporting) 108 182.67 P
4 9.5 Q
-0.1 (total-seconds) 179.69 182.67 P
1 11 Q
-0.05 ( allows other modules only to get the curr) 253.79 182.67 P
-0.05 (ent value) 456.52 182.67 P
(of the) 108 168.67 T
4 9.5 Q
(total-seconds) 138.43 168.67 T
1 11 Q
( slot. T) 212.53 168.67 T
(o allow other modules to also set the slot value, we) 243.96 168.67 T
(would have to export) 108 154.67 T
4 9.5 Q
(total-seconds-setter) 215.21 154.67 T
1 11 Q
(. It is not necessary to export the) 328.39 154.67 T
(init-keywor) 108 140.67 T
(d) 164.88 140.67 T
4 9.5 Q
(total-seconds:) 174.35 140.67 T
1 11 Q
(, which allows the initial value of the slot to be set) 254.15 140.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 188
%%Page: "187" 189
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(187) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(when cr) 108 640.67 T
(eating objects. Keywor) 147.03 640.67 T
(ds, or symbols, all exist in a single global) 257.12 640.67 T
(namespace that is separate fr) 108 626.67 T
(om module variables.) 248.3 626.67 T
3 15 Q
(1) 108 410 T
(1.4  Library declaration) 114.17 410 T
1 11 Q
(W) 108 389.67 T
(e can now give the declaration of the library:) 117.99 389.67 T
4 9 Q
(def) 108 369 T
(ine library time-library) 124.2 369 T
6 F
(// Interface) 118.8 358 T
4 F
(export time-library;) 118.8 347 T
6 F
(// Substrate) 118.8 336 T
4 F
(use format, dylan;) 118.8 325 T
(end;) 108 314 T
1 11 Q
(In the pr) 108 293.67 T
(eceding de\336nition, we declar) 149.62 293.67 T
(e that the interface to our library is de\336ned) 290.09 293.67 T
-0.43 (by the) 108 279.67 P
4 9.5 Q
-0.9 (time-library) 140.09 279.67 P
1 11 Q
-0.43 ( interface module. By exporting that module, we make all the) 208.49 279.67 P
(exported names fr) 108 265.67 T
(om that module accessible to clients of this library) 196.34 265.67 T
(. W) 438.19 265.67 T
(e also) 453.67 265.67 T
-0.46 (declar) 108 251.67 P
-0.46 (e that the) 137.72 251.67 P
4 9.5 Q
-0.95 (time-library) 184.2 251.67 P
1 11 Q
-0.46 ( r) 252.6 251.67 P
-0.46 (elies on the) 259.04 251.67 P
4 9.5 Q
-0.95 (format) 315.19 251.67 P
1 11 Q
-0.46 ( and) 349.39 251.67 P
4 9.5 Q
-0.95 (dylan) 372.61 251.67 P
1 11 Q
-0.46 ( libraries. Notice that) 401.11 251.67 P
(no mention is made of the) 108 237.67 T
4 9.5 Q
(time-library-implementation) 237.48 237.67 T
1 11 Q
(, or) 391.38 237.67 T
4 9.5 Q
(sixty-unit) 409.98 237.67 T
1 11 Q
( mod-) 466.98 237.67 T
(ules, because they ar) 108 223.67 T
(e completely internal to our library and not visible to any cli-) 208.09 223.67 T
(ents of our library) 108 209.67 T
(.) 194.39 209.67 T
(In or) 135 195.67 T
(der to actually build our library) 158.01 195.67 T
(, we would need to specify the library) 310.7 195.67 T
-0.04 (de\336nition, all the module de\336nitions, wher) 108 181.67 P
-0.04 (e the sour) 316.31 181.67 P
-0.04 (ce code that implements our) 363.71 181.67 P
(library is to be found, wher) 108 167.67 T
(e the object code that r) 240.52 167.67 T
(esults fr) 349.3 167.67 T
(om compiling that) 387.87 167.67 T
(sour) 108 153.67 T
(ce code is to be stor) 129.45 153.67 T
(ed, and any particular instr) 223.45 153.67 T
(uctions to the compiler as to) 355.74 153.67 T
-0.2 (how to build the library) 108 139.67 P
-0.2 (. The details of how to pr) 222.04 139.67 P
-0.2 (ovide this information vary fr) 342.25 139.67 P
-0.2 (om) 485.73 139.67 P
2 F
(Comparison with C++:) 141 592.67 T
1 F
( Dylan modules pr) 255.46 592.67 T
(ovide access contr) 346.4 592.67 T
(ol similar) 434.2 592.67 T
(to that pr) 141 578.67 T
(ovided by the) 185.92 578.67 T
4 9.5 Q
(private:) 255.76 578.67 T
1 11 Q
( and) 301.36 578.67 T
4 9.5 Q
(public:) 325.49 578.67 T
1 11 Q
( keywor) 365.39 578.67 T
(ds in C++) 404.96 578.67 T
(classes, but Dylan access contr) 141 564.67 T
(ol is done at the module rather than) 288.52 564.67 T
(class level. Dylan has no equivalent to) 141 550.67 T
4 9.5 Q
(protected:) 328.8 550.67 T
1 11 Q
( access contr) 385.8 550.67 T
(ol. A) 446.19 550.67 T
-0.09 (class that subclasses a class fr) 141 536.67 P
-0.09 (om another module does not have access) 282.72 536.67 P
-0.27 (to slots or other generic functions on its super) 141 522.67 P
-0.27 (class fr) 360.65 522.67 P
-0.27 (om the other mod-) 393.86 522.67 P
(ule unless they ar) 141 508.67 T
(e explicitly exported fr) 226.21 508.67 T
(om that module.) 335.96 508.67 T
(Another way to think of Dylan access contr) 168 494.67 T
(ol is that all) 378.2 494.67 T
(classes and generic functions in a module ar) 141 480.67 T
(e friends, and the) 354.94 480.67 T
(exported variables of the module ar) 141 466.67 T
(e public.) 314.33 466.67 T
135 605.88 135 459.12 2 L
V
0.25 H
0 Z
N
486 605.88 486 459.12 2 L
V
N
134.88 606 486.12 606 2 L
V
N
134.88 459 486.12 459 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 189
%%Page: "188" 190
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(188) 72 677.67 T
0 9.5 Q
(11.5 Interchange files) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(one Dylan implementation to the next.) 108 640.67 T
0 F
([--- Describe the Library Inter) 298.1 640.67 T
(change De\336ni-) 430.51 640.67 T
(tion format? Is that an accepted pr) 108 626.67 T
(oposal?]) 260.34 626.67 T
1 F
-0.39 (In or) 135 612.67 P
-0.39 (der to use our library) 157.62 612.67 P
-0.39 (, we would need to specify wher) 258.12 612.67 P
-0.39 (e to \336nd the object) 413.89 612.67 P
(code and the implementation-dependent export information that allows another) 108 598.67 T
(library to use our library without access to our sour) 108 584.67 T
(ce code. The details of this) 357.95 584.67 T
(information also depends on the particular Dylan implementation we ar) 108 570.67 T
(e using.) 458.76 570.67 T
3 15 Q
(1) 108 396 T
(1.5  Interchange \336les) 114.17 396 T
1 11 Q
(The storing of sour) 108 375.67 T
(ce and object code in Dylan is not mandated to be in \336les.) 200.1 375.67 T
-0.01 (Some envir) 108 361.67 P
-0.01 (onments ar) 162.74 361.67 P
-0.01 (e expected to use a mor) 217.17 361.67 P
-0.01 (e general database for code storage) 330.97 361.67 P
(and per) 108 347.67 T
(haps a hypertext-like mechanism for exploring sour) 145.4 347.67 T
(ce code. Dylan does,) 396.93 347.67 T
(however) 108 333.67 T
(, specify a portable inter) 149.87 333.67 T
(change format, based on \336les, for exchanging) 266.73 333.67 T
(Dylan sour) 108 319.67 T
(ce code among Dylan implementations.) 161.93 319.67 T
-0.09 (A \336le in inter) 135 305.67 P
-0.09 (change format has a header and a body) 198.87 305.67 P
-0.09 (. The header consists of) 388.29 305.67 P
(consecutive lines of keywor) 108 291.67 T
(ds and values. The body consists of Dylan expr) 242.5 291.67 T
(es-) 471.25 291.67 T
(sions, and is separated fr) 108 277.67 T
(om the header by at least one blank line. The only) 228.45 277.67 T
(r) 108 263.67 T
(equir) 112.15 263.67 T
(ed keywor) 137.56 263.67 T
(d is one to specify the module expr) 189.12 263.67 T
(essions in the \336le ar) 359.14 263.67 T
(e associ-) 454.64 263.67 T
-0.25 (ated with. Standar) 108 249.67 P
-0.25 (d keywor) 196.82 249.67 P
-0.25 (ds ar) 242.87 249.67 P
-0.25 (e also de\336ned for author) 266.4 249.67 P
-0.25 (, copyright, and version;) 383.76 249.67 P
(although any implementation may ignor) 108 235.67 T
(e them, or de\336ne additional keywor) 305.73 235.67 T
(ds.) 480 235.67 T
(So, for instance, if we wanted to publish our library code, we might cr) 135 221.67 T
(eate) 474.2 221.67 T
(the following \336les:) 108 207.67 T
2 F
(Comparison with C++:) 141 536.67 T
1 F
( The library declaration, naming the modules) 255.46 536.67 T
(exported and libraries used by a library is similar to C++ header \336les) 141 522.67 T
(and includes, but the Dylan development envir) 141 508.67 T
(onment extracts the) 370.64 508.67 T
(information it needs about exported and imported variables dir) 141 494.67 T
(ectly) 449.55 494.67 T
(,) 471.39 494.67 T
(rather than r) 141 480.67 T
(equiring exports to be duplicated in a set of header \336les) 201.98 480.67 T
-0.2 (and r) 141 466.67 P
-0.2 (equiring those header \336les to be included in every sour) 166.32 466.67 P
-0.2 (ce \336le that) 432.01 466.67 P
(uses the imports.) 141 452.67 T
135 549.88 135 445.12 2 L
V
0.25 H
0 Z
N
486 549.88 486 445.12 2 L
V
N
134.88 550 486.12 550 2 L
V
N
134.88 445 486.12 445 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 190
%%Page: "189" 191
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(189) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(1) 108 639.33 T
(1.5.1  T) 113.34 639.33 T
(ime module \336le) 149.31 639.33 T
4 9 Q
(Module: dylan-user) 108 619 T
(def) 108 597 T
(ine module time-library) 124.2 597 T
6 F
(// Classes) 118.8 586 T
4 F
(create <time-of-day>, <time-offset>;) 118.8 575 T
6 F
(// Generics) 118.8 564 T
4 F
(create say, encode-total-seconds;) 118.8 553 T
6 F
(// Methods) 118.8 542 T
4 F
(use dylan, import: { \134+ }, export: all;) 118.8 531 T
(end;) 108 520 T
(def) 108 501 T
(ine module sixty-unit) 124.2 501 T
6 F
(// External interface) 118.8 490 T
4 F
(use time-library;) 118.8 479 T
6 F
(// Internal interface) 118.8 468 T
4 F
(export <sixty-unit>, total-seconds, decode-total-seconds;) 118.8 457 T
6 F
(// Substrate) 118.8 446 T
4 F
(use dylan;) 118.8 435 T
(end;) 108 424 T
(def) 108 405 T
(ine module time-library-implementation) 124.2 405 T
6 F
(// External interface) 118.8 394 T
4 F
(use time-library;) 118.8 383 T
6 F
(// Substrate) 118.8 372 T
4 F
(use sixty-unit, format, dylan;) 118.8 361 T
(end;) 108 350 T
1 11 Q
(Because every \336le r) 108 329.67 T
(equir) 201.68 329.67 T
(es a module that it is associated with \050that de\336nes the) 227.09 329.67 T
(namespace used to evaluate the \336le\325s expr) 108 315.67 T
(essions with r) 312.17 315.67 T
(espect to\051, you might) 379.05 315.67 T
-0.03 (wonder wher) 108 301.67 P
-0.03 (e to start. The) 173.63 301.67 P
4 9.5 Q
-0.05 (dylan-user) 242.23 301.67 P
1 11 Q
-0.03 ( module is a built-in module that gives us) 299.23 301.67 P
(a toe hold. It exports all of the) 108 287.67 T
4 9.5 Q
(dylan) 255.72 287.67 T
1 11 Q
( module, so any Dylan expr) 284.22 287.67 T
(ession can be) 418.39 287.67 T
(used. Y) 108 273.67 T
(ou can think of) 143.11 273.67 T
4 9.5 Q
(dylan-user) 218.91 273.67 T
1 11 Q
( as being a scratch version of) 275.91 273.67 T
4 9.5 Q
(dylan) 417.93 273.67 T
1 11 Q
(. Each) 446.43 273.67 T
(library is given a private copy of) 108 259.67 T
4 9.5 Q
(dylan-user) 268.62 259.67 T
1 11 Q
(, so ther) 324.81 259.67 T
(e is no concern that de\336ni-) 363.13 259.67 T
(tions in one library\325s) 108 245.67 T
4 9.5 Q
(dylan-user) 210.65 245.67 T
1 11 Q
( could be confused with those of another) 267.65 245.67 T
(.) 464.6 245.67 T
(Neither module names nor library names ar) 135 231.67 T
(e variables, so despite ther) 348.54 231.67 T
(e) 476.93 231.67 T
(being thr) 108 217.67 T
(ee de\336nitions in the module \336le, ther) 151.96 217.67 T
(e is actually no ef) 330.78 217.67 T
(fect visible to a) 414.68 217.67 T
(Dylan pr) 108 203.67 T
(ogram. The purpose of this \336le is solely to communicate to the Dylan) 151.24 203.67 T
-0.36 (development envir) 108 189.67 P
-0.36 (onment the str) 199.89 189.67 P
-0.36 (uctur) 269.81 189.67 P
-0.36 (e of the module namespaces. The details of) 295.69 189.67 P
(how this is done depend on the implementation, but each envir) 108 175.67 T
(onment will pr) 415.86 175.67 T
(o-) 488.27 175.67 T
(vide a mechanism for r) 108 161.67 T
(eading module de\336nitions, either dir) 219.82 161.67 T
(ectly fr) 398.57 161.67 T
(om an inter-) 432.18 161.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 191
%%Page: "190" 192
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(190) 72 677.67 T
0 9.5 Q
(11.5 Interchange files) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(change \336le, or after converting the inter) 108 640.67 T
(change \336le to implementation-dependent) 299.95 640.67 T
(format.) 108 626.67 T
3 13 Q
(1) 108 595.33 T
(1.5.2  T) 113.34 595.33 T
(ime library \336le) 149.31 595.33 T
4 9 Q
(Module: dylan-user) 108 575 T
(def) 108 553 T
(ine library time-library) 124.2 553 T
6 F
(// Interface) 118.8 542 T
4 F
(export time-library;) 118.8 531 T
6 F
(// Substrate) 118.8 520 T
4 F
(use format, dylan;) 118.8 509 T
(end;) 108 498 T
1 11 Q
-0.15 (The library \336le, like the module \336le, does not actually de\336ne any Dylan variables.) 108 477.67 P
(The library declaration is used by the development envir) 108 463.67 T
(onment to determine) 383.92 463.67 T
(which other libraries to sear) 108 449.67 T
(ch for the modules that ar) 243.65 449.67 T
(e used in the implementa-) 368.89 449.67 T
(tion of this library) 108 435.67 T
(, and to determine what modules implemented by this library) 194.54 435.67 T
(ar) 108 421.67 T
(e visible to other libraries \050and pr) 117.65 421.67 T
(ograms\051 that use this library) 279.3 421.67 T
(. Note that the) 415.37 421.67 T
(library name) 108 407.67 T
4 9 Q
(time-library) 173.18 407.67 T
1 11 Q
( and the exported module \050interface\051 name) 237.98 407.67 T
4 9 Q
(time-) 448.46 407.67 T
(library) 108 393.67 T
1 11 Q
( ar) 145.8 393.67 T
(e not a con\337ict, because variables, modules, and libraries ar) 158.2 393.67 T
(e all sepa-) 446.18 393.67 T
(rate namespaces. In other wor) 108 379.67 T
(ds, ther) 253.97 379.67 T
(e is one dictionary for looking up library) 290.26 379.67 T
(names, and another dictionary for module names, and each module is a separate) 108 365.67 T
(dictionary of variable names.) 108 351.67 T
3 13 Q
(1) 108 320.33 T
(1.5.3  Sixty-unit implementation \336le) 113.34 320.33 T
4 9 Q
(Module: sixty-unit) 108 300 T
(def) 108 281 T
(ine class <sixty-unit> \050<object>\051) 124.2 281 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 118.8 270 T
(init-value: 0;) 237.6 259 T
(end;) 108 248 T
(def) 108 229 T
(ine method encode-total-seconds \050max-unit :: <integer>,) 124.2 229 T
(minutes) 302.4 218 T
(:: <integer>,) 351 218 T
(seconds) 302.4 207 T
(:: <integer>\051) 351 207 T
(\05060 * 60 * max-unit\051 + \05060 * minutes\051 + seconds;) 118.8 196 T
(end;) 108 185 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 192
%%Page: "191" 193
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(191) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 124.2 642 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 118.8 631 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 620 T
(values \050max-unit, minutes, seconds\051;) 118.8 609 T
(end;) 108 598 T
1 11 Q
(The pr) 108 577.67 T
(eceding implementation \336le is the \336rst \336le wher) 139.92 577.67 T
(e we use one of our own) 372.31 577.67 T
-0.3 (modules. The header) 108 563.67 P
4 9.5 Q
-0.62 (Module: sixty-unit) 212.23 563.67 P
1 11 Q
-0.3 ( statement tells the Dylan envir) 314.2 563.67 P
-0.3 (onment) 464.17 563.67 P
-0.42 (that when we say) 108 549.67 P
4 9.5 Q
-0.88 (def) 194.35 549.67 P
-0.88 (ine class) 211.45 549.67 P
1 11 Q
-0.42 ( or) 261.87 549.67 P
4 9.5 Q
-0.88 (<integer>) 276.87 549.67 P
1 11 Q
-0.42 ( or) 328.17 549.67 P
4 9.5 Q
-0.88 (*) 343.17 549.67 P
1 11 Q
-0.42 (, we mean the Dylan de\336nitions) 348.87 549.67 P
(of) 108 535.67 T
4 9.5 Q
(def) 120.42 535.67 T
(ine class) 137.52 535.67 T
1 11 Q
(,) 188.82 535.67 T
4 9.5 Q
(<integer>) 194.32 535.67 T
1 11 Q
(, and) 245.62 535.67 T
4 9.5 Q
(*) 272.49 535.67 T
1 11 Q
(, because) 278.19 535.67 T
4 9.5 Q
(sixty-unit) 324.74 535.67 T
1 11 Q
( uses the) 381.74 535.67 T
4 9.5 Q
(dylan) 426.48 535.67 T
1 11 Q
( module.) 454.98 535.67 T
(When we de\336ne) 108 521.67 T
4 9.5 Q
(encode-total-seconds) 190.08 521.67 T
1 11 Q
(, we mean the) 304.08 521.67 T
4 9.5 Q
(encode-total-seconds) 374.42 521.67 T
1 11 Q
(exported by the) 108 507.67 T
4 9.5 Q
(time-library) 187.19 507.67 T
1 11 Q
( module, because) 255.59 507.67 T
4 9.5 Q
(sixty-unit) 342.43 507.67 T
1 11 Q
( uses that module.) 399.43 507.67 T
3 13 Q
(1) 108 476.33 T
(1.5.4  T) 113.34 476.33 T
(ime library implementation \336le) 149.31 476.33 T
4 9 Q
(Module: time-library-implementation) 108 456 T
(def) 108 437 T
(ine class <time> \050<sixty-unit>\051) 124.2 437 T
(end;) 108 426 T
(def) 108 407 T
(ine method say \050time :: <time>\051) 124.2 407 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 396 T
(format\050*window*, "%d:%d", hours, minutes\051;) 118.8 385 T
(end;) 108 374 T
(def) 108 355 T
(ine class <time-of-day> \050<time>\051) 124.2 355 T
(end;) 108 344 T
(def) 108 325 T
(ine class <time-offset> \050<time>\051) 124.2 325 T
(slot past? :: <boolean>, init-keyword: past?:;) 118.8 314 T
(end;) 108 303 T
(def) 108 284 T
(ine method say \050time :: <time-offset>\051) 124.2 284 T
(format\050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 118.8 273 T
(next-method\050\051;) 118.8 262 T
(end;) 108 251 T
(def) 108 232 T
(ine method \134+ \050offset1 :: <time-offset>, offset2 :: <time-offset>) 124.2 232 T
(let s1 = if\050offset1.past?\051 negative else identity end;) 118.8 221 T
(let t1 = offset1.total-seconds;) 118.8 210 T
(let s2 = if\050offset2.past?\051 negative else identity end;) 118.8 199 T
(let t2 = offset2.total-seconds;) 118.8 188 T
(make\050<time-offset>, total-seconds: s1\050t1\051 + s2\050t2\051\051;) 118.8 177 T
(end;) 108 166 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 193
%%Page: "192" 194
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(192) 72 677.67 T
0 9.5 Q
(11.6 Shared library) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method \134+ \050offset :: <time-offset>, time-of-day :: <time-of-day>\051) 124.2 642 T
(let s1 = if\050offset.past?\051 negative else identity end;) 118.8 631 T
(let t1 = offset.total-seconds;) 118.8 620 T
(let t2 = time-of-day.total-seconds;) 118.8 609 T
(make\050<time-of-day>, total-seconds: s1\050t1\051 + t2\051;) 118.8 598 T
(end;) 108 587 T
(def) 108 568 T
(ine method \134+ \050time-of-day :: <time-of-day>, offset :: <time-offset>\051) 124.2 568 T
(offset + time-of-day;) 118.8 557 T
(end;) 108 546 T
(def) 108 527 T
(ine method \134+ \050time1 :: <time>, time2 :: <time>\051) 124.2 527 T
(format\050*window*, "Sorry, we can\325t add those kinds of time"\051;) 118.8 516 T
(end;) 108 505 T
1 11 Q
(In the pr) 108 484.67 T
(eceding implementation \336le, it is the) 149.62 484.67 T
4 9.5 Q
(time-library-implementation) 329.43 484.67 T
1 11 Q
-0.45 (module that speci\336es what we mean when we write Dylan expr) 108 470.67 P
-0.45 (essions and which) 413.54 470.67 P
(module namespace our de\336nitions will appear in.) 108 456.67 T
3 15 Q
(1) 108 417 T
(1.6  Shared library) 114.17 417 T
1 11 Q
(In pr) 108 396.67 T
(evious examples, we have shown how the) 131.62 396.67 T
4 9.5 Q
(<angle>) 338.82 396.67 T
1 11 Q
( class can use the) 378.72 396.67 T
4 9.5 Q
(<sixty-) 464 396.67 T
(unit>) 108 382.67 T
1 11 Q
( class as a base class. W) 136.5 382.67 T
(e could have simply included the) 248.74 382.67 T
4 9.5 Q
(<angle>) 413.14 382.67 T
1 11 Q
( class in) 453.04 382.67 T
(our time library \050pr) 108 368.67 T
(esumably calling it a time and angle library\051, but it seems) 202.21 368.67 T
-0.29 (quite plausible that clients might not want both classes all the time. \050And for most) 108 354.67 P
(implementations of Dylan, for the pr) 108 340.67 T
(esent, using a library will likely get you all) 286.26 340.67 T
-0.11 (the de\336nitions in that library) 108 326.67 P
-0.11 (, so separating our code into components by usage is) 246.16 326.67 P
-0.32 (a r) 108 312.67 P
-0.32 (easonable policy) 120.08 312.67 P
-0.32 (.\051 Another or) 199.2 312.67 P
-0.32 (ganization would be to make an angle library that) 261.19 312.67 P
(uses the time library) 108 298.67 T
(, which would be bur) 206.08 298.67 T
(densome only to clients who want) 309.84 298.67 T
(angles without time. Clearly the right solution is to make a separate) 108 284.67 T
4 9.5 Q
(sixty-unit) 439.6 284.67 T
1 11 Q
(library that is shar) 108 270.67 T
(ed by the time and angle libraries.) 196.69 270.67 T
-0.11 (Because we had alr) 135 256.67 P
-0.11 (eady br) 227.78 256.67 P
-0.11 (oken) 264.25 256.67 P
4 9.5 Q
-0.23 (sixty-unit) 290.69 256.67 P
1 11 Q
-0.11 ( out into a separate module and) 347.69 256.67 P
-0.39 (\336le, we can cr) 108 242.67 P
-0.39 (eate this new or) 173.21 242.67 P
-0.39 (ganization simply by r) 248.75 242.67 P
-0.39 (e-arranging modules and \336les) 357.09 242.67 P
(as follows:) 108 228.67 T
(\245) 117 208.67 T
(W) 135 208.67 T
(e will move the) 144.99 208.67 T
4 9.5 Q
(sixty-unit-implementation) 222.49 208.67 T
1 11 Q
( module declaration fr) 364.99 208.67 T
(om) 473.21 208.67 T
(the) 135 194.67 T
4 9.5 Q
(time) 153.01 194.67 T
1 11 Q
( module \336le into a new) 175.81 194.67 T
4 9.5 Q
(sixty-unit) 290.52 194.67 T
1 11 Q
( module \336le.) 347.52 194.67 T
(\245) 117 174.67 T
(W) 135 174.67 T
(e will cr) 144.99 174.67 T
(eate a) 183.57 174.67 T
4 9.5 Q
(sixty-unit) 214.19 174.67 T
1 11 Q
( library \336le.) 271.19 174.67 T
(\245) 117 154.67 T
(W) 135 154.67 T
(e will update the time module and library \336les.) 144.99 154.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 194
%%Page: "193" 195
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(193) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(1) 108 639.33 T
(1.6.1  Sixty-unit module \336le) 113.34 639.33 T
4 9 Q
(Module: dylan-user) 108 619 T
(def) 108 597 T
(ine module sixty-unit) 124.2 597 T
6 F
(// Classes) 118.8 586 T
4 F
(create <sixty-unit>;) 118.8 575 T
6 F
(// Generics) 118.8 564 T
4 F
(create total-seconds, encode-total-seconds, decode-total-seconds;) 118.8 553 T
(end;) 108 542 T
(def) 108 523 T
(ine module sixty-unit-implementation) 124.2 523 T
6 F
(// External interface) 118.8 512 T
4 F
(use sixty-unit;) 118.8 501 T
6 F
(// Substrate) 118.8 490 T
4 F
(use dylan;) 118.8 479 T
(end;) 108 468 T
3 13 Q
(1) 108 438.33 T
(1.6.2  Sixty-unit library \336le) 113.34 438.33 T
4 9 Q
(Module: dylan-user) 108 418 T
(def) 108 396 T
(ine library sixty-unit) 124.2 396 T
6 F
(// Interface) 118.8 385 T
4 F
(export sixty-unit;) 118.8 374 T
6 F
(// Substrate) 118.8 363 T
4 F
(use dylan;) 118.8 352 T
(end;) 108 341 T
3 13 Q
(1) 108 311.33 T
(1.6.3  T) 113.34 311.33 T
(ime module \336le) 149.31 311.33 T
4 9 Q
(Module: dylan-user) 108 291 T
(def) 108 269 T
(ine module time-library) 124.2 269 T
6 F
(// Classes) 118.8 258 T
4 F
(create <time-of-day>, <time-offset>;) 118.8 247 T
6 F
(// Generics) 118.8 236 T
4 F
(create say;) 118.8 225 T
6 F
(// Shared protocol) 118.8 214 T
4 F
(use sixty-unit, import: { encode-total-seconds }, export: all;) 118.8 203 T
6 F
(// Methods) 118.8 192 T
4 F
(use dylan, import: { \134+ }, export: all;) 118.8 181 T
(end;) 108 170 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 195
%%Page: "194" 196
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(194) 72 677.67 T
0 9.5 Q
(11.6 Shared library) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine module time-library-implementation) 124.2 642 T
6 F
(// External interface) 118.8 631 T
4 F
(use time-library;) 118.8 620 T
6 F
(// Substrate) 118.8 609 T
4 F
(use sixty-unit, format, dylan;) 118.8 598 T
(end;) 108 587 T
3 13 Q
(1) 108 557.33 T
(1.6.4  T) 113.34 557.33 T
(ime library \336le) 149.31 557.33 T
4 9 Q
(Module: dylan-user) 108 537 T
(def) 108 518 T
(ine library time-library) 124.2 518 T
6 F
(// Interface) 118.8 507 T
4 F
(export time-library;) 118.8 496 T
6 F
(// Substrate) 118.8 485 T
4 F
(use sixty-unit, format, dylan;) 118.8 474 T
(end;) 108 463 T
1 11 Q
(At this point, we need to) 108 442.67 T
2 F
(open) 230.75 442.67 T
1 F
( the) 255.81 442.67 T
4 9.5 Q
(<sixty-unit>) 276.56 442.67 T
1 11 Q
( class; because it is now in a sep-) 344.96 442.67 T
(arate library) 108 428.67 T
(, it must be de\336ned to be open to allow other libraries, such as) 166.52 428.67 T
4 9.5 Q
(time-) 470.36 428.67 T
(library) 108 414.67 T
1 11 Q
( or) 147.9 414.67 T
4 9.5 Q
(angle-library,) 163.75 414.67 T
1 11 Q
( to subclass it. The exact implications of this declara-) 243.55 414.67 T
(tion ar) 108 400.67 T
(e discussed in Chapter 12,) 139.59 400.67 T
0 F
(Performance and Flexibility) 271.65 400.67 T
1 F
(.) 394.9 400.67 T
3 13 Q
(1) 108 369.33 T
(1.6.5  Sixty-unit implementation \336le) 113.34 369.33 T
4 9 Q
(Module: sixty-unit) 108 349 T
(def) 108 330 T
(ine open class <sixty-unit> \050<object>\051) 124.2 330 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 118.8 319 T
(init-value: 0;) 237.6 308 T
(end;) 108 297 T
(def) 108 278 T
(ine method encode-total-seconds \050max-unit :: <integer>,) 124.2 278 T
(minutes) 302.4 267 T
(:: <integer>,) 351 267 T
(seconds) 302.4 256 T
(:: <integer>\051) 351 256 T
(\05060 * 60 * max-unit\051 + \05060 * minutes\051 + seconds;) 118.8 245 T
(end;) 108 234 T
(def) 108 215 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 124.2 215 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 118.8 204 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 193 T
(values \050max-unit, minutes, seconds\051;) 118.8 182 T
(end;) 108 171 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 196
%%Page: "195" 197
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(195) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(1) 108 638 T
(1.7  Protocol design) 114.17 638 T
1 11 Q
(W) 108 617.67 T
(e can now de\336ne the) 117.99 617.67 T
4 9.5 Q
(angle) 220.95 617.67 T
1 11 Q
( library as another client of the) 249.45 617.67 T
4 9.5 Q
(sixty-unit) 400.63 617.67 T
1 11 Q
( library) 457.63 617.67 T
(.) 491.95 617.67 T
(The interface of the angle library consists of the classes) 108 603.67 T
4 9.5 Q
(<angle>) 376.08 603.67 T
1 11 Q
( and) 415.98 603.67 T
4 9.5 Q
(<directed-) 440.1 603.67 T
(angle>) 108 589.67 T
1 11 Q
(, and the) 142.2 589.67 T
4 9.5 Q
(say) 187.08 589.67 T
1 11 Q
( method. Uh-oh! W) 204.18 589.67 T
(e want that method to be another method) 296.95 589.67 T
-0.05 (on the) 108 575.67 P
4 9.5 Q
-0.1 (say) 141.07 575.67 P
1 11 Q
-0.05 ( generic function de\336ned by the time library) 158.17 575.67 P
-0.05 (, so that a client of the time) 371.16 575.67 P
0 F
(and) 108 561.67 T
1 F
( angle libraries sees a single generic function,) 124.5 561.67 T
4 9.5 Q
(say) 346.03 561.67 T
1 11 Q
(, that applies to either times) 361.91 561.67 T
(or angles. This is an example of wher) 108 547.67 T
(e we should put mor) 288.18 547.67 T
(e thought into design-) 389.21 547.67 T
(ing our pr) 108 533.67 T
(otocols befor) 156.96 533.67 T
(e we get too far into an implementation. The) 219.23 533.67 T
4 9.5 Q
(say) 437.69 533.67 T
1 11 Q
( generic) 454.79 533.67 T
(function is r) 108 519.67 T
(eally a separate pr) 166.29 519.67 T
(otocol that could apply to lots of classes in our sys-) 254.83 519.67 T
(tem, hence it r) 108 505.67 T
(eally deserves to be in a separate shar) 176.73 505.67 T
(eable library as we did with) 359.18 505.67 T
4 9.5 Q
(sixty-unit) 108 491.67 T
1 11 Q
(. Inter) 165 491.67 T
(estingly) 193.61 491.67 T
(, the) 230.95 491.67 T
4 9.5 Q
(say) 254.45 491.67 T
1 11 Q
( pr) 271.55 491.67 T
(otocol library for our simple example is just) 285.06 491.67 T
(that, just a pr) 108 477.67 T
(otocol.) 171.79 477.67 T
3 13 Q
(1) 108 446.33 T
(1.7.1  Say module \336le) 113.34 446.33 T
4 9 Q
(Module: dylan-user) 108 426 T
(def) 108 404 T
(ine module say-protocol) 124.2 404 T
(export say;) 118.8 393 T
(end;) 108 382 T
(def) 108 363 T
(ine module say-implementor) 124.2 363 T
(use say-protocol;) 118.8 352 T
(use format, export: all;) 118.8 341 T
(end;) 108 330 T
3 13 Q
(1) 108 300.33 T
(1.7.2  Say library \336le) 113.34 300.33 T
4 9 Q
(Module: dylan-user) 108 280 T
(def) 108 258 T
(ine library say-protocol) 124.2 258 T
(export say-protocol, say-implementor;) 118.8 247 T
(use format, dylan;) 118.8 236 T
(end;) 108 225 T
3 13 Q
(1) 108 195.33 T
(1.7.3  Say implementation \336le) 113.34 195.33 T
4 9 Q
(Module: say-protocol) 108 175 T
(def) 108 153 T
(ine open generic say \050object :: <object>\051 => \050\051;) 124.2 153 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 197
%%Page: "196" 198
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(196) 72 677.67 T
0 9.5 Q
(11.7 Protocol design) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(These thr) 108 640.67 T
(ee \336les show a simple module style \321 her) 153.23 640.67 T
(e the interface module) 357.16 640.67 T
(includes de\336nitions dir) 108 626.67 T
(ectly) 220.65 626.67 T
(, rather than deferring them to a separate implemen-) 242.49 626.67 T
(tation module \050it uses the) 108 612.67 T
4 9.5 Q
(export) 234.51 612.67 T
1 11 Q
( clause, rather than the) 268.71 612.67 T
4 9.5 Q
(create) 381.96 612.67 T
1 11 Q
( clause, and the) 416.16 612.67 T
(variables ar) 108 598.67 T
(e de\336ned in the interface module\051. This simple style makes sense) 164.38 598.67 T
(when all the de\336nitions of a library can be thought of as a single unit or \336le, or) 108 584.67 T
(ther) 108 570.67 T
(e ar) 127.4 570.67 T
(e no library-private inter) 145.07 570.67 T
(-module interfaces.) 264.78 570.67 T
(Note that the) 135 556.67 T
4 9.5 Q
(say-implementor) 201.58 556.67 T
1 11 Q
( module is both a client and an interface) 287.08 556.67 T
(module. It is the interface of the say pr) 108 542.67 T
(otocol for clients who will implement say) 294.79 542.67 T
(methods, and it is a client of the format module. Because most) 108 528.67 T
4 9.5 Q
(say) 412.37 528.67 T
1 11 Q
( methods use) 429.47 528.67 T
4 9.5 Q
-0.38 (format) 108 514.67 P
1 11 Q
-0.18 ( in their implementation, it makes sense to r) 142.2 514.67 P
-0.18 (e-export all of the) 353.61 514.67 P
4 9.5 Q
-0.38 (format) 441.13 514.67 P
1 11 Q
-0.18 ( mod-) 475.33 514.67 P
-0.39 (ule for) 108 500.67 P
4 9.5 Q
-0.81 (say-implementor) 141.84 500.67 P
1 11 Q
-0.39 ( clients. The) 227.34 500.67 P
4 9.5 Q
-0.81 (say) 286.8 500.67 P
1 11 Q
-0.39 ( pr) 303.89 500.67 P
-0.39 (otocol library has two interfaces that it) 317.01 500.67 P
(makes available:) 108 486.67 T
4 9.5 Q
(say-protocol) 191.18 486.67 T
1 11 Q
( de\336nes the say pr) 259.58 486.67 T
(otocol, and) 347.86 486.67 T
4 9.5 Q
(say-implementor) 404.42 486.67 T
1 11 Q
(pr) 108 472.67 T
(ovides the substrate for pr) 118.76 472.67 T
(otocol implementors. This is a cleaner interface than) 246.19 472.67 T
(the one we used for) 108 458.67 T
4 9.5 Q
(sixty-unit) 206.43 458.67 T
1 11 Q
(, wher) 263.43 458.67 T
(e) 293.92 458.67 T
4 9.5 Q
(encode-total-seconds) 301.94 458.67 T
1 11 Q
( plays mor) 415.94 458.67 T
(e of an) 467.4 458.67 T
(interface r) 108 444.67 T
(ole and) 157.02 444.67 T
4 9.5 Q
(<sixty-unit>) 195.62 444.67 T
1 11 Q
( and) 264.02 444.67 T
4 9.5 Q
(decode-total-seconds) 288.14 444.67 T
1 11 Q
( play mor) 402.14 444.67 T
(e of a sub-) 448.93 444.67 T
(strate r) 108 430.67 T
(ole. The r) 141.85 430.67 T
(esult is seen in the clients of the) 187.13 430.67 T
4 9.5 Q
(sixty-unit) 342.95 430.67 T
1 11 Q
( library) 399.95 430.67 T
(, who must) 434.27 430.67 T
(split these r) 108 416.67 T
(oles out for themselves.) 164.1 416.67 T
(The explicit de\336nition of the) 135 402.67 T
4 9.5 Q
(say) 275.16 402.67 T
1 11 Q
( generic function is good pr) 292.26 402.67 T
(otocol docu-) 425.75 402.67 T
(mentation, and it is also r) 108 388.67 T
(equir) 230.96 388.67 T
(ed, because all module variables must have a de\336-) 256.37 388.67 T
(nition for a library to be complete. An alternative would have been to de\336ne a) 108 374.67 T
-0.46 (default method for) 108 360.67 P
4 9.5 Q
-0.95 (say) 201.16 360.67 P
1 11 Q
-0.46 (, which would also cr) 217.04 360.67 P
-0.46 (eate an implicit generic de\336nition, but) 319.15 360.67 P
(implicit generic de\336nitions ar) 108 346.67 T
(e) 251.09 346.67 T
2 F
(sealed) 259.11 346.67 T
1 F
(, and for a pr) 290.88 346.67 T
(otocol we want an) 353.52 346.67 T
2 F
(open) 445.22 346.67 T
1 F
(generic function, because we intend clients to add methods to it. The designer of) 108 332.67 T
(the) 108 318.67 T
4 9.5 Q
(say) 126.01 318.67 T
1 11 Q
( pr) 143.11 318.67 T
(otocol still has to choose whether to r) 156.62 318.67 T
(equir) 336.98 318.67 T
(e each type to de\336ne its own) 362.39 318.67 T
4 9.5 Q
(say) 108 304.67 T
1 11 Q
( method, or to pr) 125.1 304.67 T
(ovide a universal default.) 207.25 304.67 T
2 F
(Comparison with C++:) 141 270.67 T
1 F
( Dylan modules r) 255.46 270.67 T
(equir) 339.79 270.67 T
(e a mor) 365.2 270.67 T
(e str) 401.34 270.67 T
(uctur) 421.86 270.67 T
(ed) 447.75 270.67 T
(design of pr) 141 256.67 T
(otocols than is r) 199.3 256.67 T
(equir) 275.8 256.67 T
(ed with C++ namespaces. T) 301.21 256.67 T
(o add) 434.66 256.67 T
(methods to a Dylan generic function fr) 141 242.67 T
(om separate libraries, the mod-) 328.76 242.67 T
(ule de\336ning the pr) 141 228.67 T
(otocol \050the module de\336ning the generic function\051) 231.13 228.67 T
(must be de\336ned \336rst, in a separate, shar) 141 214.67 T
(ed library) 334.55 214.67 T
(. T) 380.86 214.67 T
(o cr) 392.09 214.67 T
(eate an over-) 409.87 214.67 T
(loaded function in separate C++ libraries, even if they have separate) 141 200.67 T
(namespaces, a) 141 186.67 T
4 9.5 Q
(using) 213.23 186.67 T
1 11 Q
( dir) 241.73 186.67 T
(ective can cr) 258.55 186.67 T
(eate a local alias to overload a) 318.29 186.67 T
(function in another namespace. The library-use r) 141 172.67 T
(elationships of Dylan) 377.53 172.67 T
(modules form a dir) 141 158.67 T
(ected graph, wher) 234.75 158.67 T
(eas C++ namespaces can be arbi-) 322.7 158.67 T
(trarily inter) 141 144.67 T
(connected.) 196.65 144.67 T
135 283.88 135 137.13 2 L
V
0.25 H
0 Z
N
486 283.88 486 137.13 2 L
V
N
134.88 284 486.12 284 2 L
V
N
134.88 137 486.12 137 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 198
%%Page: "197" 199
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(197) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(The time library and module \336les must be r) 108 634.67 T
(eor) 319.02 634.67 T
(ganized to utilize the) 334.45 634.67 T
4 9.5 Q
(say) 439.6 634.67 T
1 11 Q
( pr) 456.7 634.67 T
(otocol) 470.2 634.67 T
(so that it is shar) 108 620.67 T
(ed with the angle library we intend to build.) 184.11 620.67 T
3 13 Q
(1) 108 589.33 T
(1.7.4  T) 113.34 589.33 T
(ime module \336le) 149.31 589.33 T
4 9 Q
(Module: dylan-user) 108 569 T
(def) 108 547 T
(ine module time-library) 124.2 547 T
6 F
(// Classes) 118.8 536 T
4 F
(create <time-of-day>, <time-offset>;) 118.8 525 T
6 F
(// Shared protocol) 118.8 514 T
4 F
(use say-protocol, export: all;) 118.8 503 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 118.8 492 T
6 F
(// Methods) 118.8 481 T
4 F
(use dylan, import: { \134+ }, export: all;) 118.8 470 T
(end;) 108 459 T
(def) 108 440 T
(ine module time-library-implementation) 124.2 440 T
6 F
(// External interface) 118.8 429 T
4 F
(use time-library;) 118.8 418 T
6 F
(// Substrate) 118.8 407 T
4 F
(use say-implementor, sixty-unit, dylan;) 118.8 396 T
(end;) 108 385 T
3 13 Q
(1) 108 355.33 T
(1.7.5  T) 113.34 355.33 T
(ime library \336le) 149.31 355.33 T
4 9 Q
(Module: dylan-user) 108 335 T
(def) 108 316 T
(ine library time-library) 124.2 316 T
6 F
(// Interface) 118.8 305 T
4 F
(export time-library;) 118.8 294 T
6 F
(// Substrate) 118.8 283 T
4 F
(use say-protocol, sixty-unit, dylan;) 118.8 272 T
(end;) 108 261 T
1 11 Q
(The) 108 240.67 T
4 9.5 Q
(time-library) 129.16 240.67 T
1 11 Q
(module is modi\336ed to use) 203.26 240.67 T
4 9.5 Q
(say-protocol) 332.87 240.67 T
1 11 Q
(, which it exports to) 401.27 240.67 T
(its clients. The implementation module is modi\336ed to use) 108 226.67 T
4 9.5 Q
(say-implementor) 390.08 226.67 T
1 11 Q
(,) 474.77 226.67 T
(which includes) 108 212.67 T
4 9.5 Q
(format) 184.54 212.67 T
1 11 Q
(, so it would be super\337uous to include) 218.74 212.67 T
4 9.5 Q
(format) 408.08 212.67 T
1 11 Q
( in the pr) 442.28 212.67 T
(e-) 486.15 212.67 T
-0.15 (ceding declaration. Similarly) 108 198.67 P
-0.15 (, the) 246.19 198.67 P
4 9.5 Q
-0.31 (time-library) 269.4 198.67 P
1 11 Q
-0.15 (library de\336nition r) 343.2 198.67 P
-0.15 (eplaces its use) 432.78 198.67 P
(of the) 108 184.67 T
4 9.5 Q
(format) 138.43 184.67 T
1 11 Q
( library with the) 172.63 184.67 T
4 9.5 Q
(say-protocol) 254.04 184.67 T
1 11 Q
( library) 322.44 184.67 T
(.) 356.76 184.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 199
%%Page: "198" 200
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(198) 72 677.67 T
0 9.5 Q
(11.7 Protocol design) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(1) 108 639.33 T
(1.7.6  Angle module \336le) 113.34 639.33 T
4 9 Q
(Module: dylan-user) 108 619 T
(def) 108 597 T
(ine module angle-library) 124.2 597 T
(// Classes) 118.8 586 T
(create <angle>, <directed-angle>;) 118.8 575 T
(// Shared protocol) 118.8 564 T
(use say-protocol, export: all;) 118.8 553 T
(use sixty-unit, import: { encode-total-seconds }, export: all;) 118.8 542 T
(end;) 108 531 T
(def) 108 512 T
(ine module angle-library-implementation) 124.2 512 T
(// External interface) 118.8 501 T
(use angle-library;) 118.8 490 T
(// Substrate) 118.8 479 T
(use say-implementor, sixty-unit, dylan;) 118.8 468 T
(end;) 108 457 T
3 13 Q
(1) 108 427.33 T
(1.7.7  Angle library \336le) 113.34 427.33 T
4 9 Q
(Module: dylan-user) 108 407 T
(def) 108 388 T
(ine library angle-library) 124.2 388 T
(// Interface) 118.8 377 T
(export angle-library;) 118.8 366 T
(// Substrate) 118.8 355 T
(use say-protocol, sixty-unit, dylan;) 118.8 344 T
(end;) 108 333 T
1 11 Q
(As with the time library) 108 312.67 T
(, the angle library \336le does not have to specify the use of) 223.18 312.67 T
(the) 108 298.67 T
4 9.5 Q
(format) 126.01 298.67 T
1 11 Q
( library) 160.21 298.67 T
(. It will be transitively included because it is exported by the) 194.53 298.67 T
4 9.5 Q
(say-protocol) 108 284.67 T
1 11 Q
( library) 176.4 284.67 T
(. Similarly) 210.72 284.67 T
(, clients of the angle library need not know any-) 259.25 284.67 T
(thing about the) 108 270.67 T
4 9.5 Q
(say-protocol) 185.02 270.67 T
1 11 Q
( and) 253.42 270.67 T
4 9.5 Q
(sixty-unit) 277.55 270.67 T
1 11 Q
( libraries.) 334.55 270.67 T
0 F
([---Compar) 135 256.67 T
(e to C/C++ libraries wher) 184.9 256.67 T
(e library dependencies ar) 298.05 256.67 T
(e much mor) 407.36 256.67 T
(e mysteri-) 459.31 256.67 T
(ous?]) 108 242.67 T
1 F
(Finally) 135 228.67 T
(, the angle implementation \336le is simply a collection of the code we) 167.52 228.67 T
(have developed earlier for cr) 108 214.67 T
(eating and saying angles, latitudes, and longitudes.) 247.84 214.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 200
%%Page: "199" 201
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(11 Libraries and Modules) 415.91 677.67 T
2 11 Q
(199) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 13 Q
0 X
(1) 108 639.33 T
(1.7.8  Angle implementation \336le) 113.34 639.33 T
4 9 Q
(Module: angle-library-implementation) 108 619 T
(def) 108 597 T
(ine class <angle> \050<sixty-unit>\051) 124.2 597 T
(end;) 108 586 T
(def) 108 567 T
(ine method say \050angle :: <angle>\051) 124.2 567 T
(let\050degrees\051 = decode-total-seconds\050angle\051;) 118.8 556 T
(format\050*window*, "%d degrees", degrees\051;) 118.8 545 T
(end;) 108 534 T
(def) 108 515 T
(ine class <directed-angle> \050<sixty-unit>\051) 124.2 515 T
(virtual slot direction) 118.8 504 T
( :: <symbol>;) 243 504 T
(slot internal-direction :: <symbol>;) 118.8 493 T
(keyword direction:;) 118.8 482 T
(end;) 108 471 T
(def) 108 452 T
(ine method initialize \050angle :: <directed-angle>, #key direction: dir\051) 124.2 452 T
(next-method\050\051;) 118.8 441 T
(angle.direction := dir;) 118.8 430 T
(end;) 108 419 T
(def) 108 400 T
(ine method direction \050angle :: <directed-angle>\051) 124.2 400 T
(angle.internal-direction;) 118.8 389 T
(end;) 108 378 T
(def) 108 359 T
(ine method direction-setter \050dir, angle :: <directed-angle>\051) 124.2 359 T
(angle.internal-direction := dir;) 118.8 348 T
(end;) 108 337 T
(def) 108 318 T
(ine method say \050angle :: <directed-angle>\051) 124.2 318 T
(let\050degrees, minutes, seconds\051 = decode-total-seconds\050angle\051;) 118.8 307 T
(format\050*window*, "%d degrees %d minutes %d seconds %s",) 118.8 296 T
(degrees, minutes, seconds, angle.direction\051;) 156.6 285 T
(end;) 108 274 T
(def) 108 255 T
(ine class <latitude> \050<directed-angle>\051) 124.2 255 T
(end;) 108 244 T
(def) 108 225 T
(ine method say \050latitude :: <latitude>\051) 124.2 225 T
(next-method\050\051;) 118.8 214 T
(format\050*window*, " latitude\134n"\051;) 118.8 203 T
(end;) 108 192 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 201
%%Page: "200" 202
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(200) 72 677.67 T
0 9.5 Q
(11.8 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 124.2 642 T
(if \050dir == north: | dir == south:\051) 118.8 631 T
(next-method\050\051;) 140.4 620 T
(else error \050"%= is not north: or south:", dir\051;) 129.6 609 T
(end;) 118.8 598 T
(end;) 108 587 T
(def) 108 568 T
(ine class <longitude> \050<directed-angle>\051) 124.2 568 T
(end;) 108 557 T
(def) 108 538 T
(ine method say \050longitude :: <longitude>\051) 124.2 538 T
(next-method\050\051;) 118.8 527 T
(format\050*window*, " longitude\134n"\051;) 118.8 516 T
(end;) 108 505 T
(def) 108 486 T
(ine method direction-setter \050dir, longitude :: <longitude>\051) 124.2 486 T
(if \050dir == east: | dir == west:\051) 118.8 475 T
(next-method\050\051;) 140.4 464 T
(else error \050"%= is not east: or west:", dir\051;) 129.6 453 T
(end;) 118.8 442 T
(end;) 108 431 T
3 15 Q
(1) 108 393 T
(1.8  Summary) 114.17 393 T
1 11 Q
(This chapter covers the following:) 108 372.67 T
(\245) 117 352.67 T
(W) 135 352.67 T
(e de\336ned modules and libraries.) 144.99 352.67 T
(\245) 117 332.67 T
(W) 135 332.67 T
(e illustrated how to design modules using thr) 144.99 332.67 T
(ee r) 366.32 332.67 T
(oles: interface modules,) 383.75 332.67 T
(implementation modules, and client modules.) 135 318.67 T
(\245) 117 298.67 T
(W) 135 298.67 T
(e illustrated how a library might appear in Dylan inter) 144.99 298.67 T
(change format.) 409.58 298.67 T
(\245) 117 278.67 T
(W) 135 278.67 T
(e showed how to cr) 144.99 278.67 T
(eate a shar) 239.7 278.67 T
(ed library) 291.04 278.67 T
(.) 337.35 278.67 T
(\245) 117 258.67 T
(W) 135 258.67 T
(e illustrated the importance of good pr) 144.99 258.67 T
(otocol design.) 332.71 258.67 T
(\245) 117 238.67 T
(W) 135 238.67 T
(e showed how to cr) 144.99 238.67 T
(eate a pr) 239.7 238.67 T
(otocol that can be implemented acr) 281.08 238.67 T
(oss sev-) 451.22 238.67 T
(eral libraries.) 135 224.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 202
%%Page: "201" 203
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(201) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(12) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(12) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Performance and Flexibility) 110 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(Dylan is designed to give r) 108 424.67 T
(easonable performance by default. For small pr) 238.25 424.67 T
(ojects,) 467.68 424.67 T
(pr) 108 410.67 T
(ojects that can \336t in a single library) 118.76 410.67 T
(, the compiler can analyze the entir) 286.62 410.67 T
(e pr) 456.49 410.67 T
(oject) 475.27 410.67 T
(and generate code that is competitive with any static language. If type declara-) 108 396.67 T
(tions ar) 108 382.67 T
(e used for all variables, slots, and parameters \050as they would be in a static) 144.26 382.67 T
(language\051, the compiler can generate code equivalent to that generated by com-) 108 368.67 T
(pilers for static languages.) 108 354.67 T
(This chapter covers the advanced topics of performance and \337exibility) 135 340.67 T
(.) 475.46 340.67 T
(Dylan gives the ability to loosen or defer type declarations in support of rapid) 108 326.67 T
(pr) 108 312.67 T
(ototyping or evolutionary development. Dylan also pr) 118.76 312.67 T
(ovides contr) 382.59 312.67 T
(ol over the) 442.44 312.67 T
(\337exibility of classes and generic functions in support of lar) 108 298.67 T
(ge pr) 391.61 298.67 T
(ojects wher) 416.51 298.67 T
(e) 471.23 298.67 T
(classes and generic functions will be combined or extended as components ar) 108 284.67 T
(e) 483.67 284.67 T
(assembled into the \336nal pr) 108 270.67 T
(oduct.) 237.05 270.67 T
(If you ar) 135 256.67 T
(e writing a stand-alone library and ar) 176.27 256.67 T
(e comfortable with always) 357.54 256.67 T
(using full type declarations, you do not need to r) 108 242.67 T
(ead this chapter car) 344.95 242.67 T
(efully) 439.67 242.67 T
(. Y) 466.53 242.67 T
(ou) 478.36 242.67 T
-0.37 (may want to skim the chapter so you have an idea of what options ar) 108 228.67 P
-0.37 (e available to) 438.33 228.67 P
(you in the futur) 108 214.67 T
(e.) 184.53 214.67 T
-0.25 (This chapter discusses the use of type declarations and limited types for per-) 135 200.67 P
(formance, the use of open classes and generic functions for extensibility and) 108 186.67 T
(domain sealing for performance, and the bene\336ts and r) 108 172.67 T
(estrictions of using pri-) 375.24 172.67 T
(mary classes.) 108 158.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 203
%%Page: "202" 204
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(202) 72 677.67 T
0 9.5 Q
(12.1 Type declarations) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(12.1  T) 108 638 T
(ype declarations) 145.4 638 T
1 11 Q
(In Dylan, variables, parameters, and slots can all have type declarations. T) 108 617.67 T
(ype) 467.3 617.67 T
(declarations in a dynamic language serve a number of purposes. T) 108 603.67 T
(ype declara-) 429.84 603.67 T
-0.46 (tions ar) 108 589.67 P
-0.46 (e r) 143.8 589.67 P
-0.46 (equir) 155.5 589.67 P
-0.46 (ed for the purposes of generic function dispatching \321 the methods) 180.91 589.67 P
(of a generic function ar) 108 575.67 T
(e distinguished by the types of their r) 220.08 575.67 T
(equir) 401.7 575.67 T
(ed ar) 427.11 575.67 T
(guments;) 451.5 575.67 T
(the generic function) 108 561.67 T
2 F
(dispatches) 207.77 561.67 T
1 F
( \050chooses among its methods\051 by \336nding the) 260.91 561.67 T
(method whose formal parameter types most closely match the actual ar) 108 547.67 T
(gument) 455.13 547.67 T
-0.24 (types. T) 108 533.67 P
-0.24 (ype declarations can be used optionally to enfor) 145.26 533.67 P
-0.24 (ce pr) 376.42 533.67 P
-0.24 (ogram r) 399.84 533.67 P
-0.24 (estrictions \321) 438.18 533.67 P
-0.06 (the compiler ensur) 108 519.67 P
-0.06 (ed that a variable, parameter) 198.99 519.67 P
-0.06 (, or slot will never take on a value) 337.72 519.67 P
(that is incompatible with its type declaration. \050If the compiler cannot pr) 108 505.67 T
(ove at) 454.67 505.67 T
-0.23 (compile time that an incorr) 108 491.67 P
-0.23 (ect type is impossible, it inserts r) 238.68 491.67 P
-0.23 (un-time checks wher) 395.5 491.67 P
-0.23 (e) 496.21 491.67 P
(necessary to enfor) 108 477.67 T
(ce the type declaration.\051 T) 195.69 477.67 T
(ype declarations also allow the com-) 320.46 477.67 T
(piler to generate mor) 108 463.67 T
(e optimal code, because they ar) 210.09 463.67 T
(e a contract between the pr) 361.88 463.67 T
(o-) 492.66 463.67 T
(grammer and the compiler that the variable, parameter) 108 449.67 T
(, or slot in question will) 375.08 449.67 T
(never take on a value that is incompatible with its type declaration; hence the) 108 435.67 T
(compiler need only generate code for dealing with the declar) 108 421.67 T
(ed type.) 403.77 421.67 T
-0.41 (Many Dylan compilers use) 135 407.67 P
2 F
-0.41 (type inferencing) 266.99 407.67 P
1 F
-0.41 ( to determine the possible types) 349.38 407.67 P
(of variables, parameters, and slots that do not have explicit type declarations.) 108 393.67 T
(W) 108 379.67 T
(ithin a library) 118.39 379.67 T
(, the compiler essentially knows everything about the variables) 183.76 379.67 T
(and functions that ar) 108 365.67 T
(e not exported at the library interface \321 it can analyze all) 209.04 365.67 T
(uses of variables, all callers and callees of functions. Thr) 108 351.67 T
(ough this analysis, the) 379.11 351.67 T
(compiler can develop a worst-case scenario of the possible types of every vari-) 108 337.67 T
-0.06 (able, parameter) 108 323.67 P
-0.06 (, and slot. As a r) 182.81 323.67 P
-0.06 (esult, these compilers generate very ef) 260.7 323.67 P
-0.06 (\336cient code) 445.75 323.67 P
(even if the pr) 108 309.67 T
(ogrammer does not fully declar) 172.28 309.67 T
(e all types \050as would be r) 325.48 309.67 T
(equir) 446.46 309.67 T
(ed in) 471.87 309.67 T
(most static languages\051.) 108 295.67 T
-0.5 (Some compilers have a facility for generating) 135 281.67 P
2 F
-0.5 (performance warnings) 353.84 281.67 P
1 F
-0.5 (, which) 466.69 281.67 P
(inform you when type infer) 108 267.67 T
(encing is not able to determine types suf) 242.6 267.67 T
(\336ciently to) 438.41 267.67 T
-0.17 (generate optimal code. Some compilers have a facility for generating) 108 253.67 P
2 F
-0.17 (safety warn-) 442.15 253.67 P
(ings) 108 239.67 T
1 F
(, informing you when type infer) 129.38 239.67 T
(encing is not able to determine types suf) 285.2 239.67 T
(\336-) 481.01 239.67 T
-0.12 (ciently to omit r) 108 225.67 P
-0.12 (un-time type-checking. As an example, consider some de\336nitions) 184.89 225.67 P
(fr) 108 211.67 T
(om Section 1) 115.81 211.67 T
(1.6, page 192:) 177.05 211.67 T
4 9 Q
(def) 108 191 T
(ine open class <sixty-unit> \050<object>\051) 124.2 191 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 118.8 180 T
(init-value: 0;) 237.6 169 T
(end;) 108 158 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 204
%%Page: "203" 205
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 395.68 677.67 T
2 11 Q
(203) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 124.2 642 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 118.8 631 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 620 T
(values \050max-unit, minutes, seconds\051;) 118.8 609 T
(end;) 108 598 T
1 11 Q
(Because we made the choice to stor) 108 577.67 T
(e) 278.98 577.67 T
4 9.5 Q
(total-seconds) 287 577.67 T
1 11 Q
( as an integer) 361.1 577.67 T
(, the compiler) 424.79 577.67 T
-0.15 (can infer that the) 108 563.67 P
4 9.5 Q
-0.32 (truncate/) 192.39 563.67 P
1 11 Q
-0.15 ( calls ar) 243.69 563.67 P
-0.15 (e for an integer divided by a non-zer) 279.98 563.67 P
-0.15 (o integer) 456.67 563.67 P
-0.15 (.) 498.65 563.67 P
-0.19 (Ther) 108 549.67 P
-0.19 (e is no need to check for divide-by-zer) 130.56 549.67 P
-0.19 (o; ther) 314.62 549.67 P
-0.19 (e is no need to consider whether) 345.34 549.67 P
(to use \337oating-point or integer division.) 108 535.67 T
(If we wer) 135 521.67 T
(e mor) 180.9 521.67 T
(e concerned with testing out ideas, we might have left the) 208.79 521.67 T
(type of the) 108 507.67 T
4 9.5 Q
(total-seconds) 162.76 507.67 T
1 11 Q
( slot unspeci\336ed \050implicitly) 236.86 507.67 T
(, its type would then be) 368.23 507.67 T
4 9.5 Q
-0.69 (<object>) 108 493.67 P
1 11 Q
-0.33 (\051, or) 153.6 493.67 P
-0.33 (, if we wanted to keep the option of having times mor) 171.97 493.67 P
-0.33 (e accurate than) 428.99 493.67 P
-0.05 (just seconds, we might have speci\336ed that its type was) 108 479.67 P
4 9.5 Q
-0.09 (<number>) 375.43 479.67 P
1 11 Q
-0.05 (, leaving the pos-) 421.03 479.67 P
(sibility of sometimes using \337oating-point numbers, which can expr) 108 465.67 T
(ess fractional) 433.4 465.67 T
(seconds.) 108 451.67 T
(If we left the type of the) 135 437.67 T
4 9.5 Q
(total-seconds) 253.55 437.67 T
1 11 Q
( slot unspeci\336ed, the compiler) 327.65 437.67 T
(would need to check the ar) 108 423.67 T
(guments to) 239.2 423.67 T
4 9.5 Q
(truncate/) 296.67 423.67 T
1 11 Q
(, on the of) 347.97 423.67 T
(f chance that an ar) 396.11 423.67 T
(gu-) 484.73 423.67 T
-0.12 (ment is not numeric at all. In some compilers, you would be able to get a compile-) 108 409.67 P
-0.05 (time safety warning stating that a r) 108 395.67 P
-0.05 (un-time type err) 277.79 395.67 P
-0.05 (or is possible \050which if unhan-) 357 395.67 P
(dled, will r) 108 381.67 T
(esult in pr) 161.09 381.67 T
(ogram failur) 210.3 381.67 T
(e\051, and that the check, and the possibility of a) 271.08 381.67 T
(r) 108 367.67 T
(un time err) 112.26 367.67 T
(or) 166.32 367.67 T
(, could be avoided if the compiler knew that) 175.86 367.67 T
4 9.5 Q
(total-seconds) 393.17 367.67 T
1 11 Q
( was a) 467.27 367.67 T
4 9.5 Q
(<number>) 108 353.67 T
1 11 Q
(.) 153.6 353.67 T
-0.17 (If we speci\336ed the type of the) 135 339.67 P
4 9.5 Q
-0.34 (total-seconds) 279.94 339.67 P
1 11 Q
-0.17 ( slot as) 354.04 339.67 P
4 9.5 Q
-0.34 (<number>) 389.41 339.67 P
1 11 Q
-0.17 (, the compiler) 435.01 339.67 P
-0.09 (would have to dispatch on the type of) 108 325.67 P
4 9.5 Q
-0.19 (total-seconds) 294.46 325.67 P
1 11 Q
-0.09 (, using either \337oating-point) 368.56 325.67 P
(or integer division as necessary) 108 311.67 T
(. In some compilers, you would be able to get a) 259.21 311.67 T
(compile-time performance warning stating that this dispatch could be omitted if) 108 297.67 T
(the compiler knew that) 108 283.67 T
4 9.5 Q
(total-seconds) 223.52 283.67 T
1 11 Q
( wer) 297.62 283.67 T
(e a mor) 318.96 283.67 T
(e r) 355.1 283.67 T
(estricted type.) 367.26 283.67 T
(Note that the r) 135 269.67 T
(esult-type of) 205.73 269.67 T
4 9.5 Q
(decode-total-seconds) 269.5 269.67 T
1 11 Q
( can be inferr) 383.5 269.67 T
(ed:) 446.91 269.67 T
4 9.5 Q
(max-) 464.4 269.67 T
(unit) 108 255.67 T
1 11 Q
( and) 130.8 255.67 T
4 9.5 Q
(minutes) 154.92 255.67 T
1 11 Q
( must be) 194.82 255.67 T
4 9.5 Q
(<integer>) 239.02 255.67 T
1 11 Q
(, fr) 290.32 255.67 T
(om the de\336nition of) 303.63 255.67 T
4 9.5 Q
(truncate/) 402.72 255.67 T
1 11 Q
(, and) 454.02 255.67 T
4 9.5 Q
(sec-) 480.89 255.67 T
(onds) 108 241.67 T
1 11 Q
( must have the same type as) 130.8 241.67 T
4 9.5 Q
(total-seconds) 270.18 241.67 T
1 11 Q
(. Fr) 344.28 241.67 T
(om this example you can see) 360.04 241.67 T
(how the compiler can get a lot of mileage fr) 108 227.67 T
(om a small number of declarations,) 318.62 227.67 T
-0.32 (and how it can point you to the places wher) 108 213.67 P
-0.32 (e further clari\336cation will pr) 318.21 213.67 P
-0.32 (oduce the) 454.36 213.67 P
(most performance and safety bene\336ts. At the same time, Dylan does not r) 108 199.67 T
(equir) 464.67 199.67 T
(e) 490.08 199.67 T
(that you have all your types thought out in advance of compiling the pr) 108 185.67 T
(ogram;) 456.28 185.67 T
(the dynamic natur) 108 171.67 T
(e of the language allows it to defer considering type informa-) 197.56 171.67 T
(tion until the pr) 108 157.67 T
(ogram is actually r) 184.48 157.67 T
(unning. In most Dylan development envir) 275.16 157.67 T
(on-) 480.12 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 205
%%Page: "204" 206
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(204) 72 677.67 T
0 9.5 Q
(12.2 Limited types) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(ments, ther) 108 640.67 T
(e is good support for r) 162.54 640.67 T
(esolving and continuing fr) 270.89 640.67 T
(om r) 399.48 640.67 T
(un-time type) 422.2 640.67 T
(err) 108 626.67 T
(ors \050rather than r) 121.76 626.67 T
(equiring editing of the code and r) 204.17 626.67 T
(ecompiling\051.) 367.07 626.67 T
(Remember that your code is mor) 135 612.67 T
(e suited to r) 294.54 612.67 T
(euse when it has fewer and) 351.88 612.67 T
(mor) 108 598.67 T
(e general type declarations. If you have a compiler that can issue safety and) 127.87 598.67 T
(performance notes, try to generalize and minimize your type declarations, being) 108 584.67 T
-0.29 (guided by your safety and performance r) 108 570.67 P
-0.29 (equir) 306.31 570.67 P
-0.29 (ements. Often, just the declarations) 331.72 570.67 P
(r) 108 556.67 T
(equir) 112.15 556.67 T
(ed to specify method applicability will be suf) 137.56 556.67 T
(\336cient for very good safety) 356.28 556.67 T
-0.14 (and performance. Declaring the types of variables and slots is also useful and can) 108 542.67 P
(help to document your pr) 108 528.67 T
(ogram. Lastly) 233.15 528.67 T
(, you may occasionally need to r) 298.89 528.67 T
(esort to) 455.19 528.67 T
(declaring the types of local variables to eke out the last bit of performance in) 108 514.67 T
(obscur) 108 500.67 T
(e cases.) 140.42 500.67 T
3 15 Q
(12.2  Limited types) 108 461 T
1 11 Q
(Some of Dylan\325s built-in types ar) 108 440.67 T
(e extr) 267.5 440.67 T
(emely general. When these types ar) 294.2 440.67 T
(e used,) 466.52 440.67 T
(the compiler) 108 426.67 T
(\325s type infer) 170.05 426.67 T
(encing is thwarted and less ef) 227.54 426.67 T
(\336cient code will be gener-) 371.16 426.67 T
(ated. The place wher) 108 412.67 T
(e this is most obvious is in the) 208.95 412.67 T
4 9.5 Q
(<collection>) 357.44 412.67 T
1 11 Q
(types, wher) 431.54 412.67 T
(e) 488.27 412.67 T
-0.23 (the elements of a collection ar) 108 398.67 P
-0.23 (e essentially like the value of a r) 250.66 398.67 P
-0.23 (epeated slot. For the) 403.78 398.67 P
-0.04 (built-in collections, elements can be any object and ther) 108 384.67 P
-0.04 (e can be an arbitrary num-) 375.69 384.67 P
(ber of them. The) 108 370.67 T
4 9.5 Q
(limited) 190.5 370.67 T
1 11 Q
( mechanism is a way to specify that you only expect to) 230.4 370.67 T
(stor) 108 356.67 T
(e a particular type in the collection and per) 126.4 356.67 T
(haps exactly how many elements) 334.71 356.67 T
(will be in the collection.) 108 342.67 T
(As an example, the slot) 135 328.67 T
4 9.5 Q
(gate-instances) 250.58 328.67 T
1 11 Q
( in the) 330.38 328.67 T
4 9.5 Q
(<airport>) 363.49 328.67 T
1 11 Q
( class is declar) 414.79 328.67 T
(ed) 483.54 328.67 T
(to be a) 108 314.67 T
4 9.5 Q
(<vector>) 142.69 314.67 T
1 11 Q
(. W) 188.29 314.67 T
(ithout further information, the compiler must assume that) 204.19 314.67 T
(anything at all might be stor) 108 300.67 T
(ed in that vector) 245.24 300.67 T
(. As a r) 323.64 300.67 T
(esult, the following code will) 357.51 300.67 T
(be inef) 108 286.67 T
(\336cient:) 140.44 286.67 T
4 9 Q
(let gates = *airport*.gate-instances;) 118.8 266 T
(for \050gate in gates\051) 118.8 255 T
(gate.connected-to := taxiway-vector;) 129.6 244 T
(end;) 118.8 233 T
1 11 Q
(Because the compiler can only infer that) 108 212.67 T
4 9.5 Q
(gates) 305.14 212.67 T
1 11 Q
( is a) 333.64 212.67 T
4 9.5 Q
(<vector>) 355.26 212.67 T
1 11 Q
(, it must generate) 400.86 212.67 T
-0.32 (extra code to determine if each) 108 198.67 P
4 9.5 Q
-0.65 (gate) 258.14 198.67 P
1 11 Q
-0.32 ( has a) 280.95 198.67 P
4 9.5 Q
-0.65 (connected-to) 310.31 198.67 P
1 11 Q
-0.32 ( method on it. W) 378.71 198.67 P
-0.32 (e can use) 458.08 198.67 P
(limited types to constrain) 108 184.67 T
4 9.5 Q
(gate-instances) 234.72 184.67 T
1 11 Q
( as follows:) 314.52 184.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 206
%%Page: "205" 207
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 395.68 677.67 T
2 11 Q
(205) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <airport> \050<physical-object>\051) 124.2 642 T
(\311) 118.8 631 T
(slot gate-instances) 118.8 620 T
( :: limited\050<vector> of: <gate>\051;) 270 620 T
(\311) 118.8 609 T
(end;) 108 598 T
1 11 Q
(W) 108 577.67 T
(ith the limited declaration of) 118.39 577.67 T
4 9.5 Q
(gate-instances) 259.77 577.67 T
1 11 Q
(, the compiler can ensur) 339.57 577.67 T
(e that) 455.7 577.67 T
(only gate objects will ever be stor) 108 563.67 T
(ed in the vector and hence it can be sur) 269.39 563.67 T
(e that) 458.52 563.67 T
(each) 108 549.67 T
4 9.5 Q
(gate) 132.8 549.67 T
1 11 Q
( will be a) 155.6 549.67 T
4 9.5 Q
(<gate>) 202.23 549.67 T
1 11 Q
( and will have a) 236.43 549.67 T
4 9.5 Q
(connected-to) 316.47 549.67 T
1 11 Q
( method.) 384.87 549.67 T
(If) 135 535.67 T
4 9.5 Q
(<gate>) 145.12 535.67 T
1 11 Q
( and) 179.32 535.67 T
4 9.5 Q
(connected-to) 203.44 535.67 T
1 11 Q
( ar) 271.84 535.67 T
(e not) 284.24 535.67 T
2 F
(open) 311 535.67 T
1 F
( \050as described in Section 12.4 and) 336.06 535.67 T
-0.14 (Section 12.5\051, the compiler can infer that) 108 521.67 P
4 9.5 Q
-0.3 (connected-to) 304.25 521.67 P
1 11 Q
-0.14 ( is used her) 372.65 521.67 P
-0.14 (e to set a slot in) 427.43 521.67 P
(the gate instance and further optimize the code generated. W) 108 507.67 T
(e do not delve into) 403.69 507.67 T
(the exact details of what the compiler has to know to make this optimization, but) 108 493.67 T
(it is worth noting that if either the class or the generic function wer) 108 479.67 T
(e open, the) 432.27 479.67 T
(optimization could not be made.) 108 465.67 T
3 15 Q
(12.3  T) 108 291 T
(yped generic functions) 145.4 291 T
1 11 Q
(In addition to specifying the types of the parameters to methods, you can specify) 108 270.67 T
(the types of the parameters \050and r) 108 256.67 T
(esults\051 of a generic function. Restricting the) 272.16 256.67 T
(parameter types of a generic function is usually done to establish the) 108 242.67 T
2 F
(contract) 444.45 242.67 T
1 F
( of) 484.16 242.67 T
(the generic function; that is, it de\336nes the domain of ar) 108 228.67 T
(guments the generic func-) 373.34 228.67 T
(tion is intended to handle.) 108 214.67 T
-0.18 (Consider the generic function) 135 200.67 P
4 9.5 Q
-0.37 (say) 281.21 200.67 P
1 11 Q
-0.18 (de\336ned in Section 3.3, page 42. W) 303.64 200.67 P
-0.18 (e might) 464.57 200.67 P
(have de\336ned it to operate only on objects of type) 108 186.67 T
4 9.5 Q
(<time>) 347.34 186.67 T
1 11 Q
(:) 381.54 186.67 T
6 9 Q
(// Given a time, print a description of the time.) 108 166 T
4 F
(def) 108 155 T
(ine generic say \050time :: <time>\051;) 124.2 155 T
2 11 Q
(Comparison with C++:) 141 431.67 T
1 F
( Dylan limited types pr) 255.46 431.67 T
(ovide a capability simi-) 368.08 431.67 T
-0.3 (lar to C++ template classes. Unlike C++, the base type of a limited type) 141 417.67 P
(\050the equivalent of a C++ class template \321 in the example above,) 141 403.67 T
4 9.5 Q
(<vec-) 455.23 403.67 T
-0.88 (tor>) 141 389.67 P
1 11 Q
-0.43 (\051 is also a valid type. Dylan\325s dynamic capabilities mean that it can) 163.8 389.67 P
(defer determining the element type of a collection until r) 141 375.67 T
(un-time, in) 415.88 375.67 T
(ef) 141 361.67 T
(fect adapting the class template as it goes along. By using a limited) 149.73 361.67 T
(type, the compiler can generate mor) 141 347.67 T
(e ef) 315.98 347.67 T
(\336cient code.) 332.73 347.67 T
135 444.88 135 340.13 2 L
V
0.25 H
0 Z
N
486 444.88 486 340.13 2 L
V
N
134.88 445 486.12 445 2 L
V
N
134.88 340 486.12 340 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 207
%%Page: "206" 208
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(206) 72 677.67 T
0 9.5 Q
(12.4 Open generic functions) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
-0.18 (This type declaration would mean we never intended to call) 108 640.67 P
4 9.5 Q
-0.37 (say) 401.41 640.67 P
1 11 Q
-0.18 ( on anything that) 418.51 640.67 P
(is not a time. It would be an err) 108 626.67 T
(or to de\336ne a) 259.92 626.67 T
4 9.5 Q
(say) 326.68 626.67 T
1 11 Q
( method on a type that is not a) 343.78 626.67 T
(subtype of) 108 612.67 T
4 9.5 Q
(<time>) 162.13 612.67 T
1 11 Q
(. Additionally) 196.33 612.67 T
(, it implies that if we wer) 263.02 612.67 T
(e to de\336ne a new sub-) 383.89 612.67 T
-0.26 (class of) 108 598.67 P
4 9.5 Q
-0.53 (<time>) 145.57 598.67 P
1 11 Q
-0.26 (, say) 179.77 598.67 P
4 9.5 Q
-0.53 (<sidereal-time>) 203.79 598.67 P
1 11 Q
-0.26 (, we would want to de\336ne a method for that) 289.29 598.67 P
-0.13 (class. As it is, we anticipated that) 108 584.67 P
4 9.5 Q
-0.27 (say) 270.59 584.67 P
1 11 Q
-0.13 ( would be useful for other classes, so we did) 287.69 584.67 P
(not r) 108 570.67 T
(estrict its ar) 130.89 570.67 T
(gument type.) 187.02 570.67 T
-0.18 (In addition to establishing a contract, specifying the types of the parameters) 135 556.67 P
(and r) 108 542.67 T
(esults of generic functions can allow the compiler to make additional infer-) 133.52 542.67 T
(ences, as was described above with r) 108 528.67 T
(egar) 285.98 528.67 T
(ds to) 307.01 528.67 T
4 9.5 Q
(truncate/) 333.49 528.67 T
1 11 Q
(. In the absence of other) 384.79 528.67 T
(information, the compiler is limited in the optimizations it can make on the basis) 108 514.67 T
(of generic function parameter types alone, so it is generally best to not arti\336cially) 108 500.67 T
(r) 108 486.67 T
(estrict the types of a generic, but rather to use the r) 112.15 486.67 T
(estricted types to document) 358.15 486.67 T
(the generic function\325s contract.) 108 472.67 T
(Dylan does allow you to omit de\336ning a generic function at all. If a method) 135 458.67 T
(is de\336ned without also de\336ning a generic function, Dylan implicitly cr) 108 444.67 T
(eates a) 449.32 444.67 T
(generic function with the most general parameter and r) 108 430.67 T
(esult types that ar) 376.86 430.67 T
(e com-) 463.43 430.67 T
(patible with the method. The most common case of implicit generic functions is) 108 416.67 T
(for the slot accessor methods that ar) 108 402.67 T
(e cr) 282.53 402.67 T
(eated when a new class is de\336ned.) 299.58 402.67 T
(Because these generic functions typically have only a single method and ar) 108 388.67 T
(e) 471.15 388.67 T
2 F
(sealed) 108 374.67 T
1 F
( by default \050see Section 12.4\051, the compiler can make extensive optimiza-) 139.77 374.67 T
(tions for slot accessors.) 108 360.67 T
3 15 Q
(12.4  Open generic functions) 108 321 T
1 11 Q
(By default, generic functions ar) 108 300.67 T
(e) 259.73 300.67 T
2 F
(sealed) 267.75 300.67 T
1 F
(. When you use) 299.52 300.67 T
4 9.5 Q
(def) 377.67 300.67 T
(ine generic) 394.77 300.67 T
1 11 Q
(, it is the) 457.46 300.67 T
(same as using) 108 286.67 T
4 9.5 Q
(def) 178.58 286.67 T
(ine sealed generic) 195.68 286.67 T
1 11 Q
(. No other library can add methods to a) 298.28 286.67 T
(sealed generic function, not even on new classes they may intr) 108 272.67 T
(oduce. Methods) 410.42 272.67 T
(cannot be added to or r) 108 258.67 T
(emoved fr) 220.9 258.67 T
(om the generic function at r) 270.66 258.67 T
(un time. The only) 404.99 258.67 T
(methods on a sealed generic function ar) 108 244.67 T
(e the methods that ar) 301.3 244.67 T
(e de\336ned in the) 403.91 244.67 T
-0.29 (library wher) 108 230.67 P
-0.29 (e the generic function itself is de\336ned. Because of the r) 168.24 230.67 P
-0.29 (estrictions on a) 428.9 230.67 P
(sealed generic, the compiler) 108 216.67 T
(, using other type-infer) 242.78 216.67 T
(ence information, can often) 354.33 216.67 T
(narr) 108 202.67 T
(ow the choice of applicable method at any particular call to the generic func-) 128.39 202.67 T
(tion, eliminating much of the over) 108 188.67 T
(head of r) 273.68 188.67 T
(un-time dispatching that would nor-) 317 188.67 T
(mally be expected of a dynamic language.) 108 174.67 T
-0.33 (W) 135 160.67 P
-0.33 (e saw in Chapter 1) 144.99 160.67 P
-0.33 (1 that a generic function that is part of a shar) 233.29 160.67 P
-0.33 (ed pr) 446.72 160.67 P
-0.33 (otocol) 471.89 160.67 P
(must be de\336ned using) 108 146.67 T
4 9.5 Q
(def) 219 146.67 T
(ine open generic) 236.1 146.67 T
1 11 Q
(, so that libraries sharing the pr) 327.3 146.67 T
(oto-) 478.75 146.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 208
%%Page: "207" 209
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 395.68 677.67 T
2 11 Q
(207) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(col can implement the pr) 108 640.67 T
(otocol for the classes they de\336ne, by adding methods. If) 228.86 640.67 T
(you did not de\336ne the generic function to be open, other libraries would be pr) 108 626.67 T
(o-) 486.97 626.67 T
(hibited fr) 108 612.67 T
(om adding methods to the generic function, which would make it use-) 153.02 612.67 T
(less as a pr) 108 598.67 T
(otocol. Unfortunately) 160.47 598.67 T
(, a generic function that is open cannot be) 263.7 598.67 T
(optimized. Even when the compiler may be able to infer the exact types of the) 108 584.67 T
(ar) 108 570.67 T
(guments to the generic in a particular call, because an open generic may have) 117.65 570.67 T
-0.15 (methods added or r) 108 556.67 P
-0.15 (emoved, even at r) 203.59 556.67 P
-0.15 (un time, the compiler must pr) 289.83 556.67 P
-0.15 (oduce code to) 434.22 556.67 P
(handle all these possibilities.) 108 542.67 T
(Because open generic functions cannot be optimized, you should use them) 135 528.67 T
(only when necessary) 108 514.67 T
(. Y) 208.36 514.67 T
(ou need to balance the division of your pr) 220.19 514.67 T
(ogram into) 423.32 514.67 T
(libraries against the need to export and open mor) 108 500.67 T
(e generic functions if the pr) 347.56 500.67 T
(o-) 480.38 500.67 T
(gram is too \336nely divided. This balance is illustrated by the considerations we) 108 486.67 T
(took in designing a pr) 108 472.67 T
(otocol in Section 1) 214.67 472.67 T
(1.7, page 195. When we chose to split the) 302.23 472.67 T
4 9.5 Q
(time) 108 458.67 T
1 11 Q
( and) 130.8 458.67 T
4 9.5 Q
(angle) 154.92 458.67 T
1 11 Q
( libraries, we wer) 183.42 458.67 T
(e for) 267.27 458.67 T
(ced to cr) 289.1 458.67 T
(eate the) 330.1 458.67 T
4 9.5 Q
(say) 370.48 458.67 T
1 11 Q
( pr) 387.58 458.67 T
(otocol library and) 401.09 458.67 T
(open the generic function) 108 444.67 T
4 9.5 Q
(say) 234.81 444.67 T
1 11 Q
(. In Section 12.6, we show how to r) 250.69 444.67 T
(egain some opti-) 418.68 444.67 T
(mizations when you decide that opening a generic function is r) 108 430.67 T
(equir) 414.2 430.67 T
(ed.) 439.61 430.67 T
(Note that generic functions that ar) 135 416.67 T
(e implicitly de\336ned in a library) 301.47 416.67 T
(, such as) 451.12 416.67 T
(those that ar) 108 402.67 T
(e de\336ned when you only de\336ne a single method, or those that ar) 168.15 402.67 T
(e) 481.3 402.67 T
(de\336ned for every slot accessor) 108 388.67 T
(, ar) 254.12 388.67 T
(e sealed by default. If you expect other libraries) 269.27 388.67 T
(to add methods to one of these implicit generic functions, you must explicitly) 108 374.67 T
(de\336ne the generic to be open using) 108 360.67 T
4 9.5 Q
(def) 280.56 360.67 T
(ine open generic) 297.66 360.67 T
1 11 Q
(.) 388.86 360.67 T
3 15 Q
(12.5  Open classes) 108 321 T
1 11 Q
-0.32 (By default, classes ar) 108 300.67 P
-0.32 (e) 207.94 300.67 P
2 F
-0.32 (sealed) 215.64 300.67 P
1 F
-0.32 (. When you use) 247.41 300.67 P
4 9.5 Q
-0.66 (def) 324.27 300.67 P
-0.66 (ine class) 341.37 300.67 P
1 11 Q
-0.32 (, it is the same as using) 392.01 300.67 P
4 9.5 Q
-0.37 (def) 108 286.67 P
-0.37 (ine sealed class) 125.1 286.67 P
1 11 Q
-0.18 (. No other library can subclass a sealed class \321 they cannot) 215.56 286.67 P
-0.33 (de\336ne new classes that have your sealed class as a super) 108 272.67 P
-0.33 (class. The only subclasses) 378.29 272.67 P
(of the class ar) 108 258.67 T
(e those subclasses that ar) 173.74 258.67 T
(e de\336ned in the library wher) 294.88 258.67 T
(e the class) 433.58 258.67 T
(itself is de\336ned. The most extensive optimization opportunities occur when the) 108 244.67 T
-0.39 (methods of a sealed generic function ar) 108 230.67 P
-0.39 (e specialized on sealed classes. In this case,) 296.2 230.67 P
-0.09 (the compiler can often choose the corr) 108 216.67 P
-0.09 (ect method of the generic function to call at) 292.01 216.67 P
(compile time, eliminating any r) 108 202.67 T
(un-time over) 260.47 202.67 T
(head for using a generic function.) 323.33 202.67 T
(W) 135 188.67 T
(e saw in Chapter 1) 144.99 188.67 T
(1 that a class that is a shar) 234.6 188.67 T
(ed substrate, such as) 359.99 188.67 T
4 9.5 Q
(<sixty-) 462.81 188.67 T
-0 (unit>) 108 174.67 P
1 11 Q
-0 (, must be de\336ned using) 136.5 174.67 P
4 9.5 Q
-0 (def) 253 174.67 P
-0 (ine open class) 270.1 174.67 P
1 11 Q
-0 (, if the libraries sharing the sub-) 349.89 174.67 P
-0.11 (strate ar) 108 160.67 P
-0.11 (e expected to subclass the class. If you did not de\336ne the class to be open,) 147.23 160.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 209
%%Page: "208" 210
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(208) 72 677.67 T
0 9.5 Q
(12.6 Sealed domains) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(other libraries would be pr) 108 640.67 T
(evented fr) 238.26 640.67 T
(om subclassing it \321 which may be r) 287.55 640.67 T
(eason-) 463.21 640.67 T
(able if the substrate is not intended to be extended in any way) 108 626.67 T
(.) 407.98 626.67 T
(Unlike an open generic function, an open class does not pr) 135 612.67 T
(event all optimi-) 418.96 612.67 T
(zation. If a generic function has a method applicable to an open class, but the) 108 598.67 T
(generic function is sealed, the compiler may still be able to optimize dispatch if it) 108 584.67 T
(can infer the types of the ar) 108 570.67 T
(guments to the generic at a particular call. Sometimes) 240.24 570.67 T
-0.07 (the dispatch code will be slightly less optimal, because it must allow for arbitrary) 108 556.67 P
(subclasses, rather than a \336xed set of subclasses, but in general, opening a class is) 108 542.67 T
(less costly than opening a generic function.) 108 528.67 T
-0.05 (Note that while you cannot subclass a sealed class fr) 135 514.67 P
-0.05 (om another library) 388.3 514.67 P
-0.05 (, it is) 478.5 514.67 P
(permissible to subclass a sealed class within the same library) 108 500.67 T
(. It may not be obvi-) 401.83 500.67 T
(ous, but an important cor) 108 486.67 T
(ollary of this r) 231.24 486.67 T
(ule of sealing is that you can de\336ne an) 299.64 486.67 T
2 F
(open subclass) 108 472.67 T
1 F
( of a sealed class within the same library) 177.95 472.67 T
(. A sealed class with an) 372.59 472.67 T
-0.37 (open subclass is one simple way to get both \337exibility and ef) 108 458.67 P
-0.37 (\336ciency \321 the classes) 397.97 458.67 P
(in the sealed branch will be optimized by the compiler) 108 444.67 T
(, while the open subclass) 371.66 444.67 T
(can be exported for other libraries to build on and extend.) 108 430.67 T
3 15 Q
(12.6  Sealed domains) 108 391 T
1 11 Q
-0.28 (When de\336ning a pr) 108 370.67 P
-0.28 (otocol that is meant to be extended by many libraries, both the) 201.52 370.67 P
(base classes and the generic functions that make up the pr) 108 356.67 T
(otocol must be open.) 389.6 356.67 T
-0.22 (This simple exigency might make it seem that ther) 108 342.67 P
-0.22 (e is no hope of optimizing such) 350.65 342.67 P
(a pr) 108 328.67 T
(otocol. The) 127.01 328.67 T
4 9.5 Q
(seal domain) 183.36 328.67 T
1 11 Q
( top-level form is used to selectively seal subsets or) 246.06 328.67 T
2 F
(branches) 108 314.67 T
1 F
( of the pr) 153.21 314.67 T
(otocol, permitting the compiler to make all the optimizations) 197.14 314.67 T
(that would be possible if the classes and generics wer) 108 300.67 T
(e sealed, but only for the) 366.94 300.67 T
(particular subset or branch in question.) 108 286.67 T
(As an example, consider the) 135 272.67 T
4 9.5 Q
(say) 274.61 272.67 T
1 11 Q
( pr) 291.71 272.67 T
(otocol as used in the time library) 305.22 272.67 T
(.) 463.06 272.67 T
(Because the) 108 258.67 T
4 9.5 Q
(say) 167.7 258.67 T
1 11 Q
( generic function is de\336ned to be open, even if the compiler can) 184.8 258.67 T
-0.34 (infer that the ar) 108 244.67 P
-0.34 (gument to) 182.1 244.67 P
4 9.5 Q
-0.69 (say) 234.24 244.67 P
1 11 Q
-0.34 ( is a) 251.35 244.67 P
4 9.5 Q
-0.69 (<time>) 271.95 244.67 P
1 11 Q
-0.34 ( or) 306.15 244.67 P
4 9.5 Q
-0.69 (<time-offset>) 321.34 244.67 P
1 11 Q
-0.34 (, it must insert code to) 395.44 244.67 P
(choose the appr) 108 230.67 T
(opriate method to call at r) 184.86 230.67 T
(un time in the of) 310.54 230.67 T
(f chance that some) 390.68 230.67 T
(other library has added or r) 108 216.67 T
(emoved methods for) 242.15 216.67 T
4 9.5 Q
(say) 345.96 216.67 T
1 11 Q
(. The solution is to add the) 361.84 216.67 T
(following top-level form to the de\336nitions that make up the time library:) 108 202.67 T
6 9 Q
(// Seal say, for all time.) 108 182 T
4 F
(seal domain say \050time :: <time>\051;) 108 171 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 210
%%Page: "209" 211
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 395.68 677.67 T
2 11 Q
(209) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.22 (This statement is essentially a guarantee to the compiler that the only methods on) 108 640.67 P
4 9.5 Q
-0.84 (say) 108 626.67 P
1 11 Q
-0.41 ( that ar) 125.1 626.67 P
-0.41 (e applicable to) 158.51 626.67 P
4 9.5 Q
-0.84 (<time>) 230.46 626.67 P
1 11 Q
-0.41 ( objects \050and also) 264.66 626.67 P
4 9.5 Q
-0.84 (<time-offset>) 348.75 626.67 P
1 11 Q
-0.41 ( objects, because) 422.85 626.67 P
4 9.5 Q
(<time-offset>) 108 612.67 T
1 11 Q
( is a subclass of) 182.1 612.67 T
4 9.5 Q
(<time>) 259.18 612.67 T
1 11 Q
(\051 ar) 293.38 612.67 T
(e those that ar) 309.44 612.67 T
(e explicitly de\336ned in the) 377.6 612.67 T
-0.19 (time library and any libraries it imports fr) 108 598.67 P
-0.19 (om. Thus, when the compiler can pr) 309.65 598.67 P
-0.19 (ove) 483.95 598.67 P
(that the ar) 108 584.67 T
(gument to) 157.48 584.67 T
4 9.5 Q
(say) 210.29 584.67 T
1 11 Q
( is a) 227.39 584.67 T
4 9.5 Q
(<time-offset>) 249 584.67 T
1 11 Q
(, it can call the corr) 323.1 584.67 T
(ect method with-) 414.6 584.67 T
(out the r) 108 570.67 T
(un-time over) 149.24 570.67 T
(head of checking for additional methods.) 212.09 570.67 T
(Another way to get the same ef) 135 556.67 T
(fect as a sealed domain, which is also self-) 286.56 556.67 T
-0.44 (documenting, is to use) 108 542.67 P
4 9.5 Q
-0.92 (def) 218.93 542.67 P
-0.92 (ine sealed method) 236.03 542.67 P
1 11 Q
-0.44 ( when de\336ning individual methods) 331.1 542.67 P
(on the pr) 108 528.67 T
(otocol. So, for instance, in the case of the time library) 151.92 528.67 T
(, we might have) 406.51 528.67 T
(de\336ned the two methods on) 108 514.67 T
4 9.5 Q
(say) 247.58 514.67 T
1 11 Q
( as follows:) 264.68 514.67 T
4 9 Q
(def) 108 494 T
(ine sealed method say \050time :: <time>\051) 124.2 494 T
(let\050hours, minutes\051 = decode-total-seconds\050time\051;) 118.8 483 T
(format\050*window*, "%d:%d", hours, minutes\051;) 118.8 472 T
(end;) 108 461 T
(def) 108 439 T
(ine sealed method say \050time :: <time-offset>\051) 124.2 439 T
(format\050*window*, "%s ", if \050time.past?\051 "minus" else "plus" end\051;) 118.8 428 T
(next-method\050\051;) 118.8 417 T
(end;) 108 406 T
1 11 Q
(De\336ning a sealed method is the same as sealing the generic function over the) 108 385.67 T
(domain of the method\325s specializers. If ef) 108 371.67 T
(fect, this technique says you do not) 307.55 371.67 T
(intend anyone to add mor) 108 357.67 T
(e speci\336c methods in that domain, or to cr) 234.68 357.67 T
(eate classes) 438.42 357.67 T
(that would change the applicability of the sealed methods.) 108 343.67 T
(W) 135 329.67 T
(ith either the) 145.4 329.67 T
4 9.5 Q
(seal domain) 210.16 329.67 T
1 11 Q
( form or the sealed methods, the use of) 272.86 329.67 T
4 9.5 Q
(say) 464.17 329.67 T
1 11 Q
( on) 481.27 329.67 T
4 9.5 Q
(<time>) 108 315.67 T
1 11 Q
( objects will be as ef) 142.2 315.67 T
(\336cient as if) 238.04 315.67 T
4 9.5 Q
(say) 293.32 315.67 T
1 11 Q
( wer) 310.42 315.67 T
(e not an open generic after all. At) 331.76 315.67 T
(the same time, other libraries that cr) 108 301.67 T
(eate new classes can still extend the) 282.94 301.67 T
4 9.5 Q
(say) 458.33 301.67 T
1 11 Q
( pr) 475.43 301.67 T
(o-) 488.94 301.67 T
(tocol to cover those classes.) 108 287.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 211
%%Page: "210" 212
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(210) 72 677.67 T
0 9.5 Q
(12.6 Sealed domains) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(Ther) 108 334.67 T
(e is one catch to sealed generic function domains: ther) 130.56 334.67 T
(e ar) 392.22 334.67 T
(e some r) 409.88 334.67 T
(estrictions) 450.45 334.67 T
(imposed on open classes involved in a sealed domain that pr) 108 320.67 T
(ohibit certain sub-) 403.56 320.67 T
-0.06 (classing of those open classes in other libraries. The actual r) 108 306.67 P
-0.06 (ule involved depends) 395.95 306.67 P
-0.22 (on an analysis of the exact methods of the generic function, and the r) 108 292.67 P
-0.22 (ule is compli-) 438.7 292.67 P
(cated enough that you should just r) 108 278.67 T
(ely on your compiler to detect illegal situa-) 280.35 278.67 T
(tions. However) 108 264.67 T
(, if you obey the following two r) 181.98 264.67 T
(ules of thumb, you should not) 338.32 264.67 T
(have any pr) 108 250.67 T
(oblems:) 165.66 250.67 T
(\245) 117 230.67 T
(If your library de\336nes a method for an open generic function imported) 135 230.67 T
(fr) 135 216.67 T
(om another library) 142.81 216.67 T
(, make sur) 233.11 216.67 T
(e that at least one of the specializers of your) 283.4 216.67 T
(method is either a class de\336ned in your library) 135 202.67 T
(, or a subtype of a class) 360.36 202.67 T
(de\336ned in your library) 135 188.67 T
(.) 244.56 188.67 T
(\245) 117 168.67 T
(If your library seals a domain of an open generic function imported fr) 135 168.67 T
(om) 472.99 168.67 T
-0.09 (another library) 135 154.67 P
-0.09 (, make sur) 206.74 154.67 P
-0.09 (e that at least one of the specializers of your sealed) 256.84 154.67 P
2 F
(Comparison with C++:) 141 620.67 T
1 F
( A C++ compiler could optimize out the dis-) 255.46 620.67 T
-0.25 (patching of a virtual function by analyzing the entir) 141 606.67 P
-0.25 (e scope of the ar) 390.32 606.67 P
-0.25 (gu-) 467.59 606.67 P
(ment the virtual function dispatches on, and pr) 141 592.67 T
(oving its exact class.) 369.98 592.67 T
(Unfortunately) 141 578.67 T
(, that scope is often the entir) 209.05 578.67 T
(e pr) 345.46 578.67 T
(ogram, which implies) 364.23 578.67 T
(that this optimization can often only be performed by a linker) 141 564.67 T
(. Even a) 440.09 564.67 T
(linker cannot make this optimization when a library is compiled,) 141 550.67 T
(because the classes of a library can be subclassed by a client. The com-) 141 536.67 T
-0.03 (plexity is compounded for dynamic-link libraries, wher) 141 522.67 P
-0.03 (e ther) 410.5 522.67 P
-0.03 (e may be) 437.89 522.67 P
(multiple clients at once. As a r) 141 508.67 T
(esult, this optimization is rar) 287.39 508.67 T
(ely) 426.71 508.67 T
(achieved in C++.) 141 494.67 T
-0.01 (The Dylan sealing declarations ar) 168 480.67 P
-0.01 (e a way of explicitly stating) 330.36 480.67 P
(which generic functions and classes may be extended, and mor) 141 466.67 T
(e) 447.04 466.67 T
(importantly) 141 452.67 T
(, which cannot. The library designer plans in advance) 198.05 452.67 T
(exactly what extensibility the library will have. The Dylan com-) 141 438.67 T
(piler can then optimize dispatching on sealed generic functions) 141 424.67 T
(and classes with the assurance that no client will violate the) 141 410.67 T
(assumptions of the optimization. The sealing r) 141 396.67 T
(estrictions against) 366.25 396.67 T
(subclassing or changing method applicability ar) 141 382.67 T
(e automatically) 374.38 382.67 T
(enfor) 141 368.67 T
(ced on each client of a Dylan library) 166.49 368.67 T
(.) 340.09 368.67 T
135 633.88 135 361.13 2 L
V
0.25 H
0 Z
N
486 633.88 486 361.13 2 L
V
N
134.88 634 486.12 634 2 L
V
N
134.88 361 486.12 361 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 212
%%Page: "211" 213
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 396.08 677.67 T
2 11 Q
(21) 523.91 677.67 T
(1) 534.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(domain is either a class de\336ned in your library) 135 640.67 T
(, or a subtype of a class) 360.2 640.67 T
(de\336ned in your library) 135 626.67 T
(.) 244.56 626.67 T
(In our example, we obeyed both r) 108 606.67 T
(ules of thumb: our methods for) 271.82 606.67 T
4 9.5 Q
(say) 426.29 606.67 T
1 11 Q
( ar) 443.39 606.67 T
(e on) 455.78 606.67 T
(classes we de\336ned, and our sealing was over those same classes. The r) 108 592.67 T
(ules of) 448.55 592.67 T
(thumb not only keep you fr) 108 578.67 T
(om violating sealing constraints, they make for good) 241.72 578.67 T
(pr) 108 564.67 T
(otocol design: a library that extends a pr) 118.76 564.67 T
(otocol r) 314.03 564.67 T
(eally should only extend it for) 350.62 564.67 T
(classes it fully understands, which usually means classes it cr) 108 550.67 T
(eates.) 405.08 550.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
415.03 535.15 108 535.15 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
([--- Show how sealing decode-total-seconds on <sixty-unit> would pr) 108 536.67 T
0 1 1 0 1 0 0 K
498.27 535.15 414.83 535.15 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(event mixing time) 414.83 536.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
208.72 521.15 108 521.15 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(into some other class?]) 108 522.67 T
0 0 0 1 0 0 0 K
3 15 Q
0 0 0 1 0 0 0 K
(12.7  Primary classes) 108 483 T
1 11 Q
(Classes have one additional variation that can be used for optimizing perfor-) 108 462.67 T
-0.41 (mance. A class that is de\336ned as) 108 448.67 P
4 9.5 Q
-0.84 (primary) 264.54 448.67 P
1 11 Q
-0.41 ( allows the compiler to generate the most) 304.44 448.67 P
(ef) 108 434.67 T
(\336cient code for accessing the slots de\336ned in the primary class \050whether the) 116.73 434.67 T
(accessor is applied to the primary class or one of its subclasses\051. However) 108 420.67 T
(, a pri-) 464.19 420.67 T
(mary class cannot be combined with any other primary class \050unless one is a sub-) 108 406.67 T
-0.06 (class of the other\051. This r) 108 392.67 P
-0.06 (estriction implies that you should delay declaring a class) 226.47 392.67 P
(to be primary until you ar) 108 378.67 T
(e quite sur) 233.95 378.67 T
(e of your inheritance design. Also, because) 285.01 378.67 T
(sealed classes ar) 108 364.67 T
(e alr) 186.62 364.67 T
(eady highly optimized, the) 207.48 364.67 T
4 9.5 Q
(primary) 341.34 364.67 T
1 11 Q
( declaration is of most) 381.24 364.67 T
(use for open classes.) 108 350.67 T
(As an example, consider again the class) 135 336.67 T
4 9.5 Q
(<sixty-unit>) 329.74 336.67 T
1 11 Q
(, and its slot) 398.14 336.67 T
4 9.5 Q
(total-) 459.42 336.67 T
(seconds) 108 322.67 T
1 11 Q
(, as used in the method) 147.9 322.67 T
4 9.5 Q
(decode-total-seconds) 263.16 322.67 T
1 11 Q
(:) 377.16 322.67 T
4 9 Q
(def) 108 302 T
(ine method decode-total-seconds \050sixty-unit :: <sixty-unit>\051) 124.2 302 T
(let\050total-minutes, seconds\051 = truncate/\050sixty-unit.total-seconds, 60\051;) 118.8 291 T
(let\050max-unit, minutes\051 = truncate/\050total-minutes, 60\051;) 118.8 280 T
(values \050max-unit, minutes, seconds\051;) 118.8 269 T
(end;) 108 258 T
1 11 Q
-0.24 (Although the generic function for the slot accessor) 108 237.67 P
4 9.5 Q
-0.5 (total-seconds) 353.45 237.67 P
1 11 Q
-0.24 ( is sealed and it) 427.55 237.67 P
(is trivial for the compiler to infer that its ar) 108 223.67 T
(gument is a) 315.01 223.67 T
4 9.5 Q
(<sixty-unit>) 374.34 223.67 T
1 11 Q
( in the call) 442.74 223.67 T
4 9.5 Q
(sixty-unit.total-seconds,) 108 209.67 T
1 11 Q
( because) 250.5 209.67 T
4 9.5 Q
(<sixty-unit>) 294.3 209.67 T
1 11 Q
( is declar) 362.7 209.67 T
(ed open, the com-) 405.79 209.67 T
-0.09 (piler cannot emit the most ef) 108 195.67 P
-0.09 (\336cient code for that call. Because an open class could) 246.43 195.67 P
(be mixed with any number of other classes, ther) 108 181.67 T
(e is no guarantee that the slots of) 341.04 181.67 T
(every object that is a) 108 167.67 T
4 9.5 Q
(<sixty-unit>) 209.8 167.67 T
1 11 Q
( will always be stor) 278.2 167.67 T
(ed in the same or) 371.89 167.67 T
(der \321) 455.04 167.67 T
(ther) 108 153.67 T
(e is no guarantee that) 127.4 153.67 T
4 9.5 Q
(total-seconds) 234.39 153.67 T
1 11 Q
( will always be the \336rst slot in an object) 308.49 153.67 T
(that is an indir) 108 139.67 T
(ect instance of) 178.76 139.67 T
4 9.5 Q
(<sixty-unit>) 250.33 139.67 T
1 11 Q
(, for instance.) 318.73 139.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 213
%%Page: "212" 214
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(212) 72 677.67 T
0 9.5 Q
(12.7 Primary classes) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(Declaring a class) 135 640.67 T
4 9.5 Q
(primary) 219.1 640.67 T
1 11 Q
( is essentially a guarantee to the compiler that it) 258.99 640.67 T
(can always put the primary class\325s slots in the same place in an instance and that) 108 626.67 T
(any other super) 108 612.67 T
(classes will have to adjust ar) 184.45 612.67 T
(ound that:) 322.13 612.67 T
4 9 Q
(def) 108 592 T
(ine primary open class <sixty-unit> \050<object>\051) 124.2 592 T
(slot total-seconds :: <integer>, init-keyword: total-seconds:,) 118.8 581 T
(init-value: 0;) 237.6 570 T
(end;) 108 559 T
1 11 Q
(By adding the) 108 538.67 T
4 9.5 Q
(primary) 179.01 538.67 T
1 11 Q
(declaration to the de\336nition, any library that subclasses) 224.6 538.67 T
4 9.5 Q
(<sixty-unit>) 108 524.67 T
1 11 Q
( is guaranteed to put) 176.4 524.67 T
4 9.5 Q
(total-seconds) 279.78 524.67 T
1 11 Q
( at the same of) 353.88 524.67 T
(fset. Hence, the) 423.84 524.67 T
(compiler can turn the call) 108 510.67 T
4 9.5 Q
(sixty-unit.total-seconds) 234.77 510.67 T
1 11 Q
( into a simple load with) 371.58 510.67 T
-0.14 (constant of) 108 496.67 P
-0.14 (fset without concern over what subclass of) 161.11 496.67 P
4 9.5 Q
-0.29 (<sixty-unit>) 369.81 496.67 P
1 11 Q
-0.14 ( was actually) 438.21 496.67 P
(passed as an ar) 108 482.67 T
(gument.) 181.39 482.67 T
(Because primary classes r) 108 260.67 T
(estrict extension \050they cannot be combined with other) 232.01 260.67 T
(primary classes\051, they should be used sparingly in libraries intended to be soft-) 108 246.67 T
(war) 108 232.67 T
(e components. Primary classes ar) 126.82 232.67 T
(e of most bene\336t in lar) 287.74 232.67 T
(ge, modular pr) 396.11 232.67 T
(o-) 468.62 232.67 T
(grams, wher) 108 218.67 T
(e all the clients of each component ar) 168.83 218.67 T
(e known, and the need for) 347.96 218.67 T
(extensibility is bounded.) 108 204.67 T
2 F
(Comparison with C++:) 141 448.67 T
1 F
( C++ avoids the pr) 255.46 448.67 T
(oblem of members \050slots\051) 345.91 448.67 T
(appearing at dif) 141 434.67 T
(fer) 218.53 434.67 T
(ent of) 231.61 434.67 T
(fsets in derived classes \050subclasses\051 because) 259.08 434.67 T
(when you call a function whose parameter is a base class \050super) 141 420.67 T
(class\051) 450.75 420.67 T
-0.39 (on a derived class, the derived class is automatically cast up to the base) 141 406.67 P
(class. Thus, within the function, it always appears you ar) 141 392.67 T
(e operating) 417.2 392.67 T
(on the base class.) 141 378.67 T
-0.4 (The drawback of such a scheme is that you \322lose\323 the original) 168 364.67 P
(object. W) 141 350.67 T
(ithin a function on a base class, you cannot ask \322of what) 185.3 350.67 T
(class is this object) 141 336.67 T
0 F
(r) 229.03 336.67 T
(eally) 233.11 336.67 T
1 F
( an object?\323 The C++ designers made an) 253.89 336.67 T
(explicit design decision not to include this capability in the lan-) 141 322.67 T
(guage, although they do r) 141 308.67 T
(ecognize the need for it in certain situa-) 266.48 308.67 T
(tions.) 141 294.67 T
135 461.88 135 287.13 2 L
V
0.25 H
0 Z
N
486 461.88 486 287.13 2 L
V
N
134.88 462 486.12 462 2 L
V
N
134.88 287 486.12 287 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 214
%%Page: "213" 215
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(12 Performance and Flexibility) 395.68 677.67 T
2 11 Q
(213) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(12.8  Summary) 108 638 T
1 11 Q
(In this chapter we cover) 108 617.67 T
(ed the following:) 224.52 617.67 T
(\245) 117 597.67 T
(W) 135 597.67 T
(e showed how Dylan can trade of) 144.99 597.67 T
(f performance and \337exibility to support) 307.99 597.67 T
(a range of pr) 135 583.67 T
(ogramming r) 196.81 583.67 T
(equir) 260.82 583.67 T
(ements.) 286.23 583.67 T
(\245) 117 563.67 T
(W) 135 563.67 T
(e showed how you can add type declarations to impr) 144.99 563.67 T
(ove performance.) 403.43 563.67 T
(\245) 117 543.67 T
(W) 135 543.67 T
(e showed how you can use limited types to impr) 144.99 543.67 T
(ove performance.) 381.33 543.67 T
(\245) 117 523.67 T
(W) 135 523.67 T
(e showed how you can open generic functions to enable modularity and) 144.99 523.67 T
(\337exibility) 135 509.67 T
(.) 180 509.67 T
(\245) 117 489.67 T
(W) 135 489.67 T
(e showed how you can open classes to enable modularity and \337exibility) 144.99 489.67 T
(.) 492.96 489.67 T
(\245) 117 469.67 T
(W) 135 469.67 T
(e showed how you can use sealed generic function domains to mitigate) 144.99 469.67 T
(the performance penalty of open classes and generic functions.) 135 455.67 T
(\245) 117 435.67 T
(W) 135 435.67 T
(e showed how you can use primary classes for very ef) 144.99 435.67 T
(\336cient slot access.) 407.05 435.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 215
%%Page: "214" 216
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(214) 72 677.67 T
0 9.5 Q
(12.8 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 216
%%Page: "215" 217
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(215) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(13) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(13) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Macr) 110 566.45 T
(os) 178.01 566.45 T
108 135 522 432 R
7 X
V
3 15 Q
0 X
(13.1  What is a \322macro\323?) 108 422 T
1 11 Q
(The term \322macr) 108 401.67 T
(o\323, as used in computer pr) 184.57 401.67 T
(ogramming originally was shorthand) 313.44 401.67 T
(for \322macr) 108 387.67 T
(o-instr) 154.51 387.67 T
(uction\323, meaning an instr) 186.29 387.67 T
(uction that r) 310.11 387.67 T
(epr) 369.55 387.67 T
(esented a sequence of) 385.57 387.67 T
-0.04 (several machine \050or micr) 108 373.67 P
-0.04 (o\051 instr) 227.92 373.67 P
-0.04 (uctions. Over time, the term has evolved to mean) 262.4 373.67 P
(any wor) 108 359.67 T
(d or phrase that stands for another phrase \050usually longer) 148.1 359.67 T
(, but built of) 427.77 359.67 T
(simpler components\051. Macr) 108 345.67 T
(os can be used for abbr) 241.4 345.67 T
(eviation, abstraction, simpli\336-) 353.07 345.67 T
(cation, or str) 108 331.67 T
(ucturing. Many computer languages support a macr) 168.69 331.67 T
(o facility) 422.81 331.67 T
(, and) 463.7 331.67 T
(they range fr) 108 317.67 T
(om simple text-based abbr) 170.32 317.67 T
(eviations to full languages permitting) 298.77 317.67 T
-0.32 (computed r) 108 303.67 P
-0.32 (eplacements. Macr) 164 303.67 P
-0.32 (os ar) 254.49 303.67 P
-0.32 (e pr) 277.24 303.67 P
-0.32 (ocessed befor) 295.7 303.67 P
-0.32 (e the pr) 360.77 303.67 P
-0.32 (ogram is compiled by) 396.92 303.67 P
2 F
-0.12 (expanding) 108 289.67 P
1 F
-0.12 ( each macr) 161.16 289.67 P
-0.12 (o into its r) 212.71 289.67 P
-0.12 (eplacement phrase as it is encounter) 261.39 289.67 P
-0.12 (ed until ther) 436.43 289.67 P
-0.12 (e) 496.1 289.67 P
(ar) 108 275.67 T
(e no mor) 117.65 275.67 T
(e macr) 160.69 275.67 T
(os. Macr) 192.95 275.67 T
(os can be used to extend the base language by de\336ning) 234.06 275.67 T
(mor) 108 261.67 T
(e sophisticated phrases in terms of simpler) 127.87 261.67 T
(, built-in phrases.) 334.42 261.67 T
(The primary use of macr) 135 247.67 T
(os in pr) 254.72 247.67 T
(ogramming is to extend or adapt the lan-) 291.26 247.67 T
(guage to allow a mor) 108 233.67 T
(e concise or r) 210.67 233.67 T
(eadable solution for a particular pr) 274 233.67 T
(oblem) 443.07 233.67 T
(domain. A simple pr) 108 219.67 T
(ogram rar) 208.52 219.67 T
(ely needs macr) 256.94 219.67 T
(os. Mor) 329.6 219.67 T
(e complicated pr) 366.32 219.67 T
(ograms,) 447.43 219.67 T
-0.43 (including Dylan itself, will use macr) 108 205.67 P
-0.43 (os often. Macr) 282.01 205.67 P
-0.43 (os have no visible r) 349.93 205.67 P
-0.43 (un-time cost) 441.76 205.67 P
-0.04 (or ef) 108 191.67 P
-0.04 (fect; they ar) 129.8 191.67 P
-0.04 (e transformations that take place during the compilation of a pr) 186.4 191.67 P
-0.04 (o-) 494.33 191.67 P
(gram and hence they can incr) 108 177.67 T
(ease compile time. Although macr) 251.07 177.67 T
(os may take the) 417.32 177.67 T
(form of function calls, they ar) 108 163.67 T
(e not functions \321 they cannot be passed as func-) 251.14 163.67 T
(tional ar) 108 149.67 T
(guments; they cannot be patched in a r) 148.29 149.67 T
(un-time image as a function can.) 336.51 149.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 217
%%Page: "216" 218
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(216) 72 677.67 T
0 9.5 Q
(13.2 Patterns and templates) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(Although macr) 108 640.67 T
(os may have parameters, they do not take ar) 181.9 640.67 T
(guments the way) 397.05 640.67 T
(functions do \321 the ar) 108 626.67 T
(guments to a macr) 213.07 626.67 T
(o ar) 303.04 626.67 T
(e not evaluated, they ar) 321.44 626.67 T
(e simply pr) 435.37 626.67 T
(o-) 490.4 626.67 T
(gram phrases that can be substituted in the r) 108 612.67 T
(eplacement phrase.) 323.97 612.67 T
(In its \336rst r) 135 598.67 T
(elease, Dylan pr) 188.21 598.67 T
(ovides a macr) 266.12 598.67 T
(o facility that is based on pattern-) 333.44 598.67 T
(matching and template substitution. This facility is mor) 108 584.67 T
(e powerful than a simple) 377.5 584.67 T
-0.36 (textual substitution facility) 108 570.67 P
-0.36 (, but simpler than a full computed or pr) 236.61 570.67 P
-0.36 (ocedural macr) 426.41 570.67 P
-0.36 (o) 495.6 570.67 P
(facility) 108 556.67 T
(. Dylan\325s macr) 140.13 556.67 T
(o facility is closely integrated with the Dylan language syn-) 210.08 556.67 T
(tax, permitting most macr) 108 542.67 T
(o needs to be satis\336ed. Dylan designers have planned) 234.01 542.67 T
-0.26 (for a full pr) 108 528.67 P
-0.26 (ocedural macr) 162.44 528.67 P
-0.26 (o capability) 231.73 528.67 P
-0.26 (, so that it can be added compatibly at a later) 286.88 528.67 P
(time if ther) 108 514.67 T
(e is suf) 161.54 514.67 T
(\336cient demand.) 194.93 514.67 T
3 15 Q
(13.2  Patterns and templates) 108 475 T
1 11 Q
(A Dylan macr) 108 454.67 T
(o has two basic parts: a) 176.04 454.67 T
2 F
(pattern) 291.16 454.67 T
1 F
( that is matched against a fragment) 327.21 454.67 T
(of code and a) 108 440.67 T
2 F
(template) 175.67 440.67 T
1 F
( that is substituted for the matched fragment, per) 219.66 440.67 T
(haps) 457.94 440.67 T
(including pieces of the original.) 108 426.67 T
(The simplest pattern the compiler can match is that of a function call. A) 135 412.67 T
2 F
(function macro) 108 398.67 T
1 F
( is invoked in exactly the same way a function is invoked. The) 184.08 398.67 T
-0.13 (name of the macr) 108 384.67 P
-0.13 (o is a module variable that can be used anywher) 191.91 384.67 P
-0.13 (e a function call) 425.2 384.67 P
(can occur) 108 370.67 T
(. T) 153.47 370.67 T
(ypically this simply means the name followed by a par) 164.73 370.67 T
(enthesized list) 430.55 370.67 T
(of ar) 108 356.67 T
(guments, but r) 130.07 356.67 T
(ecall that slot-style abbr) 201.15 356.67 T
(eviations and unary and binary opera-) 316.3 356.67 T
(tors ar) 108 342.67 T
(e also function calls.) 139 342.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
385.16 341.15 239.62 341.15 2 L
0 1 1 0 1 0 0 K
V
0.55 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 F
([--- Has this been discussed? X-r) 239.62 342.67 T
0 1 1 0 1 0 0 K
395.96 341.15 384.96 341.15 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(ef]) 384.96 342.67 T
0 0 0 1 0 0 0 K
1 F
0 0 0 1 0 0 0 K
-0.25 (The most important use of function-call macr) 135 328.67 P
-0.25 (os is to r) 353.01 328.67 P
-0.25 (earrange or delay eval-) 392.76 328.67 P
(uation of ar) 108 314.67 T
(guments. The built-in binary operator) 164.14 314.67 T
4 9.5 Q
(|) 350.73 314.67 T
1 11 Q
( \050discussed in Section 8.7.1,) 356.43 314.67 T
(page 1) 108 300.67 T
(18\051 uses this featur) 139.14 300.67 T
(e to evaluate its second ar) 229.93 300.67 T
(gument only if the \336rst ar) 354.76 300.67 T
(gu-) 478.98 300.67 T
(ment evaluates to) 108 286.67 T
4 9.5 Q
(#f) 196.65 286.67 T
1 11 Q
(:) 208.05 286.67 T
4 9 Q
(def) 108 266 T
(ine macro \134|) 124.2 266 T
({ \134|\050?arg1:expression, ?arg2:expression\051 } =>) 118.8 255 T
({ begin) 129.6 244 T
(let x = ?arg1;) 151.2 233 T
(if\050x\051 x else ?arg2 end) 151.2 222 T
(end }) 140.4 211 T
(end;) 108 200 T
1 11 Q
-0.31 (Recall that when the compiler sees the expr) 108 179.67 P
-0.31 (ession) 316.14 179.67 P
4 9.5 Q
-0.64 (a | b) 348.78 179.67 P
1 11 Q
-0.31 (, it tr) 376.01 179.67 P
-0.31 (eats it as if it wer) 398.16 179.67 P
-0.31 (e the) 478.59 179.67 P
(function call) 108 165.67 T
4 9.5 Q
(\134|\050a, b\051) 171.06 165.67 T
1 11 Q
(. If) 216.66 165.67 T
4 9.5 Q
(|) 232.28 165.67 T
1 11 Q
( wer) 237.98 165.67 T
(e actually de\336ned as a function, both ar) 259.32 165.67 T
(guments) 450.42 165.67 T
-0.11 (would be evaluated all the time. By de\336ning it as a macr) 108 151.67 P
-0.11 (o, which expands into an) 380.03 151.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 218
%%Page: "217" 219
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 473.46 677.67 T
2 11 Q
(217) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9.5 Q
0 X
(if) 108 640.67 T
1 11 Q
( statement, we get the desir) 119.4 640.67 T
(ed ef) 252.15 640.67 T
(fect of evaluating the second ar) 275.62 640.67 T
(gument only) 426.92 640.67 T
(when the \336rst ar) 108 626.67 T
(gument evaluates to) 187.65 626.67 T
4 9.5 Q
(#f) 289.05 626.67 T
1 11 Q
(. This is certainly a mor) 300.45 626.67 T
(e ef) 413.69 626.67 T
(\336cient imple-) 430.45 626.67 T
(mentation; sometimes avoiding evaluating the second ar) 108 612.67 T
(gument is important for) 382.83 612.67 T
(the corr) 108 598.67 T
(ect ef) 145.39 598.67 T
(fect also.) 170.61 598.67 T
(Looking at the macr) 135 584.67 T
(o de\336nition of) 232.4 584.67 T
4 9.5 Q
(|) 303.77 584.67 T
1 11 Q
(, we can infer some of the basics about) 309.47 584.67 T
(macr) 108 570.67 T
(os. A macr) 132.24 570.67 T
(o is intr) 183.97 570.67 T
(oduced by) 220.67 570.67 T
4 9.5 Q
(def) 274.61 570.67 T
(ine macro) 291.71 570.67 T
1 11 Q
(, followed by the macr) 343.01 570.67 T
(o name.) 451.7 570.67 T
(The de\336nition of the macr) 108 556.67 T
(o consists of a pattern enclosed in) 234.03 556.67 T
4 9.5 Q
({}) 399.84 556.67 T
1 11 Q
(, that mimics the) 411.24 556.67 T
-0.01 (fragment it is to match. Macr) 108 542.67 P
-0.01 (o parameters or) 248.33 542.67 P
2 F
-0.01 (pattern variables) 327.72 542.67 P
1 F
-0.01 ( ar) 412.34 542.67 P
-0.01 (e intr) 424.73 542.67 P
-0.01 (oduced by) 450.08 542.67 P
4 9.5 Q
(?) 108 528.67 T
1 11 Q
( and match fragments with particular) 113.7 528.67 T
4 9.5 Q
(constraints) 298.33 528.67 T
1 11 Q
( \050in this case) 361.04 528.67 T
4 9.5 Q
(:expression) 423.47 528.67 T
1 11 Q
(\051) 486.17 528.67 T
(and delimited by punctuation \050in this case) 108 514.67 T
4 9.5 Q
(\050) 315.83 514.67 T
1 11 Q
(,) 321.53 514.67 T
4 9.5 Q
(,) 327.03 514.67 T
1 11 Q
( and) 332.73 514.67 T
4 9.5 Q
(\051) 356.86 514.67 T
1 11 Q
(\051. The r) 362.56 514.67 T
(eplacement or expan-) 397.03 514.67 T
(sion of a macr) 108 500.67 T
(o is indicated by) 175.94 500.67 T
4 9.5 Q
(=>) 258.49 500.67 T
1 11 Q
( and de\336ned by a template enclosed in) 269.89 500.67 T
4 9.5 Q
({}) 460 500.67 T
1 11 Q
(. The) 471.4 500.67 T
(template is in the form of a code fragment wher) 108 486.67 T
(e pattern variables ar) 339.57 486.67 T
(e used to) 442.02 486.67 T
(substitute in the fragments they matched in the pattern.) 108 472.67 T
(Most development envir) 135 458.67 T
(onments pr) 254.66 458.67 T
(ovide a way to view code after all mac-) 310.21 458.67 T
(r) 108 444.67 T
(os have been expanded. This view can be helpful in debugging macr) 112.15 444.67 T
(os you) 444.89 444.67 T
(write. For example, showing the expanded view of the following code:) 108 430.67 T
4 9 Q
(def) 108 410 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 124.2 410 T
(if \050dir == north: | dir == south:\051) 118.8 399 T
(next-method\050\051;) 140.4 388 T
(else error \050"%= is not north: or south:", dir\051;) 129.6 377 T
(end;) 118.8 366 T
(end;) 108 355 T
1 11 Q
(W) 108 334.67 T
(ill yield something like this:) 118.39 334.67 T
4 9 Q
(def) 108 314 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 124.2 314 T
(if \050) 118.8 303 T
5 F
(begin let x =) 140.4 303 T
4 F
(dir == north:) 216 303 T
5 F
(; if \050x\051 x else) 286.2 303 T
4 F
( dir == south:) 367.2 303 T
5 F
(end) 448.2 303 T
4 F
(\051) 464.4 303 T
(next-method\050\051;) 140.4 292 T
(else error \050"%= is not north: or south:", dir\051;) 129.6 281 T
(end;) 118.8 270 T
(end;) 108 259 T
1 11 Q
-0.43 (The exact format will depend on the particular development envir) 108 238.67 P
-0.43 (onment and the) 425.78 238.67 P
-0.22 (exact de\336nition of) 108 224.67 P
4 9.5 Q
-0.46 (|) 197.61 224.67 P
1 11 Q
-0.22 ( in your system. Her) 203.31 224.67 P
-0.22 (e we see that the) 301.45 224.67 P
4 9.5 Q
-0.46 (|) 383.32 224.67 P
1 11 Q
-0.22 ( macr) 389.02 224.67 P
-0.22 (o is a useful short-) 415.79 224.67 P
-0.44 (hand because it much mor) 108 210.67 P
-0.44 (e succinctly expr) 234.86 210.67 P
-0.44 (esses our intent, even though we could) 314.91 210.67 P
(have written the same pr) 108 196.67 T
(ogram without it.) 229.11 196.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 219
%%Page: "218" 220
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(218) 72 677.67 T
0 9.5 Q
(13.3 Macro hygiene) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(13.3  Macro hygiene) 108 638 T
1 11 Q
(Note that we have displayed the code fragments inserted by the macr) 108 617.67 T
(o in italics.) 445.71 617.67 T
(This display helps to see exactly what the macr) 108 603.67 T
(o has done to our code, but it also) 336.36 603.67 T
-0.11 (draws attention to an important featur) 108 589.67 P
-0.11 (e of Dylan macr) 294.38 589.67 P
-0.11 (os \320 they ar) 371.2 589.67 P
-0.11 (e) 426.31 589.67 P
2 F
-0.11 (hygienic) 434.22 589.67 P
1 F
-0.11 ( mac-) 477.6 589.67 P
(r) 108 575.67 T
(os. The local variable) 112.15 575.67 T
5 9 Q
(x) 217.09 575.67 T
1 11 Q
( was cr) 222.49 575.67 T
(eated by the macr) 256.36 575.67 T
(o. Ther) 342.65 575.67 T
(e is a possibility that this) 376.72 575.67 T
(variable could con\337ict with another variable in the surr) 108 561.67 T
(ounding code. Consider) 376.25 561.67 T
(what might happen if the \336rst parameter to) 108 547.67 T
4 9.5 Q
(direction-setter) 321.58 547.67 T
1 11 Q
( had been) 412.78 547.67 T
4 9.5 Q
(x) 462.67 547.67 T
1 11 Q
( rather) 468.37 547.67 T
-0.1 (than) 108 533.67 P
4 9.5 Q
-0.2 (dir) 132.54 533.67 P
1 11 Q
-0.1 (. If Dylan macr) 148.83 533.67 P
-0.1 (os wer) 220.88 533.67 P
-0.1 (e simple textual substitutions, we would get the fol-) 252.8 533.67 P
(lowing expansion:) 108 519.67 T
4 9 Q
(def) 108 499 T
(ine method direction-setter \050x, latitude :: <latitude>\051) 124.2 499 T
(if \050begin let x = x == north:; if \050x\051 x else x == south: end\051) 118.8 488 T
(next-method\050\051;) 140.4 477 T
(else error \050"%= is not north: or south:", dir\051;) 129.6 466 T
(end;) 118.8 455 T
(end;) 108 444 T
1 11 Q
-0.3 (W) 108 423.67 P
-0.3 (ith simple textual substitutions, our macr) 118.39 423.67 P
-0.3 (o would intr) 316.82 423.67 P
-0.3 (oduce a bug: trying to use) 376.79 423.67 P
(a dir) 108 409.67 T
(ection of) 130.32 409.67 T
4 9.5 Q
(south:) 174.84 409.67 T
1 11 Q
( would always fail! Dylan\325s hygienic macr) 209.04 409.67 T
(os solve this pr) 413.34 409.67 T
(ob-) 486.23 409.67 T
(lem by dif) 108 395.67 T
(fer) 157.27 395.67 T
(entiating between the) 170.35 395.67 T
5 9 Q
(x) 278.17 395.67 T
1 11 Q
( intr) 283.57 395.67 T
(oduced by the macr) 303.66 395.67 T
(o and any other) 399.84 395.67 T
4 9.5 Q
(x) 479.1 395.67 T
1 11 Q
(which might appear in the original code.) 108 381.67 T
3 15 Q
(13.4  Evaluation in macros) 108 208 T
1 11 Q
-0.29 (Dylan\325s template macr) 108 187.67 P
-0.29 (os do no evaluation. In particular) 217.35 187.67 P
-0.29 (, the pattern variables of a) 376.8 187.67 P
(macr) 108 173.67 T
(o ar) 132.24 173.67 T
(e unlike function parameters. They name fragments of code, not the) 150.65 173.67 T
-0.34 (r) 108 159.67 P
-0.34 (esult of evaluating a fragment of code. If we wer) 112.15 159.67 P
-0.34 (e writing) 344.29 159.67 P
4 9.5 Q
-0.7 (|) 390.41 159.67 P
1 11 Q
-0.34 ( as a function, it could) 396.11 159.67 P
(have been written much mor) 108 145.67 T
(e simply:) 248.47 145.67 T
2 F
(Comparison with C:) 141 347.67 T
1 F
( Because C \050and C++\051 macr) 242.12 347.67 T
(os ar) 373.94 347.67 T
(e simply text sub-) 397 347.67 T
(stitutions, in many cases performed by a pr) 141 333.67 T
(e-pr) 351.24 333.67 T
(ocessor that has no) 370.93 333.67 T
(understanding of the C language, they ar) 141 319.67 T
(e inher) 340.69 319.67 T
(ently unhygienic. C) 374.13 319.67 T
(macr) 141 305.67 T
(o writers r) 165.24 305.67 T
(educe this pr) 215.48 305.67 T
(oblem by choosing unusual or unlikely) 278.37 305.67 T
(names for local variables in their macr) 141 291.67 T
(os \050such as) 326.48 291.67 T
4 9.5 Q
(_or_temp_x) 381.81 291.67 T
1 11 Q
(\051 but) 438.81 291.67 T
-0.21 (even this can be insuf) 141 277.67 P
-0.21 (\336cient in complex macr) 244.67 277.67 P
-0.21 (os. Dylan macr) 357.49 277.67 P
-0.21 (os in ef) 429.97 277.67 P
-0.21 (fect) 464.06 277.67 P
(automatically r) 141 263.67 T
(ename macr) 214.52 263.67 T
(o variables on each expansion to guaran-) 273.67 263.67 T
(teed unique names.) 141 249.67 T
135 360.88 135 242.13 2 L
V
0.25 H
0 Z
N
486 360.88 486 242.13 2 L
V
N
134.88 361 486.12 361 2 L
V
N
134.88 242 486.12 242 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 220
%%Page: "219" 221
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 473.46 677.67 T
2 11 Q
(219) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine method \134|\050arg1, arg2\051 if\050arg1\051 arg1 else arg2 end end;) 124.2 642 T
1 11 Q
(Which might make you think the macr) 108 621.67 T
(o could be simpli\336ed:) 295.97 621.67 T
4 9 Q
(def) 108 601 T
(ine macro \134|) 124.2 601 T
({ \134|\050?arg1:expression, ?arg2:expression\051 } =>) 118.8 590 T
({ if\050?arg1\051 ?arg1 else ?arg2 end }) 129.6 579 T
(end;) 108 568 T
1 11 Q
(But expanding this macr) 108 547.67 T
(o shows that is pr) 227.18 547.67 T
(obably not what you want:) 312.8 547.67 T
4 9 Q
(def) 108 527 T
(ine method direction-setter \050dir, latitude :: <latitude>\051) 124.2 527 T
(if \050) 118.8 516 T
5 F
(if \050) 140.4 516 T
4 F
(dir == north:) 162 516 T
5 F
(\051) 232.2 516 T
4 F
(dir == north:) 243 516 T
5 F
( else) 313.2 516 T
4 F
( dir == south:) 340.2 516 T
5 F
(end) 421.2 516 T
4 F
(\051) 437.4 516 T
(next-method\050\051;) 140.4 505 T
(else error \050"%= is not north: or south:", dir\051;) 129.6 494 T
(end;) 118.8 483 T
(end;) 108 472 T
1 11 Q
-0.4 (Although it is innocuous to r) 108 451.67 P
-0.4 (epeat) 245.89 451.67 P
4 9 Q
-0.78 (dir == north:) 274.48 451.67 P
1 11 Q
-0.4 (, other than the wasted r) 343.11 451.67 P
-0.4 (epetitive) 459.44 451.67 P
(computation, if the fragment bound to a pattern variable had some side-ef) 108 437.67 T
(fect,) 467.92 437.67 T
(such as incr) 108 423.67 T
(ementing a variable, you would not want that side-ef) 164.88 423.67 T
(fect r) 422.88 423.67 T
(epeated.) 447.17 423.67 T
-0.16 (For this r) 108 409.67 P
-0.16 (eason, you should be very car) 151.65 409.67 P
-0.16 (eful about r) 295.39 409.67 P
-0.16 (epeating a pattern variable in a) 351.29 409.67 P
-0.41 (template. Most often if you ar) 108 395.67 P
-0.41 (e r) 250.07 395.67 P
-0.41 (epeating a pattern variable, you should be using a) 261.83 395.67 P
(local variable instead, so that the fragment the pattern r) 108 381.67 T
(epr) 377.25 381.67 T
(esents is evaluated) 393.27 381.67 T
(only once \050as we did in the original version of the macr) 108 367.67 T
(o, with) 375.55 367.67 T
4 9 Q
(let x = ?arg1;) 412.17 367.67 T
1 11 Q
(\051.) 487.77 367.67 T
(Another potential pitfall can arise if the pattern variables appear in a dif) 108 353.67 T
(fer) 457.38 353.67 T
(ent) 470.46 353.67 T
(or) 108 339.67 T
(der in the template than they do in the pattern. In this case, unexpected r) 118.15 339.67 T
(esults) 470.98 339.67 T
(can occur if a side-ef) 108 325.67 T
(fect may af) 207.15 325.67 T
(fect the value of the other fragment. In this case,) 260.35 325.67 T
(you would again want to use local variables to ensur) 108 311.67 T
(e the fragments wer) 364.26 311.67 T
(e evalu-) 460.88 311.67 T
-0.21 (ated in their natural or) 108 297.67 P
-0.21 (der) 216.95 297.67 P
-0.21 (. These ar) 232.47 297.67 P
-0.21 (e not har) 278.29 297.67 P
-0.21 (d-and-fast r) 320.67 297.67 P
-0.21 (ules: the power of macr) 377.55 297.67 P
-0.21 (os) 490.79 297.67 P
(is due in a lar) 108 283.67 T
(ge part to their ability to manipulate code fragments without evalu-) 173.44 283.67 T
(ating them \321 but that power must be used judiciously) 108 269.67 T
(. If you ar) 372.15 269.67 T
(e designing mac-) 418.93 269.67 T
(r) 108 255.67 T
(os for use by others, they may expect function-like behavior) 112.15 255.67 T
(, and they may be) 401.8 255.67 T
(surprised if ther) 108 241.67 T
(e ar) 186.22 241.67 T
(e multiple or out-of-or) 203.89 241.67 T
(der evaluations of macr) 312.55 241.67 T
(o parameters.) 427.22 241.67 T
2 F
-0.15 (Comparison with C:) 141 207.67 P
1 F
-0.15 ( C pr) 241.83 207.67 P
-0.15 (ogrammers ar) 265.59 207.67 P
-0.15 (e familiar with this pr) 333.51 207.67 P
-0.15 (oblem. It) 438.48 207.67 P
(is inher) 141 193.67 T
(ent in macr) 177.04 193.67 T
(os because their ar) 231.64 193.67 T
(guments ar) 321.31 193.67 T
(e not evaluated.) 376.09 193.67 T
135 220.88 135 186.13 2 L
V
0.25 H
0 Z
N
486 220.88 486 186.13 2 L
V
N
134.88 221 486.12 221 2 L
V
N
134.88 186 486.12 186 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 221
%%Page: "220" 222
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(220) 72 677.67 T
0 9.5 Q
(13.5 Constraints) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(13.5  Constraints) 108 638 T
1 11 Q
(W) 108 617.67 T
(e saw in our) 117.99 617.67 T
4 9.5 Q
(|) 180.18 617.67 T
1 11 Q
( macr) 185.88 617.67 T
(o, the constraint) 212.88 617.67 T
4 9.5 Q
(expression) 293.71 617.67 T
1 11 Q
( used for the pattern variables) 350.71 617.67 T
4 9.5 Q
(?arg1) 108 603.67 T
1 11 Q
( and) 136.5 603.67 T
4 9.5 Q
(?arg2) 160.62 603.67 T
1 11 Q
(. Except for a few unusual cases, pattern variables must always) 189.12 603.67 T
(have a constraint associated with them. Constraints serve two purposes: they) 108 589.67 T
(limit the fragment that the pattern variable will match, and they de\336ne the mean-) 108 575.67 T
(ing of the pattern variable when it is substituted. As an example, consider the fol-) 108 561.67 T
(lowing) 108 547.67 T
2 F
(statement macro) 144.85 547.67 T
1 F
(, which we might \336nd useful for manipulating the) 227.03 547.67 T
(decoded parts of seconds:) 108 533.67 T
4 9 Q
(def) 108 513 T
(ine macro with-decoded-seconds) 124.2 513 T
({) 118.8 502 T
(with-decoded-seconds) 129.6 491 T
(\050?max:variable, ?min:variable, ?sec:variable = ?time:expression\051) 151.2 480 T
(?:body) 140.4 469 T
(end) 129.6 458 T
(} => {) 118.8 447 T
(begin) 129.6 436 T
(let \050?max, ?min, ?sec\051 = decode-total-seconds\050?time\051;) 140.4 425 T
(?body) 140.4 414 T
(end) 129.6 403 T
(}) 118.8 392 T
(end;) 108 381 T
1 11 Q
(The pr) 108 360.67 T
(eceding macr) 139.92 360.67 T
(o might be used as follows:) 204.78 360.67 T
4 9 Q
(def) 108 340 T
(ine method say \050time :: <time>\051) 124.2 340 T
(with-decoded-seconds\050hours, minutes, seconds = time\051;) 118.8 329 T
(format\050*window*, "%d:%d:%d", hours, minutes, seconds\051;) 129.6 318 T
(end;) 118.8 307 T
(end;) 108 296 T
1 11 Q
(A statement macr) 108 275.67 T
(o can appear anywher) 193.88 275.67 T
(e a) 301.77 275.67 T
4 9.5 Q
(begin) 318.03 275.67 T
1 11 Q
(\311) 352.23 275.67 T
4 9.5 Q
(end;) 365.98 275.67 T
1 11 Q
( block can appear) 388.78 275.67 T
(. A) 473.13 275.67 T
(statement macr) 108 261.67 T
(o intr) 182.57 261.67 T
(oduces a new) 208.66 261.67 T
2 F
(begin word) 277.43 261.67 T
1 F
(, in this case,) 335.18 261.67 T
4 9.5 Q
(with-decoded-sec-) 399.46 261.67 T
-0.45 (onds) 108 247.67 P
1 11 Q
-0.22 (, and is matched against a fragment that extends up to the matching) 130.8 247.67 P
4 9.5 Q
-0.45 (end) 460.67 247.67 P
1 11 Q
-0.22 (. The) 477.77 247.67 P
(pattern and the constraints on the pattern variables limit what the macr) 108 233.67 T
(o will) 454.68 233.67 T
(match \321 they de\336ne the syntax of this particular statement. In the case of) 108 219.67 T
4 9.5 Q
(with-) 467.48 219.67 T
-0.52 (decoded-seconds) 108 205.67 P
1 11 Q
-0.25 (, the syntax is a par) 193.5 205.67 P
-0.25 (enthesized list of thr) 285.56 205.67 P
-0.25 (ee) 383.8 205.67 P
4 9.5 Q
-0.52 (variable) 396.83 205.67 P
1 11 Q
-0.25 ( expr) 442.43 205.67 P
-0.25 (essions) 466.63 205.67 P
(\050that is,) 108 191.67 T
4 9.5 Q
(name :: <type>) 146.85 191.67 T
1 11 Q
(, wher) 226.65 191.67 T
(e the type is optional\051, the literal token) 257.14 191.67 T
4 9.5 Q
(=) 446.98 191.67 T
1 11 Q
(, and an) 452.68 191.67 T
4 9.5 Q
(expression) 108 177.67 T
1 11 Q
( \050any Dylan expr) 165 177.67 T
(ession yielding a value\051; followed by a body \050any) 246.37 177.67 T
-0.16 (sequence of expr) 108 163.67 P
-0.16 (essions separated by) 189.09 163.67 P
4 9.5 Q
-0.34 (;) 291.38 163.67 P
1 11 Q
-0.16 (, just as would be valid in a) 297.08 163.67 P
4 9.5 Q
-0.34 (begin) 431.17 163.67 P
1 11 Q
-0.16 (\311) 465.03 163.67 P
4 9.5 Q
-0.34 (end;) 478.61 163.67 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 222
%%Page: "221" 223
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 473.46 677.67 T
2 11 Q
(221) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(block\051. Note the use of the abbr) 108 640.67 T
(eviation) 259.77 640.67 T
4 9.5 Q
(?:body) 301.9 640.67 T
1 11 Q
(, to mean) 334.88 640.67 T
4 9.5 Q
(?body:body) 382.35 640.67 T
1 11 Q
( \050a pattern) 439.35 640.67 T
(variable,) 108 626.67 T
4 9.5 Q
(body) 152.81 626.67 T
1 11 Q
(, with the constraint) 174.39 626.67 T
4 9.5 Q
(body) 274.34 626.67 T
1 11 Q
(\051.) 297.14 626.67 T
(The constraints ar) 135 612.67 T
(e very similar to type declarations on variables \321 they) 221.8 612.67 T
(limit the acceptable values of the parameter variables and they help to document) 108 598.67 T
(the interface of the macr) 108 584.67 T
(o. The constraints also serve a second purpose: once the) 225.55 584.67 T
(compiler has r) 108 570.67 T
(ecognized a fragment under a particular constraint, it will ensur) 177.44 570.67 T
(e) 488.34 570.67 T
(the corr) 108 556.67 T
(ect behavior of that fragment when it is substituted in a template. For) 145.39 556.67 T
(example, suppose we had de\336ned a function macr) 108 542.67 T
(o:) 352.32 542.67 T
4 9 Q
(def) 108 522 T
(ine macro times) 124.2 522 T
({ times\050 ?arg1:expression, ?arg2:expression \051 } =>) 118.8 511 T
({ ?arg1 * ?arg2 }) 129.6 500 T
(end;) 108 489 T
1 11 Q
(W) 108 468.67 T
(e might use the macr) 117.99 468.67 T
(o as follows:) 219.34 468.67 T
4 9 Q
(times\0501 + 3, 2 + 5\051;) 108 448 T
1 11 Q
(This is the expanded macr) 108 427.67 T
(o:) 235.54 427.67 T
4 9 Q
(1 + 3) 108 407 T
5 F
(*) 140.4 407 T
4 F
( 2 + 5) 145.8 407 T
1 11 Q
(If the macr) 108 386.67 T
(o wer) 160.37 386.67 T
(e a simple text substitution macr) 187.72 386.67 T
(o, we can see that the r) 345.5 386.67 T
(esult) 455.67 386.67 T
(would be 12, rather than the 28 we wer) 108 372.67 T
(e expecting. But because in Dylan the con-) 297.46 372.67 T
-0.3 (straint is maintained when a pattern variable is substituted, that is, the expr) 108 358.67 P
-0.3 (ession) 471.34 358.67 P
(that makes up each of the pattern variables r) 108 344.67 T
(emains a single expr) 323.98 344.67 T
(ession, it is actu-) 423.04 344.67 T
(ally as if the macr) 108 330.67 T
(o automatically inserted par) 193.55 330.67 T
(entheses and the expansion wer) 330.14 330.67 T
(e:) 484.87 330.67 T
5 9 Q
(\050) 108 310 T
4 F
(1 + 3) 113.4 310 T
5 F
(\051 * \050) 140.4 310 T
4 F
(2 + 5) 167.4 310 T
5 F
(\051) 194.4 310 T
1 11 Q
(Some development envir) 108 289.67 T
(onments may display the implicit par) 229.76 289.67 T
(entheses of an) 412.01 289.67 T
(expr) 108 275.67 T
(ession constraint. Thus the macr) 129.7 275.67 T
(o will yield the expected r) 286.18 275.67 T
(esult of 28.) 411.91 275.67 T
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
198.79 260.12 135 260.12 2 L
0 1 1 0 1 0 0 K
V
0.42 H
0 Z
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
([--- If it gets r) 135 261.67 T
0 1 1 0 1 0 0 K
503.46 260.12 198.59 260.12 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(esolved, show how the implicit constraint of the context of the) 198.59 261.67 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 1 1 0 1 0 0 K
132.44 246.12 108 246.12 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(macr) 108 247.67 T
0 1 1 0 1 0 0 K
232.89 246.12 132.24 246.12 2 L
V
N
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
(o is also maintained]) 132.24 247.67 T
0 0 0 1 0 0 0 K
2 F
0 0 0 1 0 0 0 K
(Comparison with C:) 141 213.67 T
1 F
( C pr) 242.12 213.67 T
(ogrammers ar) 266.18 213.67 T
(e familiar with this pr) 334.25 213.67 T
(oblem.) 439.82 213.67 T
(Because C macr) 141 199.67 T
(os ar) 217.48 199.67 T
(e simple textual substitutions, the macr) 240.55 199.67 T
(o writer) 430.84 199.67 T
(must be sur) 141 185.67 T
(e to insert par) 197.89 185.67 T
(entheses ar) 264.73 185.67 T
(ound every macr) 318.65 185.67 T
(o variable when) 401.37 185.67 T
(it is substituted, and ar) 141 171.67 T
(ound the macr) 252.3 171.67 T
(o expansion itself to pr) 323.06 171.67 T
(event the) 433.73 171.67 T
(r) 141 157.67 T
(esulting expansion fr) 145.15 157.67 T
(om taking on new meanings.) 247.26 157.67 T
135 226.88 135 150.13 2 L
V
0.25 H
N
486 226.88 486 150.13 2 L
V
N
134.88 227 486.12 227 2 L
V
N
134.88 150 486.12 150 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 223
%%Page: "222" 224
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(222) 72 677.67 T
0 9.5 Q
(13.6 More complex patterns) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(13.6  More complex patterns) 108 638 T
1 11 Q
(The macr) 108 617.67 T
(os shown so far have all been very simple, a single pattern transformed) 153.41 617.67 T
-0.32 (into a single template. T) 108 603.67 P
-0.32 (o get a \337avor of the full power of the Dylan macr) 222.48 603.67 P
-0.32 (o system,) 456.37 603.67 P
(consider this) 108 589.67 T
2 F
(de\336ning macro) 172.85 589.67 T
1 F
(:) 248.32 589.67 T
4 9 Q
(def) 108 569 T
(ine macro aircraft-def) 124.2 569 T
(iner) 243 569 T
({ def) 118.8 558 T
(ine aircraft ?identif) 145.8 558 T
(ier:name :: ?type:name ?f) 259.2 558 T
(light } =>) 394.2 558 T
({ def) 129.6 547 T
(ine-aircraft\050?#\323identif) 156.6 547 T
(ier\323, \322<\322 ## ?type ## \322>\323, ?f) 280.8 547 T
(light\051 }) 437.4 547 T
(f) 113.4 536 T
(light:) 118.8 536 T
({ = ?:expression } => { f) 118.8 525 T
(light: ?expression }) 253.8 525 T
({ } => { }) 118.8 514 T
(end;) 108 503 T
(def) 108 481 T
(ine method def) 124.2 481 T
(ine-aircraft\050id :: <symbol>,) 199.8 481 T
(type :: subclass\050<aircraft>\051,) 270 470 T
(#rest options) 270 459 T
(#key f) 270 448 T
(light :: <f) 302.4 448 T
(light>\051) 361.8 448 T
(let craft = apply\050make, type, id: id, options\051;) 118.8 437 T
(*all-aircraft*[id] := craft;) 118.8 426 T
(unless\050empty?\050options\051\051) 118.8 415 T
(*all-f) 129.6 404 T
(lights*[f) 162 404 T
(light] := craft;) 210.6 404 T
(end;) 118.8 393 T
(end;) 108 382 T
1 11 Q
(W) 108 361.67 T
(e might use the macr) 117.99 361.67 T
(o) 219.34 361.67 T
4 9.5 Q
(def) 228.1 361.67 T
(ine aircraft) 245.2 361.67 T
1 11 Q
( as follows:) 313.6 361.67 T
4 9 Q
(def) 108 341 T
(ine aircraft UA1306 :: B707 = make\050<f) 124.2 341 T
(light>, \311\051;) 324 341 T
1 11 Q
(This macr) 108 320.67 T
(o shows a number of the mor) 156 320.67 T
(e esoteric featur) 298.16 320.67 T
(es of Dylan macr) 374.95 320.67 T
(os. First,) 456.78 320.67 T
(notice the pattern variable) 108 306.67 T
4 9.5 Q
(?f) 238.22 306.67 T
(light) 249.62 306.67 T
1 11 Q
(, which has no constraint, but rather is called) 278.12 306.67 T
(out as an) 108 292.67 T
2 F
(auxiliary pattern) 154.54 292.67 T
1 F
(. When the compiler matches this macr) 237.94 292.67 T
(o, it will try) 426.87 292.67 T
(each of the sub-patterns listed under \337ight for a match. When it \336nds a match, it) 108 278.67 T
-0.11 (will assign the pattern variable) 108 264.67 P
4 9.5 Q
-0.22 (?f) 260.41 264.67 P
-0.22 (light) 271.81 264.67 P
1 11 Q
-0.11 ( to the fragment r) 300.31 264.67 P
-0.11 (esulting fr) 384.47 264.67 P
-0.11 (om the match-) 433.99 264.67 P
-0.21 (ing pattern\325s template substitution. In ef) 108 250.67 P
-0.21 (fect, auxiliary patterns give a way of writ-) 302.01 250.67 P
-0.39 (ing new constraints, combined with the ef) 108 236.67 P
-0.39 (fect of a subr) 309.37 236.67 P
-0.39 (outine for matching. In this) 370.56 236.67 P
(particular case, we use the auxiliary pattern to look for an optional initial value) 108 222.67 T
(and transform it into a keywor) 108 208.67 T
(d ar) 256.91 208.67 T
(gument. \050W) 276.02 208.67 T
(e might consider extending this to) 332.89 208.67 T
(allow a mor) 108 194.67 T
(e natural expr) 165.95 194.67 T
(ession of the \337ight assignment in terms of origin, desti-) 233.59 194.67 T
(nation and time.\051) 108 180.67 T
-0.29 (The actual work of de\336ning an air) 135 166.67 P
-0.29 (craft is done by calling the helper function) 298.28 166.67 P
4 9.5 Q
-0.38 (def) 108 152.67 P
-0.38 (ine-aircraft) 125.1 152.67 P
1 11 Q
-0.19 (, but the macr) 193.5 152.67 P
-0.19 (o takes car) 259.74 152.67 P
-0.19 (e of getting the ar) 310.55 152.67 P
-0.19 (guments in or) 394.92 152.67 P
-0.19 (der) 462.19 152.67 P
-0.19 (. The) 477.71 152.67 P
(substitution) 108 138.67 T
4 9 Q
(?#"identif) 168.99 138.67 T
(ier") 222.99 138.67 T
1 11 Q
( turns the name) 244.6 138.67 T
4 9 Q
(UA1306) 323.37 138.67 T
1 11 Q
( into the symbol) 355.77 138.67 T
4 9 Q
(#"UA1306") 437 138.67 T
1 11 Q
( by) 485.6 138.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 224
%%Page: "223" 225
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(13 Macros) 473.46 677.67 T
2 11 Q
(223) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 X
(coercion) 108 640.67 T
1 F
(, which can be used to index the table) 150.16 640.67 T
4 9.5 Q
(*all-aircraft*) 334.91 640.67 T
1 11 Q
(. The substitution) 414.71 640.67 T
4 9 Q
-0.47 ("<" ## ?type ## ">") 108 626.67 P
1 11 Q
-0.24 ( turns the name) 208.7 626.67 P
4 9 Q
-0.47 (B707) 286.51 626.67 P
1 11 Q
-0.24 ( into the name) 308.11 626.67 P
4 9 Q
-0.47 (<B707>) 379.47 626.67 P
1 11 Q
-0.24 ( by) 411.87 626.67 P
2 F
-0.24 (concatenation) 429.09 626.67 P
1 F
-0.24 (,) 498.74 626.67 P
(allowing a mor) 108 612.67 T
(e concise format for our de\336ner) 181.67 612.67 T
(.) 333.65 612.67 T
3 15 Q
(13.7  More hygiene) 108 573 T
1 11 Q
(One mor) 108 552.67 T
(e note about hygiene: in a textual substitution macr) 150.93 552.67 T
(o, ther) 399.84 552.67 T
(e is some) 430.75 552.67 T
(chance that the global variables the macr) 108 538.67 T
(o uses \050in this case the helper function) 305.76 538.67 T
4 9.5 Q
(def) 108 524.67 T
(ine-aircraft) 125.1 524.67 T
1 11 Q
(\051 could be confused with a surr) 193.5 524.67 T
(ounding local variable of the) 344.35 524.67 T
-0.11 (same name wher) 108 510.67 P
-0.11 (e the macr) 190.31 510.67 P
-0.11 (o is called. This confusion does not happen in a Dylan) 240.37 510.67 P
-0.28 (macr) 108 496.67 P
-0.28 (o. The global variables used in a Dylan macr) 132.24 496.67 P
-0.28 (o always mean what they meant) 345.63 496.67 P
-0.21 (at the time the macr) 108 482.67 P
-0.21 (o was de\336ned, not at the time the macr) 203.77 482.67 P
-0.21 (o is called. It is as if the) 390.84 482.67 P
(variables wer) 108 468.67 T
(e automatically r) 173.32 468.67 T
(enamed to avoid con\337icts.) 254.86 468.67 T
(Another way to notice this featur) 135 454.67 T
(e is if you export a macr) 295.7 454.67 T
(o fr) 412.19 454.67 T
(om a module.) 428.76 454.67 T
(Only the macr) 108 440.67 T
(o need be exported. Its global r) 177.37 440.67 T
(efer) 327.33 440.67 T
(ences still r) 345.68 440.67 T
(efer to the pr) 399.67 440.67 T
(oper) 462.07 440.67 T
-0.02 (\050module-private\051 values they had at the time the macr) 108 426.67 P
-0.02 (o was de\336ned, just as what) 370.2 426.67 P
(occurs when a function exported fr) 108 412.67 T
(om a module calls module-private subr) 277.98 412.67 T
(ou-) 469.4 412.67 T
(tines.) 108 398.67 T
(Occasionally) 135 384.67 T
(, you will want to get ar) 195.98 384.67 T
(ound macr) 311.64 384.67 T
(o hygiene. Y) 364.39 384.67 T
(ou may want to) 423.75 384.67 T
(de\336ne a macr) 108 370.67 T
(o that cr) 173.56 370.67 T
(eates a variable that is visible at the macr) 213.17 370.67 T
(o call. Her) 411.63 370.67 T
(e is an) 461.24 370.67 T
(example of a simple statement macr) 108 356.67 T
(o that r) 282.64 356.67 T
(epeats its body until you cry uncle:) 317.36 356.67 T
4 9 Q
(def) 108 336 T
(ine macro repeat) 124.2 336 T
({ repeat ?:body end } =>) 118.8 325 T
({ block \050?=uncle\051) 129.6 314 T
(local method repeat \050\051 ?body; repeat\050\051 end;) 151.2 303 T
(repeat\050\051;) 151.2 292 T
(end }) 140.4 281 T
(end;) 108 270 T
1 11 Q
(The term) 108 249.67 T
4 9.5 Q
(?=uncle) 154.83 249.67 T
1 11 Q
(, says that the local variable) 194.73 249.67 T
4 9.5 Q
(uncle) 331.36 249.67 T
1 11 Q
(, which is the block exit vari-) 359.86 249.67 T
(able, will be visible when the macr) 108 235.67 T
(o is called exactly as) 276.01 235.67 T
4 9.5 Q
(uncle) 376.81 235.67 T
1 11 Q
(; ther) 405.31 235.67 T
(e will be no) 430.21 235.67 T
(hygienic r) 108 221.67 T
(enaming. Her) 156.49 221.67 T
(e is an example of using the macr) 223.16 221.67 T
(o to count to 100:) 384.87 221.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 225
%%Page: "224" 226
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(224) 72 677.67 T
0 9.5 Q
(13.8 Summary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(begin) 108 642 T
(let i = 0;) 118.8 631 T
(repeat) 118.8 620 T
(if \050i == 100\051 uncle\050\051 end;) 129.6 609 T
(i := i + 1;) 129.6 598 T
(end;) 118.8 587 T
(end;) 108 576 T
1 11 Q
-0.16 (Note that we would have to document how) 108 555.67 P
4 9.5 Q
-0.34 (repeat) 321.72 555.67 P
1 11 Q
-0.16 ( works for other users, or they) 355.92 555.67 P
(might be surprised if they tried to use) 108 541.67 T
4 9.5 Q
(uncle) 294.34 541.67 T
1 11 Q
( instead of) 322.84 541.67 T
4 9.5 Q
(i) 376.1 541.67 T
1 11 Q
( in the example.) 381.8 541.67 T
3 15 Q
(13.8  Summary) 108 502 T
1 11 Q
(In this chapter) 108 481.67 T
(, we have intr) 177.24 481.67 T
(oduced macr) 243.41 481.67 T
(os by explaining their purpose as a lan-) 306.64 481.67 T
(guage extension tool and by showing a range of Dylan macr) 108 467.67 T
(os. Macr) 399.97 467.67 T
(os can be) 441.08 467.67 T
-0.45 (very useful in tailoring the language to expr) 108 453.67 P
-0.45 (ess a particular pr) 318.57 453.67 P
-0.45 (oblem domain mor) 404.14 453.67 P
-0.45 (e) 496.43 453.67 P
(concisely) 108 439.67 T
(. In this chapter) 151.41 439.67 T
(, we cover) 226.15 439.67 T
(ed:) 275.36 439.67 T
(\245) 117 419.67 T
(Function, statement, and de\336ning macr) 135 419.67 T
(os) 325.94 419.67 T
(\245) 117 399.67 T
(Patterns and templates) 135 399.67 T
(\245) 117 379.67 T
(Macr) 135 379.67 T
(o-expansion) 159.94 379.67 T
(\245) 117 359.67 T
(Pattern variables and constraints) 135 359.67 T
(\245) 117 339.67 T
(Macr) 135 339.67 T
(o hygiene) 159.94 339.67 T
(\245) 117 319.67 T
(Evaluation in macr) 135 319.67 T
(os) 227.31 319.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 226
%%Page: "225" 227
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(225) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(14) 180 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(14) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Multiple Inheritance) 110 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(In the class r) 108 424.67 T
(elationships we have de\336ned so far) 168.68 424.67 T
(, each class has only one dir) 339.36 424.67 T
(ect) 473.62 424.67 T
-0.34 (super) 108 410.67 P
-0.34 (class. When a class has a single dir) 135.32 410.67 P
-0.34 (ect super) 300.31 410.67 P
-0.34 (class, the way in which that class) 343.78 410.67 P
-0.19 (inherits fr) 108 396.67 P
-0.19 (om its super) 155.44 396.67 P
-0.19 (class is called) 215.04 396.67 P
2 F
-0.19 (single inheritance) 282.26 396.67 P
1 F
-0.19 (. In Dylan, a class can have) 372.18 396.67 P
(mor) 108 382.67 T
(e than one dir) 127.87 382.67 T
(ect super) 195.02 382.67 T
(class. When a class has multiple super) 238.83 382.67 T
(classes, the way) 423.79 382.67 T
(in which that class inherits fr) 108 368.67 T
(om its super) 248.28 368.67 T
(classes is called) 308.28 368.67 T
2 F
(multiple inheritance) 386.01 368.67 T
1 F
(.) 488.95 368.67 T
(Why would we want to use multiple inheritance? Objects in the r) 135 354.67 T
(eal world) 451.24 354.67 T
-0.35 (often have complicated behavior) 108 340.67 P
-0.35 (. As we make our softwar) 265.29 340.67 P
-0.35 (e models mor) 388.02 340.67 P
-0.35 (e r) 453.53 340.67 P
-0.35 (ealistic,) 465.35 340.67 P
(we often \336nd that the behavior of the objects we cr) 108 326.67 T
(eate becomes mor) 353.46 326.67 T
(e compli-) 440.34 326.67 T
(cated as well. Multiple inheritance is often useful when we can br) 108 312.67 T
(eak down com-) 426.1 312.67 T
(plicated behavior into sets of characteristics that don\325t interfer) 108 298.67 T
(e with each other) 408.68 298.67 T
(.) 491.42 298.67 T
(we might be able to de\336ne a class to r) 108 284.67 T
(epr) 289.68 284.67 T
(esent each set of these characteristics.) 305.7 284.67 T
-0.08 (Then we can then de\336ne subclasses that combine sets of characteristics by inherit-) 108 270.67 P
(ing fr) 108 256.67 T
(om mor) 134.28 256.67 T
(e than one of our super) 172.61 256.67 T
(classes. W) 285.18 256.67 T
(e give some examples in this chap-) 333.51 256.67 T
(ter) 108 242.67 T
(.) 120.39 242.67 T
(Multiple inheritance doesn\325t change any of the r) 135 228.67 T
(ules of slot inheritance or) 368.3 228.67 T
(method dispatch we\325ve learned so far) 108 214.67 T
(. But it does r) 290.07 214.67 T
(equir) 354.36 214.67 T
(e some extensions to) 379.77 214.67 T
-0.41 (those r) 108 200.67 P
-0.41 (ules. This chapter explains how slot inheritance and method dispatch work) 140.53 200.67 P
(in Dylan in the pr) 108 186.67 T
(esence of multiple inheritance.) 193.95 186.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "225" 227
%%Page: "226" 228
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(226) 72 677.67 T
0 9.5 Q
(14.1 Example of multiple inheritance) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(14.1  Example of multiple inheritance) 108 638 T
1 11 Q
-0 (In our airport example, we have de\336ned a) 108 617.67 P
4 9.5 Q
-0.01 (<vehicle>) 315.02 617.67 P
1 11 Q
-0 ( class and used it as a super-) 366.32 617.67 P
(class for classes of air) 108 603.67 T
(craft. Figur) 211.29 603.67 T
(e 14.1 shows the hierar) 264.98 603.67 T
(chy of vehicle classes) 375.53 603.67 T
(we\325ve de\336ned.) 108 589.67 T
108 413.01 522 421 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 209.4 424.67 T
(e 14.1  Hierar) 235.61 424.67 T
(chy of vehicle classes) 299.99 424.67 T
-0.22 (So far) 108 392.67 P
-0.22 (, the only type of vehicle we\325ve de\336ned is air) 135 392.67 P
-0.22 (craft. Of course, ther) 349.92 392.67 P
-0.22 (e ar) 448.5 392.67 P
-0.22 (e many) 465.94 392.67 P
(other kinds of vehicle: automobiles, ships, and spacecraft, to name a few) 108 378.67 T
(. W) 458.08 378.67 T
(e) 473.56 378.67 T
(haven\325t needed these in the airport example so far) 108 364.67 T
(, but we can easily see how we) 350.33 364.67 T
(would need mor) 108 350.67 T
(e vehicle classes if we made the example mor) 188.76 350.67 T
(e r) 408.19 350.67 T
(ealistic.) 420.36 350.67 T
-0.16 (For example, airplanes need fuel befor) 135 336.67 P
-0.16 (e they can take of) 320.68 336.67 P
-0.16 (f. An airplane is typ-) 404.4 336.67 P
(ically fueled by a tr) 108 322.67 T
(uck at the gate. If fuel is unavailable or fueling is delayed, the) 201.4 322.67 T
(airplane\325s departur) 108 308.67 T
(e fr) 201.31 308.67 T
(om the gate is delayed as well. If we want to model the) 217.14 308.67 T
(takeof) 108 294.67 T
(f pr) 137.94 294.67 T
(ocess mor) 155.11 294.67 T
(e accurately) 203.22 294.67 T
(, we should take account of the need for fuel, and) 259.93 294.67 T
(speci\336cally the need to get fuel tr) 108 280.67 T
(ucks to airplanes pr) 268.78 280.67 T
(eparing for takeof) 364.37 280.67 T
(f.) 451.27 280.67 T
(W) 135 266.67 T
(e ar) 144.99 266.67 T
(e not going to handle the fuel-supply pr) 162.65 266.67 T
(oblem in this book. However) 356.38 266.67 T
(,) 496.68 266.67 T
(in this section we ar) 108 252.67 T
(e going to modify the vehicle class hierar) 204.56 252.67 T
(chy as a \336rst step) 403.4 252.67 T
(towar) 108 238.67 T
(d handling fuel tr) 136.41 238.67 T
(ucks and other kinds of gr) 221.94 238.67 T
(ound vehicles. In the pr) 349.25 238.67 T
(ocess,) 463.99 238.67 T
(we will develop an opportunity for using multiple inheritance in air) 108 224.67 T
(craft classes.) 438.37 224.67 T
3 13 Q
(14.1.1  Modeling ground vehicles) 108 193.34 T
1 11 Q
(An obvious early step in modeling the behavior of fuel tr) 135 173.67 T
(ucks would be to) 411.62 173.67 T
-0.46 (de\336ne a) 108 159.67 P
4 9.5 Q
-0.95 (<fuel-truck>) 148.4 159.67 P
1 11 Q
-0.46 ( class. Pr) 216.8 159.67 P
-0.46 (esumably we would want that class to inherit fr) 257.84 159.67 P
-0.46 (om) 485.99 159.67 P
108 135 522 648 C
149 441 481 572 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle>) 289.35 557.52 T
(<B707>) 297.9 451.52 T
(<standard-commercial-aircraft>) 229.5 486.85 T
(<standard-aircraft>) 260.85 522.19 T
318.31 544.37 315 532.83 311.69 544.37 315 544.37 4 Y
V
315 550.83 315 544.37 2 L
0.5 H
2 Z
N
318.31 509.04 315 497.5 311.69 509.04 315 509.04 4 Y
V
315 515.5 315 509.04 2 L
N
318.31 473.7 315 462.17 311.69 473.7 315 473.7 4 Y
V
315 480.17 315 473.7 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "226" 228
%%Page: "227" 229
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(227) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9.5 Q
0 X
-0.82 (<vehicle>) 108 640.67 P
1 11 Q
-0.4 (. Let\325s look at our curr) 159.3 640.67 P
-0.4 (ent de\336nitions of the) 264.52 640.67 P
4 9.5 Q
-0.82 (<vehicle>) 366.22 640.67 P
1 11 Q
-0.4 ( class and its only) 417.52 640.67 P
(dir) 108 626.67 T
(ect subclass,) 122.07 626.67 T
4 9.5 Q
(<standard-aircraft>) 184.35 626.67 T
1 11 Q
(:) 292.65 626.67 T
4 9 Q
(def) 108 606 T
(ine class <vehicle> \050<physical-object>\051) 124.2 606 T
(// Every vehicle has some unique identif) 118.8 595 T
(ication code) 334.8 595 T
(slot vehicle-id) 118.8 584 T
(:: <string>, required-init-keyword: id:;) 302.4 584 T
(// How much fuel is left in the fuel tank) 118.8 573 T
(slot fuel-remaining) 118.8 562 T
(:: <integer>,) 302.4 562 T
(init-keyword: fuel-remaining:,) 318.6 551 T
(init-value: 0;) 318.6 540 T
(// The normal operating speed of this class of vehicle) 118.8 529 T
(each-subclass slot cruising-speed :: <integer>;) 118.8 518 T
(end;) 108 507 T
(def) 108 488 T
(ine class <standard-aircraft> \050<vehicle>\051) 124.2 488 T
(slot altitude) 118.8 477 T
(:: <integer>, init-keyword: altitude:;) 291.6 477 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 118.8 466 T
(slot direction) 118.8 455 T
(:: <symbol>;) 291.6 455 T
(end;) 108 444 T
1 11 Q
-0.27 (As a start, we can de\336ne a) 108 423.67 P
4 9.5 Q
-0.56 (<fuel-truck>) 235.55 423.67 P
1 11 Q
-0.27 ( class as a subclass of) 303.95 423.67 P
4 9.5 Q
-0.56 (<vehicle>) 407.36 423.67 P
1 11 Q
-0.27 (. T) 458.66 423.67 P
-0.27 (o oper-) 469.62 423.67 P
(ate on instances of this class, we will no doubt need to know how much air) 108 409.67 T
(craft) 471.44 409.67 T
(fuel they contain. W) 108 395.67 T
(e de\336ne one initial slot,) 205.11 395.67 T
4 9.5 Q
(aircraft-fuel-remaining) 320.62 395.67 T
1 11 Q
(. W) 451.72 395.67 T
(e also) 467.21 395.67 T
(need to pr) 108 381.67 T
(ovide an initial value for the inherited slot) 157.51 381.67 T
4 9.5 Q
(cruising-speed) 365.06 381.67 T
1 11 Q
(.) 444.86 381.67 T
4 9 Q
(def) 108 361 T
(ine class <fuel-truck> \050<vehicle>\051) 124.2 361 T
(// How much aircraft fuel is left in the tank) 118.8 350 T
(slot aircraft-fuel-remaining) 118.8 339 T
(:: <integer>,) 291.6 339 T
(init-keyword: aircraft-fuel-remaining:,) 307.8 328 T
(init-value: 0;) 307.8 317 T
(inherited slot cruising-speed,) 118.8 306 T
(init-value: 25;) 307.8 306 T
(end;) 108 295 T
1 11 Q
(This de\336nition serves our immediate purpose, but the class hierar) 108 274.67 T
(chy isn\325t as) 427.01 274.67 T
-0.05 (modular as it might be. Suppose we want to take account of other vehicles on the) 108 260.67 P
(gr) 108 246.67 T
(ound, such as baggage carriers or \336r) 118.26 246.67 T
(e tr) 294.43 246.67 T
(ucks? W) 310.29 246.67 T
(e can anticipate that all gr) 350.21 246.67 T
(ound) 474.99 246.67 T
-0.37 (vehicles might have some common featur) 108 232.67 P
-0.37 (es, and we won\325t want each new class to) 308.57 232.67 P
(be a dir) 108 218.67 T
(ect subclass of) 144.42 218.67 T
4 9.5 Q
(<vehicle>) 216.37 218.67 T
1 11 Q
(. As a r) 267.67 218.67 T
(e\336nement, we de\336ne two intermediary) 301.54 218.67 T
(classes,) 108 204.67 T
4 9.5 Q
(<ground-vehicle>) 146.35 204.67 T
1 11 Q
( and) 237.55 204.67 T
4 9.5 Q
(<f) 261.67 204.67 T
(lying-vehicle>) 273.07 204.67 T
1 11 Q
(:) 352.87 204.67 T
4 9 Q
(def) 108 184 T
(ine class <ground-vehicle> \050<vehicle>\051) 124.2 184 T
(end;) 108 173 T
(def) 108 154 T
(ine class <f) 124.2 154 T
(lying-vehicle> \050<vehicle>\051) 189 154 T
(end;) 108 143 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 229
%%Page: "228" 230
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(228) 72 677.67 T
0 9.5 Q
(14.1 Example of multiple inheritance) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(def) 108 642 T
(ine class <fuel-truck> \050<ground-vehicle>\051) 124.2 642 T
(// How much aircraft fuel is left in the tank) 118.8 631 T
(slot aircraft-fuel-remaining) 118.8 620 T
(:: <integer>,) 291.6 620 T
(init-keyword: aircraft-fuel-remaining:,) 307.8 609 T
(init-value: 0;) 307.8 598 T
(inherited slot cruising-speed,) 118.8 587 T
(init-value: 25;) 307.8 587 T
(end;) 108 576 T
(def) 108 557 T
(ine class <standard-aircraft> \050<f) 124.2 557 T
(lying-vehicle>\051) 302.4 557 T
(slot altitude) 118.8 546 T
(:: <integer>, init-keyword: altitude:;) 291.6 546 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 118.8 535 T
(slot direction) 118.8 524 T
(:: <symbol>;) 291.6 524 T
(end;) 108 513 T
1 11 Q
-0.26 (At this point we ar) 108 492.67 P
-0.26 (e going to leave the fuel-tr) 197.84 492.67 P
-0.26 (uck simulation. W) 323.96 492.67 P
-0.26 (e do not model the) 411.41 492.67 P
-0.08 (fuel-supply pr) 108 478.67 P
-0.08 (oblem any further in this book. W) 177.69 478.67 P
-0.08 (e do want to explor) 340.65 478.67 P
-0.08 (e some oppor-) 434.5 478.67 P
-0.08 (tunities that our new class hierar) 108 464.67 P
-0.08 (chy pr) 266.56 464.67 P
-0.08 (esents for r) 297.39 464.67 P
-0.08 (estr) 350.74 464.67 P
-0.08 (ucturing the air) 368.52 464.67 P
-0.08 (craft classes.) 443.76 464.67 P
3 13 Q
(14.1.2  Aircraft classes and multiple inheritance) 108 433.33 T
1 11 Q
-0.2 (It is obvious that an airplane is a \337ying vehicle. But in our airport model, we have) 108 413.67 P
(to take account of an airplane\325s behavior on taxiways and r) 108 399.67 T
(unways and at gates.) 394.51 399.67 T
(In these situations the airplane is acting as a gr) 108 385.67 T
(ound vehicle. Per) 334.26 385.67 T
(haps it makes) 418.77 385.67 T
(sense to de\336ne our air) 108 371.67 T
(craft classes as subclasses of both) 215.01 371.67 T
4 9.5 Q
(<f) 378.47 371.67 T
(lying-vehicle>) 389.87 371.67 T
1 11 Q
( and) 469.67 371.67 T
4 9.5 Q
(<ground-vehicle>) 108 357.67 T
1 11 Q
(.) 199.2 357.67 T
(What do we gain by this? Consider cr) 135 343.67 T
(uising speed. When an airplane is in) 317.61 343.67 T
-0.41 (the air) 108 329.67 P
-0.41 (, we need to take the \337ying cr) 137.83 329.67 P
-0.41 (uising speed into account when estimating the) 278.04 329.67 P
(airplane\325s time of arrival at its destination. When the airplane is on the gr) 108 315.67 T
(ound,) 463.22 315.67 T
(we need to take the gr) 108 301.67 T
(ound cr) 215.44 301.67 T
(uising speed into account when estimating how) 253.09 301.67 T
-0.35 (much time the airplane will spend on a taxiway or r) 108 287.67 P
-0.35 (unway) 356.43 287.67 P
-0.35 (. It makes sense to have) 389.03 287.67 P
(some sense to have both \337ying and gr) 108 273.67 T
(ound cr) 291.63 273.67 T
(uising speeds \050though, of course,) 329.29 273.67 T
(gr) 108 259.67 T
(ound cr) 118.26 259.67 T
(uising speed is limited by safety r) 155.92 259.67 T
(ules\051. It also makes sense for \337ying) 319.18 259.67 T
(cr) 108 245.67 T
(uising speed to be a pr) 117.14 245.67 T
(operty of \337ying vehicles \321 mor) 226.84 245.67 T
(e speci\336cally) 380.69 245.67 T
(, air) 441.67 245.67 T
(craft \321) 460.02 245.67 T
(and for gr) 108 231.67 T
(ound cr) 156.4 231.67 T
(uising speed to be a pr) 194.05 231.67 T
(operty of gr) 303.76 231.67 T
(ound vehicles. After all, the) 361.12 231.67 T
(notion of cr) 108 217.67 T
(uising speed can be useful in estimating how long a fuel tr) 163.91 217.67 T
(uck will) 447.37 217.67 T
(take to arrive at a given gate.) 108 203.67 T
(W) 135 189.67 T
(e now r) 144.99 189.67 T
(estr) 181.49 189.67 T
(uctur) 199.26 189.67 T
(e our vehicle classes again, this time to make the air) 225.15 189.67 T
(craft) 475.57 189.67 T
(classes subclasses of both) 108 175.67 T
4 9.5 Q
(<f) 233.82 175.67 T
(lying-vehicle>) 245.22 175.67 T
1 11 Q
( and) 325.02 175.67 T
4 9.5 Q
(<ground-vehicle>) 349.14 175.67 T
1 11 Q
(. W) 440.34 175.67 T
(e need to) 455.83 175.67 T
(r) 108 161.67 T
(emove the) 112.15 161.67 T
4 9.5 Q
(cruising-speed) 165.38 161.67 T
1 11 Q
( slot fr) 245.18 161.67 T
(om the) 275.94 161.67 T
4 9.5 Q
(<vehicle>) 312.42 161.67 T
1 11 Q
( class and r) 363.72 161.67 T
(eplace it by two) 417.65 161.67 T
(slots,) 108 147.67 T
4 9.5 Q
(ground-cruising-speed) 135.62 147.67 T
1 11 Q
( for the) 255.32 147.67 T
4 9.5 Q
(<ground-vehicle>) 292.84 147.67 T
1 11 Q
( class and) 384.04 147.67 T
4 9.5 Q
(f) 433.83 147.67 T
(lying-) 439.53 147.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 230
%%Page: "229" 231
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(229) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9.5 Q
0 X
(cruising-speed) 108 640.67 T
1 11 Q
( for the) 187.8 640.67 T
4 9.5 Q
(<f) 225.32 640.67 T
(lying-vehicle>) 236.72 640.67 T
1 11 Q
( class. W) 316.52 640.67 T
(e can also take this opportu-) 357.67 640.67 T
(nity to move the) 108 626.67 T
4 9.5 Q
(altitude) 190.36 626.67 T
1 11 Q
( slot fr) 235.96 626.67 T
(om the) 266.72 626.67 T
4 9.5 Q
(<standard-aircraft>) 303.2 626.67 T
1 11 Q
( class to the) 411.5 626.67 T
4 9.5 Q
(<f) 470.26 626.67 T
(ly-) 481.66 626.67 T
(ing-vehicle>) 108 612.67 T
1 11 Q
( class, since any \337ying vehicle is likely to need to keep track of its) 176.4 612.67 T
(altitude. Finally) 108 598.67 T
(, we intr) 183.71 598.67 T
(oduce multiple inheritance by r) 223.74 598.67 T
(ede\336ning the) 376.48 598.67 T
4 9.5 Q
(<standard-) 443.27 598.67 T
(aircraft>) 108 584.67 T
1 11 Q
( class to be a dir) 159.3 584.67 T
(ect subclass of both) 236.48 584.67 T
4 9.5 Q
(<f) 333.25 584.67 T
(lying-vehicle>) 344.65 584.67 T
1 11 Q
( and) 424.45 584.67 T
4 9.5 Q
(<ground-) 448.58 584.67 T
(vehicle>) 108 570.67 T
1 11 Q
(.) 153.6 570.67 T
4 9 Q
(def) 108 550 T
(ine class <vehicle> \050<physical-object>\051) 124.2 550 T
(// Every vehicle has some unique identif) 118.8 539 T
(ication code) 334.8 539 T
(slot vehicle-id) 118.8 528 T
(:: <string>, required-init-keyword: id:;) 302.4 528 T
(// How much fuel is left in the fuel tank) 118.8 517 T
(slot fuel-remaining) 118.8 506 T
(:: <integer>,) 302.4 506 T
(init-keyword: fuel-remaining:,) 318.6 495 T
(init-value: 0;) 318.6 484 T
(end;) 108 473 T
(def) 108 454 T
(ine class <ground-vehicle> \050<vehicle>\051) 124.2 454 T
(// The normal operating speed of this class of vehicle) 118.8 443 T
(each-subclass slot ground-cruising-speed :: <integer>;) 118.8 432 T
(end;) 108 421 T
(def) 108 402 T
(ine class <f) 124.2 402 T
(lying-vehicle> \050<vehicle>\051) 189 402 T
(// The normal operating speed of this class of vehicle) 118.8 391 T
(each-subclass slot f) 118.8 380 T
(lying-cruising-speed :: <integer>;) 226.8 380 T
(slot altitude) 118.8 369 T
(:: <integer>, init-keyword: altitude:;) 291.6 369 T
(end;) 108 358 T
(def) 108 339 T
(ine class <standard-aircraft> \050<f) 124.2 339 T
(lying-vehicle>, <ground-vehicle>\051) 302.4 339 T
(each-subclass slot needs-runway :: <boolean>, init-value: #t;) 118.8 328 T
(slot direction) 118.8 317 T
(:: <symbol>;) 291.6 317 T
(end;) 108 306 T
1 11 Q
(Now) 108 285.67 T
(, all air) 131.31 285.67 T
(craft classes have two slots for cr) 164.31 285.67 T
(uising speed:) 323.06 285.67 T
4 9.5 Q
(ground-cruising-) 390.06 285.67 T
(speed) 108 271.67 T
1 11 Q
(, inherited fr) 136.5 271.67 T
(om the) 196.96 271.67 T
4 9.5 Q
(<ground-vehicle>) 233.43 271.67 T
1 11 Q
( class, and) 324.63 271.67 T
4 9.5 Q
(f) 377.17 271.67 T
(lying-cruising-speed) 382.87 271.67 T
1 11 Q
(,) 496.87 271.67 T
(inherited fr) 108 257.67 T
(om the) 162.96 257.67 T
4 9.5 Q
(<f) 199.43 257.67 T
(lying-vehicle>) 210.83 257.67 T
1 11 Q
( class. W) 290.63 257.67 T
(e have to modify our) 331.78 257.67 T
4 9.5 Q
(<B707>) 436.18 257.67 T
1 11 Q
( class) 470.38 257.67 T
(to pr) 108 243.67 T
(ovide default initial values for these slots.) 131.1 243.67 T
4 9 Q
(def) 108 223 T
(ine class <B707> \050<standard-commercial-aircraft>\051) 124.2 223 T
(inherited slot f) 118.8 212 T
(lying-cruising-speed, init-value: 368;) 205.2 212 T
(inherited slot ground-cruising-speed, init-value: 45;) 118.8 201 T
(end;) 108 190 T
1 11 Q
(Finally) 108 169.67 T
(, to complete the example, we would change our) 140.52 169.67 T
4 9.5 Q
(<fuel-truck>) 379.13 169.67 T
1 11 Q
( class de\336-) 447.53 169.67 T
(nition to pr) 108 155.67 T
(ovide a default initial value for) 162.65 155.67 T
4 9.5 Q
(ground-cruising-speed) 315.76 155.67 T
1 11 Q
( instead of) 435.46 155.67 T
4 9.5 Q
(cruising-speed) 108 141.67 T
1 11 Q
(.) 187.8 141.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 231
%%Page: "230" 232
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(230) 72 677.67 T
0 9.5 Q
(14.2 Multiple Inheritance and slots) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(14.2  Multiple Inheritance and slots) 108 638 T
1 11 Q
-0.34 (For the most part, using multiple inheritance does not pr) 108 617.67 P
-0.34 (esent special pr) 380.52 617.67 P
-0.34 (oblems in) 454.63 617.67 P
(using slots. Recall that a class inherits all the slots of its super) 108 603.67 T
(classes. A subclass) 404.57 603.67 T
-0.03 (can also add slots of its own, but it cannot r) 108 589.67 P
-0.03 (emove or r) 317.88 589.67 P
-0.03 (eplace any slots de\336ned by) 370.29 589.67 P
(its super) 108 575.67 T
(classes. A slot can appear only once in a class and all its super) 149.52 575.67 T
(classes.) 449.11 575.67 T
(Thus, a class\325s slots ar) 108 561.67 T
(e the union of its slots and those of all its super) 214.1 561.67 T
(classes, and) 441.65 561.67 T
(duplicate slot de\336nitions ar) 108 547.67 T
(e not permitted. This is tr) 241.07 547.67 T
(ue whether a class has one) 363.85 547.67 T
(dir) 108 533.67 T
(ect super) 122.07 533.67 T
(class or mor) 165.88 533.67 T
(e than one.) 224.51 533.67 T
(Ther) 135 519.67 T
(e ar) 157.56 519.67 T
(e some ways, though, in which subclasses and super) 175.23 519.67 T
(classes can) 430.09 519.67 T
(have distinct ef) 108 505.67 T
(fects on the same slot. One way is by pr) 181.87 505.67 T
(oviding default values for) 373.63 505.67 T
-0.44 (the slot. Even though duplicate slots ar) 108 491.67 P
-0.44 (e not permitted, a class can pr) 294.47 491.67 P
-0.44 (ovide its own) 436.62 491.67 P
(default value for a slot that it inherits fr) 108 477.67 T
(om a super) 299.1 477.67 T
(class. The subclass can do this) 353.15 477.67 T
(by supplying an) 108 463.67 T
4 9.5 Q
(inherited slot) 189.91 463.67 T
1 11 Q
( option in its class de\336nition that includes an) 269.71 463.67 T
4 9.5 Q
(init-value:) 108 449.67 T
1 11 Q
( or) 170.7 449.67 T
4 9.5 Q
(init-function:) 186.55 449.67 T
1 11 Q
( speci\336cation.) 266.35 449.67 T
(Suppose that mor) 135 435.67 T
(e than one class de\336nes a default value for the same slot.) 221.01 435.67 T
(Which default takes pr) 108 421.67 T
(ecedence? When each class has only one dir) 218.6 421.67 T
(ect super) 430.78 421.67 T
(class,) 474.6 421.67 T
-0.26 (the answer is easy: the default value pr) 108 407.67 P
-0.26 (ovided by the) 295.58 407.67 P
2 F
-0.26 (most speci\336c) 364.62 407.67 P
1 F
-0.26 ( class takes pr) 428.81 407.67 P
-0.26 (e-) 495.07 407.67 P
(cedence. A default value for a subclass overrides a default value for a super) 108 393.67 T
(class.) 474.72 393.67 T
(But what if a class has mor) 135 379.67 T
(e than one dir) 264.81 379.67 T
(ect super) 331.97 379.67 T
(class, and each super) 375.78 379.67 T
(class) 477.69 379.67 T
(pr) 108 365.67 T
(ovides a dif) 118.76 365.67 T
(fer) 175.22 365.67 T
(ent default value for the same slot? Imagine, for example, that) 188.3 365.67 T
-0.48 (our) 108 351.67 P
4 9.5 Q
-1 (<ground-vehicle>) 127.25 351.67 P
1 11 Q
-0.48 ( and) 218.45 351.67 P
4 9.5 Q
-1 (<f) 241.61 351.67 P
-1 (lying-vehicle>) 253.01 351.67 P
1 11 Q
-0.48 ( classes each had a dif) 332.81 351.67 P
-0.48 (fer) 436.56 351.67 P
-0.48 (ent default) 449.64 351.67 P
(value for the) 108 337.67 T
4 9.5 Q
(fuel-remaining) 172.34 337.67 T
1 11 Q
( slot, which they inherit fr) 252.14 337.67 T
(om the common super-) 377.75 337.67 T
(class) 108 323.67 T
4 9.5 Q
(<vehicle>) 133.66 323.67 T
1 11 Q
(:) 184.96 323.67 T
4 9 Q
(def) 108 303 T
(ine class <ground-vehicle> \050<vehicle>\051) 124.2 303 T
(inherited-slot fuel-remaining, init-value: 30;) 118.8 292 T
(...) 118.8 281 T
(end;) 108 270 T
(def) 108 251 T
(ine class <f) 124.2 251 T
(lying-vehicle> \050<vehicle>\051) 189 251 T
(inherited-slot fuel-remaining, init-value: 3000;) 118.8 240 T
(...) 118.8 229 T
(end;) 108 218 T
1 11 Q
-0.26 (Now) 108 197.67 P
-0.26 (, neither of these classes is mor) 131.31 197.67 P
-0.26 (e speci\336c than the other) 278.92 197.67 P
-0.26 (. So when we cr) 392.27 197.67 P
-0.26 (eate an) 467.49 197.67 P
(instance of) 108 183.67 T
4 9.5 Q
(<standard-aircraft>) 163.08 183.67 T
1 11 Q
(, which has both) 271.38 183.67 T
4 9.5 Q
(<ground-vehicle>) 353.83 183.67 T
1 11 Q
( and) 445.03 183.67 T
4 9.5 Q
(<f) 469.16 183.67 T
(ly-) 480.56 183.67 T
-0.26 (ing-vehicle>) 108 169.67 P
1 11 Q
-0.13 ( as dir) 176.4 169.67 P
-0.13 (ect super) 205.88 169.67 P
-0.13 (classes, what is the default initial value for the) 249.56 169.67 P
4 9.5 Q
-0.26 (fuel-) 475.5 169.67 P
(remaining) 108 155.67 T
1 11 Q
( slot:) 159.3 155.67 T
4 9.5 Q
(30) 185.01 155.67 T
1 11 Q
( or) 196.41 155.67 T
4 9.5 Q
(3000) 212.26 155.67 T
1 11 Q
(?) 235.06 155.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 232
%%Page: "231" 233
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(231) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
-0.16 (T) 135 640.67 P
-0.16 (o answer this question, Dylan needs an additional way of or) 140.73 640.67 P
-0.16 (dering classes,) 431.16 640.67 P
(called a) 108 626.67 T
2 F
(class precedence list) 147.78 626.67 T
1 F
(. The next section describes how Dylan constr) 249.17 626.67 T
(ucts) 470.75 626.67 T
(the class pr) 108 612.67 T
(ecedence list. The short answer to our question about default initial) 162.43 612.67 T
-0.1 (slot values is that Dylan uses the default value pr) 108 598.67 P
-0.1 (ovided by the class that appears) 346.05 598.67 P
(earlier in the class pr) 108 584.67 T
(ecedence list.) 208.66 584.67 T
(W) 135 570.67 T
(e shall see that the class pr) 144.99 570.67 T
(ecedence list is also important for method dis-) 272.93 570.67 T
(patch in the pr) 108 556.67 T
(esence of multiple inheritance. Suppose, for example, that we had) 178.85 556.67 T
(two getter or two setter methods for the) 108 542.67 T
4 9.5 Q
(fuel-remaining) 304.4 542.67 T
1 11 Q
( slot, one specialized on) 384.2 542.67 T
(the) 108 528.67 T
4 9.5 Q
(<f) 126.01 528.67 T
(lying-vehicle>) 137.41 528.67 T
1 11 Q
( class and the other specialized on the) 217.21 528.67 T
4 9.5 Q
(<ground-vehicle>) 403.29 528.67 T
1 11 Q
(class. Which method would be selected to get or set the slot value? W) 108 514.67 T
(e r) 443.79 514.67 T
(eturn to) 455.95 514.67 T
(the issue of method dispatch after we see how Dylan constr) 108 500.67 T
(ucts the class pr) 397.24 500.67 T
(ece-) 474.19 500.67 T
(dence list.) 108 486.67 T
3 15 Q
(14.3  The class precedence list) 108 447 T
1 11 Q
(When each class has only one dir) 108 426.67 T
(ect super) 268.58 426.67 T
(class, the r) 312.39 426.67 T
(elations among super) 362.96 426.67 T
(classes) 467.35 426.67 T
(and subclasses form a) 108 412.67 T
2 F
(tree) 217.08 412.67 T
1 F
(, or) 236.02 412.67 T
2 F
(hierarchy) 254.62 412.67 T
1 F
(. For every subclass in the tr) 301.06 412.67 T
(ee, ther) 436.88 412.67 T
(e is a) 472.32 412.67 T
-0.15 (well-de\336ned or) 108 398.67 P
-0.15 (dering in terms of) 182.3 398.67 P
2 F
-0.15 (speci\336city) 271.6 398.67 P
1 F
-0.15 ( for that class and all its super) 322.3 398.67 P
-0.15 (classes.) 465.8 398.67 P
(A subclass is always mor) 108 384.67 T
(e speci\336c than any of its super) 229.74 384.67 T
(classes. When each class) 376.03 384.67 T
(has only one super) 108 370.67 T
(class, we can unambiguously or) 199.54 370.67 T
(der any given class and all its) 354.49 370.67 T
(super) 108 356.67 T
(classes fr) 135.32 356.67 T
(om) 178.73 356.67 T
2 F
(most speci\336c) 197.2 356.67 T
1 F
( to) 261.65 356.67 T
2 F
(least speci\336c) 276.74 356.67 T
1 F
(. Figur) 339.96 356.67 T
(e 14.1 illustrates part of) 371.67 356.67 T
-0.12 (such an or) 108 342.67 P
-0.12 (dering for our original, single-inheritance de\336nitions of) 157.9 342.67 P
4 9.5 Q
-0.25 (<vehicle>) 428.82 342.67 P
1 11 Q
-0.12 ( and) 480.12 342.67 P
(its subclasses.) 108 328.67 T
(W) 135 314.67 T
(ith multiple inheritance, the r) 145.4 314.67 T
(elations among super) 287.61 314.67 T
(classes and subclasses) 392 314.67 T
(can form a) 108 300.67 T
2 F
(graph) 162.26 300.67 T
1 F
(, or) 191.6 300.67 T
2 F
(heterarchy) 210.2 300.67 T
1 F
(. It is not always possible to or) 262.14 300.67 T
(der a class and all) 408.89 300.67 T
-0.24 (its super) 108 286.67 P
-0.24 (classes in terms of speci\336city) 149.28 286.67 P
-0.24 (. It is still tr) 286.86 286.67 P
-0.24 (ue that a subclass is mor) 340.5 286.67 P
-0.24 (e speci\336c) 457.55 286.67 P
-0 (than any of its super) 108 272.67 P
-0 (classes. But we cannot always or) 207.34 272.67 P
-0 (der its super) 365.13 272.67 P
-0 (classes in terms) 425.74 272.67 P
(of speci\336city) 108 258.67 T
(.) 168.27 258.67 T
(Figur) 135 244.67 T
(e 14.2 illustrates our curr) 161.21 244.67 T
(ent de\336nitions of) 281.58 244.67 T
4 9.5 Q
(<vehicle>) 366.86 244.67 T
1 11 Q
( and its sub-) 418.16 244.67 T
(classes.) 108 230.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 233
%%Page: "232" 234
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(232) 72 677.67 T
0 9.5 Q
(14.3 The class precedence list) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
108 404.01 522 412 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 141 415.67 T
(e 14.2  Heterar) 167.21 415.67 T
(chy of vehicle classes using multiple inheritance) 237.25 415.67 T
(Consider) 108 383.67 T
4 9.5 Q
(<B707>) 155.16 383.67 T
1 11 Q
( and its super) 189.36 383.67 T
(classes. W) 255.01 383.67 T
(e can or) 303.34 383.67 T
(der) 341.05 383.67 T
4 9.5 Q
(<b707>) 360.13 383.67 T
1 11 Q
(,) 394.33 383.67 T
4 9.5 Q
(<standard-commer-) 399.83 383.67 T
(cial-aircraft>) 108 369.67 T
1 11 Q
(, and) 187.8 369.67 T
4 9.5 Q
(<standard-aircraft>) 214.67 369.67 T
1 11 Q
( fr) 322.97 369.67 T
(om mor) 333.53 369.67 T
(e speci\336c to less speci\336c.) 371.87 369.67 T
(But we cannot say that either) 108 355.67 T
4 9.5 Q
(<ground-vehicle>) 252.09 355.67 T
1 11 Q
( or) 343.29 355.67 T
4 9.5 Q
(<f) 359.14 355.67 T
(lying-vehicle>) 370.54 355.67 T
1 11 Q
( is mor) 450.34 355.67 T
(e) 483.57 355.67 T
(speci\336c than the other) 108 341.67 T
(, because neither class is a subclass of the other) 214.36 341.67 T
(. W) 440.93 341.67 T
(e could) 456.41 341.67 T
(or) 108 327.67 T
(der) 118.15 327.67 T
4 9.5 Q
(<b707>) 137.24 327.67 T
1 11 Q
( and its super) 171.44 327.67 T
(classes in two ways, fr) 237.09 327.67 T
(om mor) 345.32 327.67 T
(e speci\336c to less speci\336c:) 383.65 327.67 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 307.01 T
(<f) 118.8 296.01 T
(lying-vehicle>, <ground-vehicle>, <vehicle>, <physical-object>, <object>) 129.6 296.01 T
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 277.01 T
(<ground-vehicle>, <f) 118.8 266.01 T
(lying-vehicle>, <vehicle>, <physical-object>, <object>) 226.8 266.01 T
1 11 Q
(Dylan needs a way to determine which of these or) 108 245.67 T
(derings to use. It does this by) 351.54 245.67 T
(constr) 108 231.67 T
(ucting a) 137.8 231.67 T
2 F
(class precedence list) 179.62 231.67 T
1 F
( for) 281.02 231.67 T
4 9.5 Q
(<B707>) 300.53 231.67 T
1 11 Q
( and its super) 334.73 231.67 T
(classes. T) 400.38 231.67 T
(o under-) 444.46 231.67 T
-0.05 (stand how this works, r) 108 217.67 P
-0.05 (ecall that the) 222.32 217.67 P
4 9.5 Q
-0.1 (def) 286.81 217.67 P
-0.1 (ine class) 303.91 217.67 P
1 11 Q
-0.05 ( form for a class includes a list) 355.11 217.67 P
(of super) 108 203.67 T
(classes. Recall that we de\336ned) 147.74 203.67 T
4 9.5 Q
(<standard-aircraft>) 297.05 203.67 T
1 11 Q
( as follows:) 405.35 203.67 T
4 9 Q
(def) 108 183.01 T
(ine class <standard-aircraft> \050<f) 124.2 183.01 T
(lying-vehicle>, <ground-vehicle>\051) 302.4 183.01 T
(...) 118.8 172.01 T
(end;) 108 161.01 T
108 135 522 648 C
118.75 432 511.25 637 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle>) 289.35 622.52 T
(<B707>) 358.15 450.44 T
(<standard-commercial-aircraft>) 289.75 485.77 T
(<standard-aircraft>) 321.1 521.11 T
389.83 544.51 379.74 538 384.85 548.86 387.34 546.68 4 Y
V
411.25 574 387.35 546.68 2 L
0.5 H
2 Z
N
378.56 507.96 375.25 496.42 371.94 507.96 375.25 507.96 4 Y
V
375.25 514.42 375.25 507.96 2 L
N
378.56 472.62 375.25 461.09 371.94 472.62 375.25 472.62 4 Y
V
375.25 479.09 375.25 472.62 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<ground-vehicle>) 170.02 585.44 T
(<f) 365.65 585.6 T
(lying-vehicle>) 377.05 585.6 T
(<fuel-truck>) 149.35 521.11 T
259.3 603.2 247.5 601 256.34 609.12 257.82 606.16 4 Y
V
283.5 619 257.82 606.16 2 L
N
373.66 609.12 382.5 601 370.7 603.2 372.18 606.16 4 Y
V
346.5 619 372.18 606.16 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
185.06 549.54 181.75 538 178.44 549.54 181.75 549.54 4 Y
V
181.75 574 181.75 549.54 2 L
N
307.91 546.12 316.75 538 304.95 540.2 306.43 543.16 4 Y
V
244.75 574 306.43 543.16 2 L
N
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 234
%%Page: "233" 235
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(233) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(Her) 108 640.67 T
(e we have listed the super) 126.57 640.67 T
(classes as) 252.64 640.67 T
4 9.5 Q
(<f) 301.15 640.67 T
(lying-vehicle>) 312.55 640.67 T
1 11 Q
( and) 392.35 640.67 T
4 9.5 Q
(<ground-vehi-) 416.47 640.67 T
(cle>) 108 626.67 T
1 11 Q
(, in that or) 130.8 626.67 T
(der) 180.63 626.67 T
(.) 196.15 626.67 T
(In cr) 135 612.67 T
(eating the class pr) 156.89 612.67 T
(ecedence list, Dylan uses the or) 244.14 612.67 T
(dering of the list of) 395.63 612.67 T
(super) 108 598.67 T
(classes in the) 135.32 598.67 T
4 9.5 Q
(def) 201.28 598.67 T
(ine class) 218.38 598.67 T
1 11 Q
( form for each class. Dylan r) 269.68 598.67 T
(elies on the follow-) 405.52 598.67 T
(ing r) 108 584.67 T
(ule:) 130.73 584.67 T
(\245) 117 564.67 T
(In a) 135 564.67 T
4 9.5 Q
(def) 156.11 564.67 T
(ine class) 173.21 564.67 T
1 11 Q
( form, the class being de\336ned and the list of its super-) 224.51 564.67 T
(classes ar) 135 550.67 T
(e or) 180.24 550.67 T
(der) 198.41 550.67 T
(ed. The class being de\336ned takes pr) 214.55 550.67 T
(ecedence over all its) 387.12 550.67 T
(super) 135 536.67 T
(classes, and each super) 162.32 536.67 T
(class in the list takes pr) 274.17 536.67 T
(ecedence over all super-) 386.24 536.67 T
(classes that appear later in the list.) 135 522.67 T
-0 (This r) 108 502.67 P
-0 (ule tells us that, because we listed) 136.01 502.67 P
4 9.5 Q
-0.01 (<f) 302.77 502.67 P
-0.01 (lying-vehicle>) 314.17 502.67 P
1 11 Q
-0 ( befor) 393.97 502.67 P
-0 (e) 421.89 502.67 P
4 9.5 Q
-0.01 (<ground-vehi-) 429.9 502.67 P
-0.03 (cle>) 108 488.67 P
1 11 Q
-0.02 ( in the list of super) 130.8 488.67 P
-0.02 (classes of) 220.97 488.67 P
4 9.5 Q
-0.03 (<standard-aircraft>) 268.95 488.67 P
1 11 Q
-0.02 (,) 377.25 488.67 P
4 9.5 Q
-0.03 (<f) 382.74 488.67 P
-0.03 (lying-vehicle>) 394.14 488.67 P
1 11 Q
-0.02 ( must) 473.94 488.67 P
(have higher pr) 108 474.67 T
(ecedence than) 179.38 474.67 T
4 9.5 Q
(<ground-vehicle>) 250.74 474.67 T
1 11 Q
(. Dylan uses the following class) 341.94 474.67 T
(pr) 108 460.67 T
(ecedence list for) 118.76 460.67 T
4 9.5 Q
(<B707>) 199.64 460.67 T
1 11 Q
(, fr) 233.84 460.67 T
(om highest to lowest pr) 247.15 460.67 T
(ecedence:) 361.76 460.67 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 440 T
(<f) 118.8 429 T
(lying-vehicle>, <ground-vehicle>, <vehicle>, <physical-object>, <object>) 129.6 429 T
1 11 Q
(If we had listed) 108 408.67 T
4 9.5 Q
(<ground-vehicle>) 186.08 408.67 T
1 11 Q
( befor) 277.28 408.67 T
(e) 305.2 408.67 T
4 9.5 Q
(<f) 313.21 408.67 T
(lying-vehicle>) 324.61 408.67 T
1 11 Q
( in the list of super-) 404.42 408.67 T
(classes of) 108 394.67 T
4 9.5 Q
(<standard-aircraft>) 156.01 394.67 T
1 11 Q
(,) 264.32 394.67 T
4 9.5 Q
(<ground-vehicle>) 269.82 394.67 T
1 11 Q
( would have taken pr) 361.02 394.67 T
(ece-) 464.77 394.67 T
(dence over) 108 380.67 T
4 9.5 Q
(<f) 163.88 380.67 T
(lying-vehicle>) 175.28 380.67 T
1 11 Q
( in the class pr) 255.08 380.67 T
(ecedence list for) 324.61 380.67 T
4 9.5 Q
(<B707>) 405.49 380.67 T
1 11 Q
(.) 439.69 380.67 T
(Now) 135 366.67 T
(, in constr) 158.31 366.67 T
(ucting the class pr) 205.96 366.67 T
(ecedence list for a class, Dylan actually fol-) 293.96 366.67 T
(lows several steps:) 108 352.67 T
2 F
(1.) 117 332.67 T
1 F
(Identify the class and each of its dir) 135 332.67 T
(ect and indir) 306.95 332.67 T
(ect super) 368.49 332.67 T
(classes. In our) 412.3 332.67 T
(example, the class is) 135 318.67 T
4 9.5 Q
(<B707>) 236.02 318.67 T
1 11 Q
(, and the super) 270.22 318.67 T
(classes ar) 342.43 318.67 T
(e) 387.67 318.67 T
4 9.5 Q
(<standard-commer-) 395.69 318.67 T
(cial-aircraft>) 135 304.67 T
1 11 Q
(,) 214.8 304.67 T
4 9.5 Q
(<standard-aircraft>) 220.3 304.67 T
1 11 Q
(,) 328.6 304.67 T
4 9.5 Q
(<f) 334.1 304.67 T
(lying-vehicle>) 345.5 304.67 T
1 11 Q
(,) 425.3 304.67 T
4 9.5 Q
(<ground-) 430.8 304.67 T
(vehicle>) 135 290.67 T
1 11 Q
(,) 180.6 290.67 T
4 9.5 Q
(<vehicle>) 186.1 290.67 T
1 11 Q
(,) 237.4 290.67 T
4 9.5 Q
(<physical-object>) 242.9 290.67 T
1 11 Q
(, and) 339.8 290.67 T
4 9.5 Q
(<object>) 366.67 290.67 T
1 11 Q
(.) 412.27 290.67 T
2 F
(2.) 117 270.67 T
1 F
(Constr) 135 270.67 T
(uct a separate,) 167.71 270.67 T
2 F
(locally ordered) 240.06 270.67 T
1 F
( pr) 315.53 270.67 T
(ecedence list for each of these) 329.04 270.67 T
(classes and) 135 256.67 T
2 F
(its own) 191.97 256.67 T
1 F
( dir) 228.93 256.67 T
(ect super) 245.75 256.67 T
(classes, based on the or) 289.56 256.67 T
(der in which the) 402.21 256.67 T
(super) 135 242.67 T
(classes appear in the) 162.32 242.67 T
4 9.5 Q
(def) 264.87 242.67 T
(ine class) 281.97 242.67 T
1 11 Q
( form for each class:) 333.27 242.67 T
4 9 Q
(<B707>, <standard-commercial-aircraft>) 135 222 T
(<standard-commercial-aircraft>, <standard-aircraft>) 135 203 T
(<standard-aircraft>, <f) 135 184 T
(lying-vehicle>, <ground-vehicle>) 259.2 184 T
(<f) 135 165 T
(lying-vehicle>, <vehicle>) 145.8 165 T
(<ground-vehicle>, <vehicle>) 135 146 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 235
%%Page: "234" 236
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(234) 72 677.67 T
0 9.5 Q
(14.3 The class precedence list) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(<vehicle>, <physical-object>) 135 642 T
(<physical-object>, <object>) 135 623 T
(<object>) 135 604 T
2 11 Q
(3.) 117 583.67 T
1 F
(Constr) 135 583.67 T
(uct the overall class pr) 167.71 583.67 T
(ecedence list fr) 276.48 583.67 T
(om these locally or) 348.41 583.67 T
(der) 439.83 583.67 T
(ed lists.) 455.97 583.67 T
(The r) 135 569.67 T
(esulting class pr) 160.31 569.67 T
(ecedence list must be consistent with the locally) 238.55 569.67 T
(or) 135 555.67 T
(der) 145.15 555.67 T
(ed lists for all super) 161.29 555.67 T
(classes. That is, no class can pr) 256.84 555.67 T
(ecede another class) 404.64 555.67 T
(in) 135 541.67 T
2 F
(any) 147.35 541.67 T
1 F
( pr) 165.69 541.67 T
(ecedence list if it is pr) 179.2 541.67 T
(eceded by the same class in) 283.84 541.67 T
2 F
(any other) 419.59 541.67 T
1 F
( pr) 466.96 541.67 T
(ece-) 480.47 541.67 T
(dence list.) 135 527.67 T
(One implication of these r) 108 507.67 T
(ules is that if a class inherits a super) 233.94 507.67 T
(class via two dif) 407.82 507.67 T
(fer-) 486.05 507.67 T
(ent paths, the super) 108 493.67 T
(class in common must have lower pr) 203.6 493.67 T
(ecedence than any of its) 382.08 493.67 T
(subclasses. For example, the) 108 479.67 T
4 9.5 Q
(<object>) 247.69 479.67 T
1 11 Q
( class is a super) 293.29 479.67 T
(class of every class \050except) 367.89 479.67 T
(itself\051. This class must have lower pr) 108 465.67 T
(ecedence than any of its subclasses, so it) 285.15 465.67 T
(appears last in every class pr) 108 451.67 T
(ecedence list. The class pr) 247.69 451.67 T
(ecedence list is consistent) 372.14 451.67 T
(with the r) 108 437.67 T
(ule that a subclass is mor) 155.38 437.67 T
(e speci\336c than any of its super) 276.83 437.67 T
(classes.) 423.12 437.67 T
(Sometimes mor) 135 423.67 T
(e than one class pr) 210.81 423.67 T
(ecedence list is consistent with the pr) 300.32 423.67 T
(oce-) 480.35 423.67 T
(dur) 108 409.67 T
(e we\325ve outlined so far) 125.5 409.67 T
(. Suppose, for example, that we had de\336ned two addi-) 235.14 409.67 T
(tional classes,) 108 395.67 T
4 9.5 Q
(<wheeled-vehicle>) 176.99 395.67 T
1 11 Q
( and) 273.89 395.67 T
4 9.5 Q
(<winged-vehicle>) 298.02 395.67 T
1 11 Q
(, with the class) 389.21 395.67 T
(heterar) 108 381.67 T
(chy illustrated in Figur) 142.52 381.67 T
(e 14.3.) 253.89 381.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 236
%%Page: "235" 237
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(235) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
108 379.01 522 387 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
1 11 Q
0 X
0 0 0 1 0 0 0 K
(Figur) 116.19 390.67 T
(e 14.3  Expanded heterar) 142.4 390.67 T
(chy of vehicle classes using multiple inheritance) 262.06 390.67 T
-0.2 (Let\325s assume that the) 108 358.67 P
4 9.5 Q
-0.41 (def) 212.29 358.67 P
-0.41 (ine class) 229.38 358.67 P
1 11 Q
-0.2 ( form for) 280.28 358.67 P
4 9.5 Q
-0.41 (<standard-aircraft>) 325.68 358.67 P
1 11 Q
-0.2 ( lists) 433.98 358.67 P
4 9.5 Q
-0.41 (<winged-) 458.4 358.67 P
(vehicle>) 108 344.67 T
1 11 Q
( befor) 153.6 344.67 T
(e) 181.52 344.67 T
4 9.5 Q
(<wheeled-vehicle>) 189.54 344.67 T
1 11 Q
( in its list of dir) 286.44 344.67 T
(ect super) 359.63 344.67 T
(classes. Now) 403.44 344.67 T
(, thr) 465.1 344.67 T
(ee) 484.73 344.67 T
(class pr) 108 330.67 T
(ecedence lists for) 144.42 330.67 T
4 9.5 Q
(<B707>) 229.97 330.67 T
1 11 Q
( ar) 264.17 330.67 T
(e consistent with the pr) 276.57 330.67 T
(ocedur) 389.88 330.67 T
(es we have dis-) 423.54 330.67 T
(cussed so far:) 108 316.67 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 296.01 T
(<winged-vehicle>, <f) 118.8 285.01 T
(lying-vehicle>, <wheeled-vehicle>, <ground-vehicle>,) 226.8 285.01 T
(<vehicle>, <physical-object>, <object>) 118.8 274.01 T
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 255.01 T
(<winged-vehicle>, <wheeled-vehicle>, <f) 118.8 244.01 T
(lying-vehicle>, <ground-vehicle>,) 329.4 244.01 T
(<vehicle>, <physical-object>, <object>) 118.8 233.01 T
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 214.01 T
(<winged-vehicle>, <wheeled-vehicle>, <ground-vehicle>, <f) 118.8 203.01 T
(lying-vehicle>,) 426.6 203.01 T
(<vehicle>, <physical-object>, <object>) 118.8 192.01 T
1 11 Q
-0.15 (In this case, Dylan uses an algorithm that tends to keep nonoverlapping chains of) 108 171.67 P
(dir) 108 157.67 T
(ect super) 122.07 157.67 T
(classes together in the class pr) 165.88 157.67 T
(ecedence list. Wher) 311.59 157.67 T
(e possible, the) 405.27 157.67 T
(super) 108 143.67 T
(classes of the \336rst dir) 135.32 143.67 T
(ect super) 237.41 143.67 T
(class take pr) 281.23 143.67 T
(ecedence over the second dir) 340.87 143.67 T
(ect) 480.94 143.67 T
108 135 522 648 C
155.69 405 474.31 646 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 9.5 Q
0 X
0 0 0 1 0 0 0 K
(<vehicle>) 295.66 631.52 T
(<B707>) 364.46 415.93 T
(<standard-commercial-aircraft>) 296.06 451.26 T
(<standard-aircraft>) 327.41 486.6 T
396.14 508.51 386.05 502.01 391.16 512.86 393.65 510.69 4 Y
V
417.56 538 393.66 510.68 2 L
0.5 H
2 Z
N
384.87 473.45 381.56 461.91 378.26 473.45 381.56 473.45 4 Y
V
381.56 479.91 381.56 473.45 2 L
N
384.87 438.11 381.56 426.58 378.26 438.11 381.56 438.11 4 Y
V
381.56 444.58 381.56 438.11 2 L
N
(<fuel-truck>) 164.66 486.6 T
265.61 612.2 253.81 610 262.65 618.12 264.13 615.16 4 Y
V
289.81 628 264.13 615.16 2 L
N
379.97 618.12 388.81 610 377.01 612.2 378.49 615.16 4 Y
V
352.81 628 378.49 615.16 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
200.37 513.54 197.06 502 193.76 513.54 197.06 513.54 4 Y
V
197.06 538 197.06 513.54 2 L
N
314.22 510.12 323.06 502 311.26 504.2 312.74 507.16 4 Y
V
251.06 538 312.74 507.16 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<f) 371.04 594.6 T
(lying-vehicle>) 382.44 594.6 T
(<winged-vehicle>) 371.04 549.44 T
419.95 576.54 416.64 565 413.33 576.54 416.64 576.54 4 Y
V
416.64 583 416.64 576.54 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(<ground-vehicle>) 183.24 594.6 T
(<wheeled-vehicle>) 180.39 549.44 T
232.15 576.54 228.84 565 225.53 576.54 228.84 576.54 4 Y
V
228.84 583 228.84 576.54 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "235" 237
%%Page: "236" 238
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(236) 72 677.67 T
0 9.5 Q
(14.3 The class precedence list) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(super) 108 640.67 T
(class and its super) 135.32 640.67 T
(classes. In this example, Dylan uses the \336rst of the thr) 223.88 640.67 T
(ee) 483.46 640.67 T
(possible or) 108 626.67 T
(derings:) 160.6 626.67 T
4 9 Q
(<B707>, <standard-commercial-aircraft>, <standard-aircraft>,) 108 606 T
(<winged-vehicle>, <f) 118.8 595 T
(lying-vehicle>, <wheeled-vehicle>, <ground-vehicle>,) 226.8 595 T
(<vehicle>, <physical-object>, <object>) 118.8 584 T
1 11 Q
-0.35 (Note that it is not always possible to compute a class pr) 108 563.67 P
-0.35 (ecedence list. Consider the) 373.39 563.67 P
(thr) 108 549.67 T
(ee classes de\336ned as follows:) 122.14 549.67 T
4 9 Q
(def) 108 529 T
(ine class <a> \050<object>\051) 124.2 529 T
(...) 118.8 518 T
(end;) 108 507 T
(def) 108 488 T
(ine class <b> \050<a>\051) 124.2 488 T
(...) 118.8 477 T
(end;) 108 466 T
(def) 108 447 T
(ine class <c> \050<a>, <b>\051) 124.2 447 T
(...) 118.8 436 T
(end;) 108 425 T
1 11 Q
(No class pr) 108 404.67 T
(ecedence list is possible in this example, because the or) 162.32 404.67 T
(dering of) 428.41 404.67 T
(classes) 108 390.67 T
4 9.5 Q
(<a>) 143.6 390.67 T
1 11 Q
( and) 160.7 390.67 T
4 9.5 Q
(<b>) 184.82 390.67 T
1 11 Q
( con\337icts in the local pr) 201.92 390.67 T
(ecedence lists for classes) 314.39 390.67 T
4 9.5 Q
(<b>) 435.54 390.67 T
1 11 Q
( and) 452.64 390.67 T
4 9.5 Q
(<c>) 476.76 390.67 T
1 11 Q
(.) 493.86 390.67 T
(Dylan signals an err) 108 376.67 T
(or when it tries to compute a class pr) 205.39 376.67 T
(ecedence list and \336nds) 384.31 376.67 T
(that it cannot.) 108 362.67 T
(T) 135 348.67 T
(o examine the class pr) 140.73 348.67 T
(ecedence list for a class, use the) 247.7 348.67 T
4 9.5 Q
(all-superclasses) 402.56 348.67 T
1 11 Q
(function, which r) 108 334.67 T
(eturns the super) 191.24 334.67 T
(classes in the same or) 270.22 334.67 T
(der as they appear in the) 374.22 334.67 T
(class pr) 108 320.67 T
(ecedence list:) 144.42 320.67 T
5 9 Q
(?) 135 300 T
4 F
(all-superclasses \050<B707>\051) 145.8 300 T
5 F
(#[<standard-commercial-aircraft>, <standard-aircraft>,) 135 289 T
(<winged-vehicle>, <f) 145.8 278 T
(lying-vehicle>, <wheeled-vehicle>,) 253.8 278 T
(<ground-vehicle>, <vehicle>, <physical-object>, <object>]) 145.8 267 T
1 11 Q
(The details of the algorithm Dylan uses to constr) 108 246.67 T
(uct class pr) 343.91 246.67 T
(ecedence lists ar) 398.18 246.67 T
(e) 476.61 246.67 T
-0.07 (complicated and ar) 108 232.67 P
-0.07 (e beyond the scope of this book. For most uncomplicated uses) 201.21 232.67 P
-0.02 (of simple inheritance, the most important points to r) 108 218.67 P
-0.02 (emember about the class pr) 361.76 218.67 P
-0.02 (e-) 495.07 218.67 P
(cedence list ar) 108 204.67 T
(e that: the list of dir) 176.5 204.67 T
(ect super) 270.99 204.67 T
(classes in a) 314.8 204.67 T
4 9.5 Q
(def) 371 204.67 T
(ine class) 388.1 204.67 T
1 11 Q
( form is) 439.4 204.67 T
-0.31 (or) 108 190.67 P
-0.31 (der) 118.15 190.67 P
-0.31 (ed, and each super) 134.29 190.67 P
-0.31 (class in the list takes pr) 224.35 190.67 P
-0.31 (ecedence over all super) 334.86 190.67 P
-0.31 (classes that) 447.2 190.67 P
(appear later in the list.) 108 176.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "236" 238
%%Page: "237" 239
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(237) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
3 15 Q
0 X
(14.4  Multiple inheritance and method dispatch) 108 638 T
1 11 Q
-0.15 (Now that we\325ve seen how Dylan constr) 108 617.67 P
-0.15 (ucts the class pr) 298.71 617.67 P
-0.15 (ecedence list, we r) 375.21 617.67 P
-0.15 (eturn to) 462.97 617.67 P
-0.06 (the issue of how multiple inheritance af) 108 603.67 P
-0.06 (fects method dispatch. Recall that when a) 299.89 603.67 P
(generic function is called, Dylan chooses the) 108 589.67 T
2 F
(most speci\336c applicable method) 325.79 589.67 T
1 F
( to) 486.77 589.67 T
(call. For simplicity) 108 575.67 T
(, let\325s consider a generic function that has one specialized) 196.66 575.67 T
(parameter) 108 561.67 T
(. As we have seen, Dylan chooses which method to dispatch by com-) 157.32 561.67 T
(paring the type of the r) 108 547.67 T
(equir) 219.84 547.67 T
(ed) 245.25 547.67 T
2 F
(argument) 259.99 547.67 T
1 F
( to the generic function with the type of) 308.27 547.67 T
(the corr) 108 533.67 T
(esponding specialized) 145.39 533.67 T
2 F
(parameter) 256.3 533.67 T
1 F
( for each method:) 307.02 533.67 T
2 F
(1.) 117 513.67 T
1 F
(Find all the applicable methods. A method is applicable if the type of the) 135 513.67 T
(r) 135 499.67 T
(equir) 139.15 499.67 T
(ed ar) 164.56 499.67 T
(gument is a subtype of the type of the specialized parameter) 188.94 499.67 T
(.) 481.27 499.67 T
2 F
(2.) 117 479.67 T
1 F
-0.46 (Sort the applicable methods in or) 135 479.67 P
-0.46 (der of speci\336city) 293.62 479.67 P
-0.46 (. A method is mor) 372.06 479.67 P
-0.46 (e speci\336c) 457.97 479.67 P
(than another if the type of its specialized parameter is a pr) 135 465.67 T
(oper subtype of) 417.76 465.67 T
(the type of the other method\325s specialized parameter) 135 451.67 T
(.) 390.39 451.67 T
2 F
(3.) 117 431.67 T
1 F
(Call the most speci\336c method.) 135 431.67 T
-0.36 (In the pr) 108 411.67 P
-0.36 (esence of multiple inheritance, it is possible to have two or mor) 148.91 411.67 P
-0.36 (e methods) 451.59 411.67 P
-0.04 (that ar) 108 397.67 P
-0.04 (e applicable but that cannot be sorted by speci\336city because neither param-) 139.43 397.67 P
-0.25 (eter type is a subtype of the other) 108 383.67 P
-0.25 (. T) 267.62 383.67 P
-0.25 (o see how this situation can arise, we r) 278.61 383.67 P
-0.25 (eturn to) 463.17 383.67 P
-0.26 (our airport example. Recall that we now have two slots r) 108 369.67 P
-0.26 (epr) 380.35 369.67 P
-0.26 (esenting vehicle cr) 396.38 369.67 P
-0.26 (uis-) 485.84 369.67 P
(ing speed:) 108 355.67 T
4 9.5 Q
(ground-cruising-speed) 160.5 355.67 T
1 11 Q
( for) 280.2 355.67 T
4 9.5 Q
(<ground-vehicle>) 299.72 355.67 T
1 11 Q
( and) 390.92 355.67 T
4 9.5 Q
(f) 415.04 355.67 T
(lying-cruis-) 420.74 355.67 T
(ing-speed) 108 341.67 T
1 11 Q
( for) 159.3 341.67 T
4 9.5 Q
(<f) 178.81 341.67 T
(lying-vehicle>) 190.21 341.67 T
1 11 Q
(. Let\325s de\336ne a generic function,) 270.01 341.67 T
4 9.5 Q
(say-cruising-) 427.39 341.67 T
(speed) 108 327.67 T
1 11 Q
(, to r) 136.5 327.67 T
(eport the applicable cr) 158.49 327.67 T
(uising speed for each class:) 267.02 327.67 T
4 9 Q
(def) 108 307 T
(ine generic say-cruising-speed \050vehicle :: <vehicle>\051;) 124.2 307 T
(// Method 1) 108 288 T
(def) 108 277 T
(ine method say-cruising-speed \050vehicle :: <f) 124.2 277 T
(lying-vehicle>\051) 361.8 277 T
(format\050*window*, \322Flying cruising speed: %d\134n\323,) 118.8 266 T
(vehicle.f) 156.6 255 T
(lying-cruising-speed\051;) 205.2 255 T
(end;) 108 244 T
(// Method 2) 108 225 T
(def) 108 214 T
(ine method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 124.2 214 T
(format\050*window*, \322Ground cruising speed: %d\134n\323,) 118.8 203 T
(vehicle.ground-cruising-speed\051;) 156.6 192 T
(end;) 108 181 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 239
%%Page: "238" 240
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(238) 72 677.67 T
0 9.5 Q
(14.4 Multiple inheritance and method dispatch) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(// Method 3) 108 642 T
(def) 108 631 T
(ine method say-cruising-speed \050vehicle :: <vehicle>\051) 124.2 631 T
(format\050*window*, \322No cruising speed def) 118.8 620 T
(ined for type <vehicle>\134n\323\051;) 329.4 620 T
(end;) 108 609 T
1 11 Q
(Now) 108 588.67 T
(, suppose we call) 131.31 588.67 T
4 9.5 Q
(say-cruising-speed) 216.75 588.67 T
1 11 Q
( on an instance of) 319.35 588.67 T
4 9.5 Q
(<B707>) 406.98 588.67 T
1 11 Q
( . Which) 441.18 588.67 T
(method does Dylan call? All thr) 108 574.67 T
(ee methods ar) 262.61 574.67 T
(e applicable. Both method 1 and) 330.65 574.67 T
-0.33 (method 2 ar) 108 560.67 P
-0.33 (e mor) 165.69 560.67 P
-0.33 (e speci\336c than method 3. But Dylan cannot or) 193.24 560.67 P
-0.33 (der methods 1 and) 411.49 560.67 P
(2 by speci\336city) 108 546.67 T
(.) 179.05 546.67 T
(In this case Dylan consults the class pr) 135 532.67 T
(ecedence list for the class of the ar) 321.23 532.67 T
(gu-) 485.86 532.67 T
(ment. For our example the class of the ar) 108 518.67 T
(gument is) 305.15 518.67 T
4 9.5 Q
(<B707>) 356.24 518.67 T
1 11 Q
(. The) 390.44 518.67 T
4 9.5 Q
(<f) 417.1 518.67 T
(lying-vehi-) 428.5 518.67 T
(cle>) 108 504.67 T
1 11 Q
( class takes pr) 130.8 504.67 T
(ecedence over the) 197.86 504.67 T
4 9.5 Q
(<ground-vehicle>) 287.17 504.67 T
1 11 Q
( class, because) 378.36 504.67 T
4 9.5 Q
(<f) 450.58 504.67 T
(lying-) 461.98 504.67 T
(vehicle>) 108 490.67 T
1 11 Q
( pr) 153.6 490.67 T
(ecedes) 167.11 490.67 T
4 9.5 Q
(<ground-vehicle>) 201.93 490.67 T
1 11 Q
( in the list of dir) 293.13 490.67 T
(ect super) 370.13 490.67 T
(classes for) 413.95 490.67 T
4 9.5 Q
(<stan-) 466.31 490.67 T
(dard-aircraft>) 108 476.67 T
1 11 Q
(. Dylan calls method 1, which pr) 187.8 476.67 T
(oduces the following output:) 345 476.67 T
5 9 Q
(Flying cruising speed: 368) 135 456 T
1 11 Q
-0.28 (Note that if we had happened to list) 108 435.67 P
4 9.5 Q
-0.59 (<ground-vehicle>) 283.76 435.67 P
1 11 Q
-0.28 ( befor) 374.96 435.67 P
-0.28 (e) 402.6 435.67 P
4 9.5 Q
-0.59 (<f) 410.33 435.67 P
-0.59 (lying-vehicle>) 421.73 435.67 P
1 11 Q
(in the list of dir) 108 421.67 T
(ect super) 182.25 421.67 T
(classes for) 226.06 421.67 T
4 9.5 Q
(<standard-aircraft>) 278.42 421.67 T
1 11 Q
(, Dylan would have) 386.72 421.67 T
(called method 2, and we would have seen the following output:) 108 407.67 T
5 9 Q
(Ground cruising speed: 45) 135 387 T
1 11 Q
(In de\336ning classes of air) 108 366.67 T
(craft, we didn\325t intend for) 225.24 366.67 T
4 9.5 Q
(<f) 353.44 366.67 T
(lying-vehicle>) 364.84 366.67 T
1 11 Q
( characteris-) 444.64 366.67 T
(tics to override) 108 352.67 T
4 9.5 Q
(<ground-vehicle>) 183.55 352.67 T
1 11 Q
( characteristics. But for method dispatch to) 274.75 352.67 T
(work in the pr) 108 338.67 T
(esence of multiple inheritance, Dylan must or) 177.51 338.67 T
(der subclasses and) 398.54 338.67 T
(super) 108 324.67 T
(classes whenever it can.) 135.32 324.67 T
(How can we change our example to make) 135 310.67 T
4 9.5 Q
(<f) 341.55 310.67 T
(lying-vehicle>) 352.95 310.67 T
1 11 Q
( behavior add) 432.75 310.67 T
(to, rather than override,) 108 296.67 T
4 9.5 Q
(<ground-vehicle>) 226.8 296.67 T
1 11 Q
( behavior? By using) 318 296.67 T
4 9.5 Q
(next-method) 416.76 296.67 T
1 11 Q
( in) 479.46 296.67 T
-0.43 (our) 108 282.67 P
4 9.5 Q
-0.88 (say-cruising-speed) 127.31 282.67 P
1 11 Q
-0.43 ( methods for) 229.91 282.67 P
4 9.5 Q
-0.88 (<f) 293.26 282.67 P
-0.88 (lying-vehicle>) 304.65 282.67 P
1 11 Q
-0.43 ( and) 384.45 282.67 P
4 9.5 Q
-0.88 (<ground-vehicle>) 407.73 282.67 P
1 11 Q
-0.43 (,) 498.93 282.67 P
-0.08 (we can r) 108 268.67 P
-0.08 (eport all applicable kinds of cr) 148.72 268.67 P
-0.08 (uising speed for any combination of either) 295.78 268.67 P
(or both of those classes) 108 254.67 T
4 9.5 Q
(.) 219.87 254.67 T
1 11 Q
( T) 225.57 254.67 T
(o make this work, we also change the) 234.05 254.67 T
4 9.5 Q
(say-cruising-) 418.54 254.67 T
(speed) 108 240.67 T
1 11 Q
( method for) 136.5 240.67 T
4 9.5 Q
(<vehicle>) 196.46 240.67 T
1 11 Q
(, which will always be called last, to have no ef) 247.76 240.67 T
(fect:) 474.95 240.67 T
4 9 Q
(// Method 1) 108 220 T
(def) 108 209 T
(ine method say-cruising-speed \050vehicle :: <f) 124.2 209 T
(lying-vehicle>\051) 361.8 209 T
(format\050*window*, \322Flying cruising speed: %d\134n\323,) 118.8 198 T
(vehicle.f) 156.6 187 T
(lying-cruising-speed\051;) 205.2 187 T
(next-method\050\051;) 118.8 176 T
(end;) 108 165 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 240
%%Page: "239" 241
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(239) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 9 Q
0 X
(// Method 2) 108 642 T
(def) 108 631 T
(ine method say-cruising-speed \050vehicle :: <ground-vehicle>\051) 124.2 631 T
(format\050*window*, \322Ground cruising speed: %d\134n\323,) 118.8 620 T
(vehicle.ground-cruising-speed\051;) 156.6 609 T
(next-method\050\051;) 118.8 598 T
(end;) 108 587 T
(// Method 3) 108 568 T
(def) 108 557 T
(ine method say-cruising-speed \050vehicle :: <vehicle>\051) 124.2 557 T
(values\050\051;) 118.8 546 T
(end;) 108 535 T
1 11 Q
(Recall that when Dylan decides which method to call, the r) 108 514.67 T
(esult is a) 393.98 514.67 T
2 F
(list) 438.95 514.67 T
1 F
( of meth-) 454.82 514.67 T
(ods, sorted by speci\336city) 108 500.67 T
(. When) 227.03 500.67 T
4 9.5 Q
(say-cruising-speed) 264.35 500.67 T
1 11 Q
( is called on an instance of) 366.95 500.67 T
4 9.5 Q
(<B707>) 108 486.67 T
1 11 Q
(, the list of methods is sorted in the following or) 142.2 486.67 T
(der: method 1, method 2,) 374.83 486.67 T
(method 3. Dylan calls method 1. Then, as a r) 108 472.67 T
(esult of the call to) 323.2 472.67 T
4 9.5 Q
(next-method) 411.61 472.67 T
1 11 Q
( in) 474.31 472.67 T
(method 1, Dylan calls method 2. Finally) 108 458.67 T
(, as a r) 300.09 458.67 T
(esult of the call to next-method in) 330.9 458.67 T
(method 1, Dylan calls method 3. The output we see is as follows:) 108 444.67 T
5 9 Q
(Flying cruising speed: 368) 135 424 T
(Ground cruising speed: 45) 135 413 T
1 11 Q
(Note that if we called) 108 392.67 T
4 9.5 Q
(say-cruising-speed) 214.91 392.67 T
1 11 Q
( on an instance of) 317.51 392.67 T
4 9.5 Q
(<fuel-truck>) 405.15 392.67 T
1 11 Q
(, we) 473.55 392.67 T
(would see the following output:) 108 378.67 T
5 9 Q
(Ground cruising speed: 25) 135 358 T
1 11 Q
(In summary) 108 337.67 T
(, the ef) 166.32 337.67 T
(fect of multiple inheritance on method dispatch is to r) 198.56 337.67 T
(e\336ne the) 459.54 337.67 T
(r) 108 323.67 T
(ule for sorting methods accor) 112.26 323.67 T
(ding to speci\336city:) 254.48 323.67 T
(\245) 117 303.67 T
(A method is mor) 135 303.67 T
(e speci\336c than another if the type of its specialized param-) 217.24 303.67 T
(eter is a pr) 135 289.67 T
(oper subtype of the type of the other method\325s specialized) 185.84 289.67 T
(parameter) 135 275.67 T
(. If one type is not a pr) 184.32 275.67 T
(oper subtype of the other) 293.07 275.67 T
(, a method is) 414.98 275.67 T
(mor) 135 261.67 T
(e speci\336c if the class of its specialized parameter pr) 154.87 261.67 T
(ecedes the class of) 402.12 261.67 T
(the other method\325s specialized parameter in the class pr) 135 247.67 T
(ecedence list of the) 405.97 247.67 T
(ar) 135 233.67 T
(gument to the generic function. Otherwise, the methods ar) 144.65 233.67 T
(e) 428.8 233.67 T
2 F
(unordered) 436.82 233.67 T
1 F
(for that parameter) 135 219.67 T
(.) 222.91 219.67 T
(If the generic function has mor) 135 199.67 T
(e than one r) 284.07 199.67 T
(equir) 341.3 199.67 T
(ed ar) 366.71 199.67 T
(gument, Dylan uses) 391.1 199.67 T
-0.18 (this augmented r) 108 185.67 P
-0.18 (ule for determining speci\336city in the usual way for sorting appli-) 190.46 185.67 P
(cable methods with mor) 108 171.67 T
(e than one ar) 225.78 171.67 T
(gument. In essence, Dylan or) 288.51 171.67 T
(ders the appli-) 429.14 171.67 T
(cable methods separately for each r) 108 157.67 T
(equir) 279.33 157.67 T
(ed ar) 304.73 157.67 T
(gument, and then constr) 329.12 157.67 T
(ucts an) 447.92 157.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "239" 241
%%Page: "240" 242
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(240) 72 677.67 T
0 9.5 Q
(14.5 When should you use multiple inheritance?) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 11 Q
0 X
(overall or) 108 640.67 T
(dering by comparing the separate sorted lists. In the overall method) 154.64 640.67 T
(or) 108 626.67 T
(dering, a method is mor) 118.15 626.67 T
(e speci\336c than another if it satis\336es two constraints:) 234.88 626.67 T
2 F
(1.) 117 606.67 T
1 F
(The method is) 135 606.67 T
2 F
(no less speci\336c) 207.23 606.67 T
1 F
( than the other method for) 281.75 606.67 T
2 F
(all) 412.72 606.67 T
1 F
( r) 425.54 606.67 T
(equir) 432.44 606.67 T
(ed) 457.85 606.67 T
-0.12 (parameters. \050The two methods might have the same types for some parame-) 135 592.67 P
(ters.\051) 135 578.67 T
2 F
(2.) 117 558.67 T
1 F
(The method is) 135 558.67 T
2 F
(more speci\336c) 207.23 558.67 T
1 F
( than the other method for) 272.91 558.67 T
2 F
(some) 403.87 558.67 T
1 F
( r) 430.15 558.67 T
(equir) 437.05 558.67 T
(ed) 462.46 558.67 T
(parameter) 135 544.67 T
(.) 184.32 544.67 T
3 15 Q
(14.5  When should you use multiple inheritance?) 108 505 T
1 11 Q
(Ther) 108 484.67 T
(e is a gr) 130.56 484.67 T
(eat deal of debate about the value of using multiple inheritance in) 167.71 484.67 T
(object-oriented pr) 108 470.67 T
(ograms. Some people think that multiple inheritance in appr) 194.37 470.67 T
(o-) 488.33 470.67 T
-0.13 (priate applications can impr) 108 456.67 P
-0.13 (ove modularity and make it easier to r) 244.18 456.67 P
-0.13 (euse code. Oth-) 429.01 456.67 P
(ers think that the complications and pitfalls of multiple inheritance make) 108 442.67 T
(pr) 108 428.67 T
(ogram maintenance dif) 118.76 428.67 T
(\336cult and outweigh the possible advantages.) 231.45 428.67 T
(Multiple inheritance is likely to be most useful when you can separate the) 135 414.67 T
(characteristics of objects into) 108 400.67 T
2 F
(orthogonal) 249.85 400.67 T
1 F
( sets, in which the characteristics of one) 304.86 400.67 T
(set do not depend on the characteristics of other sets. If you can de\336ne a class to) 108 386.67 T
(r) 108 372.67 T
(epr) 112.15 372.67 T
(esent each set of characteristics, you can use multiple inheritance to build) 128.17 372.67 T
-0.2 (complex classes with dif) 108 358.67 P
-0.2 (fer) 225.62 358.67 P
-0.2 (ent combinations of characteristics. W) 238.7 358.67 P
-0.2 (e gave a glimpse) 421.14 358.67 P
(of how this might work by starting to segr) 108 344.67 T
(egate characteristics of \337ying and) 313.15 344.67 T
(gr) 108 330.67 T
(ound vehicles and then noting that some vehicles, like airplanes, can combine) 118.26 330.67 T
(both sets of characteristics.) 108 316.67 T
-0.44 (Another appr) 135 302.67 P
-0.44 (oach that can be useful for some applications is to cr) 200.75 302.67 P
-0.44 (eate one or) 449.42 302.67 P
-0.34 (mor) 108 288.67 P
-0.34 (e) 127.87 288.67 P
2 F
-0.34 (base) 135.55 288.67 P
1 F
-0.34 ( super) 158.15 288.67 P
-0.34 (classes, which de\336ne common characteristics of subclasses, and a) 187.89 288.67 P
-0.24 (number of) 108 274.67 P
2 F
-0.24 (mixin) 161.13 274.67 P
1 F
-0.24 ( classes, each of which adds a set of orthogonal characteristics. A) 190.45 274.67 P
(mixin class is like an addition, such as chocolate chips or nuts, that might be) 108 260.67 T
(mixed into an ice cr) 108 246.67 T
(eam base. Another way to think about this appr) 203.06 246.67 T
(oach is to) 435 246.67 T
-0.38 (imagine the base class as a noun and the mixin classes as adjectives that modify or) 108 232.67 P
-0.11 (specialize the noun. Y) 108 218.67 P
-0.11 (ou can then constr) 212.98 218.67 P
-0.11 (uct concr) 301.78 218.67 P
-0.11 (ete subclasses by using multiple) 345.84 218.67 P
(inheritance. For each concr) 108 204.67 T
(ete subclass, one or mor) 238.31 204.67 T
(e mixin classes typically pr) 354.37 204.67 T
(e-) 484.85 204.67 T
(cede a single base class in the list of super) 108 190.67 T
(classes.) 310.18 190.67 T
(Whether useful or not, multiple inheritance does complicate method dis-) 135 176.67 T
(patch and impose additional r) 108 162.67 T
(equir) 254.26 162.67 T
(ements on an application. It is essential to be) 279.67 162.67 T
(awar) 108 148.67 T
(e of dependencies on subclass-super) 132.32 148.67 T
(class or) 308.63 148.67 T
(dering, particularly in method) 344.45 148.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "240" 242
%%Page: "241" 243
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(14 Multiple Inheritance) 422.52 677.67 T
2 11 Q
(241) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
1 F
0 X
(selection and slot initialization. In general, classes intended to be multiple super-) 108 640.67 T
-0.06 (classes should depend on each other as little as possible. Pr) 108 626.67 P
-0.06 (otocols involving mul-) 394.09 626.67 P
(tiple inheritance may need mor) 108 612.67 T
(e documentation than those involving single) 260.18 612.67 T
(inheritance.) 108 598.67 T
(W) 135 584.67 T
(e neither advocate nor discourage the use of multiple inheritance. Dylan) 144.99 584.67 T
(pr) 108 570.67 T
(ovides the mechanism; you can decide whether multiple inheritance is appr) 118.76 570.67 T
(o-) 486.75 570.67 T
(priate for your application.) 108 556.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "241" 243
%%Page: "242" 244
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(242) 72 677.67 T
0 9.5 Q
(14.5 When should you use multiple inheritance?) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "242" 244
%%Page: "243" 245
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(243) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix A) 108 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(A) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Sour) 109.56 566.45 T
(ce Code of the Airport) 171.09 566.45 T
(Example) 108 536.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(tbd) 135 424.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "243" 245
%%Page: "244" 246
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(244) 72 677.67 T
0 9.5 Q
(Appendix A) 98 677.67 T
(Source Code of the Airport Example) 154.21 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "244" 246
%%Page: "245" 247
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(245) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix B) 108 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(B) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(The) 109.22 566.45 T
4 F
(format) 166.94 566.45 T
1 F
( Function) 274.94 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
-0.17 (The) 108 424.67 P
4 9.5 Q
-0.35 (format) 128.99 424.67 P
4 11 Q
-0.41 (function) 165.78 424.67 P
1 F
-0.17 ( is not part of the cor) 218.58 424.67 P
-0.17 (e Dylan language, but is available in a) 317.92 424.67 P
(library) 108 410.67 T
(. The syntax of) 139.57 410.67 T
4 9.5 Q
(format) 213.35 410.67 T
1 11 Q
( is:) 247.55 410.67 T
4 9 Q
(format \050) 108 390 T
0 11 Q
(destination) 151.2 390 T
4 9 Q
(,) 200.7 390 T
0 11 Q
(format-string) 211.5 390 T
4 9 Q
(,) 271.38 390 T
0 11 Q
(other-ar) 282.18 390 T
(guments) 317.42 390 T
4 9 Q
(*\051) 355.93 390 T
4 9.5 Q
(format) 108 369.67 T
1 11 Q
( sends formatted output to a destination.) 142.2 369.67 T
4 9.5 Q
(format) 342.99 369.67 T
1 11 Q
( r) 377.19 369.67 T
(eturns no values.) 384.09 369.67 T
-0.08 (The) 135 355.67 P
0 F
-0.08 (destination) 156.09 355.67 P
1 F
-0.08 ( is wher) 205.59 355.67 P
-0.08 (e to send the formatted output. The destination) 243.79 355.67 P
4 9.5 Q
-0.16 (*win-) 475.5 355.67 P
(dow*) 108 341.67 T
1 11 Q
( is a variable that r) 130.8 341.67 T
(epr) 220.45 341.67 T
(esents the window wher) 236.48 341.67 T
(e the output should appear) 355.51 341.67 T
(.) 486.74 341.67 T
(The) 135 327.67 T
0 F
(format-string) 156.16 327.67 T
1 F
( is a string. Strings in Dylan ar) 216.05 327.67 T
(e delimited with the double-) 362.8 327.67 T
-0.28 (quote character \050for example,) 108 313.67 P
4 9.5 Q
-0.58 ("hello, world") 251.91 313.67 P
1 11 Q
-0.28 (\051. Or) 331.12 313.67 P
-0.28 (dinary text in the format string) 352.8 313.67 P
-0.06 (is sent to the destination verbatim. When a per) 108 299.67 P
-0.06 (cent sign \050) 333.96 299.67 P
4 9.5 Q
-0.12 (%) 383.53 299.67 P
1 11 Q
-0.06 (\051 is found in the format) 389.23 299.67 P
-0.14 (string, some value is inserted at that point in the output. The way the value is r) 108 285.67 P
-0.14 (ep-) 488.46 285.67 P
(r) 108 271.67 T
(esented in the output depends on the character following the per) 112.15 271.67 T
(cent sign. For) 427.03 271.67 T
-0.39 (each per) 108 257.67 P
-0.39 (cent sign, ther) 148.44 257.67 P
-0.39 (e should be a corr) 215.84 257.67 P
-0.39 (esponding) 300.42 257.67 P
0 F
-0.39 (other-ar) 354.17 257.67 P
-0.39 (gument) 389.4 257.67 P
1 F
-0.39 (. The formatting) 423.64 257.67 P
(characters ar) 108 243.67 T
(e:) 169.78 243.67 T
4 9.5 Q
(%d) 135 217.67 T
1 11 Q
(Sends an integer ar) 216 217.67 T
(gument to the destination r) 308.82 217.67 T
(epr) 441.07 217.67 T
(esented) 457.1 217.67 T
(as a decimal number) 216 203.67 T
(.) 316.03 203.67 T
4 9.5 Q
(%s) 135 177.67 T
1 11 Q
-0.06 (Sends the contents of its string ar) 216 177.67 P
-0.06 (gument to the destination) 376.12 177.67 P
(unquoted.) 216 163.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "245" 247
%%Page: "246" 248
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(246) 72 677.67 T
0 9.5 Q
(Appendix B) 98 677.67 T
(The format Function) 153.16 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 F
0 X
(%=) 135 640.67 T
1 11 Q
(Sends an implementation-speci\336c r) 216 640.67 T
(epr) 386.62 640.67 T
(esentation of the) 402.65 640.67 T
(object to the destination. The) 216 626.67 T
4 9.5 Q
(%=) 358.7 626.67 T
1 11 Q
( designator can be used for) 370.1 626.67 T
(any class of object. In this example, the ar) 216 612.67 T
(gument) 416.61 612.67 T
4 9.5 Q
-0.2 (object.distance) 216 598.67 P
1 11 Q
-0.09 ( is r) 301.5 598.67 P
-0.09 (epr) 318.82 598.67 P
-0.09 (esented using some standar) 334.85 598.67 P
-0.09 (d \337oat-) 469.18 598.67 P
(ing-point r) 216 584.67 T
(epr) 268.08 584.67 T
(esentation. The ar) 284.11 584.67 T
(gument) 370.31 584.67 T
4 9.5 Q
(object) 410.78 584.67 T
1 11 Q
(.) 444.98 584.67 T
4 9.5 Q
(from-) 447.73 584.67 T
-0.75 (object) 216 570.67 P
1 11 Q
-0.36 ( would be r) 250.2 570.67 P
-0.36 (epr) 304.59 570.67 P
-0.36 (esented in a way de\336ned by that class) 320.62 570.67 P
(dir) 216 556.67 T
(ectly) 230.07 556.67 T
(, or thr) 251.9 556.67 T
(ough inheritance.) 284.64 556.67 T
(The backslash character may be used to easily insert unusual characters in a) 108 528.67 T
(string. For example, you can use) 108 514.67 T
4 9.5 Q
(\134n) 268.13 514.67 T
1 11 Q
( to print a carriage r) 279.53 514.67 T
(eturn.) 375.82 514.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "246" 248
%%Page: "247" 249
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(247) 297.75 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 518.83 486 648 R
7 X
V
108 590.45 486 618 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 590.45 486 618 R
7 X
0 0 0 1 0 0 0 K
V
108 611.14 270 611.14 2 L
3 H
2 Z
0 X
N
108 602.14 270 602.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Appendix C) 108 628 T
0 0 0 0 1 1 1 K
1 2 Q
7 X
0 0 0 0 1 1 1 K
(C) 108 566.45 T
0 0 0 1 0 0 0 K
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Internet Resour) 109.42 566.45 T
(ces on Dylan) 315.01 566.45 T
108 135 522 432 R
7 X
V
1 11 Q
0 X
(This section describes wher) 108 424.67 T
(e to obtain additional information about the Dylan) 241.36 424.67 T
(language on Internet. Ther) 108 410.67 T
(e ar) 237.27 410.67 T
(e W) 254.94 410.67 T
(orld-W) 272.95 410.67 T
(ide W) 307.28 410.67 T
(eb pages at:) 335.2 410.67 T
4 9 Q
(http://www.cambridge.apple.com) 135 393 T
(http://www.harlequin.com/full/dylan.html) 135 375 T
(http://www.legend.gwydion.cs.cmu.edu:8001/gwydion/index.html) 135 357 T
1 11 Q
(The main Dylan ftp site contains the Fr) 108 337.67 T
(equently Asked Questions \050F) 296.96 337.67 T
(AQ\051, the r) 437.21 337.67 T
(ef-) 485.73 337.67 T
(er) 108 323.67 T
(ence manual, experimental implementations, and mor) 117.42 323.67 T
(e. It is:) 380.29 323.67 T
4 9 Q
(ftp://ftp.cambridge.apple.com/pub/dylan) 135 306 T
1 11 Q
(The Internet mailing list about Dylan is:) 108 286.67 T
4 9 Q
(info-dylan@cambridge.apple.com) 135 269 T
1 11 Q
(T) 108 249.67 T
(o subsribe to) 113.73 249.67 T
4 9.5 Q
(info-dylan) 178.52 249.67 T
1 11 Q
(, send a message to:) 235.52 249.67 T
4 9 Q
(info-dylan-request@cambridge.apple.com) 135 232 T
1 11 Q
(The same mailing list is accessible via the newsgr) 108 212.67 T
(oup:) 346.98 212.67 T
4 9 Q
(comp.lang.dylan) 135 195 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "247" 249
%%Page: "248" 250
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(248) 72 677.67 T
0 9.5 Q
(Appendix C) 98 677.67 T
(Internet Resources on Dylan) 153.69 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "248" 250
%%Page: "249" 251
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 81 504 117 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(249) 306 111 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 565.5 502.33 619.5 R
7 X
V
106.33 591.95 502.33 619.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
106.33 591.95 502.33 619.5 R
7 X
0 0 0 1 0 0 0 K
V
106.33 612.64 268.33 612.64 2 L
3 H
2 Z
0 X
N
106.33 603.64 268.33 603.64 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Glossary) 106.33 571.95 T
108 135 522 432 R
7 X
V
2 11 Q
0 X
(class) 108 424.67 T
1 F
-0.01 (A de\336nition of a type of other objects, which ar) 135 406.67 P
-0.01 (e called its instances. A class) 363.25 406.67 P
(de\336nes the slots of its instances. Dylan pr) 135 392.67 T
(ovides built-in classes, and users) 335.54 392.67 T
(can de\336ne new classes. When you de\336ne a class, you specify its name, its) 135 378.67 T
(super) 135 364.67 T
(classes, and its slots.) 162.32 364.67 T
2 F
(constant) 108 338.67 T
1 F
(An object that has a name and a value; the value cannot be modi\336ed., Y) 135 320.67 T
(ou) 480.89 320.67 T
(must initialize the value of a constant, and you cannot change its value) 135 306.67 T
(thr) 135 292.67 T
(oughout the execution of a Dylan pr) 149.13 292.67 T
(ogram.) 324.86 292.67 T
2 F
(development environment) 108 266.67 T
1 F
(A collection of tools for Dylan pr) 135 248.67 T
(ogrammers that can include an editor cus-) 294.33 248.67 T
(tom-tailor) 135 234.67 T
(ed for Dylan code, a br) 183.61 234.67 T
(owser) 294.46 234.67 T
(, a compiler) 323.1 234.67 T
(, a debugger) 379.27 234.67 T
(, and a lis-) 438.75 234.67 T
(tener that enables you to type in expr) 135 220.67 T
(essions and to see their values.) 315.82 220.67 T
4 9.5 Q
(#f) 108 197.67 T
1 11 Q
(The false value.) 135 180.17 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "249" 251
%%Page: "250" 252
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(250) 72 677.67 T
0 9.5 Q
(Glossary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
2 11 Q
0 X
(generic function) 108 640.67 T
1 F
(tbd) 135 622.67 T
2 F
(getter) 108 596.67 T
1 F
-0.22 (A method that r) 135 578.67 P
-0.22 (etrieves the curr) 212.07 578.67 P
-0.22 (ent value of a slot in an object. Each slot in a) 290.21 578.67 P
-0.01 (class automatically has a getter de\336ned for it. The getter) 135 564.67 P
-0.01 (\325s name is the same) 407.42 564.67 P
(as the name of the slot.) 135 550.67 T
2 F
(inheritance) 108 524.67 T
1 F
(The ability to arrange for classes that ar) 135 506.67 T
(e logically r) 326.2 506.67 T
(elated to one another to) 382.54 506.67 T
(shar) 135 492.67 T
(e the behaviors and data attributes that they have in common. Each) 155.71 492.67 T
(class inherits fr) 135 478.67 T
(om one or mor) 208.29 478.67 T
(e classes, called its super) 280.16 478.67 T
(classes. If no other) 399.57 478.67 T
(class is appr) 135 464.67 T
(opriate, then the class inherits fr) 194.15 464.67 T
(om the class) 349.87 464.67 T
4 9.5 Q
(<object>) 412.01 464.67 T
1 11 Q
(.) 457.61 464.67 T
2 F
(initialize) 108 438.67 T
1 F
-0.32 (T) 135 420.67 P
-0.32 (o pr) 140.73 420.67 P
-0.32 (ovide an initial value for something that you ar) 159.92 420.67 P
-0.32 (e cr) 386.61 420.67 P
-0.32 (eating, such as a slot) 403.34 420.67 P
(or a variable.) 135 406.67 T
2 F
(instance) 108 380.67 T
1 F
(A member of a class.) 135 362.67 T
2 F
(listener) 108 336.67 T
1 F
-0.31 (A tool similar to a BASIC interpr) 135 318.67 P
-0.31 (eter) 292.04 318.67 P
-0.31 (. Y) 309.7 318.67 P
-0.31 (ou type in a Dylan statement, and the) 321.21 318.67 P
(listener executes the statement and displays any r) 135 304.67 T
(eturn values and output) 375.73 304.67 T
(pr) 135 290.67 T
(oduced by the statement.) 145.76 290.67 T
2 F
(local variables) 108 264.67 T
1 F
(An object that has a name and a value, and has scope within a body) 135 246.67 T
(. Y) 462.37 246.67 T
(ou) 474.2 246.67 T
(de\336ne, initialize, and use local variables within a body) 135 232.67 T
(. Once the body has) 398.21 232.67 T
-0.4 (r) 135 218.67 P
-0.4 (eturned, the local variables ar) 139.15 218.67 P
-0.4 (e no longer de\336ned, and trying to access them) 281.21 218.67 P
(is an err) 135 204.67 T
(or) 174.03 204.67 T
(.) 183.57 204.67 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "250" 252
%%Page: "251" 253
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 657 540 684 R
7 X
0 0 0 1 0 0 0 K
V
0 9.5 Q
0 X
(Glossary) 480.23 677.67 T
2 11 Q
(251) 523.5 677.67 T
108 82.17 540 117 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
0 X
(method) 108 640.67 T
1 F
(A kind of function which belongs to a generic function. Although methods) 135 622.67 T
(ar) 135 608.67 T
(e independent of classes, methods operate on instances of classes. A) 144.65 608.67 T
(method states the kinds of objects that it handles by the type of its r) 135 594.67 T
(equir) 461.89 594.67 T
(ed) 487.3 594.67 T
(ar) 135 580.67 T
(guments.) 144.65 580.67 T
2 F
(module variable) 108 554.67 T
1 F
-0.02 (An object that has a name and a value, much like a global variables in other) 135 536.67 P
(languages. When you de\336ne a module variable, you must initialize it \050that) 135 522.67 T
(is, pr) 135 508.67 T
(ovide an initial value for it\051.) 159.12 508.67 T
2 F
(most speci\336c) 108 482.67 T
1 F
(tbd) 135 464.67 T
4 9.5 Q
(<object>) 108 441.67 T
1 11 Q
(The class that all classes inherit fr) 135 424.17 T
(om, either dir) 296.86 424.17 T
(ectly or indir) 362.98 424.17 T
(ectly) 425.55 424.17 T
(.) 447.39 424.17 T
2 F
(object) 108 398.17 T
1 F
(An individual piece of data. Also called an instance.) 135 380.17 T
2 F
(predicate) 108 354.17 T
1 F
(A function that r) 135 336.17 T
(eturns tr) 215.81 336.17 T
(ue or false. T) 257.3 336.17 T
(r) 318.6 336.17 T
(ue is r) 322.86 336.17 T
(epr) 352.27 336.17 T
(esented as) 368.3 336.17 T
4 9.5 Q
(#t) 421.14 336.17 T
1 11 Q
(, and false is) 432.54 336.17 T
(r) 135 322.17 T
(epr) 139.15 322.17 T
(esented as) 155.17 322.17 T
4 9.5 Q
(#f) 208.02 322.17 T
1 11 Q
(.) 219.42 322.17 T
2 F
(root) 108 296.17 T
1 F
(The starting point of the Dylan class heterar) 135 278.17 T
(chy; the class) 347.96 278.17 T
4 9.5 Q
(<object>) 414.53 278.17 T
1 11 Q
(, which) 460.13 278.17 T
(all Dylan classes inherit fr) 135 264.17 T
(om, either dir) 260.7 264.17 T
(ectly or indir) 326.81 264.17 T
(ectly) 389.39 264.17 T
(.) 411.22 264.17 T
2 F
(setter) 108 238.17 T
1 F
(A method that stor) 135 220.17 T
(es a value in a slot. By default, each slot in a class auto-) 226.98 220.17 T
(matically has a setter de\336ned for it.) 135 206.17 T
2 F
(superclasses) 108 180.17 T
1 F
(tbd) 135 162.17 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "251" 253
%%Page: "252" 254
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 657 504 684 R
7 X
0 0 0 1 0 0 0 K
V
2 11 Q
0 X
(252) 72 677.67 T
0 9.5 Q
(Glossary) 98 677.67 T
72 81 504 118 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 135 522 648 R
V
4 F
0 X
(#t) 108 641.67 T
1 11 Q
(The tr) 135 624.17 T
(ue value.) 164.01 624.17 T
2 F
(type constraint) 108 598.17 T
1 F
(A type associated with variable that ensur) 135 580.17 T
(es that the value of that variable) 339.5 580.17 T
(can hold only objects of that type. V) 135 566.17 T
(ariables, slots, and method parameters) 308.16 566.17 T
(can have type constraints.) 135 552.17 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "252" 254
%%Page: "253" 255
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
108 126 279 486 R
7 X
0 0 0 1 0 0 0 K
V
108 81 540 117 R
V
2 11 Q
0 X
(253) 287.75 100 T
315 126 486 486 R
7 X
V
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
108 126 279 486 R
V
0 X
(Symbols) 108 478.67 T
7 9 Q
(<object>) 108 467 T
1 F
(19) 155.7 467 T
2 11 Q
(A) 108 445.67 T
7 9 Q
(all-superclasses) 108 434 T
1 F
(20) 198.9 434 T
(arithmetic operators) 108 424 T
(spaces needed) 117 414 T
(12) 178.77 414 T
2 11 Q
(C) 108 392.67 T
1 9 Q
(classes) 108 381 T
(inheritance) 117 371 T
(19) 166.06 371 T
(naming convention) 117 361 T
(14) 198.78 361 T
(user-defined) 117 351 T
(21) 172.08 351 T
(comments) 108 341 T
(22) 153.6 341 T
(constants) 108 331 T
(14) 149.89 331 T
2 11 Q
(D) 108 309.67 T
7 9 Q
(def) 108 298 T
(ine class) 124.2 298 T
1 F
(22) 177.3 298 T
(development environments) 108 288 T
(11) 222.53 288 T
2 11 Q
(G) 108 266.67 T
1 9 Q
(generic functions) 108 255 T
(introduction) 117 245 T
(17) 171.39 245 T
(getters) 108 235 T
(23) 139.37 235 T
2 11 Q
(I) 108 213.67 T
1 9 Q
(inheritance) 108 202 T
(19) 157.06 202 T
7 F
(instance?) 108 192 T
1 F
(19) 161.1 192 T
(instances) 108 182 T
(creating) 117 172 T
(23) 153.66 172 T
(initializing slots) 117 162 T
(24) 184.98 162 T
(introduction) 117 152 T
(18) 171.39 152 T
(introduction) 108 142 T
(12, 15) 162.39 142 T
315 126 486 486 R
7 X
V
2 11 Q
0 X
(K) 315 478.67 T
1 9 Q
(keyword parameters) 315 467 T
(introduction) 324 457 T
(24) 378.39 457 T
2 11 Q
(L) 315 435.67 T
7 9 Q
(let) 315 424 T
1 F
(27) 335.7 424 T
(listeners) 315 414 T
(11) 352.72 414 T
(local variables) 315 404 T
(15) 376.38 404 T
(assigning values to multiple) 324 394 T
(27) 440.6 394 T
2 11 Q
(M) 315 372.67 T
7 9 Q
(make) 315 361 T
1 F
(23) 341.1 361 T
(methods) 315 351 T
(15) 354.16 351 T
(relationship to classes) 324 341 T
(21) 415.49 341 T
(module variables) 315 331 T
(12) 388.45 331 T
(multiple values) 315 321 T
(26) 381.39 321 T
2 11 Q
(N) 315 299.67 T
1 9 Q
(naming conventions) 315 288 T
(predicates) 324 278 T
(19) 369.45 278 T
(variables) 324 268 T
(13, 14) 364.48 268 T
2 11 Q
(O) 315 246.67 T
7 9 Q
(object-class) 315 235 T
1 F
(19) 384.3 235 T
(objects) 315 225 T
(18) 346.55 225 T
2 11 Q
(P) 315 203.67 T
1 9 Q
(predicates) 315 192 T
(19) 360.45 192 T
(naming conventions) 324 182 T
(19) 409.6 182 T
2 11 Q
(R) 315 160.67 T
1 9 Q
(root) 315 149 T
(19) 335.82 149 T
107.17 563 305.17 621 R
7 X
V
107.17 593.45 305.17 621 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
107.17 593.45 305.17 621 R
7 X
0 0 0 1 0 0 0 K
V
107.17 614.14 269.17 614.14 2 L
3 H
2 Z
0 X
N
107.17 605.14 269.17 605.14 2 L
1 H
N
36 72 576 720 C
1 30 Q
0 X
0 0 0 1 0 0 0 K
(Index) 107.17 573.45 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "253" 255
%%Page: "254" 256
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
72 675 504 702 R
7 X
0 0 0 1 0 0 0 K
V
72 81 504 118 R
V
2 11 Q
0 X
(254) 72 101 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 126 288 648 R
7 X
V
0 X
(S) 126 640.67 T
1 9 Q
(setters) 126 629 T
(23) 156.18 629 T
(slots) 126 619 T
(getters and setters) 135 609 T
(23) 211.78 609 T
(initializing) 135 599 T
(24) 182.63 599 T
(introduction) 135 589 T
(21) 189.39 589 T
(type constraint) 135 579 T
(22) 199.15 579 T
7 F
(subtype?) 126 569 T
1 F
(20) 173.7 569 T
(superclasses) 126 559 T
(introduction) 135 549 T
(19) 189.39 549 T
2 11 Q
(T) 126 527.67 T
1 9 Q
(type constraints) 126 516 T
(13) 193.97 516 T
7 F
(<object>) 135 506 T
1 F
(22) 182.7 506 T
(of slots) 135 496 T
(22) 167.76 496 T
2 11 Q
(V) 126 474.67 T
7 9 Q
(values) 126 463 T
1 F
(26) 162.9 463 T
(variables) 126 453 T
(naming convention) 135 443 T
(13) 216.78 443 T
(type constraints) 135 433 T
(13) 202.97 433 T
(vectors) 126 423 T
(introduction) 135 413 T
(21) 189.39 413 T
333 126 504 648 R
7 X
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "254" 256
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 256
%%DocumentFonts: Palatino-Italic
%%+ Palatino-Roman
%%+ Palatino-Bold
%%+ Helvetica-Narrow-Bold
%%+ Courier-Bold
%%+ Courier-BoldOblique
%%+ Courier-Oblique
%%+ Courier
%%EOF
