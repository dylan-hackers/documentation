DYLAN FOO LIBRARY SPECIFICATION

* Introduction

This template contains information and guidelines about writing libary
specifications in flat ASCII text.  Please use the conventions
provided with it.  If you use them, you will promote reuse of this
document.  If you don't use them, you will discourage others from
reusing this text and may create needless work for others.

This template does not describe all accepted conventions.  The
authoritative reference is the Harlequin Publications Guide, contained
in the HOPE compound DOCshare-style-guide.


* Document format

** General text formatting

Put an empty line between paragraphs.  


** Headings

Use headings to separate the sections of the document.  A first-level
heading is denoted by one leading asterisk, a second-level heading by
two, and so on.

Try not to use anything deeper than a third-level heading (***);
beyond that, a document can become a maze of headings.  In most
circumstances you can write your material without the need for
anything deeper than a third-level heading by using other conventions.

If you use mixed-case headings (initial cap on the first word, and
only on proper nouns thereafter, as in this template) you will make it
easier for the Documentation group to reuse them.


** Bulleted, numbered, and tagged lists

When you might be considering a set of third-level or deeper headings,
consider using bulleted, numbered or tagged lists to do the work
instead.   

Start a bullet point with a space followed by a single hyphen:

 - This is a bullet.

Start a numbered-list entry with space followed by an Arabic number,
followed by a full stop (period).  Start the numbering sequence at 1
for each new list: 

 1. This is a numbered-list entry.

 2. This is another numbered-list entry.

 ...

 1. This is the beginning of a new list.


A tagged list is a means of presenting a series of items requiring
(often substantial) description.  Follow the tag by a colon, then a
TAB, then the description:

  RADIUS:	The radius of the circle.

  X:		The x coordinate of the centre of the circle.

  Y:		The y coordinate of the centre of the circle.  

  COLOUR:	The colour of the circle.  This is an instance of
		<X-COLOUR-CLASS> ... 

In this example, extra tabs were introduced to align the X, Y, and
COLOUR descriptions with the RADIUS description.  When a description
wraps on to the next line, continue it with the same amount of
indentation, as in the description of COLOUR.

Alternatively, when the text of an item is lengthy, you can follow the
tab by a colon, then a blank line, and then the text:

 Description:

 This class records colour information ...


** Notes and warnings

To draw the reader's attention to an important paragraph, use one of
"Note:", "Warning:", or "Caution:" at the start of it.


** Special text formatting within paragraphs

*** Parameters 

To distinguish an element, such as a parameter, that is not a literal
but instead stands for something else, put underscores at either side
of it.  For example:

  The _root_ parameter is a UNIX directory.


*** Program literals

To distinguish a computer-language literals, file name, or directory
name from the surrounding text, write it in FULL CAPS for clarity.
Where the case of the text is important, preserve it.

For example:

  Use the BYE: command to end an emulator session.

  This function prints the string "Hello world!"

Use this full-caps convention for names of functions, classes,
constants, literal strings, and the like in text.  Do not use it in
paragraphs entirely devoted to such material.

For example:  

  The TRIPLE function returns the triple of a number.  Here is a
  TRIPLE method on <INTEGER>:

    define method triple (x :: <integer>)
      x * 3;
    end method triple;


*** Linguistic emphasis and the definition of terms

To emphasise a word in text, or to mark the first use of a special
term, put underscores at either side of it:

  A Dylan _program_ consists of one or more _libraries_.

  _All_ Dylan applications contain the DYLAN library.


** Reference documentation for interfaces

Every reference section should have at least the following sections.
Use tagged list entries to format them:

  Summary:	A one-line summary of the interface

  Module:	Name of the module that owns the interface

  Library:	Name of the library that defines the interface

  Description:	A description of the interface

Any reference section can have the following optional sections:

  Example:	A brief code example

  See Also:	Cross-references to other interfaces or sections

Particular interface types require additional sections.  Table 1,
below, lists the possible interface types and the additional sections
required for each.


  INTERFACE TYPE		ADDITIONAL SECTIONS 

  Class				Superclasses
				Init-keywords
				Operations

  Generic function		Signature
				Arguments
				Values
				Exceptions

  G. f. method			Signature
				Arguments
				Values
				Exceptions

  Function			Signature
				Arguments
				Values
				Exceptions

  Definition			Macro call	
				Arguments
				Values

  Special operator		Macro call	
				Arguments
				Values

  Variable			Type
				Initial value

  Constant			Type
				Value

   TABLE 1: INTERFACE TYPES AND ADDITIONAL REFERENCE SECTIONS


The interface type Class can be modified by zero or more selections
from the sets of adjectives listed in Table 2.  Only one member of
each set is allowed per class.


  ADJECTIVE SET		DEFAULT

  Abstract		Concrete
  Concrete

  Primary		Free
  Free

  Open			Sealed
  Sealed

  Instantiable		Instantiable for a Concrete class,
  Uninstantiable	Uninstantiable for an Abstract class

   TABLE 2: ADJECTIVES MODIFYING THE INTERFACE TYPE `CLASS'


The interface type Generic Function can be modified by zero or more
selections from the sets of adjectives listed in Table 3.  Only one
member of each set is allowed per generic function. 


  ADJECTIVE SET		DEFAULT

  Open			Sealed
  Sealed

   TABLE 3: ADJECTIVES MODIFYING THE INTERFACE TYPE `GENERIC FUNCTION'


** Example interface descriptions 

In these examples, the interface description is indented at least two
spaces from the margin after the heading.  Consider doing this in your
interface descriptions to improve the readability of the document.  


<SIMPLE-ERROR>					Sealed instantiable class

  Summary:	The class of error conditions that consist of just an
		error message. 

  Module:	DYLAN 

  Library:	DYLAN

  Superclasses:	<ERROR>

  Init-keywords:

   FORMAT-STRING:	An instance of <STRING>.
   FORMAT-ARGUMENTS:	An instance of <SEQUENCE>.

  Description:

  The class of ...

  Operations:

  CONDITION-FORMAT-STRING	Returns the ...
  CONDITION-FORMAT-ARGUMENTS	Returns the ... 


INVERT-TRANSFORM				Generic function

  Summary:	Returns the inverse of a transform.

  Module:	DUIM

  Library:	DUIM

  Signature:	INVERT-TRANSFORM _transform_ => _inverse_

  Arguments:

    _transform_	A DUIM transform, an instance of <TRANSFORM>

  Values:

    _inverse_	A transform that is the inverse of _transform_.

  Exceptions:	Signals <SINGULAR-TRANSFORM> is _transform_ is not
		invertible. 

  Description:

  Returns the inverse of a transform ...


AS-UPPERCASE						G. f. method

  Summary:	Coerces an object to uppercase.

  Module:	DYLAN

  Library:	DYLAN

  Signature:	AS-UPPERCASE _character_ => _uppercase-character_

  Arguments:

   _character_	An instance of <CHARACTER>.

  Values:

   _uppercase-character_	An instance of <CHARACTER>.

  Exceptions:	...

  Description:

  This method returns the ...


** Code examples

When quoting a fragment of Dylan code, present it as it is in the
source, but indent it two spaces from the margin for clarity:

  define method say-absolute-time (object :: <time>) => ()
          let (hours, minutes) = decode-total-seconds (object);
          format (*window*, "%d:%d", hours, minutes);
          values();
  end method say-absolute-time;


When quoting from an interactive session with the listener, indent it
two spaces as above, and include the prompt: 

  DYLANWORKS-USER 1 ? double(12);
  24
  DYLANWORKS-USER 2 ? define method foo (x :: <integer>)
  "it's an integer";
  end method foo;
  DYLANWORKS-USER 3 ?


* Spec outline

Following is a possible set of top-level headings for the library
spec. The spec does not have to have this structure, but it should
contain all the content listed here.

** Introduction

Provide entries for the following fields:

 Author(s):
 Date of last revision:
 Keywords:  
 Potential users: +

  ++ Choose one from `Anyone', `Only DylanWorks users', `Only
     Harlequin users', and `Only Dylan group members'.

Provide a very brief description of the library so that readers know
immediately what it is for.  
  

** Foo library design

Describe the design and architecture of the library, including its
relationship to other libraries.


** Foo library definition

If possible supply the actual library definition. At least provide the
following information:

 Library name
 Modules exported
 Libraries used


** Foo library interfaces

Provide reference-style information for all public classes, generic
functions, macros, etc., defined by the library.


** Foo library implementation

Provide any desirable notes or details about the implementation of the
library.  This section can discuss internal issues and interfaces not
meant to be visible outside the library.
