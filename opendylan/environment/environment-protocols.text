Title:     The Environment Protocols Library
Synopsis:  A reference for the environment-protocols library
Authors:   Andy Armstrong, Chris Page
Copyright: 1996, 1997 Functional Objects, Inc. All rights reserved.
Versions:
  11 Nov 96 - andrewa wrote introduction.
  21 Nov 96 - andrewa second draft.
  21 Jan 97 - andrewa removed some obsolete issues, plus minor cleanups.
  11 Feb 97 - cpage   created sections, determined formatting, and wrote
                      initial function entries.
  15 Mar 97 - andrewa added character and module variable objects.
  18 Mar 97 - cpage   added section numbering, defined and ordered sections,
                      added more documentation, including classes. Removed
                      function signatures and augmented "Arguments:" format to
                      contain information from the signature (e.g. "#key").
                      Adjusted format quite a bit to improve readability.
   9 May 97 - jason   added notes on OPEN-PROJECT, FIND-PROJECT,
                      NEW-PROJECT, and NEW-PROJECT-FROM-FILE

==============================================================================
0.0 About This Document
==============================================================================

  This document describes the classes and functions found in the
  environment-protocols library, a part of the Functional Developer implementation.
  The library represents the APIs used to communicate between various parts of
  the environment.

  Most, if not all, of the functions take a <server> parameter that specifies
  from which server information should be provided.  For the sake of brevity,
  this parameter will not be discussed in each function description, unless
  there is something noteworthy about it.

  NOTE: Some items are marked with [?? <<user name>>: <<note>>] where the
  information is uncertain or unknown.  These should be resolved as soon as
  possible.  Functions that have not yet been filled out are listed as "-
  function".


0.1 Contents
==============================================================================

  Since this is a plain text document, there are no page numbers, but we've
  included this section to help orient the reader.

  1.0   Overview
  1.1     Environment Objects
  1.2     Server Objects
  1.2.1     Project Objects
  1.2.2     Compiler Databases
  1.2.3     Applications
  1.3     Abstract Behavior Classes
  1.3.1     Compiler Objects
  1.3.2     Application Objects
  1.3.3     Application and Compiler Objects
  1.3.4     Dylan Objects
  2.0   Servers
  2.1     Project Objects
  2.2     Compiler Databases
  2.3     Applications
  3.0   Environment Objects
  3.1     Compiler Objects
  3.2     Application Objects
  3.3     Application and Compiler Objects
  4.0   Meta Objects
  4.3     Namespaces
  4.3.1     Libraries
  4.3.2     Modules
  4.3.3     Names
  4.4     Definitions
  4.5     Macros
  4.6     Variables and Constants
  4.6.1     Module Variables
  4.6.2     Constants
  4.6.3     Local Variables
  4.7     Slots
  4.8     Composite Objects
  5.0   Dylan Objects
  5.1     Types
  5.1.1     Classes and Slots
  5.1.2     Singletons
  5.2     Simple Objects
  5.2.1     Characters
  5.2.2     Symbols
  5.2.3     Booleans
  5.3     Numbers
  5.4     Collections
  5.4.1     Pairs
  5.4.2     Ranges
  5.4.3     Strings
  5.5     Functions
  5.5.1     Generic Functions
  5.5.2     Methods
  6.0   Custom Browsing Objects
  6.1     DUIM Objects
  6.1.1     Frames
  6.1.2     Sheets
  6.1.3     Gadgets
  7.0   Compilation
  7.1     Warnings
  8.0   Debugging
  8.1     Breakpoints
  8.2     Stack Frames
  8.3     Threads
  8.4     Execution Contexts



==============================================================================
1.0 Overview
==============================================================================

  The environment-protocols library is intended to provide a unified model of
  all the information that the environment needs to present to the user, and a
  set of protocols for accessing that information.

  Information is represented by 'environment objects', which are delivered
  from 'servers'.  This chapter briefly discusses environment objects and
  servers.  More detail is provided in later chapters.


1.1 Environment Objects
==============================================================================

  The root class of the protocol is <environment-object>, which is the class
  of objects that the user can see in the environment.  The environment allows
  the user to request the 'properties' of any of these objects, which it
  presents in the form of a Windows 95 property sheet.  All of the information
  in the property pages in the property sheet is determined using the
  environment protocols.

  Note that an important property of environment objects is that there is only
  one of them for each object that they represent [?? cpage: How best to
  phrase this?].  For example, there is only one instance of <class-object>
  that represents the class <object>.  This identity is vital so that the
  user's model is directly mirrored in the environment, but it means we have
  to do some work so that if the same object gets returned from two different
  places (the application and the compiler, say) that they actually both
  return the same environment object.


1.2 Server Objects
==============================================================================

  The class <server> is an abstract class that encapsulates the notion of an
  information server.  The majority of the environment protocols take a server
  object as the first argument, and it is up to this server to return the in
  formation as a set of environment objects.

  For example, take the protocol function do-class-subclasses.  This takes a
  <server> and a <class-object>, and returns a sequence of <class-object>s
  representing the subclasses.

  There are three classes of server object, described in the next three
  sections -- <project-object>, <compiler-database>, and <application>.


1.2.1 Project Objects
---------------------

  The class <project-object> represents the user's project.  It has accessors
  project-application and project-compiler-database that return the instances
  (if they exist) of <application> and <compiler-database>.  It is also a
  subclass of <server>, and implements the environment protocols itself by
  marshaling the calls through to the application or compiler database as
  appropriate.

  The project object will also store a query database, which is a table
  mapping from objects to the client that requested some properties of that
  object.  If the application or the compiler databases informs the project
  that information about that object has changed, then the project browser
  will send notifications to all of the clients who are dependent on that data
  so that they can update themselves if necessary.

  NOTE: there is one complex issue, which is what to do about objects that
  exist both in the application and in the compiler database.  For example,
  the subclasses of a class can be different in the application from the
  compiler database, because the user can add new classes at application.  The
  current thinking is just to merge the results computed from both, and maybe
  use some UI technique to separate them if that is required.  Hopefully most
  users won't use such dynamic techniques, and hence won't need to know about
  the difference.


1.2.2 Compiler Databases
------------------------

  The class <compiler-database> represents compiler databases, which store the
  information for a particular library.  This class is also a subclass of
  <server>, and hence also implements any of the appropriate environment
  protocols.

  The compiler database has a function compiler-database-project to return the
  project for which a database was opened.


1.2.3 Applications
------------------

  The class <application> represents the running application to the user, and
  so provides a number of useful protocols, such as application-threads,
  application-stopped? etc.  This class is a subclass of <server>, and hence
  obeys all of the environment protocols that apply.  Thus there is a method
  for do-class-subclasses, but there isn't a method for library-modules, say,
  because libraries aren't application objects.

  There is a function application-project that returns the project for which
  an application was created.


1.3 Abstract Behavior Classes
==============================================================================

  There are a few other abstract classes that need to be explained before we
  can get onto the core classes.  These classes provide behavior that the core
  classes can inherit.


1.3.1 Compiler Objects
----------------------

  The abstract class <compiler-object> is the superclass of any object that
  exists in a compiler database, such as libraries, methods and classes.
  These objects are typically returned by the protocol methods on
  <compiler-database>.

  Compiler objects have a slot compiler-object-proxy where they store the
  actual object returned by the compilation system interface library.  So, as
  with application objects, the environment doesn't directly subclass compiler
  classes, but instead encapsulates them.


1.3.2 Application Objects
-------------------------

  The abstract class <application-object> is the superclass of any object that
  exists in the application, such as integers, collections, classes etc.
  These objects are typically returned by the protocol methods on
  <application>.

  The application object has a slot application-object-proxy where it stores
  the actual object from the application manager.  Thus the environment
  doesn't subclass application manager classes, but instead encapsulates them.
  This means that the environment class hierarchy is completely abstract, and
  only the code that needs to talk to the application manager needs know about
  application manager classes.


1.3.3 Application and Compiler Objects
--------------------------------------

  The abstract class <application-and-compiler-object> is a subclass of both
  <application-object> and <compiler-object>, and is used for objects that can
  appear both in the application and in a compiler database, such as classes
  and functions.  It is distinct class from <application-object> and
  <compiler-object> so that special behavior can be added when doing queries
  that need to potentially go through both the application and the compiler
  databases.


1.3.4 Dylan Objects
-------------------

  The abstract class <dylan-object> is the superclass of any environment
  object that is defined by the Dylan language.  This class is mixed into all
  of the appropriate classes in the environment, but it currently doesn't
  provide any behavior.  However, it seems like a useful abstraction that we
  might add behavior to at some point.


==============================================================================
2.0 Servers
==============================================================================

  This chapter describes servers; objects that provide information via
  environment-objects.


  <server>                                               [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of servers.

  Superclasses:  <object>

  Init-keywords: None.

  Description:

  The class of servers.


  Functions on <server>
  ----------------------------------------------------------------------------

  server-project                                       [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the project of a server.

  Arguments: server       An instance of <server>.

  Values:    project      An instance of <project-object>.

  Description:

  Returns the project to which /server/ belongs.


  record-client-query                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Records a database query made by a client, so that the client can be
  notified if the query results change.

  Arguments: server       An instance of <server>.
             client       An instance of <object> [?? cpage: more specific?].
             object       An instance of <environment-object> [?? cpage].
             type         An instance of <query-type>.

  Values:    None.

  Description:

  Records a query on /server/ made by /client/, so that /client/ can be
  notified if the query results change.  The query is about /object/ and the
  type of query is indicated by /type/.

  Generally, if any property of /object/ changes that affects the information
  returned by the query, note-object-properties-changed() will be called with
  /client/, /object/, and /type/ as parameters.

  This is primarily used to inform user interfaces when to update their
  displays.


2.1 Project Objects 
==============================================================================

  <project-object>                                       [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of projects.

  Superclasses:  <server> <environment-object>

  Init-keywords:

    proxy:       An instance of <object> specifying the proxy used as state by
                 the project.  The default is #f.
    application: An instance of <application> specifying the application
                 server.  The default is #f.
    compiler-database:
                 An instance of <compiler-database> specifying the compiler
                 database.  The default is #f.
    breakpoints: An instance of <sequence> with elements that are instances of
                 <breakpoint-object>.  Specifies the set of breakpoints.  The
                 default is #f.

  Description:

  The class of projects.


  Functions with parameters or return results specializing on <project-object> 
  ----------------------------------------------------------------------------
    - project-proxy
    - project-application
    - project-compiler-database
    - edit-project-source
    - open-project
    - find-project
    - new-project	
    - new-project-from-file
    - current-project, current-project-setter
    - project-name
    - project-libraries
    - project-source-location-cache
    - project-sources
    - project-source-location
    - source-record-colorization-info
    - project-directory
    - project-add-breakpoint
    - project-remove-breakpoint
    - project-breakpoint-changed
    - do-project-breakpoints
    - build-project
    - rebuild-project
    - compile-project-file
    - load-project-file
    - project-file-loaded?
    - project-file-compiled?


  [?? cpage: It seems most of these belong in Debugging or a section on code
  execution.]

  open-project	                                       [Open Generic Function]
  ----------------------------------------------------------------------------
  Attempts to open a project containing the given object.

  Arguments: object       An instance of <object>.

  Values:    project      An instance of <project-object> or #f.

  Description:

  Attempts to open a project containing the given object. Eg the
  object could be a locator (eg a .lid, .dylan, or even a .exe file)
  or source record.

  find-project	                                       [Open Generic Function]
  ----------------------------------------------------------------------------
  Attempts to open a project named by the given object.

  Arguments: object       An instance of <object>.

  Values:    project      An instance of <project-object> or #f.

  Description:

  Attempts to open a project named by the given object. Usually the
  object will be a string name of a project that is looked up in
  the registry etc. A default method coerces locators to their base
  name before using that for looking in the registry.

  new-project	                                       [Open Generic Function]
  ----------------------------------------------------------------------------
  Attempts to create a project containing or named by the given object.

  Arguments: object       An instance of <object>.

  Values:    project      An instance of <project-object> or #f.

  Description:

  Attempts to create a project containing or named by the given
  object. If the object is a locator then the former case is assumed
  and the default method calls NEW-PROJECT-FROM-FILE.

  new-project-from-file                                [Open Generic Function]
  ----------------------------------------------------------------------------
  Attempts to create a project containing the given file.

  Arguments: locator       An instance of <locator>.
	     file-type     An instance of <symbol>.

  Values:    project      An instance of <project-object> or #f.

  Description:

  Attempts to create a project containing the given file. A method on
  the #"exe" file-type creates a simple wrapper project around the
  given executable so that debugging can take place.

  source-record-colorization-info                      [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns #f or some object (of unspecified type) providing a handle to
  compile-generated (optimization-related) coloring information.

  Arguments: project       An instance of <project-object>.
             source-record An instance of <source-record>.

  Values:    info          An instance of an unspecified type, or #f.

  Description:

  Returns some object providing a handle on the (usually optimization-related)
  colorization information generated by the compiler.  The type and meaning of
  this object depends on the particular subclasses of <project-object> and
  <source-record> passed in (though it will never be <boolean>, of course!).
  This function will return #f if no information is available.

  project-valid-code?                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns whether the code is a syntactically complete expression.

  [??  chiles: This function may be removed after integrating the interactor
  with the actual compiler-interface, debugger-manager, and
  environment-protocols libraries.]

  Arguments: server       An instance of <server>.
             code         An instance of <string>.
       #key  module       An instance of <module-object>.

  Values:    valid?       An instance of <boolean>.
             reason       An instance of <string>.

  Description:

  Returns whether the code is a syntactically complete expression.

  This function does not need dynamic context information or stack-frame
  lexical information because it just returns whether the string is a
  syntactically complete code fragment.


  project-execute-code                                 [Open Generic Function]
  ----------------------------------------------------------------------------
  Arranges for code to be evaluated in the target application.

  Arguments: server          An instance of <server>.
             code            An instance of <string>.
             thread          An instance of <thread-object>.
       #key  module          An instance of <module-object>.  The default is
                             the dylan-user module of the dylan library.
             stack-frame     An instance of <stack-frame-object>.

  Values:    execution-info  An instance of <execution-info> or #f.

  Description: 

  This function creates a source-record for /code/ and arranges with the
  compiler to process the source-record for evaluation, including setting up
  the target application to execute the code.  While the compiler is
  processing the code, whatever warnings or errors ensue are delivered to the
  interactor pane for the thread.

  This function can only be called when the target application is in a
  debugger transaction.

  /stack-frame/ provides, via other environment protocols, additional
  evaluation context information, such as stack-frame-open-source-location().
  It is required for evaluating code within the lexical context of a stack
  frame, otherwise /module/ and /thread/ arguments are sufficient.

  If the compiler successfully delivered an execution request to the target
  application, an instance of <execution-info> is returned.  If the compiler
  refused to execute the code, then #f is returned.  [?? cpage: "refused"? Do
  you mean, "If the code cannot be executed"?]


  record-return-values                                 [Open Generic Function]
  ----------------------------------------------------------------------------
  Pass return values to the Interactor component via whatever interface it
  provides (or whatever new environment protocols we create to support it).

  Arguments: project       An instance of <project-object>
             execution-id  An instance of <execution-id>
             values        An instance of <sequence> with elements that are
                           instances of <application-object>.

  Values:    None.

  Description:

  Pass return values to the Interactor component via whatever interface it
  provides (or whatever new environment protocols we create to support it).


  project-execution-info                               [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the execution-info for an execution-id.

  Arguments: project         An instance of <project-object>.
             execution-id    An instance of <execution-id>.

  Values:    execution-info  An instance of <execution-info> or #f.

  Description:

  Returns the execution-info for /execution-id/, or #f if /execution-id/ is
  not currently valid.  /project/ must be the same project passed to
  project-execute-code().


  project-remove-execution-info                        [Open Generic Function]
  ----------------------------------------------------------------------------
  Removes the execution-info from a project.

  Arguments: project         An instance of <project-object>.
             execution-info  An instance of <execution-info>.

  Values:    None.

  Description:

  Removes the /execution-info/ from /project/.  If /execution-info/ is not in
  /project/, this function does nothing.  /project/ must be the project passed
  to project-execute-code().


  execution-info-id                                            [Sealed Method]
  ----------------------------------------------------------------------------
  Returns the execution-id for an execution-info.

  Arguments: execution-info  An instance of <execution-info>.

  Values:    execution-id    An instance of <execution-id>.

  Description:

  See <execution-info>.


  execution-info-thread                                        [Sealed Method]
  ----------------------------------------------------------------------------
  Returns the thread for an execution-info.

  Arguments: execution-info  An instance of <execution-info>.

  Values:    thread          An instance of <thread-object>.

  Description:

  See <execution-info>.


2.2 Compiler Databases
==============================================================================

  <compiler-database>


  Functions on <compiler-database>
  ----------------------------------------------------------------------------

    - compiler-database-project


  find-compiler-proxy                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Return the compiler database proxy for an application proxy.

  Arguments: database           An instance of <compiler-database>.
             application-proxy  An instance of <object>.

  Values:    compiler-proxy     An instance of <object> [?? cpage: or #f?].

  Description:

  Given an application proxy, return the compiler database proxy for the
  corresponding environment object [?? cpage: or #f?].


2.3 Applications
==============================================================================

  
  <application>                                          [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of application info servers.

  Superclasses:  <server>

  Init-keywords:

    project:      An instance of <project-object>.  This init-keyword is
                  required.
    filename:     An instance of <string>.  This init-keyword is required.
    arguments:    An instance of <string>.  Defaults to "".

  Description:

  To run a built application, you make an <application> and then call
  run-application() on the resulting object.  The application-state() of a
  newly made application is #"uninitialized".



  Functions on <application>
  ----------------------------------------------------------------------------


  run-application                                      [Open Generic Function]
  ----------------------------------------------------------------------------
  Starts a target application running.

  Arguments: application        An instance of <application>.
       #key  debug?             An instance of <boolean>.  Defaults to #f.
             filename           An instance of false-or(<string>).  Defaults
	                        to #f.
	     arguments          An instance of false-or(<string>).  Defaults
	                        to #f.

  Values:    application        An instance of <application>.  The same
                                object as the one passed in.

  Description:

  This function takes an <application> that must fully identify an executable
  file to be run as a target application.  /Filename/, if supplied, must be
  equal to the string supplied as the filename: argument used to make() the
  /application/.

  /Arguments/, if supplied, is a string of command-line switches for the
  application.  If /application/ has an application-arguments() slot that is
  not equal to "", then the slot must be equal to /Arguments/.

  /Debug?/ indicates whether the application should be stopped immediately
  after it starts executing.


  continue-application                                 [Open Generic Function]
  ----------------------------------------------------------------------------
  Causes the target application to continue running.

  Arguments: application         An instance of <application>.

  Values:    None.

  Description:

  This function continues /application/ if it is stopped.  There is no action
  taken, signalling an error or otherwise, if /application/'s state is not
  stopped, and /application/ is running.

  If /application/ is not running, this function signals an error.  [??
  chiles: this should probably be a development environment notification as
  opposed to an error.  Because of the nature of the world, the target
  application could be not running at any time.]


  stop-application                                     [Open Generic Function]
  ----------------------------------------------------------------------------
  Stops the target application, entering a debugger transaction.

  Arguments: application         An instance of <application>.

  Values: none.

  Description:

  This function stops /application/ for debugging.  It immediately returns and
  does not wait for /application/ to stop, which should happen immediately.


  close-application                                     [Open Generic Function]
  ----------------------------------------------------------------------------
  Terminates the target application.

  Arguments: application         An instance of <application>.

  Values: none.

  Description:

  This function terminates /application/ and marks it as as being invalid for
  any further operations.

  Any further operations on the application will signal an error.  [??
  chiles: perhaps these errors should be a development environment
  notification as opposed to an error.  Because of the nature of the world,
  the target application could terminate at any time.]


  application-running?                                 [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns whether the target application has begun running.

  Arguments: application         An instance of <application>.

  Values:    running?            An instance of <boolean>.

  Description:

  Returns whether the target application has begun running.  When an
  <application> has just been made, its state is #"uninitialized".  After it
  begins executing, it notifies the development environment, and its state
  changes to #"running".  After an <application> terminates, its state is
  #"closed".


  application-stopped?                                 [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns whether the target application is stopped in a debugger transaction.

  Arguments: application         An instance of <application>.

  Values:    stopped?            An instance of <boolean>.

  Description:

  Returns whether the target application is stopped in a debugger
  transaction.


  application-closed?                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns whether the target application has terminated.

  Arguments: application         An instance of <application>.

  Values:    closed?             An instance of <boolean>.

  Description:

  Returns whether the target application has terminated.


  <application-state>                                                   [Type]
  ----------------------------------------------------------------------------
  The type representing the enumerable set of values indicate a target
  application's state.

  Values: #"uninitialized"    Indicates the target application has been
                              created as an <application> object, but it
			      has not yet begun executing.
          #"running"          Indicates the target application has begun
	                      executing.
	  #"stopped"          Indicates the target application is stopped
	                      in a debugger transaction.
	  #"closed"           Indicates the target application has terminated.


  application-state                                    [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the state of the target application.

  Arguments: application         An instance of <application>.

  Values:    state               An instance of <application-state>.

  Description:

  Returns the state of the target application.


  application-threads                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns a sequence of <thread-object>s.

  Arguments: application         An instance of <application>.
       #key  client              An instance of <object>.

  Values: threads                An instance of <sequence>.

  Description:

  Returns a fresh sequence of <thread-object>s representing the threads
  currently alive in the target application.

  /Client/ is ignored.


  find-application-proxy                               [Open Generic Function]
  ----------------------------------------------------------------------------
  Return the application proxy for a compiler database proxy.

  Arguments: server             An instance of <server>.
             compiler-proxy     An instance of <object>.

  Values:    application-proxy  An instance of <object>.

  Description:

  Given a compiler database proxy, return the application proxy for the
  corresponding environment object [?? cpage: or #f?].  [?? chiles: it
  currently is not clear which server will actually implement this and which
  other two will defer to that implementing server.  This is because we don't
  know whether the functions Tony and Gail agreed to will come from the DM or
  the compiler-interface library.]


  update-application                                   [Open Generic Function]
  ----------------------------------------------------------------------------
  [??] Synchronize the target application with changes to the project sources.

  Arguments: server             An instance of <server>.
       #key  progress-callback  An instance of a <function>.

  Values:    none

  Description:

  [?? chiles: This function is a place holder for work in case we need to do
  something special to update the target application to be in sync with
  project sources.  Ignoring UI issues with how this gets instigated, I
  suspect that the means for updating the target process is via
  project-execute-code.]



==============================================================================
3.0 Environment Objects
==============================================================================

  This chapter describes environment objects; objects that are used to
  represent UI-browsable data -- most classes in the environment-protocols
  library are subclasses of <environment-object>.

  A note about proxies: [?? cpage: not sure where to put this.] Most instances
  of <environment-object> are instances of <compiler-object> and/or
  <application-object>, and, as such, have proxy objects.  Note that although
  the class and value of proxies is not defined, each instance of
  <compiler-object> and <application-object> must have a proxy value that is
  unique to all object proxies within a project, as the proxy is used to look
  up environment objects stored in a table by keying on the proxy.

  A value of #f indicates that there is no proxy.  However, only instances of
  <application-and-compiler-object> may have a #f proxy, and only one of the
  two proxies may be #f (i.e. at least one of the proxies must be a unique
  non-#f value).


  <environment-object>                                   [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of environment objects.

  Superclasses:  <object>

  Init-keywords:

    name:        An instance of <object> [?? cpage: <string>?] specifying the
                 primitive name of the object.  The default is #f.

  Description:

  The class of objects that can be browsed in the environment.

  If name: is #f, the primitive name of the object will be computed the first
  time environment-object-primitive-name() is called on an instance of this
  class.  [?? cpage: Should we change the key to primitive-name: ?]

  NOTE: The name: key is, in fact, rarely used.  Usually, the name should be
  computed via environment-object-primitive-name().  Because of this, and for
  the sake of brevity, this document does not mention this key where it is
  inherited by other classes.

  [?? cpage: I put that last line in because currently I'm putting inherited
  init-keywords in each classes documentation.  We may wish to remove them
  because most objects in the document tend to inherit two or three of the
  same keys.]


  Functions on <environment-object>
  ----------------------------------------------------------------------------

  note-object-properties-changed                       [Open Generic Function]
  ----------------------------------------------------------------------------
  Notifies a client that the properties of an object have changed with respect
  to a client's query on that object.

  Arguments: client       An instance of <object> [?? cpage: more specific?].
             object       An instance of <environment-object> [?? cpage].
             type         An instance of <query-type>.

  Values:    None.

  Description:

  Notifies /client/ that the properties of /object/ have changed with respect
  to a query previously registered with record-client-query().


  environment-object-type-name                         [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns a UI-presentable string that names the type of the object.

  Arguments: object       An instance of <environment-object>.

  Values:    type-name    An instance of <string>.

  Description:

  Returns a string that names the type of /object/.  This string is displayed
  by user interface.  Roughly, /type-name/ briefly describes the class of the
  object, word-initial capitalized.  Here are some examples:

    <class-object>            => "Class"
    <generic-function-object> => "Generic Function"
    <method-object>           => "Method"
    <slot-object>             => "Slot"
    <domain-object>           => "Sealed Domain"


  environment-object-primitive-name                    [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns a UI-presentable string that represents the primitive name of an
  object.

  Arguments: server       An instance of <server>.
             object       An instance of <environment-object>.

  Values:    name         An instance of <string> or #f.

  Description:

  Returns a string that is the primitive name of /object/, or #f if it has no
  primitive name.  This string is displayed by user interface.  Roughly,
  /name/ is the name of the object without external punctuation.  Most objects
  have no primitive name.  A more "complete" name can be built from the
  primitive name, as with environment-object-display-name().  Here are some
  examples:

    <name-object>      => the name within the <name-object>'s namespace
    <symbol-object>    => the symbol name, without '#', or '"'
    <string-object>    => the string contents, without '"'
    <boolean-object>   => "#t" or "#f"
    <number-object>    => the simplest representation of the <number-object>'s
                          value ("1", "1.0", etc.)

  Most other objects -- modules and libraries for example -- don't actually
  have names, but the methods on them call environment-object-primitive-name()
  on a <name-object> that refers to them.

  The default method calls get-environment-object-primitive-name() to get the
  name from a specific server, then caches the name to speed further access to
  it.

  Generally, it is not necessary to add methods to this function unless you
  need to alter this behavior.  Methods should be added, instead, to
  get-environment-object-primitive-name().


  get-environment-object-primitive-name                [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns a UI-presentable string that represents the primitive name of an
  object.

  Arguments: server       An instance of <server>.
             object       An instance of <environment-object>.

  Values:    name         An instance of <string> or #f.

  Description:

  Returns a string that is the primitive name of /object/, or #f if it has no
  primitive name.  This string is displayed by user interface.  This function
  is called by environment-object-primitive-name(), which caches the result.
  See that function's documentation for details.


  environment-object-source                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns a string containing the source code that defines an object.

  Arguments: server       An instance of <server>.
             object       An instance of <environment-object>.

  Values:    source       An instance of <string> or #f.

  Description:

  Returns a string that contains the source code that defines /object/, or #f
  if either there is no source code or it is not currently available.


    - environment-object-name, do-environment-object-name
    - environment-object-unique-name
    - environment-object-matches-name?
    - environment-object-variable
    - find-environment-object
    - present-environment-object


3.1 Compiler Objects
==============================================================================

  <compiler-object>                                      [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of environment objects with compiler proxies.

  Superclasses:  <environment-object>

  Init-keywords:

    compiler-object-proxy:
                 An instance of <object> specifying the compiler database's
                 proxy for the object, or #f if there is no proxy.  If the
                 argument is not supplied, an error is signalled.

  Description:

  The class of environment objects with compiler proxies.  Instances are only
  created by instances of <compiler-database>, and the proxy value is private
  and used only by the instantiating server.


  Functions on <compiler-object>
  ----------------------------------------------------------------------------

  compiler-object-proxy                                             [Function]
  ----------------------------------------------------------------------------
  Returns the proxy object of a compiler object.

  Arguments: object       An instance of <compiler-object>.

  Values:    proxy        An instance of <object>.

  Description:

  Returns the proxy object of /object/ that is used by a compiler database to
  represent /object/, or #f if it doesn't have a compiler proxy.  [?? cpage:
  In which case it must have an application proxy?]


  invalidate-compiler-proxy                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Invalidates the proxy object of a compiler object.

  Arguments: server       An instance of <server>.
             object       An instance of <compiler-object>.

  Values:    None.

  Description:

  Invalidates the proxy object of /object/ that is used by a compiler database
  to represent /object/.  Subsequent calls to compiler-object-proxy() on
  /object/ will not return a valid proxy [?? cpage: can a proxy be set after
  invalidation?].

  This is typically used by a compiler database [?? cpage: Is this true?] to
  tell the environment when the database no longer has a valid proxy for that
  object, due to recompilation, for example.  If /object/ still has a valid
  proxy for other servers, /object/ is still valid, but no longer has any
  information available that would be provided by the compiler database.  If
  all proxies are invalidated, /object/ may become entirely invalid, after
  which it can no longer be used by the environment.


3.2 Application Objects
==============================================================================

  <application-object>                                   [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of environment objects with application proxies.

  Superclasses:  <environment-object>

  Init-keywords:

    application-object-proxy:
                 An instance of <object> specifying the application's proxy
                 for the object, or #f is there is no proxy.  The default
                 value is #f.

  Description:

  The class of environment objects with application proxies.  Instances are
  only created by instances of <application>, and the proxy value is private
  and used only by the instantiating server.


  Functions on <application-object>
  ----------------------------------------------------------------------------

  application-object-proxy                                          [Function]
  ----------------------------------------------------------------------------
  Returns the proxy object of an application object.

  Arguments: object       An instance of <application-object>.

  Values:    proxy        An instance of <object>.

  Description:

  Returns the proxy object of /object/ that is used by an application to
  represent /object/.  If there is no application proxy [??  cpage: what
  happens?].


  invalidate-application-proxy                         [Open Generic Function]
  ----------------------------------------------------------------------------
  Invalidates the proxy object of an application object.

  Arguments: server       An instance of <server>.
             object       An instance of <application-object>.

  Values:    None.

  Description:

  Invalidates the proxy object of /object/ that is used by an application to
  represent /object/.  Subsequent calls to application-object-proxy() on
  /object/ will not return a valid proxy [??  cpage: can a proxy be set after
  invalidation?].

  This is typically used by an application [?? cpage: Is this true?]  to tell
  the environment when the application no longer has a valid proxy for an
  object, due to unloading or restarting, for example.  If /object/ still has
  a valid proxy for other servers, /object/ is still valid, but no longer has
  any information available that would be provided by the application.  If all
  proxies are invalidated, the object may become entirely invalid, after which
  time it may no longer be used by the environment.


  application-object-address                           [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the memory address of an application object.

  Arguments: server       An instance of <server>.
             object       An instance of <application-object>.

  Values:    address      An instance of <string>.

  Description:

  Returns the memory address of /object/ as a string that represents the
  address in hexadecimal format.  The <application> server actually implements
  this, with the other two servers deferring to it.


  application-object-class                             [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the class of an application object from the target application.

  Arguments: server       An instance of <server>.
             object       An instance of <application-object>.

  Values:    class        An instance of <class-object> or #f.

  Description:

  Returns the class of /object/ from the target application.  If /object/ does
  NOT appear to be a Dylan object created by the target application, then this
  function returns #f.  For example, for <foreign-object>s and
  <breakpoint-object>s, this function returns #f.



3.3 Application and Compiler Objects
==============================================================================

  <application-and-compiler-object>                      [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of environment objects with both application and compiler proxies.

  Superclasses:  <application-object> <compiler-object>

  Init-keywords:

    application-object-proxy:
                 Inherited from <application-object>.
    compiler-object-proxy:
                 Inherited from <compiler-object>.

  Description:

  The class of environment objects with both application and compiler proxies.
  Instances are only created by instances of <application> and
  <compiler-database>, and the proxy values are private and used only by the
  appropriate instantiating server.


==============================================================================
4.0 Meta Objects
==============================================================================

  This chapter describes "meta" objects: objects that represent
  out-of-language Dylan objects, such as libraries and modules (i.e. objects
  that cannot be "seen" in Dylan programs, and only "exist" in the compiler).


4.3 Namespaces
==============================================================================

  <namespace-object>


  Functions on <namespace-object>
  ----------------------------------------------------------------------------


4.3.1 Libraries
---------------

  <library-object>


  Functions on <library-object>
  ----------------------------------------------------------------------------

    - library-modules
    - library-project
    - do-library-modules


4.3.2 Modules
-------------

  <module-object>

  Functions on <module-object>
  ----------------------------------------------------------------------------

    - do-module-variables
    - find-module
    - find-module-variable
    - module-library


4.3.3 Names
-----------

  <name-object>


  Functions on <name-object>
  ----------------------------------------------------------------------------

    - name-type
    - name-value
    - name-module
    - name-imported?
    - name-exported?


4.4 Definitions
==============================================================================

  <definition-object>


  Functions on <definition-object>
  ----------------------------------------------------------------------------

  [?? cpage: The source and code location information is currently under
  consideration and this information may change.]

  definition-source-location                           [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the source location of a definition object.

  Arguments: server       An instance of <server>.
             object       An instance of <definition-object>.

  Values:    location     An instance of <source-locator> [?? cpage] or #f.

  Description:

  Returns the source /location/ of the start of the definition /object/, or #f
  if either it has no source location, or source location information is not
  otherwise available [?? cpage].  This can be used to get the source code
  that was compiled to create the definition object.


  definition-code-locations                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the code locations of a definition object.

  Arguments: server       An instance of <server>.
             object       An instance of <definition-object>.

  Values:    locations    An instance of <sequence> [?? cpage: or #f?].

  Description:

  Returns a sequence containing the code locations of /object/, [?? cpage: or
  #f?].  The code locations represent debugging points (e.g. places where
  breakpoints can be set) within the definition.


  definition-code-location-character-offset            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the character offset of a code location in a definition object.

  Arguments: server       An instance of <server>.
             object       An instance of <definition-object>.
             location     An instance of <code-location>.

  Values:    offset       An instance of <integer>.

  Description:

  Returns the character /offset/ of a code /location/ within the source of a
  definition /object/.  This is used to map code locations to positions in the
  source, for displaying breakpoints, for example.


  do-used-definitions                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Maps a function over the used definitions of a definition object.

  Arguments: function     An instance of <function>.
             server       An instance of <server>.
             definition   An instance of <definition-object>.
       #key  modules      An instance of [?? cpage].
             libraries    An instance of [?? cpage].
             client       An instance of <object> [?? cpage].

  Values:    None.

  Description:

  Maps a /function/ over the used definitions of (i.e. definitions that are
  referenced by) a definition /object/.  [?? cpage: what do /modules/ and
  /libraries/ do?]

  The /function/ takes two parameters.  The first is an instance of
  <definition-object>, and the second is the /client/ [?? cpage].

  /client/ is the client on whose behalf this function is called.  It is
  passed to the /function/, and may be used to dispatch to the appropriate
  method, if /function/ is a generic function [?? cpage].


  do-client-definitions                                [Open Generic Function]
  ----------------------------------------------------------------------------
  Maps a function over the client definitions of a definition object.

  Arguments: function     An instance of <function>.
             server       An instance of <server>.
             definition   An instance of <definition-object>.
       #key  modules      An instance of [?? cpage].
             libraries    An instance of [?? cpage].
             client       An instance of <object> [?? cpage].

  Values:    None.

  Description:

  Maps a /function/ over the client definitions of (i.e. definitions that
  reference) a definition /object/.  [?? cpage: what do /modules/ and
  /libraries/ do?]

  The /function/ takes two parameters.  The first is an instance of
  <definition-object>, and the second is the /client/ [?? cpage].

  /client/ is the client on whose behalf this function is called.  It is
  passed to the /function/, and may be used to dispatch to the appropriate
  method, if /function/ is a generic function [?? cpage].


  definition-used-definitions                                       [Function]
  ----------------------------------------------------------------------------
  Returns the used definitions of a definition object.

  Arguments: server       An instance of <server>.
             definition   An instance of <definition-object>.
       #key  modules      An instance of [?? cpage].
             libraries    An instance of [?? cpage].
             client       An instance of <object> [?? cpage].

  Values:    used         An instance of <sequence>.

  Description:

  Returns a sequence of the used definitions of (i.e. definitions that are
  referenced by) a definition /object/.  [?? cpage what do /modules/ and
  /libraries/ do?]

  This calls do-used-definitions() and maps each element into the collection.

  /client/ is the client on whose behalf this function is called.  It is
  passed to do-used-definitions() [?? cpage].


  definition-client-definitions                                     [Function]
  ----------------------------------------------------------------------------
  Returns the client definitions of a definition object.

  Arguments: server       An instance of <server>.
             definition   An instance of <definition-object>.
       #key  modules      An instance of [?? cpage].
             libraries    An instance of [?? cpage].
             client       An instance of <object> [?? cpage].

  Values:    clients      An instance of <sequence>.

  Description:

  Returns a sequence of the client definitions of (i.e. definitions that
  reference) a definition /object/.  [?? cpage what do /modules/ and
  /libraries/ do?]

  This calls do-client-definitions() and maps each element into the
  collection.

  /client/ is the client on whose behalf this function is called.  It is
  passed to do-client-definitions() [?? cpage].


4.5 Macros
==============================================================================

  <macro-object>


4.6 Variables and Constants
==============================================================================

  <variable-object>

  Functions on <variable-object>
  ----------------------------------------------------------------------------

    - variable-type
    - variable-value


4.6.1 Module Variables
----------------------

  <module-variable-object>


4.6.2 Constants
---------------

  <constant-object>


4.6.3 Local Variables
---------------------

  <local-variable-object>


4.7 Slots
==============================================================================

  <slot-object>                                                        [Class]
  ----------------------------------------------------------------------------
  The class of slots.

  Superclasses:  <compiler-object>

  Init-keywords:

    compiler-object-proxy:
                 Inherited from <compiler-object>.

  Description:

  The class of slots.  More properly, the class of slot definitions -- they
  describe slot options, init-keywords, etc.


  Functions on <slot-object>
  ----------------------------------------------------------------------------

    - slot-class
    - slot-getter
    - slot-setter
    - slot-type
    - slot-init-value
    - slot-init-function
    - slot-init-keyword
    - slot-allocation


4.8 Composite Objects
==============================================================================

  <composite-object>                                                   [Class]
  ----------------------------------------------------------------------------
  The class of objects with arbitrary browsable contents.

  Superclasses:  <application-object>

  Init-keywords:

    application-object-proxy:
                 Inherited from <application-object>.

  Description:

  The class of application objects with arbitrary contents, such as
  collections and instances with slots.


  Functions on <composite-object>
  ----------------------------------------------------------------------------

  composite-object-size                                [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the number of elements in a composite object.

  Arguments: server       An instance of <server>.
             object       An instance of <composite-object>.
       #key  inherited?   An instance of <boolean>.  The default is #f.

  Values:    size         An instance of <integer> or #f.

  Description:

  Returns the number of elements in a composite object, or #f if the size is
  not available [?? cpage: Is this description of #f correct?].


  composite-object-contents                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the UI-presentable contents of a composite object.

  Arguments: server       An instance of <server>.
             object       An instance of <composite-object>.
       #key  inherited?   An instance of <boolean>.  The default is #f.

  Values:    names        An instance of <sequence>.
             values       An instance of <sequence>.

  Description:

  Returns the /names/ and /values/ of the contents of /object/.  Each element
  n of /names/ is a UI-presentable string that names, or describes, the
  corresponding element n of /values/, which is the value for that content
  element.  For example, the contents of an object with slots is the slot
  names and values, and the contents of a collection is the element key names
  and values.


==============================================================================
5.0 Dylan Objects
==============================================================================

  This chapter describes objects that represent in-language Dylan objects,
  such as collections, functions, and booleans.


  <dylan-object>                                         [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of in-language Dylan objects.

  Superclasses:  <environment-object>

  Init-keywords: None.

  Description:

  The class of in-language Dylan objects.


  <dylan-application-object>                             [Open Abstract Class]
  ----------------------------------------------------------------------------
  The class of Dylan objects with application proxies.

  Superclasses:  <dylan-object> <application-object>

  Init-keywords:

    application-object-proxy:
                 Inherited from <application-object>.

  Description:

  The class of Dylan in-language objects with application proxies.


5.1 Types
==============================================================================

  <type-object>


5.1.1 Classes
-------------

  <class-object>


  Functions on <class-object>
  ----------------------------------------------------------------------------

    - do-direct-subclasses
    - do-direct-superclasses
    - do-direct-methods
    - do-direct-slots
    - do-all-superclasses
    - do-all-slots
    - do-init-keywords
    - class-direct-subclasses
    - class-direct-superclasses
    - class-direct-methods
    - class-direct-slots
    - class-init-keywords


5.1.2 Singletons
----------------

  <singleton-object>


  Functions on <singleton-object>
  ----------------------------------------------------------------------------

    - singleton-object-value



5.2 Simple Objects
==============================================================================

5.2.1 Characters
----------------

  <character-object>                                                   [Class]
  ----------------------------------------------------------------------------
  The class of characters.

  Superclasses:  <dylan-application-object>

  Init-keywords:

    application-object-proxy:
                 Inherited from <application-object>.

  Description:

  The class of characters.


5.2.2 Symbols
-------------

  <symbol-object>


5.2.3 Booleans
--------------

  <boolean-object>


5.3 Numbers
==============================================================================

  <number-object>


5.4 Collections
==============================================================================

  <collection-object>


  Functions on <collection-object>
  ----------------------------------------------------------------------------

  collection-keys                                      [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the keys of a collection object.

  Arguments: server       An instance of <server>.
             collection   An instance of <collection-object>.
       #key  range        An instance of <range> or #f.  The default is #f.

  Values:    keys         An instance of <sequence> or #f.

  Description:

  Returns a sequence containing the keys of the /collection/, or #f if the
  collection has no keys.  /range/ specifies a subset of keys to return, where
  the range bounds specify the keys by index, inclusively.  The range must
  also be positively increasing by 1.  The range argument can be used to get
  the keys of large sequences without consuming unreasonable amounts of memory
  or time.

  Ignoring the /range/ parameter, this is roughly equivalent to Dylan's
  key-sequence() function.


  collection-elements                                  [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the elements of a collection object.

  Arguments: server       An instance of <server>.
             collection   An instance of <collection-object>.
       #key  range        An instance of <range> or #f.  The default is #f.

  Values:    elements     An instance of <sequence> or #f.

  Description:

  Returns a sequence containing the elements of the /collection/, or #f if the
  collection has no elements.  /range/ specifies a subset of elements to
  return, where the range bounds specify the elements by index, inclusively.
  The range must also be positively increasing by 1.  The range argument can
  be used to get the elements of large sequences without consuming
  unreasonable amounts of memory or time.


5.4.1 Pairs
-----------

  <pair-object>


  Functions on <pair-object>
  ----------------------------------------------------------------------------

  [?? cpage: Should we consolidate these into a single function that returns a
  <pair> or perhaps multiple values?]

  pair-head                                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the head value of a pair object.

  Arguments: server       An instance of <server>.
             pair         An instance of <pair-object>.

  Values:    head         An instance of <application-object>.

  Description:

  Returns the head value of /pair/.


  pair-tail                                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the tail value of a pair object.

  Arguments: server       An instance of <server>.
             pair         An instance of <pair-object>.

  Values:    tail         An instance of <application-object>.

  Description:

  Returns the tail value of /pair/.


5.4.2 Ranges
------------

  <range-object>


  Functions on <range-object>
  ----------------------------------------------------------------------------

  [?? cpage: Should we consolidate these into a single function that returns
  multiple values?]

  range-start                                          [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the start value of a range object.

  Arguments: server       An instance of <server>.
             range        An instance of <range-object>.

  Values:    start        An instance of <number> [?? cpage: <real>?].

  Description:

  Returns the start value of /range/.


  range-end                                            [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the end value of a range object.

  Arguments: server       An instance of <server>.
             range        An instance of <range-object>.

  Values:    end          An instance of <number> [?? cpage] or #f.

  Description:

  Returns the end value of /range/, or #f if the range is infinite [??
  cpage].


  range-by                                             [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the step value of a range object.

  Arguments: server       An instance of <server>.
             range        An instance of <range-object>.

  Values:    by           An instance of <number> [?? cpage].

  Description:

  Returns the step /by/ value of the /range/.


5.4.3 Strings
-------------

  <string-object>                                                      [Class]
  ----------------------------------------------------------------------------
  The class of strings.

  Superclasses:  <dylan-application-object>

  Init-keywords:

    application-object-proxy:
                 Inherited from <application-object>.

  Description:

  The class of strings.


5.5 Functions
==============================================================================

  <function-object>


  Functions on <function-object>
  ----------------------------------------------------------------------------

      - function-parameters


5.5.1 Generic Functions
-----------------------

  <generic-function-object>


  Functions on <generic-function-object>
  ----------------------------------------------------------------------------

      - do-generic-function-methods
      - generic-function-methods


5.5.2 Methods
-------------

  <method-object>


  Functions on <method-object>
  ----------------------------------------------------------------------------

      - method-generic-function
      - method-specializers


6.0 Custom Browsing Objects
==============================================================================

  This chapter describes objects that are used to implement browsing for
  library-specific objects, such as DUIM pane hierarchies.


6.1 DUIM Objects
----------------

  <duim-object>


  Functions on <duim-object>
  ----------------------------------------------------------------------------

      - duim-object-composite?
      - do-duim-object-children
      - duim-object-children


6.1.1 Frames
------------

  <duim-frame>


6.1.2 Sheets
------------

  <duim-sheet>


6.1.3 Gadgets
-------------

  <duim-gadget>


  Functions on <duim-gadget>
  ----------------------------------------------------------------------------

  - duim-gadget-label


7.0 Compilation
==============================================================================

7.1 Warnings
------------

  <compiler-warning-object>

  Functions on <compiler-warning-object>
  ----------------------------------------------------------------------------

      - warning-object-message
      - warning-object-definition
      - warning-object-source-locator
      - do-compiler-warnings
      - definition-compiler-warnings


8.0 Debugging
==============================================================================

  This chapter describes objects used to implement debugging, such as
  breakpoints and threads.


8.1 Breakpoints
---------------

  <breakpoint-object>


  Functions on <breakpoint-object>
  ----------------------------------------------------------------------------

  breakpoint-code-location                             [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the code location of a breakpoint object.

  Arguments: breakpoint   An instance of <breakpoint-object>.

  Values:    location     An instance of <code-location> [?? cpage].

  Description:

  Returns the code /location/ of the /breakpoint/.


  breakpoint-definition                                [Open Generic Function]
  ----------------------------------------------------------------------------
  Returns the definition object of a breakpoint object.

  Arguments: breakpoint   An instance of <breakpoint-object>.

  Values:    definition   An instance of <definition-object>.

  Description:

  Returns the /definition/ in which the source and code locations of
  /breakpoint/ "reside" [?? cpage: Can you think of a better explanation?].


  breakpoint-type                                    [Sealed Generic Function]
  ----------------------------------------------------------------------------
  Returns the type of a breakpoint object.

  Arguments: breakpoint   An instance of <breakpoint-object>.

  Values:    type         An instance of <breakpoint-type>.

  Description:

  Returns the /type/ of /breakpoint/.

  [?? cpage: Currently, this is a symbol, one of #"break", #"step", #"trace",
  or #"profile".  This is all subject to change, but here's the current
  explanation.]

  Breakpoint type is one of:

  #"break" is a simple breakpoint.

  #"step" is a "one-shot" stepping breakpoint that is removed immediately when
  (if) the program has stopped at it.

  #"trace" may mean "trace the function", in which case it can only be set at
  the start of a function, or it may mean "emit a message to the trace log",
  in which case it can be set at any breakpoint; this has yet to be decided.

  #"profile" may mean "collect profiling information at this point", or it may
  mean "turn profiling on/off" at this point, or it may mean "turn profiling
  on/off around this function", in which case it can only be set at the start
  of a function.


  breakpoint-type-setter                             [Sealed Generic Function]
  ----------------------------------------------------------------------------
  Sets the type of a breakpoint object.

  Arguments: breakpoint   An instance of <breakpoint-object>.
             type         An instance of <breakpoint-type>.

  Values:    type         An instance of <breakpoint-type>.

  Description:

  Sets the /type/ of /breakpoint/, and returns the /type/ value.


  breakpoint-enabled?                                  [Sealed Generic Function]
  ----------------------------------------------------------------------------
  Tests whether a breakpoint object is enabled.

  Arguments: breakpoint   An instance of <breakpoint-object>.

  Values:    enabled?     An instance of <boolean>.

  Description:

  Returns true if /breakpoint/ is enabled.  Breakpoints may be enabled and
  disabled without the burden of deleting and recreating them.


  breakpoint-enabled?-setter                           [Sealed Generic Function]
  ----------------------------------------------------------------------------
  Set whether a breakpoint object is enabled.

  Arguments: breakpoint   An instance of <breakpoint-object>.
             enabled?     An instance of <boolean>.

  Values:    enabled?     An instance of <boolean>.

  Description:

  Sets whether /breakpoint/ is enabled.


  breakpoint-test                                    [Sealed Generic Function]
  ----------------------------------------------------------------------------
  Returns the test function of a breakpoint object.

  Arguments: breakpoint   An instance of <breakpoint-object>.

  Values:    test         An instance of <function> or #f.

  Description:

  Returns the /test/ function of a /breakpoint/, or #f if it does not have
  one.  Breakpoint test functions are executed each time a break point is
  encountered and if it returns #t, the application stops, otherwise, the
  breakpoint is "ignored" and execution continues.  [?? cpage: It is not yet
  clear whether this functionality will be implemented for Kansas.]


  breakpoint-test-setter                             [Sealed Generic Function]
  ----------------------------------------------------------------------------
  Set the test function of a breakpoint object.

  Arguments: breakpoint   An instance of <breakpoint-object>.
             test         An instance of <function>.

  Values:    test         An instance of <function>.

  Description:

  Sets the /test/ function of a /breakpoint/.  [?? cpage: It isn't clear what
  the signature of a test function is, but it may take the breakpoint and some
  other context.]


8.2 Stack Frames
----------------

  <stack-frame-object>

  Functions on <stack-frame-object>
  ----------------------------------------------------------------------------

      - stack-frame-function


8.3 Threads
-----------

  <thread-object>                                                      [Class]
  ----------------------------------------------------------------------------
  The class of program execution threads.

  Superclasses:  <application-object>

  Init-keywords:

    application-object-proxy:
                 Inherited from <application-object>.

  Description:

  The class of program execution threads.


  Functions on <thread-object>
  ----------------------------------------------------------------------------

  record-thread-message                                         [Open Generic]
  ----------------------------------------------------------------------------
  Pass debug-message()s to the tool that displays trace output and to the
  Interactor component for display.

  Arguments: project      An instance of <project-object>.
             thread       An instance of <thread-object>.
             string       An instance of <string>.

  Values:    None.

  Description:

  Pass debug-message()s to the tool that displays trace output and to the
  Interactor component for display.

  [?? chiles: we may need to create additional environment protocols to
  support this function, such as operations on the trace-output display
  component and the Interactor component.]


8.4 Execution Contexts
----------------------

  <execution-id>                                                        [Type]
  ----------------------------------------------------------------------------
  The type of objects that uniquely identify an evaluation request that's been
  processed by the compiler.  [?? chiles: for now this type is just \==
  <object>.]

  Superclasses:  <object>

  Init-keywords: None.

  Description:

  These uniquely identify an evaluation request that's been processed by the
  compiler.  [?? chiles: for now this type is just \== <object>.]  See
  project-execute-code().


  <execution-info>                                              [Sealed Class]
  ----------------------------------------------------------------------------
  The class of objects that represent a unique execution request to the target
  application.  [?? chiles: This class may evolve when we integrate the
  interactor with the actual environment protocols.]

  Superclasses:  <object>

  Init-keywords:

    id:          An instance of <execution-id> specifying the execution id
                 returned from the Compiler-interface library.
    thread:      An instance of <thread-object> specifying the thread on
                 which the execution request was made.

  Description:

  The class of execution requests via project-execute-code().  When an
  execution request delivers return values back to the development
  environment, the values come back with the unique execution-info-id()
  associated with the request.  This ID in turn can be mapped to the
  <execution-info> object via project-execution-info().

  The id: keyword supplies the value for the execution-info-id() slot.  [??
  chiles: For now, this is \== to <object>.]

  The thread: keyword supplies the value for the execution-info-thread() slot.
