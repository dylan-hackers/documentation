
		-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
		Editor Describe-Operation Proposal
		-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

* INTRODUCTION

In the specification document that lists the possible DylanWorks "Editor"
operations, the "describe" operation was intended to denote displaying the
parameters for a function call, and 'other similar pieces of information'.

This document specifies the scope of the "describe" operation further, and
outlines its behaviour.

* REQUIREMENTS

Extrapolating from the "function parameters" exemplar to something more
general; the "describe" operation would seem to be concerned with very fast,
and very context-specific, help within the source-code authoring task.

The programmer needs some assistence in the very midst of her coding; She
doesn't want to break off and do a lot of browsing. She doesn't want to insert
a whole lot of prefabricated syntax into her editor window; that's another
operation. She doesn't want to have to supply very much extra information (if
any) beyond the editor state. She may not even want to do explicitly do
anything extra to actually invoke this operation: she may want this
information at her elbow all the time (continuously updated). She doesn't want
to have to sort through a whole lot of output for the thing she is looking
for.

In summary, the "describe" operation should:

(1) show a precise and strictly limited amount of information;

(2) extract the source of the query from the editor state
    (without requiring additional input, if any);

(3) deliver the results back into the editing context/display;

(4) it must be fast and easy to invoke, or possible to set as
    auto-invoked;

(5) it must be fast to return and display the results;

(6) it must not disturb the screen real-estate or current window very
    much (if at all).

* DESIGN

** INFORMATION

As the source of the query we choose to use the currently selected
identifier in the editor window. By "selected", we mean whatever the
natural selection mechanism or criterion is for word-like objects in
the editor. For example, GNU Emacs 19 has a CURRENT-WORD function that
finds the word the cursor is on, adjacent to, or otherwise near. The
latter search can be prevented if the STRICT parameter is non-NIL. At
the other end of the scale primitive editors will probably require
uses to explicitly select the identifier by a making a gesture (eg
double clicking) that creates a spanning region.

For the result of the query the underlying rule is that the information
displayed is what you would see in the "first line" of the definition
of the binding, together with some information about the logical and
physical origin of the binding. (NB "first line" is a logical unit and
not necessarily what actually appeared on the definition's first line.)

The initial part of the "first-line" information should be the
extended name (eg "method foo") that is used elsewhere in the
environment UI to allow the user to refer to the binding [TODO: I need
to check that my list matches Andy's UI in this regard]; the remaining
part is determined by the type of the binding.

Here are the various kinds of name binding that could be selected, together
with the proposed information that a "describe" operation will collect and
display to the user.

	BINDING			INFORMATION DISPLAYED

	generic function	generic <name> (<parameters>) => (<results>)
	function		function <name> (<parameters>) => (<results>)
	method			method <name> (<parameters>) => (<results>)
	macro			macro <first-lhs-pattern>

	class			class <name> (<superclasses>)
	type			constant <name> = <expression>

	constant		constant <name> :: <type> = <expression>
	variable		variable <name> :: <type> = <expression>

	module			module <name>
	library			library <name>
			
	all			<library>, <module>, <file>, <line>

We don't address the issue of user-defined defining forms in this draft,
except to note that it would be convenient to support this in some later
release.

For generic functions we build a logical "first line" that includes
all the keyword parameters accepted by any of its methods. For "make"
we also include those keyword parameters that are defined in slot
descriptions.

** DISPLAY

Ideally, the describe-operation output would be displayed within the editor
concerned (eg in the Emacs modeline). However, for Kansas we are not
addressing the issues of returning results back to the editor. Instead the
Dylan environment will provide a special viewer, called (for the sake of
argument) the "Describer", for this purpose.

The "Describer" should have the following characteristics:

*** SIZE AND SHAPE

	+ small window
	  (=< 6 text lines high, =< 80 columns wide, plus some controls)

	+ interactively resizeable

	+ remembers previous position and shape (option)

	+ vertical scroll bar if the information is
	  too long (eg due to keyword init args)

	+ no horizontal scroll bar, the information is wrapped or
	  pretty printed to the window width

*** INTERACTIVITY

	+ reused each time (after startup), ie only one of them
	  is ever active at same time

	+ non-modal (stays until closed, no thread waits for it)

	+ does not get focus unless user selects it
	  (even on startup)

	+ stays on top of other windows (option)

	+ the window remembers history of previous results

*** OPERATIONS

	+ buttons/controls/menus:
	  close, copy (to clipboard), browse*, history*, option*
	  (* various)

	+ right button on output items leads to normal context menu

	+ closes on use (when user presses button) (option)

*** MISCELLANEOUS

	+ updates automatically (option)

	+ remembers options

* OBSERVATION

This facility is a little like the "Context Window" that docks at the
bottom of Source Insight's main source code window. The context window
displays an automatically updated view of the origin of the identifier
selected by the cursor.

The "Describer" may move further in the direction of this rival facility over
time.
